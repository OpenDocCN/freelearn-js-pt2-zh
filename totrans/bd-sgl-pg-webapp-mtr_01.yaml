- en: Chapter 1. Getting Started with Meteor
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章. 开始使用Meteor
- en: Welcome to this book on Meteor. Meteor is an exciting new JavaScript framework,
    and we will soon see how easy it is to achieve real and impressive results with
    less code.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到关于Meteor的这本书。Meteor是一个令人兴奋的新JavaScript框架，我们将很快看到如何用更少的代码实现真实且令人印象深刻的结果。
- en: In this chapter, we will learn what the requirements are and what additional
    tools we need to get started. We will see how simple it is to get our first Meteor
    application running and what a good basic folder structure for a Meteor app could
    be. We will also learn about Meteor's automatic build process and its specific
    way of loading files.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习系统要求以及我们开始需要使用哪些额外的工具。我们将了解如何轻松地运行我们的第一个Meteor应用程序，以及一个Meteor应用程序可能的良好基本文件夹结构。我们还将了解Meteor的自动构建过程及其特定的文件加载方式。
- en: We will also see how to add packages using Meteors official packaging system.
    At the end of the chapter, we will take a short look at Meteor's command-line
    tool and some of its functions.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将了解如何使用Meteor官方的包管理系统添加包。在本章末尾，我们将简要查看Meteor的命令行工具及其一些功能。
- en: 'To bring it together, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 为了总结，我们将涵盖以下主题：
- en: The full-stack framework of Meteor
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Meteor的全栈框架
- en: Meteor's requirements
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Meteor的系统要求
- en: Installing Meteor
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Meteor
- en: Adding basic packages
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加基本包
- en: Meteor's folder conventions and loading order
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Meteor的文件夹约定和加载顺序
- en: Meteor's command-line tool
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Meteor的命令行工具
- en: The full-stack framework of Meteor
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Meteor的全栈框架
- en: Meteor is not just a JavaScript library such as jQuery or AngularJS. It's a
    full-stack solution that contain frontend libraries, a Node.js-based server, and
    a command-line tool. All this together lets us write large-scale web applications
    in JavaScript, on both the server and client, using a consistent API.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Meteor不仅仅是一个像jQuery或AngularJS这样的JavaScript库。它是一个包含前端库、基于Node.js的服务器和命令行工具的全栈解决方案。所有这些加在一起让我们可以用JavaScript编写大规模的网络应用程序，无论是在服务器端还是客户端，都可以使用一致的API。
- en: Even with Meteor being quite young, already a few companies such as [https://lookback.io](https://lookback.io),
    [https://respond.ly](https://respond.ly), and [https://madeye.io](https://madeye.io)
    use Meteor in their production environment.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Meteor还相当年轻，但已经有几家公司，如[https://lookback.io](https://lookback.io)、[https://respond.ly](https://respond.ly)和[https://madeye.io](https://madeye.io)，在其生产环境中使用Meteor。
- en: If you want to see for yourself what's made with Meteor, take a look at [http://madewith.meteor.com](http://madewith.meteor.com).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想亲自看看用Meteor制作的东西，请查看[http://madewith.meteor.com](http://madewith.meteor.com)。
- en: Meteor makes it easy for us to build web applications quickly and takes care
    of the boring processes such as file linking, minifying, and concatenating of
    files.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Meteor使我们能够快速构建网络应用程序，并处理诸如文件链接、文件压缩和文件合并等无聊的过程。
- en: 'Here are a few highlights of what is possible with Meteor:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在Meteor下可以实现的一些亮点：
- en: We can build complex web applications amazingly fast using templates that automatically
    update themselves when data changes
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以使用模板来构建复杂的网络应用程序，这些模板在数据更改时会自动更新，从而大大提高速度。
- en: We can push new code to all clients on the fly while they are using our app
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在我们应用程序运行的同时，我们可以将新代码推送到所有客户端。
- en: Meteor core packages come with a complete account solution, allowing a seamless
    integration of Facebook, Twitter, and more
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Meteor的核心包带有一个完整的账户解决方案，允许与Facebook、Twitter等无缝集成。
- en: Data will automatically be synced across clients, keeping every client in the
    same state in almost real time
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据将自动在客户端之间同步，几乎实时地保持每个客户端在相同的状态。
- en: Latency compensation will make our interface appear super fast while the server
    response happens in the background.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 延迟补偿将使我们的界面在服务器响应后台进行时看起来超级快速。
- en: With Meteor, we never have to link files with the `<script>` tags in HTML. Meteor's
    command-line tool automatically collects JavaScript or CSS files in our application's
    folder and links them in the `index.html` file, which is served to clients on
    initial page load. This makes structuring our code in separate files as easy as
    creating them.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Meteor时，我们永远不需要在HTML的`<script>`标签中链接文件。Meteor的命令行工具会自动收集我们应用程序文件夹中的JavaScript或CSS文件，并在初始页面加载时将它们链接到`index.html`文件中。这使得将我们的代码结构化到单独的文件中变得像创建它们一样简单。
- en: Meteor's command-line tool also watches all files inside our application's folder
    for changes and rebuilds them on the fly when they change.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Meteor的命令行工具还会监控我们应用程序文件夹内的所有文件，如有更改，就会在文件更改时实时重建它们。
- en: Additionally, it starts a Meteor server that serves the app's files to the clients.
    When a file changes, Meteor reloads the site of every client while preserving
    its state. This is called a **hot code reload**.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，它还会启动一个Meteor服务器，为客户端提供应用文件。当文件发生变化时，Meteor会重新加载每个客户端的网站，同时保留其状态。这被称为**热代码重载**。
- en: In production, the build process also concatenates and minifies our CSS and
    JavaScript files.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产环境中，构建过程还会对我们的CSS和JavaScript文件进行合并和压缩。
- en: By simply adding the `less` and `coffee` core packages, we can even write all
    styles in LESS and code in CoffeeScript with no extra effort.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 仅仅通过添加`less`和`coffee`核心包，我们甚至可以不费吹灰之力地用LESS写所有样式和用CoffeeScript写代码。
- en: The command-line tool is also the tool for deploying and bundling our app so
    that we can run it on a remote server.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 命令行工具也是用于部署和捆绑我们的应用的工具，这样我们就可以在远程服务器上运行它。
- en: Sounds awesome? Let's take a look at what's needed to use Meteor.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 听起来很棒吗？让我们看看使用Meteor需要什么。
- en: Meteor's requirements
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Meteor的要求
- en: Meteor is not just a JavaScript framework and server. As we saw earlier, it
    is also a command-line tool that has a whole build process for us in place.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Meteor不仅仅是JavaScript框架和服务器。正如我们之前所看到的，它也是一个命令行工具，为我们整个构建过程做好准备。
- en: 'Currently, the operating systems that are officially supported are as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，官方支持的操作系统如下：
- en: Mac OS X 10.6 and above
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mac OS X 10.6及以上
- en: Linux x86 and x86_64 systems
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux x86和x86_64系统
- en: Windows
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows
- en: Note
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The Windows installer is still in development at the time of writing this book.
    Please follow the wiki page at [https://github.com/meteor/meteor/wiki/Preview-of-Meteor-on-Windows](https://github.com/meteor/meteor/wiki/Preview-of-Meteor-on-Windows).
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在撰写本书时，Windows安装程序仍在开发中。请关注[https://github.com/meteor/meteor/wiki/Preview-of-Meteor-on-Windows](https://github.com/meteor/meteor/wiki/Preview-of-Meteor-on-Windows)的wiki页面。
- en: This book and all examples use *Meteor 1.0*.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 本书和所有示例都使用*Meteor 1.0*。
- en: Using Chrome's developer tools
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Chrome的开发者工具
- en: We will also need Google Chrome or Firefox with the Firebug add-on installed
    to follow examples that require a console. The examples, screenshots, and explanations
    in this book will use Google Chrome's developer tools.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要安装了Firebug插件的Google Chrome或Firefox来跟随需要控制台的示例。本书中的示例、屏幕截图和解释将使用Google Chrome的开发者工具。
- en: Using Git and GitHub
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Git和GitHub
- en: I highly recommend using **GitHub** when working with web projects, such as
    the one we will work on in this book. Git and GitHub help us to back up our progress
    and let us always go back to previous states while seeing what we've changed.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我强烈推荐在使用我们将在本书中工作的网页项目时使用**GitHub**。Git和GitHub帮助我们备份我们的进度，并让我们总能回到之前的阶段，同时看到我们的更改。
- en: Git is a version control system, which was created in 2005 by the inventor of
    Linux, Linus Torvalds.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Git是一个版本控制系统，由Linux的发明者、Linus Torvalds于2005年创建。
- en: With Git, we can *commit* any state of our code and later go back to that exact
    state. It also allows multiple developers to work on the same code base and merge
    their results together in an automated process. If conflicts appear in this process,
    the merging developer is able to resolve those *merge conflicts* by removing the
    unwanted lines of code.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Git，我们可以*提交*我们代码的任何状态，并稍后回到那个确切的状态。它还允许多个开发者在同一代码库上工作，并通过自动化过程合并他们的结果。如果在合并过程中出现冲突，合并开发者可以通过删除不需要的代码行来解决这些*合并冲突*。
- en: I also recommend registering an account at [http://github.com](http://github.com),
    as this is the easiest way to browse our code history. They have an easy to use
    interface as well as a great Windows and Mac app.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我还建议在[http://github.com](http://github.com)注册一个账户，这是浏览我们代码历史的最简单方式。他们有一个易于使用的界面，以及一个很棒的Windows和Mac应用。
- en: To follow the code examples in this book, you can download all code examples
    for each chapter from the book's web page at [https://www.packtpub.com/books/content/support/17713](https://www.packtpub.com/books/content/support/17713).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟随本书中的代码示例，你可以从本书的网页[https://www.packtpub.com/books/content/support/17713](https://www.packtpub.com/books/content/support/17713)下载每个章节的全部代码示例。
- en: Additionally, you will be able to clone the book's code from [http://github.com/frozeman/book-building-single-page-web-apps-with-meteor](http://github.com/frozeman/book-building-single-page-web-apps-with-meteor).
    Every tag in this repository equals to one chapter of the book and the commit
    history will help you to see the changes, which were made in each chapter.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您将能够从[http://github.com/frozeman/book-building-single-page-web-apps-with-meteor](http://github.com/frozeman/book-building-single-page-web-apps-with-meteor)克隆本书的代码。这个仓库中的每个标签等于书中的一个章节，提交历史将帮助您查看每个章节所做的更改。
- en: Installing Meteor
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Meteor
- en: 'Installing Meteor is as easy as running the following command in the terminal:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Meteor就像在终端中运行以下命令一样简单：
- en: '[PRE0]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: That's it! This will install the Meteor command-line tool (`$ meteor)`, the
    Meteor server, MongoDB database, and the Meteor core packages (libraries).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！这将安装Meteor命令行工具（`$ meteor`），Meteor服务器，MongoDB数据库和Meteor核心包（库）。
- en: Note
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: All command-line examples are run and tested on Mac OS X and can differ on Linux
    or Windows systems.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 所有命令行示例都在Mac OS X上运行和测试，可能会在Linux或Windows系统上有所不同。
- en: Installing Git
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Git
- en: To install Git, I recommend installing the GitHub app from [https://mac.github.com](https://mac.github.com)
    or [https://windows.github.com](https://windows.github.com). We can then simply
    go inside the app to **Preferences** and click on the **Install Command Line Tools**
    button inside the **Advanced** tab.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Git，我建议从[https://mac.github.com](https://mac.github.com)或[https://windows.github.com](https://windows.github.com)安装GitHub应用程序。然后我们只需进入应用程序，点击**首选项**，并在**高级**选项卡内点击**安装命令行工具**按钮。
- en: If we want to install Git manually and set it up via the command line, we can
    download the Git installer from [http://git-scm.com](http://git-scm.com) and follow
    this great guide at [https://help.github.com/articles/set-up-git](https://help.github.com/articles/set-up-git).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想手动安装Git并通过命令行进行设置，我们可以从[http://git-scm.com](http://git-scm.com)下载Git安装程序，并遵循[https://help.github.com/articles/set-up-git](https://help.github.com/articles/set-up-git)这个很好的指南。
- en: 'Now, we can check whether everything was installed successfully by opening
    the terminal and running the following command:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以通过打开终端并运行以下命令来检查一切是否成功安装：
- en: '[PRE1]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Tip
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您在[http://www.packtpub.com](http://www.packtpub.com)账户中购买的所有Packt书籍的示例代码文件。如果您在其他地方购买了这本书，您可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，以便将文件直接通过电子邮件发送给您。
- en: 'This should return us a list of Git options. If we get `command not found:
    git`, we need to check whether the `git` binary was correctly added to our `PATH`
    environment variable.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '这将返回Git选项的列表。如果我们得到`command not found: git`，我们需要检查`git`二进制文件是否已正确添加到我们的`PATH`环境变量中。'
- en: If everything is fine, we are ready to create our first Meteor app.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，我们就可以准备创建我们的第一个Meteor应用了。
- en: Creating our first app
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建我们的第一个应用
- en: 'To create our first app, we open the terminal, go to the folder where we want
    to create our new project, and enter the following commands:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建我们的第一个应用程序，我们打开终端，前往我们希望创建新项目的文件夹，并输入以下命令：
- en: '[PRE2]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Meteor will now create a folder named `my-meteor-blog`. The HTML, CSS, and
    JavaScript files that Meteor created for us inside this folder are already a fully
    working Meteor app. To see it in action, run the following commands:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Meteor现在将创建一个名为`my-meteor-blog`的文件夹。Meteor为我们在这个文件夹内创建的HTML、CSS和JavaScript文件已经是一个完整的Meteor应用程序。为了看到它的实际效果，运行以下命令：
- en: '[PRE3]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Meteor will now start a local server for us on port `3000`. Now, we can open
    our web browser and navigate to `http://localhost:3000`. We will see the app running.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Meteor现在将在端口`3000`上为我们启动一个本地服务器。现在，我们可以打开我们的网页浏览器，导航到`http://localhost:3000`。我们将看到应用程序正在运行。
- en: 'This app doesn''t do much, except showing a simple reactive example. If you
    click on the **Click Me** button, it will increase the counter:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这个应用程序除了显示一个简单的反应式示例外，没有什么作用。如果你点击**点击我**按钮，它会增加计数器：
- en: '![Creating our first app](img/00003.jpeg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![创建我们的第一个应用](img/00003.jpeg)'
- en: For later examples, we will need Google Chrome's developer tools. To open the
    console, we can press *Alt* + *command* + *I* on Mac OS X or click on the menu
    button on the upper-right corner of Chrome, select **More tools,** and then **Developer
    tools**.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 对于后面的示例，我们将需要Google Chrome的开发者工具。要打开控制台，我们可以在Mac OS X上按*Alt* + *command* + *I*，或者在Chrome的右上角点击菜单按钮，选择**更多工具**，然后选择**开发者工具**。
- en: The **Developer tools** allow us to inspect the DOM and CSS of our website,
    as well as having a console where we can interact with our website's JavaScript.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**开发者工具**允许我们查看我们网站的DOM和CSS，以及有一个控制台，我们可以在其中与我们的网站的JavaScript进行交互。'
- en: Creating a good folder structure
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个好的文件夹结构
- en: For this book, we will build our own app from scratch. This also means we have
    to set up a sustainable folder structure, which helps us to keep our code organized.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这本书，我们将从头开始构建自己的应用程序。这也意味着我们必须建立一个可持续的文件夹结构，这有助于我们保持代码的整洁。
- en: With Meteor, we are very flexible concerning our folder structure. This means
    we can put our files wherever we want, as long as they are inside the app's folder.
    Meteor treats specific folders differently, allowing us to expose files only on
    the client, the server, or both. We will take a look at those specific folders
    later.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用Meteor时，我们对文件夹结构非常灵活。这意味着我们可以把我们的文件放在任何我们想要的地方，只要它们在应用程序的文件夹内。Meteor以不同的方式处理特定的文件夹，允许我们只在外部客户端、服务器或两者上都暴露文件。我们稍后会看看这些特定的文件夹。
- en: 'But, first let''s get our hands dirty by deleting all preadd files in our newly
    created application folder and creating the following folder structure:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，首先让我们通过删除我们新创建的应用程序文件夹中所有的预添加文件，并创建以下的文件夹结构：
- en: '[PRE4]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Preadd style files
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 预添加样式文件
- en: To fully focus on the Meteor code but still have a pretty-looking blog, I strongly
    recommend to download the code that accompanies this chapter from the book's web
    page at [http://packtpub.com/books/content/support/17713](http://packtpub.com/books/content/support/17713).
    They will contain already two drop-in-place style files (`lesshat.import.less`
    and `styles.less`), which will let your example blog look pretty in the upcoming
    chapters.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能完全专注于Meteor代码但仍然拥有一个漂亮的博客，我强烈建议从书籍的网页上下载本章伴随的代码，网址为[http://packtpub.com/books/content/support/17713](http://packtpub.com/books/content/support/17713)。它们将包含两个已经可以替换的样式文件（`lesshat.import.less`和`styles.less`），这将使你在接下来的章节中的示例博客看起来很漂亮。
- en: You can also download these files directly from GitHub at [https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter1/my-meteor-blog/client/styles](https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter1/my-meteor-blog/client/styles)
    and copy them to the `my-meteor-blog/client/styles` folder manually.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以直接从GitHub下载这些文件，网址为[https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter1/my-meteor-blog/client/styles](https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter1/my-meteor-blog/client/styles)，然后手动将它们复制到`my-meteor-blog/client/styles`文件夹中。
- en: Next, we need to add some basic packages so that we can start building our app.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要添加一些基本包，这样我们就可以开始构建我们的应用程序了。
- en: Adding basic packages
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加基本包
- en: Packages in Meteor are libraries that can be added to our projects. The nice
    thing about Meteor packages is that they are self-contained units, which run out
    of the box. They mostly add either some templating functionality or provide extra
    objects in the global namespace of our project.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Meteor中的包是可以在我们的项目中添加的库。Meteor包的好处是它们是开箱即用的自包含单元。它们主要提供一些模板功能，或者在项目的全局命名空间中提供额外的对象。
- en: Packages can also add features to Meteor's build process such as the `stylus`
    package, which lets us write our app's style files with the `stylus` preprocessor
    syntax.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 包还可以为Meteor的构建过程添加功能，比如`stylus`包，它让我们可以使用`stylus`预处理器语法来编写我们应用程序的样式文件。
- en: 'For our blog, we will need two packages at first:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的博客，我们首先需要两个包：
- en: '`less`: This is a Meteor core package and will compile our style files on the
    fly to CSS'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`less`：这是一个Meteor核心包，它将我们的样式文件实时编译成CSS。'
- en: '`jeeeyul:moment-with-langs`: This is a third-party library for date parsing
    and formatting'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`jeeeyul:moment-with-langs`：这是一个用于日期解析和格式化的第三方库。'
- en: Adding a core package
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加一个核心包
- en: 'To add the `less` package, we can simply open the terminal, go to our projects
    folder, and enter the following command:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加`less`包，我们只需打开终端，前往我们的项目文件夹，并输入以下命令：
- en: '[PRE5]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now, we are able to use any `*.less` files in our project, and Meteor will automatically
    compile them in its build process for us.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以在我们的项目中使用任何`*.less`文件，Meteor将在其构建过程中自动将它们编译为我们。
- en: Adding a third-party package
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加第三方包
- en: To add a third-party package, we can simply search for packages on either [https://atmospherejs.com](https://atmospherejs.com),
    which is the frontend for Meteors packaging system, or use the command-line tool,
    `$ meteor search <package name>`.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加第三方包，我们可以在[https://atmospherejs.com](https://atmospherejs.com)上搜索包，这是Meteor打包系统的前端，或者使用命令行工具`$
    meteor search <package name>`。
- en: For our blog, we will need the `jeeeyul:moment-with-langs` package that allows
    us later to simply manipulate and format dates.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的博客，我们将需要`jeeeyul:moment-with-langs`包，它允许我们稍后简单地操作和格式化日期。
- en: Packages are namespaced with the authors name followed by a colon.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 包使用作者名加上冒号进行命名空间。
- en: 'To add the `moment` package, we simply enter the following command:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加`moment`包，我们只需输入以下命令：
- en: '[PRE6]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: After the process is done, and we restarted our app using `$ meteor`, we will
    have the `moment` object available in our app global namespace and we can make
    use of it in the upcoming chapters.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 进程完成后，我们使用`$ meteor`重新启动应用程序，我们将在应用程序的全局命名空间中拥有`moment`对象，我们可以在接下来的章节中使用它。
- en: 'Should we ever want to add only specific version of a package, we can use the
    following command:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要添加某个包的特定版本，我们可以使用以下命令：
- en: '[PRE7]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If you want a version in the 1.0.0 (but not the 2.0.0) range use the following
    command:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要1.0.0范围内的版本（而不是2.0.0），请使用以下命令：
- en: '[PRE8]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'To update only packages we can simply run the following command:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 要仅更新包，我们可以简单地运行以下命令：
- en: '[PRE9]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Additionally, we can update only a specific package using the following command:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们可以使用以下命令仅更新特定的包：
- en: '[PRE10]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: That's it! Now we are fully ready to start creating our first templates. You
    can jump right into the next chapter, but make sure you come back to read on,
    as we will now talk about Meteor's build process in more detail.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！现在我们完全准备好开始创建我们的第一个模板。您可以直接进入下一章，但请确保您回来阅读，因为我们将详细讨论Meteor的构建过程。
- en: Variable scopes
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变量作用域
- en: To understand Meteor's build process and its folder conventions, we need to
    take a quick look at variable scopes.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解Meteor的构建过程及其文件夹约定，我们需要快速了解一下变量作用域。
- en: 'Meteor wraps every code files in an anonymous function before serving it. Therefore,
    declaring a variable with the `var` keyword will make it only available in that
    file''s scope, which means these variables can''t be accessed in any other file
    of your app. However, when we declare a variable without this keyword, we make
    it a globally available variable, which means it can be accessed from any file
    in our app. To understand this, we can take a look at the following example:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Meteor在提供代码之前，将每个代码文件包裹在匿名函数中。因此，使用`var`关键字声明的变量将仅在该文件的作用域内可用，这意味着这些变量无法被您应用程序中的其他任何文件访问。然而，当我们不使用这个关键字声明一个变量时，我们将其变成了一个全局可用的变量，这意味着它可以从我们应用程序中的任何文件访问。为了理解这一点，我们可以看一下以下示例：
- en: '[PRE11]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'After Meteor''s build process, the preceding lines of code will be as follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在Meteor的构建过程之后，前面的代码行将如下所示：
- en: '[PRE12]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This way, the variable created with *var* is a local variable of the anonymous
    function, while the other one can be accessed globally, as it could be created
    somewhere else before.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，使用*var*创建的变量是匿名函数的局部变量，而另一个变量可以全局访问，因为它可能是在此之前在其他地方创建的。
- en: Meteor's folder conventions and loading order
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Meteor的文件夹约定和加载顺序
- en: Though Meteor doesn't impose restrictions concerning our folder names or structure,
    there are naming conventions that help Meteor's build process to determine the
    order in which the files need to be loaded.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Meteor没有对我们的文件夹名称或结构施加限制，但是有一些命名约定可以帮助Meteor的构建过程确定文件需要加载的顺序。
- en: 'The following table describes the folder and their specific loading order:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格描述了文件夹及其特定的加载顺序：
- en: '| Folder name | Load behavior |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| 文件夹名称 | 加载行为 |'
- en: '| --- | --- |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `client` | This is loaded only on the client. |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| `client` | 此文件仅在客户端加载。|'
- en: '| `client/compatibility` | This will not be wrapped in an anonymous function.
    This is made for libraries that declare top-level variables with `var`. Additionally,
    files in this folder will be loaded before other files on the client. |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| `client/compatibility` | 此文件不会被包裹在匿名函数中。这是为使用`var`声明顶级变量的库设计的。此外，这个文件夹中的文件将在客户端上的其他文件之前加载。|'
- en: '| `server` | Files in this folder will only be served on the server. |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| `server` | 此文件夹中的文件仅在服务器上提供。|'
- en: '| `public` | This folder can contain assets used on the client, such as images,
    `favicon.ico`, or `robots.txt`. Folders and files inside the public folder are
    available on the client from root, `/`. |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| `public` | 这个文件夹可以包含在客户端上使用的资产，例如图片、`favicon.ico` 或 `robots.txt`。公共文件夹内的文件夹和文件可以从根目录
    `/` 在客户端上直接访问。 |'
- en: '| `private` | This folder can contain assets that will only be available on
    the server. These files are available through `Assets` API. |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| `private` | 这个文件夹可以包含只有服务器上可用的资产。这些文件可以通过 `Assets` API 访问。 |'
- en: '| `lib` | Files and subfolders inside a `lib` folder will be loaded before
    other files, where `lib` folders in deeper folders will be loaded before the files
    in `lib` folders of their parent folders. |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| `lib` | `lib` 文件夹内的文件和子文件夹将在其他文件之前加载，其中更深层次的 `lib` 文件夹将在其父文件夹的 `lib` 文件夹之前加载。|'
- en: '| `tests` | Files inside this folder won''t be touched or loaded by Meteor
    at all. |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| `tests` | 此文件夹内的文件将完全不被 Meteor 触摸或加载。|'
- en: '| `packages` | When we want to use local packages, we can add them to this
    folder and Meteor will use those packages, even if one with the same name exists
    in Meteor''s official package system. (However, we still have to add the packages
    using `$ meteor add ....`) |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| `packages` | 当我们想要使用本地包时，我们可以将它们添加到这个文件夹中，Meteor 将使用这些包，即使有一个与之一样的名字存在于 Meteor
    的官方包系统中。（然而，我们仍然需要使用 `$ meteor add ....` 添加包） |'
- en: 'The following table describes filenames that have created a specific loading
    order:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的表格描述了创建特定加载顺序的文件名：
- en: '| Filename | Load behavior |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| 文件名 | 加载行为 |'
- en: '| --- | --- |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `main.*` | Files with this name are loaded last, whereas files in deeper
    folders are loaded before the files of their parent folders |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| `main.*` | 具有此名称的文件最后加载，而更深层次的文件夹则在它们的父文件夹的文件之前加载|'
- en: '| `*.*` | Files outside of the former mentioned folders in this table are loaded
    on both the client and server |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| `*.*` | 表中提到的前面文件夹之外的文件将在客户端和服务器上一起加载 |'
- en: So, we see that Meteor gathers all files except the ones inside `public`, `private`,
    and `tests`.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们看到 Meteor 收集了所有文件，除了 `public`、`private` 和 `tests` 中的文件。
- en: Additionally, files are always loaded in the alphabetical order, and files in
    subfolders are loaded before the ones in parent folders.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，文件总是按照字母顺序加载，子文件夹中的文件会在父文件夹中的文件之前加载。
- en: 'If we have files outside the `client` or `server` folder and want to determine
    where the code should be executed, we can use the following variables:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们有位于 `client` 或 `server` 文件夹之外的文件，并希望确定代码应该在哪里执行，我们可以使用以下变量：
- en: '[PRE13]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We also see that code inside a `main.*` file is loaded last. To make sure a
    specific code only loads when all files are loaded and the DOM on the client is
    ready, we can use the Meteor''s `startup()` function:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还看到，`main.*` 文件中的代码是最后加载的。为了确保特定代码只在所有文件加载完毕且客户端的 DOM 准备就绪后加载，我们可以使用 Meteor
    的 `startup()` 函数：
- en: '[PRE14]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Loading assets on the server
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 服务器上加载资产
- en: 'To load files from inside the `private` folder on the server, we can use the
    `Assets` API as follows:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 要从服务器上的 `private` 文件夹加载文件，我们可以如下使用 `Assets` API：
- en: '[PRE15]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Here, `assetPath` is a file path relative to the `private` folder, for example,
    '`subfolder/data.txt'`.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`assetPath` 是相对于 `private` 文件夹的文件路径，例如，'`subfolder/data.txt'`。
- en: 'If we provide a callback function as the second parameter, the `Assets()` method
    will run asynchronously. So, we have two ways of retrieving the content of an
    assets file:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们提供一个回调函数作为第二个参数，`Assets()` 方法将异步运行。因此，我们有两种获取资产文件内容的方法：
- en: '[PRE16]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Note
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If the first example returns an error, our current server code will fail. In
    the second example, our code will still work, as the error is contained in the
    `error` parameter.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 如果第一个例子返回一个错误，我们当前的服务器代码将会失败。在第二个例子中，我们的代码仍然可以工作，因为错误包含在 `error` 参数中。
- en: Now that we understand Meteor's basic folder structure, let's take a brief look
    at the Meteor's command-line tool.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经了解了 Meteor 的基本文件夹结构，那么现在让我们简要地看看 Meteor 的命令行工具。
- en: Meteor's command-line tool
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Meteor 的命令行工具
- en: Now that we know already about Meteor's build process and folder structure,
    we will take a closer look at what we can do with the command-line tool that Meteor
    provides.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经了解了 Meteor 的构建过程和文件夹结构，我们将更详细地看看 Meteor 提供命令行工具能做什么。
- en: As we saw when using the `meteor` command, we need to be inside a Meteor project
    so that all actions will be performed on this project. For example, when we run
    `meteor add xxx`, we add a package to the project where we are currently in.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在使用 `meteor` 命令时所见，我们需要在 Meteor 项目中才能执行所有操作。例如，当我们运行 `meteor add xxx`，我们就会向当前所在的项目中添加一个包。
- en: Updating Meteor
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新Meteor
- en: 'If Meteor releases a new version, we can simply update our project by running
    the following command:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 如果Meteor发布了一个新版本，我们可以通过运行以下命令简单地更新我们的项目：
- en: '[PRE17]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'If we want to go back to a previous version, we can do this by running the
    following command:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要回到之前的版本，我们可以通过运行以下命令来实现：
- en: '[PRE18]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This would set our project back to release version 0.9.1.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使我们的项目回退到发布版本0.9.1。
- en: Deploying Meteor
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署Meteor
- en: 'Deploying our Meteor app to a public server is as easy as running the following
    command:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 将我们的Meteor应用程序部署到公共服务器，只需运行以下命令即可：
- en: '[PRE19]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This would ask us to register a Meteor developer account and deploy our app
    at [http://my-app-name.meteor.com](http://my-app-name.meteor.com).
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 这将要求我们注册一个Meteor开发者账户，并在[](http://my-app-name.meteor.com)部署我们的应用程序。
- en: For a full introduction on how to deploy a Meteor app, refer to [Chapter 10](part0086_split_000.html#page
    "Chapter 10. Deploying Our App"), *Deploying Our App*.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解如何部署一个Meteor应用程序的完整介绍，请参考[第10章](part0086_split_000.html#page "第10章 部署我们的应用程序")，*部署我们的应用程序*。
- en: In the [Appendix](part0099_split_000.html#page "Appendix A. Appendix"), you
    can find a full list of Meteor commands and their explanations.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在[附录](part0099_split_000.html#page "附录 A. 附录")中，你可以找到Meteor命令及其解释的完整列表。
- en: Summary
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned what Meteor requires to run, how to create a Meteor
    application, and how the build process works.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了Meteor运行所需要的内容、如何创建一个Meteor应用程序，以及构建过程是如何工作的。
- en: We understand that Meteor's folder structure is rather flexible, but that there
    are special folders such as the `client`, `server`, and `lib` folder, which are
    loaded in different places and order. We also saw how to add packages and how
    to use the Meteor command-line tool.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道Meteor的文件结构相当灵活，但有一些特殊的文件夹，如`client`、`server`和`lib`文件夹，它们在不同的位置和顺序被加载。我们还了解了如何添加包以及如何使用Meteor命令行工具。
- en: 'If you want to dig deeper into what we''ve learned so far, take a look at the
    following parts of the Meteor documentation:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想更深入地了解我们迄今为止学到的内容，请查看Meteor文档的以下部分：
- en: '[https://www.meteor.com/projects](https://www.meteor.com/projects)'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[](https://www.meteor.com/projects)'
- en: '[https://www.meteor.com/tool](https://www.meteor.com/tool)'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[](https://www.meteor.com/tool)'
- en: '[https://docs.meteor.com/#/full/whatismeteor](https://docs.meteor.com/#/full/whatismeteor)'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[](https://docs.meteor.com/#/full/whatismeteor)'
- en: '[https://docs.meteor.com/#/full/structuringyourapp](https://docs.meteor.com/#/full/structuringyourapp)'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[](https://docs.meteor.com/#/full/structuringyourapp)'
- en: '[https://docs.meteor.com/#/full/usingpackages](https://docs.meteor.com/#/full/usingpackages)'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[](https://docs.meteor.com/#/full/usingpackages)'
- en: '[https://docs.meteor.com/#/full/assets](https://docs.meteor.com/#/full/assets)'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[](https://docs.meteor.com/#/full/assets)'
- en: '[https://docs.meteor.com/#/full/commandline](https://docs.meteor.com/#/full/commandline)'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[](https://docs.meteor.com/#/full/commandline)'
- en: You can find this chapter's code examples at [https://www.packtpub.com/books/content/support/17713](https://www.packtpub.com/books/content/support/17713)
    or on GitHub at [https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter1](https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter1).
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[](https://www.packtpub.com/books/content/support/17713)找到本章的代码示例，或者在GitHub上找到[](https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter1)。
- en: Now that we've set up our project's basic folder structure, we are ready to
    start with the fun part of Meteor—templates.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置了我们项目的基本文件夹结构，我们准备开始Meteor的有趣部分——模板。
