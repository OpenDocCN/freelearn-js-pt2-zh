["```js\n// Promise to be filled with future value\nvar futureValue = new Promise();\n\n// .then() will return a new promise\nvar anotherFutureValue = futureValue.then();\n\n// Promise state handlers (must be a function ).\n// The returned value of the fulfilled / failed handler will be the value of the promise.\nfutureValue.then({\n\n    // Called if/when the promise is fulfilled\n    fulfilledHandler: function() {},\n\n    // Called if/when the promise fails\n    errorHandler: function() {},\n\n    // Called for progress events (not all implementations of promises have this)\n    progressHandler: function() {}\n});\n```", "```js\nvar req = $.ajax(url);\n  req.done(function () {\n      console.log('your assigned Request has been completed');\n  });\n\n  //Somewhere in the application\n  req.done(function (retrievedData) {\n      $('#contentPlaceholder').html(retrievedData);\n  });\n```", "```js\n$.when(task01, task02).done(function () {\n      console.log('taskOne and taskTwo were finished');\n});\n```", "```js\nfunction testPromiseParallelSequence(tasks)\n{\n\n    var results = [];  //an array of async tasks \n\n    //tasks.map() will map all the return call was made.\n\n    taskPromises = tasks.map(function(task) \n    {\n        return task();\n    }); //returning all the promise\n```", "```js\n// seq1 and seq2 represents sequence one and two respectively\nvar seq1, seq2, url; \nurl = 'http://sampleurl.com;\nseq1 = $.ajax(url);\n   seq2 = seq1.then(\n\n    function (data) {\n        var def = new $.Deferred();\n\n        setTimeout(function () {\n            console.log('Request completed');\n            def.resolve();\n        },1000);\n\n      return def.promise();\n  },\n\n    function (err) {\n        console.log('sequence 1 failed: Ajax request');\n    }\n  );\n  seq2.done(function () {\n      console.log('Sequence completed')\n      setTimeout(\"console.log('end')\",500);\n  });\n```", "```js\nvar def, getData, updateUI, resolvePromise;\n// The Promise and handler\ndef = new $.Deferred();\n\nupdateUI = function (data) {\n    $('p').html('I got the data!');\n    $('div').html(data);\n};\ngetData = $.ajax({\n          url: '/echo/html/', \n          data: {\n              html: 'testhtml', \n              delay: 3\n          }, \n          type: 'post'\n    })\n    .done(function(resp) {\n        return resp;\n    })\n    .fail(function (error) {\n        throw new Error(\"Error getting the data\");\n    });\n\n// Event Handler\nresolvePromise = function (ev) {\n    ev.preventDefault();\n    def.resolve(ev.type, this);\n    return def.promise();\n};\n\n// Bind the Event\n$(document).on('click', 'button', resolvePromise);\n\ndef.then(function() {\n    return getData;   \n})\n.then(function(data) {\n    updateUI(data);\n})\n.done(function(promiseValue, el) {\n    console.log('The promise was resolved by: ', promiseValue, ' on ', el);\n});\n// Console output: The promise was resolved by: click on <button> </button>\n```", "```js\nfunction imException()\n{\nthrow \"imException\";\n\n}//end of code\n```", "```js\nQ.fcall(imException);\n```", "```js\n// code view before exception handler\nQ.fcall(imException);\n\n//code after exception handler\nQ.fcall(imException) .fail(function(err) { console.log(err); });\n```", "```js\nQ.fcall(imException)\n.then(\n    // first handler-fulfill\n    function() { }, \n\n    // second handler -reject\n    function(err) {\n        console.log(err);\n    }\n);\n```"]