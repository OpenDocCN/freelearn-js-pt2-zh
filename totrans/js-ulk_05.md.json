["```js\n/**\n * @type {IDBOpenDBRequest}\n * Syntax: indexedDB.open( DB name, DB version );\n */\nvar request = indexedDB.open( \"Cem\", 2 );\n\n/** Report error */\nrequest.onerror = function() {\n  alert( \"Opps, something went wrong\" );\n};\n/**\n * Create DB\n * @param {Event} e\n */\nrequest.onupgradeneeded = function ( e ) {\n  var objectStore;\n  if ( e.oldVersion ) {\n    return;\n  }\n  // define schema\n  objectStore = e.currentTarget.result.createObjectStore( \"employees\", { keyPath: \"email\" });\n  objectStore.createIndex( \"name\", \"name\", { unique: false } );\n   // Populate objectStore with test data\n  objectStore.add({ name: \"John Dow\", email: \"john@company.com\" });\n  objectStore.add({ name: \"Don Dow\", email: \"don@company.com\" });\n};\n/**\n * Find a row from the DB\n * @param {Event} e\n */\nrequest.onsuccess = function( e ) {\n  var db = e.target.result,\n      req = db.transaction([ \"employees\" ]).objectStore( \"employees\" ).get( \"don@company.com\" );\n\n  req.onsuccess = function() {\n    console.log( \"Employee matching `don@company.com` is `\" + req.result.name + \"`\" );\n  };\n};\n```", "```js\nEmployee matching 'don@company.com` is `Don Dow'\n```", "```js\n<script src=\"img/Dexie.js\"></script>\n<script>\nvar db = new Dexie( \"Cem\" );\n// Define DB\ndb.version( 3 )\n  .stores({ employees: \"name, email\" });\n\n// Open the database\ndb.open().catch(function( err ){\n  alert( \"Opps, something went wrong: \" + err );\n});\n\n// Populate objectStore with test data\ndb.employees.add({ name: \"John Dow\", email: \"john@company.com\" });\ndb.employees.add({ name: \"Don Dow\", email: \"don@company.com\" });\n\n// Find an employee by email\ndb.employees\n  .where( \"email\" )\n  .equals( \"don@company.com\" )\n  .each(function( employee ){\n    console.log( \"Employee matching `don@company.com` is `\" + employee.name + \"`\" );\n  });\n\n</script>\n```", "```js\nwindow.requestFileSystem  = window.requestFileSystem || window.webkitRequestFileSystem;\n    /**\n     * Read file from a given FileSystem\n     * @param {DOMFileSystem} fs\n     * @param {String} file\n     */\nvar readFile = function( fs, file ) {\n      console.log( \"Reading file \" + file );\n      // Obtain FileEntry object\n      fs.root.getFile( file, {}, function( fileEntry ) {\n        fileEntry.file(function( file ){\n           // Create FileReader\n           var reader = new FileReader();\n           reader.onloadend = function() {\n             console.log( \"Fetched content: \", this.result );\n           };\n           // Read file\n           reader.readAsText( file );\n        }, console.error );\n      }, console.error );\n    },\n    /**\n     * Save file into a given FileSystem and run onDone when ready\n     * @param {DOMFileSystem} fs\n     * @param {String} file\n     * @param {Function} onDone\n     */\n    saveFile = function( fs, file, onDone ) {\n      console.log( \"Writing file \" + file );\n      // Obtain FileEntry object\n      fs.root.getFile( file, { create: true }, function( fileEntry ) {\n        // Create a FileWriter object for the FileEntry\n        fileEntry.createWriter(function( fileWriter ) {\n          var blob;\n          fileWriter.onwriteend = onDone;\n          fileWriter.onerror = function(e) {\n            console.error( \"Writing error: \" + e.toString() );\n          };\n          // Create a new Blob out of the text we want into the file.\n          blob = new Blob([ \"Lorem Ipsum\" ], { type: \"text/plain\" });\n          // Write into the file\n          fileWriter.write( blob );\n        }, console.error );\n      }, console.error );\n    },\n    /**\n     * Run when FileSystem initialized\n     * @param {DOMFileSystem} fs\n     */\n    onInitFs = function ( fs ) {\n      const FILENAME = \"log.txt\";\n      console.log( \"Opening file system: \" + fs.name );\n      saveFile( fs, FILENAME, function(){\n        readFile( fs, FILENAME );\n      });\n    };\n\nwindow.requestFileSystem( window.TEMPORARY, 5*1024*1024 /*5MB*/, onInitFs, console.error );\n```", "```js\nindex.html\n<html>\n  <body>\n<script>\n\"use strict\";\n// Register worker\nvar worker = new Worker( \"./foo-worker.js\" );\n// Subscribe for worker messages\nworker.addEventListener( \"message\", function( e ) {\n  console.log( \"Result: \", e.data );\n}, false );\nconsole.log( \"Starting the task...\" );\n// Send a message to worker\nworker.postMessage({\n  command: \"loadCpu\",\n  value: 2000\n});\n</script>\n  </body>\n</html>\nfoo-worker.js\n\"use strict\";\nvar commands = {\n  /**\n   * Emulate resource-consuming operation\n   * @param {Number} delay in ms\n   */\n  loadCpu: function( delay ) {\n    var start = Date.now();\n    while (( Date.now() - start ) < delay );\n    return \"done\";\n  }\n};\n// Workers don't have access to the window object. // To access global object we have to use self object instead.\nself.addEventListener( \"message\", function( e ) {\n  var command;\n  if ( commands.hasOwnProperty( e.data.command ) ) {\n    command = commands[ e.data.command ];\n    return self.postMessage( command( e.data.value ) );\n  }\n  self.postMessage( \"Error: Command not found\" );\n\n}, false );\n```", "```js\n<script>\n\"use strict\";\nvar worker = new SharedWorker( \"bar-worker.js\" );\nworker.port.onmessage = function( e ) {\n  console.log( \"Worker echoes: \", e.data );\n};\nworker.onerror = function( e ){\n  console.error( \"Error:\", e.message );\n};\nworker.port.postMessage( \"Hello worker\" );\n</script>\nbar-worker.js\n\"use strict\";\nonconnect = function( e ) {\n  var port = e.ports[ 0 ];\n  port.onmessage = function( e ) {\n    port.postMessage( e.data );\n  };\n  port.start();\n};\n```", "```js\n<script data-bind=\"biTracker\" type=\"text/js-worker\">\n  \"use strict\";\n\n  // Here shall go you BI endpoint\n  const REST_METHOD = \"http://www.telize.com/jsonip\";\n  /**\n   * @param {Map} data - BI request params\n   * @param {Function} resolve\n   */\n  var call = function( data, resolve ) {\n    var xhr = new XMLHttpRequest(),\n        params = data ? Object.keys( data ).map(function( key ){\n            return key + \"=\" + encodeURIComponent( data[ key ] );\n          }).join( \"&\" ) : \"\";\n\n    xhr.open( \"POST\", REST_METHOD, true );\n    xhr.addEventListener( \"load\", function() {\n        if ( this.status >= 200 && this.status < 400 ) {\n          return resolve( this.response );\n        }\n        console.error( \"BI tracker - bad request \" + this.status );\n      }, false );\n    xhr.addEventListener( \"error\", console.error, false );\n    xhr.responseType = \"json\";\n    xhr.setRequestHeader( \"Content-Type\", \"application/x-www-form-urlencoded\" );\n    xhr.send( params );\n  };\n  /**\n   * Subscribe to window.onmessage event\n   */\n  onmessage = function ( e ) {\n    call( e.data, function( data ){\n      // respond back\n      postMessage( data );\n    })\n  };\n</script>\n\n<script type=\"text/javascript\">\n  \"use strict\";\n  window.biTracker = (function(){\n    var blob = new Blob([ document.querySelector( \"[data-bind=\\\"biTracker\\\"]\" ).textContent ], {\n          type: \"text/javascript\"\n        }),\n        worker = new Worker( window.URL.createObjectURL( blob ) );\n\n    worker.onmessage = function ( oEvent ) {\n      console.info( \"Bi-Tracker responds: \", oEvent.data );\n    };\n    return worker;\n  }());\n  // Let's test it\n  window.biTracker.postMessage({ page: \"#main\" });\n</script>\n```", "```js\n<link rel=\"import\" href=\"bower_components/x-tag-datepicker/src/datepicker.js\"> \n```", "```js\n<x-datepicker name=\"2012-02-02\"></x-datepicker>\n```", "```js\n<script src=\"img/webcomponents.min.js\"></script>\n```", "```js\n<style>\n  .x-details-summary {\n    font-weight: bold;\n    cursor: pointer;\n  }\n  .x-details-details {\n    transition: opacity 0.2s ease-in-out, transform 0.2s ease-in-out;\n    transform-origin: top left;\n  }\n  .x-details-hidden {\n    opacity: 0;\n    transform: scaleY(0);\n  }\n</style>\n<script>\n\"use strict\";\n    /**\n     * Object constructor representing x-details element\n     * @param {Node} el\n     */\nvar DetailsView = function( el ){\n      this.el = el;\n      this.initialize();\n    },\n    // Creates an object based in the HTML Element prototype\n    element = Object.create( HTMLElement.prototype );\n/** @lend DetailsView.prototype */\nObject.assign( DetailsView.prototype, {\n  /**\n   * @constracts DetailsView\n   */\n  initialize: function(){\n    this.summary = this.renderSummary();\n    this.details = this.renderDetails();\n    this.summary.addEventListener( \"click\", this.onClick.bind( this ), false );\n    this.el.textContent = \"\";\n    this.el.appendChild( this.summary );\n    this.el.appendChild( this.details );\n  },\n  /**\n   * Render summary element\n   */\n  renderSummary: function(){\n    var div = document.createElement( \"a\" );\n    div.className = \"x-details-summary\";\n    div.textContent = this.el.dataset.summary;\n    return div;\n  },\n  /**\n   * Render details element\n   */\n  renderDetails: function(){\n    var div = document.createElement( \"div\" );\n    div.className = \"x-details-details x-details-hidden\";\n    div.textContent = this.el.textContent;\n    return div;\n  },\n  /**\n   * Handle summary on click\n   * @param {Event} e\n   */\n  onClick: function( e ){\n    e.preventDefault();\n    if ( this.details.classList.contains( \"x-details-hidden\" ) ) {\n      return this.open();\n    }\n    this.close();\n  },\n  /**\n   * Open details\n   */\n  open: function(){\n    this.details.classList.toggle( \"x-details-hidden\", false );\n  },\n  /**\n   * Close details\n   */\n  close: function(){\n    this.details.classList.toggle( \"x-details-hidden\", true );\n  }\n});\n\n// Fires when an instance of the element is created\nelement.createdCallback = function() {\n  this.detailsView = new DetailsView( this );\n};\n// Expose method open\nelement.open = function(){\n  this.detailsView.open();\n};\n// Expose method close\nelement.close = function(){\n  this.detailsView.close();\n};\n// Register the custom element\ndocument.registerElement( \"x-details\", {\n  prototype: element\n});\n</script>\n```", "```js\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>X-DETAILS</title>\n    <!-- Importing Web Component's Polyfill -->\n    <!-- uncomment for non-Chrome browsers\n    script src=\"img/webcomponents.min.js\"></script-->\n    <!-- Importing Custom Elements -->\n <link rel=\"import\" href=\"./x-details.html\">\n  </head>\n  <body>\n    <x-details data-summary=\"Click me\">\n      Nunc iaculis ac erat eu porttitor. Curabitur facilisis ligula et urna egestas mollis. Aliquam eget consequat tellus. Sed ullamcorper ante est. In tortor lectus, ultrices vel ipsum eget, ultricies facilisis nisl. Suspendisse porttitor blandit arcu et imperdiet.\n    </x-details>\n  </body>\n</html>\n```", "```js\nvar src = new EventSource( \"./sse-server.php\" );\n\nsrc.addEventListener( \"open\", function() {\n   console.log( \"Connection opened\" );\n}, false);\n\nsrc.addEventListener( \"error\", function( e ) {\n  if ( e.readyState === EventSource.CLOSED ) {\n    console.error( \"Connection closed\" );\n  }\n}, false );\n\nsrc.addEventListener( \"foo\", function( e ) {\n  var data = JSON.parse( e.data );\n  console.log( \"Received from the server:\", data );\n}, false);\n```", "```js\nevent: foo\\n\ndata: { time: \"date\" }\\n\\n\n```", "```js\n<?PHP\nset_time_limit( 0 );\nheader(\"Content-Type: text/event-stream\");\nheader(\"Cache-Control: no-cache\");\ndate_default_timezone_set(\"Europe/Berlin\");\n\nfunction postMessage($event, $data){\n  echo \"event: {$event}\", PHP_EOL;\n  echo \"data: \", json_encode($data, true), PHP_EOL, PHP_EOL;\n  ob_end_flush();\n  flush();\n}\nwhile (true) {\n  postMessage(\"foo\", array(\"time\" => date(\"r\")) );\n  sleep(1);\n}\n```", "```js\nConnection opened\nReceived from the server: Object { time=\"Tue, 25 Aug 2015 10:31:54 +0200\"}\nReceived from the server: Object { time=\"Tue, 25 Aug 2015 10:31:55 +0200\"}\nReceived from the server: Object { time=\"Tue, 25 Aug 2015 10:31:56 +0200\"}\nReceived from the server: Object { time=\"Tue, 25 Aug 2015 10:31:57 +0200\"}\nReceived from the server: Object { time=\"Tue, 25 Aug 2015 10:31:58 +0200\"}\nReceived from the server: Object { time=\"Tue, 25 Aug 2015 10:31:59 +0200\"}\nReceived from the server: Object { time=\"Tue, 25 Aug 2015 10:32:00 +0200\"}\nReceived from the server: Object { time=\"Tue, 25 Aug 2015 10:32:01 +0200\"}\nReceived from the server: Object { time=\"Tue, 25 Aug 2015 10:32:02 +0200\"}\n...\n```", "```js\nvar rtm = new WebSocket(\"ws://echo.websocket.org\");\nrtm.onopen = function(){\n  console.log( \"Connection established\" );\n  rtm.send(\"hello\");\n};\nrtm.onclose = function(){\n  console.log( \"Connection closed\" );\n};\nrtm.onmessage = function( e ){\n  console.log( \"Received:\", e.data );\n};\nrtm.onerror = function( e ){\n  console.error( \"Error: \" + e.message );\n};\n```", "```js\nConnection established\nReceived: hello\n```", "```js\n<style>\n  input {\n    border-radius: 5px;\n    display: block;\n    font-size: 14px;\n    border: 1px solid grey;\n    margin: 3px 0;\n  }\n  button {\n    border-radius: 5px;\n    font-size: 14px;\n    background: #189ac4;\n    color: white;\n    border: none;\n    padding: 3px 14px;\n  }\n</style>\n\n<form data-bind=\"chat\">\n  <input data-bind=\"whoami\" placeholder=\"Enter your name\">\n  <input data-bind=\"text\" placeholder=\"Enter your msg\" />\n  <button type=\"submit\">Send</button>\n</form>\n<h3>Chat:</h3>\n<output data-bind=\"output\">\n</output>\n<script>\n\nvar whoami = document.querySelector( \"[data-bind=\\\"whoami\\\"]\" ),\n    text = document.querySelector( \"[data-bind=\\\"text\\\"]\" ),\n    chat = document.querySelector( \"[data-bind=\\\"chat\\\"]\" ),\n    output = document.querySelector( \"[data-bind=\\\"output\\\"]\" ),\n    // create ws connection\n    rtm = new WebSocket(\"ws://localhost:8001\");\n\nrtm.onmessage = function( e ){\n  var data = JSON.parse( e.data );\n  output.innerHTML += data.whoami + \" says: \" + data.text + \"<br />\";\n};\nrtm.onerror = function( e ){\n  console.error( \"Error: \" + e.message );\n};\n\nchat.addEventListener( \"submit\", function( e ){\n  e.preventDefault();\n  if ( !whoami.value ) {\n    return alert( \"You have enter your name\" );\n  }\n  if ( !text.value ) {\n    return alert( \"You have enter some text\" );\n  }\n  rtm.send(JSON.stringify({\n    whoami: whoami.value,\n    text: text.value\n  }));\n});\n\n</script>\n```", "```js\n    /** @type {module:nodejs-websocket} */\nvar ws = require( \"nodejs-websocket\" ),\n    /** @type {Server} */\n    server = ws.createServer(function( conn ) {\n        conn.on( \"text\", function ( str ) {\n          console.log( \"Received \" + str );\n          broadcast( str );\n        });\n    }).listen( 8001 ),\n    /**\n     * Broadcast message\n     * @param {String} msg\n     */\n    broadcast = function ( msg ) {\n      server.connections.forEach(function ( conn ) {\n        conn.sendText( msg );\n      });\n    };\n```", "```js\nnode ws.js\n```", "```js\nwebsocketd --port=8001 my-script\n```"]