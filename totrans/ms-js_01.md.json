["```js\n<!DOCTYPE html>\n<html>\n<head>\n <script type=\"text/javascript\" src=\"img/script.js\"></script>\n <script type=\"text/javascript\">\n var x = \"Hello World\";\n console.log(x);\n </script>\n</head>\n<body>\n</body>\n</html>\n```", "```js\n<script type=\"text/javascript\" src=\"img/script.js\"></script>\n```", "```js\nEN-VedA:~$ node\n>function greeter(){\n  x=\"World\"l\nSyntaxError: Unexpected identifier\n at Object.exports.createScript (vm.js:44:10)\n at REPLServer.defaultEval (repl.js:117:23)\n at bound (domain.js:254:14)\n …\n\n```", "```js\nfunction sayHello(what) {\n  return \"Hello \" + what;\n}\nconsole.log(sayHello(\"world\"));\n```", "```js\n// a one line comment\n\n/* this is a longer, \n   multi-line comment\n */\n\n/* You can't /* nest comments */ SyntaxError */\n```", "```js\nvar a;      //declares a variable but its undefined\nvar b = 0;\nconsole.log(b);    //0\nconsole.log(a);    //undefined\nconsole.log(a+b);  //NaN\n```", "```js\nconst area_code = '515';\n```", "```js\nvar aNumber = 555;\n```", "```js\nvar aFloat = 555.0;\n```", "```js\nEN-VedA:~$ node\n> 0.1+0.2\n0.30000000000000004\n> (0.1+0.2)===0.3\nfalse\n\n```", "```js\nEN-VedA:~ $ node\n> isNaN(NaN);\ntrue\n> NaN==NaN;\nfalse\n> isNaN(\"elephant\");\ntrue\n> NaN+5;\nNaN\n\n```", "```js\n> Math.E\n2.718281828459045\n> Math.SQRT2\n1.4142135623730951\n> Math.abs(-900)\n900\n> Math.pow(2,3)\n8\n\n```", "```js\n> parseInt(\"230\",10);\n230\n> parseInt(\"010\",10);\n10\n> parseInt(\"010\",8); //octal base\n8\n> parseInt(\"010\",2); //binary\n2\n> + \"4\"\n4\n\n```", "```js\nvar underterminedValue = \"elephant\";\nif (isNaN(parseInt(underterminedValue,2))) \n{\n   console.log(\"handle not a number case\");\n}\nelse\n{\n   console.log(\"handle number case\");\n}\n```", "```js\n> console.log(\"Hippopotamus chewing gum\");\nHippopotamus chewing gum\n> console.log('Single quoted hippopotamus');\nSingle quoted hippopotamus\n> console.log(\"Broken \\n lines\");\nBroken\n lines\n```", "```js\n> '\\xA9'\n'©'\n> '\\u00A9'\n'©'\n\n```", "```js\nvar s = new String(\"dummy\"); //Creates a String object\nconsole.log(s); //\"dummy\"\nconsole.log(typeof s); //\"object\"\nvar nonObject = \"1\" + \"2\"; //Create a String primitive \nconsole.log(typeof nonObject); //\"string\"\nvar objString = new String(\"1\" + \"2\"); //Creates a String object\nconsole.log(typeof objString); //\"object\"\n//Helper functions\nconsole.log(\"Hello\".length); //5\nconsole.log(\"Hello\".charAt(0)); //\"H\"\nconsole.log(\"Hello\".charAt(1)); //\"e\"\nconsole.log(\"Hello\".indexOf(\"e\")); //1\nconsole.log(\"Hello\".lastIndexOf(\"l\")); //3\nconsole.log(\"Hello\".startsWith(\"H\")); //true\nconsole.log(\"Hello\".endsWith(\"o\")); //true\nconsole.log(\"Hello\".includes(\"X\")); //false\nvar splitStringByWords = \"Hello World\".split(\" \");\nconsole.log(splitStringByWords); //[\"Hello\", \"World\"]\nvar splitStringByChars = \"Hello World\".split(\"\");\nconsole.log(splitStringByChars); //[\"H\", \"e\", \"l\", \"l\", \"o\", \" \", \"W\", \"o\", \"r\", \"l\", \"d\"]\nconsole.log(\"lowercasestring\".toUpperCase()); //\"LOWERCASESTRING\"\nconsole.log(\"UPPPERCASESTRING\".toLowerCase()); //\"upppercasestring\"\nconsole.log(\"There are no spaces in the end     \".trim()); //\"There are no spaces in the end\"\n```", "```js\n> console.log(`string text on first line\nstring text on second line `);\n\"string text on first line\nstring text on second line \"\n\n```", "```js\nvar a=1, b=2;\nconsole.log(\"Sum of values is :\" + (a+b) + \" and multiplication is :\" + (a*b));\n\n```", "```js\nconsole.log(`Sum of values is :${a+b} and multiplication is : ${a*b}`);\n\n```", "```js\n> var xl;\n> console.log(typeof xl);\nundefined\n> console.log(null==undefined);\ntrue\n\n```", "```js\n    var pBooleanTrue = true;\n    var pBooleanFalse = false;\n\n    ```", "```js\n    var fBooleanTrue = Boolean(true);\n    var fBooleanFalse = Boolean(false);\n\n    ```", "```js\nvar oBooleanTrue = new Boolean(true);\nvar oBooleanFalse = new Boolean(false);\nconsole.log(oBooleanTrue); //true\nconsole.log(typeof oBooleanTrue); //object\nif(oBooleanFalse){\n console.log(\"I am seriously truthy, don't believe me\");\n}\n>\"I am seriously truthy, don't believe me\"\n\nif(oBooleanTrue){\n console.log(\"I am also truthy, see ?\");\n}\n>\"I am also truthy, see ?\"\n\n//Use valueOf() to extract real value within the Boolean object\nif(oBooleanFalse.valueOf()){\n console.log(\"With valueOf, I am false\"); \n}else{\n console.log(\"Without valueOf, I am still truthy\");\n}\n>\"Without valueOf, I am still truthy\"\n\n```", "```js\nvar aStringObject = new String(\"string\");\nconsole.log(typeof aStringObject);        //\"object\"\nconsole.log(aStringObject instanceof String);    //true\nvar aString = \"This is a string\";\nconsole.log(aString instanceof String);     //false\n\n```", "```js\nvar dataObject = new Date([parameters]);\n```", "```js\nvar today = new Date();\nconsole.log(today.getDate()); //27\nconsole.log(today.getMonth()); //4\nconsole.log(today.getFullYear()); //2015\nconsole.log(today.getHours()); //23\nconsole.log(today.getMinutes()); //13\nconsole.log(today.getSeconds()); //10\n//number of milliseconds since January 1, 1970, 00:00:00 UTC\nconsole.log(today.getTime()); //1432748611392\nconsole.log(today.getTimezoneOffset()); //-330 Minutes\n\n//Calculating elapsed time\nvar start = Date.now();\n// loop for a long time\nfor (var i=0;i<100000;i++);\nvar end = Date.now();\nvar elapsed = end - start; // elapsed time in milliseconds\nconsole.log(elapsed); //71\n```", "```js\nvar a=25;\na=+a;            //No impact on a's value  \nconsole.log(a);  //25\n\nvar b=\"70\";\nconsole.log(typeof b); //string\nb=+b;           //converts string to number\nconsole.log(b); //70\nconsole.log(typeof b); //number\n```", "```js\nvar c=\"foo\";\nc=+c;            //Converts foo to number\nconsole.log(c);  //NaN\nconsole.log(typeof c);  //number\n\nvar zero=\"\";\nzero=+zero; //empty strings are converted to 0\nconsole.log(zero);\nconsole.log(typeof zero);\n```", "```js\nvar a= 1;\nvar b= a++;\nconsole.log(a); //2\nconsole.log(b); //1\n```", "```js\nvar a= 1;\nvar b= ++a;\nconsole.log(a);  //2\nconsole.log(b);  //2\n```", "```js\nvar a, b, c;\na = b = c = 0;\n```", "```js\nvar a = b = 0;\n```", "```js\n    console.log(true  && true); // true AND true returns true\n    console.log(true  && false);// true AND false returns false\n    console.log(false && true);// false AND true returns false\n    console.log(\"Foo\" && \"Bar\");// Foo(true) AND Bar(true) returns Bar\n    console.log(false && \"Foo\");// false && Foo(true) returns false\n    console.log(\"Foo\" && false);// Foo(true) && false returns false\n    console.log(false && (1 == 2));// false && false(1==2) returns false\n    ```", "```js\n    console.log(true  || true); // true AND true returns true\n    console.log(true  || false);// true AND false returns true\n    console.log(false || true);// false AND true returns true\n    console.log(\"Foo\" || \"Bar\");// Foo(true) AND Bar(true) returns Foo\n    console.log(false || \"Foo\");// false && Foo(true) returns Foo\n    console.log(\"Foo\" || false);// Foo(true) && false returns Foo\n    console.log(false || (1 == 2));// false && false(1==2) returns false\n    ```", "```js\n    console.log (0 && \"Foo\");  //First operand is falsy - return it\n    console.log (\"Foo\" && \"Bar\"); //First operand is truthy, return the second operand\n    ```", "```js\n    console.log (0 || \"Foo\");  //First operand is falsy - return second operand\n    console.log (\"Foo\" || \"Bar\"); //First operand is truthy, return it\n    console.log (0 || false); //First operand is falsy, return second operand\n    ```", "```js\n    function greeting(name){\n        name = name || \"John\";\n        console.log(\"Hello \" + name);\n    }\n\n    greeting(\"Johnson\"); // alerts \"Hi Johnson\";\n    greeting(); //alerts \"Hello John\"\n    ```", "```js\n    //If the operand is an object, false is returned.\n    var s = new String(\"string\");\n    console.log(!s);              //false\n\n    //If the operand is the number 0, true is returned.\n    var t = 0;\n    console.log(!t);              //true\n\n    //If the operand is any number other than 0, false is returned.\n    var x = 11;\n    console.log(!x);              //false\n\n    //If operand is null or NaN, true is returned\n    var y =null;\n    var z = NaN;\n    console.log(!y);              //true\n    console.log(!z);              //true\n    //If operand is undefined, you get true\n    var foo;\n    console.log(!foo);            //true\n    ```", "```js\nvar allowedToDrive = (age > 21) ? \"yes\" : \"no\";\n```", "```js\nfunction isAllowedToDrive(age){\n  if(age>21){\n    return true;\n  }else{\n    return false;\n  }\n}\nconsole.log(isAllowedToDrive(22));\n```", "```js\nif (condition1) {\n  statement1\n} else if (condition2) {\n  statement2\n} else if (condition3) {\n  statement3\n}\n..\n} else {\n  statementN\n}\n```", "```js\nif (condition1) {\n  statement1\n} else\n    if (condition2) {\n```", "```js\nif(a=b) {\n  //do something\n}\n```", "```js\nif((a=b)){\n  //this is really something you want to do\n}\n```", "```js\nfunction sayDay(day){\n  switch(day){\n    case 1: console.log(\"Sunday\");\n      break;\n    case 2: console.log(\"Monday\");\n      break;\n    default:\n      console.log(\"We live in a binary world. Go to Pluto\");\n  }\n}\n\nsayDay(1); //Sunday\nsayDay(3); //We live in a binary world. Go to Pluto\n```", "```js\n>sayDay(1);\nSunday\nMonday\n```", "```js\nfunction debug(level,msg){\n  switch(level){\n    case \"INFO\": //intentional fall-through\n    case \"WARN\" :  \n    case \"DEBUG\": console.log(level+ \": \" + msg);  \n      break;\n    case \"ERROR\": console.error(msg);  \n  }\n}\n\ndebug(\"INFO\",\"Info Message\");\ndebug(\"DEBUG\",\"Debug Message\");\ndebug(\"ERROR\",\"Fatal Exception\");\n```", "```js\nvar i=0;\nwhile(i<10){\n  i=i+1;\n  console.log(i);\n}\n```", "```js\n//infinite loop\nwhile(true){\n  //keep doing this\n}\n```", "```js\nvar choice;\ndo {\n  choice=getChoiceFromUserInput();\n} while(!isInputValid(input));\n```", "```js\nfor (var i=0;i<5;i++){\n  console.log(\"Hello\");\n}\n```", "```js\nvar x=0;\n//Omit initialitzation\nfor (;x<5;x++){\n  console.log(\"Hello\");\n}\n\n//Omit exit condition\nfor (var j=0;;j++){\n  //exit condition\n  if(j>=5){\n    break;  \n  }else{\n    console.log(\"Hello\");\n  }\n}\n//Omit increment\nfor (var k=0; k<5;){\n  console.log(\"Hello\");\n  k++;\n}\n```", "```js\nvar arr = [10, 20, 30];\n// Assign all array values to 100\nfor (i = 0; i < arr.length; arr[i++] = 100);\nconsole.log(arr);\n```", "```js\nvar n = 0;\nvar o = new String(\"0\");\nvar s = \"0\";\nvar b = false;\n\nconsole.log(n === n); // true - same values for numbers\nconsole.log(o === o); // true - non numbers are compared for their values\nconsole.log(s === s); // true - ditto\n\nconsole.log(n === o); // false - no implicit type conversion, types are different\nconsole.log(n === s); // false - types are different\nconsole.log(o === s); // false - types are different\nconsole.log(null === undefined); // false\nconsole.log(o === null); // false\nconsole.log(o === undefined); // false\n```", "```js\nvar fortyTwo = 42;\nconsole.log(fortyTwo.toString()[1]); //prints \"2\"\n```", "```js\ntypeof 1             === \"number\";    // true\ntypeof \"1\"           === \"string\";    // true\ntypeof { age: 39 }   === \"object\";    // true\ntypeof Symbol()      === \"symbol\";    // true\ntypeof undefined     === \"undefined\"; // true\ntypeof true          === \"boolean\";   // true\n```", "```js\nvar t=1;\nvar u=\"\"+t; //implicit coercion\nconsole.log(typeof t);  //\"number\"\nconsole.log(typeof u);  //\"string\"\nvar v=String(t);  //Explicit coercion\nconsole.log(typeof v);  //\"string\"\nvar x=null\nconsole.log(\"\"+x); //\"null\"\n```", "```js\nvar a=\"abc\";\nconsole.log(a.length);\nconsole.log(a.toUpperCase());\n```", "```js\nAs we discussed earlier, JavaScript kindly wraps these primitives in their wrappers by default thus making it possible for us to directly access the wrapper's methods and properties as if they were of the primitives themselves.\n```", "```js\ntypeof null ===\"object\" //true\n```", "```js\nvar x = null;\nif (!x && typeof x === \"object\"){\n  console.log(\"100% null\");\n}\n```", "```js\nf = function test() {\n  return 12;\n}\nconsole.log(typeof f === \"function\");  //prints \"true\"\n```", "```js\nconsole.log (typeof [1,2,3,4]); //\"object\"\n```", "```js\nvar a = 1; \ntypeof a; // \"number\"  \na = false; \ntypeof a; // \"boolean\"\n```", "```js\ntypeof typeof 1; // \"string\"\n```", "```js\nif (a < 1) a = 1 console.log(a)\n```", "```js\nif (a < 1) a = 1; console.log(a);\n```", "```js\nfunction add(a,b) { return a+b }\n```", "```js\nfunction add(a,b) { return a+b; }\n```", "```js\n//Cramped style (Bad)\nif(condition) doSomeTask();\n\nwhile(condition) i++;\n\nfor(var i=0;i<10;i++) iterate();\n\n//Use whitespace for better readability (Good)\n//Place 1 space before the leading brace.\nif (condition) {\n  // statements\n}\n\nwhile ( condition ) {\n  // statements\n}\n\nfor ( var i = 0; i < 100; i++ ) {\n  // statements\n}\n\n// Better:\n\nvar i,\n    length = 100;\n\nfor ( i = 0; i < length; i++ ) {\n  // statements\n}\n\n// Or...\n\nvar i = 0,\n    length = 100;\n\nfor ( ; i < length; i++ ) {\n  // statements\n}\n\nvar value;\n\nfor ( value in object ) {\n  // statements\n}\n\nif ( true ) {\n  // statements\n} else {\n  // statements\n}\n\n//Set off operators with spaces.\n// bad\nvar x=y+5;\n\n// good\nvar x = y + 5;\n\n//End files with a single newline character.\n// bad\n(function(global) {\n  // ...stuff...\n})(this);\n\n// bad\n(function(global) {\n  // ...stuff...\n})(this);↵\n↵\n\n// good\n(function(global) {\n  // ...stuff...\n})(this);↵\n```", "```js\n//String:\ntypeof variable === \"string\"\n//Number:\ntypeof variable === \"number\"\n//Boolean:\ntypeof variable === \"boolean\"\n//Object:\ntypeof variable === \"object\"\n//null:\nvariable === null\n//null or undefined:\nvariable == null\n```", "```js\n// bad\nconst totalScore = this.reviewScore + '';\n// good\nconst totalScore = String(this.reviewScore);\n```", "```js\nconst inputValue = '4';\n// bad\nconst val = new Number(inputValue);\n// bad\nconst val = +inputValue;\n// bad\nconst val = inputValue >> 0;\n// bad\nconst val = parseInt(inputValue);\n// good\nconst val = Number(inputValue);\n// good\nconst val = parseInt(inputValue, 10);\n```", "```js\nconst age = 0;  // bad \nconst hasAge = new Boolean(age);  // good \nconst hasAge = Boolean(age); // good \nconst hasAge = !!age;\n```", "```js\n// When evaluating that array has length,\n// WRONG:\nif ( array.length > 0 ) ...\n\n// evaluate truthiness(GOOD):\nif ( array.length ) ...\n\n// When evaluating that an array is empty,\n// (BAD):\nif ( array.length === 0 ) ...\n\n// evaluate truthiness(GOOD):\nif ( !array.length ) ...\n\n// When checking if string is not empty,\n// (BAD):\nif ( string !== \"\" ) ...\n\n// evaluate truthiness (GOOD):\nif ( string ) ...\n\n// When checking if a string is empty,\n// BAD:\nif ( string === \"\" ) ...\n\n// evaluate falsy-ness (GOOD):\nif ( !string ) ...\n\n// When checking if a reference is true,\n// BAD:\nif ( foo === true ) ...\n\n// GOOD\nif ( foo ) ...\n\n// When checking if a reference is false,\n// BAD:\nif ( foo === false ) ...\n\n// GOOD\nif ( !foo ) ...\n\n// this will also match: 0, \"\", null, undefined, NaN\n// If you MUST test for a boolean false, then use\nif ( foo === false ) ...\n\n// a reference that might be null or undefined, but NOT false, \"\" or 0,\n// BAD:\nif ( foo === null || foo === undefined ) ...\n\n// GOOD\nif ( foo == null ) ...\n\n// Don't complicate matters\nreturn x === 0 ? 'sunday' : x === 1 ? 'Monday' : 'Tuesday';\n\n// Better:\nif (x === 0) {\n    return 'Sunday';\n} else if (x === 1) {\n    return 'Monday';\n} else {\n    return 'Tuesday';\n}\n\n// Even Better:\nswitch (x) {\n    case 0:\n        return 'Sunday';\n    case 1:\n        return 'Monday';\n    default:\n        return 'Tuesday';\n}\n```", "```js\n//Avoid single letter names. Be descriptive with your naming.\n// bad\nfunction q() {\n\n}\n\n// good\nfunction query() {\n}\n\n//Use camelCase when naming objects, functions, and instances.\n// bad\nconst OBJEcT = {};\nconst this_is_object = {};\nfunction c() {}\n\n// good\nconst thisIsObject = {};\nfunction thisIsFunction() {}\n\n//Use PascalCase when naming constructors or classes.\n// bad\nfunction user(options) {\n  this.name = options.name;\n}\n\nconst bad = new user({\n  name: 'nope',\n});\n\n// good\nclass User {\n  constructor(options) {\n    this.name = options.name;\n  }\n}\n\nconst good = new User({\n  name: 'yup',\n});\n\n// Use a leading underscore _ when naming private properties.\n// bad\nthis.__firstName__ = 'Panda';\nthis.firstName_ = 'Panda';\n\n// good\nthis._firstName = 'Panda';\n```", "```js\neval():\n```", "```js\nconsole.log(typeof eval(new String(\"1+1\"))); // \"object\"\nconsole.log(eval(new String(\"1+1\")));        //1+1\nconsole.log(eval(\"1+1\"));                    // 2\nconsole.log(typeof eval(\"1+1\"));             // returns \"number\"\nvar expression = new String(\"1+1\");\nconsole.log(eval(expression.toString()));    //2\n```", "```js\n'use strict';\n```", "```js\nfunction foo() {\n    'use strict';\n\n}\n```", "```js\nfunction sloppyFunc() {\n  sloppyVar = 123; \n} sloppyFunc();  // creates global variable `sloppyVar`\nconsole.log(sloppyVar);  // 123\n```", "```js\nfunction strictFunc() {\n  'use strict';\n  strictVar = 123;\n}\nstrictFunc();  // ReferenceError: strictVar is not defined\n```", "```js\n> 010 === 8 true\n\n```", "```js\nfunction f() { \n'use strict'; \nreturn 010 \n} \n//SyntaxError: Octal literals are not allowed in \n```", "```js\nnpm install jshint –g\n\n```", "```js\ntest.js file:\n```", "```js\nfunction f(condition) {\n  switch (condition) {\n  case 1:\n    console.log(1);\n  case 2:\n    console.log(1);\n  }\n}\n```", "```js\n>jshint test.js\ntest.js: line 4, col 19, Expected a 'break' statement before 'case'.\n1 error\n\n```", "```js\n{\n     \"asi\": false,\n     \"expr\": true,\n     \"loopfunc\": true,\n     \"curly\": false,\n     \"evil\": true,\n     \"white\": true,\n     \"undef\": true,\n     \"indent\": 4\n}\n```"]