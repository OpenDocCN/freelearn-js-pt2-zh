- en: Chapter 6. Keeping States with Sessions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。使用会话保持状态
- en: We already used Meteor's session object when we implemented our lazy load technique
    in an earlier chapter. In this chapter, we want to take a deeper look at it and
    learn how it can be used to create template-specific reactive functions.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在之前的章节中实现懒加载技术时已经使用了Meteor的session对象。在本章中，我们想要更深入地了解它，并学习如何使用它来创建特定模板的反应式函数。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: What sessions are
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 会话是什么
- en: How hot code pushes affect sessions
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 热代码推送如何影响session
- en: Rerunning template helpers using sessions
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用session重新运行模板助手
- en: Rerunning functions
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重新运行函数
- en: Creating template-specific reactive functions
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建特定模板的反应式函数
- en: Note
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you've jumped right into the chapter and want to follow the examples, download
    the previous chapter's code examples from either the book's web page at [https://www.packtpub.com/books/content/support/17713](https://www.packtpub.com/books/content/support/17713)
    or from the GitHub repository at [https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter5](https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter5).
  id: totrans-9
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你直接跳到这一章节并想要跟随示例，可以从书籍的网页上[https://www.packtpub.com/books/content/support/17713](https://www.packtpub.com/books/content/support/17713)或从GitHub仓库[https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter5](https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter5)下载上一章节的代码示例。
- en: These code examples will also contain all the style files, so we don't have
    to worry about adding CSS code along the way.
  id: totrans-10
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些代码示例还将包含所有的样式文件，因此我们不必担心在过程中添加CSS代码。
- en: Meteor's session object
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Meteor的session对象
- en: The `Session` object provided by Meteor is a reactive data source and serves
    mainly to preserve global states throughout hot code reloads, though it won't
    preserve its data when the page is manually reloaded, making it different from
    PHP sessions.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Meteor提供的`Session`对象是一个反应式数据源，主要用于在热代码重载过程中维护全局状态，尽管它不会在页面手动重载时保存其数据，这使得它与PHP会话不同。
- en: Note
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A hot code reload happens when we upload new code and the server pushes those
    updates to all clients.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们上传新代码时，服务器会将这些更新推送给所有客户端，这时就会发生热代码重载。
- en: The `Session` object is a reactive data source. This means wherever this session
    variable is used in a reactive function, it will rerun that function when its
    value changes.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`Session`对象是一个反应式数据源。这意味着无论这个session变量在反应式函数中如何使用，当它的值发生变化时，它都会重新运行那个函数。'
- en: One use of the session variable can be to maintain global states of our app,
    for example, to check whether the user has their sidebar visible or not.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: session变量的一个用途可以是维护我们应用的全局状态，例如，检查用户是否显示侧边栏。
- en: The session object is not useful for simple data communication between templates
    and other parts of the app, as maintaining this would quickly become a nightmare
    and naming collisions could occur.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: session对象对于模板和其他应用部分之间的简单数据通信并不有用，因为维护这会很快变得令人痛苦，并且可能发生命名冲突。
- en: A better way for simple reactivity
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现简单反应性的更好方法
- en: If we wanted to use something for intra-app communication, it's better to use
    Meteors `reactive-var` package, which comes with a `Session` like `ReactiveVar`
    object.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要用于应用内通信，最好使用Meteor的`reactive-var`包，它带有一个类似于`ReactiveVar`对象的`Session`。
- en: To use it, we can simply add it using `$ meteor add reactive-var`.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 使用它时，我们可以简单地通过`$ meteor add reactive-var`来添加它。
- en: 'This object then needs to be instantiated and comes with a reactive `get()`
    and `set()` function like the `session` object:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 然后需要实例化这个对象，并带有反应式的`get()`和`set()`函数，类似于`session`对象：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: For more custom reactivity, we can build our own custom reactive object using
    Meteor's `Tracker` package. To read more about this, refer to [Chapter 9](part0081_split_000.html#page
    "Chapter 9. Advanced Reactivity"), *Advanced Reactivity*.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现更自定义的反应性，我们可以使用Meteor的`Tracker`包构建我们自己的自定义反应式对象。有关更多信息，请参阅[第9章](part0081_split_000.html#page
    "Chapter 9. Advanced Reactivity")，*高级反应性*。
- en: Tip
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: For reactive variables that are tied to a specific template instance, check
    out my `frozeman:template-var` package at [https://atmospherejs.com/frozeman/template-var](https://atmospherejs.com/frozeman/template-var).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 对于与特定模板实例绑定的反应式变量，请查看我的`frozeman:template-var`包在[https://atmospherejs.com/frozeman/template-var](https://atmospherejs.com/frozeman/template-var)。
- en: Using sessions in template helpers
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在模板助手使用session
- en: As all template helper functions are reactive functions, a good place to use
    a session object is inside such a helper.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 由于所有模板助手函数都是反应式函数，因此在这样的助手内部使用session对象是一个好地方。
- en: Reactive means that when we use a reactive object inside this function, that
    function will rerun when the reactive object changes, additionally rerendering
    this part of the template.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 反应式意味着当我们在这个函数内部使用反应式对象时，该函数会在反应式对象发生变化时重新运行，同时重新渲染模板的这部分。
- en: Note
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Template helpers are not the only reactive functions; we can also create our
    own using `Tracker.autorun(function(){…})`, as we saw in earlier chapters.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 模板助手不是唯一的反应式函数；我们还可以使用`Tracker.autorun(function(){…})`创建自己的，正如我们早先章节中看到的那样。
- en: 'To demonstrate the usage of sessions in a template helper, perform the following
    steps:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示在模板助手中美使用会话的方法，请执行以下步骤：
- en: 'Let''s open our `my-meteor-blog/client/templates/home.js` file and add the
    following helper code anywhere in the file:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开我们的`my-meteor-blog/client/templates/home.js`文件，并在文件中的任何位置添加以下助手代码：
- en: '[PRE1]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This creates the `sessionExample` helper, which returns the value of the `mySessionExample`
    session variable.
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这创建了`sessionExample`助手，它返回`mySessionExample`会话变量的值。
- en: 'Next, we need to add this helper to our `home` template itself by opening the
    `my-metepr-blog/client/templates/home.html` file and adding the helper above our
    `{{#each postsList}}` block helper:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要把我们这个助手添加到我们的`home`模板本身，通过打开`my-metepr-blog/client/templates/home.html`文件，在我们`{{#each
    postsList}}`块助手上面加上助手：
- en: '[PRE2]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, let''s open up our browser at `http://localhost:3000`. We will see the
    static text we add appearing in our blog''s home page. Yet, to see Meteor''s reactive
    session at work, we need to open up the browser''s console and type the following
    line of code:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开浏览器窗口，输入`http://localhost:3000`。我们会看到我们添加的静态文本出现在博客的主页上。然而，为了看到Meteor的反应式会话在起作用，我们需要打开浏览器的控制台并输入以下代码行：
- en: '[PRE3]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This is illustrated in the following screenshot:'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下屏幕截图说明了这一点：
- en: '![Using sessions in template helpers](img/00017.jpeg)'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![在模板助手中美使用会话](img/00017.jpeg)'
- en: Immediately after we pressed *Enter*, we saw the text added to our template.
    This is because when we call `Session.set('mySessionExample', ...)`, Meteor will
    rerun every reactive function wherein we called `Session.get('mySessionExample')`
    before. For template helpers, this will rerun only this specific template helper,
    rerendering only this part of the template.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们按下*Enter*键的那一刻，我们就看到了文字被添加到了我们的模板中。这是因为当我们调用`Session.set('mySessionExample',
    ...)`时，Meteor会在我们之前调用`Session.get('mySessionExample')`的每个反应式函数中重新运行。对于模板助手，这只会重新运行这个特定的模板助手，只重新渲染模板的这部分。
- en: We can try this by setting different values for the `mySessionExample` session
    variable so that we can see how the text will change at all times.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过为`mySessionExample`会话变量设置不同的值来尝试，这样我们就可以看到文字如何随时变化。
- en: Session and hot code pushes
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 会话和热代码推送
- en: A hot code push is when we change files and the Meteor server pushes these changes
    to the clients. Meteor is smart enough to reload the page, without losing the
    values of HTML forms or sessions. Therefore, sessions can be used to keep user
    states consistent over hot code pushes.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 热代码推送是指当我们更改文件时，Meteor服务器将这些更改推送到客户端。Meteor足够智能，可以重新加载页面，而不会丢失HTML表单或会话的值。因此，会话可以用来在热代码推送过程中保持用户状态的一致性。
- en: In order to see this, we set the value of `mySessionExample` to anything we
    want and see the website updating to this value.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 为了看到这一点，我们将`mySessionExample`的值设置为我们想要的任何东西，并看到网站更新为此值。
- en: 'When we now go to our `home.html` file and make a minor change, for example,
    removing `<strong>` around the `{{sessionExample}}` helper and saving the file,
    we see that our sessions state is kept, even though the page reloads with the
    new changed template. This is demonstrated in the following screenshot:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们打开我们的`home.html`文件，进行一点小修改，例如移除`{{sessionExample}}`助手周围的`<strong>`标签并保存文件，我们会发现尽管页面随着新更改的模板重新加载，我们的会话状态仍然保持。这在以下屏幕截图中得到证明：
- en: '![Session and hot code pushes](img/00018.jpeg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![会话和热代码推送](img/00018.jpeg)'
- en: Note
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If we manually reload the page using the browser's refresh button, the session
    will not be able to persist the change and the text will disappear.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们手动使用浏览器的刷新按钮重新加载页面，会话将无法保持更改，文字将消失。
- en: To overcome this limitation, there are many packages in Meteor's package repository
    that reactively store data in the browser's local storage to persist across page
    reloads. One of them is called `persistent-session` and can be found at [http://atmospherejs.com/package/persistent-session](http://atmospherejs.com/package/persistent-session).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 为了克服这个限制，Meteor的包仓库中有许多包，它们反应式地将数据存储在浏览器的本地存储中，以在页面重新加载时保持数据。其中一个包叫做`persistent-session`，可以在[http://atmospherejs.com/package/persistent-session](http://atmospherejs.com/package/persistent-session)找到。
- en: Rerunning functions reactively
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 反应性地重新运行函数
- en: To rerun functions based on session changes, Meteor provides the `Tracker.autorun()`
    function, which we used before to change the lazy load subscription.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 为了根据会话更改重新运行函数，Meteor提供了`Tracker.autorun()`函数，我们之前用它来改变懒加载订阅。
- en: The `Tracker.autorun()` function will make every function we pass to it reactive.
    To see a simple example, we will create a function that will alert a text every
    time the function reruns.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`Tracker.autorun()`函数将使传递给它的每个函数都具有反应性。为了看到一个简单的例子，我们将创建一个函数，每次函数重新运行时都会警告一个文本。'
- en: Note
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `Tracker` package is what the session uses under the hood to make the reactivity
    work. In [Chapter 9](part0081_split_000.html#page "Chapter 9. Advanced Reactivity"),
    *Advanced Reactivity*, we will take a deeper look at this package.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`Tracker`包是会话在幕后使用的东西，以使反应性工作。在[第9章](part0081_split_000.html#page "Chapter 9. Advanced
    Reactivity")，*高级反应性*，我们将深入研究这个包。'
- en: 'Perform the following steps to rerun functions reactively:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以反应性地重新运行函数：
- en: 'Let''s create a new file called `main.js`, but this time in the root of the
    `my-meteor-blog` folder, with the following content:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建一个名为`main.js`的新文件，但这次在`my-meteor-blog`目录的根目录中，内容如下：
- en: '[PRE4]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We will need the `main.js` file in later chapters. Therefore, we created it
    in the root folder, making it accessible on the client and the server.
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在后面的章节中我们将会需要`main.js`文件。因此，我们在根目录中创建了它，使其可以在客户端和服务器上访问。
- en: However, as Meteor's session object is only available on the client, we will
    use the `if(Meteor.isClient)` condition in order to execute the code only on the
    client.
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然而，由于Meteor的session对象只存在于客户端，我们将使用`if(Meteor.isClient)`条件，以便只在客户端执行代码。
- en: When we now check out our browser, we will see an alert that displays `undefined`.
    This is because the function passed to `Tracker.autorun()` will also run when
    the code is executed, at a time when we haven't set our session.
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在当我们查看浏览器时，我们会看到一个显示`undefined`的警告。这是因为传递给`Tracker.autorun()`的函数在代码执行时也会运行，在这个时候我们还没有设置我们的会话。
- en: To set a session variable's default value, we can use `Session.setDefault('mySessionExample',
    'My Text')`. This will set the session without running any reactive functions,
    when the value of the session is undefined. If the value of the session variable
    was already set, `setDefault` won't change the variables at all.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要设置会话变量的默认值，我们可以使用`Session.setDefault('mySessionExample', 'My Text')`。这将在不运行任何反应性函数的情况下设置会话，当会话值未定义时。如果会话变量的值已经设置，`setDefault`将根本不会更改变量。
- en: 'In our example, we probably don''t want an alert window to appear when the
    page is loaded. To prevent this first run, we can use the `Tracker.Computation`
    object, which is passed as the first argument to our function and which provides
    us with a property called `firstRun`. This property will be set to `true` at the
    first run of the function. When we use this, we can prevent the display of the
    alert at the start:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的示例中，当页面加载时我们可能不希望出现一个警告窗口。为了防止这种情况，我们可以使用`Tracker.Computation`对象，它作为我们函数的第一个参数传递给我们，并为我们提供了一个名为`firstRun`的属性。这个属性将在函数的第一次运行时设置为`true`。当我们使用这个属性时，我们可以在开始时防止显示警告：
- en: '[PRE5]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now let''s go to the browser''s console and set the session to any value to
    see the alert appear:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们打开浏览器的控制台，将会话设置为任何值以查看警告窗口出现：
- en: '[PRE6]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The output of this code is demonstrated in the following screenshot:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码的输出在下方的屏幕截图中展示：
- en: '![Rerunning functions reactively](img/00019.jpeg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![反应性地重新运行函数](img/00019.jpeg)'
- en: Note
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: When we run the same command again, we will not see the alert window show up,
    as Meteor is smart enough to prevent reruns when the session's value doesn't change.
    If we set it to another value, the alert will appear again.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们再次运行相同的命令时，我们不会看到警告窗口出现，因为Meteor足够智能，可以防止在会话值不变时重新运行。如果我们将其设置为另一个值，警告将再次出现。
- en: Stopping reactive functions
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 停止反应式函数
- en: 'The `Tracker.Computation` object, passed as the first argument, also gives
    us a way to stop the function from being reactive at all. To try this, we will
    change the function so that it stops its reactivity when we pass the `stop` string
    to the session:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 作为第一个参数传递的`Tracker.Computation`对象还为我们提供了一种完全停止函数反应性的方法。为了尝试这个，我们将更改函数，使其在我们传递`stop`字符串给会话时停止其反应性：
- en: '[PRE7]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now, when we go to our browser's console and run `Session.set('mySessionExample',
    'stop')`, the reactive function will stop being reactive. To test this, we can
    try to run `Session.set('mySessionExample', 'Another text')` and we will see that
    the alert window won't appear.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们进入浏览器的控制台并运行`Session.set('mySessionExample', 'stop')`时，响应式函数将停止变得响应式。为了测试这一点，我们可以尝试运行`Session.set('mySessionExample',
    'Another text')`，我们会发现警告窗口不会出现。
- en: Note
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If we make a code change and a hot code reload happens, the reactive function
    will become reactive again, as the code was executed again.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们对代码进行更改并且发生了热代码重载，响应式函数将再次变为响应式，因为代码被执行了 again。
- en: The preceding example also uses a function called `Session.equals()`. This function
    can compare two scalar values while preventing unnecessary recomputations, compared
    to using `Session.get('mySessionExample) === 'stop'`. Using `Session.equals()`
    would only rerun this function when the session variable changes *to* or *from*
    that value.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的示例还使用了一个名为`Session.equals()`的函数。这个函数可以比较两个标量值，同时防止不必要的重新计算，与使用`Session.get('mySessionExample)
    === 'stop'`相比。使用`Session.equals()`只有在会话变量改变*到*或*从*那个值时才会重新运行这个函数。
- en: Note
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In our example, however, this function doesn't make a difference, as we called
    `Session.get()` before as well.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，然而，这个函数并没有什么区别，因为我们之前也调用了`Session.get()`。
- en: Using autorun in a template
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在模板中使用autorun
- en: Although it could be useful to use `Tracker.autorun()` globally in our app in
    some cases, it can become quickly hard to maintain those global reactive functions
    as our app grows.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然在某些情况下在我们的应用程序中全局使用`Tracker.autorun()`可能很有用，但随着我们应用程序的增长，这些全局响应式函数很快变得难以维护。
- en: Therefore, it is good practice to bind reactive functions to the templates for
    which they perform actions.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，将响应式函数绑定到它们执行操作的模板是一个好的实践。
- en: Luckily, Meteor offers a special version of `Tracker.autorun()` that is tied
    to a template instance and stops automatically when the template gets destroyed.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，Meteor提供了一个特殊的`Tracker.autorun()`版本，它与模板实例相关联，并在模板被销毁时自动停止。
- en: To make use of this, we can start the reactive function in the `created()` or
    rendered callback. To start, let's comment out our previous example from the `main.js`
    file so that we won't get two alert windows.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 为了利用这一点，我们可以在`created()`或渲染回调中启动响应式函数。首先，让我们注释掉`main.js`文件中的上一个示例，这样我们就不会得到两个警告窗口。
- en: 'Open our `home.js` file and add the following lines of code:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 打开我们的`home.js`文件，添加以下代码行：
- en: '[PRE8]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This will create the reactive function when the home template is created. When
    we go to the browser''s console and set the `mySessionExample` session to a new
    value, we will see the alert window appear, as shown in the following screenshot:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在主页模板创建时创建响应式函数。当我们进入浏览器的控制台并设置`mySessionExample`会话为新值时，我们会看到警告窗口出现，如下面的屏幕截图所示：
- en: '![Using autorun in a template](img/00020.jpeg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![在模板中使用autorun](img/00020.jpeg)'
- en: Now, when we switch the templates by clicking on the **About** link in the menu
    and we set the `mySessionExample` session variable again to another value using
    the browsers console, we won't see the alert window appear as the reactive `this.autorun()`
    was stopped when the template was destroyed.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们通过点击菜单中的**关于**链接切换模板，并将`mySessionExample`会话变量再次设置为另一个值时，我们不会看到警告窗口出现，因为当模板被销毁时，响应式的`this.autorun()`已经停止。
- en: Note
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Note that all `Tracker.autorun()` functions return a `Tracker.Computation`
    object, which can be used to stop the reactivity of the autorun at any time using
    `Tracker.Computation.stop()`:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 注意所有的`Tracker.autorun()`函数都返回一个`Tracker.Computation`对象，可以使用`Tracker.Computation.stop()`随时停止autorun的响应性：
- en: '[PRE9]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The reactive session object
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 响应式的会话对象
- en: We've seen that the session object can rerun a function when its value is changed.
    This is the same behavior as that of the `find()` and `findOne()` functions of
    collections, which will rerun functions when the underlying data in the collection
    changes.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到了会话对象可以在其值改变时重新运行函数。这和集合的`find()`和`findOne()`函数的行为一样，这些函数在集合的底层数据改变时会重新运行函数。
- en: We can use sessions to keep user states across hot code pushes, such as states
    of drop-down menus or pop-ups. However, keep in mind that without a clear naming
    convention, these session variables can soon become hard to maintain.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用会话来在热代码推送之间保持用户状态，比如下拉菜单或弹出的状态。但是，请注意，如果没有明确的命名约定，这些会话变量很快就会变得难以维护。
- en: For more specific reactive behavior, it is good to build a custom reactive object
    using Meteor's `Tracker` core package, which we will cover in [Chapter 9](part0081_split_000.html#page
    "Chapter 9. Advanced Reactivity"), *Advanced Reactivity*.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现更具体的反应式行为，最好使用Meteor的`Tracker`核心包构建一个自定义的反应式对象，这将在[第9章](part0081_split_000.html#page
    "Chapter 9. Advanced Reactivity")，*高级反应性*中介绍。
- en: Summary
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned what we can do with Meteor's reactive session object.
    We used it to rerun template helpers and our own custom functions, and we made
    a reactive function template specific using the `created()` and `destroyed()`
    callbacks.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了Meteor的反应式会话对象能做什么。我们用它来重新运行模板助手和我们自己的自定义函数，并且我们通过`created()`和`destroyed()`回调创建了一个特定的反应式函数模板。
- en: 'To dig deeper, take a look at Meteor''s documentation about sessions and reactivity
    at the following resources:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 要深入了解，请查看Meteor关于会话和反应性的文档，具体资源如下：
- en: '[https://docs.meteor.com/#/full/reactivity](https://docs.meteor.com/#/full/reactivity)'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Meteor的反应性](https://docs.meteor.com/#/full/reactivity)'
- en: '[https://docs.meteor.com/#/full/session](https://docs.meteor.com/#/full/session)'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Meteor的反应式会话对象](https://docs.meteor.com/#/full/session)'
- en: '[https://docs.meteor.com/#/full/reactivevar_pkg](https://docs.meteor.com/#/full/reactivevar_pkg)'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Meteor的反应式变量包](https://docs.meteor.com/#/full/reactivevar_pkg)'
- en: '[https://www.meteor.com/tracker](https://www.meteor.com/tracker)'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Meteor的Tracker](https://www.meteor.com/tracker)'
- en: You can find this chapter's code examples at [https://www.packtpub.com/books/content/support/17713](https://www.packtpub.com/books/content/support/17713)
    or on GitHub at [https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter6](https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter6).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[https://www.packtpub.com/books/content/support/17713](https://www.packtpub.com/books/content/support/17713)找到本章的代码示例，或者在GitHub上查看[https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter6](https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter6)。
- en: In the next chapter, we will create the admin user and backend for our blog,
    laying down the foundation to create and edit posts.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将为我们的博客创建管理员用户和后端，为创建和编辑帖子打下基础。
