["```js\n    const app = new Application();\n    .use calls; this way, all the other middleware functions will run once this has been executed.The first lines are executed before the route handler (and other middleware functions) starts handling the request. Then, the call to `next` makes sure the route handlers execute; only then is the rest of the middleware code executed, thus calculating the difference from the initial value and the current date and adding it as a header.\n    ```", "```js\n    $ deno run --allow-net src/index.ts\n    Application running at http://localhost:8080\n    ```", "```js\n    x-response-time header there. Note that we've used the -i flag so that we're able to see the response headers on curl. \n    ```", "```js\nGET http://localhost:8080/api/museums - 65ms\n```", "```js\n    X-Response-Time header, which is going to be set by the previous middleware to log the request to the console. We're also using next to make sure all the handlers (and middleware functions) run before we log to the console. We need this specifically because the header is set by another piece of middleware.\n    ```", "```js\n    $ deno run --allow-net src/index.ts\n    Application running at http://localhost:8080\n    ```", "```js\n    $ curl http://localhost:8080/api/museums\n    ```", "```js\n    $ deno run --allow-net src/index.ts\n    Application running at http://localhost:8080\n    GET http://localhost:8080/api/museums - 46ms\n    ```", "```js\nconst apiRouter = new Router({ prefix: \"/api\" })\napiRouter.use(async (_, next) => {\n  console.log(\"Request was made to API Router\");\n  await next();\n}))\n…\napp.use(apiRouter.routes());\napp.use(apiRouter.allowedMethods());\n```", "```js\nimport { Application, Router, RouterMiddleware } from\n  \"../deps.ts\";\n…\nconst addTestHeaderMiddleware: RouterMiddleware = async (ctx,\n   next) => {\n  ctx.response.headers.set(\"X-Test\", \"true\");\n  await next();\n}\napiRouter.get(\"/museums\", addTestHeaderMiddleware, async (ctx)\n  => {\n  ctx.response.body = {\n    museums: await museum.getAll()\n  }\n});\n```", "```js\nexport type { RouterMiddleware } from\n  \"https://deno.land/x/oak@v6.3.1/mod.ts\";\n```", "```js\n    export type RegisterPayload = { username: string;\n      password: string };\n    export type LoginPayload = { username: string; password:\n      string };\n    export interface UserController {\n      register: (payload: RegisterPayload) =>\n        Promise<UserDto>;\n      login: (\n        { username, password }: LoginPayload,\n      ) => Promise<{ user: UserDto }>;\n    }\n    ```", "```js\n    public async login(payload: LoginPayload) {\n    }\n    ```", "```js\n    export interface UserRepository {\n      create: (user: CreateUser) => Promise<User>;  \n      exists: (username: string) => Promise<boolean>\n      getByUsername: (username: string) => Promise<User>\n    }\n    ```", "```js\n    export class Repository implements UserRepository {\n    …\n    UserController and use the recently created method to get a user from the database.\n    ```", "```js\n    public async login(payload: LoginPayload) {\n      hashPassword in the previous chapter when we implemented the register logic, so let's use that.\n    ```", "```js\n    import {\n      LoginPayload,\n      RegisterPayload,\n      User,\n      UserController,\n      UserRepository,\n    } from \"./types.ts\";\n    import { hashWithSalt } from \"./util.ts\"\n    …\n    private async comparePassword(password: string, user:\n      User) {\n      const hashedPassword = hashWithSalt (password,\n        user.salt);\n      if (hashedPassword === user.hash) {\n        return Promise.resolve(true);\n      }\n      return Promise.reject(false);\n    }\n    ```", "```js\n    public async login(payload: LoginPayload) {\n      try {\n        const user = await\n         this.userRepository.getByUsername(payload.username);\n        await this.comparePassword(payload.password, user);\n        return { user: userToUserDto(user) };\n      } catch (e) {\n        console.log(e);\n        throw new Error('Username and password combination is\n          not correct')\n      }\n    }\n    ```", "```js\n    apiRouter.post(\"/login\", async (ctx) => {\n    })\n    ```", "```js\n    apiRouter.post(\"/login\", async (ctx) => {\n      400 Bad Request) if things didn't go well.\n    ```", "```js\n    …\n    const { user: loginUser } = await user.login({ username,\n      password });\n    ctx.response.body = { user: loginUser };\n    ctx.response.status = 201;\n    …\n    ```", "```js\n    $ deno run --allow-net src/index.ts\n    Application running at http://localhost:8080\n    ```", "```js\n    $ curl -X POST -d '{\"username\": \"asantos00\", \"password\": \"testpw\" }' -H 'Content-Type: application/json' http://localhost:8080/api/users/register\n    {\"user\":{\"username\":\"asantos00\",\"createdAt\":\"2020-10-19T21:30:51.012Z\"}}\n    ```", "```js\n    $ curl -X POST -d '{\"username\": \"asantos00\", \"password\": \"testpw\" }' -H 'Content-Type: application/json' http://localhost:8080/api/login \n    {\"user\":{\"username\":\"asantos00\",\"createdAt\":\"2020-10-19T21:30:51.012Z\"}}\n    ```", "```js\n    export interface UserController {\n      register: (payload: RegisterPayload) =>\n        Promise<UserDto>\n      login: ({ username, password }: LoginPayload) =>\n        Promise<{ user: UserDto, UserController knows how to return a token. Looking at its logic, we can see that it should be able to delegate that responsibility by calling a method that will return that token. From the previous chapters, we know that we don't want to import our dependencies directly; we'd rather have them injected into our `constructor`. That's what we'll do here. Another thing we know is that we want to use this \"third-party module\" that deals with authentication. We'll need to add it to our dependencies file.\n    ```", "```js\n    export type {\n      Algorithm,\n    } from \"https://raw.githubusercontent.com/PacktPublishing/\n     Deno-Web-Development/master/Chapter06/jwt-auth/mod.ts\";\n    export {\n      Repository as AuthRepository,\n    } from \"https://raw.githubusercontent.com/PacktPublishing/\n      Deno-Web-Development/master/Chapter06/jwt-auth/mod.ts\";\n    ```", "```js\n    authRepository, which we've just imported. We previously discovered that it exposes a generateToken method, which will be of use to the login of UserController.\n    ```", "```js\n    public async login(payload: LoginPayload) {\n        try {\n          const user = await\n            this.userRepository.getByUsername\n              (payload.username);\n          await this.comparePassword(payload.password, user);\n    authRepository to get a token. If we try to run this code, we know it will fail. In fact, we just need to open `src/index.ts` to see our editor's warnings. It is complaining that we're not sending `authRepository` to `UserController`, and we should.\n    ```", "```js\n    import { AuthRepository } from \"./deps.ts\";\n    …\n    const authRepository = new AuthRepository({\n      configuration: {\n        algorithm: \"HS512\",\n        key: \"my-insecure-key\",\n        tokenExpirationInSeconds: 120\n      }\n    });\n    ```", "```js\n    const userController = new UserController({\n      userRepository, authRepository });\n    ```", "```js\n    apiRouter.post(\"/login\", async (ctx) => {\n      const { username, password } = await\n        ctx.request.body().value;\n      try {\n        const { user: loginUser, token } = await user.login({\n          username, password });\n        ctx.response.body = { user: loginUser, token };\n        ctx.response.status = 201;\n      } catch (e) {\n        ctx.response.body = { message: e.message };\n        ctx.response.status = 400;\n      }\n    })\n    ```", "```js\n    export {\n      jwtMiddleware,\n    } from \"https://x.nest.land/\n       oak-middleware-jwt@2.0.0/mod.ts\";\n    ```", "```js\n    import { Application, src/index.ts and forget to change this.This is exactly why we should extract this and expect it as a parameter to the `createServer` function.\n    ```", "```js\n    import { Algorithm type from the deps.ts file, which exports it from the jwt-auth module. We're doing this so that we can ensure, via types, that the algorithms that are sent are only the supported ones.\n    ```", "```js\n    const authenticated = jwtMiddleware(authorization)\n    ```", "```js\n    import { AuthRepository, Algorithm } from \"./deps.ts\";\n    …\n    const authConfiguration = {\n      algorithm: \"HS512\" as Algorithm,\n      key: \"my-insecure-key\",\n      tokenExpirationInSeconds: 120\n    }\n    const authRepository = new AuthRepository({\n      configuration: authConfiguration\n    });\n    ```", "```js\n    createServer({\n      configuration: {\n        port: 8080,\n        authorization: {\n          key: authConfiguration.key,\n          algorithm: authConfiguration.algorithm\n        }\n      },\n      museum: museumController,\n      user: userController\n    })\n    ```", "```js\n    $ deno run --allow-net src/index.ts\n    Application running at http://localhost:8080\n    ```", "```js\n    $ curl -X POST -d '{\"username\": \"asantos00\", \"password\": \"testpw1\" }' -H 'Content-Type: application/json' http://localhost:8080/api/users/register\n    {\"user\":{\"username\":\"asantos00\",\"createdAt\" :\"2020-10-27T19:14:01.984Z\"}}\n    ```", "```js\n    $ curl -X POST -d '{\"username\": \"asantos00\", \"password\": \"testpw1\" }' -H 'Content-Type: application/json' http://localhost:8080/api/login\n    {\"user\":{\"username\":\"asantos00\",\"createdAt\":\"2020-10-27T19:14:01.984Z\"},\"token\":\"eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJtdXNldW1zIiwiZXhwIjoxNjAzODI2NTEzLCJ1c2VyIjoi YXNhbnRvczAwIn0.XV1vaHDpTu2SnavFla5q8eIPKCRIfDw_Kk-j8gi1 mqcz5UN3sVnk61JWCapwlh0IJ46fJdc7cw2WoMMIh-ypcg\"}\n    ```", "```js\n    Authentication header with Bearer as a prefix, as specified by the JWT specification.\n    ```", "```js\n    -i flag with curl so that it logs the request status code and headers.\n    ```", "```js\n    └── src\n        ├── museums\n        ├── users\n        │   ├── adapter.ts\n        │   ├── controller.ts\n        │   ├── index.ts\n        │   ├── repository\n    │ │   ├── inMemory.ts\n        │   ├── types.ts\n        │   └── util.ts\n    ```", "```js\n    import { User, UserRepository } from \"../types.ts\";\n    import { generateSalt, hashWithSalt } from \"../util.ts\";\n    ```", "```js\n    export { Repository } from './repository/inMemory.ts'\n    ```", "```js\n    import { UserRepository } from \"../types.ts\";\n    export class Repository implements UserRepository {\n      storage\n      async create(username: string, password: string) {\n      }\n      async exists(username: string) {\n      }\n      async getByUsername(username: string) {\n      }\n    }\n    ```", "```js\nimport { MongoClient } from\n  \"https://deno.land/x/mongo@v0.13.0/mod.ts\";\nconst client = new MongoClient();\nclient.connectWithUri(\"mongodb://localhost:27017\");\nconst db = client.database(\"test\");\nconst users = db.collection<UserSchema>(\"users\");\n```", "```js\n    export { MongoClient } from\n      \"https://deno.land/x/mongo@v0.13.0/mod.ts\";\n    ```", "```js\n    $ deno cache --lock=lock.json --lock-write --unstable src/deps.ts\n    ```", "```js\n    import { User, UserRepository } from \"../types.ts\";\n    collection method on it, to get access to the users' collection. Once we've done that, we must set it to our storage class property. Both the method and the type require a generic to be passed in. This should represent the type of object present in that collection. In our case, it is the User type.\n    ```", "```js\n    export { MongoClient, Collection, Database } from\n      \"https://deno.land/x/mongo@v0.13.0/mod.ts\";\n    ```", "```js\nimport { CreateUser, User, UserRepository } from\n \"../types.ts\";\nimport { Collection, Database } from \"../../deps.ts\";\nexport class Repository implements UserRepository {\n  storage: Collection<User>\n  constructor({ storage }: RepositoryDependencies) {\n    this.storage = storage.collection<User>(\"users\");\n  }\n  async create(user: CreateUser) {\n    const userWithCreatedAt = { ...user, createdAt: new Date() }\n    this.storage.insertOne({ ...user })\n    return userWithCreatedAt;\n  }\n  async exists(username: string) {\n    return Boolean(await this.storage.count({ username }));\n  }\n  async getByUsername(username: string) {\n    const user = await this.storage.findOne({ username });\n    if (!user) {\n      throw new Error(\"User not found\");\n    }\n    return user;\n  }\n}  \n```", "```js\nexport { Repository } from \"./repository/mongoDb.ts\";\nexport { Repository } from \"./repository/inMemory.ts\";\n```", "```js\nconst client = new MongoClient();\nclient.connectWithUri(\"mongodb://localhost:27017\");\n```", "```js\n    import { MongoClient } from \"./deps.ts\";\n    ```", "```js\n    const client = new MongoClient();\n    client.connectWithUri(\"mongodb://localhost:27017\");\n    ```", "```js\n    const db = client.database(\"getting-started-with-deno\");\n    ```", "```js\nconst client = new MongoClient();\nclient.connectWithUri(\"mongodb://localhost:27017\");\nconst db = client.database(\"getting-started-with-deno\");\n...\nconst userRepository = new UserRepository({ storage: db });\n```", "```js\nmongodb+srv://<username>:<password>@clustername.mongodb.net/\n  test?retryWrites=true&w=majority&useNewUrlParser=\n    true&useUnifiedTopology=true\n```", "```js\nconst client = new MongoClient();\nclient.connectWithUri(\"mongodb+srv://<username>:<password>\n  @clustername.mongodb.net/test?retryWrites=true&w=\n    majority&useNewUrlParser=true&useUnifiedTopology=true\");\nconst db = client.database(\"getting-started-with-deno\");\n```", "```js\n$ deno run --allow-net --allow-write --allow-read --allow-plugin --allow-env --unstable src/index.ts\nApplication running at http://localhost:8080\n```", "```js\n    $ curl -X POST -d '{\"username\": \"asantos00\", \"password\": \"testpw1\" }' -H 'Content-Type: application/json' http://localhost:8080/api/users/register\n    {\"user\":{\"username\":\"asantos00\",\"createdAt\":\"2020-11-01T23:21:58.442Z\"}}\n    ```", "```js\n    $ deno run --allow-net --allow-write --allow-read --allow-plugin --allow-env --unstable src/index.ts\n    Application running at http://localhost:8080\n    ```", "```js\n    $ curl -X POST -d '{\"username\": \"asantos00\", \"password\": \"testpw1\" }' -H 'Content-Type: application/json' http://localhost:8080/api/login\n    {\"user\":{\"username\":\"asantos006\"},\"token\":\"eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJtdXNl dW1zIiwiZXhwIjoxNjA0MjczMDQ1LCJ1c2VyIjoiYXNhbnRvczAwNi J9.elY48It-DHse5sSszCAWuE2PzNkKiPsMIvif4v5klY1URq0togK 84wsbSskGAfe5UQsJScr4_0yxqnrxEG8viw\"}\n    ```"]