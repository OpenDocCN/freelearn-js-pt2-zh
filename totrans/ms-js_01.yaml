- en: Chapter 1. JavaScript Primer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is always difficult to pen the first few words, especially on a subject like
    JavaScript. This difficulty arises primarily because so many things have been
    said about this language. JavaScript has been the *Language of the Web*—lingua
    franca, if you will, since the earliest days of the Netscape Navigator. JavaScript
    went from a tool of the amateur to the weapon of the connoisseur in a shockingly
    short period of time.
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript is the most popular language on the web and open source ecosystem.
    [http://githut.info/](http://githut.info/) charts the number of active repositories
    and overall popularity of the language on GitHub for the last few years. JavaScript's
    popularity and importance can be attributed to its association with the browser.
    Google's V8 and Mozilla's SpiderMonkey are extremely optimized JavaScript engines
    that power Google Chrome and Mozilla Firefox browsers, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: Although web browsers are the most widely used platforms for JavaScript, modern
    databases such as MongoDB and CouchDB use JavaScript as their scripting and query
    language. JavaScript has become an important platform outside browsers as well.
    Projects such as **Node.js** and **io.js** provide powerful platforms to develop
    scalable server environments using JavaScript. Several interesting projects are
    pushing the language capabilities to its limits, for example, **Emscripten** ([http://kripken.github.io/emscripten-site/](http://kripken.github.io/emscripten-site/))
    is a **Low-Level Virtual Machine** (**LLVM**)-based project that compiles C and
    C++ into highly optimizable JavaScript in an **asm.js** format. This allows you
    to run C and C++ on the web at near native speed.
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript is built around solid foundations regarding, for example, functions,
    dynamic objects, loose typing, prototypal inheritance, and a powerful object literal
    notation.
  prefs: []
  type: TYPE_NORMAL
- en: While JavaScript is built on sound design principles, unfortunately, the language
    had to evolve along with the browser. Web browsers are notorious in the way they
    support various features and standards. JavaScript tried to accommodate all the
    whims of the browsers and ended up making some very bad design decisions. These
    bad parts (the term made famous by Douglas Crockford) overshadowed the good parts
    of the language for most people. Programmers wrote bad code, other programmers
    had nightmares trying to debug that bad code, and the language eventually got
    a bad reputation. Unfortunately, JavaScript is one of the most misunderstood programming
    languages ([http://javascript.crockford.com/javascript.html](http://javascript.crockford.com/javascript.html)).
  prefs: []
  type: TYPE_NORMAL
- en: Another criticism leveled at JavaScript is that it lets you get things done
    without you being an expert in the language. I have seen programmers write exceptionally
    bad JavaScript code just because they wanted to get the things done quickly and
    JavaScript allowed them to do just this. I have spent hours debugging very bad
    quality JavaScript written by someone who clearly was not a programmer. However,
    the language is a tool and cannot be blamed for sloppy programming. Like all crafts,
    programming demands extreme dedication and discipline.
  prefs: []
  type: TYPE_NORMAL
- en: A little bit of history
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In 1993, the **Mosaic** browser of **National Center for Supercomputing Applications**
    (**NCSA**) was one of the first popular web browsers. A year later, Netscape Communications
    created the proprietary web browser, **Netscape Navigator**. Several original
    Mosaic authors worked on Navigator.
  prefs: []
  type: TYPE_NORMAL
- en: In 1995, Netscape Communications hired Brendan Eich with the promise of letting
    him implement **Scheme** (a Lisp dialect) in the browser. Before this happened,
    Netscape got in touch with Sun Microsystems (now Oracle) to include Java in the
    Navigator browser.
  prefs: []
  type: TYPE_NORMAL
- en: Due to the popularity and easy programming of Java, Netscape decided that a
    scripting language had to have a syntax similar to that of Java. This ruled out
    adopting existing languages such as Python, **Tool Command Language** (**TCL**),
    or Scheme. Eich wrote the initial prototype in just 10 days ([http://www.computer.org/csdl/mags/co/2012/02/mco2012020007.pdf](http://www.computer.org/csdl/mags/co/2012/02/mco2012020007.pdf)),
    in May 1995\. JavaScript's first code name was **Mocha**, coined by Marc Andreessen.
    Netscape later changed it to **LiveScript**, for trademark reasons. In early December
    1995, Sun licensed the trademark Java to Netscape. The language was renamed to
    its final name, JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: How to use this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is not going to help if you are looking to get things done quickly.
    This book is going to focus on the correct ways to code in JavaScript. We are
    going to spend a lot of time understanding how to avoid the bad parts of the language
    and build reliable and readable code in JavaScript. We will skirt away from sloppy
    features of the language just to make sure that you are not getting used to them—if
    you have already learned to code using these habits, this book will try to nudge
    you away from this. There will be a lot of focus on the correct style and tools
    to make your code better.
  prefs: []
  type: TYPE_NORMAL
- en: Most of the concepts in this book are going to be examples and patterns from
    real-world problems. I will insist that you code each of the snippets to make
    sure that your understanding of the concept is getting programmed into your muscle
    memory. Trust me on this, there is no better way to learn programming than writing
    a lot of code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Typically, you will need to create an HTML page to run an embedded JavaScript
    code as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This sample code shows two ways in which JavaScript is embedded into the HTML
    page. First, the `<script>` tag in `<head>` imports JavaScript, while the second
    `<script>` tag is used to embed inline JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books you have purchased. If you purchased this book
    elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can save this HTML page locally and open it in a browser. On Firefox, you
    can open the **Developer** console (Firefox menu | **Developer** | **Web Console**)
    and you can see the **"Hello World"** text on the **Console** tab. Based on your
    OS and browser version, the screen may look different:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to use this book](img/00002.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can run the page and inspect it using Chrome''s **Developer Tool**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to use this book](img/00003.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'A very interesting thing to notice here is that there is an error displayed
    on the console regarding the missing `.js` file that we are trying to import using
    the following line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Using browser developer consoles or an extension such as **Firebug** can be
    very useful in debugging error conditions in the code. We will discuss in detail
    the debugging techniques in later chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Creating such HTML scaffolds can be tedious for every exercise in this book.
    Instead, we want to use a **Read-Eval-Print-Loop** (**REPL**) for JavaScript.
    Unlike Python, JavaScript does not come packaged with an REPL. We can use Node.js
    as an REPL. If you have Node.js installed on your machine, you can just type `node`
    on the command line and start experimenting with it. You will observe that Node
    REPL errors are not very elegantly displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: After this error, you will have to restart. Still, it can help you try out small
    fragments of code a lot faster.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another tool that I personally use a lot is **JS Bin** ([http://jsbin.com/](http://jsbin.com/)).
    JS Bin provides you with a great set of tools to test JavaScript, such as syntax
    highlighting and runtime error detection. The following is a screenshot of JS
    Bin:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to use this book](img/00004.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Based on your preference, you can pick the tool that makes it easier to try
    out the code samples. Regardless of which tool you use, make sure that you type
    out every exercise in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Hello World
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: No programming language should be published without a customary Hello World
    program—why should this book be any different?
  prefs: []
  type: TYPE_NORMAL
- en: 'Type (don''t copy and paste) the following code in JS Bin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Your screen should look something as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hello World](img/00005.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: An overview of JavaScript
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In a nutshell, JavaScript is a prototype-based scripting language with dynamic
    typing and first-class function support. JavaScript borrows most of its syntax
    from Java, but is also influenced by Awk, Perl, and Python. JavaScript is case-sensitive
    and white space-agnostic.
  prefs: []
  type: TYPE_NORMAL
- en: Comments
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'JavaScript allows single line or multiple line comments. The syntax is similar
    to C or Java:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Variables
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Variables are symbolic names for values. The names of variables, or identifiers,
    must follow certain rules.
  prefs: []
  type: TYPE_NORMAL
- en: A JavaScript variable name must start with a letter, underscore (_), or dollar
    sign ($); subsequent characters can also be digits (0-9). As JavaScript is case
    sensitive, letters include the characters *A* through *Z* (uppercase) and the
    characters *a* through *z* (lowercase).
  prefs: []
  type: TYPE_NORMAL
- en: You can use ISO 8859-1 or Unicode letters in variable names.
  prefs: []
  type: TYPE_NORMAL
- en: 'New variables in JavaScript should be defined with the **var** keyword. If
    you declare a variable without assigning a value to it, its type is undefined
    by default. One terrible thing is that if you don''t declare your variable with
    the var keyword, they become implicit globals. Let me reiterate that implicit
    globals are a terrible thing—we will discuss this in detail later in the book
    when we discuss variable scopes and closures, but it''s important to remember
    that you should always declare a variable with the var keyword unless you know
    what you are doing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The `NaN` value is a special value that indicates that the entity is *not a
    number*.
  prefs: []
  type: TYPE_NORMAL
- en: Constants
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can create a read-only named constant with the **const** keyword. The constant
    name must start with a letter, underscore, or dollar sign and can contain alphabetic,
    numeric, or underscore characters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: A constant cannot change the value through assignment or be redeclared, and
    it has to be initialized to a value.
  prefs: []
  type: TYPE_NORMAL
- en: 'JavaScript supports the standard variations of types:'
  prefs: []
  type: TYPE_NORMAL
- en: Number
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: String
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Boolean
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Symbol (new in ECMAScript 6)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Object:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Function
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Array
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Date
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: RegExp
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Null'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Undefined
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Number
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The **Number** type can represent both 32-bit integer and 64-bit floating point
    values. For example, the following line of code declares a variable to hold an
    integer value, which is defined by the literal 555:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'To define a floating point value, you need to include a decimal point and one
    digit after the decimal point:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Essentially, there's no such thing as an integer in JavaScript. JavaScript uses
    a 64-bit floating point representation, which is the same as Java's double.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hence, you would see something as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: I recommend that you read the exhaustive answer on Stack Overflow ([http://stackoverflow.com/questions/588004/is-floating-point-math-broken](http://stackoverflow.com/questions/588004/is-floating-point-math-broken))
    and ([http://floating-point-gui.de/](http://floating-point-gui.de/)), which explains
    why this is the case. However, it is important to understand that floating point
    arithmetic should be handled with due care. In most cases, you will not have to
    rely on extreme precision of decimal points but if you have to, you can try using
    libraries such as **big.js** ([https://github.com/MikeMcl/big.js](https://github.com/MikeMcl/big.js))
    that try to solve this problem.
  prefs: []
  type: TYPE_NORMAL
- en: If you intend to code extremely precise financial systems, you should represent
    $ values as cents to avoid rounding errors. One of the systems that I worked on
    used to round off the **Value Added Tax** (**VAT**) amount to two decimal points.
    With thousands of orders a day, this rounding off amount per order became a massive
    accounting headache. We needed to overhaul the entire Java web service stack and
    JavaScript frontend for this.
  prefs: []
  type: TYPE_NORMAL
- en: A few special values are also defined as part of the Number type. The first
    two are `Number.MAX_VALUE` and `Number.MIN_VALUE`, which define the outer bounds
    of the Number value set. All ECMAScript numbers must fall between these two values,
    without exception. A calculation can, however, result in a number that does not
    fall in between these two numbers. When a calculation results in a number greater
    than `Number.MAX_VALUE`, it is assigned a value of `Number.POSITIVE_INFINITY`,
    meaning that it has no numeric value anymore. Likewise, a calculation that results
    in a number less than `Number.MIN_VALUE` is assigned a value of `Number.NEGATIVE_INFINITY`,
    which also has no numeric value. If a calculation returns an infinite value, the
    result cannot be used in any further calculations. You can use the `isInfinite()`
    method to verify if the calculation result is an infinity.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another peculiarity of JavaScript is a special value called NaN (short for
    *Not a Number*). In general, this occurs when conversion from another type (String,
    Boolean, and so on) fails. Observe the following peculiarity of NaN:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The second line is strange—NaN is not equal to NaN. If NaN is part of any mathematical
    operation, the result also becomes NaN. As a general rule, stay away from using
    NaN in any expression. For any advanced mathematical operations, you can use the
    `Math` global object and its methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'You can use the `parseInt()` and `parseFloat()` methods to convert a string
    expression to an integer or float:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'With `parseInt()`, you should provide an explicit base to prevent nasty surprises
    on older browsers. The last trick is just using a `+` sign to auto-convert the
    `"42"` string to a number, `42`. It is also prudent to handle the `parseInt()`
    result with `isNaN()`. Let''s see the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: In this example, you are not sure of the type of the value that the `underterminedValue`
    variable can hold if the value is being set from an external interface. If `isNaN()`
    is not handled, `parseInt()` will cause an exception and the program can crash.
  prefs: []
  type: TYPE_NORMAL
- en: String
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In JavaScript, strings are a sequence of Unicode characters (each character
    takes 16 bits). Each character in the string can be accessed by its index. The
    first character index is zero. Strings are enclosed inside `"` or `''`—both are
    valid ways to represent strings. Let''s see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The last line shows you how certain character literals when escaped with a
    backslash `\` can be used as special characters. The following is a list of such
    special characters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`\n`: Newline'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`\t`: Tab'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`\b`: Backspace'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`\r`: Carriage return'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`\\`: Backslash'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`\''`: Single quote'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`\"`: Double quote'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You get default support for special characters and Unicode literals with JavaScript
    strings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'One important thing about JavaScript Strings, Numbers, and Booleans is that
    they actually have wrapper objects around their primitive equivalent. The following
    example shows the usage of the wrapper objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: JavaScript allows multiline strings also. Strings enclosed within [PRE17]
  prefs: []
  type: TYPE_NORMAL
- en: console.log(`string text on first line
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: string text on second line `);
  prefs: []
  type: TYPE_NORMAL
- en: '"string text on first line'
  prefs: []
  type: TYPE_NORMAL
- en: string text on second line "
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: var a=1, b=2;
  prefs: []
  type: TYPE_NORMAL
- en: console.log("Sum of values is :" + (a+b) + " and multiplication is :" + (a*b));
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'console.log(`Sum of values is :${a+b} and multiplication is : ${a*b}`);'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: var xl;
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: console.log(typeof xl);
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: undefined
  prefs: []
  type: TYPE_NORMAL
- en: console.log(null==undefined);
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'true'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: var pBooleanTrue = true;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: var pBooleanFalse = false;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: var fBooleanTrue = Boolean(true);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: var fBooleanFalse = Boolean(false);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: var oBooleanTrue = new Boolean(true);
  prefs: []
  type: TYPE_NORMAL
- en: var oBooleanFalse = new Boolean(false);
  prefs: []
  type: TYPE_NORMAL
- en: console.log(oBooleanTrue); //true
  prefs: []
  type: TYPE_NORMAL
- en: console.log(typeof oBooleanTrue); //object
  prefs: []
  type: TYPE_NORMAL
- en: if(oBooleanFalse){
  prefs: []
  type: TYPE_NORMAL
- en: console.log("I am seriously truthy, don't believe me");
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '>"I am seriously truthy, don''t believe me"'
  prefs: []
  type: TYPE_NORMAL
- en: if(oBooleanTrue){
  prefs: []
  type: TYPE_NORMAL
- en: console.log("I am also truthy, see ?");
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '>"I am also truthy, see ?"'
  prefs: []
  type: TYPE_NORMAL
- en: //Use valueOf() to extract real value within the Boolean object
  prefs: []
  type: TYPE_NORMAL
- en: if(oBooleanFalse.valueOf()){
  prefs: []
  type: TYPE_NORMAL
- en: console.log("With valueOf, I am false");
  prefs: []
  type: TYPE_NORMAL
- en: '}else{'
  prefs: []
  type: TYPE_NORMAL
- en: console.log("Without valueOf, I am still truthy");
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '>"Without valueOf, I am still truthy"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: var aStringObject = new String("string");
  prefs: []
  type: TYPE_NORMAL
- en: console.log(typeof aStringObject);        //"object"
  prefs: []
  type: TYPE_NORMAL
- en: console.log(aStringObject instanceof String);    //true
  prefs: []
  type: TYPE_NORMAL
- en: var aString = "This is a string";
  prefs: []
  type: TYPE_NORMAL
- en: console.log(aString instanceof String);     //false
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: var dataObject = new Date([parameters]);
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: var today = new Date();
  prefs: []
  type: TYPE_NORMAL
- en: console.log(today.getDate()); //27
  prefs: []
  type: TYPE_NORMAL
- en: console.log(today.getMonth()); //4
  prefs: []
  type: TYPE_NORMAL
- en: console.log(today.getFullYear()); //2015
  prefs: []
  type: TYPE_NORMAL
- en: console.log(today.getHours()); //23
  prefs: []
  type: TYPE_NORMAL
- en: console.log(today.getMinutes()); //13
  prefs: []
  type: TYPE_NORMAL
- en: console.log(today.getSeconds()); //10
  prefs: []
  type: TYPE_NORMAL
- en: //number of milliseconds since January 1, 1970, 00:00:00 UTC
  prefs: []
  type: TYPE_NORMAL
- en: console.log(today.getTime()); //1432748611392
  prefs: []
  type: TYPE_NORMAL
- en: console.log(today.getTimezoneOffset()); //-330 Minutes
  prefs: []
  type: TYPE_NORMAL
- en: //Calculating elapsed time
  prefs: []
  type: TYPE_NORMAL
- en: var start = Date.now();
  prefs: []
  type: TYPE_NORMAL
- en: // loop for a long time
  prefs: []
  type: TYPE_NORMAL
- en: for (var i=0;i<100000;i++);
  prefs: []
  type: TYPE_NORMAL
- en: var end = Date.now();
  prefs: []
  type: TYPE_NORMAL
- en: var elapsed = end - start; // elapsed time in milliseconds
  prefs: []
  type: TYPE_NORMAL
- en: console.log(elapsed); //71
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: var a=25;
  prefs: []
  type: TYPE_NORMAL
- en: a=+a;            //No impact on a's value
  prefs: []
  type: TYPE_NORMAL
- en: console.log(a);  //25
  prefs: []
  type: TYPE_NORMAL
- en: var b="70";
  prefs: []
  type: TYPE_NORMAL
- en: console.log(typeof b); //string
  prefs: []
  type: TYPE_NORMAL
- en: b=+b;           //converts string to number
  prefs: []
  type: TYPE_NORMAL
- en: console.log(b); //70
  prefs: []
  type: TYPE_NORMAL
- en: console.log(typeof b); //number
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: var c="foo";
  prefs: []
  type: TYPE_NORMAL
- en: c=+c;            //Converts foo to number
  prefs: []
  type: TYPE_NORMAL
- en: console.log(c);  //NaN
  prefs: []
  type: TYPE_NORMAL
- en: console.log(typeof c);  //number
  prefs: []
  type: TYPE_NORMAL
- en: var zero="";
  prefs: []
  type: TYPE_NORMAL
- en: zero=+zero; //empty strings are converted to 0
  prefs: []
  type: TYPE_NORMAL
- en: console.log(zero);
  prefs: []
  type: TYPE_NORMAL
- en: console.log(typeof zero);
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: var a= 1;
  prefs: []
  type: TYPE_NORMAL
- en: var b= a++;
  prefs: []
  type: TYPE_NORMAL
- en: console.log(a); //2
  prefs: []
  type: TYPE_NORMAL
- en: console.log(b); //1
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: var a= 1;
  prefs: []
  type: TYPE_NORMAL
- en: var b= ++a;
  prefs: []
  type: TYPE_NORMAL
- en: console.log(a);  //2
  prefs: []
  type: TYPE_NORMAL
- en: console.log(b);  //2
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: var a, b, c;
  prefs: []
  type: TYPE_NORMAL
- en: a = b = c = 0;
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: var a = b = 0;
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: console.log(true  && true); // true AND true returns true
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: console.log(true  && false);// true AND false returns false
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: console.log(false && true);// false AND true returns false
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: console.log("Foo" && "Bar");// Foo(true) AND Bar(true) returns Bar
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: console.log(false && "Foo");// false && Foo(true) returns false
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: console.log("Foo" && false);// Foo(true) && false returns false
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: console.log(false && (1 == 2));// false && false(1==2) returns false
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: console.log(true  || true); // true AND true returns true
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: console.log(true  || false);// true AND false returns true
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: console.log(false || true);// false AND true returns true
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: console.log("Foo" || "Bar");// Foo(true) AND Bar(true) returns Foo
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: console.log(false || "Foo");// false && Foo(true) returns Foo
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: console.log("Foo" || false);// Foo(true) && false returns Foo
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: console.log(false || (1 == 2));// false && false(1==2) returns false
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: console.log (0 && "Foo");  //First operand is falsy - return it
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: console.log ("Foo" && "Bar"); //First operand is truthy, return the second operand
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: console.log (0 || "Foo");  //First operand is falsy - return second operand
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: console.log ("Foo" || "Bar"); //First operand is truthy, return it
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: console.log (0 || false); //First operand is falsy, return second operand
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: function greeting(name){
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: name = name || "John";
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: console.log("Hello " + name);
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: greeting("Johnson"); // alerts "Hi Johnson";
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: greeting(); //alerts "Hello John"
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: //If the operand is an object, false is returned.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: var s = new String("string");
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: console.log(!s);              //false
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: //If the operand is the number 0, true is returned.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: var t = 0;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: console.log(!t);              //true
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: //If the operand is any number other than 0, false is returned.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: var x = 11;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: console.log(!x);              //false
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: //If operand is null or NaN, true is returned
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: var y =null;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: var z = NaN;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: console.log(!y);              //true
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: console.log(!z);              //true
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: //If operand is undefined, you get true
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: var foo;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: console.log(!foo);            //true
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'var allowedToDrive = (age > 21) ? "yes" : "no";'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: function isAllowedToDrive(age){
  prefs: []
  type: TYPE_NORMAL
- en: if(age>21){
  prefs: []
  type: TYPE_NORMAL
- en: return true;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}else{'
  prefs: []
  type: TYPE_NORMAL
- en: return false;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: console.log(isAllowedToDrive(22));
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: if (condition1) {
  prefs: []
  type: TYPE_NORMAL
- en: statement1
  prefs: []
  type: TYPE_NORMAL
- en: '} else if (condition2) {'
  prefs: []
  type: TYPE_NORMAL
- en: statement2
  prefs: []
  type: TYPE_NORMAL
- en: '} else if (condition3) {'
  prefs: []
  type: TYPE_NORMAL
- en: statement3
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: ..
  prefs: []
  type: TYPE_NORMAL
- en: '} else {'
  prefs: []
  type: TYPE_NORMAL
- en: statementN
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: if (condition1) {
  prefs: []
  type: TYPE_NORMAL
- en: statement1
  prefs: []
  type: TYPE_NORMAL
- en: '} else'
  prefs: []
  type: TYPE_NORMAL
- en: if (condition2) {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: if(a=b) {
  prefs: []
  type: TYPE_NORMAL
- en: //do something
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: if((a=b)){
  prefs: []
  type: TYPE_NORMAL
- en: //this is really something you want to do
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: function sayDay(day){
  prefs: []
  type: TYPE_NORMAL
- en: switch(day){
  prefs: []
  type: TYPE_NORMAL
- en: 'case 1: console.log("Sunday");'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: break;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'case 2: console.log("Monday");'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: break;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'default:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: console.log("We live in a binary world. Go to Pluto");
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: sayDay(1); //Sunday
  prefs: []
  type: TYPE_NORMAL
- en: sayDay(3); //We live in a binary world. Go to Pluto
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '>sayDay(1);'
  prefs: []
  type: TYPE_NORMAL
- en: Sunday
  prefs: []
  type: TYPE_NORMAL
- en: Monday
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: function debug(level,msg){
  prefs: []
  type: TYPE_NORMAL
- en: switch(level){
  prefs: []
  type: TYPE_NORMAL
- en: 'case "INFO": //intentional fall-through'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'case "WARN" :'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'case "DEBUG": console.log(level+ ": " + msg);'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: break;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'case "ERROR": console.error(msg);'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: debug("INFO","Info Message");
  prefs: []
  type: TYPE_NORMAL
- en: debug("DEBUG","Debug Message");
  prefs: []
  type: TYPE_NORMAL
- en: debug("ERROR","Fatal Exception");
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: var i=0;
  prefs: []
  type: TYPE_NORMAL
- en: while(i<10){
  prefs: []
  type: TYPE_NORMAL
- en: i=i+1;
  prefs: []
  type: TYPE_NORMAL
- en: console.log(i);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: //infinite loop
  prefs: []
  type: TYPE_NORMAL
- en: while(true){
  prefs: []
  type: TYPE_NORMAL
- en: //keep doing this
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: var choice;
  prefs: []
  type: TYPE_NORMAL
- en: do {
  prefs: []
  type: TYPE_NORMAL
- en: choice=getChoiceFromUserInput();
  prefs: []
  type: TYPE_NORMAL
- en: '} while(!isInputValid(input));'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: for (var i=0;i<5;i++){
  prefs: []
  type: TYPE_NORMAL
- en: console.log("Hello");
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: var x=0;
  prefs: []
  type: TYPE_NORMAL
- en: //Omit initialitzation
  prefs: []
  type: TYPE_NORMAL
- en: for (;x<5;x++){
  prefs: []
  type: TYPE_NORMAL
- en: console.log("Hello");
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: //Omit exit condition
  prefs: []
  type: TYPE_NORMAL
- en: for (var j=0;;j++){
  prefs: []
  type: TYPE_NORMAL
- en: //exit condition
  prefs: []
  type: TYPE_NORMAL
- en: if(j>=5){
  prefs: []
  type: TYPE_NORMAL
- en: break;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}else{'
  prefs: []
  type: TYPE_NORMAL
- en: console.log("Hello");
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: //Omit increment
  prefs: []
  type: TYPE_NORMAL
- en: for (var k=0; k<5;){
  prefs: []
  type: TYPE_NORMAL
- en: console.log("Hello");
  prefs: []
  type: TYPE_NORMAL
- en: k++;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: var arr = [10, 20, 30];
  prefs: []
  type: TYPE_NORMAL
- en: // Assign all array values to 100
  prefs: []
  type: TYPE_NORMAL
- en: for (i = 0; i < arr.length; arr[i++] = 100);
  prefs: []
  type: TYPE_NORMAL
- en: console.log(arr);
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: var n = 0;
  prefs: []
  type: TYPE_NORMAL
- en: var o = new String("0");
  prefs: []
  type: TYPE_NORMAL
- en: var s = "0";
  prefs: []
  type: TYPE_NORMAL
- en: var b = false;
  prefs: []
  type: TYPE_NORMAL
- en: console.log(n === n); // true - same values for numbers
  prefs: []
  type: TYPE_NORMAL
- en: console.log(o === o); // true - non numbers are compared for their values
  prefs: []
  type: TYPE_NORMAL
- en: console.log(s === s); // true - ditto
  prefs: []
  type: TYPE_NORMAL
- en: console.log(n === o); // false - no implicit type conversion, types are different
  prefs: []
  type: TYPE_NORMAL
- en: console.log(n === s); // false - types are different
  prefs: []
  type: TYPE_NORMAL
- en: console.log(o === s); // false - types are different
  prefs: []
  type: TYPE_NORMAL
- en: console.log(null === undefined); // false
  prefs: []
  type: TYPE_NORMAL
- en: console.log(o === null); // false
  prefs: []
  type: TYPE_NORMAL
- en: console.log(o === undefined); // false
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: var fortyTwo = 42;
  prefs: []
  type: TYPE_NORMAL
- en: console.log(fortyTwo.toString()[1]); //prints "2"
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: typeof 1             === "number";    // true
  prefs: []
  type: TYPE_NORMAL
- en: typeof "1"           === "string";    // true
  prefs: []
  type: TYPE_NORMAL
- en: 'typeof { age: 39 }   === "object";    // true'
  prefs: []
  type: TYPE_NORMAL
- en: typeof Symbol()      === "symbol";    // true
  prefs: []
  type: TYPE_NORMAL
- en: typeof undefined     === "undefined"; // true
  prefs: []
  type: TYPE_NORMAL
- en: typeof true          === "boolean";   // true
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: var t=1;
  prefs: []
  type: TYPE_NORMAL
- en: var u=""+t; //implicit coercion
  prefs: []
  type: TYPE_NORMAL
- en: console.log(typeof t);  //"number"
  prefs: []
  type: TYPE_NORMAL
- en: console.log(typeof u);  //"string"
  prefs: []
  type: TYPE_NORMAL
- en: var v=String(t);  //Explicit coercion
  prefs: []
  type: TYPE_NORMAL
- en: console.log(typeof v);  //"string"
  prefs: []
  type: TYPE_NORMAL
- en: var x=null
  prefs: []
  type: TYPE_NORMAL
- en: console.log(""+x); //"null"
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: var a="abc";
  prefs: []
  type: TYPE_NORMAL
- en: console.log(a.length);
  prefs: []
  type: TYPE_NORMAL
- en: console.log(a.toUpperCase());
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: As we discussed earlier, JavaScript kindly wraps these primitives in their wrappers
    by default thus making it possible for us to directly access the wrapper's methods
    and properties as if they were of the primitives themselves.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: typeof null ==="object" //true
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: var x = null;
  prefs: []
  type: TYPE_NORMAL
- en: if (!x && typeof x === "object"){
  prefs: []
  type: TYPE_NORMAL
- en: console.log("100% null");
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: f = function test() {
  prefs: []
  type: TYPE_NORMAL
- en: return 12;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: console.log(typeof f === "function");  //prints "true"
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: console.log (typeof [1,2,3,4]); //"object"
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: var a = 1;
  prefs: []
  type: TYPE_NORMAL
- en: typeof a; // "number"
  prefs: []
  type: TYPE_NORMAL
- en: a = false;
  prefs: []
  type: TYPE_NORMAL
- en: typeof a; // "boolean"
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: typeof typeof 1; // "string"
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: if (a < 1) a = 1 console.log(a)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: if (a < 1) a = 1; console.log(a);
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: function add(a,b) { return a+b }
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: function add(a,b) { return a+b; }
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: //Cramped style (Bad)
  prefs: []
  type: TYPE_NORMAL
- en: if(condition) doSomeTask();
  prefs: []
  type: TYPE_NORMAL
- en: while(condition) i++;
  prefs: []
  type: TYPE_NORMAL
- en: for(var i=0;i<10;i++) iterate();
  prefs: []
  type: TYPE_NORMAL
- en: //Use whitespace for better readability (Good)
  prefs: []
  type: TYPE_NORMAL
- en: //Place 1 space before the leading brace.
  prefs: []
  type: TYPE_NORMAL
- en: if (condition) {
  prefs: []
  type: TYPE_NORMAL
- en: // statements
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: while ( condition ) {
  prefs: []
  type: TYPE_NORMAL
- en: // statements
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: for ( var i = 0; i < 100; i++ ) {
  prefs: []
  type: TYPE_NORMAL
- en: // statements
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '// Better:'
  prefs: []
  type: TYPE_NORMAL
- en: var i,
  prefs: []
  type: TYPE_NORMAL
- en: length = 100;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: for ( i = 0; i < length; i++ ) {
  prefs: []
  type: TYPE_NORMAL
- en: // statements
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: // Or...
  prefs: []
  type: TYPE_NORMAL
- en: var i = 0,
  prefs: []
  type: TYPE_NORMAL
- en: length = 100;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: for ( ; i < length; i++ ) {
  prefs: []
  type: TYPE_NORMAL
- en: // statements
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: var value;
  prefs: []
  type: TYPE_NORMAL
- en: for ( value in object ) {
  prefs: []
  type: TYPE_NORMAL
- en: // statements
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: if ( true ) {
  prefs: []
  type: TYPE_NORMAL
- en: // statements
  prefs: []
  type: TYPE_NORMAL
- en: '} else {'
  prefs: []
  type: TYPE_NORMAL
- en: // statements
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: //Set off operators with spaces.
  prefs: []
  type: TYPE_NORMAL
- en: // bad
  prefs: []
  type: TYPE_NORMAL
- en: var x=y+5;
  prefs: []
  type: TYPE_NORMAL
- en: // good
  prefs: []
  type: TYPE_NORMAL
- en: var x = y + 5;
  prefs: []
  type: TYPE_NORMAL
- en: //End files with a single newline character.
  prefs: []
  type: TYPE_NORMAL
- en: // bad
  prefs: []
  type: TYPE_NORMAL
- en: (function(global) {
  prefs: []
  type: TYPE_NORMAL
- en: // ...stuff...
  prefs: []
  type: TYPE_NORMAL
- en: '})(this);'
  prefs: []
  type: TYPE_NORMAL
- en: // bad
  prefs: []
  type: TYPE_NORMAL
- en: (function(global) {
  prefs: []
  type: TYPE_NORMAL
- en: // ...stuff...
  prefs: []
  type: TYPE_NORMAL
- en: '})(this);↵'
  prefs: []
  type: TYPE_NORMAL
- en: ↵
  prefs: []
  type: TYPE_NORMAL
- en: // good
  prefs: []
  type: TYPE_NORMAL
- en: (function(global) {
  prefs: []
  type: TYPE_NORMAL
- en: // ...stuff...
  prefs: []
  type: TYPE_NORMAL
- en: '})(this);↵'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: '//String:'
  prefs: []
  type: TYPE_NORMAL
- en: typeof variable === "string"
  prefs: []
  type: TYPE_NORMAL
- en: '//Number:'
  prefs: []
  type: TYPE_NORMAL
- en: typeof variable === "number"
  prefs: []
  type: TYPE_NORMAL
- en: '//Boolean:'
  prefs: []
  type: TYPE_NORMAL
- en: typeof variable === "boolean"
  prefs: []
  type: TYPE_NORMAL
- en: '//Object:'
  prefs: []
  type: TYPE_NORMAL
- en: typeof variable === "object"
  prefs: []
  type: TYPE_NORMAL
- en: '//null:'
  prefs: []
  type: TYPE_NORMAL
- en: variable === null
  prefs: []
  type: TYPE_NORMAL
- en: '//null or undefined:'
  prefs: []
  type: TYPE_NORMAL
- en: variable == null
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: // bad
  prefs: []
  type: TYPE_NORMAL
- en: const totalScore = this.reviewScore + '';
  prefs: []
  type: TYPE_NORMAL
- en: // good
  prefs: []
  type: TYPE_NORMAL
- en: const totalScore = String(this.reviewScore);
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: const inputValue = '4';
  prefs: []
  type: TYPE_NORMAL
- en: // bad
  prefs: []
  type: TYPE_NORMAL
- en: const val = new Number(inputValue);
  prefs: []
  type: TYPE_NORMAL
- en: // bad
  prefs: []
  type: TYPE_NORMAL
- en: const val = +inputValue;
  prefs: []
  type: TYPE_NORMAL
- en: // bad
  prefs: []
  type: TYPE_NORMAL
- en: const val = inputValue >> 0;
  prefs: []
  type: TYPE_NORMAL
- en: // bad
  prefs: []
  type: TYPE_NORMAL
- en: const val = parseInt(inputValue);
  prefs: []
  type: TYPE_NORMAL
- en: // good
  prefs: []
  type: TYPE_NORMAL
- en: const val = Number(inputValue);
  prefs: []
  type: TYPE_NORMAL
- en: // good
  prefs: []
  type: TYPE_NORMAL
- en: const val = parseInt(inputValue, 10);
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: const age = 0;  // bad
  prefs: []
  type: TYPE_NORMAL
- en: const hasAge = new Boolean(age);  // good
  prefs: []
  type: TYPE_NORMAL
- en: const hasAge = Boolean(age); // good
  prefs: []
  type: TYPE_NORMAL
- en: const hasAge = !!age;
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: // When evaluating that array has length,
  prefs: []
  type: TYPE_NORMAL
- en: '// WRONG:'
  prefs: []
  type: TYPE_NORMAL
- en: if ( array.length > 0 ) ...
  prefs: []
  type: TYPE_NORMAL
- en: '// evaluate truthiness(GOOD):'
  prefs: []
  type: TYPE_NORMAL
- en: if ( array.length ) ...
  prefs: []
  type: TYPE_NORMAL
- en: // When evaluating that an array is empty,
  prefs: []
  type: TYPE_NORMAL
- en: '// (BAD):'
  prefs: []
  type: TYPE_NORMAL
- en: if ( array.length === 0 ) ...
  prefs: []
  type: TYPE_NORMAL
- en: '// evaluate truthiness(GOOD):'
  prefs: []
  type: TYPE_NORMAL
- en: if ( !array.length ) ...
  prefs: []
  type: TYPE_NORMAL
- en: // When checking if string is not empty,
  prefs: []
  type: TYPE_NORMAL
- en: '// (BAD):'
  prefs: []
  type: TYPE_NORMAL
- en: if ( string !== "" ) ...
  prefs: []
  type: TYPE_NORMAL
- en: '// evaluate truthiness (GOOD):'
  prefs: []
  type: TYPE_NORMAL
- en: if ( string ) ...
  prefs: []
  type: TYPE_NORMAL
- en: // When checking if a string is empty,
  prefs: []
  type: TYPE_NORMAL
- en: '// BAD:'
  prefs: []
  type: TYPE_NORMAL
- en: if ( string === "" ) ...
  prefs: []
  type: TYPE_NORMAL
- en: '// evaluate falsy-ness (GOOD):'
  prefs: []
  type: TYPE_NORMAL
- en: if ( !string ) ...
  prefs: []
  type: TYPE_NORMAL
- en: // When checking if a reference is true,
  prefs: []
  type: TYPE_NORMAL
- en: '// BAD:'
  prefs: []
  type: TYPE_NORMAL
- en: if ( foo === true ) ...
  prefs: []
  type: TYPE_NORMAL
- en: // GOOD
  prefs: []
  type: TYPE_NORMAL
- en: if ( foo ) ...
  prefs: []
  type: TYPE_NORMAL
- en: // When checking if a reference is false,
  prefs: []
  type: TYPE_NORMAL
- en: '// BAD:'
  prefs: []
  type: TYPE_NORMAL
- en: if ( foo === false ) ...
  prefs: []
  type: TYPE_NORMAL
- en: // GOOD
  prefs: []
  type: TYPE_NORMAL
- en: if ( !foo ) ...
  prefs: []
  type: TYPE_NORMAL
- en: '// this will also match: 0, "", null, undefined, NaN'
  prefs: []
  type: TYPE_NORMAL
- en: // If you MUST test for a boolean false, then use
  prefs: []
  type: TYPE_NORMAL
- en: if ( foo === false ) ...
  prefs: []
  type: TYPE_NORMAL
- en: // a reference that might be null or undefined, but NOT false, "" or 0,
  prefs: []
  type: TYPE_NORMAL
- en: '// BAD:'
  prefs: []
  type: TYPE_NORMAL
- en: if ( foo === null || foo === undefined ) ...
  prefs: []
  type: TYPE_NORMAL
- en: // GOOD
  prefs: []
  type: TYPE_NORMAL
- en: if ( foo == null ) ...
  prefs: []
  type: TYPE_NORMAL
- en: // Don't complicate matters
  prefs: []
  type: TYPE_NORMAL
- en: 'return x === 0 ? ''sunday'' : x === 1 ? ''Monday'' : ''Tuesday'';'
  prefs: []
  type: TYPE_NORMAL
- en: '// Better:'
  prefs: []
  type: TYPE_NORMAL
- en: if (x === 0) {
  prefs: []
  type: TYPE_NORMAL
- en: return 'Sunday';
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '} else if (x === 1) {'
  prefs: []
  type: TYPE_NORMAL
- en: return 'Monday';
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '} else {'
  prefs: []
  type: TYPE_NORMAL
- en: return 'Tuesday';
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '// Even Better:'
  prefs: []
  type: TYPE_NORMAL
- en: switch (x) {
  prefs: []
  type: TYPE_NORMAL
- en: 'case 0:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: return 'Sunday';
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'case 1:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: return 'Monday';
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'default:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: return 'Tuesday';
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: //Avoid single letter names. Be descriptive with your naming.
  prefs: []
  type: TYPE_NORMAL
- en: // bad
  prefs: []
  type: TYPE_NORMAL
- en: function q() {
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: // good
  prefs: []
  type: TYPE_NORMAL
- en: function query() {
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: //Use camelCase when naming objects, functions, and instances.
  prefs: []
  type: TYPE_NORMAL
- en: // bad
  prefs: []
  type: TYPE_NORMAL
- en: const OBJEcT = {};
  prefs: []
  type: TYPE_NORMAL
- en: const this_is_object = {};
  prefs: []
  type: TYPE_NORMAL
- en: function c() {}
  prefs: []
  type: TYPE_NORMAL
- en: // good
  prefs: []
  type: TYPE_NORMAL
- en: const thisIsObject = {};
  prefs: []
  type: TYPE_NORMAL
- en: function thisIsFunction() {}
  prefs: []
  type: TYPE_NORMAL
- en: //Use PascalCase when naming constructors or classes.
  prefs: []
  type: TYPE_NORMAL
- en: // bad
  prefs: []
  type: TYPE_NORMAL
- en: function user(options) {
  prefs: []
  type: TYPE_NORMAL
- en: this.name = options.name;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: const bad = new user({
  prefs: []
  type: TYPE_NORMAL
- en: 'name: ''nope'','
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: // good
  prefs: []
  type: TYPE_NORMAL
- en: class User {
  prefs: []
  type: TYPE_NORMAL
- en: constructor(options) {
  prefs: []
  type: TYPE_NORMAL
- en: this.name = options.name;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: const good = new User({
  prefs: []
  type: TYPE_NORMAL
- en: 'name: ''yup'','
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: // Use a leading underscore _ when naming private properties.
  prefs: []
  type: TYPE_NORMAL
- en: // bad
  prefs: []
  type: TYPE_NORMAL
- en: this.__firstName__ = 'Panda';
  prefs: []
  type: TYPE_NORMAL
- en: this.firstName_ = 'Panda';
  prefs: []
  type: TYPE_NORMAL
- en: // good
  prefs: []
  type: TYPE_NORMAL
- en: this._firstName = 'Panda';
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'eval():'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: console.log(typeof eval(new String("1+1"))); // "object"
  prefs: []
  type: TYPE_NORMAL
- en: console.log(eval(new String("1+1")));        //1+1
  prefs: []
  type: TYPE_NORMAL
- en: console.log(eval("1+1"));                    // 2
  prefs: []
  type: TYPE_NORMAL
- en: console.log(typeof eval("1+1"));             // returns "number"
  prefs: []
  type: TYPE_NORMAL
- en: var expression = new String("1+1");
  prefs: []
  type: TYPE_NORMAL
- en: console.log(eval(expression.toString()));    //2
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: '''use strict'';'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: function foo() {
  prefs: []
  type: TYPE_NORMAL
- en: '''use strict'';'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: function sloppyFunc() {
  prefs: []
  type: TYPE_NORMAL
- en: sloppyVar = 123;
  prefs: []
  type: TYPE_NORMAL
- en: '} sloppyFunc();  // creates global variable `sloppyVar`'
  prefs: []
  type: TYPE_NORMAL
- en: console.log(sloppyVar);  // 123
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: function strictFunc() {
  prefs: []
  type: TYPE_NORMAL
- en: '''use strict'';'
  prefs: []
  type: TYPE_NORMAL
- en: strictVar = 123;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: 'strictFunc();  // ReferenceError: strictVar is not defined'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 010 === 8 true
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: function f() {
  prefs: []
  type: TYPE_NORMAL
- en: '''use strict'';'
  prefs: []
  type: TYPE_NORMAL
- en: return 010
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '//SyntaxError: Octal literals are not allowed in'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: npm install jshint –g
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'test.js file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: function f(condition) {
  prefs: []
  type: TYPE_NORMAL
- en: switch (condition) {
  prefs: []
  type: TYPE_NORMAL
- en: 'case 1:'
  prefs: []
  type: TYPE_NORMAL
- en: console.log(1);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'case 2:'
  prefs: []
  type: TYPE_NORMAL
- en: console.log(1);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: '>jshint test.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'test.js: line 4, col 19, Expected a ''break'' statement before ''case''.'
  prefs: []
  type: TYPE_NORMAL
- en: 1 error
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"asi": false,'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"expr": true,'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"loopfunc": true,'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"curly": false,'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"evil": true,'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"white": true,'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"undef": true,'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"indent": 4'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we set some foundations around JavaScript grammar, types, and
    stylistic considerations. We have consciously not talked about other important
    aspects such as functions, variable scopes, and closures primarily because they
    deserve their own place in this book. I am sure that this chapter helps you understand
    some of the primary concepts of JavaScript. With these foundations in place, we
    will take a look at how we can write professional quality JavaScript code.
  prefs: []
  type: TYPE_NORMAL
