- en: Chapter 1. JavaScript Primer
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一章 JavaScript 入门
- en: It is always difficult to pen the first few words, especially on a subject like
    JavaScript. This difficulty arises primarily because so many things have been
    said about this language. JavaScript has been the *Language of the Web*—lingua
    franca, if you will, since the earliest days of the Netscape Navigator. JavaScript
    went from a tool of the amateur to the weapon of the connoisseur in a shockingly
    short period of time.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 对于像 JavaScript 这样的主题，写下最初的几句话总是困难的。这种困难主要源于人们对这种语言说了很多。自从 Netscape Navigator
    的早期阶段以来，JavaScript 一直是 *Web 的语言*——如果你愿意，可以说是互联网的通用语。JavaScript 迅速地从业余爱好者的工具变成了鉴赏家的武器。
- en: JavaScript is the most popular language on the web and open source ecosystem.
    [http://githut.info/](http://githut.info/) charts the number of active repositories
    and overall popularity of the language on GitHub for the last few years. JavaScript's
    popularity and importance can be attributed to its association with the browser.
    Google's V8 and Mozilla's SpiderMonkey are extremely optimized JavaScript engines
    that power Google Chrome and Mozilla Firefox browsers, respectively.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 是 Web 和开源生态系统中最受欢迎的语言。[http://githut.info/](http://githut.info/)
    统计了过去几年中 GitHub 上活跃仓库的数量以及该语言的整体受欢迎程度。JavaScript 之所以受欢迎和重要，应归功于它与浏览器的关联。谷歌的 V8
    和 Mozilla 的 SpiderMonkey 是极其优化的 JavaScript 引擎，分别驱动着谷歌 Chrome 和 Mozilla Firefox
    浏览器。
- en: Although web browsers are the most widely used platforms for JavaScript, modern
    databases such as MongoDB and CouchDB use JavaScript as their scripting and query
    language. JavaScript has become an important platform outside browsers as well.
    Projects such as **Node.js** and **io.js** provide powerful platforms to develop
    scalable server environments using JavaScript. Several interesting projects are
    pushing the language capabilities to its limits, for example, **Emscripten** ([http://kripken.github.io/emscripten-site/](http://kripken.github.io/emscripten-site/))
    is a **Low-Level Virtual Machine** (**LLVM**)-based project that compiles C and
    C++ into highly optimizable JavaScript in an **asm.js** format. This allows you
    to run C and C++ on the web at near native speed.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Web 浏览器是 JavaScript 最广泛使用的平台，但现代数据库如 MongoDB 和 CouchDB 使用 JavaScript 作为它们的脚本和查询语言。JavaScript
    也已经成为浏览器之外的重要平台。例如 **Node.js** 和 **io.js** 这样的项目提供了强大的平台，使开发者能用 JavaScript 开发可扩展的服务器环境。一些有趣的项目正在将语言能力推向极限，例如
    **Emscripten** ([http://kripken.github.io/emscripten-site/](http://kripken.github.io/emscripten-site/))
    是一个基于 **LLVM**（**低级虚拟机**）的项目，它将 C 和 C++ 编译成高度优化的 JavaScript，格式为 **asm.js**。这使得你能够在网上以接近本地速度运行
    C 和 C++。
- en: JavaScript is built around solid foundations regarding, for example, functions,
    dynamic objects, loose typing, prototypal inheritance, and a powerful object literal
    notation.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 是围绕坚实的基础构建的，例如函数、动态对象、松散类型、原型继承以及强大的对象字面量表示法。
- en: While JavaScript is built on sound design principles, unfortunately, the language
    had to evolve along with the browser. Web browsers are notorious in the way they
    support various features and standards. JavaScript tried to accommodate all the
    whims of the browsers and ended up making some very bad design decisions. These
    bad parts (the term made famous by Douglas Crockford) overshadowed the good parts
    of the language for most people. Programmers wrote bad code, other programmers
    had nightmares trying to debug that bad code, and the language eventually got
    a bad reputation. Unfortunately, JavaScript is one of the most misunderstood programming
    languages ([http://javascript.crockford.com/javascript.html](http://javascript.crockford.com/javascript.html)).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 JavaScript 是建立在坚实的设计原则之上的，但不幸的是，这种语言不得不随着浏览器的进化而发展。Web 浏览器以支持各种特性和标准的方式而闻名于世。JavaScript
    试图适应浏览器的所有奇思妙想，结果做出了一些非常糟糕的设计决策。这些糟糕的部分（这个术语由 Douglas Crockford 普及）使大多数人忽略了这门语言的好处。程序员写出糟糕的代码，其他程序员试图调试这些糟糕代码时噩梦般地痛苦，这门语言最终获得了坏名声。不幸的是，JavaScript
    是被误解最多的编程语言之一([http://javascript.crockford.com/javascript.html](http://javascript.crockford.com/javascript.html))。
- en: Another criticism leveled at JavaScript is that it lets you get things done
    without you being an expert in the language. I have seen programmers write exceptionally
    bad JavaScript code just because they wanted to get the things done quickly and
    JavaScript allowed them to do just this. I have spent hours debugging very bad
    quality JavaScript written by someone who clearly was not a programmer. However,
    the language is a tool and cannot be blamed for sloppy programming. Like all crafts,
    programming demands extreme dedication and discipline.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种批评是JavaScript允许你在不成为该语言专家的情况下完成任务。我见过程序员因为想快速完成任务而写出极其糟糕的JavaScript代码，而JavaScript正好允许他们这样做。我曾花了几个小时来调试一个明显不是程序员的人写的质量非常低的JavaScript代码。然而，语言只是一种工具，不能因为编程不严谨而责怪它。和所有工艺一样，编程需要极大的投入和纪律。
- en: A little bit of history
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 有一点历史
- en: In 1993, the **Mosaic** browser of **National Center for Supercomputing Applications**
    (**NCSA**) was one of the first popular web browsers. A year later, Netscape Communications
    created the proprietary web browser, **Netscape Navigator**. Several original
    Mosaic authors worked on Navigator.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 1993年，**国家超级计算应用中心**（**NCSA**）的**Mosaic**浏览器是首批流行的网页浏览器之一。一年后，Netscape通信公司创建了专有的网页浏览器**Netscape
    Navigator**。几位原始Mosaic作者参与了Navigator的开发。
- en: In 1995, Netscape Communications hired Brendan Eich with the promise of letting
    him implement **Scheme** (a Lisp dialect) in the browser. Before this happened,
    Netscape got in touch with Sun Microsystems (now Oracle) to include Java in the
    Navigator browser.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 1995年，Netscape通信公司聘请了Brendan Eich，并承诺让他实现**Scheme**（一种Lisp方言）在浏览器中。在这一切发生之前，Netscape曾与Sun
    Microsystems（现在为Oracle）联系，希望在Navigator浏览器中包含Java。
- en: Due to the popularity and easy programming of Java, Netscape decided that a
    scripting language had to have a syntax similar to that of Java. This ruled out
    adopting existing languages such as Python, **Tool Command Language** (**TCL**),
    or Scheme. Eich wrote the initial prototype in just 10 days ([http://www.computer.org/csdl/mags/co/2012/02/mco2012020007.pdf](http://www.computer.org/csdl/mags/co/2012/02/mco2012020007.pdf)),
    in May 1995\. JavaScript's first code name was **Mocha**, coined by Marc Andreessen.
    Netscape later changed it to **LiveScript**, for trademark reasons. In early December
    1995, Sun licensed the trademark Java to Netscape. The language was renamed to
    its final name, JavaScript.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Java的流行和易编程性，Netscape决定脚本语言必须具有与Java相似的语法。这使得采用现有语言如Python、**工具命令语言**（**TCL**）或Scheme变得不可能。Eich仅用10天就编写了最初的原型（http://www.computer.org/csdl/mags/co/2012/02/mco2012020007.pdf），在1995年5月。JavaScript的第一个代号是**Mocha**，由Marc
    Andreessen提出。Netscape后来将其更名为**LiveScript**，出于商标原因。1995年12月初，Sun将Java商标授权给Netscape。该语言最终被更名为JavaScript。
- en: How to use this book
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何使用这本书
- en: This book is not going to help if you are looking to get things done quickly.
    This book is going to focus on the correct ways to code in JavaScript. We are
    going to spend a lot of time understanding how to avoid the bad parts of the language
    and build reliable and readable code in JavaScript. We will skirt away from sloppy
    features of the language just to make sure that you are not getting used to them—if
    you have already learned to code using these habits, this book will try to nudge
    you away from this. There will be a lot of focus on the correct style and tools
    to make your code better.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是想快速完成任务，这本书不会帮到你。这本书将专注于JavaScript的正确编程方式。我们将花很多时间了解如何避免该语言的缺点，并在JavaScript中构建可靠和可读的代码。我们将避免该语言的粗糙特性，以确保你不会习惯它们——如果你已经习惯了这些习惯，这本书将试图让你改掉这个习惯。我们将重点关注正确的编程风格和工具，以使你的代码变得更好。
- en: Most of the concepts in this book are going to be examples and patterns from
    real-world problems. I will insist that you code each of the snippets to make
    sure that your understanding of the concept is getting programmed into your muscle
    memory. Trust me on this, there is no better way to learn programming than writing
    a lot of code.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书中的大部分概念都将是来自现实世界问题的例子和模式。我会坚持让你亲自编写每个代码片段，以确保你对概念的理解能够编程到你的肌肉记忆中。相信我，没有比大量编写代码更好的学习编程的方法了。
- en: 'Typically, you will need to create an HTML page to run an embedded JavaScript
    code as follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，你需要创建一个HTML页面来运行嵌入的JavaScript代码，如下所示：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This sample code shows two ways in which JavaScript is embedded into the HTML
    page. First, the `<script>` tag in `<head>` imports JavaScript, while the second
    `<script>` tag is used to embed inline JavaScript.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例代码展示了JavaScript嵌入HTML页面的两种方式。首先，`<script>`标签在`<head>`中导入JavaScript，而第二个`<script>`标签用于嵌入内联JavaScript。
- en: Tip
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books you have purchased. If you purchased this book
    elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从[http://www.packtpub.com](http://www.packtpub.com)下载你购买的所有Packt Publishing书籍的示例代码文件。如果你在其他地方购买了这本书，你可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，以便文件直接通过电子邮件发送给你。
- en: 'You can save this HTML page locally and open it in a browser. On Firefox, you
    can open the **Developer** console (Firefox menu | **Developer** | **Web Console**)
    and you can see the **"Hello World"** text on the **Console** tab. Based on your
    OS and browser version, the screen may look different:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将这个HTML页面保存到本地并在浏览器中打开。在Firefox中，你可以打开**开发者**菜单（Firefox菜单 | **开发者** | **网络控制台**）并在**控制台**标签上看到**"Hello
    World"**文本。根据你的操作系统和浏览器版本，屏幕可能看起来不同：
- en: '![How to use this book](img/00002.jpeg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![如何使用本书](img/00002.jpeg)'
- en: 'You can run the page and inspect it using Chrome''s **Developer Tool**:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用Chrome的**开发者工具**运行页面并检查：
- en: '![How to use this book](img/00003.jpeg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![如何使用本书](img/00003.jpeg)'
- en: 'A very interesting thing to notice here is that there is an error displayed
    on the console regarding the missing `.js` file that we are trying to import using
    the following line of code:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里值得注意的是，控制台显示了一个关于我们试图通过以下代码行导入的`.js`文件缺失的错误：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Using browser developer consoles or an extension such as **Firebug** can be
    very useful in debugging error conditions in the code. We will discuss in detail
    the debugging techniques in later chapters.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 使用浏览器开发者控制台或扩展程序，如**Firebug**，在调试代码错误条件时可能非常有用。我们将在后面的章节中详细讨论调试技术。
- en: Creating such HTML scaffolds can be tedious for every exercise in this book.
    Instead, we want to use a **Read-Eval-Print-Loop** (**REPL**) for JavaScript.
    Unlike Python, JavaScript does not come packaged with an REPL. We can use Node.js
    as an REPL. If you have Node.js installed on your machine, you can just type `node`
    on the command line and start experimenting with it. You will observe that Node
    REPL errors are not very elegantly displayed.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 创建这样的HTML脚手架对本书中的每个练习来说都可能很繁琐。相反，我们希望使用一个**读取-评估-打印-循环**（**REPL**）来运行JavaScript。与Python不同，JavaScript没有内置的REPL。我们可以使用Node.js作为REPL。如果你已经在你的电脑上安装了Node.js，你只需在命令行中输入`node`并开始尝试。你会观察到Node
    REPL错误并不是非常优雅地显示。
- en: 'Let''s see the following example:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看以下示例：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: After this error, you will have to restart. Still, it can help you try out small
    fragments of code a lot faster.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 出现这个错误后，你必须重新启动。尽管如此，它还是能让你更快地尝试小段代码。
- en: 'Another tool that I personally use a lot is **JS Bin** ([http://jsbin.com/](http://jsbin.com/)).
    JS Bin provides you with a great set of tools to test JavaScript, such as syntax
    highlighting and runtime error detection. The following is a screenshot of JS
    Bin:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我个人经常使用的一个工具是**JS Bin** ([http://jsbin.com/](http://jsbin.com/)）。JS Bin为你提供了一套很好的工具来测试JavaScript，比如语法高亮和运行时错误检测。以下是JS
    Bin的屏幕截图：
- en: '![How to use this book](img/00004.jpeg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![如何使用本书](img/00004.jpeg)'
- en: Based on your preference, you can pick the tool that makes it easier to try
    out the code samples. Regardless of which tool you use, make sure that you type
    out every exercise in this book.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你的喜好，你可以选择一个让你更容易尝试代码样品的工具。无论你使用哪种工具，确保你在这本书中输出了每一个练习。
- en: Hello World
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你好，世界
- en: No programming language should be published without a customary Hello World
    program—why should this book be any different?
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 没有编程语言应该发布而没有传统的Hello World程序——这本书为什么应该有任何不同？
- en: 'Type (don''t copy and paste) the following code in JS Bin:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在JS Bin中输入以下代码：（不要复制粘贴）
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Your screen should look something as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你的屏幕应该看起来像以下这样：
- en: '![Hello World](img/00005.jpeg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![Hello World](img/00005.jpeg)'
- en: An overview of JavaScript
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JavaScript概述
- en: In a nutshell, JavaScript is a prototype-based scripting language with dynamic
    typing and first-class function support. JavaScript borrows most of its syntax
    from Java, but is also influenced by Awk, Perl, and Python. JavaScript is case-sensitive
    and white space-agnostic.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，JavaScript 是一种基于原型的脚本语言，具有动态类型和一流的函数支持。JavaScript 的大部分语法借自 Java，但也受到了 Awk、Perl
    和 Python 的影响。JavaScript 是大小写敏感的，且对空格不敏感。
- en: Comments
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注释
- en: 'JavaScript allows single line or multiple line comments. The syntax is similar
    to C or Java:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 允许单行或多行注释。语法与 C 或 Java 类似：
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Variables
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 变量
- en: Variables are symbolic names for values. The names of variables, or identifiers,
    must follow certain rules.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 变量是值的符号名称。变量的名称，即标识符，必须遵循某些规则。
- en: A JavaScript variable name must start with a letter, underscore (_), or dollar
    sign ($); subsequent characters can also be digits (0-9). As JavaScript is case
    sensitive, letters include the characters *A* through *Z* (uppercase) and the
    characters *a* through *z* (lowercase).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 变量名必须以字母、下划线 (_)、或美元符号 ($) 开头；后续字符还可以是数字 (0-9)。由于 JavaScript 是大小写敏感的，所以字母包括
    *A* 到 *Z* （大写）和 *a* 到 *z* （小写）的字符。
- en: You can use ISO 8859-1 or Unicode letters in variable names.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 ISO 8859-1 或 Unicode 字母作为变量名。
- en: 'New variables in JavaScript should be defined with the **var** keyword. If
    you declare a variable without assigning a value to it, its type is undefined
    by default. One terrible thing is that if you don''t declare your variable with
    the var keyword, they become implicit globals. Let me reiterate that implicit
    globals are a terrible thing—we will discuss this in detail later in the book
    when we discuss variable scopes and closures, but it''s important to remember
    that you should always declare a variable with the var keyword unless you know
    what you are doing:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 中，新变量应使用 **var** 关键字定义。如果你声明一个变量而不给它赋值，则默认其类型为未定义。一个糟糕的事情是，如果你不使用
    var 关键字声明你的变量，它们会变成隐式的全局变量。让我重申一下，隐式的全局变量是一件糟糕的事情——我们将在书中讨论变量作用域和闭包时详细讨论，但重要的是要记住，除非你知道你在做什么，否则你应该总是用
    var 关键字声明变量：
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `NaN` value is a special value that indicates that the entity is *not a
    number*.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`NaN` 值是一个特殊的值，表示实体 *不是数字*。'
- en: Constants
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 常量
- en: 'You can create a read-only named constant with the **const** keyword. The constant
    name must start with a letter, underscore, or dollar sign and can contain alphabetic,
    numeric, or underscore characters:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 **const** 关键字创建一个只读的命名常量。常量名必须以字母、下划线或美元符号开头，并可以包含字母、数字或下划线字符：
- en: '[PRE6]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: A constant cannot change the value through assignment or be redeclared, and
    it has to be initialized to a value.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 常量不能通过赋值改变值，也不能重新声明，必须初始化为一个值。
- en: 'JavaScript supports the standard variations of types:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 支持标准类型变体：
- en: Number
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数字
- en: String
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串
- en: Boolean
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 布尔值
- en: Symbol (new in ECMAScript 6)
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 符号（ECMAScript 6 新增）
- en: 'Object:'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象：
- en: Function
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数
- en: Array
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数组
- en: Date
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日期
- en: RegExp
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正则表达式
- en: 'Null'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 空值
- en: Undefined
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未定义
- en: Number
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数字
- en: 'The **Number** type can represent both 32-bit integer and 64-bit floating point
    values. For example, the following line of code declares a variable to hold an
    integer value, which is defined by the literal 555:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**Number** 类型可以表示 32 位整数和 64 位浮点值。例如，以下代码行声明一个变量来保存整数值，该值由字面量 555 定义：'
- en: '[PRE7]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To define a floating point value, you need to include a decimal point and one
    digit after the decimal point:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 要定义一个浮点值，你需要包含一个小数点和一个小数点后的一位数字：
- en: '[PRE8]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Essentially, there's no such thing as an integer in JavaScript. JavaScript uses
    a 64-bit floating point representation, which is the same as Java's double.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 本质上，在 JavaScript 中没有所谓的整数。JavaScript 使用 64 位浮点表示，这与 Java 的 double 相同。
- en: 'Hence, you would see something as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，你会看到如下内容：
- en: '[PRE9]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: I recommend that you read the exhaustive answer on Stack Overflow ([http://stackoverflow.com/questions/588004/is-floating-point-math-broken](http://stackoverflow.com/questions/588004/is-floating-point-math-broken))
    and ([http://floating-point-gui.de/](http://floating-point-gui.de/)), which explains
    why this is the case. However, it is important to understand that floating point
    arithmetic should be handled with due care. In most cases, you will not have to
    rely on extreme precision of decimal points but if you have to, you can try using
    libraries such as **big.js** ([https://github.com/MikeMcl/big.js](https://github.com/MikeMcl/big.js))
    that try to solve this problem.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议你阅读Stack Overflow上的详尽回答([http://stackoverflow.com/questions/588004/is-floating-point-math-broken](http://stackoverflow.com/questions/588004/is-floating-point-math-broken))和([http://floating-point-gui.de/](http://floating-point-gui.de/))，它解释了为什么会这样。然而，重要的是要理解浮点数运算应该小心处理。在大多数情况下，你不需要依赖十进制点的极端精确度，但如果需要，你可以尝试使用诸如**big.js**([https://github.com/MikeMcl/big.js](https://github.com/MikeMcl/big.js))这样的库来解决这个问题。
- en: If you intend to code extremely precise financial systems, you should represent
    $ values as cents to avoid rounding errors. One of the systems that I worked on
    used to round off the **Value Added Tax** (**VAT**) amount to two decimal points.
    With thousands of orders a day, this rounding off amount per order became a massive
    accounting headache. We needed to overhaul the entire Java web service stack and
    JavaScript frontend for this.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打算编写极其精确的财务系统，你应该将美元值表示为分，以避免舍入错误。我曾经参与过的系统中，曾经将**增值税**（**VAT**）金额四舍五入到两位小数。随着每天成千上万的订单，每笔订单的舍入量变成了一个巨大的会计难题。我们需要彻底重构整个Java
    Web服务栈和JavaScript前端。
- en: A few special values are also defined as part of the Number type. The first
    two are `Number.MAX_VALUE` and `Number.MIN_VALUE`, which define the outer bounds
    of the Number value set. All ECMAScript numbers must fall between these two values,
    without exception. A calculation can, however, result in a number that does not
    fall in between these two numbers. When a calculation results in a number greater
    than `Number.MAX_VALUE`, it is assigned a value of `Number.POSITIVE_INFINITY`,
    meaning that it has no numeric value anymore. Likewise, a calculation that results
    in a number less than `Number.MIN_VALUE` is assigned a value of `Number.NEGATIVE_INFINITY`,
    which also has no numeric value. If a calculation returns an infinite value, the
    result cannot be used in any further calculations. You can use the `isInfinite()`
    method to verify if the calculation result is an infinity.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些特殊的值也被定义为Number类型的部分。前两个是`Number.MAX_VALUE`和`Number.MIN_VALUE`，它们定义了Number值集的外部边界。所有ECMAScript数字必须在这两个值之间，没有例外。然而，一个计算可能会产生不在这两个值之间的数字。当计算结果大于`Number.MAX_VALUE`时，它被赋予一个值为`Number.POSITIVE_INFINITY`的值，意味着它不再有数值。同样地，计算结果小于`Number.MIN_VALUE`时，被赋予一个值为`Number.NEGATIVE_INFINITY`的值，也没有数值。如果计算返回一个无限值，则结果不能用于任何进一步的计算。你可以使用`isInfinite()`方法来验证计算结果是否为无限。
- en: 'Another peculiarity of JavaScript is a special value called NaN (short for
    *Not a Number*). In general, this occurs when conversion from another type (String,
    Boolean, and so on) fails. Observe the following peculiarity of NaN:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript的另一个特性是一个特殊的值，称为NaN（*Not a Number*的缩写）。通常，这是转换失败时从其他类型（字符串、布尔值等）发生的。观察NaN以下的奇特之处：
- en: '[PRE10]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The second line is strange—NaN is not equal to NaN. If NaN is part of any mathematical
    operation, the result also becomes NaN. As a general rule, stay away from using
    NaN in any expression. For any advanced mathematical operations, you can use the
    `Math` global object and its methods:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 第二行很奇怪——NaN不等于NaN。如果NaN是任何数学运算的一部分，结果也变成NaN。作为一个一般规则，避免在任何表达式中使用NaN。对于任何高级数学运算，你可以使用`Math`全局对象及其方法：
- en: '[PRE11]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You can use the `parseInt()` and `parseFloat()` methods to convert a string
    expression to an integer or float:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`parseInt()`和`parseFloat()`方法将字符串表达式转换为整数或浮点数：
- en: '[PRE12]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'With `parseInt()`, you should provide an explicit base to prevent nasty surprises
    on older browsers. The last trick is just using a `+` sign to auto-convert the
    `"42"` string to a number, `42`. It is also prudent to handle the `parseInt()`
    result with `isNaN()`. Let''s see the following example:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`parseInt()`时，你应该提供一个明确的基数以防止老旧浏览器带来糟糕的惊喜。最后一个技巧就是使用一个`+`号来自动将字符串`"42"`转换为数字`42`，这是一种明智的做法，还要用`isNaN()`来处理`parseInt()`的结果。下面来看以下示例：
- en: '[PRE13]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In this example, you are not sure of the type of the value that the `underterminedValue`
    variable can hold if the value is being set from an external interface. If `isNaN()`
    is not handled, `parseInt()` will cause an exception and the program can crash.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，如果你不确定`underterminedValue`变量如果从外部接口设置值可能持有的类型。如果`isNaN()`没有被处理，`parseInt()`将抛出异常，程序可能会崩溃。
- en: String
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 字符串
- en: 'In JavaScript, strings are a sequence of Unicode characters (each character
    takes 16 bits). Each character in the string can be accessed by its index. The
    first character index is zero. Strings are enclosed inside `"` or `''`—both are
    valid ways to represent strings. Let''s see the following:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，字符串是Unicode字符的序列（每个字符占用16位）。字符串中的每个字符可以通过其索引来访问。第一个字符的索引是零。字符串被包含在`"`或`'`内——两者都是表示字符串的有效方式。让我们来看看以下内容：
- en: '[PRE14]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The last line shows you how certain character literals when escaped with a
    backslash `\` can be used as special characters. The following is a list of such
    special characters:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一行展示了当使用反斜杠`\`对某些字符字面量进行转义时，它们可以作为特殊字符使用。以下是一些这样的特殊字符：
- en: '`\n`: Newline'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`\n`: 换行'
- en: '`\t`: Tab'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`\t`: 制表符'
- en: '`\b`: Backspace'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`\b`: 退格'
- en: '`\r`: Carriage return'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`\r`: 回车'
- en: '`\\`: Backslash'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`\`: 反斜杠'
- en: '`\''`: Single quote'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''`: 单引号'
- en: '`\"`: Double quote'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"`: 双引号'
- en: 'You get default support for special characters and Unicode literals with JavaScript
    strings:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在JavaScript字符串中获得对特殊字符和Unicode字面量的默认支持：
- en: '[PRE15]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'One important thing about JavaScript Strings, Numbers, and Booleans is that
    they actually have wrapper objects around their primitive equivalent. The following
    example shows the usage of the wrapper objects:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 关于JavaScript字符串、数字和布尔值的一个重要事情是，它们实际上有包装对象围绕在其原始等效物周围。以下示例显示了包装对象的使用：
- en: '[PRE16]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: JavaScript allows multiline strings also. Strings enclosed within [PRE17]
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript也允许多行字符串。字符串被包含在[PRE17]
- en: console.log(`string text on first line
  id: totrans-104
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: console.log(`第一行上的字符串文本
- en: string text on second line `);
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 第二行上的字符串文本 `);
- en: '"string text on first line'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行上的字符串文本 "
- en: string text on second line "
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 第二行上的字符串文本 "
- en: '[PRE18]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: var a=1, b=2;
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: var a=1, b=2;
- en: console.log("Sum of values is :" + (a+b) + " and multiplication is :" + (a*b));
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: console.log("数值之和为:" + (a+b) + " 和乘积为:" + (a*b));
- en: '[PRE19]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'console.log(`Sum of values is :${a+b} and multiplication is : ${a*b}`);'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(`数值之和为:${a+b}，乘积为:${a*b}`);
- en: '[PRE20]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: var xl;
  id: totrans-114
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: var xl;
- en: console.log(typeof xl);
  id: totrans-115
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: console.log(typeof xl);
- en: undefined
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: undefined
- en: console.log(null==undefined);
  id: totrans-117
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: console.log(null==undefined);
- en: 'true'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 'true'
- en: '[PRE21]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: var pBooleanTrue = true;
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: var pBooleanTrue = true;
- en: var pBooleanFalse = false;
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: var pBooleanFalse = false;
- en: '[PRE22]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: var fBooleanTrue = Boolean(true);
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: var fBooleanTrue = Boolean(true);
- en: var fBooleanFalse = Boolean(false);
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: var fBooleanFalse = Boolean(false);
- en: '[PRE23]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: var oBooleanTrue = new Boolean(true);
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: var oBooleanTrue = new Boolean(true);
- en: var oBooleanFalse = new Boolean(false);
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: var oBooleanFalse = new Boolean(false);
- en: console.log(oBooleanTrue); //true
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(oBooleanTrue); //true
- en: console.log(typeof oBooleanTrue); //object
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(typeof oBooleanTrue); //object
- en: if(oBooleanFalse){
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: if(oBooleanFalse){
- en: console.log("I am seriously truthy, don't believe me");
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: console.log("我是认真的真值，别信我");
- en: '}'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '>"I am seriously truthy, don''t believe me"'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '>"我也是认真的真值，别信我"'
- en: if(oBooleanTrue){
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: if(oBooleanTrue){
- en: console.log("I am also truthy, see ?");
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: console.log("我也是真值，看?");
- en: '}'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '>"I am also truthy, see ?"'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '>"我也是真值，看?"'
- en: //Use valueOf() to extract real value within the Boolean object
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: //使用valueOf()方法来提取布尔对象内的真实值
- en: if(oBooleanFalse.valueOf()){
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: if(oBooleanFalse.valueOf()){
- en: console.log("With valueOf, I am false");
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: console.log("使用valueOf，我是假的");
- en: '}else{'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '}else{'
- en: console.log("Without valueOf, I am still truthy");
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: console.log("不使用valueOf，我仍然是真值");
- en: '}'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '>"Without valueOf, I am still truthy"'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '>"不使用valueOf，我仍然是真值"'
- en: '[PRE24]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: var aStringObject = new String("string");
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: var aStringObject = new String("string");
- en: console.log(typeof aStringObject);        //"object"
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(typeof aStringObject); //"object"
- en: console.log(aStringObject instanceof String);    //true
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(aStringObject instanceof String); //true
- en: var aString = "This is a string";
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: var aString = "这是一个字符串";
- en: console.log(aString instanceof String);     //false
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(aString instanceof String); //false
- en: '[PRE25]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: var dataObject = new Date([parameters]);
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: var dataObject = new Date([参数]);
- en: '[PRE26]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: var today = new Date();
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: var today = new Date();
- en: console.log(today.getDate()); //27
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(today.getDate()); //27
- en: console.log(today.getMonth()); //4
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(today.getMonth()); //4
- en: console.log(today.getFullYear()); //2015
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(today.getFullYear()); //2015
- en: console.log(today.getHours()); //23
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(today.getHours()); //23
- en: console.log(today.getMinutes()); //13
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(today.getMinutes()); //13
- en: console.log(today.getSeconds()); //10
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(today.getSeconds()); //10
- en: //number of milliseconds since January 1, 1970, 00:00:00 UTC
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: //自1970年1月1日以来，00:00:00 UTC的毫秒数
- en: console.log(today.getTime()); //1432748611392
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(today.getTime()); //1432748611392
- en: console.log(today.getTimezoneOffset()); //-330 Minutes
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(today.getTimezoneOffset()); //-330分钟
- en: //Calculating elapsed time
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: var start = Date.now();
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: // loop for a long time
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: for (var i=0;i<100000;i++);
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: var end = Date.now();
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: var elapsed = end - start; // elapsed time in milliseconds
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: console.log(elapsed); //71
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: var a=25;
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: a=+a;            //No impact on a's value
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: console.log(a);  //25
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: var b="70";
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: console.log(typeof b); //string
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: b=+b;           //converts string to number
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: console.log(b); //70
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: console.log(typeof b); //number
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: var c="foo";
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: c=+c;            //Converts foo to number
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: console.log(c);  //NaN
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: console.log(typeof c);  //number
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: var zero="";
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: zero=+zero; //empty strings are converted to 0
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: console.log(zero);
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: console.log(typeof zero);
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: var a= 1;
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: var b= a++;
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: console.log(a); //2
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: console.log(b); //1
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: var a= 1;
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: var b= ++a;
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: console.log(a);  //2
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: console.log(b);  //2
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: var a, b, c;
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: a = b = c = 0;
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: var a = b = 0;
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: console.log(true  && true); // true AND true returns true
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: console.log(true  && false);// true AND false returns false
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: console.log(false && true);// false AND true returns false
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: console.log("Foo" && "Bar");// Foo(true) AND Bar(true) returns Bar
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: console.log(false && "Foo");// false && Foo(true) returns false
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: console.log("Foo" && false);// Foo(true) && false returns false
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: console.log(false && (1 == 2));// false && false(1==2) returns false
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: console.log(true  || true); // true AND true returns true
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: console.log(true  || false);// true AND false returns true
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: console.log(false || true);// false AND true returns true
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: console.log("Foo" || "Bar");// Foo(true) AND Bar(true) returns Foo
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: console.log(false || "Foo");// false && Foo(true) returns Foo
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: console.log("Foo" || false);// Foo(true) && false returns Foo
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: console.log(false || (1 == 2));// false && false(1==2) returns false
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: console.log (0 && "Foo");  //First operand is falsy - return it
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: console.log ("Foo" && "Bar"); //First operand is truthy, return the second operand
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: console.log (0 || "Foo");  //First operand is falsy - return second operand
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: console.log ("Foo" || "Bar"); //First operand is truthy, return it
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: console.log (0 || false); //First operand is falsy, return second operand
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: function greeting(name){
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: name = name || "John";
  id: totrans-229
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: console.log("Hello " + name);
  id: totrans-230
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: greeting("Johnson"); // alerts "Hi Johnson";
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: greeting(); //alerts "Hello John"
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: //If the operand is an object, false is returned.
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: var s = new String("string");
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: console.log(!s);              //false
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: //If the operand is the number 0, true is returned.
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: var t = 0;
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: console.log(!t);              //true
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: //If the operand is any number other than 0, false is returned.
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: var x = 11;
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: console.log(!x);              //false
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: //If operand is null or NaN, true is returned
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: var y =null;
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: var z = NaN;
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: console.log(!y);              //true
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: console.log(!z);              //true
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: //If operand is undefined, you get true
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: var foo;
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: console.log(!foo);            //true
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'var allowedToDrive = (age > 21) ? "yes" : "no";'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: function isAllowedToDrive(age){
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: if(age>21){
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: return true;
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}else{'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: return false;
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: console.log(isAllowedToDrive(22));
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: if (condition1) {
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: statement1
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: '} else if (condition2) {'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: statement2
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: '} else if (condition3) {'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: statement3
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: ..
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: '} else {'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: statementN
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: if (condition1) {
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: statement1
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: '} else'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: if (condition2) {
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: if(a=b) {
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
- en: //do something
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: if((a=b)){
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: //this is really something you want to do
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: function sayDay(day){
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: switch(day){
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
- en: 'case 1: console.log("Sunday");'
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: break;
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'case 2: console.log("Monday");'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: break;
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'default:'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: console.log("We live in a binary world. Go to Pluto");
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: sayDay(1); //Sunday
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: sayDay(3); //We live in a binary world. Go to Pluto
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '>sayDay(1);'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
- en: Sunday
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: Monday
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: function debug(level,msg){
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: switch(level){
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: 'case "INFO": //intentional fall-through'
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'case "WARN" :'
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'case "DEBUG": console.log(level+ ": " + msg);'
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: break;
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'case "ERROR": console.error(msg);'
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
- en: debug("INFO","Info Message");
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
- en: debug("DEBUG","Debug Message");
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
- en: debug("ERROR","Fatal Exception");
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: var i=0;
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
- en: while(i<10){
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
- en: i=i+1;
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
- en: console.log(i);
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: //infinite loop
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
- en: while(true){
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
- en: //keep doing this
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: var choice;
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
- en: do {
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
- en: choice=getChoiceFromUserInput();
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
- en: '} while(!isInputValid(input));'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: for (var i=0;i<5;i++){
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
- en: console.log("Hello");
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: var x=0;
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
- en: //Omit initialitzation
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
- en: for (;x<5;x++){
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
- en: console.log("Hello");
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
- en: //Omit exit condition
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
- en: for (var j=0;;j++){
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
- en: //exit condition
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
- en: if(j>=5){
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
- en: break;
  id: totrans-348
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}else{'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
- en: console.log("Hello");
  id: totrans-350
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
- en: //Omit increment
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
- en: for (var k=0; k<5;){
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
- en: console.log("Hello");
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
- en: k++;
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: var arr = [10, 20, 30];
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
- en: // Assign all array values to 100
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
- en: for (i = 0; i < arr.length; arr[i++] = 100);
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
- en: console.log(arr);
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: var n = 0;
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
- en: var o = new String("0");
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
- en: var s = "0";
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
- en: var b = false;
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
- en: console.log(n === n); // true - same values for numbers
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
- en: console.log(o === o); // true - non numbers are compared for their values
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
- en: console.log(s === s); // true - ditto
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
- en: console.log(n === o); // false - no implicit type conversion, types are different
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
- en: console.log(n === s); // false - types are different
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
- en: console.log(o === s); // false - types are different
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
- en: console.log(null === undefined); // false
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
- en: console.log(o === null); // false
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
- en: console.log(o === undefined); // false
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: var fortyTwo = 42;
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
- en: console.log(fortyTwo.toString()[1]); //prints "2"
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: typeof 1             === "number";    // true
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
- en: typeof "1"           === "string";    // true
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
- en: 'typeof { age: 39 }   === "object";    // true'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
- en: typeof Symbol()      === "symbol";    // true
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
- en: typeof undefined     === "undefined"; // true
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
- en: typeof true          === "boolean";   // true
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: var t=1;
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
- en: var u=""+t; //implicit coercion
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
- en: console.log(typeof t);  //"number"
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
- en: console.log(typeof u);  //"string"
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
- en: var v=String(t);  //Explicit coercion
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
- en: console.log(typeof v);  //"string"
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
- en: var x=null
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
- en: console.log(""+x); //"null"
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  id: totrans-396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: var a="abc";
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
- en: console.log(a.length);
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
- en: console.log(a.toUpperCase());
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  id: totrans-400
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: As we discussed earlier, JavaScript kindly wraps these primitives in their wrappers
    by default thus making it possible for us to directly access the wrapper's methods
    and properties as if they were of the primitives themselves.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  id: totrans-402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: typeof null ==="object" //true
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  id: totrans-404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: var x = null;
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
- en: if (!x && typeof x === "object"){
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
- en: console.log("100% null");
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  id: totrans-409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: f = function test() {
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
- en: return 12;
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
- en: console.log(typeof f === "function");  //prints "true"
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  id: totrans-414
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: console.log (typeof [1,2,3,4]); //"object"
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  id: totrans-416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: var a = 1;
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
- en: typeof a; // "number"
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
- en: a = false;
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
- en: typeof a; // "boolean"
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  id: totrans-421
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: typeof typeof 1; // "string"
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: if (a < 1) a = 1 console.log(a)
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  id: totrans-425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: if (a < 1) a = 1; console.log(a);
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  id: totrans-427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: function add(a,b) { return a+b }
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  id: totrans-429
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: function add(a,b) { return a+b; }
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  id: totrans-431
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: //Cramped style (Bad)
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
- en: if(condition) doSomeTask();
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
- en: while(condition) i++;
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
- en: for(var i=0;i<10;i++) iterate();
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
- en: //Use whitespace for better readability (Good)
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
- en: //Place 1 space before the leading brace.
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
- en: if (condition) {
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
- en: // statements
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
- en: while ( condition ) {
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
- en: // statements
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
- en: for ( var i = 0; i < 100; i++ ) {
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
- en: // statements
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
- en: '// Better:'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
- en: var i,
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
- en: length = 100;
  id: totrans-449
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: for ( i = 0; i < length; i++ ) {
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
- en: // statements
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
- en: // Or...
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
- en: var i = 0,
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
- en: length = 100;
  id: totrans-455
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: for ( ; i < length; i++ ) {
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
- en: // statements
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
- en: var value;
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
- en: for ( value in object ) {
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
- en: // statements
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
- en: if ( true ) {
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
- en: // statements
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
- en: '} else {'
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
- en: // statements
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
- en: //Set off operators with spaces.
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
- en: // bad
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
- en: var x=y+5;
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
- en: // good
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
- en: var x = y + 5;
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
- en: //End files with a single newline character.
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
- en: // bad
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
- en: (function(global) {
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
- en: // ...stuff...
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
- en: '})(this);'
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
- en: // bad
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
- en: (function(global) {
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
- en: // ...stuff...
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
- en: '})(this);↵'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
- en: ↵
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
- en: // good
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
- en: (function(global) {
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
- en: // ...stuff...
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
- en: '})(this);↵'
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  id: totrans-487
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '//String:'
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
- en: typeof variable === "string"
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
- en: '//Number:'
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
- en: typeof variable === "number"
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
- en: '//Boolean:'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
- en: typeof variable === "boolean"
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
- en: '//Object:'
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
- en: typeof variable === "object"
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
- en: '//null:'
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
- en: variable === null
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
- en: '//null or undefined:'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
- en: variable == null
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  id: totrans-500
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: // bad
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
- en: const totalScore = this.reviewScore + '';
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
- en: // good
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
- en: const totalScore = String(this.reviewScore);
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  id: totrans-505
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: const inputValue = '4';
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
- en: // bad
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
- en: const val = new Number(inputValue);
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
- en: // bad
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
- en: const val = +inputValue;
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
- en: // bad
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
- en: const val = inputValue >> 0;
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
- en: // bad
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
- en: const val = parseInt(inputValue);
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
- en: // good
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
- en: const val = Number(inputValue);
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
- en: // good
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
- en: const val = parseInt(inputValue, 10);
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  id: totrans-519
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: const age = 0;  // bad
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
- en: const hasAge = new Boolean(age);  // good
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
- en: const hasAge = Boolean(age); // good
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
- en: const hasAge = !!age;
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  id: totrans-524
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: // When evaluating that array has length,
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
- en: '// WRONG:'
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
- en: if ( array.length > 0 ) ...
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
- en: '// evaluate truthiness(GOOD):'
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
- en: if ( array.length ) ...
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
- en: // When evaluating that an array is empty,
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
- en: '// (BAD):'
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
- en: if ( array.length === 0 ) ...
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
- en: '// evaluate truthiness(GOOD):'
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
- en: if ( !array.length ) ...
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
- en: // When checking if string is not empty,
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
- en: '// (BAD):'
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
- en: if ( string !== "" ) ...
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
- en: '// evaluate truthiness (GOOD):'
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
- en: if ( string ) ...
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
- en: // When checking if a string is empty,
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
- en: '// BAD:'
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
- en: if ( string === "" ) ...
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
- en: '// evaluate falsy-ness (GOOD):'
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
- en: if ( !string ) ...
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
- en: // When checking if a reference is true,
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
- en: '// BAD:'
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
- en: if ( foo === true ) ...
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
- en: // GOOD
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
- en: if ( foo ) ...
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
- en: // When checking if a reference is false,
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
- en: '// BAD:'
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
- en: if ( foo === false ) ...
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
- en: // GOOD
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
- en: if ( !foo ) ...
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
- en: '// this will also match: 0, "", null, undefined, NaN'
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
- en: // If you MUST test for a boolean false, then use
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
- en: if ( foo === false ) ...
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
- en: // a reference that might be null or undefined, but NOT false, "" or 0,
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
- en: '// BAD:'
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
- en: if ( foo === null || foo === undefined ) ...
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
- en: // GOOD
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
- en: if ( foo == null ) ...
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
- en: // Don't complicate matters
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
- en: 'return x === 0 ? ''sunday'' : x === 1 ? ''Monday'' : ''Tuesday'';'
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
- en: '// Better:'
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
- en: if (x === 0) {
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
- en: return 'Sunday';
  id: totrans-567
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '} else if (x === 1) {'
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
- en: return 'Monday';
  id: totrans-569
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '} else {'
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
- en: return 'Tuesday';
  id: totrans-571
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
- en: '// Even Better:'
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: // 更好：
- en: switch (x) {
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: switch (x) {
- en: 'case 0:'
  id: totrans-575
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 案例0：
- en: return 'Sunday';
  id: totrans-576
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: return 'Sunday';
- en: 'case 1:'
  id: totrans-577
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 案例1：
- en: return 'Monday';
  id: totrans-578
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: return 'Monday';
- en: 'default:'
  id: totrans-579
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'default:'
- en: return 'Tuesday';
  id: totrans-580
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: return 'Tuesday';
- en: '}'
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE76]'
  id: totrans-582
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: //Avoid single letter names. Be descriptive with your naming.
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: // 避免使用单字母名称。对你的命名要描述性。
- en: // bad
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: // 坏的
- en: function q() {
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: function q() {
- en: '}'
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: // good
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: // 好的
- en: function query() {
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: function query() {
- en: '}'
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: //Use camelCase when naming objects, functions, and instances.
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: // 当命名对象、函数和实例时使用驼峰命名法。
- en: // bad
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: // 坏的
- en: const OBJEcT = {};
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: const OBJEcT = {};
- en: const this_is_object = {};
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: const this_is_object = {};
- en: function c() {}
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: function c() {}
- en: // good
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: // 好的
- en: const thisIsObject = {};
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: const thisIsObject = {};
- en: function thisIsFunction() {}
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: function thisIsFunction() {}
- en: //Use PascalCase when naming constructors or classes.
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: // 当命名构造器或类时使用帕斯卡命名法。
- en: // bad
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: // 坏的
- en: function user(options) {
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: function user(options) {
- en: this.name = options.name;
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: this.name = options.name;
- en: '}'
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: const bad = new user({
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: const bad = new user({
- en: 'name: ''nope'','
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: 'name: ''nope'','
- en: '});'
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: // good
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: // 好的
- en: class User {
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: class User {
- en: constructor(options) {
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
  zh: constructor(options) {
- en: this.name = options.name;
  id: totrans-609
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: this.name = options.name;
- en: '}'
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: const good = new User({
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
  zh: const good = new User({
- en: 'name: ''yup'','
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
  zh: 'name: ''yup'','
- en: '});'
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: // Use a leading underscore _ when naming private properties.
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: // 使用前缀下划线 _ 命名私有属性。
- en: // bad
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: // 坏的
- en: this.__firstName__ = 'Panda';
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: this.__firstName__ = 'Panda';
- en: this.firstName_ = 'Panda';
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
  zh: this.firstName_ = 'Panda';
- en: // good
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
  zh: // 好的
- en: this._firstName = 'Panda';
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
  zh: this._firstName = 'Panda';
- en: '[PRE77]'
  id: totrans-621
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'eval():'
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
  zh: 'eval():'
- en: '[PRE78]'
  id: totrans-623
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: console.log(typeof eval(new String("1+1"))); // "object"
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(typeof eval(new String("1+1"))); // "object"
- en: console.log(eval(new String("1+1")));        //1+1
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(eval(new String("1+1")));        //1+1
- en: console.log(eval("1+1"));                    // 2
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(eval("1+1"));                    // 2
- en: console.log(typeof eval("1+1"));             // returns "number"
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(typeof eval("1+1"));             // 返回 "number"
- en: var expression = new String("1+1");
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
  zh: var expression = new String("1+1");
- en: console.log(eval(expression.toString()));    //2
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(eval(expression.toString()));    //2
- en: '[PRE79]'
  id: totrans-630
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '''use strict'';'
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
  zh: '''use strict'';'
- en: '[PRE80]'
  id: totrans-632
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: function foo() {
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: function foo() {
- en: '''use strict'';'
  id: totrans-634
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '''use strict'';'
- en: '}'
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE81]'
  id: totrans-636
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: function sloppyFunc() {
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
  zh: function sloppyFunc() {
- en: sloppyVar = 123;
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
  zh: sloppyVar = 123;
- en: '} sloppyFunc();  // creates global variable `sloppyVar`'
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
  zh: '} sloppyFunc();  // 创建全局变量 `sloppyVar`'
- en: console.log(sloppyVar);  // 123
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(sloppyVar);  // 123
- en: '[PRE82]'
  id: totrans-641
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: function strictFunc() {
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
  zh: function strictFunc() {
- en: '''use strict'';'
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
  zh: '''use strict'';'
- en: strictVar = 123;
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
  zh: strictVar = 123;
- en: '}'
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: 'strictFunc();  // ReferenceError: strictVar is not defined'
  id: totrans-646
  prefs: []
  type: TYPE_NORMAL
  zh: strictFunc();  // 引用错误：strictVar未定义
- en: '[PRE83]'
  id: totrans-647
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 010 === 8 true
  id: totrans-648
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 010 === 8 true
- en: '[PRE84]'
  id: totrans-649
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: function f() {
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
  zh: function f() {
- en: '''use strict'';'
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
  zh: '''use strict'';'
- en: return 010
  id: totrans-652
  prefs: []
  type: TYPE_NORMAL
  zh: return 010
- en: '}'
  id: totrans-653
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '//SyntaxError: Octal literals are not allowed in'
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
  zh: '//SyntaxError: 八进制字面量在'
- en: '[PRE85]'
  id: totrans-655
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: npm install jshint –g
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
  zh: npm install jshint –g
- en: '[PRE86]'
  id: totrans-657
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'test.js file:'
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
  zh: test.js 文件：
- en: '[PRE87]'
  id: totrans-659
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: function f(condition) {
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
  zh: function f(condition) {
- en: switch (condition) {
  id: totrans-661
  prefs: []
  type: TYPE_NORMAL
  zh: switch (condition) {
- en: 'case 1:'
  id: totrans-662
  prefs: []
  type: TYPE_NORMAL
  zh: 案例1：
- en: console.log(1);
  id: totrans-663
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: console.log(1);
- en: 'case 2:'
  id: totrans-664
  prefs: []
  type: TYPE_NORMAL
  zh: 案例2：
- en: console.log(1);
  id: totrans-665
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: console.log(1);
- en: '}'
  id: totrans-666
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE88]'
  id: totrans-668
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '>jshint test.js'
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
  zh: '>jshint test.js'
- en: 'test.js: line 4, col 19, Expected a ''break'' statement before ''case''.'
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
  zh: 'test.js: 行 4, 列 19, 预期在 ''case'' 之前有 ''break'' 语句。'
- en: 1 error
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
  zh: 1个错误
- en: '[PRE89]'
  id: totrans-672
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '{'
  id: totrans-673
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"asi": false,'
  id: totrans-674
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"asi": false,'
- en: '"expr": true,'
  id: totrans-675
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"expr": true,'
- en: '"loopfunc": true,'
  id: totrans-676
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"loopfunc": true,'
- en: '"curly": false,'
  id: totrans-677
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"花括号": false,'
- en: '"evil": true,'
  id: totrans-678
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"邪恶": true,'
- en: '"white": true,'
  id: totrans-679
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"白色": true,'
- en: '"undef": true,'
  id: totrans-680
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"未定义": true,'
- en: '"indent": 4'
  id: totrans-681
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"缩进": 4'
- en: '}'
  id: totrans-682
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-683
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Summary
  id: totrans-684
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we set some foundations around JavaScript grammar, types, and
    stylistic considerations. We have consciously not talked about other important
    aspects such as functions, variable scopes, and closures primarily because they
    deserve their own place in this book. I am sure that this chapter helps you understand
    some of the primary concepts of JavaScript. With these foundations in place, we
    will take a look at how we can write professional quality JavaScript code.
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们围绕JavaScript语法、类型和风格考虑设定了一些基础。我们故意没有谈论其他重要方面，如函数、变量作用域和闭包，主要是因为它们应该在这本书中有自己的位置。我相信这一章帮助你理解了JavaScript的一些基本概念。有了这些基础，我们将看看如何编写专业质量的JavaScript代码。
