["```js\n    $ meteor add meteor-book:reactive-timer\n\n    ```", "```js\n    Package.onTest(function (api) {\n      api.use('meteor-book:reactive-timer', 'client');\n      api.use('tinytest', 'client');\n\n      api.addFiles('tests/tests.js', 'client');\n    });\n    ```", "```js\nTinytest.add('The timer set the _intervalId property', function (test) {\n    var timer = new ReactiveTimer();\n    timer.start(1);\n\n    test.isTrue(timer._intervalId !== null);\n\n    timer.stop();\n});\n```", "```js\nTinytest.addAsync('The timer run', function (test, expect) {\n    var run = false,\n        timer = new ReactiveTimer();\n    timer.start(1);\n\n    Tracker.autorun(function(c){\n        timer.tick();\n\n        if(!c.firstRun)\n            run = true;\n    });\n\n    Meteor.setTimeout(function(){\n        test.equal(run, true);\n        timer.stop();\n\n        expect();\n    }, 1010);\n});\n```", "```js\n$ meteor test-packages meteor-book:reactive-timer\n\n```", "```js\n$ meteor test-packages meteor-book:reactive-timer iron:router\n\n```", "```js\n$ meteor add velocity:html-reporter\n\n```", "```js\n$ meteor add sanjo:jasmine\n\n```", "```js\n- my-meteor-blog\n  - tests\n    - jasmine\n    - client\n      - unit\n      - integration\n    - server\n      - unit\n```", "```js\n    describe('Post', function () {\n    ```", "```js\n    beforeEach(function () {\n        MeteorStubs.install();\n    });\n\n    afterEach(function () {\n        MeteorStubs.uninstall();\n    });\n    ```", "```js\n    it('should be correctly inserted', function() {\n\n        spyOn(Posts, 'findOne').and.callFake(function() {\n            // simulate return a found document;\n            return {title: 'Some Tite'};\n        });\n\n        spyOn(Posts, 'insert');\n\n        spyOn(Meteor, 'user').and.returnValue({_id: 4321, profile: {name: 'John'}});\n\n        spyOn(global, 'moment').and.callFake(function() {\n            // simulate return the moment object;\n            return {unix: function(){\n                return 1234;\n            }};\n        });\n    ```", "```js\n        Meteor.call('insertPost', {\n            title: 'My Title',\n            description: 'Lorem ipsum',\n            text: 'Lorem ipsum',\n            slug: 'my-title'\n        }, function(error, result){\n    ```", "```js\n            expect(error).toBe(null);\n\n            // we check that the slug is returned\n            expect(result).toContain('my-title');\n            expect(result.length).toBeGreaterThan(8);\n\n            // we check that the post is correctly inserted\n            expect(Posts.insert).toHaveBeenCalledWith({\n                title: 'My Title',\n                description: 'Lorem ipsum',\n                text: 'Lorem ipsum',\n                slug: result,\n                timeCreated: 1234,\n                owner: 4321,\n                author: 'John'\n            });\n        });\n    });\n    ```", "```js\n    });\n    ```", "```js\nif(Posts.findOne({slug: postDocument.slug}))\n    postDocument.slug = postDocument.slug +'-'+ Math.random().toString(36).substring(3);\n```", "```js\n    describe('Vistors', function() {\n        it('should not see the create posts link', function () {\n            var div = document.createElement('DIV');\n            Blaze.render(Template.home, div);\n\n            expect($(div).find('a.createNewPost')[0]).not.toBeDefined();\n        });\n    });\n    ```", "```js\npostButtonSpecs.js file as the one we used before:\n```", "```js\ndescribe('The Admin', function() {\n    afterEach(function (done) {\n        Meteor.logout(done);\n    })\n\n    it('should be able to login and see the create post link', function (done) {\n        var div = document.createElement('DIV');\n        Blaze.render(Template.home, div);\n\n        Meteor.loginWithPassword('johndoe@example.com', '1234', function (err) {\n\n            Tracker.afterFlush(function(){\n\n              expect($(div).find('a.createNewPost')[0]).toBeDefined();\n                expect(err).toBeUndefined();\n\n                done();\n            });\n\n        });\n    });\n});\n```", "```js\n$ meteor run --test\n\n```", "```js\n\"Hello World\" : function (client) {\n     client\n        .url(\"http://127.0.0.1:3000\")\n        .waitForElementVisible(\"body\", 1000)\n        .assert.title(\"Hello World\")\n        .end();\n}\n```"]