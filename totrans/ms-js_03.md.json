["```js\nvar pattern = /test/;\n```", "```js\nvar pattern = new RegExp(\"test\");\n```", "```js\nvar pattern = /orange/;\nconsole.log(pattern.test(\"orange\")); // true\n\nvar patternIgnoreCase = /orange/i;\nconsole.log(patternIgnoreCase.test(\"Orange\")); // true\n\nvar patternGlobal = /orange/ig;\nconsole.log(patternGlobal.test(\"Orange Juice\")); // true\n```", "```js\nvar pattern = /orange/;\n```", "```js\nvar pattern = /[abc]/;\nconsole.log(pattern.test('a')); //true\nconsole.log(pattern.test('d')); //false\n```", "```js\nvar pattern = /[^abc]/;\nconsole.log(pattern.test('a')); //false\nconsole.log(pattern.test('d')); //true\n```", "```js\nvar pattern = /[0-5]/;\nconsole.log(pattern.test(3)); //true\nconsole.log(pattern.test(12345)); //true\nconsole.log(pattern.test(9)); //false\nconsole.log(pattern.test(6789)); //false\nconsole.log(/[0123456789]/.test(\"This is year 2015\")); //true\n```", "```js\nvar strToMatch = 'A Toyota! Race fast, safe car! A Toyota!'; \nvar regExAt = /Toy/;\nvar arrMatches = regExAt.exec(strToMatch); \nconsole.log(arrMatches);\n```", "```js\n['Toy']; if you want all the instances of the pattern Toy, you can use the g (global) flag as follows:\n```", "```js\nvar strToMatch = 'A Toyota! Race fast, safe car! A Toyota!'; \nvar regExAt = /Toy/g;\nvar arrMatches = regExAt.exec(strToMatch); \nconsole.log(arrMatches);\n```", "```js\nvar strToMatch = 'A Toyota! Race fast, safe car! A Toyota!'; \nvar regExAt = /Toy/;\nvar arrMatches = strToMatch.match(regExAt);\nconsole.log(arrMatches);\n```", "```js\nvar strToMatch = 'Blue is your favorite color ?'; \nvar regExAt = /Blue/;\nconsole.log(strToMatch.replace(regExAt, \"Red\"));\n//Output- \"Red is your favorite color ?\"\n```", "```js\nvar strToMatch = 'Blue is your favorite color ?'; \nvar regExAt = /Blue/;\nconsole.log(strToMatch.replace(regExAt, function(matchingText){\n  return 'Red';\n}));\n//Output- \"Red is your favorite color ?\"\n```", "```js\nvar sColor = 'sun,moon,stars';\nvar reComma = /\\,/;\nconsole.log(sColor.split(reComma));\n//Output - [\"sun\", \"moon\", \"stars\"]\n```", "```js\nvar strToMatch = 'wooden bat, smelly Cat,a fat cat';\nvar re = /[bcf]at/gi;\nvar arrMatches = strToMatch.match(re);\nconsole.log(arrMatches);\n//[\"bat\", \"Cat\", \"fat\", \"cat\"]\n```", "```js\nvar strToMatch = 'i1,i2,i3,i4,i5,i6,i7,i8,i9';\nvar re = /i[0-5]/gi;\nvar arrMatches = strToMatch.match(re);\nconsole.log(arrMatches);\n//[\"i1\", \"i2\", \"i3\", \"i4\", \"i5\"]\n```", "```js\nvar strToMatch = 'i1,i2,i3,i4,i5,i6,i7,i8,i9';\nvar re = /i[^0-5]/gi;\nvar arrMatches = strToMatch.match(re);\nconsole.log(arrMatches);\n//[\"i6\", \"i7\", \"i8\", \"i9\"]\n```", "```js\nvar strToMatch = '123-456-7890';\nvar re = /[0-9][0-9][0-9]-[0-9][0-9][0-9]/;\nvar arrMatches = strToMatch.match(re);\nconsole.log(arrMatches);\n//[\"123-456\"]\n```", "```js\nvar strToMatch = '123-456-7890';\nvar re = /\\d\\d\\d-\\d\\d\\d/;\nvar arrMatches = strToMatch.match(re);\nconsole.log(arrMatches);\n//[\"123-456\"]\n```", "```js\nvar str = /behaviou?r/;\nconsole.log(str.test(\"behaviour\"));\n// true\nconsole.log(str.test(\"behavior\"));\n// true\n```", "```js\nconsole.log(/'\\d+'/.test(\"'123'\")); // true\n```", "```js\nvar heartyLaugh = /Ha+(Ha+)+/i;\nconsole.log(heartyLaugh.test(\"HaHaHaHaHaHaHaaaaaaaaaaa\"));\n//true\n```", "```js\nconsole.log(/cat/.test('a black cat')); //true\n```", "```js\nconsole.log(/\\bcat/.test('a black cat')); //true\n```", "```js\nconsole.log(/\\bcat/.test('tomcat')); //false\n```", "```js\nconsole.log(/cat\\b/.test('tomcat')); //true\n```", "```js\nconsole.log(/\\bcat\\b/.test('a black cat')); //true\n```", "```js\nconsole.log(/\\bcat\\b/.test(\"concatenate\")); //false\n```", "```js\nvar match = /\\d+/.exec(\"There are 100 ways to do this\");\nconsole.log(match);\n// [\"100\"]\nconsole.log(match.index);\n// 10\n```", "```js\nvar orig = \"1234 5678\";\nvar re = /(\\d{4}) (\\d{4})/;\nvar modifiedStr = orig.replace(re, \"$2 $1\"); \nconsole.log(modifiedStr); //outputs \"5678 1234\" \n```", "```js\nfunction trim(str) {\n  return (str || \"\").replace(/^\\s+|\\s+$/g, \"\");\n}\nconsole.log(\"--\"+trim(\"   test    \")+\"--\");\n//\"--test--\"\n```", "```js\nre=/\\s+/g;\nconsole.log('There are    a lot      of spaces'.replace(re,' '));\n//\"There are a lot of spaces\"\n```", "```js\nAs you can see, regular expressions can prove to be a Swiss army knife in your JavaScript arsenal. Careful study and practice will be extremely rewarding for you in the long run.\n```", "```js\nvar arr = new Array(1,2,3);\nvar arr = Array(1,2,3);\nvar arr = [1,2,3];\n```", "```js\nvar arr = [10];\nvar arr = Array(10); // Creates an array with no element, but with arr.length set to 10\n// The above code is equivalent to\nvar arr = [];\narr.length = 10;\n```", "```js\nvar days = [];\ndays[0] = \"Sunday\";\ndays[1] = \"Monday\";\n```", "```js\nvar arr_generic = new Array(\"A String\", myCustomValue, 3.14);\nvar fruits = [\"Mango\", \"Apple\", \"Orange\"]\n```", "```js\nvar arr = [\n  'string', 42.0, true, false, null, undefined,\n  ['sub', 'array'], {object: true}, NaN\n]; \n```", "```js\nvar days = [\"Sunday\", \"Monday\", \"Tuesday\"]\n```", "```js\nvar colors = [];\ncolors[30] = ['Green'];\nconsole.log(colors.length); // 31\n```", "```js\nvar colors = ['Red', 'Blue', 'Yellow'];\nconsole.log(colors.length); // 3\ncolors.length = 2;\nconsole.log(colors); // [\"Red\",\"Blue\"] - Yellow has been removed\ncolors.length = 0;\nconsole.log(colors); // [] the colors array is empty\ncolors.length = 3;\nconsole.log(colors); // [undefined, undefined, undefined]\n```", "```js\nvar colors = ['red', 'green', 'blue']; \nfor (var i = 0; i < colors.length; i++) { \n  console.log(colors[i]); \n}\n```", "```js\nvar colors = ['red', 'green', 'blue'];\ncolors.forEach(function(color) {\n  console.log(color);\n});\n```", "```js\nvar myArray = new Array(\"33\", \"44\", \"55\");\nmyArray = myArray.concat(\"3\", \"2\", \"1\"); \nconsole.log(myArray);\n// [\"33\", \"44\", \"55\", \"3\", \"2\", \"1\"]\n```", "```js\nvar myArray = new Array('Red','Blue','Yellow');\nvar list = myArray.join(\" ~ \"); \nconsole.log(list);\n//\"Red ~ Blue ~ Yellow\"\n```", "```js\nvar myArray = new Array(\"1\", \"2\", \"3\");\nvar last = myArray.pop(); \n// myArray = [\"1\", \"2\"], last = \"3\"\n```", "```js\nvar myArray = new Array(\"1\", \"2\");\nmyArray.push(\"3\"); \n// myArray = [\"1\", \"2\", \"3\"]\n```", "```js\nvar myArray = new Array (\"1\", \"2\", \"3\");\nvar first = myArray.shift(); \n// myArray = [\"2\", \"3\"], first = \"1\"\n```", "```js\nvar myArray = new Array (\"1\", \"2\", \"3\");\nmyArray.unshift(\"4\", \"5\"); \n// myArray = [\"4\", \"5\", \"1\", \"2\", \"3\"]\n```", "```js\nvar myArray = new Array (\"1\", \"2\", \"3\");\nmyArray.reverse(); \n// transposes the array so that myArray = [ \"3\", \"2\", \"1\" ]\n```", "```js\nvar myArray = new Array(\"A\", \"C\", \"B\");\nmyArray.sort(); \n// sorts the array so that myArray = [ \"A\",\"B\",\"c\" ]\n```", "```js\n    var a = ['a', 'b', 'a', 'b', 'a','c','a'];\n    console.log(a.indexOf('b')); // 1\n    // Now try again, starting from after the last match\n    console.log(a.indexOf('b', 2)); // 3\n    console.log(a.indexOf('1')); // -1, 'q' is not found\n    ```", "```js\n    var a = ['a', 'b', 'c', 'd', 'a', 'b'];\n    console.log(a.lastIndexOf('b')); //  5\n    // Now try again, starting from before the last match\n    console.log(a.lastIndexOf('b', 4)); //  1\n    console.log(a.lastIndexOf('z')); //  -1\n    ```", "```js\nnpm install underscore\n```", "```js\nvar _ = require('underscore');\nfunction print(n){\n  console.log(n);\n}\n_.each([1, 2, 3], print);\n//prints 1 2 3\n```", "```js\nvar myArray = [1,2,3];\nvar arrayLength = myArray.length;\nfor (var i = 0; i < arrayLength; i++) {\n  console.log(myArray[i]);\n}\n```", "```js\nvar _ = require('underscore');\nconsole.log(_.range(10));\n// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ]\nconsole.log(_.range(1, 11));\n//[ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]\nconsole.log(_.range(0, 30, 5));\n//[ 0, 5, 10, 15, 20, 25 ]\nconsole.log(_.range(0, -10, -1));\n//[ 0, -1, -2, -3, -4, -5, -6, -7, -8, -9 ]\nconsole.log(_.range(0));\n//[]\n```", "```js\nconsole.log(_.range(3).map(function () { return 'a' }) );\n[ 'a', 'a', 'a' ]\n```", "```js\nvar _ = require('underscore');\nconsole.log(_.map([1, 2, 3], function(num){ return num * 3; }));\n//[3,6,9]\n```", "```js\nvar _ = require('underscore');\nvar sum = _.reduce([1, 2, 3], function(memo, num){console.log(memo,num);return memo + num; }, 0);\nconsole.log(sum);\n```", "```js\n0 1\n1 2\n3 3\n6\n```", "```js\nvar _ = require('underscore');\nvar evens = _.filter([1, 2, 3, 4, 5, 6], function(num){ return num % 2 == 0; });\nconsole.log(evens);\n```", "```js\nvar _ = require('underscore');\nvar odds = _.reject([1, 2, 3, 4, 5, 6], function(num){ return num % 2 == 0; });\nconsole.log(odds);\n//[ 1, 3, 5 ]\n```", "```js\nvar _ = require('underscore');\nconsole.log(_.contains([1, 2, 3], 3));\n//true\n```", "```js\nvar _ = require('underscore');\nconsole.log(_.invoke([[5, 1, 7], [3, 2, 1]], 'sort'));\n//[ [ 1, 5, 7 ], [ 1, 2, 3 ] ]\n```", "```js\nvar _ = require('underscore');\nconsole.log(_.invoke([\"new\",\"old\",\"cat\"], 'sort'));\n//[ undefined, undefined, undefined ]\n```", "```js\nvar _ = require('underscore');\nconsole.log(_.invoke([\"new\",\"old\",\"cat\"], 'toUpperCase'));\n//[ 'NEW', 'OLD', 'CAT' ]\n```", "```js\nvar _ = require('underscore');\nvar uniqArray = _.uniq([1,1,2,2,3]);\nconsole.log(uniqArray);\n//[1,2,3]\n```", "```js\nvar _ = require('underscore');\nfunction isOdd(n){\n  return n%2==0;\n}\nconsole.log(_.partition([0, 1, 2, 3, 4, 5], isOdd));\n//[ [ 0, 2, 4 ], [ 1, 3, 5 ] ]\n```", "```js\n[1,2,3]â€”this is a helpful method to eliminate any value from a list that can cause runtime exceptions.\n```", "```js\nvar _ = require('underscore');\nconsole.log(_.without([1,2,3,4,5,6,7,8,9,0,1,2,0,0,1,1],0,1,2));\n//[ 3, 4, 5, 6, 7, 8, 9 ]\n```", "```js\nMap type and their usage:\n```", "```js\nvar founders = new Map();\nfounders.set(\"facebook\", \"mark\");\nfounders.set(\"google\", \"larry\");\nfounders.size; // 2\nfounders.get(\"twitter\"); // undefined\nfounders.has(\"yahoo\"); // false\n\nfor (var [key, value] of founders) {\n  console.log(key + \" founded by \" + value);\n}\n// \"facebook founded by mark\"\n// \"google founded by larry\"\n```", "```js\nvar mySet = new Set();\nmySet.add(1);\nmySet.add(\"Howdy\");\nmySet.add(\"foo\");\n\nmySet.has(1); // true\nmySet.delete(\"foo\");\nmySet.size; // 2\n\nfor (let item of mySet) console.log(item);\n// 1\n// \"Howdy\"\n```", "```js\n    var testArr=new Array(3);\n    console.log(testArr); \n    ```", "```js\nvar testArr=[];\ntestArr[3] = 10;\ntestArr[10] = 3;\nconsole.log(testArr);\n// [undefined, undefined, undefined, 10, undefined, undefined, undefined, undefined, undefined, undefined, 3]\n```", "```js\nvar a = [];\na[5] = 5;\nfor (var i=0; i<a.length; i++) {\n  console.log(a[i]);\n}\n// Iterates over numeric indexes from 0 to 5\n// [undefined,undefined,undefined,undefined,undefined,5]\n\nfor (var x in a) {\n  console.log(x);\n}\n// Shows only the explicitly set index of \"5\", and ignores 0-4\n```", "```js\n    // bad\n    const items = new Array();\n    // good\n    const items = [];\n    ```", "```js\n    const stack = [];\n    // bad\n    stack[stack.length] = 'pushme';\n    // good\n    stack.push('pushme');\n    ```"]