["```js\nInstall-Package WinJs\n\n```", "```js\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\" />\n    <title></title>\n    <script src=\"img/base.js\"></script>\n    <script src=\"img/ui.js\"></script>\n    <script src=\"img/winjs.intellisense-setup.js\"></script>\n    <script src=\"img/winjs.intellisense.js\"></script>\n    <script src=\"img/jquery-1.9.0.js\"></script>\n    <link rel=\"stylesheet\" href=\"lib/winjs/css/ui-dark.css\" />\n</head>\n<body>    \n    <div class=\"win-container\">\n        <button class=\"win-button\" id=\"btn\">Show</button>\n        <span id=\"txtMessage\"></span>\n    </div>\n    <script>\n        (function () {\n            WinJS.UI.processAll().done(function () {\n                $('#btn').click(function () {\n                    $('#txtMessage').text(\"You have clicked!\");\n                });\n            });\n        })();\n    </script>\n</body>\n</html>\n```", "```js\ndefault.js:\n```", "```js\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\" />\n    <title>App1</title>\n\n    <!-- WinJS references -->\n    <link href=\"WinJS/css/ui-dark.css\" rel=\"stylesheet\" />\n    <script src=\"img/base.js\"></script>\n    <script src=\"img/ui.js\"></script>\n\n    <!-- App1 references -->\n    <link href=\"/css/default.css\" rel=\"stylesheet\" />\n    <script src=\"img/default.js\"></script>\n</head>\n<body class=\"win-type-body\">\n    <p>Content goes here</p>\n</body>\n</html>\n```", "```js\nfor default.js:\n```", "```js\n(function () {\n  \"use strict\";\n\n  var app = WinJS.Application;\n  var activation = Windows.ApplicationModel.Activation;\n\n  app.onactivated = function (args) {\n    if (args.detail.kind === activation.ActivationKind.launch) {\n      if (args.detail.previousExecutionState !== activation.ApplicationExecutionState.terminated) {\n      } else {\n      }\n      args.setPromise(WinJS.UI.processAll());\n    }\n  };\n\n  app.oncheckpoint = function (args) {\n  };\n\n  app.start();\n})();\n```", "```js\n<script>\n        var Logger = WinJS.Class.define(function (value) {\n            //constructor\n            console.log(\"Constructor is executing, value passed is: \" + value );\n        }     \n        );\n   //Initializing Logger class object    \n    var log = new Logger(\"Hello World\");\n</script>\n```", "```js\n<script>\n        var Logger = WinJS.Class.define(function (value) {\n               this.logName = value;\n               this.enabled;\n         //constructor\n            console.log(\"Constructor is executing, value passed is \" + value );\n        }, {\n            logMessage: function (message) {\n                if (this.logEnabled) {\n                    alert(\"The message is\" + message);\n                }\n            },\n  logEnabled: {\n                 get: function () { return this.enabled; },\n                 set: function (value) { this.enabled = value; }\n             }\n        }\n        );\n\n       var log = new Logger(\"Sample log\");\n       log.logEnabled = true;\n       log.logMessage(\"Hello World\");\n<script>\n```", "```js\nlogMessage: function (message) {\n              alert(\"The message is\" + message);\n       }\n```", "```js\nlogEnabled: {\n                get: function () { return this.enabled; },\n                set: function (value) { this.enabled = value; }\n            }\n```", "```js\n  logEnabled: {\n                get: function () { return this.enabled; },\n                set: function (value) { this.enabled = value; }\n             },\n\n            logType: {\n                get: function () { return this.loggerType; },\n                set: function (value) { this.loggerType = value;}\n            }\n```", "```js\n<script>\n        var BaseLogger = WinJS.Class.define(function (logName) {\n            this.enabled;\n            this.loggerType;\n            this.loggerName = logName;\n        }, {\n            logEnabled: {\n                get: function () { return this.enabled; },\n                set: function (value) { this.enabled = value; }\n            },\n\n            logType: {\n                get: function () { return this.loggerType; },\n                set: function (value) { this.loggerType = value; }\n            }\n        });\n\n        var Logger = WinJS.Class.derive(BaseLogger, function (logName) {\n            //calling base constructor and passing the LogName to the base constructor\n            BaseLogger.call(this, logName);\n        },\n        {\n            logMessage: function (message) {\n                if (Object.getOwnPropertyDescriptor(BaseLogger.prototype, \"logEnabled\").get.call(this) == true) {\n                    alert(\"The message is \" + message);\n                }\n            },\n\n        }\n        );\n\n        var log = new Logger(\"Hello World\");\n        log.logEnabled = true;\n        log.logType = \"Alert\";\n        log.logMessage(\"hello\");\n</script>\n```", "```js\nObject.getOwnPropertyDescriptor(BaseLogger.prototype, \"logEnabled\").get.call(this)\n```", "```js\nObject.getOwnPropertyDescriptor(BaseLogger.prototype, \"logEnabled\").set.call(this) = true;\n```", "```js\nBaseLogger.prototype.logMessage.call(this);\n```", "```js\nWinJS.Namespace.define(\"DemoApp.Utilities\", {\n            //BaseLogger class\n            BaseLogger: WinJS.Class.define(function (logName) {\n                this.enabled;\n                this.loggerType;\n                this.loggerName = logName;\n            }, {\n                logEnabled: {\n                    get: function () { return this.enabled; },\n                    set: function (value) { this.enabled = value; }\n                },\n\n                logType: {\n                    get: function () { return this.loggerType; },\n                    set: function (value) { this.loggerType = value; }\n                },\n            }),\n\n            //Logger class\n            Logger: WinJS.Class.derive(BaseLogger, function (logName) {\n                //calling base constructor and passing the LogName to the base constructor\n                BaseLogger.call(this, logName);\n            },\n            {\n                logMessage: function (message) {\n                    if (Object.getOwnPropertyDescriptor(BaseLogger.prototype, \"logEnabled\").get.call(this) == true) {\n                        alert(\"The message is \" + message);\n                    }\n                },\n\n            })\n        });\n```", "```js\nvar log = new DemoApp.Utilities.Logger(\"Sample Logger\");\n        log.logEnabled = true;\n        log.logType = \"Alert\";\n        log.logMessage(\"hello\");\n```", "```js\n  var logMixin = {\n     logMessage: function (message) {\n                alert(message);\n            }\n        };\n\n        var SampleClass = WinJS.Class.define(function(){\n\n        });\n\n        WinJS.Class.mix(SampleClass, logMixin);\n\n        var sample = new SampleClass();\n\n        sample.logMessage(\"Mixin\");\n```", "```js\n        //First Mixin\n        var logMixin = {\n            logMessage: function (message) {\n                alert(message);\n            }\n        };\n\n        //Second Mixin\n        var logConsoleMixin = {\n            logMessage: function (message) {\n                console.log(message);\n            }\n        }\n\n        //Class\n        var SampleClass = WinJS.Class.define(function () {\n\n        },\n\n        logMessage= function(message){\n        var result = confirm(message);\n        });\n\n        WinJS.Class.mix(SampleClass, logMixin, logConsoleMixin);\n\n        var sample = new SampleClass();\n        sample.logMessage(\"Mixin\");\n```", "```js\n    WinJS.Class.mix(SampleClass, WinJS.Utilities.eventMixin);\n    ```", "```js\n            var SampleClass = WinJS.Class.define(function () {\n            },\n            {\n                execute: function(message){\n                    this.dispatchEvent(\"executeInvoked\", { message: \"Executed\" });\n                }\n            });\n    ```", "```js\n            var sampleClass = new SampleClass();\n            var sampleEventHandler = function (event) {\n\n                alert(event.detail.message);\n            };\n            sampleClass.addEventListener(\"executeInvoked\", sampleEventHandler);\n\n            sampleClass.execute(\"hello\");       \n    ```", "```js\n<div id=\"rootDiv\">\n        <div> Course Name:\n            <span id=\"divForm\" data-win-bind=\"innerText: name\">loading</span>\n        </div>\n        <div>\n            Course Description:\n            <span id=\"divForm\" data-win-bind=\"innerText: description\">loading</span>\n        </div>\n    </div>\nBelow is the JavaScript code which defines the view model\nlet ViewModel = WinJS.Class.define(function () {\n                this.nameProp;\n                this.descProp;\n            },\n            {\n                name: {\n                    get: function () { return this.nameProp; },\n                    set: function (value) { this.nameProp = value; }\n                },\n                description: {\n                    get: function () { return this.descProp; },\n                    set: function (value) { this.descProp = value; }\n                }\n            });\n\n            let viewModel = new ViewModel();\n            viewModel.name = \"WinJS databinding\";\n            viewModel.description = \"Introduction to WinJS databinding\";\n            var personDiv = document.querySelector('#rootDiv');\n            WinJS.Binding.processAll(personDiv, viewModel);\n```", "```js\n//HTML markup\n<button id=\"btnUpdate\">Click</button>\n\n//JavaScript\n   let ViewModel = WinJS.Class.define(function () {\n                      this.nameProp;\n                      this.descProp;\n           },\n           {\n name: {\n    get: function () { return this.nameProp; },\n    set: function (value) { this.nameProp = value; }\n        },\n description: {\n    get: function () { return this.descProp; },\n    set: function (value) { this.descProp = value; }\n        }\n });\n\nlet viewModel = new ViewModel();\nviewModel.name = \"WinJS databinding\";\nviewModel.description = \"Introduction to WinJS databinding\";\nvar personDiv = document.querySelector('#rootDiv');\n\nlet observableViewModel = WinJS.Binding.as(viewModel);\n\n   WinJS.Binding.processAll(personDiv, observableViewModel);\n\ndocument.querySelector('#btnUpdate').onclick = function () {\n   observableViewModel.name = \"new name\";\n  observableViewModel.description =\"new description\";\n}\n```", "```js\nsomeTextboxElement.onpropertychange=function(){\n      someModel.property = someTextboxElement.value;\n}\n```", "```js\n<input type=\"text\" data-win-bind=\"value: someProperty Binding twoWayBinding\" />\n```", "```js\n//Defining Binding initializer to support two way binding\nWinJS.Namespace.define(\"Binding.Mode\", {\n      twoway: WinJS.Binding.initializer(function \n                        (source, sourceProperties, destination, destinationProperties) {\n          WinJS.Binding.defaultBind(source, sourceProperties, destination, destinationProperties);\n          destination.onchange = function () {\n              var destValue = destination[destinationProperties[0]];\n              source[sourceProperties[0]] = destValue;\n          }\n      })\n  });\n```", "```js\n//Defining class\nlet ViewModel = WinJS.Class.define(function () {\n                      this.nameProp;\n                      this.descProp;\n                  },\n{\nname: {\nget: function () { return this.nameProp; },\nset: function (value) { this.nameProp = value; }\n},\ndescription: {\nget: function () { return this.descProp; },\nset: function (value) { this.descProp = value; }\n}\n});\n\n//Initializing class Instance\nlet viewModel = new ViewModel();\nviewModel.name = \"WinJS databinding\";\nviewModel.description = \"Introduction to WinJS databinding\";\n\nvar rootDiv = document.querySelector('#rootDiv');\nlet observableViewModel = WinJS.Binding.as(viewModel);\nWinJS.Binding.processAll(rootDiv, observableViewModel);\n```", "```js\n<div id=\"rootDiv\">\n            <div\n <input type=\"text\" data-win-bind=\"value: name Binding.twoWayBinding\" />\n            </div>\n            <div>\n                Course Name:\n                <span id=\"spanName\" data-win-bind=\"innerText: name\">loading</span>\n            </div>\n            <div>\n<input type=\"text\" data-win-bind=\"value: description Binding.twoWayBinding\" />\n            </div>\n            <div>\n                Course Description:\n                <span id=\"spanDesc\" data-win-bind=\"innerText: description\">loading</span>\n            </div>\n            </div>\n```", "```js\nvar promise = new WinJS.Promise(function (completed, error, progress)\n\n//Call if we need to update consumer that still in progress\nprogress(\"progress\");\n\n//Call if any error occurs\nerror(\"error\");\n\n//Call when the function is completed\ncompleted(\"completed\");\n}\n);\n```", "```js\npromise.then(\nfunction () { console.log(\"completed\"); }, \nfunction () { console.log(\"error\") }, \nfunction () { console.log(\"promise\") }\n);\n```", "```js\nfunction executeTable(table, max)\n{\n  return new WinJS.Promise(function(completed, error, progress){\n  for (i = 1; i < max; i++) {\n     console.log(table +' X '+ i +' = ' + (table * i ));\n  }\n  completed(\"executed table\")\n });\n };\n\n  executeTable(2, 10).then(\n            function (completedVal) {\n                    console.log(completedVal);\n             }, function (errorVal) {\n                    console.log(errorVal);\n             },\n             function (onProgressVal) {\n                    console.log(onProgressVal);\n             }\n\n   )\n```", "```js\nfunction executeTable(table, max)\n            {\n                return new WinJS.Promise(function (completed, error, onProgress) {\n                    window.setImmediate(function () {\n                        for (i = 1; i <= max; i++) {\n                            var row = table + ' X ' + i + ' = ' + (table * i);\n                            onProgress(row);\n                        }\n                        completed(\"executed table\")\n                    }, 0);\n                });\n            }; \n\n  executeTable(2, 10).then(\n            function (completedVal) {\n                    console.log(completedVal);\n             }, function (errorVal) {\n                    console.log(errorVal);\n             },\n             function (onProgressVal) {\n                    console.log(onProgressVal);\n             }\n\n   )\n```", "```js\nvar promise1 = function () { return WinJS.xhr({ url: \"http://microsoft.com\" }) };\n            var promise2 = function () { return WinJS.xhr({ url: \"http://google.com\" }) };\n            var promise3 = function () { return WinJS.xhr({ url: \"http://techframeworx.com\" }) };\n            var promise4 = function () { return WinJS.xhr({ url: \"http://msdn.microsoft.com\" }) };\n\n            promise1().then(function (dataPromise1) {\n                console.log(\"got the response from promise 1\");\n                return promise2();\n            }).then(function (dataPromise2) {\n                console.log(\"got the response from promise 2\");\n                return promise3();\n            }).then(function (dataPromise3) {\n                console.log(\"got the response from promise 3\");\n                return promise4();\n            }).done(function (dataPromise4) {\n                console.log(\"got the response from promise4\");\n                console.log(\"completed the promise chain\");\n            });\n```", "```js\n            var promise1 = function () { return WinJS.xhr({ url: \"http://microsoft.com\" }) };\n            var promise2 = function () { return WinJS.xhr({ url: \"http://google.com\" }) };\n            var promise3 = function () { return WinJS.xhr({ url: \"htt://techframeworx.com\" }) };\n            var promise4 = function () { return WinJS.xhr({ url: \"http://msdn.microsoft.com\" }) };\n\n            promise1().then(function (dataPromise1) {\n                console.log(\"got the response from promise 1\");\n                return promise2();\n            }).then(function (dataPromis2) {\n                console.log(\"got the response from promise 2\");\n                return promise3();\n            }).then(function (dataPromise3) {\n                console.log(\"got the response from promise 3\");\n                return promise4();\n            }).done(function (dataPromise4) {\n                console.log(\"got the response from promise 4\");\n                console.log(\"completed the promise chain\");\n            }, function (error) {\n                console.log(\"some error occurred, cause: \" + error);\n            });\n```", "```js\nvar promiseGoogle = function () { return WinJS.xhr({ url: \"http://google.com\" }) };\n            googlePromiseObj = promiseGoogle();\n            googlePromiseObj.cancel();\n```", "```js\n   var promise1 = function () { return WinJS.xhr({ url: \"http://microsoft.com\" }) };\n            var promise2 = function () { return WinJS.xhr({ url: \"http://googe.com\" }) };\n            var promise3 = function () { return WinJS.xhr({ url: \"http://techframeworx.com\" }) };\nWinJS.Promise.join([promise1, promise2, promise3])\n.done(function(){\n  console.log(\"All the promises are finished\");\n});\n```", "```js\nvar promise1 = function () { return WinJS.xhr({ url: \"http://microsoft.com\" }) };\nvar promise2 = function () { return WinJS.xhr({ url: \"http://googe.com\" }) };\nvar promise3 = function () { return WinJS.xhr({ url: \"http://techframeworx.com\" }) };\nWinJS.Promise.any([promise1, promise2, promise3])\n.done(function(){\n  console.log(\"One of the promises is finished\");\n});\n```", "```js\nWinJS.Promise.is(WinJS.xhr({ url: \"http://microsoft.com\" }));\n```", "```js\nfunction displayMessage() {\n\n                console.log(\"This is a non promise function\")\n            }\n            var promiseDisplayMessage = WinJS.Promise.as(displayMessage);\n            promiseDisplayMessage.done(function () { console.log(\"promise is executed\") });\n```", "```js\n<button data-win-control=\"WinJS.UI.BackButton\">WinJS button</button>\n```", "```js\n<div id=\"ratingControl\" data-win-control=\"WinJS.UI.Rating\"\n         data-win-options=\"{minRating: 1, averageRating : 5, maxRating: 10}\"></div>\n```", "```js\npackage.json:\n```", "```js\n{\n  \"version\": \"1.0.0\",\n  \"name\": \"ASP.NET\",\n  \"private\": true,\n  \"dependencies\": {\n    \"winjs\": \"4.4.0\"\n  },\n  \"devDependencies\": {\n    \"gulp\": \"^3.9.1\"\n  }\n   }\n```", "```js\n/// <binding Clean='clean' />\n\"use strict\";\nvar gulp = require(\"gulp\");\nvar paths = {\n    webroot: \"./wwwroot/\"\n};\nvar config = {\n    libBase: 'node_modules',\n    lib: [\n       require.resolve('winjs/js/base.js'),\n       require.resolve('winjs/js/ui.js'),\n       require.resolve('winjs/js/winjs.intellisense.js'),\n       require.resolve('winjs/js/winjs.intellisense-setup.js')\n    ],\n    libCss: [require.resolve('winjs/css/ui-dark.css'),\n        require.resolve('winjs/css/ui-light.css')\n    ]\n};\ngulp.task('build.lib', function () {\n    return gulp.src(config.lib, { base: config.libBase })\n    .pipe(gulp.dest(paths.webroot + 'lib'));\n});\ngulp.task('build.libCss', function () {\n    return gulp.src(config.libCss, { base: config.libBase })\n    .pipe(gulp.dest(paths.webroot + \"lib\"));\n});\n```", "```js\n\"Microsoft.AspNet.StaticFiles\": \"1.0.0-rc1-final\"\n```", "```js\n    <script src=\"img/base.js\"></script>\n    <script src=\"img/ui.js\"></script>\n    <script src=\"img/winjs.intellisense-setup.js\"></script>\n    <script src=\"img/winjs.intellisense.js\"></script>\n    <script src=\"img/jquery-1.9.0.js\"></script>\n```", "```js\n    <link rel=\"stylesheet\" href=\"lib/winjs/css/ui-light.css\" />\n```", "```js\n  <div id=\"rootDiv\">\n        <div class=\"col-md-4\">\n           Click to capture image <input type=\"button\" value=\"Capture\" onclick=\"return CaptureCamera();\" />\n        </div>\n        <br />\n        <img id=\"imgPhoto\" width=\"500\" height=\"500\" style=\"border:dotted;\" />\n     </div>\n```", "```js\n      <script>\n            if (window.Windows) {\n                function CaptureCamera() {\n                    var notifications = Windows.UI.Notifications;\n                    var dialog = new Windows.Media.Capture.CameraCaptureUI();\n                    var aspectRatio = { width: 1, height: 1 };\n                    dialog.photoSettings.croppedAspectRatio = aspectRatio;\n                    dialog.captureFileAsync(Windows.Media.Capture.CameraCaptureUIMode.photo).done(function (capturedImage) {\n                        if (capturedImage) {\n                            var imageURL = URL.createObjectURL(capturedFile, { oneTimeOnly: true });\n                            document.getElementById(\"img\").src = imageURL;\n                        }\n                        else {\n                            WinJS.log && WinJS.log(\"No image captured yet\", \"WinJSTestApp\", \"Status\");\n                        }\n                    }, function (err) {\n                        WinJS.log && WinJS.log(err, \"WinJSTestApp\", \"Error\");\n                    });\n                }\n            } else {\n                function CaptureCamera() {\n                    alert(\"Cannot access camera, it should be hosted as a windows application\");\n                }\n            }\n    </script>\n```"]