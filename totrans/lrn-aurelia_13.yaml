- en: Appendix B. Using Webpack
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录B. 使用Webpack
- en: '**Webpack** ([https://webpack.github.io/](https://webpack.github.io/)) is yet
    another module bundler for the web that has gained a lot of popularity in the
    last year. Aurelia already offers application skeletons that use Webpack, for
    both ES next and Typescript.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**Webpack** ([https://webpack.github.io/](https://webpack.github.io/)) 又是另一个流行的Web模块打包器。Aurelia已经提供了使用Webpack的ES
    next和Typescript应用程序骨架。'
- en: Additionally, there are plans to add support for Webpack-based projects to the
    CLI. At the moment, however, the skeletons are the best starting point for creating
    an Aurelia project based on Webpack.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还有计划将CLI对Webpack-based项目的支持。然而，目前，骨架是基于Webpack创建Aurelia项目的最佳起点。
- en: In this appendix, we will see the differences between a CLI-based project that
    uses `requirejs` at the moment of writing, and a Webpack-based project started
    from the skeleton.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本附录中，我们将看到在撰写本文档时使用`requirejs`的基于CLI的项目和从骨架开始的基于Webpack的项目之间的差异。
- en: Note
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The purpose of this appendix is not to cover Webpack itself. As such, I strongly
    suggest that you get familiar with Webpack, if you are not already, before reading
    on.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本附录的目的并不是要覆盖Webpack本身。因此，我强烈建议如果你还不熟悉Webpack，请在继续阅读之前先熟悉一下Webpack。
- en: Tip
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Our contact management application, rebuilt using the Webpack skeleton, can
    be found at `appendix-b\using-webpack` in the book's assets and can be used as
    a reference throughout this appendix.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的联系人管理应用程序，使用Webpack骨架重建，可以在书籍的资源中的`appendix-b\using-webpack`找到，并可作为本附录的参考。
- en: Getting started
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门
- en: In order to create a Webpack-based application, the first step is to download
    the skeletons from [https://github.com/aurelia/skeleton-navigation/releases/latest](https://github.com/aurelia/skeleton-navigation/releases/latest) 
    and to unzip the file. The root folder contains a distinct directory for each
    available skeleton. The one we aim to keep here is named `skeleton-esnext-webpack`.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建一个基于Webpack的应用程序，第一步是下载[https://github.com/aurelia/skeleton-navigation/releases/latest](https://github.com/aurelia/skeleton-navigation/releases/latest)的骨架并解压文件。根目录包含每个可用骨架的独立目录。我们在这里要保留的是名为`skeleton-esnext-webpack`。
- en: 'The Webpack skeleton uses NPM as its package manager. As such, we need to install
    the project''s dependencies by opening a console in the project directory and
    running the following command:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Webpack骨架使用NPM作为其包管理器。因此，我们需要通过在项目目录中打开控制台并运行以下命令来安装项目的依赖项：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Once this is done, the sample application is ready to run.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此操作后，示例应用程序即可运行。
- en: Running tasks
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行任务
- en: 'The Webpack skeleton doesn''t use Gulp as its build system, but simply relies
    on NPM tasks. If you have a look at the `scripts` section in the `package.json`
    file, you''ll see the list of tasks along with their corresponding command that
    can be run for the project. Here are the most common:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Webpack骨架不使用Gulp作为其构建系统，而是简单地依赖于NPM任务。如果你查看`package.json`文件中的`scripts`部分，你会看到项目的任务列表及其相应的命令。以下是最常见的：
- en: '`start`: Launches a development web server. When `index.html` is accessed for
    the first time, the application is bundled and served, and the process then watches
    the source files so it can recreate the bundles and refresh the browser when it
    detects a change. The `start` command is an alias for `server`, which is itself
    an alias for `server:dev`.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`start`：启动开发Web服务器。当第一次访问`index.html`时，应用程序被捆绑并提供，然后该过程监视源文件，以便在检测到更改时重新创建捆绑并刷新浏览器。`start`命令是`server`的别名，而`server`又是`server:dev`的别名。'
- en: '`test`: Runs the unit tests. Code coverage is enabled using Istanbul ([https://github.com/gotwarlost/istanbul](https://github.com/gotwarlost/istanbul)).'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`test`：运行单元测试。使用Istanbul（[https://github.com/gotwarlost/istanbul](https://github.com/gotwarlost/istanbul)）启用代码覆盖。'
- en: '`e2e`: Runs the end-to-end tests. This task will launch both the application,
    which will run on port 19876, and the E2E test suite.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`e2e`：运行端到端测试。此任务将启动应用程序，该应用程序将在端口19876上运行，以及E2E测试套件。'
- en: '`build:prod`: Bundles the application for production. The bundles and the `index.html`
    file will be optimized for production and will be generated in the `dist` folder.
    Additionally, the production build will add a content-based hash to the name of
    each bundle, in order to version them. This has the same effect as enabling bundle
    revision by setting the `rev` option in `aurelia_project/aurelia.json` in CLI-based
    projects.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`build:prod`：为生产环境打包应用程序。捆绑包和`index.html`文件将被优化以适应生产环境，并将在`dist`文件夹中生成。此外，生产构建将在每个捆绑包的名称中添加基于内容的全局哈希，以便对它们进行版本控制。这与在CLI-based项目中在`aurelia_project/aurelia.json`中设置`rev`选项以启用捆绑修订的效果相同。'
- en: '`server:prod`: Launches a web server to serve the production bundle. It must
    be run after `build:prod`.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`server:prod`：启动一个Web服务器以提供生产捆绑包。它必须在`build:prod`之后运行。'
- en: Adding libraries
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加库
- en: External libraries are added using NPM, just like with CLI-based projects. However,
    in order for files to be included in bundles, external libraries must be referenced
    in JS files, because Webpack determines what must be included in bundles by analyzing
    the `import` statements of every JS module in the application.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 外部库是通过NPM添加的，与基于CLI的项目一样。然而，为了使文件被包含在捆绑包中，外部库必须在JS文件中引用，因为Webpack通过分析应用程序中每个JS模块的`import`声明来确定必须包含在捆绑包中的内容。
- en: 'You can see an example of this by checking the skeleton''s `main` module:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过查看骨架的`main`模块来查看这个示例：
- en: '`src/main.js`'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`src/main.js`'
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the skeleton's sample application, all global resources such as the application's
    stylesheet, Font Awesome, Bootstrap's stylesheet, and the Bootstrap JS file are
    imported in the `main.js` file. These imports will tell Webpack to include these
    resources in the application bundle. Additionally, Webpack is smart enough to
    analyze CSS files for their dependencies. This means it knows how to handle imported
    CSS files, images, and font files.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在骨架的示例应用程序中，所有全局资源，如应用程序的样式表、Font Awesome、Bootstrap的样式表以及Bootstrap的JS文件都在`main.js`文件中被导入。这些导入将告诉Webpack将这些资源包含在应用程序捆绑包中。此外，Webpack足够智能，可以分析CSS文件以找出它们的依赖关系。这意味着它知道如何处理导入的CSS文件、图片和字体文件。
- en: Bundling
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 捆绑
- en: 'The bundles themselves are configured in the `webpack.config.js` file. By default,
    the skeleton defines three entry bundles:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 捆绑包本身是在`webpack.config.js`文件中配置的。默认情况下，骨架定义了三个入口捆绑包：
- en: '`aurelia-bootstrap`: Contains Aurelia''s bootstrapper, the default polyfills,
    Aurelia''s browser platform abstraction, and the Bluebird Promise library'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`aurelia-bootstrap`：包含Aurelia的启动器、默认的polyfill、Aurelia的浏览器平台抽象以及Bluebird Promise库。'
- en: '`aurelia`: Contains all Aurelia''s default libraries'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`aurelia`：包含所有Aurelia的默认库'
- en: '`app`: Contains all application modules'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app`：包含所有应用程序模块'
- en: In addition to the modules listed as its direct content, a bundle will contain
    all its contents' dependencies which are not included in another bundle. For example,
    in the skeleton's sample, the Bootstrap JS files are included in the `app` bundle,
    because it is not included in any other bundle, and modules included in the `app`
    bundle import it.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 除了直接列为其内容的模块外，一个捆绑包还将包含所有未包含在其他捆绑包中的其内容的依赖项。例如，在骨架的示例中，Bootstrap的JS文件被包含在`app`捆绑包中，因为它们没有被包含在任何其他捆绑包中，并且包含在`app`捆绑包中的模块会导入它们。
- en: 'If you would like, for example, the `aurelia` bundle to contain all external
    libraries, you should add `bootstrap` to the list of modules included in it:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要，例如，让`aurelia`捆绑包包含所有外部库，你应该将其添加到它的模块列表中：
- en: '`webpack.config.js`'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`webpack.config.js`'
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If you run the sample application at this point, Bootstrap's JS files should
    now be included in the `aurelia` bundle instead of the `app` bundle.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在此时运行示例应用程序，Bootstrap的JS文件应该现在会被包含在`aurelia`捆绑包中，而不是`app`捆绑包。
- en: Lazy-loading bundles
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 懒加载捆绑包
- en: All bundles defined in the skeleton's sample application are entry bundles,
    which means those bundles are loaded directly by the `index.html` file. All this
    code is loaded upfront, before the application starts.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 骨架的示例应用程序中定义的所有捆绑包都是入口捆绑包，这意味着这些捆绑包直接由`index.html`文件加载。所有这些代码都在应用程序启动之前一次性加载。
- en: As discussed in [Chapter 10](ch10.html "Chapter 10. Bundling for Production")
    , *Bundling for Production*, depending on your application's usage patterns and
    how it is structured, it may be better performance-wise to have different parts
    of the application bundled separately, and to have some of those bundles loaded
    only when needed.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 正如在[第10章](ch10.html "第10章 生产环境下的打包")，*生产环境下的打包*中讨论的，根据应用程序的使用模式和结构，从性能角度来看，将应用程序的不同部分分别打包可能更好，并且只有在需要时才加载其中一些捆绑包。
- en: 'Configuration of lazy-loaded bundles is done in the `package.json` file:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 懒加载包的配置是在`package.json`文件中完成的：
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In this example, we bundle all components and models from the `contacts` feature
    of our contacts management application in a distinct, lazy-loaded bundle. With
    this configuration, the `contacts` bundle would be loaded from the server only
    when a user navigates to one of the contacts' route components.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将我们联系管理应用程序的`contacts`特性的所有组件和模型打包在一个独特的、懒加载的捆绑包中。有了这个配置，`contacts`捆绑包只有在用户导航到某个联系人路由组件时才会从服务器加载。
- en: As for dependency inclusion, a lazy-loaded bundle will behave just like an entry
    bundle. In addition to the modules listed in its configuration, a lazy-loaded
    bundle will also contain all dependencies that were not already included in any
    of the entry bundles. This means that if you `import` stuff from an external library
    only inside a module that is included in a given bundle and nowhere else in your
    application, and if you don't include this external library in one of the entry
    bundles, the library will be included in your lazy-loaded bundle. This is an important
    thing to consider when optimizing your application's bundling.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 至于依赖项包含，懒加载的捆绑包将表现得就像一个入口捆绑包。除了在其配置中列出的模块外，懒加载的捆绑包还将包含所有没有包含在任何入口捆绑包中的依赖项。这意味着如果你只在一个模块中从外部库`import`东西（并且在这个应用程序中的其他地方没有用到），并且你没有将这个外部库包含在某个入口捆绑包中，这个库将被包含在你的懒加载捆绑包中。这是优化应用程序打包时需要考虑的一个重要因素。
- en: Environment-based configuration
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于环境的配置
- en: The Webpack skeleton uses an environment variable named `NODE_ENV` in order
    to customize the bundling process based on the context. This environment variable
    is set to either `development`, `test`, or `production` by the tasks described
    in `package.json`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Webpack骨架使用一个名为`NODE_ENV`的环境变量来根据上下文定制打包过程。这个环境变量通过`package.json`中描述的任务设置为`development`、`test`或`production`。
- en: If you take a look in the `webpack.config.js` file, you will see a `switch`
    statement which generates a Webpack configuration object based on the environment.
    This is where you can customize bundling depending on the environment.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看`webpack.config.js`文件，你会看到一个`switch`语句，它根据环境生成一个Webpack配置对象。这就是你可以根据环境定制打包的地方。
- en: 'For example, if you use the `aurelia-i18n` plugin, you may want to copy the
    `locales` directory to the `dist` directory when you build your application. The
    simplest way to do this is to add the following line to both production and development
    configurations:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你使用`aurelia-i18n`插件，你可能希望在构建应用程序时将`locales`目录复制到`dist`目录。最简单的方法是在生产和开发配置中都添加以下行：
- en: '`webpack.config.js`'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`webpack.config.js`'
- en: '[PRE4]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Additionally, if you want to use the `aurelia-testing` plugin, either to use
    the component tester in your unit tests or to use the `view-spy` and `compile-spy`
    attributes for debugging purposes, you should install it using NPM and add it
    to the `aurelia` bundle for both `test` and `development` environments:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，如果你想使用`aurelia-testing`插件，无论是用于单元测试中的组件测试器，还是用于调试目的的`view-spy`和`compile-spy`属性，你应该使用NPM安装它，并将其添加到`aurelia`捆绑包中，适用于`test`和`development`环境：
- en: '`webpack.config.js`'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`webpack.config.js`'
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Configuring Webpack can be complicated and intimidating at first. The Webpack
    skeleton uses `easy-webpack` ([https://github.com/easy-webpack/core](https://github.com/easy-webpack/core))
    to simplify this configuration process. Another huge advantage of using `easy-webpack`
    is that it enforces community standards, and it makes reusing complex snippets
    of configuration pretty easy.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 配置Webpack可能一开始会感到复杂和令人畏惧。Webpack骨架使用`easy-webpack`（[https://github.com/easy-webpack/core](https://github.com/easy-webpack/core)）来简化这个配置过程。使用`easy-webpack`的另一个巨大优势是，它强制执行社区标准，并且使得复用复杂的配置片段变得相当容易。
- en: As such, you can use one of the many configuration modules available at [https://github.com/easy-webpack](https://github.com/easy-webpack) 
    or others, or even your own, to customize further Webpack's configuration.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，你可以使用位于[https://github.com/easy-webpack](https://github.com/easy-webpack)或其他地方提供的众多配置模块之一，甚至是你自己的模块，来进一步定制Webpack的配置。
- en: Summary
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Even though it is not the preferred bundler for Aurelia, Webpack is already
    well supported. Moreover, whether it is bundled using Webpack or the CLI, an Aurelia
    application doesn't change much itself, it is mostly the infrastructure code around
    that changes. This makes migrating from one bundler to another much simpler.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Webpack并非Aurelia的首选打包工具，但它已经得到了很好的支持。此外，无论使用Webpack还是CLI进行打包，Aurelia应用程序本身的变化并不大，主要是围绕它的基础代码发生了变化。这使得从一个打包工具迁移到另一个打包工具变得更为简单。
