- en: Chapter 8. Using JSON for Binary Data Transfer
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第八章 使用JSON进行二进制数据传输
- en: 'In this chapter, we will discuss the intersection between JSON and binary data.
    Here, you''ll find the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论JSON和二进制数据之间的交集。在这里，您会找到以下菜谱：
- en: Encoding binary data as a base64 string using Node.js
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Node.js将二进制数据编码为base64字符串
- en: Decoding binary data from a base64 string using Node.js
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Node.js从base64字符串解码二进制数据
- en: Encoding and decoding binary data as a base64 string using JavaScript in the
    browser
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在浏览器中使用JavaScript将二进制数据编码为base64字符串
- en: Encoding data as BSON using Json.NET
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Json.NET将数据编码为BSON
- en: Decoding data from BSON using Json.NET
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Json.NET解码BSON数据
- en: Using `DataView` to access `ArrayBuffer`
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`DataView`访问`ArrayBuffer`
- en: Encoding and decoding base64 using an `ArrayBuffer`
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`ArrayBuffer`进行base64的编码和解码
- en: Compressing object-body content from a Node.js server built using the express
    module
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用express模块构建的Node.js服务器上压缩对象体内容
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引言
- en: 'There are typically two reasons why you might want to think about binary representation
    when using JSON: either because you need to carry binary data between one part
    of your application to another or because you''re worried about the size of the
    JSON you''re transporting.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 使用JSON时考虑二进制表示通常有两个原因：要么是因为你需要将在应用程序的一个部分与另一个部分之间传输二进制数据，要么是因为你担心传输的JSON数据的大小。
- en: In the first case, you're actually a little stuck, as the existing JSON specification
    doesn't provide a container format for binary data because JSON is a text-based
    representation of data at its heart. You can choose to encode binary data in another
    format, such as base64, which renders binary data as a printable character string,
    or you can use an extension of JSON, such as Binary JSON (BSON), that supports
    Binary data.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一种情况下，你实际上有点束手无策，因为现有的JSON规范没有为二进制数据提供容器格式，因为JSON在本质上是一种基于文本的数据表示。你可以选择将二进制数据编码为另一种格式，如base64，将二进制数据表示为可打印的字符串，或者使用支持二进制数据的JSON扩展，如二进制JSON（BSON）。
- en: 'BSON uses the semantics of JSON but represents the data in a binary form. Thus,
    the same basic structure is available: a (possibly nested) map of key-value pairs,
    where values can be other key-value pairs, arrays, strings, or even binary data.
    However, instead of using plaintext encoding, the format is binary, which yields
    a smaller data size and support for binary objects natively (you can learn more
    about BSON at [http://bsonspec.org/](http://bsonspec.org/)). The down side to
    BSON is that it''s not natively supported in JavaScript, and being a binary format,
    isn''t amenable to easy inspection. To whet your appetite, I will discuss how
    to use BSON with the popular Json.NET library in this chapter.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: BSON使用JSON的语义，但以二进制形式表示数据。因此，同样的基本结构是可用的：一个（可能嵌套的）键值对映射，其中值可以是其他键值对、数组、字符串，甚至是二进制数据。然而，代替使用纯文本编码，该格式是二进制的，这产生了更小的数据大小并支持原生二进制对象（您可以在[http://bsonspec.org/](http://bsonspec.org/)了解更多关于BSON的信息）。BSON的缺点是它不是原生支持JavaScript，而且作为一种二进制格式，不容易进行检查。为了激发你的兴趣，我将在本章讨论如何使用流行的Json.NET库与BSON一起使用。
- en: A second approach is to take any binary data and encode it in a format that
    makes it compatible with text. Base64 is one such encoding mechanism that's been
    used for a variety of purposes over the years on the Internet, and there's support
    for it in both modern browsers and Node.js. In this chapter, I show recipes to
    interconvert with base64 using both the modern browser interfaces and Node.js.
    Be aware, though, that this means data bloat, because representing binary information
    as text increases the size of the data being transported.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个方法是取任何二进制数据，并将其编码为与文本兼容的格式。Base64就是这样一种编码机制，多年来在互联网上用于各种目的，并且在现代浏览器和Node.js中都有支持。在本章中，我展示了使用现代浏览器接口和Node.js与base64相互转换的菜谱。请注意，这意味着数据膨胀，因为将二进制信息表示为文本会增加传输的数据大小。
- en: A common concern people express as they consider JSON for their application
    is the size of the JSON package in comparison to binary formats such as BSON,
    protocol buffers, or a hand-tuned binary representation. While JSON can be larger
    than a binary representation, you gain human readability (especially helpful for
    debugging), clear semantics, and a large assortment of libraries with working
    implementations from which to draw. Minimizing whitespace and using short key
    names can help reduce the size of JSON, as can compression—in a recent project
    I was working on, my testing showed that compressing the JSON using standard HTTP
    compression yielded more memory savings than an all-binary representation would
    have, and was of course easier to implement on both server and clients as well.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 人们在考虑为他们的应用程序使用JSON时经常表达的一个担忧是，JSON包的大小与二进制格式（如BSON、协议缓冲区或手工调优的二进制表示）相比。虽然JSON可能比二进制表示大，但您获得了可读性（特别有助于调试）、清晰的语义，以及大量可用的库和实施实例。减少空白字符和使用简短的关键字名称可以帮助减小JSON的大小，压缩也可以——在我最近的一个项目中，我的测试显示，使用标准的HTTP压缩对JSON进行压缩，比全部二进制表示节省的内存更多，当然在服务器和客户端实现起来也更简单。
- en: Remember that going to binary for the sake of memory—either BSON, compression,
    or a custom format—negates one of JSON's most useful attributes, which is its
    property of self-documentation.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，为了节省内存而转换为二进制格式——无论是BSON、压缩还是自定义格式——都会抵消JSON的一个最有用的属性，即其自文档化属性。
- en: Encoding binary data as a base64 string using Node.js
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Node.js将二进制数据编码为base64字符串
- en: If you have binary data that you need to encode to pass to the client as JSON,
    you can convert it to base64, a common means on the Internet to represent eight-bit
    values in solely printable characters. Node.js provides the `Buffer` object and
    a `base64` encoder and decoder for this task.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有二进制数据需要编码以作为JSON传递给客户端，您可以将其转换为base64，这是在互联网上表示八位值的一种常见方式，仅使用可打印字符。Node.js提供了`Buffer`对象和`base64`编码器和解码器来完成这项任务。
- en: How to do it…
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到…
- en: 'First, you''ll allocate a buffer, and then you''ll convert it to a string,
    indicating that the string you want should be base64-encoded, like this:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您会分配一个缓冲区，然后将其转换为字符串，指示您想要的字符串应该是base64编码的，如下所示：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How it works…
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The Node.js `Buffer` class wraps a collection of octets outside the Node.js
    V8 runtime heap. It's used in Node.js anytime you need to work with purely binary
    data. The first line of our example makes a buffer, populating it with the string
    `Hello world`.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`Node.js`的`Buffer`类包装了一组八位字节，位于Node.js V8运行时堆之外。当您需要在Node.js中处理纯二进制数据时，它会用到。我们示例的第一行创建了一个缓冲区，用字符串`Hello
    world`填充它。'
- en: 'The `Buffer` class includes the `toString` method, which takes a single argument,
    the means to encode the buffer. Here, we''re passing `base64`, indicating that
    we want `s` to contain the `base64` representation of `b`, but we could just as
    easily pass one of the following values:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`Buffer`类包含`toString`方法，该方法接受一个参数，即编码缓冲区的手段。这里，我们传递了`base64`，表示我们希望`s`包含`b`的`base64`表示，但我们可以同样容易地传递以下值之一：'
- en: '`ascii`: This value indicates that the high bit should be stripped and the
    remaining seven bits of each octet converted to their ASCII equivalent.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ascii`：这个值表示应该移除高位比特，并将每个八位字节剩余的7位转换为其ASCII等效值。'
- en: '`utf8`: This value indicates that it should be encoded as multi-byte Unicode.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`utf8`：这个值表示它应该作为多字节Unicode编码。'
- en: '`utf16le`: These are 2 or 4-byte little-endian Unicode characters.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`utf16le`：这些是2个或4个字节的小端Unicode字符。'
- en: '`hex`: This value is for encoding each octet as two characters, the value in
    `hex` of the octet.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hex`：这个值是将每个八位字节编码为两个字符，八位字节的`hex`值。'
- en: See also
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 也见
- en: For documentation on the `Buffer` class of Node.js, see [https://nodejs.org/api/buffer.html](https://nodejs.org/api/buffer.html).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Node.js的`Buffer`类的文档，请参阅[https://nodejs.org/api/buffer.html](https://nodejs.org/api/buffer.html)。
- en: Decoding binary data from a base64 string using Node.js
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从base64字符串解码二进制数据使用Node.js
- en: In Node.js, there's no inverse of `Buffer.toString`; instead, you pass the base64
    data directly to the buffer constructor, along with a flag indicating that the
    data is base64 encoded.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在Node.js中，没有`Buffer.toString`的逆操作；相反，您直接将base64数据传递给缓冲区构造函数，并附上一个标志，表示数据是base64编码的。
- en: Getting ready
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备
- en: 'If you want to run the example as it appears here, you''ll need the `buffertools`
    module installed, in order to get the `Buffer.compare` method. To get that, run
    `npm` on a command prompt:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要像这里显示的那样运行示例，你需要安装`buffertools`模块，以获取`Buffer.compare`方法。为了获得这个模块，请在命令提示符下运行`npm`：
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If all you're going to do is use the `Buffer` constructor of Node.js to decode
    `base64` data, you don't need to do this.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只是要使用Node.js的`Buffer`构造函数来解码base64数据，你不需要做这个。
- en: How to do it…
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到…
- en: 'Here, we''ll take our original buffer and compare it to another one initialized
    with the original base64 for the first message:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将我们的原始缓冲区与另一个用原始base64初始化的缓冲区进行比较，这是为了第一个消息：
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How it works…
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The first line of the code includes the `buffertools` module, which extends
    the `Buffer` interface. This is only necessary because I want to use buffer tools's
    `Buffer.compare` method in the last line; it's not necessary for `base64` to decode
    itself.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的第一行包含了`buffertools`模块，它扩展了`Buffer`接口。这只是为了在最后一行使用缓冲区工具的`Buffer.compare`方法，不是因为base64需要自我解码。
- en: The next two lines create a `Buffer` object and obtain its `base64` representation,
    which the following line logs to the console.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的两行创建了一个`Buffer`对象并获取其`base64`表示，接下来的行将这个表示输出到控制台。
- en: Finally, I create a second `Buffer` object, initializing it with some base64
    data, passing base64 to indicate that the initialization data should be decoded
    into the buffer. I compare these two buffers on the last line. Note that the buffer
    tool's `compare` method is an ordinal compare, meaning that it returns 0 if both
    buffers contain the same data, -1 if the first contains an ordinal sort less than
    the data, and 1 if the first contains data that would be ordinally sorted as greater.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我创建了第二个`Buffer`对象，用一些base64数据初始化它，传递base64以表示初始化数据应该被解码到缓冲区中。我在最后一行比较这两个缓冲区。注意，缓冲区工具的`compare`方法是一个序数比较，意味着如果两个缓冲区包含相同的数据，它返回0，如果第一个包含小于数据的序数排序，它返回-1，如果第一个包含序数排序更大的数据，它返回1。
- en: See also
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 也见
- en: For information about the `buffertools` module and its implementation, see [https://github.com/bnoordhuis/node-buffertools#](https://github.com/bnoordhuis/node-buffertools#).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 关于`buffertools`模块及其实现的信息，请参阅[https://github.com/bnoordhuis/node-buffertools#](https://github.com/bnoordhuis/node-buffertools#)。
- en: Encoding and decoding binary data as a base64 string using JavaScript in the
    browser
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在浏览器中使用JavaScript对二进制数据进行base64字符串编码
- en: The base implementation of JavaScript does not include base64 encoding or decoding.
    However, all modern browsers include the `atob` and `btoa` methods to decode and
    encode base64 data respectively. These are methods of the window object, defined
    by the JavaScript runtime.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript的基本实现不包括base64编码或解码。然而，所有现代浏览器都包括了`atob`和`btoa`方法来分别解码和编码base64数据。这些方法是window对象的方法，由JavaScript运行时定义。
- en: How to do it…
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到…
- en: 'It''s as easy as a method call:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是方法调用的简单：
- en: '[PRE3]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How it works…
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The `btoa` function takes a string and returns the base64 encoding of that string.
    It's a method of the window object and calls to native browser code. The `atob`
    function does the reverse, taking a string containing base64 and returning a string
    with the binary data.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`btoa`函数接收一个字符串并返回该字符串的base64编码。它是window对象的方法，并调用原生浏览器代码。`atob`函数做相反的事情，接收一个包含base64的字符串并返回一个包含二进制数据的字符串。'
- en: See also
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 也见
- en: For a summary of `btoa` and `atob`, see the Mozilla developer website at [https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding](https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding)
    (note that while the documentation is from Mozilla, these methods of `window`
    are defined by most modern browsers).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 关于`btoa`和`atob`的总结，请参阅Mozilla开发者网站上的[https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding](https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding)（注意虽然这些文档来自Mozilla，但这些`window`的方法由大多数现代浏览器定义）。
- en: Encoding data as BSON using Json.NET
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Json.NET对数据进行BSON编码
- en: BSON encoding is a reasonable alternative to JSON if you have an implementation
    of an encoder and decoder on each side of the connection. Unfortunately, there's
    no good encoder and decoder available yet for JavaScript, but there are implementations
    for a number of other platforms, including .NET and C++. Let's look at how to
    encode a class using BSON with Json.NET in C#.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: BSON编码是如果你在连接的每一边都有一个编码器和解码器的实现，那么它是JSON的一个合理替代方案。不幸的是，目前还没有适合JavaScript的好编码器和解码器，但是有包括.NET和C++在内的许多其他平台上的实现。让我们看看如何使用Json.NET在C#中对BSON进行编码。
- en: Getting ready
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备开始
- en: First, you'll need to have the Json.NET assembly available to your application.
    As you saw in the last chapter, in the recipe *How to deserialize an object using
    Json.NET*, the easiest way to do this is with NuGet. If you haven't already, add
    the Json.NET assembly to your solution using the steps in that recipe.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要让你的应用程序能够访问Json.NET程序集。正如你在上一章中看到的，在食谱*如何使用Json.NET反序列化一个对象*中，最容易的方法是使用NuGet。如果你还没有这么做，按照那个食谱的步骤将Json.NET程序集添加到你的解决方案中。
- en: How to do it…
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到…
- en: 'Using Json.NET to encode BSON is fairly simple, once you have a class you want
    to encode:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Json.NET来编码BSON相对简单，一旦你有了想要编码的类：
- en: '[PRE4]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: How it works…
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: It's easiest to start with a class that has the fields that you want to convert,
    defined, as you'd do for other type-safe conversions from JSON. Here, we define
    a simple `Record` class for this purpose and then create a record to encode.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 最容易的方法是从一个具有你想要转换的场的类开始，正如你为其他类型的JSON安全转换所做的那样。在这里，我们为了这个目的定义了一个简单的`Record`类，然后创建一个记录来编码。
- en: Next, we create `MemoryStream` to contain the encoded data, and a `BsonWriter`
    object to do the writing to the memory stream. Of course, anything that implements
    the .NET streaming interface will work with the `BsonWriter` instance; you could
    write to a file instead if you preferred. After that, we create an actual serializer
    to do the work, an instance of `JsonSerializer`, and use it to serialize the record
    we created using the writer itself. We wrap the actual serialization in a using
    block, so that at the end of the operation, the resources used by the writer (but
    not the stream) are immediately cleaned up by the .NET runtime.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们创建一个`MemoryStream`来包含编码后的数据，以及一个`BsonWriter`对象来将数据写入内存流。当然，任何实现.NET流接口的东西都可以与`BsonWriter`实例一起使用；如果你愿意，你可以写入文件而不是内存流。在那之后，我们创建一个实际的序列化器来完成工作，`JsonSerializer`的一个实例，并使用它本身来序列化我们使用编写器创建的记录。我们将实际的序列化包裹在一个using块中，这样在操作结束时，写入器使用的资源（但不是流）会立即被.NET运行时清理。
- en: See also
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见 also
- en: Documentation for the BsonWriter class is available from NewtonSoft at [http://www.newtonsoft.com/json/help/html/T_Newtonsoft_Json_Bson_BsonWriter.htm](http://www.newtonsoft.com/json/help/html/T_Newtonsoft_Json_Bson_BsonWriter.htm).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 关于BsonWriter类的文档可以从NewtonSoft处获得，网址为[http://www.newtonsoft.com/json/help/html/T_Newtonsoft_Json_Bson_BsonWriter.htm](http://www.newtonsoft.com/json/help/html/T_Newtonsoft_Json_Bson_BsonWriter.htm)。
- en: Decoding data from BSON using Json.NET
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Json.NET从BSON中解码数据
- en: Using Json.NET, decoding BSON is the opposite of encoding; given a class that
    describes the data to decode and a blob of binary data, invoke a reader to read
    the data.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Json.NET，解码BSON与编码相反；给定一个描述要解码数据的类和一个二进制数据块，调用一个读取器来读取数据。
- en: Getting ready
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备开始
- en: Of course, you need a reference to the Json.NET assembly in your project in
    order to do this. See recipe *How to Deserialize an object using Json.NET* in
    [Chapter 7](ch07.html "Chapter 7. Using JSON in a Type-safe Manner"), *Using JSON
    in a Type-safe Manner*, to learn how to add a reference to Json.NET in your application
    using NuGet.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，为了做到这一点，你需要在你项目中有一个Json.NET程序集的引用。参见第7章*使用类型安全的方式使用JSON*中的食谱*如何使用Json.NET反序列化一个对象*，了解如何使用NuGet在你的应用程序中添加Json.NET的引用。
- en: How to do it…
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到…
- en: 'Starting with a stream, you''ll use a `BsonReader` with a `JsonSerializer`
    to deserialize the BSON. Assuming data is `byte[]` of BSON data:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 从一个流开始，你将使用`BsonReader`和`JsonSerializer`来反序列化BSON。假设数据是BSON数据的`byte[]`：
- en: '[PRE5]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How it works…
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: We create `MemoryStream` from the incoming data, which we use with `BsonReader`
    to actually read the data from the stream. The reading is done by the `JsonSerializer`,
    which deserializes using the reader into a new instance of the `Record` class.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从传入的数据中创建`MemoryStream`，然后使用`BsonReader`实际从流中读取数据。读取工作由`JsonSerializer`完成，它使用读取器将数据反序列化为`Record`类的新实例。
- en: There's more…
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: You may not have a class that represents the data you deserialize in your application;
    that's often the case early in development, when you're still defining the semantics
    of your data transfer. You can use the `Deserialize` method to deserialize a `JsonObject`
    instance, and then use the JsonObject's interface to obtain individual field values.
    For information about `JsonObject`, see the Json.NET documentation at [http://www.newtonsoft.com/json/help/html/T_Newtonsoft_Json_JsonObjectAttribute.htm](http://www.newtonsoft.com/json/help/html/T_Newtonsoft_Json_JsonObjectAttribute.htm).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能没有代表反序列化数据的类的应用；这在开发初期很常见，当时你仍在定义数据传输的语义。你可以使用`Deserialize`方法反序列化一个`JsonObject`实例，然后使用`JsonObject`的接口获取各个字段值。关于`JsonObject`的信息，请参阅Json.NET文档[http://www.newtonsoft.com/json/help/html/T_Newtonsoft_Json_JsonObjectAttribute.htm](http://www.newtonsoft.com/json/help/html/T_Newtonsoft_Json_JsonObjectAttribute.htm)。
- en: See also
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The documentation for `BsonReader` from NewtonSoft is at [http://www.newtonsoft.com/json/help/html/T_Newtonsoft_Json_Bson_BsonReader.htm](http://www.newtonsoft.com/json/help/html/T_Newtonsoft_Json_Bson_BsonReader.htm).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`BsonReader`的文档在[http://www.newtonsoft.com/json/help/html/T_Newtonsoft_Json_Bson_BsonReader.htm](http://www.newtonsoft.com/json/help/html/T_Newtonsoft_Json_Bson_BsonReader.htm)。'
- en: Using a DataView to access an ArrayBuffer
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`DataView`访问`ArrayBuffer`
- en: Sometimes, you don't want to work with JSON at all, but instead with pure binary
    data. JavaScript provides the `DataView` abstraction, which lets you perform typed
    accesses on an array buffer of memory, such as one obtained from an `XMLHttpRequest`
    object.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，你不想与JSON一起工作，而是想与纯二进制数据一起工作。JavaScript提供了`DataView`抽象，它让你可以在一个数组缓冲区的内存上进行类型化的访问，比如从一个`XMLHttpRequest`对象获得的内存。
- en: Getting ready
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备中
- en: To begin, you need your data in an `ArrayBuffer`, such as the one returned by
    the `XMLHttpRequest` object. With this, you can create a `DataView`, and then
    using that `DataArray`, create a typed array over the data view to extract just
    the bytes that you're interested in. Let's see an example.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 开始之前，你需要你的数据在一个`ArrayBuffer`中，比如`XMLHttpRequest`对象返回的那个。有了这个，你可以创建一个`DataView`，然后使用那个`DataArray`，在数据视图上创建一个类型数组，以提取你感兴趣的字节。让我们看一个例子。
- en: How to do it…
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到…
- en: 'Here''s a simple example:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的示例：
- en: '[PRE6]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How it works…
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The first thing to notice is `responseType` of the `XMLHttpRequest` object.
    In this example, we're setting it to `arraybuffer`, indicating that we want a
    raw buffer of bytes back represented as an instance of the `ArrayBuffer` class.
    We make the request, and on the done handler, create `DataView` of the response.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要注意到的是`XMLHttpRequest`对象的`responseType`。在这个例子中，我们将它设置为`arraybuffer`，表示我们想要一个以`ArrayBuffer`类实例表示的原始字节缓冲区。我们发起请求，在完成处理程序上创建`DataView`的响应。
- en: The `DataView` is an abstraction object from which we can create different views
    to read and write the binary data to and from the `ArrayBuffer` object.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`DataView`是一个抽象对象，从这个对象中我们可以创建不同的视图来读写`ArrayBuffer`对象中的二进制数据。'
- en: '`DataView` supports viewing `ArrayBuffer` objects as any of the following:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`DataView`支持将`ArrayBuffer`对象视为以下内容：'
- en: '`Int8Array`: This is an 8-bit two''s complement signed integer array'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Int8Array`: 这是一个8位补码有符号整数数组'
- en: '`Uint8Array`: This is an 8-bit unsigned integer array'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Uint8Array`: 这是一个8位无符号整数数组'
- en: '`Int16Array`: This is a 16-bit two''s complement signed integer array'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Int16Array`: 这是一个16位补码有符号整数数组'
- en: '`Uint16Array`: This is a 16-bit unsigned integer array'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Uint16Array`: 这是一个16位无符号整数数组'
- en: '`Int32Array`: This is a 32-bit two''s complement signed integer array'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Int32Array`: 这是一个32位补码有符号整数数组'
- en: '`Uint32Array`: This is a 32-bit unsigned integer array'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Uint32Array`: 这是一个32位无符号整数数组'
- en: '`Float32Array`: This is a 32-bit floating point number array'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Float32Array`: 这是一个32位浮点数数组'
- en: '`Float64Array`: This is a 64-bit floating point number array'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Float64Array`: 这是一个64位浮点数数组'
- en: In addition to constructing one of these arrays from a `DataView`, you can also
    access individual 8-bit, 16-bit, 32-bit integers, or 32-bit or 64-bit floats from
    a `DataView`, using a corresponding getter function, passing the offset to the
    number you want to get. For example, `getInt8` returns `Int8` at the location
    you specify, while `getFloat64` gets the corresponding 64-bit floating point number
    at the offset you specify.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 除了从一个`DataView`构造这些数组之外，你还可以从一个`DataView`访问单个8位、16位、32位整数或32位或64位浮点数，使用相应的获取函数，传递你想获取的偏移量。例如，`getInt8`返回指定位置的`Int8`，而`getFloat64`获取你指定偏移量处的相应的64位浮点数。
- en: See also
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: Although `ArrayBuffer` and `DataView` aren't specific to Microsoft Internet
    Explorer, the documentation at Microsoft's MSDN site is very clear. See [https://msdn.microsoft.com/en-us/library/br212463(v=vs.94).aspx](https://msdn.microsoft.com/en-us/library/br212463(v=vs.94).aspx)
    for information about the `DataView` methods, or see [https://msdn.microsoft.com/library/br212485(v=vs.94).aspx](https://msdn.microsoft.com/library/br212485(v=vs.94).aspx)
    for an overview of typed arrays in general.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 `ArrayBuffer` 和 `DataView` 并不仅限于 Microsoft Internet Explorer，但 Microsoft
    的 MSDN 网站上的文档非常清晰。有关 `DataView` 方法的信息，请参阅 [https://msdn.microsoft.com/en-us/library/br212463(v=vs.94).aspx](https://msdn.microsoft.com/en-us/library/br212463(v=vs.94).aspx)，或者参见
    [https://msdn.microsoft.com/library/br212485(v=vs.94).aspx](https://msdn.microsoft.com/library/br212485(v=vs.94).aspx)
    以获取关于类型数组的概述。
- en: Encoding and decoding base64 using an ArrayBuffer
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 ArrayBuffer 进行 base64 编码和解码
- en: If you're going to use `ArrayBuffer` and `DataView` for your binary data and
    carry binary data as base64 strings, you can use the Mozilla-written functions
    at [https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#Solution_.232_.E2.80.93_rewriting_atob%28%29_and_btoa%28%29_using_TypedArrays_and_UTF-8](https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#Solution_.232_.E2.80.93_rewriting_atob%28%29_and_btoa%28%29_using_TypedArrays_and_UTF-8)
    to do so. They provide the functions `strToUTF8Arr` and `UTF8ArrToStr` to perform
    UTF-8 encoding and decoding, as well as `base64EncArr` and `base64DecToArr` to
    convert between base64 strings and array buffers.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打算使用 `ArrayBuffer` 和 `DataView` 为你 的二进制数据，并将二进制数据作为 base64 字符串携带，你可以使用由 Mozilla
    编写的函数，位于 [https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#Solution_.232_.E2.80.93_rewriting_atob%28%29_and_btoa%28%29_using_TypedArrays_and_UTF-8](https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#Solution_.232_.E2.80.93_rewriting_atob%28%29_and_btoa%28%29_using_TypedArrays_and_UTF-8)
    进行如此操作。他们提供了 `strToUTF8Arr` 和 `UTF8ArrToStr` 函数来执行 UTF-8 编码和解码，以及 `base64EncArr`
    和 `base64DecToArr` 函数来在 base64 字符串和数组缓冲区之间进行转换。
- en: How to do it…
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到…
- en: 'Here''s an interconversion example that encodes a text string as UTF-8, then
    converts the text into base64, then shows the base64 results, and finally converts
    the base64 to `ArrayBuffer` of UTF-8 data before converting the UTF-8 back to
    a regular character string:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个相互转换示例，它将文本字符串编码为 UTF-8，然后将文本转换为 base64，然后显示 base64 结果，最后将 base64 转换为 UTF-8
    数据的 `ArrayBuffer`，然后再将 UTF-8 转换回普通字符串：
- en: '[PRE7]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: How it works…
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'Mozilla defines four functions in the file on their website:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: Mozilla 在他们的网站文件中定义了四个函数：
- en: The `base64EncArr` function encodes `ArrayBuffer` of bytes as a base64 string
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`base64EncArr` 函数将字节 `ArrayBuffer` 编码为 base64 字符串'
- en: The `base64DecToArr` function decodes a base64 string to `ArrayBuffer` of bytes
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`base64DecToArr` 函数将 base64 字符串解码为字节 `ArrayBuffer`'
- en: The `strToUTF8Arr` function encodes a string as an array of UTF-8 encoded characters
    in `ArrayBuffer`
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`strToUTF8Arr` 函数将字符串编码为 `ArrayBuffer` 中的 UTF-8 编码字符数组'
- en: The `UTF8ArrToStr` function takes `ArrayBuffer` of UTF-8 encoded characters
    and returns the string it encodes
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UTF8ArrToStr` 函数接受 `ArrayBuffer` 中的 UTF-8 编码字符数组，并返回它所编码的字符串'
- en: Compressing object-body content from a Node.js server built using the express
    module
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 压缩 Node.js 服务器中使用 express 模块构建的对象体内容
- en: If space is your primary concern when using JSON that has you considering a
    binary representation, you should seriously consider using compression instead.
    Compression can yield similar savings to a binary representation, it is implemented
    with `gzip` in most servers and HTTP clients, and can be added as a transparent
    layer after you've finished debugging your application. Here, we discuss adding
    object-body compression for JSON and other objects sent by the popular express
    server built on top of Node.js with the express module.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在使用 JSON 时有空间方面的主要考虑，让你在考虑二进制表示时，你应该认真考虑使用压缩。压缩可以带来与二进制表示相似的节省，在大多数服务器和 HTTP
    客户端中使用 `gzip` 实现，并且可以在调试完你的应用程序后作为透明层添加。在这里，我们讨论为流行的基于 Node.js 的 express 服务器发送的
    JSON 和其他对象添加对象体压缩。
- en: Getting ready
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备好了
- en: 'First, you need to make sure you''ve installed the express and compress modules:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要确保已经安装了 express 和 compress 模块：
- en: '[PRE8]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: You could also `npm install –g` it, if you want it to be available to all Node.js
    applications in your workspace.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要它在你的工作区中的所有 Node.js 应用程序中可用，你也可以 `npm install –g` 它。
- en: How to do it…
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到…
- en: 'When initializing your `express` module in your server''s entry point, require
    compression, and tell `express` to use it:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在你服务器的入口点初始化 `express` 模块时，需要 require 压缩，并告诉 `express` 使用它：
- en: '[PRE9]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: For more information on using `express` module to set up a server, see the recipe
    "Installing the express module for Node.js" in [Chapter 5](ch05.html "Chapter 5. Using
    JSON with MongoDB"), *Using JSON with MongoDB*.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 关于如何使用`express`模块来设置服务器的更多信息，请参阅[第5章](ch05.html "第5章 使用JSON与MongoDB")中的菜谱“为Node.js安装express模块”，*使用JSON与MongoDB*.
- en: How it works…
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: HTTP headers support the client indicating whether or not it can decompress
    object bodies sent over HTTP, and modern browsers all accept `gzipped` object
    bodies. By including compress in your server built on express, you make it possible
    for clients to request compressed JSON as part of their web API requests, and
    receive compressed JSON in response. No change is necessary in most cases for
    most clients, although if you're writing a native client with your own HTTP implementation,
    you may need to check the documentation to determine how to enable `gzip` decompression
    over HTTP.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP头支持客户端指示它是否能够解压缩通过HTTP发送的对象体，并且现代浏览器都接受`gzipped`对象体。通过在基于express的服务器中包含compress，你使得客户端可以请求压缩后的JSON作为其Web
    API请求的一部分，并且响应中也返回压缩后的JSON。在大多数情况下，大多数客户端不需要进行任何更改，尽管如果你正在编写带有自己HTTP实现的本地客户端，你可能需要查阅文档以确定如何通过HTTP启用`gzip`解压缩。
- en: The code begins by requiring the express module and compression module, and
    then configures the express module to optionally use compression if it's requested
    by the client when sending responses.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 代码首先需要引入express模块和压缩模块，然后配置express模块，在客户端请求压缩时，可选地使用压缩功能来发送响应。
