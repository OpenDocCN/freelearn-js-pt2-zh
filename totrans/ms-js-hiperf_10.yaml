- en: Chapter 10. Application Performance Testing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章。应用性能测试
- en: In this book, we've covered various ways of increasing our JavaScript's application
    performance at different stages of a project's life cycle. This includes activities
    ranging from choosing a proper editor at various stages in a project's lifespan,
    incorporating JavaScript linters to help proof our JavaScript before deployment
    to using build systems, and creating a deployment package or build separating
    final code from the developer-friendly code base.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我们已经介绍了各种增加JavaScript应用程序性能的方法，这些方法贯穿于项目生命周期的不同阶段。这包括从在项目生命周期的各个阶段选择合适的编辑器，将JavaScript检测器整合到帮助我们证明在部署前JavaScript的活动中，使用构建系统，以及创建部署包或构建，将最终代码与开发者友好的代码库分离。
- en: The real secret in crafting high performing JavaScript is not the amount of
    JavaScript knowledge in our heads, but knowing the key "pain points" of the language
    itself; some of these pain points are the `for` loops, object creation, not incorporating
    strict operators, timers, and so on. Moreover, this category also includes incorporating
    these tools to better check our code before it is deployed.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 编写高性能JavaScript的真正秘诀不在于我们头脑中的JavaScript知识量，而在于了解语言本身的“痛点”；其中一些痛点包括`for`循环、对象创建、不包含严格操作符、定时器等。此外，这一类别还包括将这些工具整合到我们的代码中，以便在部署之前更好地检查代码。
- en: Like all major web application projects, there is always some form of pre-flight
    check here, a final list of to-dos before a web application goes live. If we incorporate
    the tools covered in this book to this point, our JavaScript should be solid enough
    for deployment. But here, we will take it one step further.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 与所有主要网络应用程序项目一样，这里总是有一些形式的预飞检查，即一个最终的待办事项列表，在一个网络应用程序上线之前。如果我们到目前为止已经涵盖了本书中介绍的工具，我们的JavaScript应该足够稳定以供部署。但是在这里，我们将再进一步。
- en: 'In this chapter, we are going to take a look at **Jasmine**, a JavaScript testing
    framework that will allow us to test our code in ways we haven''t realized yet.
    Unlike past linter tools such as, JSLint, these tests will rely on an application''s
    property types, and also on a concept we have yet to cover: unit testing in JavaScript.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨**Jasmine**，一个允许我们以我们还未意识到的方式测试代码的JavaScript测试框架。与过去的线性检测工具（如JSLint）不同，这些测试将依赖于应用程序的属性类型，也依赖于我们尚未介绍的概念：JavaScript中的单元测试。
- en: 'In short, we will be covering the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，我们将涵盖以下主题：
- en: What is unit testing in JavaScript?
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是JavaScript中的单元测试？
- en: Unit testing with Jasmine
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Jasmine进行单元测试
- en: What is unit testing in JavaScript?
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是JavaScript中的单元测试？
- en: Unit testing, simply put, is an application framework or toolset designed to
    test JavaScript or the code of any other programming languages in a specific way
    that's unique to any application. Unit tests typically cover error checking that
    doesn't exist inside standard linters. They are designed to check for application-specific
    errors. In other programming languages, unit tests are typically designed to check
    a project's classes and models, and to ensure that applications are running efficiently
    and correctly.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试，简单来说，是一种应用程序框架或工具集，旨在以独特的方式测试JavaScript或其他任何编程语言的代码。单元测试通常涵盖标准线性检测器中不存在的错误检查。它们被设计用来检查特定于应用程序的错误。在其他编程语言中，单元测试通常被设计用来检查项目的类和模型，以确保应用程序运行高效且正确。
- en: Now JavaScript and unit-testing practices have never been associated well with
    one another, primarily due to the dynamic nature of JavaScript. Some factors that
    hamper their association include the many mistakes created unknowingly by developers,
    passing wrong values to variables that shouldn't have specific variable type,
    assigning a string when an application's object property requires a number, and
    so on.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，JavaScript和单元测试实践从未被很好地联系在一起，这主要是由于JavaScript的动态性质。阻碍它们联系的因素包括开发人员无意中创建的许多错误，将错误的值传递给不应该有特定变量类型的变量，当应用程序的对象属性需要数字时分配一个字符串，等等。
- en: Moving forward, however, for client-side applications using JavaScript, whether
    they're on the web in a web browser or hosted inside a mobile app's web view,
    testing becomes more and more necessary. Now there are dozens of frameworks out
    there designed for JavaScript testing, but here, I will cover one in particular
    called Jasmine. Keep in mind that there are alternative testing frameworks such
    as Mocha or QUnit, but we will cover Jasmine as it doesn't require third-party
    frameworks to run.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，对于使用 JavaScript 的客户端应用程序，无论它们是在网页浏览器中的网页上，还是在移动应用程序的网页视图中托管，测试变得越来越必要。现在有数十个针对
    JavaScript 测试设计的框架，但在这里，我将介绍一个特别名为 Jasmine 的框架。请记住，还有其他测试框架，如 Mocha 或 QUnit，但我们将介绍
    Jasmine，因为它不需要第三方框架即可运行。
- en: Unit testing with Jasmine
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jasmine 的单元测试
- en: Jasmine is a JavaScript unit-testing framework; it allows us to write JavaScript
    without relying on external libraries such as jQuery. This is helpful for an application
    that requires a very tiny footprint in memory such as our JavaScript application
    in iOS, discussed in [Chapter 9](ch09.html "Chapter 9. Optimizing JavaScript for
    iOS Hybrid Apps"), *Optimizing JavaScript for iOS Hybrid Apps*. It also restricts
    the code to the code we've written, and there's no bug due to a framework in a
    current build of another vendor's library.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Jasmine 是一个 JavaScript 单元测试框架；它允许我们编写不依赖于外部库（如 jQuery）的 JavaScript。这对于需要非常小的内存占用的应用程序很有帮助，例如我们在[第
    9 章](ch09.html "第 9 章. 为 iOS 混合应用程序优化 JavaScript")中讨论的 iOS 上的 JavaScript 应用程序，*为
    iOS 混合应用程序优化 JavaScript*. 它还限制了代码仅限于我们编写的代码，并且由于当前构建的另一个供应商库中的框架而没有错误。
- en: Installation and configuration
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装和配置
- en: 'Jasmine can be installed in various ways; we can use node package manager or
    NPM similar to how we structure our Gulp.js build system in [Chapter 3](ch03.html
    "Chapter 3. Understanding JavaScript Build Systems"), *Understanding JavaScript
    Build Systems*. But, to get our feet wet with testing in general, we are going
    to download the standalone version of the framework. I will be using version 2.1.3,
    which is the latest stable release of the framework and can be found at [https://github.com/jasmine/jasmine/releases](https://github.com/jasmine/jasmine/releases).
    To download, click the green `.zip` file button shown here on the Jasmine framework''s
    Github page:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Jasmine 可以通过多种方式安装；我们可以使用 node 包管理器或 NPM，这与我们在[第 3 章](ch03.html "第 3 章. 理解 JavaScript
    构建系统")中构建我们的 Gulp.js 构建系统的结构类似，*理解 JavaScript 构建系统*. 但是我们首先需要下载该框架的独立版本。我将使用版本
    2.1.3，这是框架的最新稳定版本，可以在 [https://github.com/jasmine/jasmine/releases](https://github.com/jasmine/jasmine/releases)
    找到。要下载，请点击 Jasmine 框架 GitHub 页面上的绿色 `.zip` 文件按钮，如下所示：
- en: '![Installation and configuration](img/7296OS_10_01.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![安装和配置](img/7296OS_10_01.jpg)'
- en: 'Once we download the standalone version of Jasmine, we can check to see if
    it is working; the standalone version includes some sample JavaScript that''s
    been set up with some unit tests. To run a set of unit tests in Jasmine, we will
    need to structure a `SpecRunner` page. A `SpecRunner` is a Jasmine-specific HTML
    page displaying the unit test results. If we open up the standalone versions `SpecRunner.html`
    file in our browser, we should see the example test results demonstrating all
    tests that have passed, as shown in the following screenshot:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们下载了 Jasmine 的独立版本，我们可以检查它是否可以正常工作；独立版本包含一些已经设置好单元测试的示例 JavaScript。要运行 Jasmine
    中的单元测试集，我们需要构建一个 `SpecRunner` 页面。`SpecRunner` 是一个显示单元测试结果的 Jasmine 特定 HTML 页面。如果我们打开独立版本的
    `SpecRunner.html` 文件在浏览器中，我们应该看到以下屏幕截图所示的示例测试结果，演示了所有已通过的测试：
- en: '![Installation and configuration](img/7296OS_10_02.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![安装和配置](img/7296OS_10_02.jpg)'
- en: Before setting up a test, we will need to test some code. I've created a bit
    of JavaScript that is object oriented and relies heavily on specific JavaScript
    types, such as numbers and Booleans, which are used throughout the application.
    The application is a very simple banking application that returns customer data
    to a simple HTML page, but it is structured enough to resemble a large application.
    We are going to use Jasmine to check for types, ensure that the data being passed
    in is valid, and the verify the application is outputting customer data as it
    should.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置测试之前，我们需要测试一些代码。我创建了一些面向对象的 JavaScript，它严重依赖于特定的 JavaScript 类型，例如数字和布尔值，这些类型在整个应用程序中都有使用。该应用程序是一个非常简单的银行应用程序，它将客户数据返回给一个简单的
    HTML 页面，但它结构足够复杂，类似于大型应用程序。我们将使用 Jasmine 来检查类型，确保传递的数据有效，并验证应用程序正在按照预期输出客户数据。
- en: Reviewing the project code base
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 审查项目代码库
- en: We will use the following code sample for the project. Take a moment and look
    through the code shown here. As always, all code samples for this book are available
    on Packt Publishing's website too.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用以下代码样本进行项目。花点时间看看这里展示的代码。像往常一样，本书中所有的代码样本都可以在Packt Publishing的网站上找到。
- en: '![Reviewing the project code base](img/7296OS_10_03.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![审查项目代码库](img/7296OS_10_03.jpg)'
- en: We have quite a bit of code here to test, but there's no need to worry about
    that! Let's review this slowly before we start using Jasmine. On lines 1 through
    7, we have a JavaScript enumeration for a gender type allowing us to predefine
    values for a customer type. In this example, the values are either `Male`, `Female`,
    or `Alien`. Starting on line number 10 is our `BankDB` object (also considered
    a JavaScript class); now this isn't really a database, but it could very well
    be connected to one in a real application.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们这里有很多代码要测试，但不必担心！在我们开始使用Jasmine之前，让我们慢慢回顾一下。在第1至7行，我们有一个JavaScript枚举类型，用于性别类型，允许我们预定义客户类型的值。在这个例子中，值可以是`Male`、`Female`或`Alien`。从第10行开始是我们的`BankDB`对象（也被认为是JavaScript类）；这实际上不是一个数据库，但在实际应用程序中它可能与一个数据库相连。
- en: The `BankDB` function is an instance-based object, meaning it requires a specific
    type of parameter in order for it to function, that we can find on line 56 called
    `newCustomer`. This JavaScript object contains a JavaScript object notation, which
    assigns values to a new customer entry. Think of this as a bit of JSON being returned
    by a clerk while using the system.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`BankDB`函数是一个基于实例的对象，意味着它需要特定类型的参数才能正常工作，我们可以在第56行的`newCustomer`中找到该参数。这个JavaScript对象包含了一个JavaScript对象表示法，为新的客户条目分配值。可以把这个看作是收银员在使用系统时返回的一小部分JSON。'
- en: Finally, on lines 66 through 72, we create the request with that user's data,
    and then append the data to the embedded web page's `document.body` statement
    with a bit of light styling and formatting.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在第66至72行，我们使用该用户的数据创建请求，然后将数据附加到内嵌网页的`document.body`语句中，并进行了一些轻微的样式和格式化。
- en: 'Before we start writing our tests, let''s look at this in a self-contained
    page. I''ll add this to an empty HTML page just before the closing `body` tag.
    Let''s open the page and look at the results, which resemble the following screenshot:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始编写测试之前，让我们在一个自我包含的页面中查看这个。我在关闭`body`标签之前的空HTML页面中添加这个。打开页面并查看结果，如下屏幕快照所示：
- en: '![Reviewing the project code base](img/7296OS_10_04.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![审查项目代码库](img/7296OS_10_04.jpg)'
- en: As we can see, our application is displaying all the correct information except
    the customer's name, which is showing as `Mr. e`, rather than `Mr. Leonard Adams`
    as indicated back on line 58 of our `10_01.js` file. Also, notice that, in our
    Chrome **Developer tools** option, we are not receiving any errors, and not really
    seeing much of a performance lag either. Nevertheless, we do know by the output
    of the customer's name that something is wrong. To correct this, we will unit-test
    our application.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，我们的应用程序显示了所有正确信息，除了客户名显示为`Mr. e`，而不是在`10_01.js`文件的58行指示的`Mr. Leonard
    Adams`。同时，注意在我们的Chrome**开发者工具**选项中，我们没有收到任何错误，也没有真正的性能延迟。尽管如此，通过客户名的输出我们知道有些问题。为纠正此问题，我们将对应用程序进行单元测试。
- en: Reviewing an application's spec for writing tests
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 审查应用程序的规格以编写测试
- en: When writing unit tests, there need to be well-defined instructions for writing
    the tests; in the case of the code sample shown in the previous screenshot, we
    want to ensure that our tests follow a few rules and, to help us write these tests,
    we'll use the rules listed in the following table with our code.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 编写单元测试时，需要有明确的指导方针来编写测试；在前一个屏幕快照中显示的代码样本的情况下，我们想要确保我们的测试遵循几条规则，为了帮助我们编写这些测试，我们将使用下面表格中列出的规则和我们的代码。
- en: 'Consider the following list as an application specification, or documentation
    based on which the application should be built. Let''s look at the table and see
    what our code should be doing with the data being used:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下列表作为应用程序规格，或基于此构建应用程序的文档。让我们看看表格和我们的代码应该如何处理使用中的数据：
- en: '| Test Number | Test Description |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| 测试编号 | 测试描述 |'
- en: '| --- | --- |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Test #1 | New Customer data test:`Customer''s ID should be a number.` |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '![审查项目代码库](img/7296OS_10_03.jpg)'
- en: '| Test #2 | New Customer data test:`Customer''s name should be in an array
    object, (ex [''FirstName'', ''LastName'']).` |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| 第二测试 | 新客户数据测试：`客户名应位于数组对象中，（例如[''FirstName'', ''LastName'']）。` |'
- en: '| Test #3 | New Customer data test:`Customer''s bank balance should be a number.`
    |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '```'
- en: '| Test #4 | New Customer data test:`Customer''s city name should be a string.`
    |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '```'
- en: '| Test #5 | New Customer data test:`Customer''s gender should be a number.`
    |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '```'
- en: '| Test #6 | New Customer data test:`Customer''s marriage status is a boolean.`
    |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '```'
- en: 'According to this list, we need our data values to pass these six tests in
    order to ensure that the JavaScript application is working properly. To do this,
    we will write a **spec** using Jasmine. In the Jasmine framework, a spec file
    is simply a JavaScript file with the JavaScript to be tested loaded into an HTML
    page that contains both the Jasmine testing framework and the file to be tested.
    Here, we can see what that combined page looks like; in Jasmine-based testing,
    it is typically called a `SpecRunner` page:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 根据这个列表，我们需要我们的数据值通过这六个测试，以确保JavaScript应用程序正常工作。为此，我们将使用Jasmine编写一个**spec**。在Jasmine框架中，spec文件就是一个加载了待测试JavaScript的JavaScript文件，该文件被加载到一个包含Jasmine测试框架和待测试文件的HTML页面中。在这里，我们可以看到这个组合页面的样子；在基于Jasmine的测试中，通常称之为`SpecRunner`页面：
- en: '[PRE0]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here, we can see the `SpecRunner.html` page and notice that we have the Jasmine
    frameworks loaded first in the head tag, followed by our test script shown earlier
    in the chapter called `Chapter_10_01.js`, which is then followed by our spec file
    named as `Chapter_10_01_Spec.js` for consistency.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到`SpecRunner.html`页面，并注意到我们在头部标签中首先加载了Jasmine框架，然后是我们在前一章节中提到的名为`Chapter_10_01.js`的测试脚本，其后是我们命名为`Chapter_10_01_Spec.js`的spec文件，以保持一致性。
- en: Note that if, we open our Chrome **Developer tools** in our `SpecRunner.html`
    page, we can see a few errors coming from our `10_01.js` file where we append
    the `document.body` statement with our customer data. JavaScript that uses the
    DOM may cause issues with Jasmine and any other JavaScript testing frameworks
    as well, so be sure to use application-specific code to test rather than a user
    interface code.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，如果我们打开Chrome的**开发者工具**在我们的`SpecRunner.html`页面中，我们可以看到来自我们的`10_01.js`文件的几个错误，我们在其中使用`document.body`语句附上客户数据。使用DOM的JavaScript可能会对Jasmine和其他JavaScript测试框架造成问题，因此请确保使用特定于应用程序的代码进行测试，而不是用户界面代码。
- en: Writing tests using Jasmine
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Jasmine编写测试
- en: In Jasmine, there are three keywords specific to the testing framework that
    we need to know. The first is `describe`; `describe` is like a class in testing.
    It groups our tests in one container to be referenced later. In the previous list
    from our application spec, we can use `New Customer data test` as our describe
    value.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在Jasmine中，有三个特定于测试框架的关键词我们需要知道。第一个是`describe`；`describe`在测试中就像一个类。它将我们的测试组织在一个容器中，以便稍后引用。在我们的应用程序规范的前一个列表中，我们可以将`New
    Customer data test`作为我们的`describe`值。
- en: The second keyword is `it`; `it` is a Jasmine function that takes two parameters,
    a string that we use as our test description. For example, one `it` test could
    contain a description such as `Customer's ID should be a number`. This tells the
    user reviewing the test what exactly we are testing for. The other parameter is
    a function where we can inject code or set up code if needed. Remember that all
    of this is being run in the same page, so if we would like to change any variables,
    or prototypes for a test, we can do that within this function before we run our
    test. Keep in mind that, while writing the test, we don't need to modify our code
    in order to test properly; this is done only in case we don't have a code sample
    for review.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个关键词是`it`；`it`是一个Jasmine函数，它接受两个参数，一个我们用作测试描述的字符串。例如，一个`it`测试可能包含一个描述，如`Customer's
    ID should be a number`。这告诉审查测试的用户我们到底在测试什么。另一个参数是一个函数，如果需要，我们可以在其中注入代码或设置代码。请记住，所有这些都在同一个页面中运行，所以如果我们想更改任何变量，或者为测试更改原型，我们可以在运行测试之前在这个函数中完成。请注意，在编写测试时，我们不需要修改代码以正确测试；这只有在没有代码样本供审查时才这样做。
- en: 'The last keyword to remember is `expect`; `expect` is a function specific to
    Jasmine that takes a value and compares it with some other value. In Jasmine,
    this is done using the `toEqual` function that is a part of the `expect` function.
    Think of each test as readable like this: `We expect the typeof newCustomer.customerID
    to equal a number`. Now this is pretty simple if we think about it, but what does
    that look like in a spec file? Well, if we look at the following screenshot, we
    can see our `Chapter_10_01Spec.js` file with each of the tests written ready for
    Jasmine:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 需要记住的最后一个关键字是`expect`；`expect`是Jasmine特有的函数，它接受一个值并与另一个值进行比较。在Jasmine中，这是通过`expect`函数的一部分，即`toEqual`函数来完成的。可以这样想每个测试：`我们期望newCustomer.customerID的typeof等于一个数字`。如果我们考虑一下，这实际上很简单，但是在规格文件中它会是什么样子呢？如果我们看下面的屏幕快照，我们可以看到我们的`Chapter_10_01Spec.js`文件，每个测试都为Jasmine而写：
- en: '![Writing tests using Jasmine](img/7296OS_10_05.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![使用Jasmine编写测试](img/7296OS_10_05.jpg)'
- en: Here, we can see how our tests are written; on line 2, we have our `describe`
    keyword that wraps our tests in a single container should we have a larger test
    file. All our tests from our documentation spec can be found with each `it` keyword;
    test number 1 is on line 4 and, on line 5, we have the first test's `expect` keyword
    checking the `newCustomers.CustomerID` type, where we expect a `number`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到我们的测试是如何编写的；在第2行，我们有我们的`describe`关键字，它将我们的测试包裹在一个容器中，如果我们有一个更大的测试文件。我们所有的测试，从我们的文档规格，都可以在每一个`it`关键字中找到；测试1在第4行，第5行我们有第一个测试的`expect`关键字检查`newCustomers.CustomerID`的类型，我们期望的是一个`number`。
- en: Note that the type being compared is using a string rather than number, as you
    would expect in a console. This is because `typeof`, the JavaScript keyword for
    returning the type of a variable or property, returns the type name using a string;
    so, in order to match it, we use strings with the type name here as well.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，被比较的类型使用的是字符串而不是数字，正如你会在控制台中所期望的那样。这是因为`typeof`，JavaScript关键字，用于返回变量的类型，它返回的是使用字符串的类型名；所以，为了与之匹配，我们在这里也使用带有类型名的字符串。
- en: 'We can see on subsequent lines that we''ve added the remaining tests using
    the same style of comparison for each of the other tests. With that done, let''s
    open the `SpecRunner.html` page; we can see how our tests did in the **Spec List**
    view in the following screenshot:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在随后的行中看到，我们使用相同的比较方式为其他每个测试添加了剩余的测试。完成后，让我们打开`SpecRunner.html`页面；我们可以在以下屏幕快照中查看我们的测试在**规格列表**视图中的表现：
- en: '![Writing tests using Jasmine](img/7296OS_10_06.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![使用Jasmine编写测试](img/7296OS_10_06.jpg)'
- en: Yikes! Three errors here, which is not good at all. Here, we were expecting
    a single error with the name of the customer not being displayed properly. But,
    our unit test has discovered that our application spec isn't being followed as
    it was written. In the Jasmine framework, this page layout is pretty common; on
    initial load, you will see a full error list. If you wish to see the list of all
    the tests that passed and failed, we can click **Spec List** at the top, and we
    will see the full list as shown in the preceding screenshot.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀！这里有三处错误，这可不是什么好事。在这里，我们期望只有一个错误，即客户名称显示不正确。但是，我们的单元测试发现我们的应用程序规格并没有按照它被写的那样执行。在Jasmine框架中，这个页面布局相当常见；在初始加载时，你会看到完整的错误列表。如果你想要看到所有通过和失败的测试列表，我们可以点击顶部的**规格列表**，我们将看到如前屏幕快照所示的完整列表。
- en: Tests that have failed here show up in red on your browser, and those that have
    passed show up in green. You may also see green circles and red Xs indicating
    how many tests passed and failed in both the **Failures** view and the **Spec
    List** view.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里失败的测试在浏览器中会显示为红色，成功的显示为绿色。你也可以看到绿色圆圈和红色X标记，这表明在**失败**视图和**规格列表**视图中通过了多少测试和失败了多少。
- en: Fixing our code
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修复我们的代码
- en: 'With our test code working now, we can modify it to ensure this works properly.
    For this, we will need to update the `10_01.js` file and the `newCustomer` data,
    which is on lines 56 through 63 in the `10_01.js` file. Let''s review what went
    wrong with our sample customer data:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的测试代码可以正常工作，我们可以修改它以确保它正常工作。为此，我们需要更新`10_01.js`文件和`newCustomer`数据，这在`10_01.js`文件的第56到63行。让我们回顾一下我们的示例客户数据出了什么问题：
- en: The first test that failed was 2, which required the customer's name to be created
    as an object array, with the first name as an array item followed by the last
    name as the second item in the object array
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个失败的测试是2，它要求将客户的名字创建为对象数组，第一个名字作为数组项，第二个名字作为对象数组的第二个项
- en: The second that failed was test 3, which required the `customerBalance` to be
    a type of number
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个失败的是测试3，它要求`customerBalance`是一个数字类型。
- en: The third error was test 6, which required the customer's marriage status to
    be a boolean and not a string
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三个错误是测试6，它要求客户的婚姻状况是一个布尔值而不是一个字符串。
- en: 'Let''s update our `newCustomer` data; you can see that I''ve done that in the
    following screenshot:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更新一下我们的`newCustomer`数据；你可以看到我在下面的截图中已经那样做了：
- en: '![Fixing our code](img/7296OS_10_07.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![修复我们的代码](img/7296OS_10_07.jpg)'
- en: 'Once we''ve updated the `newCustomer` information in our `10_01.js` file, we
    should be able rerun Jasmine and retest our code sample. If all tests pass, we
    will see the default **Spec List** showing all results in green; let''s reopen
    our page as shown in the following screenshot and see whether our tests pass:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们在`10_01.js`文件中更新了`newCustomer`信息，我们应该能够重新运行Jasmine并重新测试我们的代码样本。如果所有测试都通过，我们将看到默认的**规格列表**显示所有结果为绿色；让我们像下面截图中一样重新打开我们的页面，看看我们的测试是否通过：
- en: '![Fixing our code](img/7296OS_10_08.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![修复我们的代码](img/7296OS_10_08.jpg)'
- en: Nice, all six specs have passed! Great work! By ensuring that all our application's
    data is using the correct type, we can also ensure that our JavaScript application
    is not only performing well but also performing with a high degree of accuracy,
    as it was intended to be used.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 不错，所有的六个规格都通过了！工作做得很好！通过确保我们应用程序中的所有数据都使用了正确的类型，我们不仅可以确保我们的JavaScript应用程序运行良好，而且可以确保其运行具有高度的准确性，正如它被预期那样使用。
- en: 'When applications deviate from the developers, design, they can cause performance
    issues and affect the overall stability of the application. In Jasmine, we can
    see the completion time of the test; note that the performance on the final test
    is much faster than the one with errors. In the following screenshot, we have
    our final application page with no errors, as shown by **Developer tools** option
    in Chrome:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用程序偏离开发者的设计时，它们可能会导致性能问题并影响应用程序的整体稳定性。在Jasmine中，我们可以看到测试的完成时间；注意最后测试的性能比出错的那次要快得多。在下面的截图中，我们有最终的应用程序页面，没有错误，正如Chrome中的**开发者工具**选项所显示的那样：
- en: '![Fixing our code](img/7296OS_10_09.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![修复我们的代码](img/7296OS_10_09.jpg)'
- en: One final fact to note here is the different approaches that can be used by
    JavaScript developers. One is the **Test Driven Development** (**TDD**) approach,
    where we write our tests before writing our application code. Another way in which
    many JavaScript developers test applications is called **Behavior Driven Development**
    (**BDD**) approach. This works by writing app code first and then interacting
    with an app, which includes opening a popup and confirming that the code worked
    as intended.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里要注意的最后一个事实是JavaScript开发者可以使用的不同方法。一种方法是**测试驱动开发**（**TDD**）方法，我们在编写应用程序代码之前先编写我们的测试。许多JavaScript开发者测试应用程序的另一种方法称为**行为驱动开发**（**BDD**）方法。这种方法通过先编写应用程序代码然后与应用程序互动来工作，这包括打开一个弹出窗口并确认代码如预期那样工作。
- en: Both of these are valid methods to build applications, but for JavaScript applications,
    which use a bit of data that must be accurate, TDD is the way to go!
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种方法都是构建应用程序的有效方法，但对于必须准确的数据的JavaScript应用程序，TDD是最佳选择！
- en: Summary
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we covered the basics of unit testing JavaScript applications.
    We introduced Jasmine, a behavior-driven unit-testing framework for JavaScript.
    Together we created a real-world application that had no technical errors but
    was causing application issues.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们介绍了JavaScript应用程序单元测试的基础知识。我们介绍了Jasmine，一个针对JavaScript的行为驱动单元测试框架。我们一起创建了一个现实世界的应用程序，它没有技术错误，但却导致了应用程序问题。
- en: We reviewed how to read and write an application spec and how to write tests
    in Jasmine using the applications spec. We then ran our test against our code
    and quickly updated our customer data to reflect the spec, allowing our unit test
    to pass. Lastly, we learned that unit-testing our code improves our JavaScript
    performance, and also minimizes risk to our application.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们回顾了如何阅读和编写应用程序规格，以及如何使用应用程序规格编写Jasmine测试。然后我们将我们的测试代码与我们的代码运行，并迅速更新了我们的客户数据以反映规格，使我们的单元测试通过。最后，我们了解到对代码进行单元测试可以提高我们的JavaScript性能，同时也将应用程序的风险降到最低。
