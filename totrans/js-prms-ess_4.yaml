- en: Chapter 4. Error Handling
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章 错误处理
- en: 'As in any programming language, errors and exceptions are bound to rise; to
    ensure a smooth running code and easier debugging, we will need to throw and catch
    these exceptions. Handling errors with asynchronous JavaScript programming can
    be tedious. Promises, however, offer us a great mechanism to handle errors, which
    we will explore in this chapter. Throughout the previous chapter, we learned about
    the chaining of asynchronous operations. We also saw how we can transform from
    callback hell to the more readable and maintainable promise chains. In this chapter,
    we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 像任何编程语言一样，错误和异常是必然会出现的；为了确保代码流畅运行和更容易调试，我们需要抛出和捕获这些异常。用异步JavaScript编程处理错误可能很繁琐。然而，承诺为我们提供了一个处理错误的伟大机制，我们将在本章探索。在前一章中，我们学习了异步操作的链式调用。我们还看到了如何从回调地狱转变为更易读和可维护的承诺链。在本章中，我们将涵盖以下主题：
- en: Exceptions and error handling in promise
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 承诺中的异常和错误处理
- en: How to handle errors with promises using `then` and `catch` methods
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用`then`和`catch`方法处理承诺中的错误
- en: Exceptions and promises
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异常与承诺
- en: There is no standard or agreed-on mechanism to handle exceptions in asynchronous
    JavaScript programming, mainly due to the fact that these exceptions happen in
    the future and there is no way to tell if a rejected promise will eventually be
    handled. Moreover, in an asynchronous world, we can't just simply throw exceptions,
    because there is no one there to catch these errors when they are not ready yet.
    Hence, workarounds were created to address this issue. The common technique of
    catching errors and exceptions involved passing these exceptions manually up the
    chain of nested callbacks. Promises, on the other hand, provide us with error
    handling and bubbling out of the box. They do so by stating that your functions
    should return a promise that is rejected with a reason if it fails.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在异步JavaScript编程中处理异常没有标准或公认的机制，这主要是因为这些异常发生在未来，而且无法确定一个被拒绝的承诺最终是否会得到处理。此外，在异步世界中，我们并不能简单地抛出异常，因为当它们还没有准备好时，没有人去捕获这些错误。因此，为了解决这个问题，创造了一些替代方案。处理错误和异常的常见技术涉及将这些异常手动传递给嵌套回调的链。另一方面，承诺提供了内置的错误处理和冒泡功能。它们通过声明你的函数应该返回一个如果失败则被拒绝的承诺来实现这一点。
- en: 'We learned in [Chapter 1](part0015_split_000.html#E9OE2-fe4c0b71cd2847c897e147ea131725a8
    "Chapter 1. JavaScript Promises – Why Should I Care?"), *JavaScript Promises –
    Why Should I Care?* that a promise can exist in three different states: pending,
    fulfilled, and rejected. The requirements for a rejected state are as follows:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第1章](part0015_split_000.html#E9OE2-fe4c0b71cd2847c897e147ea131725a8 "第1章 JavaScript
    承诺 - 我为什么要关心？")中，我们学习了*JavaScript 承诺 - 我为什么要关心？*的内容，了解到一个承诺可以存在于三种不同的状态：等待中、已兑现和已拒绝。拒绝状态的要求如下：
- en: The promise must not change to any other state (pending or fulfilled)
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 承诺必须不会改变到任何其他状态（等待中或已兑现）
- en: The promise must have a reason for being rejected, and that reason must not
    change within that promise
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 承诺必须有一个被拒绝的理由，并且这个理由在承诺内部不能改变
- en: These two requirements of the rejected state allow error handling, and more
    importantly error composition, whereby the reason for the rejection of that promise
    will automatically bubble up that chain of promises using the `then` method. Promises
    allow errors to propagate up the chain of code similar to the synchronous exceptions.
    Moreover, it provides a cleaner style to handle errors in asynchrony.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个拒绝状态的要求允许错误处理，更重要的是错误组合，即承诺被拒绝的原因会自动沿着承诺链使用`then`方法冒泡上来。承诺允许错误沿着代码链传播，类似于同步异常。此外，它还提供了一种更简洁的方式来处理异步中的错误。
- en: 'Typically, in asynchronous programming using the Callback approach, we need
    to wrap the code block that we think is unsafe in a `try` catch block. This is
    shown in the following code sample:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在使用回调方法的异步编程中，我们需要将我们认为不安全的代码块包裹在一个`try` catch块中。以下代码示例展示了这一点：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The previous code sample shows a block of script that intends to alert an error.
    In that block of code, we wrapped `return JSON.parse("json");` in a `try`...`catch`
    block and intentionally caused an error by passing it an invalid JSON parameter.
    The JavaScript function `JSON.parse()` is used to convert JSON text into a JavaScript
    object. In our example, it will try to parse the text `json` and will throw an
    error. We will catch that exception and display an alert with the details of that
    error.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码示例显示了一个意图提示错误的脚本块。在这个代码块中，我们将`return JSON.parse("json");`包裹在`try`...`catch`块中，并故意通过传递一个无效的JSON参数来引起错误。JavaScript函数`JSON.parse()`用于将JSON文本转换为JavaScript对象。在我们的例子中，它将尝试解析文本`json`并抛出错误。我们将捕获这个异常，并显示带有该错误详情的警告框。
- en: 'If we run this script in an HTML page or online JavaScript Editor, the result
    will be an alert box with the following message:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们把这个脚本运行在一个HTML页面或者在线JavaScript编辑器中，结果将是一个包含以下消息的警告框：
- en: '**I have an error with the following details:**'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**我有一个带有以下详情的错误：**'
- en: '**SyntaxError: Unexpected token j**'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**SyntaxError: Unexpected token j**'
- en: We can browse the code via this public jsFiddle URL at [http://jsfiddle.net/RamiSarieddine/mj6hs0xu/](http://jsfiddle.net/RamiSarieddine/mj6hs0xu/)
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过这个公共jsFiddle URL浏览代码：[http://jsfiddle.net/RamiSarieddine/mj6hs0xu/](http://jsfiddle.net/RamiSarieddine/mj6hs0xu/)
- en: 'Promises, as we have seen so far, are either fulfilled or rejected if an error
    occurs in the promise. When a promise is rejected, it is similar to throwing an
    exception in synchronous code. A standard promise with a `then` function takes
    the two parameters `onFulfilled` and `onRejected` as the following code shows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们迄今为止所看到的，promises要么被满足要么被拒绝，如果promise中发生错误。当一个promise被拒绝时，它与同步代码中抛出异常类似。一个带有`then`函数的标准promise取两个参数`onFulfilled`和`onRejected`，如下面的代码所示：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `onRejected` parameter is a function that will act as an error handler,
    and it will be called when the promise fails. When an error or exception happens
    in a promise, it means that the promise was rejected, and the error raised will
    be provided to the `onRejected` error handler. There are a couple of considerations
    when we call `onRejected`, which can be summarized in the following list, assuming
    we have a simple `promise.then(onFulfilled, onRejected)`:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`onRejected`参数是一个将作为错误处理器的函数，当promise失败时将被调用。当promise中发生错误或异常时，这意味着promise被拒绝，并会将引发的错误提供给`onRejected`错误处理程序。当我们调用`onRejected`时，有两个考虑因素，可以总结如下列表，假设我们有一个简单的`promise.then(onFulfilled,
    onRejected)`：'
- en: '`onRejected` must be called only after the promise had been rejected, with
    the rejection reason as its first argument'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onRejected`只能在promise被拒绝后调用，以其拒绝原因作为其第一个参数'
- en: '`onRejected` must not be called more than once'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onRejected`必须不会被多次调用'
- en: The second consideration is very straightforward. The `onRejected` function
    does not get called multiple times on the same promise. The first consideration
    asserts that `onRejected` will not be called if a promise was rejected.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个考虑非常直接。`onRejected`函数不会在同一个promise上调用多次。第一个考虑断言，如果一个promise被拒绝，`onRejected`将不会被调用。
- en: 'Nevertheless, rejections do happen implicitly as well as in cases where an
    error is thrown in the constructor callback of that promise. The following code
    sample illustrates this:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，拒绝也隐式地发生，以及在promise的构造函数回调中抛出错误的情况。以下代码示例说明了这一点：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the previous code, we define a new promise called `promiseTest` and call
    `then` upon that promise. All that this promise does in its constructor callback
    is resolve `JSON.parse()`, to which we intentionally passed an invalid argument
    to cause an error. Now, this will throw an error in the constructor, and it will
    indirectly cause a rejection when we call the promise with a `then` method. If
    we only had an `onFullfilled` handler, we wouldn't have caught the error. The
    exception will be raised as an argument in the rejection with its value `error`.
    We provided an `error` handler in the arguments of `promiseTest.then()`; hence,
    we can catch and handle the error.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们定义了一个新的promise叫做`promiseTest`，并在那个promise上调用`then`。这个promise在其构造函数回调中所做的全部事情是解决`JSON.parse()`，我们故意向其传递了一个无效的参数以引起错误。现在，这将在构造函数中抛出一个错误，当我们用`then`方法调用promise时，它将间接导致拒绝。如果我们只有一个`onFullfilled`处理程序，我们就无法捕获这个错误。异常将作为拒绝的参数提出，其值为`error`。我们在`promiseTest.then()`的参数中提供了一个`error`处理程序；因此，我们可以捕获并处理这个错误。
- en: You can test this sample code via this public Fiddle at [http://jsfiddle.net/RamiSarieddine/x2Latjg6/](http://jsfiddle.net/RamiSarieddine/x2Latjg6/).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在[http://jsfiddle.net/RamiSarieddine/x2Latjg6/](http://jsfiddle.net/RamiSarieddine/x2Latjg6/)这个公共Fiddle上测试这个示例代码。
- en: Tip
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: As errors do automatically bubble up and become rejections, it becomes quite
    handy to process all the promise-related jobs inside the promise constructor callback;
    if any error arises there, it will be caught when the promise is called.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 由于错误会自动冒泡并变成拒绝，因此在promise构造函数回调中处理所有与promise相关的任务变得非常方便；如果在那里出现任何错误，当调用promise时，它将被捕获。
- en: Handling errors with promises
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用promise处理错误
- en: As we have seen, promises offer a richer error handling mechanism in asynchronous
    programming. Although the Promises/A+ spec tackles only one method, that is `.then(onFulfilled,
    onRejected)`, and does not provide any other, the specifications of `.then()`
    lay the foundation for promise interoperability and, hence, extend the promise
    features, including error handling.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，promise在异步编程中提供了更丰富的错误处理机制。尽管Promises/A+规格只处理一个方法，即`.then(onFulfilled,
    onRejected)`，并没有提供其他方法，但`.then()`的规格为promise的互操作性奠定了基础，因此，扩展了包括错误处理在内的promise功能。
- en: 'We might come across several implementations for error handling within JavaScript
    libraries that are compatible with Promises/A+. Some of these extensions include
    the `catch()` method, which is implemented on top of the elementary `then()` function.
    Anyone can author a `catch()` method and include it in their scripts by extending
    the promise object as per the following code:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能会在兼容Promises/A+的JavaScript库中遇到几个错误处理的实现。其中一些扩展包括`catch()`方法，它是建立在基本的`then()`函数之上的。任何人都可以通过以下代码扩展promise对象来编写一个`catch()`方法，并将其包含在他们的脚本中：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In the previous code sample, we defined a method named `catch` that extends
    the current `this.then` method and returns a rejected promise by executing the
    `onRejected` handler only and neglecting the `onFulfilled` handler argument for
    `then`. In use, the `catch()` method will look like the following:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一个代码示例中，我们定义了一个名为`catch`的方法，它扩展了当前的`this.then`方法，通过执行`onRejected`处理器并忽略`then`的`onFulfilled`处理器参数来返回一个被拒绝的promise。在使用中，`catch()`方法将如下所示：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `catch()` function allowed us to replace the error handler with a more readable
    function that provides a cleaner approach to handle the errors.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`catch()`函数使我们能够用一个更易读的函数替换错误处理程序，提供更简洁的错误处理方法。'
- en: 'We can conclude from the previous code samples that there is nothing distinctive
    about catch, simply its sugarcoating `then(null, function)` function. Moreover,
    as Brian Cavalier, one of the authors of Promise/A+ specifications, puts it: `catch()`
    is simply a restricted subset of `then()`. But does it make the code in general
    and error handling specifically more readable? The ECMAScript 6.0 incorporates
    `catch()` as a requirement in the promise specification, and as I stated earlier,
    most of the popular implementations nowadays include it.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 从之前的代码示例中我们可以得出，`catch()`并没有什么独特之处，它只是`then(null, function)`函数的糖衣。此外，Promise/A+规格的一位作者，Brian
    Cavalier，是这样说的：`catch()`只是`then()`的受限子集。但是，它是否使代码在一般意义上，尤其是在错误处理上更加可读呢？ECMAScript
    6.0将`catch()`作为promise规格的必需品，正如我之前所说，现在大多数流行实现都包括了它。
- en: 'However, there is a gotcha between `then()` and `catch()` in implementation
    as `then()` tends to be somehow misleading at times. To see it in an example so
    as to better understand it, take the following two sample lines of code:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在`then()`和`catch()`的实现之间有一个需要注意的地方，因为`then()`有时会有些误导。为了更好地理解它，来看以下这个例子：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'These two lines of code include `promise`, `then`, and `catch` methods with
    two handlers: `handler1` and `handler2`. These two calls are not equivalent—the
    first line will not call `handler2` if an error occurs in `handler1`. That is
    because, if the promise is fulfilled, `handler1` will be invoked, and if the promise
    is rejected, `handler2` will be invoked. But if `handler1` throws `error`, `handler2`
    will not be called in return.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这两行代码包括了`promise`、`then`和`catch`方法，带有两个处理器：`handler1`和`handler2`。这两个调用是不等价的——如果`handler1`中出现错误，第一行不会调用`handler2`。这是因为，如果promise被满足，将调用`handler1`，如果promise被拒绝，将调用`handler2`。但是，如果`handler1`抛出`error`，`handler2`将不会被调用。
- en: 'Meanwhile, in the second line, `handler2` will be invoked if either promise
    is rejected or `handler1` throws an exception. Since `catch()` is merely a sugarcoat
    for `then(null, handler)`, the second line is identical to the following, which
    can make this conundrum clearer:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，在第二行中，如果任何一个承诺被拒绝或者`handler1`抛出异常，`handler2`将被调用。由于`catch()`仅仅是`then(null,
    handler)`的糖衣，第二行与以下内容相同，这可以使这个谜题更清晰：
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The reason behind this nonequivalence in the previous two lines of code is the
    way `then()` operates. The `then(handler1, handler2)` methods register two parallel
    handlers for a promise, whereby either `handler1` or `handler2` will be called
    but never both. On the other hand, with `then(handler1).catch(handler2)`, both
    handlers/functions will be invoked if `handler1` rejects, because they represent
    two separate steps in the promise chain. Promise rejections will move forward
    to the succeeding `then` method with a rejection callback only when we have `catch`
    as an equivalent of `then`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 前两行代码中不等价的原因是`then()`的工作方式。`then(handler1, handler2)`方法为承诺注册了两个并行的处理程序，这样要么调用`handler1`，要么调用`handler2`，但永远不会两者都调用。另一方面，如果使用`then(handler1).catch(handler2)`，则如果`handler1`拒绝，两个处理程序/函数都将被调用，因为它们代表承诺链中的两个独立步骤。只有当我们有`catch`作为`then`的等价物时，承诺拒绝才会带着拒绝回调转移到后续的`then`方法。
- en: Although this does not seem very intuitive at first glance, it is very important
    to provide an easier reasoning about asynchronous programming and it makes rejecting
    a promise quite similar to throwing an exception in synchronous programming. In
    the synchronous world, exceptions do not allow for executing both the code that
    immediately follows a `throw` block and the code inside the closest `catch` block,
    whereby the errors that happen within a `try` block moves directly to the `catch`
    block.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这在一开始看起来可能并不是非常直观，但在提供关于异步编程更容易理解的推理方面非常重要，它使得拒绝承诺变得与同步编程中抛出异常非常相似。在同步世界中，异常不允许执行紧跟在`throw`块后面的代码和最近的`catch`块内的代码，因此`try`块内发生的错误直接转移到`catch`块。
- en: Note
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `Catch()` function is preferable for application developers as we have learned,
    for better readability and its intuitive error handling flow, while `promise.then(handler1,
    handler2)` is mostly used internally when implementing a promise.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`Catch()`函数对于应用程序开发者来说更佳，正如我们所学的，因为它有更好的可读性和直观的错误处理流程，而`promise.then(handler1,
    handler2)`通常在实现承诺时内部使用。'
- en: 'The error handling mechanism allows us to write functions that do things in
    a safe manner. Let us take the following chain of promises that includes error
    handling with `catch()` and see how it translates in a flowchart:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 错误处理机制允许我们编写以安全方式执行任务的函数。让我们来看一个包含使用`catch()`进行错误处理的承诺链，并看看它在流程图中的翻译：
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The corresponding flowchart for the preceding chain of promises and errors
    will look like the following diagram:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 前述承诺链和错误链对应的流程图将如下所示：
- en: '![Handling errors with promises](img/00004.jpeg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![使用承诺处理错误](img/00004.jpeg)'
- en: The boxes in green will be the ones that fulfill; the ones that are colored
    red represent the error handlers if the promise is rejected. We can follow the
    flow of the process with the lines to know which is fulfilled and which is rejected
    and compare it to the previous code sample to get a better visual idea of how
    the errors will propagate in that promise chain.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 绿色的框表示将会被满足的部分；被染成红色的框代表如果承诺被拒绝时的错误处理程序。我们可以通过线条跟随流程，了解哪个被满足，哪个被拒绝，并与之前的代码示例进行比较，以获得关于承诺链中错误如何传播的更好视觉概念。
- en: Summary
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'JavaScript''s promises provide a standardized approach to error handling with
    the foundation of its implementation existing in the specifications of the `then`
    method that can be extended to breed methods such as `catch`, which allows a more
    readable and intuitive error handling code. The `then` function is provided with
    two powerful parameters: `onFulfilled` and `onRejected`. These function parameters
    allow us to handle the values returned from a promise operation that has been
    fulfilled and the errors returned when a promise is rejected. In the next chapter,
    we will cover the WinJS library; we will learn about the promises object in that
    library and how we can use it in Windows development.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 的承诺（promises）提供了一种标准化的错误处理方法，其实现的基础存在于 `then` 方法的规格说明中，该方法可以扩展生成如
    `catch` 之类的方法，使得代码更加易读且直观。`then` 函数有两个强大的参数：`onFulfilled` 和 `onRejected`。这些函数参数允许我们处理来自已完成的承诺操作返回的值以及承诺被拒绝时返回的错误。在下一章中，我们将介绍
    WinJS 库；我们将学习该库中的承诺对象以及如何在 Windows 开发中使用它。
