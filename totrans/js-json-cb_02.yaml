- en: Chapter 2. Reading and Writing JSON on the Server
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章：服务器端的读写JSON
- en: 'In the previous chapter, we looked at JSON handling in some of the most common
    client-side environments. In this chapter, we will turn our attention to server-side
    JSON encoding and decoding. We''ll look at recipes on how to do this in the following
    environments:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一章中，我们查看了一些最常见的客户端环境中的JSON处理。在本章中，我们将注意力转向服务器端的JSON编码和解码。我们将查看以下环境中的食谱：
- en: Reading and writing JSON in Clojure
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Clojure中读写JSON
- en: Reading and writing JSON in F#
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在F#中读写JSON
- en: Reading and writing JSON in Node.js
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Node.js中读写JSON
- en: Reading and writing JSON in PHP
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在PHP中读写JSON
- en: Reading and writing JSON in Ruby
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Ruby中读写JSON
- en: Some languages, such as C++ and Java, are used on both client-side and server-side;
    for these, refer to [Chapter 1](ch01.html "Chapter 1. Reading and Writing JSON
    on the Client"), *Reading and Writing JSON on the Client* (one exception is the
    discussion of JSON in Node.js because Node.js plays a big role in subsequent chapters
    of this book).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 一些语言，如C++和Java，既用于客户端又用于服务器端；对于这些语言，请参考[第1章](ch01.html "第1章：客户端的读写JSON")，*客户端的读写JSON*（一个例外是关于Node.js中的JSON讨论，因为Node.js在这本书的后续章节中扮演重要角色）。
- en: Reading and writing JSON in Clojure
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Clojure中读写JSON
- en: Clojure is a modern Lisp variant running on top of the Java and Microsoft **Common**
    **Language Runtime** (**CLR**) platforms. As such, you can use the facilities
    we discussed in [Chapter 1](ch01.html "Chapter 1. Reading and Writing JSON on
    the Client"), *Reading and Writing JSON on the Client*, to convert between JSON
    and objects in the native runtime, but there's a better way, and that is the Clojure's
    `data.json` module, available at [https://github.com/clojure/data.json](https://github.com/clojure/data.json).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Clojure是一种运行在Java和Microsoft **公共** **语言运行时**（**CLR**）平台之上的现代Lisp变体。因此，你可以使用我们在[第1章](ch01.html
    "第1章：客户端的读写JSON")中讨论的设施，在本地运行时将JSON和对象之间进行转换，但有一个更好的方法，那就是Clojure的`data.json`模块，可在[https://github.com/clojure/data.json](https://github.com/clojure/data.json)找到。
- en: Getting ready
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备
- en: 'To begin, you need to specify your dependency in the `data.json` module. You
    can do this with the following dependency in your Leiningen file:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要在你`data.json`模块中指定你的依赖。你可以用以下依赖在你的Leiningen文件中这样做：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If you''re using Maven, you''ll want this:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用Maven，你会需要这个：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Tip
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Of course, the version of `data.json` may change between the time I write this
    and the time you include it in your project as a dependency. Check with the data.json
    project for the current version.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，`data.json`的版本可能会在我写这篇和你在项目中作为依赖包含它之间发生变化。查看data.json项目以获取当前版本。
- en: 'Finally, you need to include the `data.json` module in your code in a namespace
    such as `json`:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你需要在你的代码中包含`data.json`模块，在一个像`json`这样的命名空间中：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This makes the implementation of the `data.json` module available through the
    namespace `json`.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得`data.json`模块的实现通过`json`命名空间可用。
- en: How to do it...
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'Encoding a Clojure map as JSON is easy, just call `json/write-str`. For example:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 将Clojure映射编码为JSON很容易，只需调用`json/write-str`。例如：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If you''ve got a stream implementing `java.io.Writer` that you want to write
    the JSON to, you can also use `json/write`:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一个实现`java.io.Writer`的流，你想向其写入JSON，你也可以使用`json/write`：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Reading is the opposite of writing and reads JSON into associative arrays that
    you can process further:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读是写作的相反过程，它将JSON读取到关联数组中，你可以进一步处理：
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Also, there's `json/read`, the counterpart of `json/write` that takes a stream
    from which you can read and return a map of the parsed JSON.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 还有`json/read`，`json/write`的对应物，它接收一个流，你可以从中读取并返回解析后的JSON映射。
- en: There's more...
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'These methods all take two optional arguments, a `:key-fn` argument that the
    module applies to each JSON attribute name, and a `:value-fn` argument that the
    module applies to attribute values. For example, you can convert JSON to the more
    traditional Clojure keyword maps using the `:key-fn keyword`, like this:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法都接受两个可选参数，一个`:key-fn`参数，模块将其应用于每个JSON属性名称，和一个`:value-fn`参数，模块将其应用于属性值。例如，你可以使用`:key-fn
    keyword`将JSON转换为更传统的Clojure关键词映射，像这样：
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Alternatively, you can provide a lambda, such as the following one, that converts
    keys to uppercase:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你可以提供一个lambda，比如以下这个，它将键转换为大写：
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Here''s a nice example from the `data.json` documentation that uses :`value-fn`
    to convert ISO dates as strings to Java `Date` objects as you parse the JSON:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个来自 `data.json` 文档的很好例子，它使用 `value-fn` 将 ISO 日期字符串转换为 Java `Date` 对象，当你解析
    JSON 时：
- en: '[PRE8]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The preceding code does the following:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码执行以下操作：
- en: Defines a helper function `my-value-reader` that uses the keyword of the JSON
    key-value pair to determine its type.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义了一个辅助函数 `my-value-reader`，它使用 JSON 键值对的关键字来确定其类型。
- en: Given a JSON key value of `:date`, it treats the value as a string to be passed
    to the `java.sql.Date` method `valueOf`, which returns a `Date` instance with
    the value from the string it parses.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给定一个 JSON 键值 `:date`，它将该值视为一个字符串，传递给 `java.sql.Date` 方法的 `valueOf`，该方法返回一个从它解析的字符串中获取值的
    `Date` 实例。
- en: 'Calls `json/read-str` to parse some simple JSON consisting of two fields: a
    `result` field and a `date` field.'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用 `json/read-str` 来解析一些简单的 JSON 数据，它包括两个字段：一个 `result` 字段和一个 `date` 字段。
- en: The JSON parser parses the JSON, converts JSON attribute names to keywords,
    and uses the value converter we previously defined to convert date values to their
    `java.sql.Date` representation.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**JSON 解析器**解析 JSON 数据，将 JSON 属性名转换为关键字，并使用我们之前定义的值转换器将日期值转换为它们的 `java.sql.Date`
    表示形式。'
- en: Reading and writing JSON in F#
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 F# 中读写 JSON
- en: 'F# is a language running on the CLR and .NET that excels in functional and
    object-oriented programming tasks. Because it''s on top of .NET, you can use third-party
    libraries such as `Json.NET` (mentioned in [Chapter 1](ch01.html "Chapter 1. Reading
    and Writing JSON on the Client"), *Reading and Writing JSON on the Client*) to
    convert between JSON and CLR objects. However, there''s a better way: the open
    source library F# Data, which creates native data type providers to process data
    in a number of different structured formats, including JSON.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: F# 是一种运行在 CLR 和 .NET 之上的语言，擅长于函数式和面向对象编程任务。因为它建立在 .NET 之上，所以你可以使用诸如 `Json.NET`（在
    [第 1 章](ch01.html "第 1 章．客户端的 JSON 读写")，*客户端的 JSON 读写* 中提到）等第三方库来将 JSON 与 CLR
    对象进行转换。然而，还有一个更好的方法：开源库 F# Data，它创建了本地的数据类型提供程序来处理多种不同的结构化格式，包括 JSON。
- en: Getting ready
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备开始
- en: Begin by getting a copy of the library, available at [https://github.com/fsharp/FSharp.Data](https://github.com/fsharp/FSharp.Data).
    Once you download it, you'll need to build it; you can do this by running the
    `build.cmd` build batch file that comes with the distribution (for details, see
    the F# Data website). Alternatively, you can find the same package on NuGet, by
    choosing **Manage NuGet Packages** from the **Projects** menu and searching for
    F# Data. Once you find it, click on **Install**. I prefer using NuGet because
    it automatically adds the `FSharp.Data` assembly to your project, and saves you
    the hassle of building the sources on your own. On the other hand, the source
    distribution makes documentation you can read offline, which can be handy, too.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，获取库的副本，可在 [https://github.com/fsharp/FSharp.Data](https://github.com/fsharp/FSharp.Data)
    找到。下载后，你需要构建它；你可以通过运行随分发提供的 `build.cmd` 构建批处理文件来完成此操作（有关详细信息，请参见 F# Data 网站）。或者，你可以在
    NuGet 上找到相同的包，通过从 **项目** 菜单中选择 **管理 NuGet 包** 并搜索 F# Data。找到后，点击 **安装**。我更喜欢使用
    NuGet，因为它会自动将 `FSharp.Data` 程序集添加到你的项目中，省去了你自己构建源代码的麻烦。另一方面，源分发可以让你离线阅读文档，这也很有用。
- en: 'Once you have the F# Data, you simply need to open it in the source files where
    you''re going to use it with the open directive, like this:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你获得了 F# 数据，你只需要在源文件中打开它，你打算用它时使用 `open` 指令，像这样：
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: How to do it...
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何进行...
- en: 'Here''s a bit of sample code that converts between some JSON and an F# object,
    and then makes a new bit of JSON from another F# object:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些示例代码，它实现了 JSON 与 F# 对象之间的转换，然后又从另一个 F# 对象创建了新的 JSON 数据：
- en: '[PRE10]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Let's see how it works.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看它是如何工作的。
- en: How it works...
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: First, it's important to remember that F# is strongly typed and infers types
    from data. Understanding this is crucial to understand how the F# Data library
    works. Unlike the examples we've seen in past sections, where converters map JSON
    to key-value pairs, the F# Data library infers a whole data type from the JSON
    you present it with. In many ways, this is the best of both the dynamic collection-oriented
    approach, that other converters take to converting JSON, and the type-safe approaches
    that I'll show you in [Chapter 7](ch07.html "Chapter 7. Using JSON in a Type-safe
    Manner"), *Using JSON in a Type-safe Manner*. This is because you don't have to
    laboriously craft class representations for the JSON you're parsing, and you get
    all the advantages of compile-time type safety in the code you write. Even better,
    the classes F# Data construct are all Intellisense-aware, so you get tooltip hints
    and name completion right in the editor!
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，重要的是要记住F#是强类型的，并且从数据中推断类型。理解这一点对于理解F# Data库是如何工作的至关重要。与我们在前面章节中看到的例子不同，在那里转换器将JSON映射到键值对，F#
    Data库从您提供的JSON中推断出整个数据类型。在许多方面，这既结合了其他转换器在转换JSON时采取的动态集合导向方法，也结合了我在[第7章](ch07.html
    "Chapter 7. Using JSON in a Type-safe Manner") *以类型安全的方式使用JSON*中要展示的类型安全方法。这是因为您不需要辛苦地制作要解析的JSON的类表示，而且您还能在编写的代码中获得编译时类型安全的所有优势。更妙的是，F#
    Data创建的类都支持Intellisense，所以您在编辑器中就能直接获得工具提示和名称补全！
- en: 'Let''s look at the previous example piece by piece and see what it does:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐段看看之前的示例并了解它做了什么：
- en: '[PRE11]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The first line makes the F# Data classes available to your program. Among other
    things, this defines the `JsonProvider` class, which creates F# types from sources
    of JSON:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行使F# Data类可用于您的程序。 among other things, 这定义了`JsonProvider`类，该类从JSON源创建F#类型：
- en: '[PRE12]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This line defines a new F# type, `Json`, with fields and field types inferred
    from the JSON you provide. Under the hood, this does a lot: it infers member names,
    the types of members, and even handles things such as mixed numeric values (say
    that you have an array with both integers and floating-point numbers, it correctly
    infers the type as numeric so you can represent either), as well as complex records
    and optional fields.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码定义了一个新的F#类型`Json`，该类型的字段和字段类型是从您提供的JSON中推断出来的。在底层，这做了很多工作：它推断出成员名称、成员的类型，甚至处理诸如混合数值（比如说您有一个同时包含整数和浮点数的数组，它能正确推断出类型为数值类型，这样你就可以表示任一类型）以及复杂的记录和可选字段等事情。
- en: 'You can pass one of the following three things to `JsonProvider`:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以向`JsonProvider`传递以下三个之一：
- en: A string containing JSON. This is the simplest case.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个包含JSON的字符串。这是最简单的情况。
- en: A path to a file containing JSON. The library will open the file and read the
    contents and perform the type inference on the contents, and then return a type
    capable of representing the JSON in the file.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个包含JSON文件的路径。库将打开文件并读取内容，然后对内容进行类型推断，最后返回一个能够表示文件中JSON的类型。
- en: A URL. The library will fetch the document at the URL, parse the JSON, and then
    do the same type inference on the contents, returning a type that represents the
    JSON at the URL.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个URL。库将获取URL处的文档，解析JSON，然后对内容进行相同的类型推断，返回一个代表URL处JSON的类型。
- en: 'The next line parses a single JSON document, as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 下一行解析一个单独的JSON文档，如下所示：
- en: '[PRE13]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This at first may seem a little weird: why are we passing JSON to both the
    `JsonProvider` and `Parse` methods? Recall that `JsonProvider` makes a type from
    the JSON you provide. In other words, it doesn''t parse the JSON for its values,
    but for the types of data it represents in order to make a class that can model
    the JSON document itself. This is very important; to the `JsonProvider`, you''ll
    want to pass a representative JSON document that has the fields and values common
    across all the JSON documents of a particular type that your application is likely
    to encounter. You''ll pass a specific JSON document (say, a web service result)
    to the `Parse` method of the class that `JsonProvider` creates. In turn, `Parse`
    returns an instance of the class on which you invoked `Parse`.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能一开始看起来有点奇怪：为什么我们要把JSON同时传递给`JsonProvider`和`Parse`方法呢？回想一下，`JsonProvider`是从您提供的JSON中创建一个类型。换句话说，它不是为了解析JSON的值，而是为了解析它所表示的数据类型，以便制作一个能够模拟JSON文档本身的类。这一点非常重要；对于`JsonProvider`来说，您想要传递一个具有字段和值的代表性JSON文档，这个文档是您的应用程序可能遇到的某一特定类型的所有JSON文档的共通之处。然后，您将一个特定的JSON文档（比如说，一个web服务结果）传递给`JsonProvider`创建的类的`Parse`方法。相应地，`Parse`返回了一个您调用`Parse`的方法的实例。
- en: You can now access the fields in the instance of the class `Parse` returns;
    for example, later, I will print the value of `result.Result` in my application's
    `main` function.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以访问类`Parse`返回实例中的字段；例如，稍后，我将在应用程序的`main`函数中打印出`result.Result`的值。
- en: 'To create JSON, you need an instance of the type modeling the data you want
    to serialize. In the next line, we use the `Json` type we just created to create
    a new JSON string:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 创建JSON，你需要一个表示要序列化数据的类型的实例。在下一行，我们使用刚刚创建的`Json`类型来创建一个新的JSON字符串：
- en: '[PRE14]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This creates an instance of the `Json` type with the result field set to the
    string `FAIL`, and then serializes that instance into a new string.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这创建了一个`Json`类型的实例，并将结果字段设置为字符串`FAIL`，然后将该实例序列化为一个新的字符串。
- en: Finally, the remainder of the program is our program's entry point, and just
    prints the parsed object and the created JSON.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，程序的其余部分是程序的入口点，并只是打印出解析的对象和创建的JSON。
- en: There's more...
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The F# Data library supports a lot more than just JSON; it also supports **Comma
    Separated Values** (**CSV**), HTML, and XML. It's an excellent library for doing
    all kinds of structured data access, and if you're working in F#, it's definitely
    something to become more familiar with.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: F#数据库支持远不止只是JSON；它还支持**逗号分隔值**（**CSV**）、HTML和XML。这是一个非常适合进行各种结构化数据访问的优秀库，如果你在F#中工作，那么熟悉它绝对是件好事。
- en: Reading and writing JSON with Node.js
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Node.js读写JSON
- en: Node.js is a JavaScript environment for server-side programming based on the
    same high-performance JavaScript runtime Google built for Chrome, backed by Joyent.
    Its high performing and asynchronous programming model makes it an excellent environment
    for custom web servers and it's used by major companies, including Walmart, in
    production settings.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js是一个基于与Google为Chrome构建的高性能JavaScript运行时相同的高性能和异步编程模型的JavaScript环境，由Joyent支持。它高性能和异步编程模型使它成为一个优秀的自定义Web服务器环境，并且它被包括沃尔玛在内的许多大型公司用于生产环境。
- en: Getting ready
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备
- en: Because we'll use Node.js in the next two chapters as well, it's worth pointing
    out to you how to download and install it, even if your daily server environment
    is something more like Apache or Microsoft IIS. You'll need to go to [http://www.nodejs.org/](http://www.nodejs.org/)
    and download the installer from the front page. This will install all you need
    to run Node.js and npm, the package manager used by Node.js.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们在接下来的两章中也会使用Node.js，所以值得向你指出如何下载和安装它，即使你的日常服务器环境更像Apache或Microsoft IIS。你需要访问[http://www.nodejs.org/](http://www.nodejs.org/)，并从首页下载安装程序。这将安装运行Node.js和npm（Node.js使用的包管理器）所需的一切。
- en: Tip
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: After installing on Windows, I had to reboot to get the Windows shell to correctly
    find the node and npm commands that the Node.js installer installed.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上安装后，我必须重新启动计算机，才能使Windows外壳正确找到Node.js安装程序安装的node和npm命令。
- en: 'Once you get Node.js installed, we can test the installation by bringing up
    a simple HTTP server in Node.js. To do this, put the following code in a file
    called `example.js`:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你安装了Node.js，我们可以通过在Node.js中启动一个简单的HTTP服务器来测试安装。为此，将以下代码放入一个名为`example.js`的文件中：
- en: '[PRE15]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This code loads Node.js''s `http` module, and then creates a Web server bound
    to the port `1337` running on your local machine. You can run it by entering the
    following command at a command prompt in the same directory as the file you created:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码加载了Node.js的`http`模块，然后创建了一个绑定在本地机器上端口`1337`的Web服务器。你可以在创建文件的同一目录下，通过命令提示符输入以下命令来运行它：
- en: '[PRE16]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Once you do so, point your browser to the URL `http://localhost:1337/`. If everything's
    successful, you should see the message "Hello world" in your web browser.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦这样做，将你的浏览器指向URL`http://localhost:1337/`。如果一切顺利，你应该在网页浏览器中看到“Hello world”的消息。
- en: Tip
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You may need to tell your system firewall to enable access to ports being served
    by the `node` command.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能需要告诉你的系统防火墙，以启用对由`node`命令服务的端口的访问。
- en: How to do it...
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 怎么做...
- en: Since Node.js uses Chrome's V8 JavaScript engine, working with JSON is the same
    with Node.js as it is in Chrome. The JavaScript runtime defines the `JSON` object,
    which provides a JSON parser and serializer for you.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Node.js使用Chrome的V8 JavaScript引擎，因此Node.js中处理JSON与Chrome中的处理方式相同。JavaScript运行时定义了`JSON`对象，该对象为您提供了JSON解析器和序列化器。
- en: 'To parse JSON, all you need to do is invoke the `JSON.parse` method, like this:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 解析JSON，你所需要做的就是调用`JSON.parse`方法，像这样：
- en: '[PRE17]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This parses the JSON, returning the JavaScript object containing the data, which
    we assigned here to the variable object.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这将解析JSON，返回包含数据的JavaScript对象，我们在这里将其分配给变量object。
- en: 'Of course, you can do the opposite, using `JSON.stringify`, like this:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你可以做相反的操作，使用`JSON.stringify`，像这样：
- en: '[PRE18]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: See also
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 也见
- en: For more on parsing and creating JSON in JavaScript, see *Reading and Writing
    JSON in JavaScript* in [Chapter 1](ch01.html "Chapter 1. Reading and Writing JSON
    on the Client"), *Reading and Writing JSON on the Client*.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 关于在JavaScript中解析和创建JSON的更多信息，请参阅[第1章](ch01.html "第1章 客户端读写JSON")中的*在客户端读写JSON*一节，以及*读写客户端JSON*。
- en: Reading and writing JSON in PHP
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在PHP中读写JSON
- en: PHP is a popular server-side scripting environment easily integrated with the
    Apache and Microsoft IIS web servers. It has native support for simple JSON encoding
    and decoding.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: PHP是一个流行的服务器端脚本环境，可以轻松与Apache和Microsoft IIS网络服务器集成。它具有内置的简单JSON编码和解码支持。
- en: How to do it...
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到...
- en: PHP provides two functions, `json_encode` and `json_decode`, to encode and decode
    JSON respectively.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: PHP提供了两个函数`json_encode`和`json_decode`，分别用于编码和解码JSON。
- en: 'You can pass primitive types or user-defined classes to `json_encode` and it
    returns a string containing the JSON representing the object. For example:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将原始类型或自定义类传递给`json_encode`，它将返回一个包含对象JSON表示的字符串。例如：
- en: '[PRE19]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This creates a string `$json` containing the JSON representation of our associative
    array.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个包含我们关联数组的JSON表示的字符串`$json`。
- en: 'The `json_encode` function takes an optional second argument, which lets you
    specify arguments to the encoder. The arguments are flags, so you combine them
    with the binary or `|` operator. You can pass a combination of the following flags:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`json_encode`函数接受一个可选的第二个参数，让你指定编码器的参数。这些参数是标志，所以你可以用二进制或`|`操作符来组合它们。你可以传递以下标志的组合：'
- en: '`JSON_FORCE_OBJECT`: This flag forces the encoder to encode the JSON as an
    object.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`JSON_FORCE_OBJECT`：这个标志强制编码器将JSON编码为对象。'
- en: '`JSON_NUMERIC_CHECK`: This flag checks the contents of each string in the incoming
    structure and if it contains a number, converts the string to a number before
    encoding it.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`JSON_NUMERIC_CHECK`：这个标志检查传入结构中的每个字符串的内容，如果它包含一个数字，则在编码之前将字符串转换为数字。'
- en: '`JSON_PRETTY_PRINT`: This flag formats the JSON for easier reading by humans
    (don''t do this in production, as it makes the JSON bigger)'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`JSON_PRETTY_PRINT`：这个标志将JSON格式化为更容易供人类阅读的形式（不要在生产环境中这样做，因为这会使JSON变大）。'
- en: '`JSON_UNESCAPED_SLASHES`: This flag instructs the encoder to not escape slash
    characters.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`JSON_UNESCAPED_SLASHES`：这个标志指示编码器不要转义斜杠字符。'
- en: Finally, you can pass a third argument, which specifies the depth to which the
    encoder should walk the expression when encoding the value you pass.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你可以传递一个第三个参数，指定编码器在编码你传递的值时应遍历表达式的深度。
- en: 'The complement of `json_encode` is `json_decode`, which takes the JSON to decode,
    and a set of optional arguments. Its simplest use might be something like this:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`json_encode`的补数是`json_decode`，它接受要解码的JSON和一个可选参数集合。其最简单的用法可能像这样：'
- en: '[PRE20]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The `json_decode` function takes up to three optional arguments:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`json_decode`函数最多接受三个可选参数：'
- en: The first argument, when true, specifies that the result should be returned
    in an associative array rather than an object of type `stdClass`.
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个参数，当为真时，指定结果应该以关联数组的形式返回，而不是`stdClass`对象。
- en: The second argument specifies an optional recursion depth to determine how deep
    into the JSON the parser should parse.
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个参数指定一个可选的递归深度，以确定解析器应深入解析JSON的深度。
- en: The third argument may be the option `JSON_BIGINT_AS_STRING`, which when set
    indicates that integers that overflow the integer values should be returned as
    strings, not cast to floating-point numbers (which may lose precision).
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三个参数可能是选项`JSON_BIGINT_AS_STRING`，当设置时表示应该将溢出整数值的整数作为字符串返回，而不是转换为浮点数（这可能会失去精度）。
- en: These functions return `true` on success or `false` on error; you can determine
    the cause of the last error using JSON by examining the return value of `json_last_error`.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数在成功时返回`true`，在出错时返回`false`；你可以通过检查`json_last_error`的返回值来使用JSON确定上一次错误的的原因。
- en: Reading and writing JSON in Ruby
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Ruby中读写JSON
- en: Ruby provides the `json` gem for JSON handling. In earlier versions of Ruby,
    you have to install this gem yourself; it's part of the base installation from
    Ruby 1.9.2 and onwards.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: Ruby提供了`json`宝石用于处理JSON。在Ruby的早期版本中，你必须自己安装这个宝石；从Ruby 1.9.2及以后版本开始，它成为基础安装的一部分。
- en: Getting ready
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备
- en: 'If you''re running an earlier version of Ruby than Ruby 1.9.2, first install
    the gem with the following command:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用比Ruby 1.9.2更早的版本，首先需要使用以下命令安装gem：
- en: '[PRE21]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Note that Ruby''s implementation is in C, so installing the gem may require
    a C compiler. If you don''t have one installed on your system, you can install
    the pure Ruby implementation of the gem using the following command:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，Ruby的实现是C语言，因此安装gem可能需要C编译器。如果您系统上没有安装，您可以使用以下命令安装gem的纯Ruby实现：
- en: '[PRE22]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Regardless of whether you need to install the gem or not, you''ll need to include
    it in your code. To do this, include both `rubygems` and `json` or **json/pure**,
    depending on which gem you installed; do this using `require`, like this:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你是否需要安装gem，你都需要在代码中包含它。要做到这一点，请包含`rubygems`和`json`或**json/pure**，具体取决于你安装了哪个gem；使用`require`，像这样：
- en: '[PRE23]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The preceding code handles the former case, while the following code handles
    the latter:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码处理了前一种情况，而下面的代码处理了后一种情况：
- en: '[PRE24]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: How to do it...
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'The gem defines the JSON object, which includes the methods `parse` and `generate`,
    which serialize and deserialize JSON respectively. Using them is what you''d expect
    by now. Create an object or some JSON, invoke the appropriate function, and look
    at the results. For example, to create some JSON using JSON.generate, you can
    execute the following:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 该gem定义了JSON对象，其中包含`parse`和`generate`方法，分别用于序列化和反序列化JSON。使用它们正如你所期望的那样。创建一个对象或一些JSON，调用相应的函数，然后查看结果。例如，要使用JSON.generate创建一些JSON，你可以执行以下操作：
- en: '[PRE25]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This includes the necessary modules, creates an associative array with a single
    field, and then serializes it to JSON.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这包括必要的模块，创建一个具有单个字段的关联数组，然后将其序列化为JSON。
- en: 'Deserializing works the same way:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 反序列化工作方式与序列化相同：
- en: '[PRE26]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The parse function can take an optional second argument, a hash with the following
    keys, indicating options to the parser:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`parse`函数可以接受一个可选的第二个参数，一个具有以下键的哈希，表示解析器的选项：'
- en: '`max_nesting` indicates the maximum depth of nesting allowed in the parsed
    data structures. It defaults to 19 or you can disable the nesting depth checking
    by passing `:max_nesting => false`.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`max_nesting`表示允许在解析的数据结构中嵌套的最大深度。它默认为19，或者可以通过传递`:max_nesting => false`来禁用嵌套深度检查。'
- en: '`allow_nan`, which if set to true, allows NaN, Infinity, and -Infinity in defiance
    of RFC 4627 to be parsed.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`allow_nan`，如果设置为真，则允许NaN、Infinity和-Infinity，这与RFC 4627相悖。'
- en: '`symbolize_names`, which when true, returns symbols for the attribute names
    in a JSON object; otherwise, strings are returned (strings are the default).'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`symbolize_names`，当为真时，返回JSON对象中属性名的符号；否则，返回字符串（字符串是默认值）。'
- en: See also
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: Documentation for the JSON Ruby gem is available on the Web at [http://flori.github.io/json/doc/index.html](http://flori.github.io/json/doc/index.html).
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: JSON Ruby gem的文档可以在网上找到，网址为[http://flori.github.io/json/doc/index.html](http://flori.github.io/json/doc/index.html)。
