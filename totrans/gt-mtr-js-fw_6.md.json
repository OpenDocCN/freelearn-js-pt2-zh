["```js\nvar lists = new Meteor.Collection(\"lists\");\n\nif (Meteor.isClient) { \n...\n}\n\nif (Meteor.isServer){...\n```", "```js\napp/LendLibClient.js:21\n   Meteor.subscribe(\"Categories\");\n          ^\nTypeError: Object #<Object> has no method 'subscribe'\n    at app/LendLibClient.js:21:11\n...\nExited with code: 1\nYour application is crashing. Waiting for file change.\n```", "```js\n=> Modified -- restarting.\n```", "```js\n$ mkdir ~/Documents/Meteor/LendLib/server\n\n```", "```js\nvar lists = new Meteor.Collection(\"lists\");\n```", "```js\nbody {\n background-image: url(/texturetastic_gray.png); \n}\n\n```", "```js\n>meteor remove insecure\n\n```", "```js\ninsecure: removed\n```", "```js\n$ meteor add accounts-base\n$ meteor add accounts-password\n$ meteor add email\n\n```", "```js\n$ meteor add accounts-ui\n\n```", "```js\nAccounts.ui.config({\n passwordSignupFields: 'USERNAME_AND_OPTIONAL_EMAIL' \n});\n\n```", "```js\n<body>\n  <div style=\"float: right; margin-right:20px;\">\n {{loginButtons align=\"right\"}}\n </div>\n  <div id=\"lendlib\">\n```", "```js\n/*checks to see if the current user making the request to update is the admin user */\n\nfunction adminUser(userId) {\n var adminUser = Meteor.users.findOne({username:\"admin\"});\n return (userId && adminUser && userId === adminUser._id);\n}\n\nlists.allow({\n insert: function(userId, doc){\n return adminUser(userId);\n },\n update: function(userId, docs, fields, modifier){\n return adminUser(userId);\n },\n remove: function (userId, docs){\n return adminUser(userId);\n }\n});\n\n```", "```js\n> lists.remove({Category:\"glassware\"})\n\n```", "```js\nMeteor.publish(\"Categories\", function() {\n  return lists.find({owner:this.userId},{fields:{Category:1}});\n});\n```", "```js\n>lists.remove({})\n\n```", "```js\nif (catVal)\n{\n  lists.insert({Category:catVal,owner:this.userId});\n  Session.set('adding_category', false);\n}\n```", "```js\nlists.allow({\n  insert: function(userId, doc){\n    return (adminUser(userId) || (userId && doc.owner === userId)); \n  },\n  update: function(userId, docs, fields, modifier){\n    return adminUser(userId) ||\n _.all(docs, function(doc) {\n return doc.owner === userId;\n });\n  },\n  remove: function (userId, docs){\n    return adminUser(userId) ||\n _.all(docs, function(doc) {\n return doc.owner === userId;\n });\n  }\n});\n```"]