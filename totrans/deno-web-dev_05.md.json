["```js\n    export { oakCors } from\n      \"https://deno.land/x/cors@v1.2.1/oakCors.ts\";\n    ```", "```js\n    $ deno cache --lock=lock.json --lock-write --unstable src/deps.ts\n    ```", "```js\n    import { Algorithm, oakCors } from \"../deps.ts\"\n    …\n    oakCors middleware creator function, by sending it an array of allowed origins—in this case, http://localhost:3000. This will make the API answer to the OPTIONS request with an Access-Control-Allow-Origin: http://localhost:3000 header, which will signal to the browser that if the website making requests is running on http://localhost:3000, it should allow further requests.This will work just fine. However, having this *hardcoded* domain here seems a little bit strange. We've been injecting all the similar configuration to the application. Remember what we did with the `port` configuration? Let's do the same for the allowed domains.\n    ```", "```js\n    interface CreateServerDependencies {\n      configuration: {\n        port: number,\n        authorization: {\n          key: string,\n          algorithm: Algorithm\n        },\n        oakCors middleware creator.\n    ```", "```js\n    createServer({\n      configuration: {\n        port: 8080,\n        authorization: {\n          key: authConfiguration.key,\n          algorithm: authConfiguration.algorithm\n        },\n        http://localhost:3000. \n    ```", "```js\n    $ deno run --allow-net --unstable --allow-env --allow-read --allow-write --allow-plugin src/index.ts\n    Application running at http://localhost:8080\n    ```", "```js\n    <!DOCTYPE html>\n    <html lang=\"en\">\n      <head>\n        <meta charset=\"UTF-8\" />\n        <meta name=\"viewport\" content=\"width=device-width,\n           initial-scale=1.0\" />\n        <title>Test CORS</title>\n      </head>\n      <body>\n        <div id=\"status\"></div>\n        <script type=\"module\">              \n        div tag and altering its inner HTML code in the cases that the request works or fails so that it's easier for us to diagnose.In order for us to serve the HTML file and test this, you can leverage Deno and its ability to run remote scripts.\n    ```", "```js\n    $ deno run --allow-net --allow-read https://deno.land/std@0.83.0/http/file_server.ts -p 3000 --host localhost\n    HTTP server listening on http://localhost:3000/\n    ```", "```js\n    $ deno run --allow-net --allow-read https://deno.land/std/http/file_server.ts -p 3001 --host localhost\n    HTTP server listening on http://localhost:3001/\n    ```", "```js\n    await app.listen({\n      port,\n    certFile and keyFile properties expect a path to the certificate and the key files. If you don't have a certificate or you don't know how to create a self-signed one, no worries. Since this is only for learning purposes, you can use ours from the book's files at [https://github.com/PacktPublishing/Deno-Web-Development/tree/master/Chapter07/sections/1-enabling-cors-and-https/museums-api](https://github.com/PacktPublishing/Deno-Web-Development/tree/master/Chapter07/sections/1-enabling-cors-and-https/museums-api). Here, you'll find `certificate.pem` and `key.pem` files that you can download and use. You can download them wherever you want in your computer, but we'll assume they're at the project root folder (`museums-api`) in the next code samples.\n    ```", "```js\n    export async function createServer({\n      configuration: {\n        …\n        secure,\n        keyFile,\n        certFile,\n      },\n      …\n    }: CreateServerDependencies) {\n    ```", "```js\n    interface CreateServerDependencies {\n      configuration: {\n        port: number,\n        authorization: {\n          key: string,\n          algorithm: Algorithm\n        },\n        allowedOrigins: string[],\n        secure: boolean,\n        keyFile: string,\n        certFile: string\n      },\n      museum: MuseumController,\n      user: UserController\n    }\n    ```", "```js\n    export async function createServer({\n      configuration: {\n        port,\n        authorization,\n        allowedOrigins,\n        secure,\n        keyFile,\n        certFile,\n      },\n      museum,\n      user\n    }: CreateServerDependencies) {\n    …\n    await app.listen({\n      port,\n      secure,\n      keyFile,\n      certFile\n    });\n    ```", "```js\n    createServer({\n      configuration: {\n        port: 8080,\n        authorization: {\n          key: authConfiguration.key,\n          algorithm: authConfiguration.algorithm\n        },\n        allowedOrigins: ['http://localhost:3000'],\n        secure: true,\n        certFile: './certificate.pem',\n        keyFile: './key.pem'\n      },\n      museum: museumController,\n      user: userController\n    })\n    ```", "```js\n      app.addEventListener('listen', e => {\n        console.log(`Application running at \n          ${e.secure ? 'https' : 'http'}://${e.hostname ||\n            'localhost'}:${port}`)\n      })\n    ```", "```js\n    $ deno run --allow-net --unstable --allow-env --allow-read --allow-plugin src/index.ts\n    Application running at https://localhost:8080\n    ```", "```js\nclient.connectWithUri(\"mongodb+srv://deno-\n  api:password@denocluster.wtit0.mongodb.net/\n    ?retryWrites=true&w=majority\")\nconst db = client.database(\"getting-started-with-deno\");\n…\nconst authConfiguration = {\n  algorithm: 'HS512' as Algorithm,\n  key: 'my-insecure-key',\n  tokenExpirationInSeconds: 120\n}\ncreateServer({\n  configuration: {\n    port: 8080,\n    authorization: {\n      key: authConfiguration.key,\n      algorithm: authConfiguration.algorithm\n    },\n    allowedOrigins: ['http://localhost:3000'],\n    secure: true,\n    certFile: './certificate.pem',\n    keyFile: './key.pem'\n  },\n…\n```", "```js\n    web:\n      port: 8080\n    cors:\n      allowedOrigins:\n        - http://localhost:3000\n    https:\n      key: ./key.pem\n      certificate: ./certificate.pem\n    jwt:\n      algorithm: HS512\n      expirationTime: 120\n    mongoDb:\n      clusterURI: deno-cluster.wtit0.mongodb.net/\n        ?retryWrites=true&w=majority\n      database: getting-started-with-deno\n    ```", "```js\n    export async function load() {\n    }\n    ```", "```js\n    import type { Algorithm } from \"../deps.ts\";\n    type Configuration = {\n      web: {\n        port: number\n      },\n      cors: {\n        allowedOrigins: string[],\n      },\n      https: {\n        key: string,\n        certificate: string\n      },\n      jwt: {\n        algorithm: Algorithm,\n        expirationTime: number\n      },\n      mongoDb: {\n        clusterURI: string,\n        database: string\n      },\n    }\n    export async function load(): Promise<Configuration> {\n    …\n    ```", "```js\n    export async function load(env = 'dev'):\n      Promise<Configuration> {\n      Object so that we can access it. For this, we'll use the YAML encoding functionality from the standard library.\n    ```", "```js\n    export { parse } from\n      \"https://deno.land/std@0.71.0/encoding/yaml.ts\"\n    ```", "```js\n    import { Algorithm, parse } from \"../deps.ts\";\n    …\n    export async function load(env = 'dev'):\n      Promise<Configuration> {\n      src/index.ts and do it.\n    ```", "```js\n    import { load as loadConfiguration } from\n      './config/index.ts';\n    const config = await loadConfiguration();\n    …\n    client.connectWithUri(`mongodb+srv://\n      deno-api:password @${config.mongoDb.clusterURI}`);\n    …\n    const authConfiguration = {\n      algorithm: config.jwt.algorithm,\n      key: 'my-insecure-key',\n      tokenExpirationInSeconds: config.jwt.expirationTime\n    }\n    …\n    createServer({\n      configuration: {\n        port: config.web.port,\n        authorization: {\n          key: authConfiguration.key,\n          algorithm: authConfiguration.algorithm,\n        },\n        allowedOrigins: config.cors.allowedOrigins,\n        secure: true,\n        certFile: config.https.certificate,\n        keyFile: config.https.key\n      },\n    …\n    ```", "```js\n    type Configuration = {\n      web: {…};\n      cors: {…};\n      https: {…};\n      jwt: {\n        algorithm: Algorithm;\n        expirationTime: number;\n        load function so that it extends the configuration object.\n    ```", "```js\n    export async function load(env = 'dev'):\n      Promise<Configuration> {\n      const configuration = parse(await Deno.readTextFile\n        (`./config.${env}.yaml`)) as Configuration;\n      return {\n        ...configuration,\n        mongoDb: {\n          ...configuration.mongoDb,\n          username: 'deno-api',\n          password: 'password'\n        },\n        jwt: {\n          ...configuration.jwt,\n          key: 'my-insecure-key'\n        }\n      };\n    }\n    ```", "```js\n    export async function load(env = 'dev'):\n     Promise<Configuration> {\n      const configuration = parse(await Deno.readTextFile\n       (`./config.${env}.yaml`)) as Configuration;\n      return {\n        ...configuration,\n        mongoDb: {\n          ...configuration.mongoDb,\n          username: Deno.env.get\n            ('MONGODB_USERNAME') ||'deno-api',\n          password: Deno.env.get\n            ('MONGODB_PASSWORD') || 'password'\n        },\n        jwt: {\n          ...configuration.jwt,\n          key: Deno.env.get('JWT_KEY') || 'insecure-key'\n        }\n      }\n    }\n    ```", "```js\n    client.connectWithUri\n    (`mongodb+srv://${--allow-env permission. Let's try it.Just make sure you add the username and password values you previously created. The code can be seen in the following snippet:\n    ```", "```js\n$ MONGODB_USERNAME=add-your-username MONGODB_PASSWORD=add-your-password JWT_KEY=add-your-jwt-key deno run --allow-net --unstable --allow-env --allow-read --allow-plugin src/index.ts\nApplication running at https://localhost:8080\n```", "```js\nC:\\Users\\alexandre>set MONGODB_USERNAME=your-username\nC:\\Users\\alexandre>set MONGODB_PASSWORD=your-password\nC:\\Users\\alexandre>set JWT_KEY=jwt-key\n```", "```js\n    interface Config {\n      baseURL: string;\n    }\n    export function getClient(config: Config) {\n      return {\n        login: () => null,\n        register: () => null,\n        getMuseums: () => null,\n      };\n    }\n    ```", "```js\n    import type { RegisterPayload, LoginPayload,\n      UserDto  } from \"../users/types.ts\";\n    …\n    const headers = new Headers();\n    headers.set(\"content-type\", \"application/json\");\n    …\n    register: ({ username, password }: RegisterPayload):\n      Promise<UserDto> => {\n      return fetch(\n        `${config.baseURL}/api/users/register`,\n        {\n          body: JSON.stringify({ username, password }),\n          method: \"POST\",\n          headers,\n        },\n      ).then((r) => r.json());\n    },\n    …\n    ```", "```js\n    export function getClient(config: Config) {\n      let token = \"\";\n      …\n      return {\n        …\n        login: (\n          { username, password }: LoginPayload,\n        ): Promise<{ user: UserDto; token: string }> => {\n          return fetch(\n            `${config.baseURL}/api/login`,\n            {\n              body: JSON.stringify({ username, password }),\n              method: \"POST\",\n              headers\n            },\n          ).then((response) => {\n            const json = await response.json();\n    token = json.token;\n    return json;\n          });\n      },\n    ```", "```js\ngetMuseums: (): Promise<{ museums: Museum[] }> => {\n  const authenticatedHeaders = new Headers();\nauthenticatedHeaders.set(\"authorization\", `Bearer\n  ${token}`);\n  return fetch(\n    `${config.baseURL}/api/users/register`,\n    {\n      headers: authenticatedHeaders,\n    },\n).then((r) => r.json());\n},\n```", "```js\napiRouter.get(\"/client.js\", async (ctx) => {\n    const {\n      diagnostics,\n      files,\n    } = await Deno.emit(\n      \"./src/client/index.ts\",\n      { bundle: \"esm\" },\n    );\n    if (!diagnostics.length) {\n      ctx.response.type = \"application/javascript\";\n      ctx.response.body = files[\"deno:///bundle.js\"];\n      return;\n    }\n  });\n```", "```js\n{\n  …\n  \"deno.unstable\": true\n}\n```", "```js\n    <!DOCTYPE html>\n    <html lang=\"en\">\n      <head>\n        <meta charset=\"UTF-8\" />\n        <meta name=\"viewport\" content=\"width=device-width,\n          initial-scale=1.0\" />\n        <title>Testing client</title>\n      </head>\n      <body>\n      </body>\n    </html>\n    ```", "```js\n    <script type=\"module\">\n      import { getClient } from\n        \"https://localhost:8080/api/client.js\";\n    </script>\n    ```", "```js\n     async function main() {\n      const client = getClient\n        ({ baseURL: \"https://localhost:8080\" });\n      const username = window.prompt(\"Username\");\n      const password = window.prompt(\"Password\");\n      await client.login({ username, password });\n      const { museums } = await client.getMuseums();\n      museums.forEach((museum) => {\n        const node = document.createElement(\"div\");\n        node.innerHTML = `${museum.name} –\n          ${museum.description}`;\n        document.body.appendChild(node);\n      });\n    }\n    ```", "```js\n    $ MONGODB_USERNAME=deno-api MONGODB_PASSWORD=your-password deno run --allow-net --allow-env --unstable --allow-read --allow-plugin --allow-write src/index.ts\n    Application running at https://localhost:8080\n    ```", "```js\n    $ deno run --allow-net --allow-read https://deno.land/std@0.83.0/http/file_server.ts -p 3000 --host localhost --key key.pem --cert certificate.pem\n    HTTPS server listening on https://localhost:3000/\n    ```", "```js\n$ curl -X POST -d'{\"username\": \"your-username\", \"password\": \"your-password\" }' -H 'Content-Type: application/json' https://localhost:8080/api/users/register\n```"]