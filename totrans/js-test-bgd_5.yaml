- en: Chapter 5. Putting the Test Plan Into Action
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章：将测试计划付诸行动
- en: Welcome to the fifth chapter. This chapter is pretty straightforward; we basically
    put the plan discussed in [Chapter 4](ch04.html "Chapter 4. Planning to Test"),
    Planning to Test, into action.
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 欢迎来到第五章。这一章相当直接；我们基本上把在[第4章](ch04.html "第4章：计划测试")，计划测试中讨论的计划付诸行动。
- en: Heres how we are going to implement our test plan. Well first start by testing
    the expected and acceptable values, and follow this by testing the expected but
    unacceptable values. Next, well test the logic of our program. Lastly, we'll perform
    integrated testing and testing of unexpected values or actions.
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我们将如何实施我们的测试计划的步骤如下：首先开始测试预期和可接受的值，接着测试预期但不可接受的值。接下来，我们将测试程序的逻辑。最后，我们将执行集成测试和测试意外值或行为。
- en: 'Apart from performing the above tests, here''s what we will also cover in this
    chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 除了执行上述测试之外，我们还将在本章涵盖以下内容：
- en: Regression testing in action—youll learn how to perform regression testing by
    fixing bugs and then testing your program again
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回归测试实战—你将学习如何通过修复bug然后再次测试你的程序来执行回归测试
- en: The differences between client-side testing and server-side testing
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端测试与服务器端测试的区别
- en: How using Ajax may make a difference to testing
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用Ajax对测试产生影响
- en: What to do when a test returns a wrong result
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当测试返回错误结果时该怎么办
- en: What happens if your visitor turns off JavaScript
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果访客关闭了JavaScript会发生什么
- en: How to enhance performance by compressing your JavaScript code
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何通过压缩你的JavaScript代码来提高性能
- en: So let us get our hands dirty, and start testing right away.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 那么让我们动手开始测试吧。
- en: 'Applying the test plan: running your tests in order'
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用测试计划：按顺序运行你的测试
- en: In this section, we'll simply apply the test plan to our program. For simplicity's
    sake, we will record any bugs or errors in the Bug Report Form found in the sample
    test plan from the previous section. In addition to that, at the end of each test,
    we will record a Pass or Fail text in the `sample_text_plan.doc`, which we created
    in the previous chapter. However, take note that in the real world (especially
    if you are working on a custom project for your client), it is extremely important
    that you document the results, even if your tests are correct. This is because,
    very often, producing the correct test results is part and parcel of handing over
    the code to your client.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将简单地将测试计划应用于我们的程序。为了简单起见，我们将记录任何在上一节中提供的示例测试计划中的缺陷或错误。除此之外，在每次测试结束时，我们将在`sample_text_plan.doc`中记录一个通过或失败的文本，我们是在上一章中创建的。然而，请注意，在现实世界中（尤其是如果你为你的客户做一个定制的项目），记录结果非常重要，即使你的测试是正确的。这是因为，很多时候，产生正确的测试结果是向客户交付代码的一部分。
- en: Just a reminder—the test plan that we are going to use was created in the previous
    chapter. You can find the test plan in the `source code` folder of [Chapter 4](ch04.html
    "Chapter 4. Planning to Test"), entitled `sample_test_plan.doc`. If you are in
    a hurry and would like to see the entire completed test plan where all tests have
    been carried out already, head to the `source code` folder of [Chapter 5](ch05.html
    "Chapter 5. Putting the Test Plan Into Action") and open up `sample-testplan-bug-form-filled.doc`.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便提醒一下—我们即将使用的测试计划是在上一章创建的。你可以在[第4章](ch04.html "第4章：计划测试")的`source code`文件夹中找到测试计划，文件名为`sample_test_plan.doc`。如果你急于想看一个完整的测试计划，其中已经执行了所有测试，请前往[第5章](ch05.html
    "第5章：将测试计划付诸行动")的`source code`文件夹，并打开`sample-testplan-bug-form-filled.doc`。
- en: 'In case you do not wish to flip the pages or open up your computer just to
    see the list of the tests, the list of tests are as follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不想翻页或打开电脑只是为了查看测试列表，测试列表如下：
- en: Test Case 1
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试用例1
- en: 'Test Case 1a: White Box Testing'
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试用例1a：白盒测试
- en: 'Test Case 1b: Black Box Testing'
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试用例1b：黑盒测试
- en: 'Test Case 1bi: Boundary Value Testing'
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试用例1bi：边界值测试
- en: 'Test Case 1bii: Testing for illegal values'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试用例1bii：测试非法值
- en: 'Test Case 2: Testing Program''s logic'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试用例2：测试程序的逻辑
- en: 'Test Case 3: Integration Testing'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试用例3：集成测试
- en: 'Test Case 3a: Testing the entire program with expected values'
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试用例3a：使用预期值测试整个程序
- en: 'Test Case 3b: Testing the robustness of the second form.'
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试用例3b：测试第二个表单的健壮性。
- en: With this in mind, let us proceed to the first test.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 带着这个想法，让我们开始第一次测试。
- en: 'Test Case 1: Testing expected and acceptable values'
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试用例1：测试预期和可接受的值
- en: Testing expected and acceptable values refers to the white box test phase. We
    will now execute the test as per our plan (this is First test scenario).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 测试预期和可接受值指的是白盒测试阶段。我们现在将按照计划执行测试（这是第一个测试场景）。
- en: 'Time for action—Test Case 1a: testing expected and acceptable values by using
    white box testing'
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间—测试案例1a：通过白盒测试测试预期和可接受值
- en: In this section, we will start our test by using values that we have predetermined
    during the planning phase. The source code that you are using for this part of
    the chapter is `perfect-code-for-jslint.html`, which can be found in the `source
    code` folder of [Chapter 3](ch03.html "Chapter 3. Syntax Validation"). What we
    will do here is enter the expected and acceptable values. We will start testing
    by using the input values for input value case 1 as per our sample test document.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在此部分，我们将通过使用在规划阶段预先确定的值来开始我们的测试。您在本章节中使用的源代码是`perfect-code-for-jslint.html`，该代码可在[第3章](ch03.html
    "第3章 语法验证")的`source code`文件夹中找到。我们在此将输入预期的和可接受的数据值。我们将从使用输入值案例1的输入值开始测试，正如我们的示例测试文档所规划的那样。
- en: Open the source code in your favorite web browser.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用您最喜欢的网络浏览器打开源代码。
- en: When you open your program in your web browser, the focus should be on the first
    input field. Enter the name **Johnny Boy** as per our plan. After you have entered
    **Johnny Boy** in the first input field, go on to the next field.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您在网络浏览器中打开您的程序时，焦点应该在第一个输入字段上。按照我们的计划输入名字**Johnny Boy**。在您在第一个输入字段中输入**Johnny
    Boy**后，继续下一个字段。
- en: As you change your focus to the next field, you will see a new input field appearing
    on the right-hand side of the original input field that contains the value you
    have entered. If this happens, then you have received a correct and expected output
    for the first input. If you do not understand what this means, feel free to refer
    back to [Chapter 4](ch04.html "Chapter 4. Planning to Test"), *Planning to Test*,
    and look at the screenshot given for the expected output.
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当您将焦点转移到下一个字段时，您会在原始输入字段的右侧看到一个新的输入字段出现。如果出现这种情况，那么您为第一个输入收到了正确和预期的输出。如果您不理解这意味着什么，请随时参考[第4章](ch04.html
    "第4章 测试计划")，*测试计划*，并查看给出的预期输出的屏幕截图。
- en: For the second input, we are required to enter a place of birth. Enter **San
    Francisco**, as per the plan. Click on (or tab to) the next field.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于第二个输入，我们需要输入出生地。按照计划输入**旧金山**。点击（或使用标签）转到下一个字段。
- en: Similarly to the first input field, after you move to the next field you will
    see a new input field containing your input value. This means that you have the
    correct output at this point.
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与第一个输入字段类似，在您移动到下一个字段后，您会看到一个包含您输入值的新输入字段。这意味着您此刻已经有了正确的输出。
- en: This step is similar to the above step, except that the input value is now a
    number. Enter your age as **25**. Then move on to the next field. You should also
    see a new input field on the right.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个步骤与上述步骤类似，不同之处在于输入值现在是一个数字。输入您的年龄**25**。然后继续到下一个字段。您还应该在右侧看到一个新的输入字段。
- en: Now repeat the previous steps for the remaining fields for the form on the left.
    Repeat this action until you see a **Submit** button appearing in the middle of
    the screen.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，请对左侧表单的剩余字段重复上述步骤。重复此操作，直到您在屏幕中间看到一个**提交**按钮。
- en: If a new input field is dynamically created for each of your input, and each
    of the new input fields created dynamically contains the exact same input that
    you have entered, then you have received the correct output. If not, the test
    has failed. However, based on our tests, we have received the correct output.
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果为您的每个输入动态创建了一个新的输入字段，并且每个动态创建的新输入字段都包含您输入的确切内容，那么您就得到了正确的输出。如果不是这样，测试失败。然而，根据我们的测试，我们得到了正确的输出。
- en: Now, refresh the page in your browser, and repeat the test for the input values
    found in input value Case 2\. You should also receive the correct output.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在您的浏览器中刷新页面，并为在输入值案例2中找到的输入值重复测试。您也应该收到正确的输出。
- en: Assuming that both test cases produce the correct output, then congratulations,
    there are no bugs or errors found in this phase of the test. There isn't anything
    special or tedious in this part of the test because we already knew that we would
    receive the expected output based on our input. Now, we will move to something
    more exciting—testing expected but unacceptable values.
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 假设两个测试案例都产生了正确的输出，那么恭喜你，在这个测试阶段没有发现任何错误或bug。这个部分的测试并没有什么特别或繁琐的地方，因为我们已经知道，基于我们的输入，我们会收到预期的输出。现在，我们将进行更加令人兴奋的测试——测试预期但不可接受的数据。
- en: 'Test Case 1b: Testing expected but unacceptable values using black box testing'
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试用例1b：使用黑盒测试测试预期但不可接受的值
- en: In this section, you will continue to execute our test plan. As you continue
    with the tests, you will see that our program is not robust enough and has some
    inherent errors in it. You will learn that you will be required to take note of
    these; the information will be used later when we debug the program (this is second
    test scenario).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个部分，你将继续执行我们的测试计划。随着测试的进行，你会发现我们的程序还不够健壮，存在一些固有错误。你会了解到，你需要记录下这些信息；这些信息将在我们调试程序时使用（这是第二个测试场景）。
- en: 'Time for action—Test case 1bi: testing expected but unacceptable values using
    boundary value testing'
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——测试用例1bi：使用边界值测试测试预期但不可接受的值
- en: For this part of the test, we will continue to use the same source code as we
    have used in the previous section. We'll start by performing boundary values testing.
    Therefore, we will begin the test by using the "minimum values", followed by "maximum
    values". We will skip the common values test case as that was similar to what
    we did in the previous test.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个测试部分，我们将继续使用前一部分相同的源代码。我们将开始进行边界值测试。因此，我们将首先使用“最小值”，然后是“最大值”进行测试。我们将跳过常见值测试用例，因为那与之前的测试相似。
- en: Once again, refresh the page in your web browser.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次刷新你的网页浏览器。
- en: We'll first enter a single character **a** for the input field of **name**.
    After you have entered the value, use your mouse to click on the next input field.
    You should see an input field dynamically created on the right-hand side of the
    first input field, as for the previous test.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，为**姓名**输入字段输入一个字符**a**。输入值后，用鼠标点击下一个输入字段。你应该看到在第一个输入字段的右侧动态创建了一个输入字段，与之前的测试一样。
- en: The output for this test is similar to what you have seen and experienced in
    the previous test. What we are trying to test for is whether the program accepts
    a minimum value. For this phase of the test, we naïvely chose to accept a single
    character as an acceptable input. Because this is acceptable, we should see an
    input field that contains the value of a dynamically generated on the right-hand
    side of the original input field. If you see that, you have the correct output.
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个测试的输出与你在前一个测试中看到和经历的情况类似。我们试图测试的是程序是否接受一个最小值。在这个测试阶段，我们天真地选择接受一个字符作为可接受的输入。因为这是可接受的，我们应该看到一个动态生成的值出现在原始输入字段的右侧。如果你看到了这个，那么你得到了正确的输出。
- en: Similarly, we will enter a single character **a** for the input field for **place
    of birth**. After you have entered the value, use your mouse to click on the next
    input field. You will see an input field dynamically created on the right-hand
    side of the first input field, as seen in the previous test.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同样，为**出生地**输入字段输入一个字符**a**。输入值后，用鼠标点击下一个输入字段。你会看到在第一个输入字段的右侧动态创建了一个输入字段，正如之前的测试所看到的那样。
- en: You should also receive the correct output for this input value. Now let us
    move on to the next input value.
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该对这个输入值也收到正确的输出。现在让我们继续下一个输入值。
- en: We'll now enter the number 1 as planned for the input field age. Similarly,
    after you have entered the value, move the focus to the next input field.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将按计划为输入字段年龄输入数字1。同样，输入值后，将焦点移动到下一个输入字段。
- en: We'll repeat the test by entering the values as planned.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将按照计划重复进行测试。
- en: 'In general, we should not receive any errors at this point of the test. Similar
    to the first test which we have performed earlier, we should see familiar output
    for each of the inputs. However, I would like to point out an important point
    for this phase of the test:'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此阶段的测试中，我们通常不应该收到任何错误。与之前进行的第一次测试类似，我们应该对每个输入都看到熟悉的输出。然而，我想指出这个测试阶段的一个重要点：
- en: We have naïvely chosen a minimum value that might not be practical. Consider
    the various input fields that accept a single character value. To a large extent,
    our original program logic doesn't seem to suit the real world cases. In general,
    we should expect to have at least two or three characters for input fields that
    accept character values. Therefore, we will take this as a bug in our program
    and we'll take note of this on our "Bug Report Form". You may open the `sample-testplan-bug-form-filled.doc`
    document and see how we can take note of this flaw.
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们天真地选择了一个可能不切实际的最小值。考虑一下接受单个字符值的各个输入字段。在很大程度上，我们的原始程序逻辑似乎并不适合实际世界的情况。通常，我们应该期望对于接受字符值的输入字段至少有两个或三个字符。因此，我们将此视为程序中的一个错误，并在我们的“错误报告表”上记录这一点。您可以打开`sample-testplan-bug-form-filled.doc`文件，看看我们如何记录这个缺陷。
- en: Now that we have cleared the minimum values test case, it is time to move to
    the next test case—maximum values.
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 既然我们已经通过了最小值测试用例，现在是时候转到下一个测试用例——最大值。
- en: As usual, refresh your web browser to clear all of the values that were previously
    entered. We'll now begin by entering an extremely long string, of more than 255
    characters.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 像往常一样，刷新您的网页浏览器以清除之前输入的所有值。我们现在将开始输入超过255个字符的极长字符串。
- en: As explained earlier, we should also receive a similar output—a dynamically-generated
    input field that contains our input value.
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 正如早前所解释的，我们还应该收到类似的输出——一个动态生成的输入字段，其中包含我们的输入值。
- en: Similarly, enter the values for the remaining input fields using long strings
    or large values. You should not face any errors.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同样，使用长字符串或大数值为剩余的输入字段输入值。你不应该遇到任何错误。
- en: While we do not have any obvious errors, you may have noticed that we have a
    similar problem to the one we experienced earlier on. Our program does not have
    a boundary value for maximum values as well. It appears that if you try to enter
    values that are larger than your maximum values, the program will still accept
    them, as long as the values are not illegal. Similarly, if you try to enter a
    string that is more than 200 characters, the program will still accept it because
    it is a legal value. This means that our program does not limit the maximum number
    of characters that a user can enter. This can be regarded as a bug. We'll also
    take note of this programing error in our Bug Report Form. You might want to pop
    over to have a look on how we recorded this error. Now that we have completed
    the first phase of our test for expected and unacceptable values, it is time to
    move on to the second phase of this test—testing for expected illegal values.
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 虽然我们没有明显的错误，但您可能已经注意到我们遇到了之前经历过的类似问题。我们的程序也没有最大值边界值。看起来如果你尝试输入大于最大值的价值，程序仍然会接受它们，只要这些值不是非法的。同样，如果你尝试输入超过200个字符的字符串，程序仍然会接受它，因为它是一个合法值。这意味着我们的程序没有限制用户可以输入的最大字符数。这可以被视为一个错误。我们将在“错误报告表”中记录这个编程错误。您可能想去看看我们是如何记录这个错误的。既然我们已经完成了预期和不可接受值的第一阶段测试，现在是时候进行这个测试的第二阶段——测试预期非法值。
- en: 'Time for action—Test case 1bii: testing expected but unacceptable values using
    illegal values'
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——测试用例1bii：使用非法值测试期望但不可接受的价值
- en: There are three input cases for this phase of the test. What we will do in the
    first case of the test is enter numeric values for input fields that require character
    inputs and vice versa.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 此阶段的测试有三种输入情况。在测试的第一个情况中，我们将为需要字符输入的输入字段输入数值，反之亦然。
- en: 'Input Case 1:'
  id: totrans-59
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 输入用例1：
- en: We'll once again refresh our browser to clear out the old values. Next we'll
    begin to enter the expected illegal values. For the "name" input field, we'll
    enter a digit. This can be any number, such as "1". Go on and test it. After you
    have entered the digit, try to move your mouse cursor to the next input field.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将再次刷新浏览器以清除旧的值。接下来，我们开始输入预期的非法值。对于“name”输入字段，我们将输入一个数字。这可以是任何数字，比如“1”。继续测试。在您输入数字后，尝试将鼠标光标移动到下一个输入字段。
- en: As you attempt to shift the focus to the next input field, you should see an
    alert box telling you that you have entered an incorrect type of value. If you
    see the alert box as per our test plan, then there is no error at this point.
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当你试图将焦点移到下一个输入字段时，你应该看到一个警告框，告诉你输入了错误的类型值。如果按照我们的测试计划看到警告框，那么此刻就没有错误。
- en: In order to test the next field, we will need to enter a correct value for the
    first field before we can move on to the next field. Alternatively, we can refresh
    the browser and go directly to the second field. Assuming that you are using the
    first method, let us enter a hypothetical name, **Steve Jobs**, and move on to
    the next input field. Similarly, well try to enter a digit for the **place of
    birth**. After you have entered a digit for the input field, try to move to the
    next field.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了测试下一个字段，我们需要在继续之前输入第一个字段的正确值。另一种方法是刷新浏览器并直接跳到第二个字段。假设您使用第一种方法，让我们输入一个假设的名字，**史蒂夫·乔布斯**，然后继续输入下一个字段。同样，我们尝试为**出生地**输入一个数字。在您为输入字段输入数字后，尝试移动到下一个字段。
- en: Once again, you will see an alert box telling you that you have entered an invalid
    input and that you need to enter a text input. So far so good; there are no errors
    or bugs, and we can continue to the next field.
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 再次，您将看到一个警告框，告诉您您输入了无效的输入，需要输入文本输入。到目前为止还不错；没有错误或错误，我们可以继续到下一个字段。
- en: Well need to either refresh the browser and go directly to the third field,
    or we will need to enter valid values for the **name** and **place of birth**
    fields before we can move on to the third field. Regardless of the method used,
    we'll try to enter a string for the **age** field. Once you have done that, attempt
    to move on to the next input field.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要刷新浏览器并直接跳到第三个字段，或者我们需要在继续到第三个字段之前为**姓名**和**出生地**字段输入有效值。无论使用哪种方法，我们将尝试为**年龄**字段输入字符串。完成此操作后，尝试移动到下一个输入字段。
- en: You will get an alert box again, telling you that you have entered an input
    of the wrong type. This is as per the plan, and is expected. Therefore, no errors
    or bugs yet.
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您将再次收到警告框，告诉您您输入了错误的类型。这是按照计划，也是预期的。因此，还没有错误或错误。
- en: Repeat the previous steps for the remaining fields, and attempt to move on to
    the next field as you enter the expected but illegal values.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对剩下的字段重复上述步骤，在输入预期但非法值时尝试移动到下一个字段。
- en: For all of the remaining fields, you should receive alert boxes telling you
    that you have entered an input of the wrong type, which is what we expect and
    have planned for.
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于所有剩余的字段，您应该收到警告框，告诉您您输入了错误的类型，这是我们期望和计划的内容。
- en: 'Input Case 2:'
  id: totrans-68
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 输入案例 2：
- en: Now that we have completed the first test scenario, it is time to move on to
    the second test scenario, where we try to enter non-alphanumeric values.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经完成了第一个测试场景，是时候进行第二个测试场景了，在那里我们尝试输入非字母数字值。
- en: The testing process is fairly similar to the first test. We will first refresh
    the browser, and then immediately enter the non-alphanumeric values for the first
    input field—the **name** input field. As per our plan, we will enter **~!@#$%^&*()**
    as the input, and then attempt to move on to the next input field.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试过程与第一个测试相当相似。我们首先刷新浏览器，然后立即为第一个输入字段输入非字母数字值——**姓名**输入字段。按照我们的计划，我们将输入**~!@#$%^&*()**作为输入，然后尝试移动到下一个输入字段。
- en: For the first input field, which requires a character input, you should see
    an alert box telling that only text input is allowed. If you see that, then our
    program works as planned. Now let us move to the next step.
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于第一个输入字段，需要字符输入，您应该看到一个警告框，告诉您只能输入文本。如果您看到这个，那么我们的程序按计划工作。现在让我们进行下一步。
- en: For the next input field, we'll repeat the previous step and we should expect
    the same output as well.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于下一个输入字段，我们将重复上一步，我们期望得到相同的输出。
- en: Now for the third input field, we proceed to enter the same non-alphanumeric
    input values. The only difference we should expect for this step is that the alert,
    which informs us that we have entered a wrong input, will tell us that we need
    to enter digits and not text.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，对于第三个输入字段，我们继续输入相同的非字母数字输入值。预计这一步的区别只是警告，它告诉我们我们输入了错误的输入，会告诉我们需要输入数字而不是文本。
- en: We repeat the previous steps for the remaining fields, and in general we should
    expect to see an alert box informing us that we need to either enter text or enter
    digits, depending on which input field it is. If this is the case, then all is
    well; there are no related errors or bugs for this test scenario.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们对剩余的字段重复上述步骤，通常我们应该期望看到一个警告框，告诉我们需要输入文本或数字，这取决于哪个输入字段。如果是这样，那么一切顺利；这个测试场景中没有相关的错误或错误。
- en: 'Input Case 3:'
  id: totrans-75
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 输入案例 3：
- en: Now it is time to perform the third test scenario, where we enter negative values
    for input fields that require numerical inputs.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是我们执行第三个测试场景的时候，我们在需要数字输入的输入字段中输入负值。
- en: Once again, we'll refresh the browser to clear the old values. We'll proceed
    to enter the values as planned for the first two input fields. We will enter **Johnny
    Boy** and **San Francisco** for the input fields of **name** and **place of birth**,
    respectively.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次，我们将刷新浏览器以清除旧值。我们将按计划输入前两个输入字段。我们将输入**Johnny Boy**和**San Francisco**作为**姓名**和**出生地**的输入字段。
- en: Once you have performed the previous step, enter **-1** for the remaining input
    fields. As you enter **-1** for these fields, you should see that our program
    does not detect negative values. Instead, it gives an incorrect response telling
    us that we should enter digits.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成上一个步骤后，输入剩余字段的**-1**。当你为这些字段输入**-1**时，你应该看到我们的程序没有检测到负值。相反，它给出了一个错误的响应，告诉我们应该输入数字。
- en: In reality, our program should be robust enough to spot negative values. However,
    as shown in the previous tests, our program appears to have the incorrect response
    to an illegal value. Our program does spot the error, but it returns an incorrect
    response. The response given is an alert box, telling you that the input must
    be a digit. This is technically incorrect, because our input is a digit, albeit
    a negative one.
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 实际上，我们的程序应该足够健壮，能够识别负值。然而，如前述测试所示，我们的程序对非法值似乎有错误的响应。我们的程序确实发现了错误，但它返回了一个错误的响应。给出的响应是一个警告框，告诉您输入必须是数字。这在技术上是错误的，因为我们的输入是一个数字，尽管是一个负数。
- en: This means that our program does spot negative values, but it returns an incorrect
    response. This means that we have a serious bug here. We need to take note of
    this bug in our sample documentation by documenting this error on the "Bug Report
    Form". You may make a look at how I have documented this in the `sample test plan`
    document.
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这意味着我们的程序确实发现了负值，但它返回了一个错误的响应。这意味着我们这里有一个严重的错误。我们需要在我们的样本文档中注意这个错误，通过在“错误报告表单”上记录这个错误来document
    this error。你可以看看我在`sample test plan`文档中是如何记录这个的。
- en: Whew! This subsection is kind of long and tedious. That's right, testing can
    be tedious, and by now you should see that a good program design will incorporate
    the issues that we tested in this section. You will notice that, at least for
    our purposes here, checking of the input values to make sure that the input is
    what we need is fundamental to our program's success; if the input values are
    wrong, there is no point in testing the remaining program, as we are almost certain
    to receive a wrong output for a wrong input.
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 哇！这个小节有点长和无聊。没错，测试可以是无聊的，到现在你应该看到我们在这个部分测试的问题都会包含在一个好的程序设计中。你会注意到，至少对我们在这里的目的来说，检查输入值以确保输入是我们需要的，对我们程序的成功是基本的；如果输入值错误，测试剩下的程序就没有意义，因为我们几乎可以确定会因为错误的输入而得到错误的输出。
- en: 'Test Case 2: Testing the program logic'
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试用例2：测试程序逻辑
- en: In this subsection, we will attempt to test the robustness of the program in
    terms of the program logic. Although we have somewhat tested the program logic
    by ensuring that the input is correct, there is one more aspect that we need to
    test according to our test plan, and that is the present age and the retirement
    age.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在本小节中，我们将尝试在程序逻辑方面测试程序的健壮性。虽然我们已经通过确保输入正确 somewhat 测试了程序逻辑，但根据我们的测试计划，还有一方面我们需要测试，那就是现在的年龄和退休年龄。
- en: Time for action—testing the program logic
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——测试程序逻辑
- en: 'In general, we will attempt to enter a retirement age that is less than the
    current age. Now let us test the robustness of the program:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，我们将尝试输入一个比当前年龄小的退休年龄。现在让我们测试程序的健壮性：
- en: Let us refresh the browser, and then we'll enter the values as per our plan.
    Well first enter **Johnny Boy** and then **San Francisco** for the input fields
    of **name** and **place of birth**, respectively.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们刷新浏览器，然后按照我们的计划输入值。首先输入**Johnny Boy**，然后输入**San Francisco**作为**姓名**和**出生地**的输入字段。
- en: 'Now, take note of this step: we will now enter **30** for **age** and continue
    with the other fields.'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，请注意这个步骤：我们将现在输入**30**作为**年龄**，并继续其他字段。
- en: When you reach the input field **age at which you wish to retire**, you will
    want to enter a value that is less than the **age** field. As per our test plan,
    we will enter **25**. After this, we will attempt to move on to the next field.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你到达**希望退休的年龄**输入字段时，你将想输入一个小于**年龄**字段的值。根据我们的测试计划，我们将输入**25**。之后，我们将尝试移动到下一个字段。
- en: Because we were able to successfully move on to the next field, this means that
    our program is not robust enough. Our program should not accept a retirement age
    value that is less than the present age value. Therefore, even if our program
    does produce a final outcome, we can be sure that the output is not what we want,
    because the logic is already incorrect.
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 因为我们成功移动到了下一个字段，这意味着我们的程序还不够健壮。我们的程序不应该接受小于当前年龄值的退休年龄值。因此，即使我们的程序确实产生了最终结果，我们也可以确定输出不是我们想要的，因为逻辑已经是错误的。
- en: As such, we will need to take note of the logical error found in this phase
    of the test. Well take note of this on the Bug Report Form once again. Now we
    will move on to the final stage of our test.
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 因此，我们需要注意在这个测试阶段发现的逻辑错误。我们再次在错误报告表上记录这个错误。现在我们将进行我们测试的最后阶段。
- en: 'Test Case 3: Integration testing and testing unexpected values'
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试案例3：集成测试和测试意外值
- en: We have reached the final phase of our test. In this subsection, we will move
    on to integrated testing by first testing the whole program by using expected
    and acceptable values, followed by breaking the flow of form submission by changing
    the values of the second form.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了测试的最后阶段。在这一小节中，我们将先使用预期和可接受值测试整个程序，然后通过更改第二个表单的值来中断表单提交流程。
- en: 'Time for action—Test Case 3a: testing the entire program with expected values'
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——测试案例3a：使用预期值测试整个程序
- en: 'There are four sets of test values for the first test. In general, we will
    enter all values, and then submit the form to see if we are getting the response
    that we are expecting: the input values for input Case 1 and input Case 3 will
    result in an output stating that the user is not able to retire on time, and the
    input values for input Case 2 and input Case 4 will result in an output stating
    that the user will be able to retire on time. With that in mind, let us start
    with the first set of input values:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 第一组测试共有四组数据。通常情况下，我们会输入所有的值，然后提交表单，看看我们是否能得到预期的响应：输入案例1和输入案例3的输入值将导致输出显示用户无法按时退休，而输入案例2和输入案例4的输入值将导致输出显示用户将能够按时退休。有了这个想法，让我们从第一组输入值开始：
- en: 'Going back to your web browser, refresh your program, or re-open the source
    code if you have closed the program. We''ll enter the values as planned: **Johnny
    Boy** and **San Francisco** for **name** and **place of birth**.'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 回到你的网页浏览器，刷新你的程序，或者如果你关闭了程序，重新打开源代码。我们按照计划输入值：**Johnny Boy** 和 **San Francisco**
    作为**姓名**和**出生地**。
- en: Next, we'll enter **25** for **age** and then **1000** for **spending per month**.
    Well repeat these steps for the remaining values, until we see the **Submit**
    button that is dynamically generated on the second form.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将输入**25**作为**年龄**，然后输入**1000**作为**每月支出**。我们将重复这些步骤，直到我们在第二个表单上看到动态生成的**提交**按钮。
- en: 'Once you see the **Submit** button, click on the button to submit the values.
    You should see some text being generated in the **Final Response** box. If you
    see that the output contains the name, retirement age, the correct output value
    for the required amount of money we need to retire, and more importantly the response
    **you will be able to retire by 55 years old**, as shown in the following screenshot,
    then there are no bugs in the program.![Time for action—Test Case 3a: testing
    the entire program with expected values](img/0004_05_01.jpg)'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你看到**提交**按钮，点击按钮提交值。你应该在**最终响应**框中看到一些文本被生成。如果你看到输出包含姓名、退休年龄、退休所需金额的正确输出值，更重要的是，响应**你将在55岁时退休**，如下面的屏幕截图所示，那么程序中没有错误！![行动时间—测试案例3a：使用预期值测试整个程序](img/0004_05_01.jpg)
- en: Now let us move on to entering the values for Case 2\. Similarly, well refresh
    the browsers, and then begin to enter all of the values as planned.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们继续输入案例2的值。同样，我们将刷新浏览器，然后开始输入所有计划中的值。
- en: 'When you see the **Submit** button that is created dynamically, click on the
    button to submit the form. In this test case, you will see that the user will
    not {kind of crucial difference!} be able to retire on time, as shown in the following
    screenshot:![Time for action—Test Case 3a: testing the entire program with expected
    values](img/0004_05_02.jpg)'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你看到动态创建的**提交**按钮时，点击该按钮以提交表单。在这个测试案例中，你会看到用户将**无法按时退休**，如下面的屏幕截图所示:![行动时间—测试用例3a：使用预期值测试整个程序](img/0004_05_02.jpg)
- en: If you receive the output as shown in the previous screenshot, then there are
    no errors up to this point. So let's move on to the input values for the third
    case.
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你收到前一张截图中的输出，那么到目前为止没有错误。所以让我们继续第三种情况的输入值。
- en: Refresh your browser again, and then start entering the values as planned. The
    values to take note of include the **salary per month** and **age at which you
    wish to retire**. In general, we have set the values in order to test if we can
    create the output to either be able to retire on time or be unable to retire on
    time.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次刷新你的浏览器，然后按照计划开始输入值。需要注意的值包括**每月工资**和**你想退休的年龄**。通常，我们已经设定了这些值，以测试我们是否能够创建输出，以便能够按时退休或不按时退休。
- en: 'Continue entering values until you see the **Submit** button that is dynamically
    generated. Click on the **Submit** button to submit the form. You will see the
    output as shown in the next screenshot:![Time for action—Test Case 3a: testing
    the entire program with expected values](img/0004_05_03.jpg)'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续输入值，直到你看到动态生成的**提交**按钮。点击**提交**按钮以提交表单。你会看到如下截图所示的输出:![行动时间—测试用例3a：使用预期值测试整个程序](img/0004_05_03.jpg)
- en: If you received the previous output, then there are no errors or bugs.
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你收到了之前的输出，那么到目前为止没有错误或故障。
- en: Now, let us move on to the final case—case 4\. We'll basically repeat the steps
    as done previously. I just need you to take note of the input values of **salary
    per month**. Notice that the input value is **100000**, and that the retirement
    age did not change. We are trying to simulate a situation where the user will
    be able to retire on time.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们进入最后一个案例——案例4。我们基本上会重复之前的步骤。我只需要你注意**每月工资**的输入值。注意输入值是**100000**，退休年龄没有改变。我们试图模拟用户能够按时退休的情况。
- en: 'Continue to enter the values until you see the **Submit** button that is dynamically
    generated. Click on the **Submit** button to submit the form. You will see the
    output as shown in the next screenshot:![Time for action—Test Case 3a: testing
    the entire program with expected values](img/0004_05_04.jpg)'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续输入值，直到你看到动态生成的**提交**按钮。点击**提交**按钮以提交表单。你会看到如下截图所示的输出:![行动时间—测试用例3a：使用预期值测试整个程序](img/0004_05_04.jpg)
- en: Once again, if you received the output shown in the previous screenshot, then
    you have received the correct output. And with this, we have completed the first
    part of this test phase.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 再次，如果你收到了前一张截图中的输出，那么你已经收到了正确的输出。有了这一点，我们已经完成了这个测试阶段的 第一部分。
- en: In general, we have tested the whole program to see if we are getting the expected
    output. We used different values to generate the two possible outputs of being
    able to retire on time or being unable to retire on time. Not only have we have
    received the correct output, we have also tested the robustness of our functions
    in terms of calculating the outcome.
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通常，我们已经测试了整个程序，以查看我们是否得到了预期的输出。我们使用了不同的值生成了两种可能的输出：能够按时退休或无法按时退休。我们不仅已经收到了正确的输出，我们还测试了在计算结果方面的函数的健壮性。
- en: With the previous factors in mind, it is time to move on to the second phase
    of the test—testing the robustness of the second form.
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 考虑到之前的因素，是时候进入测试的第二阶段了——测试第二个表单的健壮性。
- en: 'Time for action—Test Case 3b: testing robustness of the second form'
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间—测试用例3b：测试第二个表单的健壮性
- en: If you have been following me right from the first chapter, you may have noticed
    that we have have only disabled the input fields for the form on the left, and
    not the input fields on the right. Apart from doing it deliberately, to show you
    different aspects of JavaScript coding, we have set it up such that we can demonstrate
    to you other aspects of integrated testing. So now, well attempt to change the
    values of the dynamically-generated form and see what happens.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你从第一章就开始跟随我，你可能会注意到我们只是禁用了左侧表单的输入字段，而没有禁用右侧的输入字段。除了故意这样做以向您展示JavaScript编程的不同方面外，我们还设置它可以向我们展示集成测试的其他方面。所以现在，我们将尝试更改动态生成的表单的值看看会发生什么。
- en: Well first refresh the browser, and then begin entering the input values according
    to the plan. After you have finished entering all of the values, change the values
    in the second form as per the test plan.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先刷新浏览器，然后按照计划开始输入输入值。在您输入完所有值之后，根据测试计划更改第二表单中的值。
- en: 'Now, submit the form, and you will see the output as displayed in the next
    screenshot:![Time for action—Test Case 3b: testing robustness of the second form](img/0004_05_05.jpg)'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，提交表单，您将看到如下截图的输出：![行动时间—测试用例3b：测试第二个表单的健壮性](img/0004_05_05.jpg)
- en: Oops! Apparently, there is a fatal flaw in our program. There is no checking
    mechanism or whatsoever for our second form. The second form is present in case
    our users may want to change the values. Right from the start, we naïvely chose
    to believe that the user will enter legal and acceptable values on the second
    form, should they choose to change their input. Now that we know this might not
    be the case, we'll make a note of this on our Bug Report Form".
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 哎呀！显然，我们的程序有一个致命的缺陷。我们的第二个表单没有检查机制，或者说是没有。第二个表单在我们的用户可能想要更改值的情况下存在。从一开始，我们天真地选择相信用户会在第二个表单上输入合法和可接受的值，如果他们选择更改输入。现在我们知道这可能不是事实，我们在“缺陷报告表”上记录这一点。
- en: What just happened?
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: In general, we have executed the entire test plan. Along the way, we have uncovered
    bugs and errors that we will be fixing later. You may find the steps repetitive;
    that is true testing can be repetitive sometimes. But, luckily, our program is
    quite small and hence testing it is manageable.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，我们已经执行了整个测试计划。在这个过程中，我们发现了一些后来要修复的错误。您可能会觉得步骤重复；这是真的，测试有时会重复。但是幸运的是，我们的程序相当小，因此测试它是可以管理的。
- en: Now that we have completed the test, it is time to think about what we can do
    about those errors. We'll start talking about this in the next section.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了测试，是时候考虑我们如何处理那些错误了。我们将在下一部分开始讨论这个问题。
- en: What to do when a test returns an unexpected result
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 当测试返回意外结果时应该做什么
- en: 'In general, when a test returns an unexpected or incorrect result, it means
    that there is a bug or error in our program. Based on our tests, you must certainly
    have noticed that there are weak points in our program. The weak points or errors
    that resulted in a test returning an unexpected result are as follows:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当测试返回意外或错误的结果时，意味着我们的程序中有一个错误或缺陷。根据我们的测试，您肯定已经注意到我们的程序中有薄弱环节。导致测试返回意外结果的薄弱环节或错误如下：
- en: Our program does not support negative values
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的程序不支持负值
- en: The code that we have written does not support boundary values (both maximum
    and minimum values)
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们编写的代码不支持边界值（最大和最小值）。
- en: The second form does not check for correctness in the input values; if we make
    any changes to the values in the second form, the program fails
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个表单不检查输入值的正确性；如果我们更改第二个表单中的任何值，程序就会失败。
- en: These points mean that our code is not robust enough and we need to fix it;
    we will do this right away in the next section.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这些观点意味着我们的代码不够健壮，我们需要修复它；我们将在下一节立即进行。
- en: Regression testing in action
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回归测试在行动
- en: In this section, we will get our hands dirty by performing regression testing.
    We will attempt to simulate a situation that warrants regression testing by writing
    code that fixes the errors found when we initially applied our test plan. After
    writing the code, we will first test the code that we have written, after which
    we will test the entire application to see if it works in coherence.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将通过执行回归测试来亲自动手。我们将尝试通过编写修复我们最初应用测试计划时找到的错误的代码来模拟需要回归测试的情况。编写代码后，我们首先测试编写的代码，然后测试整个应用程序以查看它是否协同工作。
- en: Time for action—fixing the bugs and performing regression testing
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——修复错误并进行回归测试
- en: We'll fix each of the bugs that we've uncovered, one by one. We'll start by
    writing a function that allows our program to support boundary values. The completed
    source code, where all of the errors have been corrected, is found in `Chapter
    5` of the `source code` folder, and is entitled `perfect-code-for-JSLInt-enhanced.html`.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将逐一修复我们发现的每个错误。我们将从编写一个允许我们的程序支持边界值的函数开始。修复所有错误的完整源代码在`source code`文件夹的第[5章](ch05.html
    "第5章. 源代码")中，文件名为`perfect-code-for-JSLInt-enhanced.html`。
- en: Before we move on to the actual coding process for the first bug, let us think
    about what we can do to support boundary values.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始第一个错误的实际编码过程之前，让我们考虑一下我们可以做什么来支持边界值。
- en: Firstly, if we go back to our sample test plan, you will notice that in our
    "Bug Report Form", we have documented that we can try to change the function that
    checks for form input such that it can check for minimum and maximum values. For
    simplicity's sake, we will enable boundary values by checking the length of the
    input. For example "Neo" would mean that there are three input characters and
    "1000" would have four input digits.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，如果我们回到我们的示例测试计划，你会注意到在我们的“Bug报告表单”中，我们已经记录了我们可以尝试更改检查表单输入的函数，使其可以检查最小和最大值。为了简单起见，我们将通过检查输入的长度来启用边界值。例如，“Neo”意味着有三个输入字符，“1000”将有四个数字输入字符。
- en: 'Secondly, because the checking of the input of the first form is done at `submitValues()`,
    we''ll attempt to add in the required checking mechanism of this function. With
    that in mind, we can start the coding process:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，因为第一个表单的输入检查是在`submitValues()`中完成的，我们将尝试添加这个函数所需的检查机制。有了这个想法，我们可以开始编码过程：
- en: 'Open the original source code that we wrote in [Chapter 3](ch03.html "Chapter 3. Syntax
    Validation"), *Syntax Validation*, in your favorite source code editor, and look
    for the function `submitValues()`. Next, add the following code after the `debuggingMessages()`
    function:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开我们在第[3章](ch03.html "第3章. 语法验证")，*语法验证*中编写的原始源代码，在你的最喜欢的源代码编辑器中，寻找`submitValues()`函数。接下来，在`debuggingMessages()`函数之后添加以下代码：
- en: '[PRE0]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: What happened in the previous code is that we have added in a few `if` statements.
    These statements check for the type of input via the `.name` property, and then
    check to see if it is more than the minimum input or less than the maximum output.
    We have set a minimum input length of three characters and a maximum input characters
    of less than 100 length for text inputs. For input that requires numerical inputs,
    we have set a maximum input length of 10 digits. We did not set a minimum input
    length since it is possible that the user may not have any income.
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在之前的代码中发生的事情是我们添加了一些`if`语句。这些语句通过`.name`属性检查输入的类型，然后检查它是否大于最小输入或小于最大输出。我们设置了一个最小输入长度为三个字符和一个最大输入长度小于100个字符的文本输入。对于需要数字输入的输入，我们设置了最大输入长度为10位数字。由于用户可能没有收入，我们没有设置最小输入长度。
- en: Save your file and test the program. Try entering less than three characters
    or more than 100 characters. You should receive an alert box showing that you
    have too large or too small inputs. Similarly, test the input fields that require
    numerical inputs and see if the program detects an input length of more than 10
    digits. If you have received the correct alert boxes for each of the different
    cases, then you have fixed the error.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存你的文件并测试程序。尝试输入少于三个字符或超过100个字符。你应该会收到一个警告框，显示你的输入过大或过小。同样，测试需要数字输入的输入字段，并查看程序是否检测到超过10位数字的输入长度。如果你为每个不同情况收到了正确的警告框，那么你已经修复了错误。
- en: Now that we have fixed the issue regarding boundary values, it is time to move
    on to the next error that we have documented on our "Bug Report Form", which is
    the third error (bug number 3 in our `sample-testplan-bug-form-filled.doc`) that
    we uncovered, which relates to negative values.
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在我们已经修复了与边界值有关的问题，是时候继续处理我们在“Bug报告表单”上记录的下一个错误了，这是我们在`sample-testplan-bug-form-filled.doc`中发现的第三个错误（错误编号3），它与负值有关。
- en: The error is that our program sees a negative input as a non-digit value and
    produces a wrong output message of input must be digit. Therefore, in this case
    we would need to fix this error by tracing back to the source of the problem—the
    functions that are responsible for checking the input.
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 错误在于，我们的程序将负数输入视为非数字值，并产生错误的输出信息，提示输入必须是数字。因此，在这种情况下，我们需要通过追溯到问题的源头——负责检查输入的函数来修复这个错误。
- en: 'Take note that the function that checks the input is `submitValues()`.Now,
    let us move to the actual coding process:'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，检查输入的函数是`submitValues()`。现在，让我们进入实际的编程过程：
- en: 'Go back to your source code and start with the `submitValues()` function. We''ll
    need to have a mechanism that checks for negative input, and this will have to
    return the correct output, which says that **input must be positive**. So here''s
    what we can do:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 回到你的源代码，从`submitValues()`函数开始。我们需要一个检查负数输入的机制，并返回正确的输出，提示**输入必须是正数**。所以我们可以这样做：
- en: '[PRE1]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: By adding the above code, you will be able to check for negative values. The
    above code should be placed within the `submitValues()` function, and before the
    `if` statement which checks for the length of the input.
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过添加上述代码，你将能够检查负值。上述代码应放置在`submitValues()`函数中，在检查输入长度的`if`语句之前。
- en: Save your program and test it. Upon encountering fields that require numeric
    inputs, try entering a negative value, say **-1**. If you receive an alert box
    stating that **input must be positive**, then we have done it right.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存你的程序并测试它。在遇到需要数字输入的表单字段时，尝试输入一个负值，比如**-1**。如果你收到一个警告框，提示**输入必须是正数**，那么我们就做对了。
- en: 'The code for `submitValues()` should include the following lines shown below:'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`submitValues()`的代码应该包括以下行：'
- en: '[PRE2]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The lines in the previous snippet are those lines that we added in this subsection.
    Because we have made sure that we are on the same frequency, we can move on to
    the fourth error (bug number 4 in our `sample_test_plan.doc`), which is regarding
    the program logic.
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述片段中的行是我们在这个小节中添加的。因为我们已经确保了我们的频率相同，所以我们可以继续讨论第四个错误（我们`sample_test_plan.doc`中的第4个bug）。这个错误与程序逻辑有关。
- en: At the start of this chapter, we found out that our program does not detect
    that the retirement age can be smaller than the user's present age. This can be
    fatal for our program. Therefore, we need to add a mechanism that makes sure that
    the retirement age is greater than the user's present age.
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 本章开始时，我们发现程序没有检测到退休年龄可能小于用户当前年龄的情况。这对我们的程序可能是致命的。因此，我们需要添加一个确保退休年龄大于用户当前年龄的机制。
- en: Because the issue lies with the checking of inputs, we will need to turn our
    attention to `submitValues()`.
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 因为问题在于输入的检查，我们需要关注`submitValues()`。
- en: Let us go back to the source code, and add the following code to `submitValues():`
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们回到源代码，在`submitValues()`中添加以下代码：
- en: '[PRE3]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You should enter this code prior to the code done up in the previous subsection.
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该在这段代码之前输入上述代码。
- en: Now, go ahead and test your code. Try entering a retirement age that is less
    than the current age. You should receive an alert message that says retirement
    age must be larger than age.
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，测试你的代码。尝试输入一个小于当前年龄的退休年龄。你应该会收到一个警告消息，提示退休年龄必须大于年龄。
- en: 'If you received this alert, then congratulations, you have got it right! Once
    again, to quickly sum up this section and to make sure that we are on the same
    page, `submitValues()` should include the lines of code as shown next:'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你收到了这个警告，那么恭喜你，你做对了！再次总结这个部分，以确保我们意见一致，`submitValues()`应该包括以下所示的代码行：
- en: '[PRE4]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now let us move on to the last error (bug number 5 in our `sample-testplan-bug-form-filled.doc`)
    that we have uncovered by checking the second form.
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在让我们继续讨论通过检查第二个表单发现的最后一个错误（我们`sample-testplan-bug-form-filled.doc`中的第5个bug）。
- en: We have created our JavaScript program such that as we enter the values for
    each input field, a new input field is created dynamically. This means that after
    all of the input fields have been completed, a new form will be created. In case
    you didn't notice, the new input fields that are created allow users to change
    their values.
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们已经创建了一个JavaScript程序，这样当我们为每个输入字段输入值时，会动态创建一个新的输入字段。这意味着在所有输入字段都完成后，会创建一个新的表单。你可能没有注意到，新创建的输入字段允许用户更改它们的值。
- en: The issue here is that the user may change the input values in the new form,
    which can result in fatal errors as we have no checking mechanisms in place to
    check the values in the second form. So, we naïvely chose to believe that the
    user will act accordingly, and only enter valid values. But obviously, we were
    wrong.
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里的问题在于，用户可能会在新表单中更改输入值，这可能会导致致命错误，因为我们没有检查机制来检查第二表单中的值。所以，我们天真地选择相信用户会相应地行动，只输入有效的值。但显然，我们错了。
- en: Therefore, in order to check the second form, we would most likely have to create
    a new function that checks the second form.
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 因此，为了检查第二表单，我们很可能需要创建一个新的函数来检查第二表单。
- en: Although the second form is generated dynamically, we can still get the values
    within those fields through the methods that we have learned so far. Remember
    that because JavaScript has created the fields in the second form, these fields
    technically exist in memory and are therefore still accessible.
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 尽管第二表单是动态生成的，但我们可以通过到目前为止学到的方法获取这些字段内的值。记住，因为JavaScript在第二表单中创建了字段，这些字段在技术上存在于内存中，因此仍然可以访问。
- en: With that in mind, we'll need to create a function that works on these fields.
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有了这个想法，我们需要创建一个适用于这些字段的函数。
- en: 'Open the source code, and scroll to the last function, which uses jQuery statements.
    Before this function, create the following function:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开源代码，滚动到最后一个使用jQuery语句的函数。在这个函数之前，创建以下函数：
- en: '[PRE5]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Well first start by checking for empty values. Therefore here''s what we can
    do to check for empty values:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，开始检查空值。因此，我们可以这样做来检查空值：
- en: '[PRE6]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In general, we apply what we have learned in the third chapter by using `===`
    instead of `==` when checking for empty values. We basically check the values
    that are found in the dynamically-generated fields, and check to see if they are
    empty.
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通常，我们应用第三章中学到的知识，使用`===`而不是`==`来检查空值。我们基本上检查在动态生成的字段中找到的值，并检查它们是否为空。
- en: Now that we have the code that checks to see if the fields are empty, it is
    time to write code that checks for the correct type of input.
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在我们已经有了检查字段是否为空的代码，是时候编写检查输入正确类型的代码了。
- en: 'We can apply the techniques learned in [Chapter 3](ch03.html "Chapter 3. Syntax
    Validation"), *Syntax Validation*, to check for the correctness of the input.
    In general, we are using regular expression, as we did in the previous chapters,
    to check for the input''s type. Heres what we can do:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以应用在[第3章](ch03.html "第3章 语法验证")中学到的技术*语法验证*来检查输入的正确性。通常，我们使用正则表达式，像前几章一样，来检查输入的类型。我们可以这样做：
- en: '[PRE7]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: For a complete version of the previous code, please check the `source code`
    folder of *Chapter 5*, and refer to the file `perfect-code-for-JSLInt-enhanced.html`.
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要查看完整版本的先前代码，请查看*第5章*的`source code`文件夹，并参考`perfect-code-for-JSLInt-enhanced.html`文件。
- en: However, remember that in the earlier debugging sessions we have created new
    checking mechanisms in order to support boundary values, prevent negative values,
    and to make sure that the retirement age is greater than the user's current age.
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然而，记住，在早期的调试会话中，我们已经创建了新的检查机制，以支持边界值、防止负值，并确保退休年龄大于用户的当前年龄。
- en: 'Because the second form may be changed, the previous errors can occur in the
    second form as well. Therefore, we''ll need to add those checking mechanisms as
    well. To see if you have done it correctly, check the `checkSecondCode()` function
    in the `source code` folder for the file entitled `perfect-code-for-JSLInt-enhanced.html`.
    Here''s a code snippet of `checkSecondCode()`:'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 因为第二表单可能会被更改，之前的错误也可能在第二表单中发生。因此，我们还需要添加那些检查机制。为了看看你是否做得正确，请查看`source code`文件夹中名为`perfect-code-for-JSLInt-enhanced.html`的文件中的`checkSecondCode()`函数。以下是`checkSecondCode()`的代码片段：
- en: '[PRE8]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: What just happened?
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: We have now finished executing the entire test plan, including regression testing.
    Notice that at each phase of the coding process we carried out small tests to
    make sure that our solution works correctly; we have used unit testing once again
    in our regression testing process.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了整个测试计划，包括回归测试。注意，在编码过程的每个阶段，我们都进行了小测试，以确保我们的解决方案正确工作；我们在回归测试过程中再次使用了单元测试。
- en: Also note that we tested the program incrementally; we tested each new function
    or code that we created and made sure that it worked correctly, before we moved
    on to fixing the next error.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们还测试了程序逐步；我们测试了每个新函数或我们创建的代码，并确保它正确工作，在我们修复下一个错误之前。
- en: By going through this process, we will have a much better chance of creating
    good programs and will avoid introducing new errors into our code.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个过程，我们将有更好的机会创建好的程序，并避免将新的错误引入我们的代码。
- en: Apart from performing regression testing as a part of an ongoing process as
    our program changes, there are other important issues regarding the testing of
    our program. Let us move to the first important issue—performance issues.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 除了在我们程序变化的过程中进行回归测试之外，关于我们程序的测试还有其他重要的问题。让我们转到第一个重要问题——性能问题。
- en: Performance issues—compressing your code to make it load faster
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 性能问题——压缩你的代码以使其加载更快
- en: As I mentioned in [Chapter 4](ch04.html "Chapter 4. Planning to Test"), *Planning
    to Test*, the performance of the code that we write is dependent on various factors.
    Performance in general refers to the speed of the execution of your code; this
    is dependent on the algorithms you use for your code. Because algorithm issues
    are beyond the scope of this book, let us focus on something that is much easier
    to achieve, like enhancing the programs performance by compressing your code.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 如我在[第4章](ch04.html "第4章 计划测试")中提到的，*计划测试*，我们编写的代码的性能取决于各种因素。性能通常指的是你代码的执行速度；这取决于你为代码使用的算法。由于算法问题超出了本书的范围，让我们专注于更容易实现的事情，比如通过压缩你的代码来提高程序的性能。
- en: In general, after compressing your code, the file size of your code will be
    smaller and hence lowers disk usage in the cache that is required to store the
    code before execution. It also reduces the amount of bandwidth required to transfer
    your JavaScript file from the web server to the client. So now, let us see how
    we can compress our JavaScript code.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，压缩你的代码后，你的代码文件大小会更小，因此降低了在执行前需要缓存存储代码的磁盘使用量。它还减少了将JavaScript文件从Web服务器传输到客户端所需的带宽。所以现在，让我们看看我们如何压缩我们的JavaScript代码。
- en: 'There are two ways in which we can go about doing this:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以采取两种方式来做这件事：
- en: We can compress our entire program, which means that we will compress our CSS,
    HTML, and JavaScript together.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以压缩整个程序，这意味着我们将压缩我们的CSS、HTML和JavaScript在一起。
- en: We can remove all of the local JavaScript and place it in an external file,
    and then, compress only the external JavaScript. To keep things simple, I'll start
    by using the first method.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以将所有的本地 JavaScript 移到一个外部文件中，然后只压缩这个外部 JavaScript 文件。为了保持简单，我将先使用第一种方法。
- en: Firstly, I want you to visit [http://jscompress.com/](http://jscompress.com/)
    and copy and paste our source code into the input box. Theres an option called
    "**Minify (JSMin)**". This option will compress HTML, CSS, and JavaScript all
    together. Once you have copied the code into the input box, click on **Compress
    JavaScript**.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我想让你访问[http://jscompress.com/](http://jscompress.com/)，并将我们的源代码粘贴到输入框中。有一个选项叫做"**Minify
    (JSMin)**"。这个选项将会一起压缩HTML、CSS和JavaScript。一旦你将代码复制到输入框中，点击**压缩JavaScript**。
- en: You will then see the page refresh and the minified code will be displayed within
    the input box. Copy and paste that code into a new file, and then save it as `testing-compressed.html`.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你会看到页面刷新，并将在输入框中显示压缩后的代码。将这段代码复制粘贴到一个新文件中，然后将其保存为`testing-compressed.html`。
- en: If you go to the `source code` folder, you will notice that I have already done
    the compression process for you. Check the size of the file for `testing-compressed.html`
    and the code that we wrote earlier. Based on the source code that we have, the
    compressed version is 12KB, whereas the original version is 18KB.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你去到`source code`文件夹，你会注意到我已经为你完成了压缩过程。检查`testing-compressed.html`文件和我们之前编写的代码的大小。根据我们所有的源代码，压缩后的版本是12KB，而原始版本是18KB。
- en: 'Now let us try the second method—placing all of the JavaScript in an external
    JavaScript file and compressing that. Heres what we will do:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们尝试第二种方法——将所有的JavaScript放在一个外部的JavaScript文件中并压缩这个文件。我们将这样做：
- en: Cut all of the JavaScript found between the`<head>` and`</head>` tags, and paste
    it into a new document called `external.js`.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 剪切掉`<head>`和`</head>`标签之间的所有 JavaScript，并将其粘贴到一个新的名为`external.js`的文件中。
- en: Save `external.js`, and also save your changes to the HTML document.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存`external.js`，并将HTML文档的更改也保存下来。
- en: Go back to your HTML document, go to the`<head>` and`</head>` tags and insert
    the following:`<script type="text/javascript" src="img/external.js">` between
    them. Then save the file.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 回到你的HTML文档，转到`<head>`和`</head>`标签之间，插入以下内容：`<script type="text/javascript" src="img/external.js">`。然后保存文件。
- en: So there you have it! We have compressed your code so that your code gets loaded
    faster from the web server to the client side.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 这样一来，你的代码就被压缩了，从而使得从服务器加载到客户端的速度更快。
- en: It seems that we have managed to reduce the file size by compressing the code.
    Of course, the difference is not that obvious because our code isn't much. However,
    in reality code can go up to thousands or even tens of thousands of lines of code,
    we have seen with the jQuery library. In such cases, code compression will help
    to enhance performance.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 看来我们成功地通过压缩代码来减小了文件大小。当然，由于我们的代码不多，所以区别并不明显。然而，在实际中，代码可以增加到数千甚至数万行，正如我们看到的jQuery库一样。在这种情况下，代码压缩将有助于提高性能。
- en: Note
  id: totrans-190
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you are a developer who is working under the terms of an Non-Disclosure Agreement
    (NDA), there is a likelihood that you are not allowed to use any of the external
    services that I have previously mentioned. If this is the case, you might want
    to consider using Yahoo's YUI Compressor, which allows you to work directly from
    the command line. For more information, visit [http://developer.yahoo.com/yui/compressor/#using](http://developer.yahoo.com/yui/compressor/#using).
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是一个在保密协议（NDA）下工作的开发者，你可能不允许使用我之前提到的任何外部服务。如果是这种情况，你可能想考虑使用雅虎的YUI压缩器，它允许你直接从命令行工作。更多信息，请访问[http://developer.yahoo.com/yui/compressor/#using](http://developer.yahoo.com/yui/compressor/#using)。
- en: Does using Ajax make a difference?
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Ajax会有所不同吗？
- en: Let me start by briefly explaining what happens when you are using Ajax. JavaScript
    is part of the Ajax equation; the execution of JavaScript is responsible for sending
    information to and loading information from the server. This is achieved by using
    `XMLHttpRequest` object.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 让我先简要解释一下使用Ajax时会发生什么。JavaScript是Ajax方程的一部分；JavaScript的执行负责发送信息和从服务器加载信息。这是通过使用`XMLHttpRequest`对象来实现的。
- en: When the sending and loading of data to and from the server is done using Ajax,
    the testing responsibilities are different; you will not only have to test for
    the various errors that we have covered in the previous chapters, but you will
    also have to test if each error has resulted in the successful sending and loading
    of information and the correct visual response to the user.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用Ajax进行发送和加载数据时，测试责任是不同的；你不仅要测试我们前面章节中涵盖的各种错误，还要测试每个错误是否导致了信息的成功发送和加载以及对用户的正确视觉响应。
- en: However, because you are sending and receiving requests to and from the server,
    you might have to perform some form of server-side testing. This brings us to
    the next part of the topic—the difference between JavaScript testing and server-side
    testing.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，由于你需要和服务器之间发送和接收请求，你可能需要进行某种形式的服务器端测试。这让我们来到了话题的下一部分——JavaScript测试与服务器端测试的区别。
- en: Difference from server-side testing
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与服务器端测试的区别
- en: As mentioned in the previous section, when you are performing tests for Ajax,
    you might have to perform server-side testing. In general, the concepts that you
    have picked up to this point in the book can also be applied to server-side testing.
    Therefore, conceptually, there should be little difference between JavaScript
    testing and server-side testing.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一部分所述，当你在进行Ajax测试时，可能需要进行服务器端测试。通常，到目前为止你在书中所学的概念也可以应用于服务器端测试。因此，从概念上讲，JavaScript测试和服务器端测试之间应该没有太大区别。
- en: However, do take note that server-side testing typically includes serve-side
    code and most probably includes databases such as MySQL, PostgreSQL, and others.
    This means that the complexities involving server-side testing can take a different
    form when compared to JavaScript testing.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，请注意，服务器端测试通常包括服务器端代码，并且很可能包括MySQL、PostgreSQL等数据库。这意味着与JavaScript测试相比，服务器端测试的复杂性可能会有所不同。
- en: Nonetheless, you will be expected to have a good understanding of the server-side
    language used, the database used, and so on. This is the bare minimum for you
    to get started with planning your tests.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，你还是需要对所使用的服务器端语言、数据库等有深入了解。这是你开始规划测试的最基本要求。
- en: Note
  id: totrans-200
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'If you are performing server-side testing as a part of Ajax testing, you will
    most certainly want to know about Hypertext Transfer Protocol response status
    codes. These status codes are a way to determine whether your request was successful
    or not. They even tell you what kind of errors occurred, should any occur. For
    more information, visit: [http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html).'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在进行Ajax测试的服务器端测试，你肯定想了解一下超文本传输协议（HTTP）响应状态码。这些状态码是确定你的请求是否成功的一种方式。它们甚至告诉你是否发生了任何错误。更多信息请访问：[http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html)。
- en: What happens if you visitor turns off JavaScript
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如果访客关闭了JavaScript会发生什么
- en: 'We have briefly covered the issues of whether we should write applications
    that support users who have had their JavaScript turned off. Although there are
    different points of view on whether or not we should support such users, one of
    the best ways, in my humble opinion, is that we should at least inform our users
    that their browser does not support JavaScript (or that JavaScript is turned off)
    and they might be missing out on something. In order to achieve this, we can use
    the following code snippet:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经简要讨论了是否应该为关闭JavaScript的用户编写应用程序的问题。虽然关于是否应该支持这类用户存在不同的观点，但在我看来，最好的方法之一是至少告知我们的用户他们的浏览器不支持JavaScript（或者JavaScript已被关闭），他们可能会错过一些内容。为了实现这一点，我们可以使用以下代码片段：
- en: '[PRE9]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note that we used the `<noscript>` tag, which is a way to show user's alternative
    content when JavaScript is turned off or is not supported.
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请注意，我们使用了`<noscript>`标签，这是在JavaScript被关闭或不被支持时显示用户的替代内容的途径。
- en: Now that we have almost reached the end of this chapter, you must be getting
    the hang of it. Let us see if you can improve upon your skills by trying out the
    following assignment.
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 既然我们已经接近本章的尾声，你可能已经掌握了要领。让我们看看你是否能通过尝试以下练习来提高你的技能。
- en: Have a go hero—enhance the usability of our program
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试英雄——提升我们程序的可用性
- en: 'Now that you have come this far, you might want to take a shot at this task—enhance
    the usability of this program by doing the following:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 既然你已经走到了这一步，你可能想尝试这个任务——通过以下方式提升这个程序的可用性：
- en: Make sure that the user enters the required information, starting from the first
    field to the last field.
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保用户从第一个字段到最后一个字段输入所需信息。
- en: The other issue that we might have with our program is that the user might click
    on any input field other than the first one and begin entering the information.
    Although this may not directly affect the correctness of our program, there might
    be a chance that the result is not what we expect.
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们程序可能遇到的另一个问题是，用户可能会点击第一个以外的任何输入字段并开始输入信息。尽管这可能不会直接影响我们程序的正确性，但有可能结果不是我们预期的。
- en: With regards to the second form, is there any way that you can inform your user
    which input fields have the wrong input? Can your user change an input that is
    incorrect?
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于第二个表单，你有什么方法能告知你的用户哪些输入字段有错误的输入？用户可以更改错误的输入吗？
- en: When we are fixing the bug related to the second form, we only created mechanisms
    to detect the correctness of the input in the second form. However, should the
    user enter an incorrect value in the second form, the user might not know immediately
    which fields were entered incorrectly.
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当我们修复与第二个表单相关的错误时，我们只是创建了检测第二个表单输入正确性的机制。然而，如果用户在第二个表单中输入了错误的值，用户可能不会立即知道哪些字段输入错误。
- en: 'Here are some tips to help you get started with this exercise:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些帮助你开始这项练习的提示：
- en: Right from the start, you can disable all of the input fields apart from the
    first one. Then as the first field gets the correct input, you can enable the
    second input field. Similarly, when the second input field is completed correctly,
    the third input field gets enabled, and so on and so forth.
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从一开始，你可以禁用所有除了第一个以外的输入字段。然后当第一个字段获得正确的输入时，你可以启用第二个输入字段。同样，当第二个输入字段正确完成时，第三个输入字段被启用，依此类推。
- en: For the second issue, you might want to take a look at our code and see if you
    can edit the conditions found in the `if else` statements for the function `checkSecondForm()`.
    What I have done is to lump all of the possibilities into a single `if` or `else
    if` statement, thus making it impossible to detect which field has gone wrong.
    You can try to split up the conditions such that each of the `if` and `else if`
    statements contain only a single condition. That way, well be able to create a
    custom response for each individual input field in the second form, should anything
    go wrong.
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于第二个问题，你可能想查看我们的代码，看看你是否能编辑`checkSecondForm()`函数中`if else`语句中的条件。我所做的是将所有可能性合并成一个`if`或`else
    if`语句，从而使无法检测出哪个字段出了问题。你可以尝试将条件拆分，使得每个`if`和`else if`语句只包含一个条件。这样，如果出现问题，我们就能为第二表单中的每个输入字段创建一个自定义响应。
- en: Summary
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Wow, we have covered a lot in this chapter. We have executed the test plan and
    have uncovered bugs. Next we successfully fixed the bugs that we uncovered. After
    fixing each bug, we performed regression testing in order to make sure that the
    original functionality was retained and that no new bugs were introduced into
    the program.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 哇，我们在这一章节中涵盖了大量的知识。我们执行了测试计划并发现了 bug。接下来我们成功地修复了我们发现的问题。在修复每个 bug 后，我们执行了回归测试，以确保保留了原始功能，并且没有在程序中引入新的
    bug。
- en: 'Specifically, we covered the following topics:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，我们讨论了以下主题：
- en: How to execute a test plan and how to document bugs that we uncovered
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何执行测试计划以及如何记录我们发现的问题
- en: How to perform regression testing after fixing each bug
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复每个错误后如何执行回归测试
- en: How to compress the code in order to enhance performance
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何压缩代码以提高性能
- en: Testing differences if we use Ajax
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们使用 Ajax，测试差异如何
- en: Differences between client-side testing and server-side testing
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端测试与服务器端测试的区别
- en: The previous learning points may seem small, but now that you have gone through
    this chapter, you should know that carrying out a test plan and subsequently fixing
    the bugs can be tedious.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 前面提到的学习点可能看起来很小，但既然你已经阅读了这一章节，你应该知道执行测试计划和随后修复 bug 可能会很繁琐。
- en: 'Now that we have covered the execution of test plan, its time to move on to
    something slightly more difficult—testing more complex code. Notice that we have
    been dealing with JavaScript in a one-dimensional manner: we placed all of our
    JavaScript in our HTML file, along with CSS. We have been developing JavaScript
    code as this was the only piece of JavaScript code that we were using. But, in
    reality, it is usual to see web applications using more than one piece of JavaScript
    code; this additional code is usually attached via an external JavaScript file.'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经讨论了测试计划的执行，是时候讨论稍微复杂一些的内容——测试更复杂的代码。请注意，我们一直以一种一维的方式处理 JavaScript：我们将所有的
    JavaScript 放在我们的 HTML 文件中，还包括 CSS。我们一直将 JavaScript 代码开发成这样，因为我们只使用这一段 JavaScript
    代码。但是，实际上，通常可以看到 web 应用程序使用不止一段 JavaScript 代码；这段额外的代码通常通过外部 JavaScript 文件附上。
- en: More importantly, this is not going to be the only issue that we will face in
    the real world. As our code gets more complex, we will need to use more sophisticated
    testing methods, or even use tools such as built-in consoles, to help us test
    more efficiently and effectively.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 更重要的是，这并不是我们在现实世界中唯一会面临的问题。随着我们的代码变得更加复杂，我们将需要使用更复杂的测试方法，甚至可能需要使用内置控制台等工具，以更有效、更高效地帮助我们进行测试。
- en: We will cover the previously-mentioned issues in the next chapter, [Chapter
    6](ch06.html "Chapter 6. Testing More Complex Code"), *Testing more complex code*.
    See you there!
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论之前提到的 issues，[第6章](ch06.html "第6章：测试更复杂的代码")，*测试更复杂的代码*。在那里见！
