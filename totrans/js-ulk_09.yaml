- en: Chapter 8. Debugging and Profiling
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。调试和剖析
- en: 'Debugging is a tricky part of programming. Bugs during development are unavoidable.
    Whatever our experience, we have to spend quite a time on hunting them. It happens.
    By the looks of the code you may not find the bug, there probably must be no problem
    with the application, yet a developer fights for hours until they run into a silly
    reason such as a misprinted property name. Much of this time could be saved by
    making a better use of browser development tools. So we will consider in this
    chapter the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 调试是编程的一个棘手部分。开发过程中的错误是不可避免的。无论我们的经验如何，我们都要花很多时间来寻找它们。这种情况发生了。通过查看代码，你可能找不到错误，应用程序可能没有问题，但开发者可能会花几个小时直到他们找到一个愚蠢的原因，比如拼写错误的属性名。如果更好地利用浏览器开发工具，可以节省很多时间。因此，在本章中，我们将考虑以下主题：
- en: How to discover bugs
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何发现错误
- en: Getting the best from a console API
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 充分利用控制台API
- en: How to tune performance
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何调整性能
- en: Hunting bugs
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 寻找错误
- en: Debugging is about finding and resolving defects that prevent the intended application
    behavior. Here, what is crucial is to find the code causing the problem. What
    do we usually do when we encounter a bug? Let's say, we have a form that is assumed
    to run a validation on a submit event, but it doesn't. First of all, we have a
    number of assumptions to be met. For example, if the reference to the form element
    is valid, if the event and method name were spelled correctly during registering
    a listener, if the object context is not lost in the body of the listener, and
    so on.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 调试是关于找到并解决阻止预期应用程序行为的缺陷。在这方面，关键是找到导致问题的代码。当我们遇到一个错误时通常会做什么呢？比如说，我们有一个表单，它被假设在提交事件上运行验证，但它没有。首先，我们需要满足许多假设。例如，如果表单元素的引用是有效的，如果在注册监听器时事件和方法名称拼写正确，如果对象上下文在监听器主体中丢失等等。
- en: 'Some bugs can be discovered automatically such as by validating input and output
    on the entry and exit points of methods (see Design by contract at: [https://en.wikipedia.org/wiki/Design_by_contract](https://en.wikipedia.org/wiki/Design_by_contract)).
    However, we have to spot other bugs manually, and here we can use two options.
    Starting from the point where the code is surely correct step by step to the problem
    point (bottom-up debugging), or on the contrary, stepping back from the break
    point to find the source of the break. Here, browser development tools can come
    in handy.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 一些错误可以自动发现，例如通过验证方法入口和出口点的输入和输出（参见设计合同在：[https://en.wikipedia.org/wiki/Design_by_contract](https://en.wikipedia.org/wiki/Design_by_contract)）。然而，我们不得不手动查找其他错误，在这方面我们可以使用两种选择。从代码肯定正确的地方逐步走向问题点（自底向上的调试），或者相反，从断点退回到查找断裂源。在这里，浏览器开发工具可以派上用场。
- en: 'The most advanced one is Chrome DevTools. We can open the **Sources** panel
    in it and set breakpoints in the code. The browser stops execution while reaching
    a breakpoint and shows a pane with an actual variable scope and call stack. It
    also provides controls that one can use to *step-through* the code back and forth
    one line at a time. Following screenshot shows debugging with the help of breakpoints:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 最先进的是Chrome DevTools。我们可以打开其中的**源代码**面板并在代码中设置断点。在达到断点时，浏览器停止执行并显示一个带有实际变量作用域和调用堆栈的面板。它还提供了控制，可以用来*逐行*前后*单步执行*代码。下面的屏幕截图显示了使用断点的调试帮助：
- en: '![Hunting bugs](img/00022.jpeg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![寻找错误](img/00022.jpeg)'
- en: However, this can be tricky to navigate through codebase in DevTools. Fortunately,
    you can set a break point out of the browser directly in the IDE. You just need
    to put the debugger statement on the line where you want the browser to break.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这可能会在DevTools中导航代码库时变得棘手。幸运的是，你可以在IDE外直接设置断点。你只需要在想要浏览器中断的行上放置调试器语句。
- en: Sometimes, it is hard to figure out what's going on with the DOM. We can make
    DevTools to do a break on the DOM events such as node removal, node modification,
    and subtree changes. Just navigate to the HTML element in the **Sources** panel,
    right-click, and choose the **Break on...** option.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，很难弄清楚DOM的情况。我们可以让DevTools在DOM事件上中断，如节点移除、节点修改和子树更改。只需在**源代码**面板中导航到HTML元素，右键点击，选择**在...中断**选项。
- en: Besides, in the **Source** panel there is a tab called **XHR Breakpoints** where
    we can set a list of URLs. The browser will then break when any of the URLs are
    requested.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在**源代码**面板中有一个名为**XHR断点**的标签，我们可以在其中设置一个URL列表。然后，当浏览器请求这些URL中的任何一个时，它将中断。
- en: 'You can also find an icon in form of stop sign in the top of **Source** panel
    sidebar. If this button is clicked, DevTools will break on any caught exception
    and bring to you the throw location in the source code. Following screenshot shows
    how to use Pause on Caught Exception tool:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以在**源代码**面板侧边栏找到一个形似停车标志的图标。如果点击这个按钮，DevTools将在任何捕获的异常处中断，并带你到源代码中的抛出位置。下面的截图展示了如何使用“在捕获异常时暂停”工具：
- en: '![Hunting bugs](img/00023.jpeg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![寻找bug](img/00023.jpeg)'
- en: Note
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For more information, see [https://developer.chrome.com/devtools/docs/javascript-debugging](https://developer.chrome.com/devtools/docs/javascript-debugging).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息，请参阅[https://developer.chrome.com/devtools/docs/javascript-debugging](https://developer.chrome.com/devtools/docs/javascript-debugging)。
- en: Getting the best from a console API
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从控制台API中获得最佳效果
- en: 'Despite it being not a part of JavaScript, we all use console API extensively
    to find out what is really happening during an app life cycle. The API, once introduced
    by the Firebug tool, is now available in every major JavaScript agent. Most developers
    just do simple logging using methods such as error, trace, log, and the decorator
    such as info and warn. Well, when we pass any values to `console.log`, they are
    presented to the **JavaScript** **Console** panel. Usually, we pass a string describing
    a case and a list of various objects that we want to inspect. However, did you
    know that we can refer to these objects directly from the string in the manner
    of the PHP `sprintf`? So the string given as the first argument can be a template
    that contains format specifiers for the rest of the arguments:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这不是JavaScript的一部分，但我们都在广泛使用控制台API来了解应用程序生命周期中实际发生了什么。这个API是由Firebug工具引入的，现在每个主要的JavaScript代理商都可以使用。大多数开发者只是使用error、trace、log等方法进行简单的日志记录，以及像info和warn这样的装饰器。嗯，当我们向`console.log`传递任何值时，它们都会显示在**JavaScript**
    **控制台**面板上。通常，我们传递一个描述案例的字符串和一个我们想要检查的各种对象列表。然而，你知道我们可以直接从字符串中引用这些对象，就像PHP的`sprintf`一样吗？所以，作为第一个参数给出的字符串可以是一个包含其他参数的格式指定器的模板：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![Getting the best from a console API](img/00024.jpeg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![从控制台API中获得最佳效果](img/00024.jpeg)'
- en: 'The available specifiers are `%s` for strings, `%d` for numbers, `%o` for DOM
    elements, and `%O` for JavaScript objects (the same as `console.dir`). Besides,
    there is a particular specifier that allows us to style the `console.log` report.
    This can be very useful. In practice, the application console receives too many
    log records. It gets hard to make out the desired messages among a hundred similar
    messages. What we can do is categorize the messages and style them accordingly:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的指定符有`%s`用于字符串，`%d`用于数字，`%o`用于DOM元素，`%O`用于JavaScript对象（与`console.dir`相同）。此外，有一个特殊的指定符允许我们样式化`console.log`报告。这非常有用。在实际应用中，控制台接收太多的日志记录。在成百上千条类似的消息中找出所需的消息变得困难。我们可以做的是对消息进行分类并相应地样式化：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In this example, we defined two methods extending `console.log`. One prefixes
    console messages with **USER** on cyan and is intended for user action events.
    The second prepends reports with **EVENT** and is meant to highlight mediator
    events. Following screenshot explains colorized output with console.log:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们定义了两个扩展`console.log`的方法。一个用青色前缀console消息为**USER**，用于用户动作事件。第二个用**EVENT**前缀报告，旨在突出中介事件。下面的截图解释了使用console.log的颜色化输出：
- en: '![Getting the best from a console API](img/00025.jpeg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![从控制台API中获得最佳效果](img/00025.jpeg)'
- en: 'Another lesser known trick is the use of `console.assert` for assertions in
    code logic. So, we assume that a condition is true and until it is everything
    is fine and we get no messages. But as soon as it fails, we get a record in the
    console:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个不太为人所知的技巧是在代码逻辑中使用`console.assert`进行断言。所以，我们假设一个条件是正确的，直到它为止一切都很好，我们没有收到任何消息。但是一旦它失败，我们在控制台中获得一个记录：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Following screenshot shows how to use console assertions:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图展示了如何使用控制台断言：
- en: '![Getting the best from a console API](img/00026.jpeg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![从控制台API中获得最佳效果](img/00026.jpeg)'
- en: 'Sometimes we need to know how often an event happens. Here we can use the `console.count`
    method:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 有时我们需要知道一个事件发生多少次。这里我们可以使用`console.count`方法：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This displays in the console the specified message and an auto-updating counter
    next to it. Following screenshot shows how to use console.count:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这会在控制台中显示指定的消息和一个自动更新的计数器旁边。下面的截图展示了如何使用`console.count`：
- en: '![Getting the best from a console API](img/00027.jpeg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![从控制台API中获得最佳效果](img/00027.jpeg)'
- en: Note
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can find out more about working with the console at [https://developer.chrome.com/devtools/docs/console](https://developer.chrome.com/devtools/docs/console).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[https://developer.chrome.com/devtools/docs/console](https://developer.chrome.com/devtools/docs/console)找到更多关于控制台工作的信息。
- en: Tuning performance
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 优化性能
- en: 'Performance makes user experience. If it takes too long to load a page or a
    UI to respond, the user is likely to leave the application and never come back.
    It''s especially true with web apps. In [Chapter 3](part0027_split_000.html#PNV62-f4ff6b81796e4f78aa983a623fb95daf
    "Chapter 3. DOM Scripting and AJAX"), *DOM Scripting and AJAX*, we compared different
    approaches to manipulate the DOM. In order to find out how fast an approach is,
    we use a performance built-in object:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 性能决定用户体验。如果页面加载时间过长或者界面响应迟缓，用户可能会离开应用程序且再也不回来。这在网页应用中尤为正确。在[第3章](part0027_split_000.html#PNV62-f4ff6b81796e4f78aa983a623fb95daf
    "Chapter 3. DOM Scripting and AJAX")，*DOM脚本和AJAX*，我们比较了操作DOM的不同方法。为了找出哪种方法速度更快，我们使用了一个内置的性能对象：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`performance.now()` returns a high resolution timestamp that represents time
    in milliseconds accurate to microseconds. This is designed and widely used for
    benchmarking. However, a `time/timeEnd` console object also provides methods to
    measure time:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`performance.now()`返回一个高精度的毫秒时间戳，精确到微秒。这是为基准测试设计和广泛使用的。然而，`time/timeEnd`控制台对象也提供了测量时间的方法：'
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Following screenshot shows measuring time with console:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图展示了如何使用控制台测量时间：
- en: '![Tuning performance](img/00028.jpeg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![优化性能](img/00028.jpeg)'
- en: 'If we need to know what exactly is going on during an operation execution,
    we can request a profile for that period:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要知道操作执行期间确切发生了什么，我们可以请求该时段的配置文件：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Following screenshot shows how to use console API for profiling:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图展示了如何使用控制台API进行配置文件：
- en: '![Tuning performance](img/00029.jpeg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![优化性能](img/00029.jpeg)'
- en: 'Moreover, we can mark the exact time of the event in the **Timeline** panel
    of DevTools:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们可以在DevTools的**时间线**面板中精确标记事件的时间：
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Following screenshot shows how to mark events on Timeline during a recording
    session:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图展示了如何在记录会话期间在时间线上标记事件：
- en: '![Tuning performance](img/00030.jpeg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![优化性能](img/00030.jpeg)'
- en: When tuning performance, we have to pay particular attention to the response
    time. There are a number of techniques that can be used to improve user experience
    during bootstrap (non-blocking JavaScript and CSS loading, critical CSS, moving
    static files CDN, and others). Well, let's say you decide to load CSS asynchronously
    ([https://www.npmjs.com/package/asynccss](https://www.npmjs.com/package/asynccss))
    and cache into localStorage. But how would you test whether you gained anything
    from this? Fortunately, DevTools has a filmstrip feature. We just need to open
    the **Network** panel, enable **Screenshot capturing** and reload the page.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们优化性能时，我们必须特别注意响应时间。有许多技术可以用来在启动过程中改善用户体验（非阻塞JavaScript和CSS加载、关键CSS、将静态文件托管到CDN等）。好吧，假设你决定异步加载CSS（[https://www.npmjs.com/package/asynccss](https://www.npmjs.com/package/asynccss)）并缓存到localStorage。但你如何测试你从中获得了什么？幸运的是，DevTools有一个电影胶片功能。我们只需要打开**网络**面板，启用**屏幕截图捕获**并重新加载页面。
- en: 'DevTools shows us the progress of the page load frame after frame as the user
    sees the page during the load process. Besides, we can manually set a connection
    speed (throttling) for a test and find out how it affects the filmstrip. Following
    screenshot shows how to getting filmstrip of page loading:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: DevTools向我们展示了用户在加载过程中看到的页面每帧的加载进度。此外，我们可以手动为测试设置一个连接速度（节流），并找出它如何影响电影胶片。下面的截图展示了如何获取页面加载的电影胶片：
- en: '![Tuning performance](img/00031.jpeg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![优化性能](img/00031.jpeg)'
- en: Summary
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Debugging is an integral part of web development. It can also be a pretty sluggish
    and tedious task. With browser development tools, we can reduce the time spent
    on hunting bugs. We can set breakpoints in a code and move step by step to the
    source of the problem in the same way that the program does. When using Chrome
    DevTools, we can watch for DOM modification events and for specific URL requests.
    When tuning performance, we can measure time with `time/timeEnd` and request a
    process profile with `profile/profileEnd`. Using features such as filmstrip and
    throttling, we can look at the page load on different connections.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 调试是web开发的一个重要组成部分。它也可能是一个相当缓慢和单调的任务。借助浏览器开发工具，我们可以减少捉虫的时间。我们可以在代码中设置断点，一步步走到问题的源头，就像程序一样。当使用Chrome
    DevTools时，我们可以监视DOM修改事件和特定的URL请求。在调整性能时，我们可以使用`time/timeEnd`测量时间，并用`profile/profileEnd`请求进程配置文件。借助电影胶片和节流等功能，我们可以查看不同连接上的页面加载情况。
- en: We started this book by reviewing JavaScript core features. We've learned how
    to make a code more expressive by means of syntactic sugar, practiced object iteration
    and collection normalization, compared various approaches to declare an object
    including ES6 classes, and found out how to use the *magic methods* of JavaScript.
    Then, we dived into modular programming. We talked about module pattern and modules
    in general and reviewed three main approaches to modularization in JavaScript
    AMD, CommonJS, and ES6 modules. The next topic was about keeping high-performance
    DOM manipulations. We also examined Fetch API. We also considered some of most
    exciting HTML5 APIs such Storage, IndexedDB, workers, SSE, and WebSocket, and
    the technologies under the hood of Web Component. We considered techniques to
    leverage a JavaScript event loop and to build nonblocking applications. We practiced
    with design patterns in JavaScript and covered concern separations. We wrote a
    simple application in three frameworks, Backbone, Angular, and React. We tried
    out Node.js by creating a command-line utility and exposing a web server. We also
    created a demo desktop application with NW.js and its mobile version with PhoneGap.
    At last, we talked about bug hunting.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们这本书从复习JavaScript的核心特性开始。我们学会了如何通过语法糖使代码更具表现力，练习了对象迭代和集合规范化，比较了包括ES6类在内的各种声明对象的方法，并发现了如何使用JavaScript的*魔法方法*。然后，我们深入到了模块化编程。我们谈论了模块模式和模块的一般概念，并回顾了JavaScript模块化的三种主要方法：AMD，CommonJS和ES6模块。下一个话题是保持高性能DOM操作。我们还研究了Fetch
    API。我们也考虑了一些最激动人心的HTML5 API，如存储、IndexedDB、工作者、SSE和WebSocket，以及Web组件背后的技术。我们考虑了利用JavaScript事件循环和构建非阻塞应用程序的技术。我们在JavaScript中实践了设计模式，并涵盖了关注分离。我们在三个框架中编写了一个简单的应用程序，分别是Backbone、Angular和React。我们通过创建命令行工具和暴露Web服务器来尝试Node.js。我们还使用NW.js创建了一个演示桌面应用程序以及其移动版本PhoneGap。最后，我们谈论了捉虫。
