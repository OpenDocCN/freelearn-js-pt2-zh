- en: Chapter 2. Building HTML Templates
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章. 构建HTML模板
- en: After we successfully installed Meteor and set up our folder structure, we can
    now start building the basic templates for our blog.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们成功安装Meteor并设置好我们的文件夹结构之后，我们现在可以开始为我们的博客构建基本模板了。
- en: In this chapter, we will learn how templates are built. We will see how to display
    data and how some parts can be altered using helper functions. We will take a
    look on adding events, using conditions, and understanding data contexts, all
    in templates.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何构建模板。我们将了解如何显示数据以及如何使用助手函数更改某些部分。我们将查看如何添加事件、使用条件以及理解数据上下文，都在模板中。
- en: 'The following is an overview of what will be covered in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对本章将涵盖内容的概述：
- en: The basic template structure
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本模板结构
- en: Displaying data
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示数据
- en: Writing template helper functions
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写模板助手函数
- en: Using conditions in templates
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在模板中使用条件
- en: Data contexts and how those can be set
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据上下文以及如何设置它们
- en: Nesting templates and data context inheritance
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 嵌套模板和数据上下文继承
- en: Adding events
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加事件
- en: Building block helpers
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建块助手
- en: Note
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you jump right into this chapter without setting up the folder structure
    in the [Chapter 1](part0015_split_000.html#page "Chapter 1. Getting Started with
    Meteor"), *Getting Started with Meteor*, download the previous chapter's code
    examples from either the book's web page at [https://www.packtpub.com/books/content/support/17713](https://www.packtpub.com/books/content/support/17713)
    or from the GitHub repository at [https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter1](https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter1).
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你跳过[第1章](part0015_split_000.html#page "第1章. Meteor入门")*Meteor入门*直接进入本章，请从以下任一位置下载前一章的代码示例：书籍网页在[https://www.packtpub.com/books/content/support/17713](https://www.packtpub.com/books/content/support/17713)或GitHub仓库在[https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter1](https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter1)。
- en: These code examples will also contain all the style files, so we don't have
    to worry about adding CSS code along the way.
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些代码示例还将包含所有样式文件，因此我们不必担心在过程中添加CSS代码。
- en: Writing templates in Meteor
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Meteor中编写模板
- en: Normally when we build websites, we build the complete HTML on the server side.
    This was quite straightforward; every page is built on the server, then it is
    sent to the client, and at last JavaScript added some additional animation or
    dynamic behavior to it.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 通常当我们构建网站时，我们在服务器端构建完整的HTML。这很简单；每个页面都是在服务器上构建的，然后发送到客户端，最后JavaScript添加了一些额外的动画或动态行为。
- en: This is not so in single-page apps, where every page needs to be already in
    the client's browser so that it can be shown at will. Meteor solves this problem
    by providing templates that exists in JavaScript and can be placed in the DOM
    at some point. These templates can have nested templates, allowing for an easy
    way to reuse and structure an app's HTML layout.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这在单页应用中不是这样，因为在单页应用中，每个页面都需要已经存在于客户端浏览器中，以便可以随时显示。Meteor通过提供存在于JavaScript中的模板来解决这个问题，可以在某个时刻将它们放置在DOM中。这些模板可以包含嵌套模板，使得轻松重用和结构化应用的HTML布局变得容易。
- en: Since Meteor is so flexible in terms of folder and file structure, any `*.html`
    page can contain a template and will be parsed during Meteor's build process.
    This allows us to put all templates in the `my-meteor-blog/client/templates` folder,
    which we created in the [Chapter 1](part0015_split_000.html#page "Chapter 1. Getting
    Started with Meteor"), *Getting Started with Meteor*. This folder structure is
    chosen as it helps us organizing templates when our app grows.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Meteor在文件和文件夹结构方面非常灵活，任何`*.html`页面都可以包含一个模板，并在Meteor的构建过程中进行解析。这允许我们将所有模板放在我们在第[第1章](part0015_split_000.html#page
    "第1章. Meteor入门")*Meteor入门*中创建的`my-meteor-blog/client/templates`文件夹中，这种文件夹结构的选择是因为它帮助我们组织模板，当应用增长时。
- en: Meteor's template engine is called **Spacebars**, which is a derivative of the
    handlebars template engine. Spacebars is built on top of **Blaze**, which is Meteor's
    reactive DOM update engine.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Meteor的模板引擎称为**Spacebars**，它是handlebars模板引擎的派生。Spacebars建立在**Blaze**之上，后者是Meteor的响应式DOM更新引擎。
- en: Note
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Blaze can generate reactive HTML directly using its API, though it's more convenient
    to use Meteor's Spacebars or a third-party template language built on top of Blaze
    such as Jade for Meteor.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Blaze可以使用其API直接生成反应式HTML，尽管使用Meteor的Spacebars或建立在Blaze之上的第三方模板语言（如为Meteor设计的Jade）更为方便。
- en: For more detail about Blaze, visit [https://docs.meteor.com/#/full/blaze](https://docs.meteor.com/#/full/blaze)
    and [https://github.com/mquandalle/meteor-jade](https://github.com/mquandalle/meteor-jade).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Blaze的更多详细信息，请访问[https://docs.meteor.com/#/full/blaze](https://docs.meteor.com/#/full/blaze)和[https://github.com/mquandalle/meteor-jade](https://github.com/mquandalle/meteor-jade)。
- en: 'What makes Spacebars so exciting is its simplicity and reactivity. Reactive
    templates mean that some parts of the template can automatically change when the
    underlying data changes. There is no need of manual DOM manipulation and inconsistent
    interfaces belong to the past. To get a better understanding of Meteor, we will
    start with the basic HTML files for our app:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 使Spacebars如此激动人心的是它的简单性和反应性。反应式模板意味着模板的某些部分可以在底层数据变化时自动更改。无需手动操作DOM，不一致的界面已成为过去。为了更好地了解Meteor，我们将从为我们的应用创建的基本HTML文件开始：
- en: 'Let''s create an `index.html` file in our `my-meteor-blog/client` folder with
    the following lines of code:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在我们`my-meteor-blog/client`文件夹中创建一个`index.html`文件，并输入以下代码行：
- en: '[PRE0]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that our `index.html` file doesn't contain the `<html>...</html>` tags,
    as Meteor gathers all `<head>` and `<body>` tags in any file and builds up its
    own `index.html` file, which will be delivered to the user. Actually, we can also
    name this file `myapp.html`.
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，我们的`index.html`文件不包含`<html>...</html>`标签，因为Meteor会收集任何文件中的`<head>`和`<body>`标签，并构建自己的`index.html`文件，该文件将交付给用户。实际上，我们还可以将此文件命名为`myapp.html`。
- en: 'Next, we run our Meteor app from the command line by typing the following command:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们通过在命令行中输入以下命令来运行我们的Meteor应用：
- en: '[PRE1]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This will start a Meteor server with our app running.
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将启动一个带有我们应用的Meteor服务器。
- en: That's it! We can open our browser, navigate to `http://localhost:3000`, and
    we should see **Hello World**.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就这样！现在我们可以打开浏览器，导航到`http://localhost:3000`，我们应该能看到**Hello World**。
- en: What happens here is that Meteor will look through all the HTML files available
    in our app's folder, concatenating the content of all `<head>` and `<body>` tags,
    which it finds and serve them to the clients as its index file.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这里发生的是，Meteor将查看我们应用文件夹中可用的所有HTML文件，合并所有找到的`<head>`和`<body>`标签的内容，并将其作为索引文件提供给客户端。
- en: If we take a look at the source code of our app, we will see that the `<body>`
    tag is empty. This is because Meteor sees the content of the `<body>` tag as its
    own templates, which will be injected with its corresponding JavaScript template
    when the DOM is loaded.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看我们应用的源代码，我们会看到`<body>`标签是空的。这是因为Meteor将`<body>`标签的内容视为自己的模板，在DOM加载时，将与相应的JavaScript模板一起注入。
- en: Note
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To see the source code, don't use the Developer Tools' **elements panel**, as
    this will show us the source code after the JavaScript is executed. Right-click
    on the website instead and select **View page source** in Chrome.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看源代码，不要使用开发者工具的**元素面板**，因为这将显示JavaScript执行后的源代码。在Chrome中，右键单击网站，而选择**查看页面源代码**。
- en: 'We will also see that Meteor already linked all kinds of JavaScript files in
    our `<head>` tag. These are Meteor''s core packages and our add third-party packages.
    In production, these files will be concatenated into one. To see this in action,
    go to the terminal, quit our running Meteor server using *Ctrl* + *C*, and run
    the following command:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还会看到Meteor已经在我们的`<head>`标签中链接了各种各样的JavaScript文件。这些都是Meteor的核心包和我们的第三方包。在生产环境中，这些文件将被合并成一体。为了看到这个效果，打开终端，使用*Ctrl*
    + *C*退出我们运行中的Meteor服务器，并运行以下命令：
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If we now take a look at the source code, we will see that there is only one
    cryptic-looking JavaScript file linked.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在查看源代码，我们会看到只有一个神秘的JavaScript文件被链接。
- en: For the next steps, it is better to go back to our developer mode by simply
    quitting Meteor and running the `meteor` command again, since this will reload
    the app faster when file changes occur.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，最好是通过简单地退出Meteor并再次运行`meteor`命令回到我们的开发者模式，因为这样在文件发生变化时可以更快地重新加载应用。
- en: Building the basic templates
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建基本模板
- en: 'Now, let''s add the basic templates to our blog by creating a file called `layout.html`
    in the `my-meteor-blog/client/templates` folder. This template will serve as the
    wrapper template for our blog layout. To build the basic templates, perform the
    following steps:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过在我们`my-meteor-blog/client/templates`文件夹中创建一个名为`layout.html`的文件，将基本模板添加到我们的博客中。这个模板将作为我们博客布局的包装模板。要构建基本模板，请执行以下步骤：
- en: 'Add the following lines of code to `layout.html`, which we just created:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在刚刚创建的`layout.html`中添加以下代码行：
- en: '[PRE3]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Next, we will create the home page template, which will later list all our
    blogs posts. In the same templates folder as `layout.html`, we will create a file
    named `home.html` with the following lines of code:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将创建主页模板，稍后列出我们所有的博客文章。在`layout.html`相同的模板文件夹中，我们将创建一个名为`home.html`的文件，并包含以下代码行：
- en: '[PRE4]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The next file will be a simple **About** page and we save it as `about.html`
    with the following code snippet:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一个文件将是一个简单的**关于**页面，我们将其保存为`about.html`，并包含以下代码片段：
- en: '[PRE5]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As you can see, we used a `{{#markdown}}` block helper to wrap our texts. The
    curly braces are handlebars syntax, which Blaze uses to bring logic to the HTML.
    The `{{#markdown}}...{{/markdown}}` block will transform all markdown syntax inside
    into HTML when the template gets rendered.
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 正如您所见，我们使用了一个`{{#markdown}}`块助手来包装我们的文本。大括号是Blaze用来将逻辑带到HTML的处理程序语法。`{{#markdown}}...{{/markdown}}`块在模板渲染时将所有的Markdown语法转换成HTML。
- en: Note
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The markdown text cannot be indented as we do with the HTML tags because the
    markdown syntax interprets indentation as code.
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于Markdown语法将缩进解释为代码，因此Markdown文本不能像我们对HTML标签那样进行缩进。
- en: 'To be able to use `{{#markdown}}` block helper, we need to first add the `markdown`
    core package to our app. To do this, we quit our running app in the terminal using
    *Ctrl* + *C* and type the following command:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了能够使用`{{#markdown}}`块助手，我们首先需要将`markdown`核心包添加到我们的应用程序中。为此，我们使用*Ctrl* + *C*在终端中停止正在运行的应用程序，并输入以下命令：
- en: '[PRE6]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now we can run the `meteor` command again to start our server.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以再次运行`meteor`命令来启动我们的服务器。
- en: However, when we now go to our browser, we will still see **Hello World**. So
    how can we make now our templates visible?
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，当我们现在打开浏览器时，我们仍然会看到**Hello World**。那么我们如何使我们的模板现在变得可见呢？
- en: Adding templates and partials
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加模板和部分
- en: 'To show the home template in the app, we need to open `index.html`, which we
    created earlier, and perform the following steps:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在应用程序中显示主页模板，我们需要打开之前创建的`index.html`，并执行以下步骤：
- en: 'We replace `Hello World` with the following template inclusion helper:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将`Hello World`替换为以下模板包含助手：
- en: '[PRE7]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: If we go back to our browser now, we see that the text is gone and the `layout`
    template, which we created earlier, has appeared with its header and menu.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们现在回到浏览器，我们会看到文本消失了，而我们之前创建的`layout`模板以及其标题和菜单出现了。
- en: 'To complete the page, we need to show the `home` template in the `layout` template.
    We do this by simply adding another template inclusion helper to the `main` section
    of the `layout` template in our `layout.html` file, as follows:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了完成页面，我们需要在`layout`模板中显示`home`模板。我们只需在`layout`模板的`main`部分添加另一个模板包含助手，如下所示：
- en: '[PRE8]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: If we go back to the browser, we should see the following screenshot:![Adding
    templates and partials](img/00004.jpeg)
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们回到浏览器，我们应该看到以下截图：![Adding templates and partials](img/00004.jpeg)
- en: If we would now switch `{{> home}}` for `{{> about}}`, we would see our `about`
    template instead.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在将`{{> home}}`替换为`{{> about}}`，我们将会看到我们的`about`模板。
- en: Displaying data with template helpers
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用模板助手显示数据
- en: Each template can have functions, which are called `template` helpers, and they
    can be used inside the template and child templates.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 每个模板都可以有函数，这些函数被称为`template`助手，它们可以在模板及其子模板中使用。
- en: 'In addition to our custom helper functions, there are three callback functions
    that are called when the template is created, rendered, and destroyed. To display
    data with template helpers, perform the following steps:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 除了我们自定义的助手函数外，还有三个回调函数在模板创建、渲染和销毁时被调用。要使用模板助手显示数据，请执行以下步骤：
- en: 'To see the three callback functions in action, let''s create a file called
    `home.js` and save it to our `my-meteor-blog/client/templates/` folder with the
    following code snippet:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了看到这三个回调函数的作用，让我们创建一个名为`home.js`的文件，并将其保存到我们的`my-meteor-blog/client/templates/`文件夹中，并包含以下代码片段：
- en: '[PRE9]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: If we now open the console of our browser, we will see the first two callbacks
    are being fired. The last one will only fire if we dynamically remove the template.
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果我们现在打开浏览器的控制台，我们会看到前两个回调被触发。最后一个只有在动态移除模板时才会触发。
- en: 'To display data in the `home` template, we will create a helper function that
    will return a simple string as follows:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了在`home`模板中显示数据，我们将创建一个助手函数，该函数将返回一个简单的字符串，如下所示：
- en: '[PRE10]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now if we go to our `home.html` file, add the `{{exampleHelper}}` helper after
    the `{{markdown}}` block helper, and save the file, we will see the string appearing
    in our browser, but we will notice that the HTML is escaped.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在如果我们去我们的`home.html`文件，在`{{markdown}}`块助手之后添加`{{exampleHelper}}`助手，并保存文件，我们将在浏览器中看到出现的字符串，但我们注意到HTML被转义了。
- en: 'To make Meteor render the HTML correctly, we can simply replace the double
    curly braces with triple curly braces, as shown in the following line of code,
    and Blaze won''t let the HTML escape:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使Meteor正确渲染HTML，我们可以简单地将双花括号替换为三花括号，如下代码行所示，Blaze不会让HTML转义：
- en: '[PRE11]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Note
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that in most of our templates helper, we *shouldn't* use triple stache
    `{{{...}}}` as this opens the door for XSS and other attacks. Only use it if the
    HTML returned is safe to be rendered.
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，在我们的大多数模板助手中，我们*不应该*使用三花括号`{{{...}}}`，因为这将打开XSS和其他攻击的大门。只有当返回的HTML安全可渲染时才使用它。
- en: 'Additionally, we can return unescaped HTML using double curly braces, but we
    need to return the string passed through the `SpaceBars.SafeString` function,
    as shown in the following example:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，我们可以使用双花括号返回未转义的HTML，但我们需要返回通过`SpaceBars.SafeString`函数传递的字符串，如下例所示：
- en: '[PRE12]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Setting the data context for a template
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为模板设置数据上下文
- en: 'Now that we have our `contextExample` template, we can add it to our `home`
    template by passing some data as follows:'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在我们已经有了`contextExample`模板，我们可以通过传递一些数据将其添加到我们的`home`模板中，如下所示：
- en: '[PRE13]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This will show the text in the `contextExample` template because we were displaying
    it using `{{someText}}`.
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将在`contextExample`模板中显示文本，因为我们使用`{{someText}}`来显示它。
- en: Tip
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Remember that filenames don't really matter as Meteor is collecting and concatenating
    them anyway; however, the template name matters since we use this to reference
    templates.
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 记住，文件名实际上并不重要，因为Meteor会无论如何收集并连接它们；然而，模板名称很重要，因为我们用这个来引用模板。
- en: Setting the context in HTML is not very dynamic, as it is hardcoded. To be able
    to dynamically change the context, it is better to set it using a `template` helper
    function.
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在HTML中设置上下文不是非常动态，因为它是有硬编码的。为了能够动态地改变上下文，最好使用`template`助手函数来设置它。
- en: 'To do this, we must first add the helper to our `home` templates helpers, which
    returns the data context, as follows:'
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为此，我们必须首先将助手添加到我们的`home`模板助手中，该助手返回数据上下文，如下所示：
- en: '[PRE14]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now we can add this helper as the data context to our `contextExample` template
    inclusion helper, as follows:'
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在我们可以将此助手作为数据上下文添加到我们的`contextExample`模板包含助手中，如下所示：
- en: '[PRE15]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Also, to show the nested data object we return, we can use Blaze dot syntax
    in the `contextExample` template by adding the following line of code to the template:'
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另外，为了显示我们返回的嵌套数据对象，我们可以在`contextExample`模板中使用Blaze点语法，通过在模板中添加以下代码行来实现：
- en: '[PRE16]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This will now display both the `someText` and the `someNested.text`, which was
    returned by our helper functions.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这现在将显示`someText`和`someNested.text`，后者是由我们的助手函数返回的。
- en: Using the {{#with}} block helper
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`{{#with}}`块助手
- en: 'Another way of setting the data context is by using the `{{#with}}` block helper.
    The following code snippet has the same result as the former inclusion helper
    that utilizes the helper function:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 设置数据上下文的一种另一种方法是使用`{{#with}}`块助手。以下代码片段与之前使用助手函数的包含助手具有相同的结果：
- en: '[PRE17]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We would even get the same results in the browser when we don''t use a subtemplate
    and just add the content of the `contextExample` template inside the `{{#with}}`
    block helper, as follows:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们甚至在浏览器中得到同样的结果，当我们不使用子模板，只是将`contextExample`模板的内容添加到`{{#with}}`块助手中，如下所示：
- en: '[PRE18]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '"this" in template helpers and template callbacks'
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模板助手和模板回调中的"this"
- en: In Meteor, `this` in template helpers is used differently in template callbacks
    such as `created()`, `rendered()`, and `destroyed()`.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在Meteor中，模板助手中的`this`在模板回调（如`created()`、`rendered()`和`destroyed()`）中的使用方式不同。
- en: 'As already mentioned, templates have three callback functions that are fired
    in different states of the template:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，模板有三个回调函数，在模板的不同状态下触发：
- en: '`created`: This fires when the template gets initiated but is not yet in the
    DOM'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`created`：当模板初始化但尚未插入DOM时触发'
- en: '`rendered`: This fires when the template and all its sub templates are attached
    to the DOM'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rendered`：当模板及其所有子模板附加到DOM时触发'
- en: '`destroyed`: This fires when the template is removed from the DOM and before
    the instance of the template gets destroyed'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`destroyed`：当模板从DOM中移除并在模板实例被销毁之前触发'
- en: 'In these callback functions, `this` refers to the current template instance.
    The instance object can access the templates DOM and comes with the following
    methods:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些回调函数中，`this` 指的是当前模板实例。实例对象可以访问模板的 DOM 并带有以下方法：
- en: '`this.$(selectorString)`: This method finds all elements that match `selectorString`
    and returns a jQuery object from those elements.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`this.$(selectorString)`：这个方法找到所有匹配 `selectorString` 的元素，并返回这些元素的 jQuery 对象。'
- en: '`this.findAll(selectorString)`: This method finds all elements that match `selectorString`,
    but returns the plain DOM elements.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`this.findAll(selectorString)`：这个方法找到所有匹配 `selectorString` 的元素，但返回普通的 DOM 元素。'
- en: '`this.find(selectorString)`: This method finds the first element that matches
    `selectorString` and returns a plain DOM element.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`this.find(selectorString)`：这个方法找到匹配 `selectorString` 的第一个元素，并返回一个普通的 DOM 元素。'
- en: '`this.firstNode`: This object contains the first element in the template.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`this.firstNode`：这个对象包含模板中的第一个元素。'
- en: '`this.lastNode`: This object contains the last element in the template.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`this.lastNode`：这个对象包含模板中的最后一个元素。'
- en: '`this.data`: This object contains the templates data context'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`this.data`：这个对象包含模板的数据上下文'
- en: '`this.autorun(runFunc)`: A reactive `Tracker.autorun()` function that is stopped
    when the template instance is destroyed.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`this.autorun(runFunc)`：一个在模板实例被销毁时停止的反应式 `Tracker.autorun()` 函数。'
- en: '`this.view`: This object contains the `Blaze.View` instance for this template.
    `Blaze.View` are the building blocks of reactive templates.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`this.view`：这个对象包含这个模板的 `Blaze.View` 实例。`Blaze.View` 是反应式模板的构建块。'
- en: Inside helper functions, `this` refers only to the current data context.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在辅助函数内部，`this` 仅指向当前的数据上下文。
- en: 'To make these different behaviors visible, we will take a look at some examples:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这些不同的行为变得可见，我们将查看一些示例：
- en: 'When we want to access the DOM of a template, we must do it in the rendered
    callback because only at this point, the template elements will be in the DOM.
    To see it in action, we edit our `home.js` file as follows:'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我们想要访问模板的 DOM 时，我们必须在渲染回调中进行，因为只有在这一点上，模板元素才会出现在 DOM 中。为了看到它的工作原理，我们按照以下方式编辑我们的
    `home.js` 文件：
- en: '[PRE19]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This will replace the first `p` tag that is created by the `{{#markdown}}` block
    helper, which we put there before, with the string we set. Now when we check the
    browser, we will see that the first `<p>` tag that contained our blog's introduction
    text has been replaced.
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将用我们设置的字符串替换由 `{{#markdown}}` 块辅助函数创建的第一个 `<p>` 标签。现在当我们检查浏览器时，我们会发现包含我们博客介绍文本的第一个
    `<p>` 标签已经被替换。
- en: 'For the next example, we need to create an additional template JavaScript file
    for our `contextExample` template. To do this, we create a new file called `examples.js`
    in our `templates` folder and save it using the following code snippet:'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于下一个示例，我们需要为我们的 `contextExample` 模板创建一个额外的模板 JavaScript 文件。为此，我们在 `templates`
    文件夹中创建一个名为 `examples.js` 的新文件，并使用以下代码片段保存它：
- en: '[PRE20]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This will add the rendered callback as well as a helper called `logContext`
    to our `contextExample` template helpers. To make this helper run, we also need
    to add this helper to our `contextExample` template as follows:'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将把渲染回调以及一个名为 `logContext` 的辅助函数添加到我们的 `contextExample` 模板辅助函数中。为了使这个辅助函数运行，我们还需要将其添加到我们的
    `contextExample` 模板中，如下所示：
- en: '[PRE21]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: When we now go back to the console of our browser, we see that the data context
    object has been returned for all the `rendered` callbacks and helpers from our
    rendered `contextTemplates` template. We can also see that helpers will run before
    the rendered callback.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们现在回到浏览器的控制台时，我们会发现数据上下文对象已经被返回给所有我们的已渲染的 `contextTemplates` 模板的 `rendered`
    回调和辅助函数。我们还可以看到辅助函数将在渲染回调之前运行。
- en: Note
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In case you need access to the templates instance from inside a template helper,
    you can use `Template.instance()` to get it.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要从模板辅助函数内部访问模板的实例，您可以使用 `Template.instance()` 来获取它。
- en: Now let's use make our template interactive using events.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们使用事件使我们的模板变得交互式。
- en: Adding events
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加事件
- en: To make our template a bit more dynamic, we will add a simple event, which will
    reactively rerun the `logContext` helper we created earlier.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使我们的模板更具动态性，我们将添加一个简单的事件，这将使之前创建的 `logContext` 辅助函数重新反应式地运行。
- en: 'First, however, we need to add a button to our `contextExample` template:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，然而，我们需要在我们的 `contextExample` 模板中添加一个按钮：
- en: '[PRE22]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'To catch the click event, open `examples.js` and add the following `event`
    function:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 为了捕获点击事件，打开 `examples.js` 并添加以下 `event` 函数：
- en: '[PRE23]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This will set a session variable called `randomNumber` to a random number.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这将设置一个名为 `randomNumber` 的会话变量到一个随机数。
- en: Note
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We will talk in depth about sessions in the next chapter. For now, we only need
    to know that when a session variable changes, all functions that get that session
    variable using `Session.get('myVariable')` will run again.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入讨论会话。现在，我们只需要知道当会话变量发生变化时，所有使用`Session.get('myVariable')`获取该会话变量的函数将重新运行。
- en: 'To see this in action, we will add a `Session.get()` call to the `logContext`
    helper, and return the former set''s random number as follows:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 为了看到这个效果，我们将向`logContext`助手添加一个`Session.get()`调用，并像以下方式返回先前设置的随机数：
- en: '[PRE24]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: If we go to the browser, we will see the **Get some random number** button.
    When we click on it, we see a random number appearing just above the button.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们打开浏览器，我们会看到**获取一些随机数**按钮。当我们点击它时，我们会看到一个随机数出现在按钮上方。
- en: Note
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: When we use the `contextTemplates` template multiple times in our `home` template,
    we will see that each instance of that template helper will display the same random
    number. This is because the session object will rerun all its dependencies, all
    of which are instances of the `logHelper` helper.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在我们`home`模板中多次使用`contextTemplates`模板时，我们会发现该模板助手每次都会显示相同的随机数。这是因为会话对象将重新运行其所有依赖项，其中所有依赖项都是`logHelper`助手的实例。
- en: Now that we have covered template helpers, let's create a custom block helper.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经介绍了模板助手，那么让我们创建一个自定义的块助手。
- en: Block helpers
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 块助手
- en: '[PRE25]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The `{{> Template.contentBlock}}` is a predefined placeholder for the block's
    content. The same applies for `{{> Template.elseBlock}}`.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`{{> Template.contentBlock}}`是为块内容预定义的占位符。同样适用于`{{> Template.elseBlock}}`。'
- en: When `this` (in this example, we use the template's context as a simple Boolean)
    is `true`, it will show the given `Template.contentBlock`. Otherwise, it will
    show the `Template.elseBlock` content.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 当`this`（在这个例子中，我们使用模板的上下文作为一个简单的布尔值）为`true`时，它将显示给定的`Template.contentBlock`。否则，它将显示`Template.elseBlock`的内容。
- en: 'To see how we can use the recently created template as a block helper, take
    a look at the following example, which we can add to `home` template:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 为了看到我们可以如何将最近创建的模板作为块助手使用，请查看以下示例，我们可以将其添加到`home`模板中：
- en: '[PRE27]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Now we should see the following screenshot:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们应该看到以下截图：
- en: '![Block helpers](img/00005.jpeg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![块助手](img/00005.jpeg)'
- en: When we now change `true`, which we pass to `{{#blockHelperExample}}`, to `false`,
    we should see the content after the `{{else}}` instead.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将`true`更改为`false`，我们传递给`{{#blockHelperExample}}`，我们应该看到`{{else}}`之后的内容。
- en: 'We can also use a helper function to replace the Boolean value, so that we
    can switch the block helper dynamically. Additionally, we can pass key-value arguments
    and access them by their key inside the block helper template, as shown in the
    following code example:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用助手函数来替换布尔值，这样我们就可以动态地切换块助手。此外，我们可以传递键值对参数，并通过它们的键在块助手模板内部访问它们，如下面的代码示例所示：
- en: '[PRE28]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'We can also access the given argument by its name in the block template as
    follows:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以按照以下方式通过其名称访问给定参数：
- en: '[PRE29]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Note
  id: totrans-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that the data context for the block's content will be the one from the
    template in which the block appears, not the one of the block helper template
    itself.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，块内容的上下文将是出现块的模板的上下文，而不是块助手模板本身的上下文。
- en: Block helpers are a powerful tool because they allow us to write self-contained
    components that, when packed into a package, can be used as a drop-in-place functionality
    by others. This feature has the potential to allow for a vibrant marketplace,
    like the marketplace we see in jQuery plugins.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 块助手是一种强大的工具，因为它们允许我们编写自包含组件，当打包成包时，其他可以使用它们作为即插即用的功能。这个特性有潜力允许一个充满活力的市场，就像我们在jQuery插件市场中看到的那样。
- en: Listing posts
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列出帖子
- en: This template will be used for each post we display in the home page.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 此模板将用于在主页上显示每个帖子。
- en: 'To make it appear, we need to add a `{{#each}}` helper to the `home` template,
    as follows:'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了使其出现，我们需要在`home`模板中添加一个`{{#each}}`助手，如下所示：
- en: '[PRE30]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: When the `postsList` helper, which we pass to the `{{#each}}` block helper,
    returns an array, the content of `{{#each}}` will be repeated for each item in
    the array, setting the array item as the data context.
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当我们传递给`{{#each}}`块助手时，如果`postsList`助手返回一个数组，`{{#each}}`的内容将针对数组中的每个项目重复，将数组项目设置为数据上下文。
- en: 'To see this in action, we add the `postsList` helper in our `home.js` file
    to the template helpers, as follows:'
  id: totrans-163
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了看到这个效果，我们在`home.js`文件中添加了`postsList`助手，如下所示：
- en: '[PRE31]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'As we can see, we return an array where each item is an object containing our
    post''s data context. For `timeCreated`, we use the `moment` function of our previously
    added third-party package. This will generate dummy timestamps of a few days in
    the past. If we now go to our browser, we will see the two posts listed, as shown
    in the following screenshot:![Listing posts](img/00006.jpeg)*   To display `timeCreated`
    from our post item in the correct format, we need to create a helper function
    to format the timestamp. However, because we want to use this helper in other
    templates later, we need to make it a global helper that can be accessed by any
    template. To do this, we create a file named `template-helpers.js` and save it
    to our `my-meteor-blog/client` folder, as it doesn''t belonging to any specific
    template.*   To register a global helper, we can use Meteor''s `Template.registerHelper`
    function:'
  id: totrans-165
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正如我们可以看到的，我们返回一个数组，每个项目都是一个包含我们文章数据上下文的对象。对于 `timeCreated`，我们使用我们之前添加的第三方包的
    `moment` 函数。这将生成过去几天的时间戳。如果我们现在去浏览器，我们会看到列出的两篇文章，如下截图所示：![列出文章](img/00006.jpeg)*   为了以正确的格式显示我们的文章项中的
    `timeCreated`，我们需要创建一个助手函数来格式化时间戳。然而，因为我们想要在后面的其他模板中使用这个助手，我们需要让它成为一个全局助手，任何模板都可以访问。为此，我们创建一个名为
    `template-helpers.js` 的文件，并将其保存到我们的 `my-meteor-blog/client` 文件夹中，因为它不属于任何特定的模板.*   为了注册一个全局助手，我们可以使用
    Meteor 的 `Template.registerHelper` 函数：
- en: '[PRE32]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Now, we only have to add the helper to our `postInList` template by replacing
    the content of the footer with the following code snippet:'
  id: totrans-167
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在，我们只需通过用以下代码段替换 `postInList` 模板的底部内容来添加助手：
- en: '[PRE33]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Now, if we save both the files and go back to our browser, we will see a relative
    date added to our blog post''s footer. This works because we pass the time and
    a type string to the helper, as follows:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们保存这两个文件并回到浏览器，我们会看到博客文章底部添加了一个相对日期。这之所以有效，是因为我们把时间和一个类型字符串传递给助手，如下所示：
- en: '[PRE34]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The helper then returns the formatted date using a `moment` function.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 助手然后使用一个 `moment` 函数返回格式化的日期。
- en: With this global helper, we can now format any Unix timestamp, in any template
    to relative times, ISO time strings, and a standard date format (using the LLLL
    format, which converts to Thursday, September 4, 1986, 8:30 P.M.).
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个全局助手，我们现在可以格式化任何 Unix 时间戳，在任何模板中将时间转换为相对时间、ISO 时间字符串和标准日期格式（使用 LLLL 格式，转换为
    1986 年 9 月 4 日星期四晚上 8:30）。
- en: Now that we have already used the `{{#with}}` and `{{#each}}` block helpers,
    let's take a look at the other default helpers and syntax that Blaze uses.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经使用了 `{{#with}}` 和 `{{#each}}` 块助手，让我们来看看 Blaze 使用的其他默认助手和语法。
- en: Spacebars syntax
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spacebars 语法
- en: 'To wrap it all up, lets summarize the Spacebars syntax:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 来总结一下 Spacebars 的语法：
- en: '| Helper | Description |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| 助手 | 描述 |'
- en: '| --- | --- |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `{{myProperty}}` | The template helper can be a property from the template''s
    data context or a template helper function. If a helper function and a property
    with the same name exist, the template helper will use the helper function instead.
    |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| `{{myProperty}}` | 模板助手可以是模板数据上下文中的属性或模板助手函数。如果存在具有相同名称的助手函数和属性，模板助手将使用助手函数。
    |'
- en: '| `{{> myTemplate}}` | The inclusion helper is for a template and always expects
    a template object or null. |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| `{{> myTemplate}}` | 包含助手用于模板，并且总是期待一个模板对象或者 null。 |'
- en: '| `{{> Template.dynamic template=templateName [data=dataContext]}}` | With
    the `{{> Template.dynamic ...}}` helper, you can render a template dynamically
    by providing a template helper returning a template name for the template parameter.
    When the helper would rerun and return a different template name, it will replace
    the template on this position with the new one. |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| `{{> Template.dynamic template=templateName [data=dataContext]}}` | 使用 `{{>
    Template.dynamic ...}}` 助手，你可以通过提供返回模板名称的模板助手来动态渲染模板。当助手重新运行并返回不同的模板名称时，它将用新模板替换此位置的模板。
    |'
- en: '| `{{#myBlockHelper}}`...`{{/myBlockHelper}}` | A block helper that contains
    both HTML and the Spacebars syntax. |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| `{{#myBlockHelper}}`...`{{/myBlockHelper}}` | 包含 HTML 和 Spacebars 语法的块助手。
    |'
- en: 'By default, Spacebars comes with the following four default block helpers:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Spacebars 带有以下四个默认块助手：
- en: '`{{#if}}..{{/if}}`'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`{{#if}}..{{/if}}`'
- en: '`{{#unless}}..{{/unless}}`'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`{{#unless}}..{{/unless}}`'
- en: '`{{#with}}..{{/with}}`'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`{{#with}}..{{/with}}`'
- en: '`{{#each}}..{{/each}}`'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`{{#each}}..{{/each}}`'
- en: 'The `{{#if}}` block helper allows us to create simple conditions, as follows:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '`{{#if}}` 块助手允许我们创建简单的条件，如下所示：'
- en: '[PRE35]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The `{{#unless}}` block helper works the same as `{{#if}}`, but with swapped
    logic.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '`{{#unless}}` 块助手的工作方式与 `{{#if}}` 相同，但逻辑相反。'
- en: The `{{#with}}` block, as seen earlier, will set a new data context to its content
    and containing templates, and the `{{#each}}` block helper will render multiple
    times, setting a different data context for each iteration.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所见，`{{#with}}`块将为其内容和包含的模板设置新的数据上下文，而`{{#each}}`块帮助器将多次渲染，为每次迭代设置不同的数据上下文。
- en: Accessing parent data contexts
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问父数据上下文
- en: 'To complete our journey through the Spacebars syntax, let''s take a closer
    look at the template helper syntax that we used to display data. As we''ve already
    seen, we can display data using the double curly braces syntax, as follows:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成对Spacebars语法的探索，让我们更仔细地看看我们用来显示数据的模板帮助器语法。正如我们已经在前面看到的，我们可以使用双花括号语法显示数据，如下所示：
- en: '[PRE36]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Inside this helper, we can access the properties of an object using the dot
    syntax:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在此帮助器内部，我们可以使用点语法访问对象属性：
- en: '[PRE37]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'We can also access a parent data context using a path-like syntax:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用路径样式的语法访问父数据上下文：
- en: '[PRE38]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Additionally, we can move more than just one context up:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们可以移动更多的上下文：
- en: '[PRE39]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: This feature allows us to be very flexible about the data context.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 这一特性使我们能够非常灵活地设置数据上下文。
- en: Note
  id: totrans-201
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If we want to do the same from inside a template helper, we can use the Template
    API `Template.parentData(n`), where `n` is the number of steps up to access the
    data context of parent templates.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想从一个模板帮助器内部做同样的事情，我们可以使用模板API的`Template.parentData(n)`，其中`n`是要访问父模板数据上下文所需的步骤数。
- en: '`Template.parentData(0)` is the same as `Template.currentData()`, or `this`
    if we are in a template helper.'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '`Template.parentData(0)`与`Template.currentData()`相同，或者如果我们处于模板帮助器中，则为`this`。'
- en: Passing data to helpers
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向帮助器传递数据
- en: 'Passing data to helpers can be done in two different ways. We can pass arguments
    to a helper as follows:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 向帮助器传递数据可以通过两种不同的方式完成。我们可以如下向帮助器传递参数：
- en: '[PRE40]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Then, we can access it in the helper as follows:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以在帮助器中按照以下方式访问它：
- en: '[PRE41]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Besides this, we can pass data in the form of key-values:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这个，我们还可以以键值的形式传递数据：
- en: '[PRE42]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'This time, however, we need to access them as follows:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这次我们需要按照以下方式访问它们：
- en: '[PRE43]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Be aware that block and inclusion helpers act differently because they always
    expect objects or key-values as arguments:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，块帮助器和包含帮助器的行为不同，因为它们总是期望对象或键值作为参数：
- en: '[PRE44]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'We would then need to typecast the passed argument if we want to use it in
    a helper function as follows:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想在帮助器函数中使用它，那么我们需要对传递的参数进行类型转换，如下所示：
- en: '[PRE45]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Beisdes, we can also simply display the string in our block helper template
    using `{{Template.contentBlock}}` as follows:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还可以在我们的块帮助器模板中简单地显示字符串，使用`{{Template.contentBlock}}`如下所示：
- en: '[PRE46]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'We can also pass another template helper as an argument to an inclusion or
    block helper, as shown in the following example:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以将另一个模板帮助器作为参数传递给包含或块帮助器，如下例所示：
- en: '[PRE47]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Though passing data to template helpers and inclusion/block helpers are slightly
    different, arguments can be quite flexible when using helpers to generate them.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管向模板帮助器传递数据和向包含/块帮助器传递数据略有不同，但在生成帮助器时参数可以非常灵活。
- en: Summary
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Reactive templates are one of the most impressive features of Meteor, and once
    we get used to them, we probably won't look back to manual DOM manipulation anymore.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 反应式模板是Meteor最令人印象深刻的功能之一，一旦我们习惯了它们，我们可能就不会再回到手动操作DOM了。
- en: After reading this chapter, we should know how to write and use templates in
    Meteor. We should also understand its basic syntax and how to add templates.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读这一章之后，我们应该知道如何在Meteor中编写和使用模板。我们还应该理解其基本语法以及如何添加模板。
- en: We saw how to access and set data in templates and how to use helpers. We learned
    about different types of helpers, such as inclusion helpers and block helpers.
    We also built our own custom block helpers and used Meteor's default helpers.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到了如何在模板中访问和设置数据，以及如何使用帮助器。我们学习了不同类型的帮助器，例如包含帮助器和块帮助器。我们还构建了我们自己的自定义块帮助器并使用了Meteor的默认帮助器。
- en: We learned that templates have three different callbacks, for when the template
    gets created, rendered, and destroyed.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 我们了解到模板有三种不同的回调，分别用于模板创建、渲染和销毁时。
- en: We learned how to pass data to helpers, and how this differs in normal helpers
    and block helpers.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了如何向帮助器传递数据，以及这在普通帮助器和块帮助器之间的区别。
- en: 'To dig deeper, take a look at the following documentations:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 为了深入了解，请查看以下文档：
- en: '[https://docs.meteor.com/#/full/templates_api](https://docs.meteor.com/#/full/templates_api)'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.meteor.com/#/full/templates_api](https://docs.meteor.com/#/full/templates_api)'
- en: '[https://www.meteor.com/blaze](https://www.meteor.com/blaze)'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.meteor.com/blaze](https://www.meteor.com/blaze)'
- en: '[https://docs.meteor.com/#/full/blaze](https://docs.meteor.com/#/full/blaze)'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.meteor.com/#/full/blaze](https://docs.meteor.com/#/full/blaze)'
- en: '[https://atmospherejs.com/meteor/spacebars](https://atmospherejs.com/meteor/spacebars)'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://atmospherejs.com/meteor/spacebars](https://atmospherejs.com/meteor/spacebars)'
- en: '[http://momentjs.com](http://momentjs.com)'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://momentjs.com](http://momentjs.com)'
- en: You can find this chapter's code examples either at [https://www.packtpub.com/books/content/support/17713](https://www.packtpub.com/books/content/support/17713)
    or on GitHub at [https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter2](https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter2).
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这个章节找到代码示例，网址为[https://www.packtpub.com/books/content/support/17713](https://www.packtpub.com/books/content/support/17713)，或者在GitHub上查看[https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter2](https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter2)。
- en: With all this new knowledge about templates, we are ready to add data to our
    database and see how we can display it in our home page.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 关于模板的新知识让我们准备好向我们的数据库添加数据，并看看我们如何在主页上显示它。
