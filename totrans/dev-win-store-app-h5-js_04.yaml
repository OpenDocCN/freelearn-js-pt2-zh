- en: Chapter 4. Developing Apps with JavaScript
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。使用JavaScript开发应用程序
- en: In this chapter we will learn how to get started with developing a Windows 8
    app using JavaScript. First, we will learn about the tools and then we will cover
    how to acquire a developer license. Afterwards, we will start with one of the
    templates provided for Windows Store apps development, build a sample app from
    a blank template, and modify it so that we get to see to know some of the features
    of a JavaScript app.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何使用JavaScript开始开发Windows 8应用程序。首先，我们将学习有关工具的知识，然后我们将介绍如何获取开发者许可证。之后，我们将从为Windows
    Store应用程序开发提供的模板中选择一个，从一个空白模板构建一个示例应用程序，并对其进行修改，以便我们了解一些JavaScript应用程序的功能。
- en: Introducing the tools
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍工具
- en: Windows Store apps are a new type of application introduced by Windows 8 and
    run only on that platform. So, in order to start developing, you will first need
    to have Windows 8 installed on your machine and second, the required development
    tools.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 8引入了一种新类型的应用程序——Windows Store应用程序，这种应用程序只能在Windows 8上运行。所以，为了开始开发，你首先需要在你的电脑上安装Windows
    8，第二，你需要所需的开发工具。
- en: There are two options for acquiring Windows 8; one option is to get it from
    the Subscriber Downloads on MSDN, if you have a subscription there. Alternatively,
    if you don't have an MSDN account, you can get the 90-day evaluation version of
    Windows 8 Enterprise from the *Evaluation Center*, found on the MSDN website via
    [http://msdn.microsoft.com/en-US/evalcenter/jj554510.aspx?wt.mc_id=MEC_132_1_4](http://msdn.microsoft.com/en-US/evalcenter/jj554510.aspx?wt.mc_id=MEC_132_1_4).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 获取Windows 8有两个选择；一种选择是从MSDN的订阅者下载处获取，如果你在那里有订阅的话。另一种选择是，如果你没有MSDN账户，你可以从通过MSDN网站上的[http://msdn.microsoft.com/en-US/evalcenter/jj554510.aspx?wt.mc_id=MEC_132_1_4](http://msdn.microsoft.com/en-US/evalcenter/jj554510.aspx?wt.mc_id=MEC_132_1_4)找到的*评估中心*获取Windows
    8企业版的90天评估版本。
- en: Note
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that the Evaluation Edition cannot be upgraded after expiry.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，评估版在过期后无法升级。
- en: After installing Windows 8, you will need to download the developer tools, which
    are available for free on the *Windows Dev Center* page on the MSDN site. The
    Windows Dev Center, with its new and improved layout, is your starting point for
    all the tools and resources you might need and can be found under the section
    **Downloads for developing Windows Store apps** at [http://msdn.microsoft.com/en-US/windows/apps/br229516.aspx](http://msdn.microsoft.com/en-US/windows/apps/br229516.aspx).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装Windows 8之后，你需要下载开发工具，这些工具在MSDN网站上免费提供，可以在[http://msdn.microsoft.com/en-US/windows/apps/br229516.aspx](http://msdn.microsoft.com/en-US/windows/apps/br229516.aspx)的*Windows开发者中心*页面找到。Windows开发者中心拥有全新的改进布局，是你获取所有工具和资源的首个起点，可以在**Windows
    Store应用程序开发下载**部分找到。
- en: 'The essential download is the bundle containing Visual Studio Express, which
    will be your tool to develop Windows apps. The link to this download is available
    under the **Visual Studio Express 2012 for Windows 8** section and contains the
    following files:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 必要的下载是包含Visual Studio Express的捆绑包，这将是你开发Windows应用程序的工具。这个下载的链接可以在**Windows 8的Visual
    Studio Express 2012**部分找到，并包括以下文件：
- en: Microsoft Visual Studio Express 2012 for Windows 8
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微软视觉工作室Express 2012 for Windows 8
- en: Blend for Microsoft Visual Studio 2012
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微软视觉工作室2012的Blend
- en: Windows 8 software development kit (SDK)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows 8软件开发工具包（SDK）
- en: Windows Store apps project templates (available within Visual Studio 2012)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows Store应用程序项目模板（在微软视觉工作室2012中提供）
- en: 'Additionally, you can find other available downloads on that page, such as:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你还可以在该页面上找到其他可用的下载，例如：
- en: 'Design assets: This includes the necessary Photoshop templates (`.psd` files),
    which include templates, common controls, and common components such as contracts,
    notifications, and tiles needed for designing an app.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计资源：这包括必要的Photoshop模板（`.psd`文件），其中包括模板、常用控件和常见组件，如合同、通知和磁贴，这些是设计应用程序所需的。
- en: 'Sample App Pack: This includes hundreds of code samples from Microsoft to help
    jump-start your project quickly and learn about most of the features. This is
    available in all or specific programming languages.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示例应用程序包：这包括数百个来自微软的代码示例，可以帮助你快速启动项目并了解大部分功能。这适用于所有或特定编程语言。
- en: 'Hands-on labs for Windows 8: This includes a series of eight hands-on lab modules,
    which in turn guide you through the development of a Windows Store app titled
    Contoso Cookbook. This incorporates many of the key new features available in
    Windows 8\. These lab series are available in JavaScript and HTML, or C# and **Extensible
    Application Markup Language** (**XAML**).'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows 8动手实验室：这包括一系列八个动手实验室模块，这些模块将引导您开发一个名为Contoso Cookbook的Windows Store应用。这包含了Windows
    8中许多关键的新功能。这些实验室系列可通过JavaScript和HTML，或C#和**可扩展应用程序标记语言**（**XAML**）获得。
- en: 'Live SDK: This includes a set of controls and APIs that we can use to enable
    the app to integrate **Single Sign-on** (**SSO**) with a Microsoft account and
    access information from SkyDrive, Hotmail, and Windows Live Messenger.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Live SDK：这包括一组控件和API，我们可以使用它们来使应用与Microsoft账户集成**单点登录**（**SSO**），并访问来自SkyDrive、Hotmail和Windows
    Live Messenger的信息。
- en: Note
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Since Windows Store app development in Visual Studio 2012 is only supported
    on Windows 8, you cannot develop apps on Windows 7 even if you have Visual Studio
    2012 installed. Moreover, you can't develop Windows Store apps on Windows Server
    2012 since the developer licenses aren't available for it.
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于Visual Studio 2012仅支持Windows 8的Windows Store应用开发，因此即使安装了Visual Studio 2012，您也无法在Windows
    7上开发应用。而且，由于没有为Windows Server 2012提供开发者许可证，所以您也无法在Windows Server 2012上开发Windows
    Store应用。
- en: Note that you can use any of the other Visual Studio 2012 editions to develop
    Windows Store apps, including the Ultimate, Premium, Professional, and Test Professional
    editions.
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，您可以使用Visual Studio 2012的其他任何版本来开发Windows Store应用，包括Ultimate、Premium、Professional和Test
    Professional版本。
- en: Getting a free developer license
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取免费开发者许可证
- en: In order to start developing Windows Store apps, you will need to have a developer
    license for Windows 8\. This license lets you install, develop, test, and evaluate
    apps locally before they are tested and certified by the Windows Store. Moreover,
    the developer licenses are free and you do not need a Store account to get one;
    it only requires a Microsoft account and you can acquire more than one license
    per account. It expires in 30 days and must be renewed. If you already have a
    Windows Store account, the license will serve you for 90 days. After you acquire
    a license on a local machine, you won't be prompted again on that machine unless
    it expires, or you remove it (maybe by formatting or uninstalling Visual Studio).
    It is quite easy to get one; you can get a developer license using Visual Studio
    2012\. When you run it for the first time on Windows 8, it will prompt you to
    obtain a developer license; all you need to do is to sign in with your Microsoft
    account. You can always attempt to acquire or renew a developer license for Windows
    8 from inside Visual Studio using the store options, which we will discuss in
    more details in [Chapter 10](ch10.html "Chapter 10. Packaging and Publishing"),
    *Packaging and Publishing*, when we learn about publishing the app.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始开发Windows Store应用，您需要拥有Windows 8的开发者许可证。这个许可证允许您在Windows Store测试和认证之前，在本地安装、开发、测试和评估应用。此外，开发者许可证是免费的，您不需要Store账户就可以获得一个；它只需要一个Microsoft账户，并且每个账户可以获取多个许可证。许可证在30天后过期，必须续订。如果您已经有了一个Windows
    Store账户，许可证将为您提供90天服务。在您在本地计算机上获得许可证之后，除非许可证过期或您删除它（可能通过格式化或卸载Visual Studio），否则在该计算机上不会再提示您。获得一个许可证非常简单；您可以使用Visual
    Studio 2012来获取开发者许可证。当您第一次在Windows 8上运行它时，它会提示您获得一个开发者许可证；您只需要使用您的Microsoft账户登录即可。您总是可以尝试通过使用Visual
    Studio中的商店选项来获取或续订Windows 8的开发者许可证，我们将在[第10章](ch10.html "第10章 打包和发布") *打包和发布*
    中详细讨论打包和发布应用时，学习如何发布应用。
- en: Note
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Bear in mind that the first time you try to run an app, you will be prompted
    to acquire a developer license if you haven't already done so.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，如果您还没有这样做，第一次尝试运行应用时将被提示获取开发者许可证。
- en: The following screenshot shows the process using Visual Studio 2012 Ultimate.
    Go to **Project** | **Store** | **Acquire Developer License**.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的屏幕截图显示了使用Visual Studio 2012 Ultimate的过程。请前往**项目** | **商店** | **获取开发者许可证**。
- en: '![Getting a free developer license](img/7102EN_04_01.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![获取免费开发者许可证](img/7102EN_04_01.jpg)'
- en: If you're using the Express edition, you will have a **Store** option directly
    in the top menu, not underneath **Project**. You simply have to go to **Store**
    | **Acquire Developer License**.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是Express版，您将在顶部菜单中直接有一个**商店**选项，而不是在**项目**下面。您只需前往**商店** | **获取开发者许可证**。
- en: Note
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Choosing not to acquire or renew a developer license will result in an error
    (code DEP0100) when you try to build or deploy the app in Visual Studio.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 选择不获取或续签开发者许可证，当你尝试在Visual Studio中构建或部署应用时，将会导致错误（代码DEP0100）。
- en: After you install Windows 8 and the required tools and obtain a developer license,
    you're ready to start building your first app. You start by choosing a programming
    language to use. As we previously mentioned, Windows 8 allows you to build on
    your programming language knowledge base and develop with the languages you already
    know (unless you want to learn something new). If you are into web development,
    you can choose JavaScript as your programming language and use the latest technologies
    in web development (HTML5 and CSS3, to name a few), and that's what this book
    is all about. If you're coming from a .NET background, you can choose Visual C#
    or Visual Basic and XAML. And you have the C++ option with either C++ and XAML
    or C++ and DirectX.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Windows 8和所需工具并获得开发者许可证后，您就可以开始构建您的第一个应用了。您开始时需要选择一种编程语言来使用。如我们之前提到的，Windows
    8允许您基于您的编程语言知识库进行构建，并用您已经知道的编程语言进行开发（除非您想学习新东西）。如果您从事网页开发，可以选择JavaScript作为您的编程语言，并使用最新的网页开发技术（例如HTML5和CSS3），这本书就是关于这些内容。如果您来自.NET背景，可以选择Visual
    C#或Visual Basic和XAML。您还有使用C++选项，分别是C++和XAML，或者C++和DirectX。
- en: Using Visual Studio and its templates
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Visual Studio及其模板
- en: 'So we now have the tools. With Visual Studio as our playground and JavaScript
    as our programming language, we are set and ready to develop. We will start by
    creating a new project for Windows Store. Go to **File** | **New Project**. Drill
    down under **Installed**, go to **Templates** and then to **JavaScript** | **Windows
    Store**, and select a template type as the following screenshot shows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 所以现在我们有了工具。有了Visual Studio作为我们的游乐场和JavaScript作为我们的编程语言，我们已经准备就绪可以开始开发了。我们将从为Windows
    Store创建一个新项目开始。点击**文件** | **新建项目**。向下钻取到**已安装**，然后到**模板**，再到**JavaScript** | **Windows
    Store**，并选择一个模板类型，如下面的屏幕截图所示：
- en: '![Using Visual Studio and its templates](img/7102EN_04_02.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![使用Visual Studio及其模板](img/7102EN_04_02.jpg)'
- en: 'As you see in the previous screenshot, on the center pane of the **New Project**
    dialog there are five templates to choose from. These templates come with Visual
    Studio 2012 and provide a good starting point and help you jump-start and speed
    up the development of your apps. These project templates, as per their order of
    appearance on the **New Project** dialog, are as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在之前的屏幕截图中所看到的，在**新建项目**对话框的中心面板上有五种模板可供选择。这些模板随Visual Studio 2012提供，为您提供了良好的起点，并帮助您快速启动和加速应用的开发。这些项目模板，按照它们在**新建项目**对话框中出现的顺序，如下所示：
- en: '**Blank App**: This is a basic project template that creates an empty Windows
    Store app that compiles and runs. However, it contains no user interface controls
    or data.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**空白应用**：这是一个基本的工程项目模板，创建一个空的Windows Store应用，可以编译和运行。然而，它不包含任何用户界面控件或数据。'
- en: '**Grid App**: This is a project that provides a grid view format of the content.
    It is a good starting point for an app that allows users to browse through categories
    of data to find content. A few examples of its use include RSS readers, shopping
    apps, news apps, and media gallery apps.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网格应用**：这是一个提供网格视图格式的内容的工程项目。它是允许用户浏览数据类别以查找内容的应用程序的良好起点。其使用的一些例子包括RSS阅读器、购物应用、新闻应用和媒体画廊应用。'
- en: '**Split App**: This is a project that provides a split view of the content,
    whereby the data is displayed in a two-column master/detail view with the list
    of data on one side and the details of each single data item on the other side,
    just as in Outlook. A few examples of its uses include news reader apps, sports
    scores apps, and e-mail apps.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分割应用**：这是一个提供内容分割视图的项目，其中数据以两栏的主/详细视图显示，列表数据在一侧，每个单一数据项的详细信息在另一侧，就像Outlook一样。其使用的一些例子包括新闻阅读器应用、体育比分应用和电子邮件应用。'
- en: '**Fixed Layout App**: This is a project with a basic and minimal template,
    similar to an app created with the **Blank App** template, but the difference
    is that the content in this layout is aimed at the fixed-layout viewport, whereby
    the container is automatically resized when the window size changes to conform
    to the display area; this scaling is ensured using the `ViewBox` control.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**固定布局应用**：这是一个基本且最小的模板项目，类似于使用**空白应用**模板创建的应用，不同之处在于此布局中的内容针对固定布局视口，即当窗口大小变化时容器会自动调整大小以适应显示区域；这种缩放是通过使用`ViewBox`控件来保证的。'
- en: '**Navigation App**: This is a project that creates an app with the single-page
    navigation model recommended for Windows Store apps. You cannot implement a navigation
    model by just adding `anchor` links to the markup; instead, the navigation model
    is implemented using the `navigator.js` file, which can also be found in the Grid
    and Split templates, while the **Blank App** and **Fixed Layout App** templates
    do not include this file and thus you will have to add the file manually.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**导航应用**：这是一个创建采用单页导航模型（Windows Store应用推荐使用）的项目。您不能仅通过在标记中添加`锚点`链接来实现导航模型；相反，导航模型是通过使用`navigator.js`文件来实现的，该文件也可以在网格和分屏模板中找到，而**空白应用**和**固定布局应用**模板则不包含此文件，因此您必须手动添加该文件。'
- en: Note
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The **Grid App** and **Split App** templates are not only a good starting point
    to build an app, but are also great templates for learning and will give you a
    good idea about how the app is built and what it is composed of.
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**网格应用**和**分屏应用**模板不仅是一个构建应用程序的好起点，而且也是很好的学习模板，能让您对应用程序是如何构建的以及它由什么组成有一个很好的了解。'
- en: 'The three templates **Blank App**, **Grid App**, and **Split App** are shared
    between all the available programming languages for Windows Store development.
    Each project template includes the necessary files needed to implement the feature
    it represents without any development from your side; for example, creating a
    new Grid App and running it will result in the following app:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 三个模板**空白应用**、**网格应用**和**分屏应用**可供Windows Store开发中所有可用的编程语言使用。每个项目模板都包含了实现它所代表功能的必要文件，无需您进行任何开发；例如，创建一个新的网格应用并运行它，将会得到如下应用程序：
- en: '![Using Visual Studio and its templates](img/7102EN_04_03.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![使用Visual Studio及其模板](img/7102EN_04_03.jpg)'
- en: The result is a Windows Store-ready app that contains dummy data with navigation
    enabled and even supports **snapped and fill layouts**, which are the layouts
    that apps exist in when the resolution is split between two apps that are side
    by side. All of this without even writing a single line of code! So, imagine if
    you customize this minimal app a little by applying different styles to the layout
    and display real data in the content (say, RSS feeds from a news website), you
    will have a news app that is more than 75 percent ready for the Store (missing
    a couple of features such as semantic zoom, app bar, and settings) in no time.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是一个准备好用于Windows Store的应用程序，其中包含带有启用导航的示例数据，甚至支持**粘贴和填充布局**，这是当分辨率在并排的两个应用程序之间分配时应用程序存在的布局。所有这一切甚至不需要编写一行代码！所以，想象一下，如果您通过为布局应用不同的样式并在内容中显示真实数据（比如说，新闻网站的RSS源），对这个最小化的应用进行一些定制，您将很快拥有一个超过75%准备好上架的应用程序（还缺少一些功能，比如语义缩放、应用栏和设置）。
- en: You can also download samples directly from Visual Studio. These samples will
    provide completed and working code samples that will compile and run as a Windows
    Store app, with the purpose of demonstrating the various new programming models,
    platforms, features, and components available in Windows 8.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以直接从Visual Studio下载示例。这些示例提供了完整且可运行的代码示例，可以编译并作为Windows Store应用运行，旨在展示Windows
    8中可用的各种新的编程模型、平台、功能和组件。
- en: Project item templates
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目项模板
- en: 'In addition to the project templates, you have language-specific item templates
    exclusive to Windows Store apps, in our case, called **JavaScript item templates**.
    These item templates are app files that can be added to an already existing project
    and contain commonly used code and functionality (consider it a user control),
    and also help to reduce development time. Item templates can be added by right-clicking
    on **Project** from the top menu and then going to **Add** | **New Item**. There
    are four JavaScript item templates available; they are as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 除了项目模板之外，还有特定于Windows Store应用的语言项模板，在我们的案例中，称为**JavaScript项模板**。这些项模板是可以添加到已存在项目中的应用程序文件，包含常用的代码和功能（可以把它看作是一个用户控件），并且有助于减少开发时间。可以通过右键点击顶部菜单中的**项目**，然后选择**添加**
    | **新建项**，来添加项模板。有四个JavaScript项模板可供使用；它们如下所示：
- en: '**Page Control**: This contains the basic content and markup for a page in
    the app, which includes a header section with a Back button and a main content
    section. Each **Page Control** template will include three files to be added to
    the project (an HTML file containing the markup needed, a JavaScript file containing
    the code related for the page, and a CSS file that provides the style specific
    to the page).'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**页面控制**：这包含了应用程序中页面的基本内容和标记。其中包括一个带有返回按钮的头部区域和一个主要内容区域。每个**页面控制**模板将包括三个要添加到项目的文件（一个包含所需标记的HTML文件，一个包含与页面相关的代码的JavaScript文件，以及一个为页面提供特定样式的CSS文件）。'
- en: '**File Open Picker Contract**: This will add the functionality that enables
    an app to provide its data as a file list to other requesting apps using a **File
    Picker** dialog. It will also display the files in a ListView control. A typical
    use for this would be when creating a photo-picker dialog.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文件打开选择器合同**：这将添加一个功能，使应用程序能够使用**文件选择器**对话框将其数据作为文件列表提供给其他请求文件的应用程序。它还将文件显示在ListView控件中。这个合同的一个典型用途是在创建一个照片选择器对话框时。'
- en: '**Search Contract**: This will add the search contract that allows the app
    to respond to search queries coming from Search Charm in Windows 8\. It contains
    a search results page to present the results to the user. It is important to add
    this contract if your app has some data that can be searched for.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**搜索合同**：这将添加一个允许应用程序响应来自Windows 8中搜索磁贴的搜索查询的搜索合同。它包含一个搜索结果页面，用于向用户展示结果。如果您的应用程序有一些可以搜索的数据，添加这个合同是很重要的。'
- en: '**Share Target Contract**: This will add the share contract to the app, which
    enables an app to expose data for sharing with other apps and make it integrate
    with Share Charm in Windows 8\. So, if the app has this contract, it will appear
    in the list of apps in the Share UI. A typical use for this template would be
    to allow users to post links or photos to Facebook, Twitter, or any other app
    that receives shared content. Vice versa, it will also enable the app to receive
    shared content; thus, the app can behave like Facebook or Twitter.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分享目标合同**：这将向应用程序添加一个分享合同，允许应用程序与其他应用程序共享数据，并使其与Windows 8中的分享磁贴集成。所以，如果应用程序具有此合同，它将出现在分享UI中的应用程序列表中。这个模板的典型用途是允许用户将链接或照片发布到Facebook，Twitter或任何其他接收共享内容的其他应用程序。反之亦然，它还将允许应用程序接收共享内容；因此，应用程序可以表现得像Facebook或Twitter。'
- en: 'The following screenshot shows the **Add New Item** dialog with the previously
    listed project item templates:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的屏幕截图显示了带有前面列出的项目模板的**添加新项**对话框：
- en: '![Project item templates](img/7102EN_04_04.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![项目模板](img/7102EN_04_04.jpg)'
- en: Note
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: I recommend you add each item template to a separate folder with a correlated
    name. Since each item template adds three related files, the solution will be
    neater and more organized if you group them into separate folders. For example,
    a folder for pages and under it a folder for each page; the same goes for the
    contracts.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议您将每个项目模板添加到单独的文件夹中，并且文件夹名称与其相关联。由于每个项目模板都增加了三个相关文件，如果您将它们分组到单独的文件夹中，解决方案将更加整洁和有序。例如，为页面创建一个文件夹，并在其中为每个页面创建一个文件夹；合同部分也是如此。
- en: After you chose an app template and it was loaded onto Visual Studio, you would
    have basically created a very simple app; this app can directly compile and run.
    Using Visual Studio, you can run the app either on your local machine or on the
    Simulator. To run it on your local machine, simply press *F5* to build, deploy,
    and start the app.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 选择一个应用程序模板并将其加载到Visual Studio之后，您基本上已经创建了一个非常简单的应用程序；这个应用程序可以直接编译和运行。使用Visual
    Studio，您可以在本地计算机或模拟器上运行应用程序。要在本地计算机上运行它，只需按*F5*键来构建，部署并启动应用程序。
- en: Note
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that you can instead just deploy the solution but the app will not run
    directly; you will need to find it among the other apps in the Start menu and
    launch it manually instead.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您可以选择不部署解决方案，但是应用程序不能直接运行；您需要从开始菜单中的其他应用程序中找到它，然后手动启动它。
- en: 'There is a third option to run a remote device connected directly through an
    Ethernet cable. To use the simulator, you only need to select from the options
    in the run menu as shown in the following screenshot:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一种通过以太网电缆直接连接远程设备运行的方法。要使用模拟器，您只需要从运行菜单中选择以下屏幕截图所示的选项：
- en: '![Project item templates](img/7102EN_04_05.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![项目模板](img/7102EN_04_05.jpg)'
- en: The Windows 8 Simulator is a great tool to help you test and debug the app;
    it allows you to test the features as if you were working with the real device,
    especially if you do not have a tablet or a touch-enabled device during development.
    It will enable the app to change resolutions and screen orientations between landscape
    and portrait and toggle between the different app layouts and view states (snapped
    and full). In addition, you can test how the app responds to touch and gestures
    such as swipe and pinch to zoom. We wouldn't be able to try all these features
    and functionalities on a laptop or PC during development.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 8 模拟器是一个极好的工具，能帮助你测试和调试应用；它允许你像在真实设备上一样测试功能，特别是如果你在开发过程中没有平板电脑或触控设备。它能让应用在横屏和竖屏之间改变分辨率，并在不同的应用布局和视图状态（嵌入式和全屏）之间切换。此外，你还可以测试应用对触摸和手势（如滑动和捏合缩放）的响应。在开发过程中，我们无法在笔记本电脑或PC上尝试所有这些功能和特性。
- en: Note
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: When you run the app in Visual Studio in the debug mode, you can make changes
    to the code and markup and refresh the app to see the changes without having to
    rebuild/rerun it. You can do this using the **Refresh Windows App** button, which
    will appear next to the pause, stop, and restart debugging buttons, only after
    you run the app from within Visual Studio.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在Visual Studio中以调试模式运行应用时，你可以更改代码和标记，并刷新应用以查看更改，而无需重新构建/重新运行。你可以使用**刷新Windows应用**按钮来实现，该按钮将在暂停、停止和重新启动调试按钮旁边出现，仅在你从Visual
    Studio中运行应用后出现。
- en: Getting started with Blank App
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用空白应用
- en: 'Let''s start creating a minimal app using the **Blank App** template; the first
    thing we need to do is launch Visual Studio 2012, create a new project, and go
    to **JavaScript** | **Windows Store** | **Blank App**. Although the Blank App
    seems empty when you run it, it contains several files that are essential to any
    Windows Store app you create using JavaScript; all the other templates will have
    these files. The following screenshot shows the structure of this app listed in
    the **Solution Explorer** window:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用**空白应用**模板开始创建一个最小应用；我们首先需要做的是启动Visual Studio 2012，创建一个新项目，并前往**JavaScript**
    | **Windows Store** | **空白应用**。尽管空白应用在运行时看起来很空，但它包含了一些使用JavaScript创建的Windows Store应用所需的文件；其他所有模板都将包含这些文件。以下屏幕截图显示了此应用在**解决方案资源管理器**窗口中的结构：
- en: '![Getting started with Blank App](img/7102EN_04_06.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![开始使用空白应用](img/7102EN_04_06.jpg)'
- en: 'This previous screenshot shows the skeleton of a simple app, with the following
    files:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 此前的屏幕截图展示了简单应用的骨架，包括以下文件：
- en: '`Windows Library for JavaScript 1.0`: The Windows Library for JavaScript is
    a library of CSS and JavaScript files. As you drill down into this folder you
    will see that it contains two subfolders, as follows:'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Windows Library for JavaScript 1.0`：Windows Library for JavaScript是一个CSS和JavaScript文件的库。当你深入这个文件夹时，你会看到它包含两个子文件夹，如下所示：'
- en: '`css`: This folder includes the two main CSS stylesheets that contains the
    set of styles that gives the app the Windows 8 look and feel. The two stylesheets
    are `ui-dark.css` and `ui-light.css`. As their names imply, the first will apply
    a dark color theme to the app and the latter a light color. You can choose either
    one by referencing it in the HTML pages.'
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`css`：此文件夹包括两个主要的CSS样式表，它们是`ui-dark.css`和`ui-light.css`，这些样式表为应用提供了Windows
    8的外观和感觉。正如它们的名称所暗示的，第一个将应用一个深色主题，而第二个将应用一个浅色主题。你可以在HTML页面中引用其中的一个来选择。'
- en: '`js`: This folder includes `base.js` and `ui.js`; these two files contain the
    JavaScript APIs that provide the controls, objects, and helper functions, all
    organized into namespaces that will make the development experience using JavaScript
    much easier.'
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`js`：此文件夹包括`base.js`和`ui.js`；这两个文件包含了提供控件、对象和帮助函数的JavaScript API，所有这些都组织成名称空间，这将使使用JavaScript的开发体验变得更加容易。'
- en: '`default.css`: This is the stylesheet that contains the CSS styles for the
    app.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default.css`：这是包含应用CSS样式的样式表。'
- en: '`images`: This folder contains the images needed to present the app and its
    identity (two logos, the splash screen image, and the store logo).'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`images`：此文件夹包含展示应用及其身份所需的图片（两个标志、启动屏幕图片和商店标志）。'
- en: '`default.js`: This JavaScript file implements the main functionality of the
    app and contains the code that handles your app''s life cycle. In this file, you
    can write any additional code that is related to the `default.html` page.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default.js`：此JavaScript文件实现了应用的主要功能，并包含了处理应用生命周期的代码。在这个文件中，你可以编写与`default.html`页面相关的任何附加代码。'
- en: '`default.html`: This is the start and home page that is first loaded when the
    app runs. It provides the markup for the content host (where each page is loaded
    into the main window).'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default.html`：这是应用程序的起始和主页，当应用程序运行时首先加载。它提供了内容宿主（主窗口中加载每个页面）的标记。'
- en: '`package.appxmanifest`: This is the manifest file. It basically describes the
    app package for Windows by specifying the properties that describe an app, such
    as name, description, start page, and so on.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`package.appxmanifest`：这是清单文件。它基本上通过指定描述应用程序的属性，如名称、描述、起始页面等，来描述Windows上的应用程序包。'
- en: '`TestApp_TemporaryKey.pfx` (`AppName_TemporaryKey.pfx`): This file signs the
    `.appxmanifest` file.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TestApp_TemporaryKey.pfx`（`AppName_TemporaryKey.pfx`）：这个文件签署了`.appxmanifest`文件。'
- en: 'Let''s have a look at the `default.html` page, which is the start page of the
    app (and in this case, the only page):'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下`default.html`页面，这是应用程序的起始页面（在这个案例中，也是唯一页面）：
- en: '[PRE0]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'As you can tell from `Doctype html`, the page is HTML5\. We have the title
    of the app in the `<head>` and then the reference for the Windows Library for
    JavaScript (`WinJS`) files. The references are marked with the comment `WinJS`
    `references`. The `.css` file is referenced first so that the loading of the scripts
    doesn''t delay or hinder the loading of the styles and, in case the `.js` files
    apply some modifications to the stylesheet, the styles need to be loaded beforehand.
    The dark color theme is applied; you can simply change it to the light one by
    changing the reference as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 从`Doctype html`可以看出，页面是HTML5的。我们在`<head>`中放置了应用程序的标题，然后是JavaScript（`WinJS`）文件的引用。引用用`WinJS`
    `references`注释标记。首先引用`.css`文件，这样脚本的加载就不会延迟或阻碍样式的加载，如果`.js`文件对样式表进行了某些修改，需要在加载样式之前加载样式。这里应用了深色主题；你可以简单地将其更改为浅色主题，通过如下更改引用：
- en: '[PRE1]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Try not to modify the CSS and JavaScript files of `WinJS`. It is better to create
    styles or JavaScript functions that override existing styles and functionalities
    in different files and apply them to the app.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 不要修改`WinJS`的CSS和JavaScript文件。最好创建样式或JavaScript函数，在不同文件中覆盖现有的样式和功能，并将它们应用于应用程序。
- en: Under the `WinJS` references, there are references to the stylesheets and JavaScript
    files that are app-specific and clearly differentiated by the comment.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在`WinJS`引用下，有对应用程序特定的样式表和JavaScript文件的引用，这些引用通过注释清晰地区分。
- en: Then comes the body. Here, in the example of a blank app, the body contains
    nothing but simple text.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 然后是body部分。在这里，以空白应用程序为例，body只包含简单文本。
- en: 'If you attempt to launch the app as is, you will see a black color background
    covering the screen and will also see the text: **Content goes here**. And just
    before this page appears, you will notice that a splash screen appears for a few
    seconds, displaying the image specified for the splash screen in the manifest
    file. Let''s try to put some life into this blank app by modifying our start page
    and adding some markup to the body, just as you would add to any HTML page you''ve
    dealt with before.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你尝试以当前状态启动应用程序，你会看到屏幕上覆盖着黑色背景，还会看到文本：**内容在此处**。在这个页面出现之前，你会注意到一个启动屏幕出现几秒钟，显示在清单文件中指定的启动屏幕图像。让我们尝试通过修改我们的起始页面并向body添加一些标记，给这个空白应用程序带来一些生命，就像你之前处理过的任何HTML页面一样。
- en: 'Replace the existing paragraph element with the following:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 用以下内容替换现有的段落元素：
- en: '[PRE2]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Run the app; it will display the markup we just added. We can type in any text
    in the `input` element but clicking the button will have no effect. So let's create
    an event handler for this button to output in `div` whatever we add in the `input`
    element. We need to create the event handler in the `default.js` file because
    it's where we write the additional code that interacts with the `default.html`
    page.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序；它将显示我们刚刚添加的标记。我们可以在`input`元素中输入任何文本，但点击按钮将没有效果。所以让我们为这个按钮创建一个事件处理程序，在`div`中输出我们在`input`元素中添加的内容。我们需要在`default.js`文件中创建事件处理程序，因为那里是我们编写与`default.html`页面交互的额外代码的地方。
- en: 'First let''s have a look at this `default.js` file. You will notice some code
    inside it wrapped by a single function, shown as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 首先让我们来看一下这个`default.js`文件。你会注意到里面有一些用单个函数包裹的代码，如下所示：
- en: '[PRE3]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This code represents a self-executing anonymous function that wraps all your
    code to avoid any naming conflicts and keeps the global namespace clean of unnecessary
    identifiers. The first line of code in the anonymous function declares the keyword
    `use strict`, which turns on the strict mode for the JavaScript code. This strict
    mode provides better error-checking, such as preventing you from assigning a value
    to a read-only property. After this line, you will see the rest of the code, which
    handles the activated and checkpoint states of the app by adding the `app.onactivated`
    and `app.oncheckpoint` event handlers. The code we add inside the `app.onactivated`
    event handler will be added when the app starts.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码代表了一个自执行的匿名函数，它包含所有你的代码以避免任何命名冲突，并保持全局命名空间干净，没有不必要的标识符。匿名函数的第一行代码声明了关键字`use
    strict`，它为JavaScript代码开启了严格模式。这种严格模式提供了更好的错误检查，例如防止你给只读属性赋值。在这行之后，你会看到剩下的代码，它通过添加`app.onactivated`和`app.oncheckpoint`事件处理程序来处理应用程序的激活和检查点状态。我们添加在`app.onactivated`事件处理程序内部的代码将在应用程序启动时添加。
- en: 'Now back to the button event handler; let''s create a function as follows:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在回到按钮事件处理函数；我们创建一个如下函数：
- en: '[PRE4]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Add this function inside the anonymous function before the `app.start()` call
    at the bottom line. This function retrieves the text from the `input` element
    and adds it to the `div` element. To add this function to the events of the button
    (in this case, the `onclick` event), we need to register an event handler with
    the button. The recommended way to do so is by calling the `addEventListener`
    method. We need to register this event handler when the app gets activated. So,
    we should add it inside the `app.onactivated` event handler. And the code will
    look as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在最底部的`app.start()`调用之前的匿名函数内部添加这个函数。这个函数从`input`元素中获取文本并将其添加到`div`元素中。为了将这个函数添加到按钮的事件中（在本例中，是`onclick`事件），我们需要为按钮注册一个事件处理程序。建议通过调用`addEventListener`方法来完成。当应用程序被激活时，我们需要注册这个事件处理程序。因此，我们应该在`app.onactivated`事件处理程序内部添加它。代码如下所示：
- en: '[PRE5]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `app` variable is a global variable representing an instance of the `Application`
    class that provides application-level functionality; for example, handling different
    application events such as the `onactivated` event that we saw in the previous
    code listing.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`app`变量是一个全局变量，代表提供应用程序级别功能的`Application`类的实例；例如，处理不同的应用程序事件，如我们之前代码列表中看到的`onactivated`事件。'
- en: Inside the `onactivated` handler, the code checks to see the type of activation
    that has occurred; in this case, it is a launch activation, which means that this
    app was activated by the user when it was not running. Then a call is made to
    `WinJS.UI.processAll()`.This will scan the `default.html` file for any `WinJS`
    controls and will initialize them. Since the button is not a `WinJS` control and
    rather a basic HTML control, we could add it before the call to `WinJS.UI.processAll()`,
    but it's good practice to register the event handlers after it.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在`onactivated`处理程序内部，代码检查发生的是哪种类型的激活；在本例中，是启动激活，这意味着该应用程序在没有运行时被用户激活。然后调用`WinJS.UI.processAll()`。这将扫描`default.html`文件中是否有任何`WinJS`控件，并将初始化它们。由于按钮不是一个`WinJS`控件，而是一个基本的HTML控件，我们可以在调用`WinJS.UI.processAll()`之前添加它，但最好在之后注册事件处理程序。
- en: 'Run the app, enter some text in the textbox, and the content is displayed when
    the button is clicked, as the following screenshot shows:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序，在文本框中输入一些文本，当点击按钮时显示内容，如下面的屏幕截图所示：
- en: '![Getting started with Blank App](img/7102EN_04_07.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![Blank App入门](img/7102EN_04_07.jpg)'
- en: Understanding the ListView control
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解ListView控件
- en: 'In the previous chapter we introduced a new set of controls provided by the
    Windows Library for JavaScript; one of these controls was the ListView control,
    marked as `WinJS.UI.ListView`. What this object basically does is displays data
    items in a customizable list or grid. To create a ListView control, we need to
    add the `data-win-control` property to a `div` element and set its property to
    `WinJS.UI.ListView`. In the `default.html` page, add the following code inside
    the `body` tag:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们介绍了一个由Windows库为JavaScript提供的新控件集；这些控件中的一个是ListView控件，标记为`WinJS.UI.ListView`。这个对象的基本作用是显示可自定义的列表或网格中的数据项。要创建一个ListView控件，我们需要向`div`元素添加`data-win-control`属性，并将其属性设置为`WinJS.UI.ListView`。在`default.html`页面中，在`body`标签内部添加以下代码：
- en: '[PRE6]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This will create an empty ListView. So, if we run the app, there will be nothing
    to see. Since it is a `WinJS` control, it will not be rendered in the markup until
    after we call the `WinJS.UI.processAll` function.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个空的ListView。所以，如果我们运行该应用，将看不到任何东西。由于这是一个`WinJS`控件，它将在我们调用`WinJS.UI.processAll`函数后才在标记up中渲染。
- en: Let's add some data for the `sampleListView` control to display. The data that
    might come from a database from the Web or from a JSON data source, will create
    a data source manually, and preferably in a separate JavaScript file so it would
    be easier to maintain. So, in Visual Studio, under the `js` folder, add a new
    item and select a JavaScript file; name it `data.js`. Open this newly created
    file and create an anonymous function with the strict mode on, just as we saw
    in the `default.js` file; inside this function, let's create a sample array of
    objects that make up the data source we need. Give each object in the array the
    three properties `firstName`, `lastName`, and `Age`.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们给`sampleListView`控件添加一些数据以显示。这些数据可能来自网络数据库或JSON数据源，将手动创建数据源，最好在单独的JavaScript文件中，这样更容易维护。所以，在Visual
    Studio中，在`js`文件夹下，添加一个新项目并选择一个JavaScript文件；将其命名为`data.js`。打开这个新创建的文件，创建一个带有严格模式的匿名函数，就像我们在`default.js`文件中看到的那样；在这个函数内部，让我们创建一个由对象组成的样本数组，这些对象构成了我们需要的数据源。给数组中的每个对象赋予三个属性`firstName`、`lastName`和`Age`。
- en: 'The resulting code will look as follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 最终代码将如下所示：
- en: '[PRE7]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Next, we use the array we just created to create a List object; then we need
    to expose this List object by declaring a namespace for it and adding the List
    as a public member:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们使用刚刚创建的数组来创建一个List对象；然后我们需要通过声明一个命名空间并将其作为公共成员添加来暴露这个List对象：
- en: '[PRE8]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In order for the ListView control to be able to access this List, we used the
    `WinJS.Namespace.define` function to create a namespace and add the List as one
    of its members, thus making the List publicly accessible since it is created in
    an anonymous function, which keeps it private. The `WinJS.Namespace.define` function
    takes two parameters, as you noticed in the previous code. The first parameter
    is the name of the namespace to create, and the second represents the object (`publicMembers`)
    that contains one or more key/value pairs.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使ListView控件能够访问这个列表，我们使用了`WinJS.Namespace.define`函数来创建一个命名空间，并将列表作为其成员之一，从而使列表公开可用，因为它是匿名函数中创建的，这使其保持私有。`WinJS.Namespace.define`函数接受两个参数，正如你在之前的代码中注意到的那样。第一个参数是要创建的命名空间的名字，第二个参数表示包含一个或多个键/值对的对象（`publicMembers`）。
- en: 'After creating the data source and making it accessible by the ListView control,
    the next thing is to connect the data source to the ListView control. That has
    to be done in the `default.html` file. Let''s pick up from where we left our sample
    blank app. We need to add a reference to the data file we just created, as follows:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建数据源并使其被ListView控件访问后，下一步是将数据源连接到ListView控件。这必须在`default.html`文件中完成。让我们从我们留下的示例空白应用开始。我们需要添加对我们刚刚创建的数据文件的引用，如下所示：
- en: '[PRE9]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We then add the `data-win-options` attribute to the `div` element and use the
    data source we created inside `data.js` to set the `itemDataSource` property inside
    the `data-win-options` attribute. Set the ListView control''s `itemDataSource`
    property to `DataSample.itemList.dataSource` as follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将`data-win-options`属性添加到`div`元素中，并使用我们在`data.js`中创建的数据源来设置`data-win-options`属性内的`itemDataSource`属性。将ListView控件的`itemDataSource`属性设置为`DataSample.itemList.dataSource`，如下所示：
- en: '[PRE10]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `DataSample.itemList.dataSource` namespace comprises `DataSample`, which
    is the namespace we registered previously; `itemList`, which is the name of the
    property defined on the object we registered on the namespace; and finally `dataSource`,
    which is a property of the `WinJS.Binding.List` method (we are able to call it
    on `itemList` because the latter was assigned to the List object we created from
    the array).
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`DataSample.itemList.dataSource`命名空间包括`DataSample`，这是我们之前注册的命名空间；`itemList`，是我们注册在命名空间上的对象的属性名称；最后是`dataSource`，它是`WinJS.Binding.List`方法的一个属性（我们之所以能在`itemList`上调用它，是因为后者被分配给了我们从数组创建的List对象）。'
- en: 'If we run the app now, we will see that the ListView control displays the array
    we created with no formatting, as follows:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在运行该应用，我们会看到ListView控件以无格式的方式显示我们创建的数组，如下所示：
- en: '[PRE11]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We can style this ListView control by overriding the default styles set in
    the `win-listview` class, which is defined by the Windows Library for JavaScript,
    to style the ListView control. In order to override the default styles and apply
    some to just this ListView control, copy the `win-listview` class and precede
    it with the specific ID of the `div` element we created, as follows:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过覆盖Windows Library for JavaScript中定义的`win-listview`类中的默认样式来样式化这个ListView控件，以样式化ListView控件。为了覆盖默认样式并将一些样式应用到此ListView控件上，请复制`win-listview`类并将其前缀与我们要创建的`div`元素的特定ID一起使用，如下所示：
- en: '[PRE12]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We can add more styling to the ListView elements inside and we can define an
    item template using `WinJS.Binding.Template`, which is used to define the markup
    we want to use to display each list item and its styles. It is very easy to create
    a `WinJS.Binding.Template` control; in the HTML page, add a `div` element and
    set the property of the data attribute `data-win-control` to `WinJS.Binding.Template`.
    Inside it, add another `div` element that will serve as a parent for the template''s
    contents, because `WinJS.Binding.Template` must have a single root element. Inside
    this parent element, we add the markup that we will create, which the ListView
    will use to populate each data item it contains. Now the template will look like
    this:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在ListView内部添加更多的样式，并且可以使用`WinJS.Binding.Template`定义项目模板，以定义我们要使用来显示每个列表项及其样式的标记。创建`WinJS.Binding.Template`控件非常简单；在HTML页面上，添加一个`div`元素并将数据属性`data-win-control`的属性设置为`WinJS.Binding.Template`。在其中，再添加一个将作为模板内容的父元素的`div`元素，因为`WinJS.Binding.Template`必须有一个单一的根元素。在这个父元素内部，我们添加将要创建的标记，ListView将使用它来填充它包含的每个数据项。现在模板将看起来像这样：
- en: '[PRE13]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In order to link each element to a specific data item property, we use the
    `data-win-bind` attribute on each element that displays data. The `data-win-bind`
    attribute uses this syntax: `data-win-bind="propertyName: dataFieldName"`. Hence,
    to set the name property on the `h2`, `h3`, and `h6` elements, we use the following
    code:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '为了将每个元素链接到特定的数据项属性，我们在每个显示数据的元素上使用`data-win-bind`属性。`data-win-bind`属性使用此语法：`data-win-bind="propertyName:
    dataFieldName"`。因此，要设置`h2`、`h3`和`h6`元素上的name属性，我们使用以下代码：'
- en: '[PRE14]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: It is important to note that the list item template (`WinJS.Binding.Template`)
    should be before the ListView control in the markup, simply because the HTML markup
    is hierarchical and each UI element will be rendered as it is being encountered.
    So, when the ListView control is being rendered and is bound to an `itemTemplate`
    element, that `itemTemplate` element must exist first; otherwise it will throw
    an error.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，列表项模板（`WinJS.Binding.Template`）在标记up中应该在ListView控件之前，仅仅是因为HTML标记是层次化的，每个UI元素都将按遇到它们的顺序进行渲染。因此，当ListView控件正在渲染并绑定到`itemTemplate`元素时，这个`itemTemplate`元素必须首先存在；否则它会抛出错误。
- en: 'Finally, we need to apply the binding template we just created on the ListView
    control. Thus, use the `select` syntax to set the `itemTemplate` property of the
    ListView to `sampleTemplate`, as follows:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要将我们刚刚创建的绑定模板应用于ListView控件。因此，使用`select`语法将ListView的`itemTemplate`属性设置为`sampleTemplate`，如下所示：
- en: '[PRE15]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'If we run the app now, the ListView control will display the data in a more
    presentable manner. Here is how it will look:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在运行该应用程序，ListView控件将以一种更合适的方式显示数据。它看起来会是这样：
- en: '![Understanding the ListView control](img/7102EN_04_08.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![了解ListView控件](img/7102EN_04_08.jpg)'
- en: Summary
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概要
- en: Throughout this chapter we have covered the basics for creating a Windows Store
    app using JavaScript. We got introduced to the tools, and what we need to get
    going with the development. Then we went over using Visual Studio 2012 and we
    got to have a look at the templates provided for the development using JavaScript.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经介绍了使用JavaScript创建Windows Store应用程序的基础知识。我们了解了工具，以及我们需要的开发入门知识。然后我们了解了如何使用Visual
    Studio 2012，并查看了为使用JavaScript进行开发提供的模板。
- en: We saw how to build an app from scratch and on the way we got to see the anatomy
    of a JavaScript Windows Store app; we modified this blank app to make it interact
    in the simplest way possible, at the click of a button. Finally, we learned how
    to use the ListView control to display data.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们了解了如何从零开始构建一个应用程序，在过程中我们看到了JavaScript Windows Store应用程序的解剖结构；我们将这个空白应用程序修改为以最简单的方式进行交互，只需点击一个按钮。最后，我们学习了如何使用ListView控件来显示数据。
- en: In the next chapter we will learn how to get the data that we want to display.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何获取我们想要显示的数据。
