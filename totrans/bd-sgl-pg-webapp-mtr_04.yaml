- en: Chapter 4. Controlling the Data Flow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned how to store data in our database persistently.
    In this chapter, we will take a look at how we can tell Meteor what to send to
    the clients.
  prefs: []
  type: TYPE_NORMAL
- en: Until now, this all worked magically because we used the `autopublish` package,
    which synced all of the data with every client. Now, we will control this flow
    manually, sending only the necessary data to the client.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Synchronizing data with the server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publishing data to clients
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publishing partial collections
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publishing only the specific fields of documents
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lazy loading more posts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If you want to jump right into the chapter and follow the examples, download
    the previous chapter's code examples from either the book's web page at [https://www.packtpub.com/books/content/support/17713](https://www.packtpub.com/books/content/support/17713),
    or from the GitHub repository at [https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter3](https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter3).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: These code examples will also contain all the style files, so we don't have
    to worry about adding CSS code along the way.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Syncing data – the current Web versus the new Web
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the current Web, most pages are either static files hosted on a server or
    dynamically generated by a server on a request. This is true for most server-side-rendered
    websites, for example, those written with PHP, Rails, or Django. Both of these
    techniques required no effort besides being displayed by the clients; therefore,
    they are called *thin* clients.
  prefs: []
  type: TYPE_NORMAL
- en: In modern web applications, the idea of the browser has moved from thin clients
    to *fat* clients. This means most of the website's logic resides on the client
    and the client asks for the data it needs.
  prefs: []
  type: TYPE_NORMAL
- en: Currently, this is mostly done via calls to an API server. This API server then
    returns data, commonly in JSON form, giving the client an easy way to handle it
    and use it appropriately.
  prefs: []
  type: TYPE_NORMAL
- en: Most modern websites are a mixture of thin and fat clients. Normal pages are
    server-side-rendered, where only some functionality, such as a chat box or news
    feed, is updated using API calls.
  prefs: []
  type: TYPE_NORMAL
- en: Meteor, however, is built on the idea that it's better to use the calculation
    power of all clients instead of one single server. A pure fat client or a single-page
    app contains the entire logic of a website's frontend, which is send down on the
    initial page load.
  prefs: []
  type: TYPE_NORMAL
- en: The server then merely acts as a data source, sending only the data to the clients.
    This can happen by connecting to an API and utilizing AJAX calls, or as with Meteor,
    using a model called **publication/subscription**. In this model, the server offers
    a range of publications and each client decides which dataset it wants to subscribe
    to.
  prefs: []
  type: TYPE_NORMAL
- en: 'Compared with AJAX calls, the developer doesn''t have to take care of any downloading
    or uploading logic. The Meteor client syncs all of the data automatically in the
    background as soon as it subscribes to a specific dataset. When data on the server
    changes, the server sends the updated documents to the clients and vice versa,
    as shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Syncing data – the current Web versus the new Web](img/00009.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If this does sound insecure, be assured that we can set rules that filter changes
    on the server side. We will take a look at these possibilities in [Chapter 8](part0073_split_000.html#page
    "Chapter 8. Security with the Allow and Deny Rules"), *Security with the Allow
    and Deny Rules*.
  prefs: []
  type: TYPE_NORMAL
- en: Removing the autopublish package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To work with Meteor's publications/subscriptions, we need to remove the `autopublish`
    package, which was added by default to our project.
  prefs: []
  type: TYPE_NORMAL
- en: This package is useful for rapid prototyping, but infeasible in production since
    all of the data in our database would be synced to all the clients. This is not
    only insecure but also slows down the data loading process.
  prefs: []
  type: TYPE_NORMAL
- en: 'We just run the following command from inside our `my-meteor-blog` folder on
    the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Now we can run `meteor` again to start our server. When we check out the website,
    we will see that all our posts from the previous chapter are gone.
  prefs: []
  type: TYPE_NORMAL
- en: They are not really gone, however. The current server just didn't publish any
    yet, and the client just didn't subscribe to any; therefore, we can't see them.
  prefs: []
  type: TYPE_NORMAL
- en: Publishing data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to access the post on the client again, we need to tell the server
    to publish it to subscribing clients.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do so, we will create a file called `publications.js` inside the `my-meteor-blog/server`
    folder and add the following lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The `Meteor.publish` function will create a publication called `all-posts` and
    return a cursor with all the posts from the `Post` collection in that publication.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we only have to tell the client to subscribe to this publication and we
    will see our posts again.
  prefs: []
  type: TYPE_NORMAL
- en: 'We create a file called `subscriptions.js` inside the `my-meteor-blog/client`
    folder with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now, when we check out our website, we can see that our blog posts have reappeared.
  prefs: []
  type: TYPE_NORMAL
- en: This happens because the client will subscribe to the `all-posts` publication
    when the `subsciptions.js` file is executed, which happens right before the page
    is fully loaded, as Meteor adds the `subsciptions.js` file automatically to the
    head of the document for us.
  prefs: []
  type: TYPE_NORMAL
- en: This means that the Meteor server sends the website first and the JavaScript
    builds the HTML on the client; then, all the subscriptions get synced, which populate
    the client's collections, and the template engine, **Blaze**, can display the
    posts.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have our posts back, let's see how we can tell Meteor to send only
    a subset of the documents from the collection.
  prefs: []
  type: TYPE_NORMAL
- en: Publishing only parts of data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To make our front page future-ready, we will need to limit the amount of posts
    shown on it, as we will probably have a lot of posts added with time.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this, we will create a new publication called `limited-posts`, where we
    can pass a `limit` option to the posts'' `find()` function and add it to our `publications.js`
    file, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We add a `sort` option, with which we sort the posts in descending order on
    the `timeCreated` field. This is necessary to ensure that we get the latest posts
    and then limit the output. If we only sort the data on the client, it might happen
    that we leave out newer posts, as the server publication would send only the first
    two documents it found, regardless of whether they are the latest ones or not.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we just have to go to `subscriptions.js` and change the subscription to
    the following line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'If we check out our browser now, we will see that only the last two posts appear
    on our front page, since we only subscribed to two, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Publishing only parts of data](img/00010.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We must be aware that if we keep the code for the old subscription alongside
    the code for the new subscription, we will subscribe to both. This means Meteor
    merges both subscriptions and therefore keeps all the subscribed documents in
    our client-side collections.
  prefs: []
  type: TYPE_NORMAL
- en: We need to either comment out the old subscription or remove it before adding
    the new one.
  prefs: []
  type: TYPE_NORMAL
- en: Publishing specific fields
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To improve publications, we can also determine which fields we want to publish
    from the document. For example, we can only ask for the `title` and `text` properties
    instead of all other properties.
  prefs: []
  type: TYPE_NORMAL
- en: This speeds up the synchronization of our subscriptions since we don't require
    the whole post but only the necessary data and short descriptions when listing
    posts on the front page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add another publication to our `publications.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: As this is just an example, we pass an empty object as a query to find all the
    documents, and as the second parameter to `find()`, we pass an options object
    containing the `fields` object.
  prefs: []
  type: TYPE_NORMAL
- en: Every field that we give a value of `1` will be included in the returned document.
    If we rather want to work by excluding fields, we can use the field name and set
    the value to `0`. However, we can't use both including and excluding fields, so
    we need to choose what fits better, depending on the document size.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can simply change the subscription in our `subscriptions.js` file to
    the following line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, when we open the browser, it will present us with a list of our posts.
    Only the titles are present and the description, time, and author fields are empty:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Publishing specific fields](img/00011.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Lazy loading posts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we've gone through these simple examples, let's put them all together
    and add a nice lazy load feature to our posts' list on the front page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lazy loading is a technique that loads additional data only when the user desires
    it or when they scroll to the end. This can be used to increase page load, since
    the data to be loaded is limited. To do this, let''s perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to add a lazy load button to the bottom of the list of posts on the
    front page. We go to our `home.html` file and add the following button at the
    end of our `home` template, right below the `{{#each postsList}}` block helper:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we will add the publication that will send a flexible number of posts
    to our `publications.js` file, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Basically, it's a combination of what we learned earlier.
  prefs: []
  type: TYPE_NORMAL
- en: We used the `limit` option, but instead of setting a fixed number, we used the
    `limit` parameter, which we will later pass to this publication function.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Previously, we used the `fields` option and excluded the `text` field.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can just include `fields` to get the same result. This will be safer, as
    it ensures that we won''t get any extra fields in case the documents get extended:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We sorted the output to make sure we are always returning the latest posts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we have set our publication, let's add a subscription so that we can
    receive its data.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Be aware that we need to remove any other subscription beforehand so that we
    are not subscribing to any other publication.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, we need to make use of Meteor''s `session` object. This object
    can be used on the client side to set variables reactively. This means every time
    we change this session''s variable, it will run every function that uses it again.
    In the following example, we will use the session to increase our posts'' lists''
    number when clicking on the lazy load button:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, in the `subscription.js` file, we add the following lines of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then we set the `lazyloadLimit` session variable to `2`, which will be the initial
    number of posts shown on the front page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we create a `Tracker.autorun()` function. This function will run at the
    start time and later at any time when we change the `lazyloadLimit` session variable
    to another value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside this function, we subscribe to `lazyload-posts`, giving the `lazyloadLimit`
    value as a second parameter. This way, every time the session variable changes,
    we change our subscription with a new value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now we only need to increase the session value by clicking on the lazy load
    button and the subscription will change, sending us additional posts. To do this,
    we add the following lines of code to our `home.js` file at the end:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This code will attach a `click` event to the lazy load button. Every time we
    click on this button, we get the `lazyloadLimit` session and it increases by two.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When we check out our browser, we should be able to click on the lazy load button
    at the bottom of our posts list and it should add two more posts. This should
    happen every time we click on the button until we reach our five example posts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This doesn't make much sense when we have only five posts, but when there are
    more than 50 posts, limiting the initially shown posts to 10 will noticeably speed
    up page loading time.
  prefs: []
  type: TYPE_NORMAL
- en: We then need to change only the session's default value to 10 and increase it
    by 10, and we have a nice lazy loading effect.
  prefs: []
  type: TYPE_NORMAL
- en: Switching subscriptions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have the nice logic of lazy loading in place, let's take a look
    at what happens here under the hood.
  prefs: []
  type: TYPE_NORMAL
- en: The `.autorun()` function , which we created earlier, will run the first time
    the code gets executed, subscribing us to the `lazyload-posts` publication. Meteor
    then sends the first two documents of the `Posts` collection, as the `limit` we
    first sent is `2`.
  prefs: []
  type: TYPE_NORMAL
- en: The next time we change the `lazyloadLimit` session, it changes the subscription
    by changing the limit to the value we passed to the publication function.
  prefs: []
  type: TYPE_NORMAL
- en: Meteor then checks which documents exist in our client-side database in the
    background and requests to download the missing ones.
  prefs: []
  type: TYPE_NORMAL
- en: This will also work the other way when we decrease the session value. Meteor
    removes the documents that don't match the current subscription/subscriptions.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, we can try this; we open the console of our browser and set the session
    limit to `5`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This will immediately display all five example posts in our list. When we now
    set it back to a smaller value, we will see how they are removed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'To ensure that they are gone, we can query our local database to check, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'This will return us an array of two items, showing that Meteor removed the
    posts that we are not subscribing to anymore, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Switching subscriptions](img/00012.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Some notes on data publishing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: To solve this, you can either publish posts and comments separately and connect
    them in the client or use a third-party package, which allows for reactive publications
    such as the great `reywood:publish-composite` package at [https://atmospherejs.com/reywood/publish-composite](https://atmospherejs.com/reywood/publish-composite).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that the only case where the `Meteor.publish()` function reruns is when
    the *current user* changes so that `this.userId` which is accessible in this function
    will change.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we created a few publications and subscribed to them. We used
    the `fields` and `limit` options to modify the number of published documents and
    created a simple lazy load logic for the front page of our blog.
  prefs: []
  type: TYPE_NORMAL
- en: 'To dig deeper into what we learned, we can take a look at [Chapter 3](part0035_split_000.html#page
    "Chapter 3. Storing Data and Handling Collections"), *Storing Data and Handling
    Collections*. While the following Meteor documentation will give us details about
    the options we can use in the collections `find()` functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.meteor.com/livequery](https://www.meteor.com/livequery)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.meteor.com/ddp](https://www.meteor.com/ddp)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://docs.meteor.com/#/full/publishandsubscribe](https://docs.meteor.com/#/full/publishandsubscribe)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://docs.meteor.com/#/full/collections](https://docs.meteor.com/#/full/collections)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can find this chapter's code examples at [https://www.packtpub.com/books/content/support/17713](https://www.packtpub.com/books/content/support/17713)
    or on GitHub at [https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter4](https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter4).
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will give our app what makes a real app—different pages
    and routes.
  prefs: []
  type: TYPE_NORMAL
