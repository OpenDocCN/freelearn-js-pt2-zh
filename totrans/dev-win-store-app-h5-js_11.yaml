- en: Chapter 11. Developing Apps with XAML
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章：使用XAML开发应用程序
- en: Developing Windows Store apps is not exclusive to HTML5 and JavaScript. Microsoft
    offers other choices with **Extensible Application Markup Language** (**XAML**)
    and .NET, thus targeting a broader range of developers and expertise to develop
    for the Store. Whatever your background is, whether web or Windows development,
    there is a place for you—a starting point—because the road map to the Windows
    Store will be the same regardless of your choice of programming language. In the
    previous chapters, we have been learning how to develop apps and features with
    HTML5 and JavaScript. But in this chapter, we will learn about other platforms
    and programming languages available for developers. We will also cover the basics
    of creating an app with XAML/C#.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 开发Windows商店应用程序不仅限于HTML5和JavaScript。微软提供了使用可扩展应用程序标记语言（XAML）和.NET的其他选择，从而将更广泛的开发者和专业知识吸引到商店开发。无论你的背景如何，是网页还是Windows开发，都有一个适合你的地方——一个起点——因为无论你选择哪种编程语言，通往Windows商店的道路都是一样的。在前几章中，我们学习了如何使用HTML5和JavaScript开发应用程序和功能。但在本章中，我们将学习其他平台和编程语言，以及使用XAML/C#创建应用程序的基础知识。
- en: Creating apps with different platforms
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用不同平台创建应用程序
- en: One of the paramount advances with Windows 8 is that you can develop apps with
    more than one framework and programming language, targeting both web and Windows
    developers. Moreover, developers can build on and leverage their existing programming
    skills and knowledge to create Windows Store apps, and will not necessarily have
    to acquire a completely new set of skills.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 8最重要的进步之一是，你可以使用多种框架和编程语言开发应用程序，面向网页和Windows开发者。此外，开发者可以构建并利用他们现有的编程技能和知识来创建Windows商店应用，不一定需要掌握一套全新的技能。
- en: Web developers will be able to utilize their HTML5, CSS3, and JavaScript skills
    and can even port existing websites easily into a Store app, while Windows developers,
    familiar with Microsoft .NET Framework and Silverlight, can put into action their
    XAML, C#, and Visual Basic skills. Additionally, Windows 8 targets developers
    who are familiar with the C++ syntax and native libraries by providing the opportunity
    to create Windows Store apps in Visual C++/XAML. Moreover, C++, you can create
    Direct2D and Direct3D apps. In summary, we have the XAML markup with C#, VB.NET,
    and C++, and to top it, Visual Studio 2012 provides project templates and Intellisense
    support for all these programming languages.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 网页开发者将能够利用他们的HTML5、CSS3和JavaScript技能，甚至可以轻松地将现有网站移植到商店应用中，而熟悉微软.NET框架和Silverlight的Windows开发者可以运用他们的XAML、C#和Visual
    Basic技能付诸实践。此外，Windows 8针对熟悉C++语法和本地库的开发者，通过提供使用Visual C++/XAML创建Windows商店应用的机会。而且，使用C++，你可以创建Direct2D和Direct3D应用。总之，我们有XAML标记和C#、VB.NET、C++，更不用说，Visual
    Studio 2012为所有这些编程语言提供了项目模板和Intellisense支持。
- en: The same app can be built with either XAML or HTML5, and when deployed and run,
    both versions will run in an identical manner. Everything that we have learned
    to do in the previous chapters with JavaScript and HTML5 for Windows Store apps,
    from functionalities to features, can be done with C#, VB.Net, and XAML. The choice
    of the programming language to be used is based on personal preference, background
    experience, and language familiarity more than anything else. Both choices will
    require some level of learning. Web developers who are familiar with the HTML
    markup, styling with CSS, and functionality with JavaScript, will need to learn
    about WinJS-specific JavaScript functions and HTML data attributes and classes.
    Also, developers who have experience with XAML will notice a great deal of familiarity
    with WPF and Silverlight, but will have to learn about developing for the Windows
    Store design and functionality. However, as I mentioned, the learning curve is
    minimal when you are commencing Windows Store development with a familiar territory.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 同一个应用程序可以用XAML或HTML5来构建，部署和运行时，两个版本将以相同的方式运行。我们在前面的章节中学到的所有用JavaScript和HTML5为Windows商店应用程序编写的功能和特性，都可以用C#、VB.Net和XAML来实现。选择使用哪种编程语言是基于个人喜好、背景经验以及语言熟悉度，而不是其他因素。两种选择都需要一定的学习水平。熟悉HTML标记、使用CSS进行样式设计和使用JavaScript实现功能的网页开发者，需要学习WinJS特定的JavaScript函数和HTML数据属性及类。此外，有XAML经验的开发者会发现与WPF和Silverlight有很多相似之处，但需要学习为Windows商店设计和功能开发。然而，如我所说，当你从熟悉的领域开始Windows商店开发时，学习曲线是最小的。
- en: Introducing XAML apps
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍XAML应用程序
- en: The roadmap for Windows Store apps using XAML is the same as that for Store
    apps using JavaScript, beginning with tools and acquiring a developer license
    through the design guidelines to planning the app and finishing with packaging
    and publishing the app to the Store.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 XAML 开发的 Windows 商店应用的路线图与使用 JavaScript 开发的商店应用相同，从工具开始，通过设计指南获取开发者许可证，规划应用，最后进行打包并将应用发布到商店。
- en: 'Let''s create a basic Windows Store app using XAML and compare it with an app
    made using HTML5\. In Visual Studio, from the top menu, navigate to **File** |
    **New Project**. In the **New Project** dialog window, choose your preferred programming
    language from the left pane under **Installed** | **Templates** and then select
    **Windows Store**. Next, we select one of the listed project templates for a Windows
    Store app and enter a name for it in the **Name:** textbox. I will choose **Visual
    C#** for this demonstration; feel free to go with **Visual Basic** or **Visual
    C++**. Finally, click on **OK** to create the project: The following screenshot
    shows the entire process as discussed:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用 XAML 创建一个基本的 Windows 商店应用，并将其与使用 HTML5 创建的应用进行比较。在 Visual Studio 中，从顶部菜单，导航到
    **文件** | **新建项目**。在 **新建项目** 对话框中，从左侧窗格下的 **已安装** | **模板** 中选择您喜欢的编程语言，然后选择 **Windows
    商店**。接下来，我们选择一个列表中的 Windows 商店应用项目模板，并在 **名称** 文本框中为其输入一个名字。我将为这个演示选择 **Visual
    C#**；您也可以选择 **Visual Basic** 或 **Visual C++**。最后，点击 **确定** 创建项目：以下屏幕快照显示了刚刚讨论的过程：
- en: '![Introducing XAML apps](img/7102EN_11_01.jpg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![介绍 XAML 应用](img/7102EN_11_01.jpg)'
- en: 'The preceding screenshot shows the following Windows Store app templates provided
    with XAML: **Blank App (XAML)**, **Grid App (XAML)**, and **Split App (XAML)**.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个屏幕快照显示了随 XAML 提供的以下 Windows 商店应用模板：**空白应用 (XAML)**，**网格应用 (XAML)**，以及**分割应用
    (XAML)**。
- en: '**Blank App (XAML)**: This template provides an empty Windows Store app that
    will compile and run, but contains no user interface controls or data. When it
    runs an app based on this template, it will only show a black screen that contains
    a placeholder text.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**空白应用 (XAML)**：此模板提供了一个空的 Windows 商店应用，它可以编译并运行，但其中没有用户界面控件或数据。当基于这个模板运行一个应用时，它将只显示一个包含占位符文本的黑屏。'
- en: '**Grid App (XAML)**: This template provides an app that enables users to browse
    through categories and dive into the details of the content that falls under each
    category. A few good examples for this template include shopping apps, news apps,
    and photo or video apps. The **Grid App (XAML)** template starts with a landing
    home page that will display a list of groups or categories. A single group is
    a named set of items; for example, a group of news articles named Sports News.
    When the user selects one group, the app opens the group details page, which in
    turn displays a list of items that the group contains on the right-hand side.
    Consequently, when the user selects a single item on either the home page or the
    group details page, the app will open a page that shows the item details.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网格应用 (XAML)**：此模板提供了一个应用，使用户能够浏览不同的分类，并深入查看每个分类下的内容细节。此模板的好例子包括购物应用、新闻应用以及图片或视频应用。**网格应用
    (XAML)** 模板从一块着陆主页开始，该主页将展示一系列组或分类。一个单独的组是一组命名项的集合；例如，一组名为“体育新闻”的新闻文章。当用户选择一个组时，应用将打开组详情页，该页面的右侧将显示该组包含的项列表。因此，当用户在主页或组详情页上选择一个单独的项时，应用将打开一个显示项详情的页面。'
- en: 'The following screenshot shows a sample home page of **Grid App (XAML)**:'
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下屏幕快照显示了**网格应用 (XAML)** 的示例主页：
- en: '![Introducing XAML apps](img/7102EN_11_08.jpg)'
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![介绍 XAML 应用](img/7102EN_11_08.jpg)'
- en: '**Split App (XAML)**: This template provides an app that enables users to browse
    through categories to find specific content similar to a **Grid App (XAML)** template;
    however, with the **Split App (XAML)** template, users can view a list of items
    and item details in the same page in a two-column split view. This split view
    enables all users to switch among the items rapidly. Examples for the usage of
    this template include news readers or an e-mail app. This template starts with
    a landing home page that shows a list of groups. When the user selects a group,
    the app will open a split-view page. The following screenshot shows a sample split-view
    page:![Introducing XAML apps](img/7102EN_11_09.jpg)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分栏应用（XAML）**：此模板提供了一个允许用户浏览类别以找到特定内容的应用，与**网格应用（XAML）**模板类似；然而，使用**分栏应用（XAML）**模板，用户可以在同一页面的双栏分隔视图中查看项目列表和项目详细信息。这种分隔视图允许所有用户快速切换项目。此模板的使用示例包括新闻阅读器或电子邮件应用。此模板从显示组列表的起始主页开始，当用户选择一个组时，应用将打开一个分隔视图页面。下面的屏幕截图显示了一个示例分隔视图页面：![介绍XAML应用](img/7102EN_11_09.jpg)'
- en: These three project templates are similar to the ones provided in a Windows
    Store JavaScript project, but the latter provides two additional templates, the
    **Fixed Layout App** and the **Navigation App**.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这三个项目模板与Windows商店JavaScript项目中提供的模板类似，但后者提供了两个额外的模板，分别是**固定布局应用**和**导航应用**。
- en: We'll start with the **Blank App (XAML)** template, which contains the minimal
    project files required to run the app. The **Blank App (XAML)** template creates
    an empty Windows Store app that contains no user interface, but will compile and
    run. Once the blank app has been created, navigate to **Solution Explorer** on
    the right-hand side of Visual Studio and expand the list of project files to see
    the default files that are created with this template.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从**空白应用（XAML）**模板开始，该模板包含了运行应用所需的最小项目文件。**空白应用（XAML）**模板创建了一个空的Windows商店应用，其中没有用户界面，但可以编译并运行。创建空白应用后，导航到Visual
    Studio右侧的**解决方案资源管理器**，展开项目文件列表，以查看与此模板一起创建的默认文件。
- en: 'The following screenshot shows the contents of **Solution Explorer** to the
    right and the `MainPage.xaml` file, when opened in the XAML text editor, to the
    left:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的屏幕截图显示了**解决方案资源管理器**右侧的内容和打开在XAML文本编辑器中的`MainPage.xaml`文件，位于左侧：
- en: '![Introducing XAML apps](img/7102EN_11_02.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![介绍XAML应用](img/7102EN_11_02.jpg)'
- en: 'The project we just created contains the following folders and files, which
    are indispensable to all Windows Store apps using C# or Visual Basic:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚创建的项目包含以下必需的文件夹和文件，这些文件对于所有使用C#或Visual Basic的Windows商店应用来说是不可缺少的：
- en: '`Properties`: This folder contains the app assembly information.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Properties`：此文件夹包含应用程序汇编信息。'
- en: '`References`: This folder contains the project references files and by default,
    has the following two SDK references: **.NET for Windows Store apps** and **Windows**.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`References`：此文件夹包含项目引用文件，默认情况下，有以下两个SDK引用：**.NET用于Windows商店应用**和**Windows**。'
- en: '`Assets`: This folder contains the following images:'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Assets`：此文件夹包含以下图像：'
- en: Large and small logo images of sizes 150 x 150 px and 30 x 30 px, respectively.
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分别尺寸为150 x 150像素和30 x 30像素的大和小logo图像。
- en: The **SplashScreen** image.
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SplashScreen** 图像。'
- en: The **StoreLogo** image of size 50 x 50 px.
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尺寸为50 x 50像素的**商店Logo**图像。
- en: '`Common`: This folder contains the common shared resources in the app such
    as the `StandardStyles.xaml` file, which provides a set of default styles that
    gives the app its Windows 8 look and feel. In addition, this folder will contain
    the files for the utility and helper classes.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Common`：此文件夹包含应用中的常用共享资源，如`StandardStyles.xaml`文件，该文件提供了一组默认样式，赋予了应用Windows
    8的外观和感觉。此外，此文件夹还将包含实用工具和帮助器类的文件。'
- en: 'This template also includes the following `.xaml` page files:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 此模板还包括以下`.xaml`页面文件：
- en: '`App.xaml`: This is the main app file that is required to display the user
    interface and is first loaded when the app runs. This page declares resources
    that are shared across the app, such as styles, and provides the markup for the
    content host. This page is similar to what the `default.html` page represents
    in apps using JavaScript.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`App.xaml`：这是必需的主要应用文件，用于显示用户界面，在应用运行时首先加载。此页面声明了跨整个应用共享的资源，如样式，并为内容宿主提供标记。这个页面类似于在使用JavaScript的应用中`default.html`页面所代表的内容。'
- en: '`App.xaml.cs`: This is the code-behind file for `App.xaml` and contains the
    code that handles the global app-specific behavior and events, such as app launching
    and suspending. This file is similar to what the `default.js` file represents
    in apps using JavaScript.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`App.xaml.cs`：这是`App.xaml`的代码隐藏文件，包含处理全局应用特定行为和事件的代码，例如应用的启动和挂起。这个文件与使用JavaScript的app中的`default.js`文件类似。'
- en: '`MainPage.xaml`: This is the default startup page of the app and contains the
    minimal XAML markup and code to instantiate a page.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MainPage.xaml`：这是应用的默认启动页面，并包含实例化页面的最小XAML标记和代码。'
- en: '`MainPage.xaml.cs`: This is the code-behind file corresponding to the `MainPage.xaml`
    file.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MainPage.xaml.cs`：这是与`MainPage.xaml`文件对应的代码隐藏文件。'
- en: Finally, there is the manifest file, `Package.appxmanifest`, which contains
    the app description and settings identical to the one in JavaScript templates.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，还有`Package.appxmanifest`这个清单文件，它包含了与JavaScript模板中相同的应用程序描述和设置。
- en: Note
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Microsoft recommends to not remove the files in the `Common` folder. Also, it
    can neither be renamed nor modified because this results in a build error. If
    there is a necessity to modify these files, you can create a copy of the original
    file and then modify the copy instead.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 微软建议不要删除`Common`文件夹中的文件。此外，它也不能重命名或修改，因为这会导致构建错误。如果需要修改这些文件，你可以创建原始文件的副本并进行修改。
- en: Those who haven't heard of XAML before might be lost by now and wondering about
    the syntax you just saw in the app and the `MainPage.xaml` files. XAML has a basic
    syntax that is built on XML. When stripped down, an XAML document is an XML document
    that shows a hierarchical relationship between objects, and to be considered valid,
    it must also be a valid XML document. XAML files have a `.xaml` filename extension,
    and each XAML file is associated with a code-behind file that contains the code
    that will handle events, and manipulate objects and UI elements that were created
    or declared in XAML. The code-behind file joined with the XAML page's partial
    class makes a complete class. This is similar to the concept of ASP.NET web pages
    with `.aspx` files containing the markup and code-behind in the `.cs` or `.vb`
    files. Also, XAML files can be opened and edited in Microsoft Expression Blend.
    If you are new to XAML, don't worry much about the syntax because Visual Studio
    helps you write a valid markup by providing autocompletion hints and suggestion
    lists, and you will learn the syntax along the way.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 那些之前没有听说过XAML的人可能会对刚才在应用和`MainPage.xaml`文件中看到的语法感到困惑。XAML基于XML构建了一套基本的语法。当剥离掉冗余的部分，一个XAML文件就是一个显示对象之间层次关系的XML文档，并且为了被认为是有效的，它也必须是一个有效的XML文档。XAML文件有一个`.xaml`文件扩展名，每个XAML文件都与其一个代码隐藏文件相关联，这个代码隐藏文件包含处理事件、操作在XAML中创建或声明的对象和UI元素的代码。代码隐藏文件与XAML页面的部分类结合构成了一个完整的类。这与ASP.NET网页的概念类似，`.aspx`文件包含标记和代码隐藏文件，后缀为`.cs`或`.vb`。此外，XAML文件可以在Microsoft
    Expression Blend中打开和编辑。如果你是XAML的新手，不必太担心语法，因为Visual Studio会通过提供自动完成提示和建议列表来帮助你编写有效的标记，你会在学习过程中了解语法。
- en: 'Using XAML markup, we can create UI elements just like we do using HTML but
    with a different syntax. Let''s add the following UI elements inside the `Grid`
    element in the `MainPage.xaml` file with the following syntax:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 使用XAML标记，我们可以像使用HTML一样创建UI元素，但语法有所不同。让我们在`MainPage.xaml`文件中的`Grid`元素内使用以下语法添加以下UI元素：
- en: '[PRE0]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The preceding code listing shows the following properties: `x:Name`, which
    specifies the name assigned to the `TextBlock` element; `Text`, which specifies
    the data as text that will be filled in this element; and `Content`, which is
    similar to `Text` but specifies the data as text that will show next to a `CheckBox`
    element.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码列表显示了以下属性：`x:Name`，它指定了分配给`TextBlock`元素的名称；`Text`，它指定了作为文本的数据，将填充此元素；`Content`，它与`Text`类似，但指定作为文本的数据，将显示在`CheckBox`元素的旁边。
- en: The first line in the code listing declares a basic `TextBlock` element, which
    is similar to a `label` element in HTML. We give this element a name and enter
    a value for its `Text` property. The second element is `Textbox` with a `Text`
    value, and the third one is a `Checkbox` element with the `Content` value. You
    can either write the syntax manually or choose a control from those listed in
    the **Toolbox** pane and drag it directly to the XAML text editor or the design
    surface, which are both visible in a split view.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 代码列表中的第一行声明了一个基本的`TextBlock`元素，它与HTML中的`label`元素类似。我们给这个元素一个名字，并为其`Text`属性输入一个值。第二个元素是`Textbox`，带有`Text`值，第三个元素是一个带有`Content`值的`Checkbox`元素。您可以手动编写语法，也可以从**工具箱**面板中选择一个控件，并将其直接拖到XAML文本编辑器或设计表面，这两个都在分屏视图中可见。
- en: 'In the designer window, you can manipulate these UI controls and arrange their
    positioning on the window as shown in the following screenshot:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计窗口中，您可以操作这些UI控件，并按照以下屏幕截图所示安排它们在窗口中的位置：
- en: '![Introducing XAML apps](img/7102EN_11_03.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![介绍XAML应用](img/7102EN_11_03.jpg)'
- en: You will notice that manipulating the controls in the **Design** pane reflects
    on the syntax in the **XAML** pane below it, as new properties are being set for
    the elements and existing ones are being changed. If you run the app now, you
    will see a black screen containing the three elements we just added to the `MainPage.xaml`
    file.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到，在**设计**面板中操作控件会在下方的**XAML**面板中反映出来，因为正在为元素设置新的属性并更改现有的属性。如果您现在运行应用程序，您将看到一个包含我们刚刚添加到`MainPage.xaml`文件中的三个元素的黑色屏幕。
- en: 'The `MainPage.xaml` file contains the minimum markup and code needed to run
    the page, but lacks all the additional code and classes that implement important
    features in a Windows Store app, such as adapting to changes in view and handling
    different states of the app. Fortunately, the other page templates provided by
    Visual Studio, such as the Basic Page template, include the code and helper classes
    that help you implement these features. For this purpose, we typically replace
    that empty `MainPage` template with one of the other page templates while working
    with a Blank App (XAML) project. In order to replace the `MainPage.xaml` file,
    right-click on it in **Solution Explorer** and click on **Delete**. Then, right-click
    on the project root node and click on **Add New Item**, which will open up a dialog
    window. From there, select the **Windows Store** template type under **Visual
    C#** (or Visual Basic if you chose a different template at the start of the example).
    Next, select **Basic Page** and give it the name `MainPage.xaml`, otherwise the
    project will not build correctly. The following screenshot illustrates the procedure:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`MainPage.xaml`文件包含运行页面所需的最小标记和代码，但缺少所有实现Windows Store应用重要功能的附加代码和类，例如适应用户界面变化和处理应用程序的不同状态。幸运的是，Visual
    Studio提供的其他页面模板，例如基本页面模板，包含了帮助您实现这些功能的代码和帮助类。为此目的，我们通常在处理空白应用程序（XAML）项目时，将那个空的`MainPage`模板替换为其他页面模板之一。要替换`MainPage.xaml`文件，请在**解决方案资源管理器**中右键点击它，然后点击**删除**。然后，在项目根节点上右键点击，点击**添加新项目项**，这将打开一个对话框窗口。从那里，在下拉列表中选择**Visual
    C#**（或如果您在示例开始时选择了不同的模板，选择Visual Basic）下的**Windows Store**模板类型。接下来，选择**基本页面**，并将其命名为`MainPage.xaml`，否则项目将无法正确构建。以下屏幕截图说明了该过程：'
- en: '![Introducing XAML apps](img/7102EN_11_04.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![介绍XAML应用](img/7102EN_11_04.jpg)'
- en: Then, click on **Add**. If this is the first time you have added a new page
    different from the **Blank Page** template to the **Blank App (XAML)** template,
    a message dialog will be displayed with the warning, **This addition depends on
    files that are missing from your project**. Click on **Yes** to add the missing
    files automatically. The XAML and code-behind files for this page are added to
    the project, and if you expand the `Common` folder, you will notice that the folder
    that first contained a single file, `StandardStyles.xaml`, is now populated with
    code files that contain several helper and utility classes. The newly added page
    will not show up in the designer until you build the project/solution, so it compiles
    the helper classes the page depends on. Let's see how the app looks like after
    this change; press *F5* to build and run the app in debugging mode.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，点击**添加**。如果这是您第一次将不同于**空白页面**模板的新页面添加到**空白应用（XAML）**模板中，将会显示一个带有警告的消息对话框，内容为**此添加依赖于项目中缺失的文件**。点击**是**以自动添加缺失的文件。此页的XAML和代码后置文件被添加到项目中，如果您展开`Common`文件夹，会发现原本只包含一个文件`StandardStyles.xaml`的文件夹现在包含了包含多个帮助器和实用类别的代码文件。新添加的页面在您构建项目/解决方案之前不会在设计器中显示，因此它会编译页面依赖的帮助类。让我们看看这次更改后应用的样子；按*F5*以构建并在调试模式下运行应用。
- en: 'Once it''s run, the app will appear as a black screen containing the title
    **My Application**, as shown in the following screenshot:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 运行后，应用将显示为一个黑色屏幕，包含标题**我的应用**，如下图所示：
- en: '![Introducing XAML apps](img/7102EN_11_05.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![介绍XAML应用](img/7102EN_11_05.jpg)'
- en: The important thing to note here is that this page is consistent with the design
    guidelines for Windows 8 by default, without us having to add any styling or markup.
    As you can see, the title appears to be of the same font size and is positioned
    with the exact margins specified in the *Windows 8 UX Guidelines for Windows Store
    apps* page ([http://www.microsoft.com/en-in/download/details.aspx?id=30704](http://www.microsoft.com/en-in/download/details.aspx?id=30704)).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这里需要注意的是，此页面默认符合Windows 8的设计指南，而我们无需添加任何样式或标记。正如你所看到的，标题似乎是相同的字体大小，并且按照*Windows
    8 应用商店应用的Windows 8 UX指南*页面中指定的确切边距进行定位：（[http://www.microsoft.com/en-in/download/details.aspx?id=30704](http://www.microsoft.com/en-in/download/details.aspx?id=30704)）。
- en: Adding a title, theme color, and content
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加标题、主题颜色和内容
- en: Let's modify this minimal app by adding a title and changing its theme color.
    Then, we'll add a simple text and write some code to handle a basic button-click
    event.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过添加标题并更改其主题颜色来修改这个最小应用。然后，我们将添加一个简单的文本，并编写一些代码来处理基本按钮点击事件。
- en: 'To change the title of this app, perform the following steps:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要更改此应用的标题，请执行以下步骤：
- en: Open the `MainPage.xaml` file.
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`MainPage.xaml`文件。
- en: In the **XAML** designer pane, select the title **My Application** and either
    right-click on it and select **Edit Text** or change the value of the `Text` property
    found in the **Properties** window under `Common`. If it is not shown by default,
    the **Property** window should be located on the left-hand side of Visual Studio
    below the **Solution Explorer** panel.
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**XAML**设计面板中，选择标题**我的应用**，然后右键点击选择**编辑文本**，或者在**属性**窗口下`Common`中更改`Text`属性。如果默认情况下没有显示，**属性**窗口应该位于Visual
    Studio左侧，低于**解决方案资源管理器**面板。
- en: 'To change the theme color of this app, perform the following steps. Similar
    to what we had done in the app using JavaScript, we can switch between dark and
    light themes here as well. In the app using JavaScript, there were two CSS files,
    `ui-dark.css` and `ui-light.css`, referenced in the `default.html` page. In apps
    using XAML, switching between the two themes is done in the `App.xaml` file as
    follows:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要更改此应用的主题颜色，请执行以下步骤。与使用JavaScript的应用程序类似，我们也可以在这里切换深色和浅色主题。在JavaScript应用程序中，`default.html`页面引用了两个CSS文件，`ui-dark.css`和`ui-light.css`。在XAML应用程序中，在`App.xaml`文件中如下进行主题切换：
- en: Open the `App.xaml` file.
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`App.xaml`文件。
- en: Go to the `<Application>` tag and add the `RequestedTheme` property before the
    closing of the tag.
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到`<Application>`标签并在闭合标签之前添加`RequestedTheme`属性。
- en: 'Click within the quotes of the tag, and Visual Studio''s Intellisense will
    prompt you with two property values: **Light** and **Dark**. Choose **Light**
    and the `<Application>` tag will look as follows:'
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在标签的引号内点击，Visual Studio的Intellisense将提示您两个属性值：**Light**和**Dark**。选择**Light**，`<Application>`标签将如下所示：
- en: '[PRE1]'
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Run the app to see the difference.
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行应用以查看差异。
- en: 'Now to add some UI content, open the `MainPage.xaml` file and locate the root
    `Grid` element and the `<VisualStateManager.VisualStateGroups>` tag inside it.
    Add the following XAML code snippet just before this tag:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在要添加一些UI内容，打开`MainPage.xaml`文件，定位根`Grid`元素和它内部的`<VisualStateManager.VisualStateGroups>`标签。在这个标签之前添加以下XAML代码片段：
- en: '[PRE2]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The preceding XAML code declares a `StackPanel` control that holds UI controls
    inside it (think of it as a `div` element). Inside this, we add a `TextBlock`
    element and assign its `Text` property a value, and then we nest a `StackPanel`
    control inside the parent `StackPanel` (`div` inside a `div` element). This `StackPanel`
    element will hold two controls: a `TextBox` element to enter the input values
    that we assign for its `width` and `HorizontalAlignment` properties, and a `Button`
    control to which we assign a value for its `Content` property. Finally, add another
    empty `TextBlock` element outside the inner `StackPanel` element.'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述XAML代码声明了一个`StackPanel`控件，该控件内部包含UI控件（可以把它想象成一个`div`元素）。在这个控件内部，我们添加了一个`TextBlock`元素并为其`Text`属性赋值，然后我们在父级`StackPanel`控件内嵌套了一个`StackPanel`控件（一个`div`内的`div`元素）。这个`StackPanel`元素将包含两个控件：一个`TextBox`元素用于输入我们为其`width`和`HorizontalAlignment`属性赋值的输入值，以及一个`Button`控件，我们为其`Content`属性赋值。最后，在内部`StackPanel`元素的外部添加另一个空的`TextBlock`元素。
- en: 'Run the app and it will look like the following screenshot:'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 运行应用程序，它将看起来像以下屏幕快照：
- en: '![Adding a title, theme color, and content](img/7102EN_11_06.jpg)'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![添加标题、主题颜色和内容](img/7102EN_11_06.jpg)'
- en: 'Lastly, let''s add some functionality with an event handler for the button
    we declared in the markup, as enlisted in the following steps:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，让我们通过为在标记中声明的按钮添加事件处理程序来添加一些功能，具体步骤如下：
- en: Click on the **Post My Answer** button in either the XAML designer or the text
    editor, and it will show in the **Properties** window.
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在XAML设计器或文本编辑器中点击**发布我的答案**按钮，它将在**属性**窗口中显示。
- en: In the **Properties** window, locate and click on the **Events** button on the
    top-left area.
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**属性**窗口中，定位并点击左上角的**事件**按钮。
- en: Locate the **Click** event at the top of the list and double-click or press
    *Enter* in the textbox provided.
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在列表顶部找到**Click**事件，双击或在文本框中按*Enter*键。
- en: This will create the event handler method. Display it in the code editor of
    the file `MainPage.xaml.cs`.
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将创建事件处理方法。在文件`MainPage.xaml.cs`的代码编辑器中显示它。
- en: 'The following screenshot shows the process:'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下屏幕快照显示了该过程：
- en: '![Adding a title, theme color, and content](img/7102EN_11_07.jpg)'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![添加标题、主题颜色和内容](img/7102EN_11_07.jpg)'
- en: 'The autogenerated event handler comes up with the name `Button_Click` (if the
    button had a value for its `name` property, the event handler would have looked
    something like `ButtonName_Click`). The method will look as follows:'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自动生成的事件处理程序名字为`Button_Click`（如果按钮有一个为其`name`属性赋值，事件处理程序看起来可能像`ButtonName_Click`）。该方法将如下所示：
- en: '[PRE3]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Let''s add simple code that gets the text entered in the input textbox and
    displays it in the empty `TextBlock` named `myAnswer`. The code will look as follows:'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我们添加一些简单的代码，获取输入文本框中输入的文本并在名为`myAnswer`的空`TextBlock`中显示它。代码将如下所示：
- en: '[PRE4]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If we go back to the XAML editor, we''ll see that the `Click` event handler
    was added to the `Button` element like this:'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果我们回到XAML编辑器，我们会看到`Click`事件处理程序已经这样添加到了`Button`元素中：
- en: '[PRE5]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Run the app now, enter some text in the textbox, and test the button. Once clicked,
    it will output whatever is inside the textbox to the screen.
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，运行应用程序，在文本框中输入一些文本，并测试按钮。点击后，它将在屏幕上显示文本框内的任何内容。
- en: There is much more to XAML than this simple demo, and the previous example merely
    shows us how we can start with a very basic app and build up content and functionality.
    XAML is not that hard once we become familiar with it; as with any other programming
    language, we will need practice. However, the choice between XAML and HTML5 is
    completely yours.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: XAML的魅力远不止这个简单的演示，之前的例子仅仅展示了我们如何从一个非常基础的应用程序开始，逐步构建内容和功能。一旦我们熟悉了XAML，它并不那么难；与其他编程语言一样，我们需要进行实践。然而，选择XAML还是HTML5完全取决于你。
- en: One of the advantages of developing Windows Store apps with XAML is the ability
    to migrate **Windows Phone 7** apps to Windows 8 using the guide provided by Microsoft
    to help you make the conversion. Likewise, Microsoft provides a guide to help
    you port an existing Silverlight or WPF/XAML code to a Windows Store app using
    XAML. Both these guides are available on the *Windows Phone Dev Center* page ([http://developer.windowsphone.com/en-us](http://developer.windowsphone.com/en-us)).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 使用XAML开发Windows Store应用的一个优点是，您可以使用微软提供的指南将**Windows Phone 7**应用迁移到Windows 8。同样，微软也提供了一个指南，帮助您将现有的Silverlight或WPF/XAML代码通过XAML转换为Windows
    Store应用。这两个指南都可以在*Windows Phone Dev Center*页面找到([http://developer.windowsphone.com/en-us](http://developer.windowsphone.com/en-us))。
- en: Summary
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have learned about different choices offered by Windows
    8 for developers. Additionally, we were introduced to the XAML language and syntax
    in Windows Store apps.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解到了Windows 8为开发者提供的不同选择。此外，我们还介绍了Windows Store应用中的XAML语言和语法。
- en: We also covered how to start developing Windows Store apps using XAML and how
    it differs from developing using JavaScript, which gave us a heads-up on what
    to expect when we want to develop with either languages.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还介绍了如何使用XAML开始开发Windows Store应用，以及它与使用JavaScript开发的不同之处，这让我们对使用任一语言开发有了预期。
- en: Finally, we created a minimal app and added to it some basic UI content and
    functionality using the XAML markup.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们创建了一个最小的应用，并向其添加了一些基本的UI内容和功能，使用了XAML标记语言。
- en: In this book, we introduced new features in HTML5 and CSS3 and then learned
    how these features are being implemented in a Windows Store app. We also covered
    the JavaScript controls' functionalities, which are specific to the Windows Store
    app. After this, we learned how to create a basic JavaScript app and how to quick-start
    developing Windows Store apps with JavaScript. Further, we got to learn about
    some of the important features of the apps and how to implement these features.
    We started by retrieving data and displaying it using WinJS controls. Then, we
    got introduced to the view states of the app and how to make the app respond to
    changes in these view states. Afterward, we covered the tiles in Windows 8 and
    learned how to add live tiles and send notifications to the app. Also, we learned
    how to integrate the app with Windows Live services to enable authentication and
    sign-in for users using their e-mail accounts. We also learned about the app bar
    in a Windows Store app and how to add buttons to it. Finally, we got introduced
    to the Windows Store and learned all about packaging and publishing the app to
    the store.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我们介绍了HTML5和CSS3的新特性，并学习了这些特性如何在Windows Store应用中实现。我们还介绍了专为Windows Store应用设计的JavaScript控件功能。之后，我们学习了如何创建一个基本的JavaScript应用，以及如何使用JavaScript快速开始开发Windows
    Store应用。进一步地，我们了解了一些应用的重要特性以及如何实现这些特性。我们首先通过WinJS控件检索和显示数据。然后，我们介绍了应用的视图状态以及如何使应用响应这些视图状态的变化。之后，我们了解了Windows
    8中的磁贴，并学习了如何添加动态磁贴并向应用发送通知。此外，我们还学习了如何将应用与Windows Live服务集成，以使用户能够使用他们的电子邮件账户进行认证和登录。我们还学习了Windows
    Store应用中的应用栏以及如何向其添加按钮。最后，我们介绍了Windows Store，并学习了有关将应用打包并发布到商店的所有内容。
