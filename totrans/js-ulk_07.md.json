["```js\n\"use strict\";\n\nclass EventEmitter {\n  /** Initialize */\n  constructor() {\n    /**\n    * @access private\n    * @type {EventHandler[]}\n    */\n   this.handlers = [];\n  }\n /**\n  * Subscribe a cb handler for a given event in the object scope\n  * @param {String} ev\n  * @param {Function} cb\n  * @param {Object} [context]\n  * @returns {EventEmitter}\n  */\n  on( ev, cb, context ){\n     this.handlers.push({\n       event: ev,\n       callback: cb,\n       context: context\n     });\n     return this;\n  }\n/**\n  * Emit a given event in the object\n  * @param {String} ev\n  * @param {...*} [arg]\n  * @returns {EventEmitter}\n  */\n  trigger( ev, ...args ) {\n    this.handlers.forEach(function( evObj ){\n     if ( evObj.event !== ev || !evObj.callback.apply ) {\n       return;\n     }\n     evObj.callback.apply( evObj.context || this, args );\n   }, this );\n   return this;\n  }\n}\n\nwindow.mediator = new EventEmitter();\n```", "```js\nclass News {\n  /** Initialize */\n  constructor(){\n    mediator.on( \"translate\", this.update, this );\n  }\n  /** @param {String} lang */\n  update( lang ){\n    // fetch news from remote host for a given lang\n    console.log( \"News loaded for\", lang );\n  }\n}\n\nclass Language {\n  /** @param {String} lang */\n  change( lang ) {\n    mediator.trigger( \"translate\", lang );\n  }\n}\n\nlet language = new Language();\nnew News()\nlanguage.change( \"de\" );\n```", "```js\nclass Facade {\n  constructor(){\n    mediator.on( \"show-dashboard\", function(){\n      this.dashboard.show()\n      this.userPanel.remove();\n    }, this )\n    .on( \"show-userpanel\", function(a){\n      this.dashboard.hide()\n      this.userPanel = new UserPanel( this.user );\n    }, this )\n    .on( \"authorized\", function( user ){\n      this.user = user;\n      this.topBar = new TopBar( user.name );\n      this.dashboard = new Dashboard( user.lang );\n      this.mainMenu = new MainMenu( user.lang );\n    }, this )\n    .on( \"logout\", function(){\n      this.userPanel.remove();\n      this.topBar.remove();\n      this.dashboard.remove();\n      this.mainMenu.remove();\n      this.login = new Login();\n    }, this );\n  }\n}\n```", "```js\n<form data-bind=\"fooForm\">\n      <label for=\"email\">Email:</label>\n      <input id=\"email\" name=\"email\" required />\n      <span class=\"error-msg\" data-bind=\"errorMsg\"></span>\n      <button data-bind=\"submitBtn\" type=\"submit\">Submit</button>\n  </form>\n```", "```js\n\"use strict\";\n/** @class {ContactSearchView}  */\nvar ContactSearchView = Backbone.View.extend(/** @lends ContactSearchView.prototype */{\n  events: {\n    \"submit\": \"onSubmit\"\n  },\n  /** @constructs {ContactSearchView} */\n  initialize: function() {\n    this.$email = this.$el.find( \"[name=email]\" );\n    this.$errorMsg = this.$el.find( \"[data-bind=errorMsg]\" );\n    this.$submitBtn = this.$el.find( \"[data-bind=submitBtn]\" );\n    this.bindUi();\n  },\n  /** Bind handlers */\n  bindUi: function(){\n    this.$email.on( \"input\", this.onChange.bind( this ) );\n    this.model.on( \"invalid\", this.onInvalid.bind( this ) );\n    this.model.on( \"change\", this.onValid.bind( this ) );\n  },\n  /** Handle input onchange event */\n  onChange: function(){\n    this.model.set({\n      email: this.$email.val(),\n      // Hack to force model running validation on repeating payloads\n      \"model:state\": ( 1 + Math.random() ) * 0x10000\n    }, { validate: true });\n  },\n  /** Handle model in invalid state */\n  onInvalid: function(){\n    var error = arguments[ 1 ];\n    this.$errorMsg.text( error );\n    this.$submitBtn.prop( \"disabled\", \"disabled\" );\n  },\n  /** Handle model in valid state */\n  onValid: function(){\n    this.$errorMsg.empty();\n    this.$submitBtn.removeProp( \"disabled\" );\n  },\n  /** Handle form submit */\n  onSubmit: function( e ){\n    e.preventDefault();\n    alert( \"Looking up for \" + this.model.get( \"email\") );\n  }\n});\n```", "```js\n \"use strict\";\n/** @class {ContactSearchModel}  */\nvar ContactSearchModel = Backbone.Model.extend(/** @lends ContactSearchModel.prototype */{\n  /** @type {Object} */\n  defaults: {\n    email: \"\"\n  },\n  /**\n   * Validate email\n  * @param {String} email\n  */\n  isEmailValid: function( email ) {\n    var pattern = /^[a-zA-Z0-9\\!\\#\\$\\%\\&\\'\\*\\+\\-\\/\\=\\?\\^\\_\\`\\{\\|\\}\\~\\.]+@[a-zA-Z0-9.\\-]+\\.[a-zA-Z]{2,4}$/g;\n    return email.length && pattern.test( email );\n  },\n  /**\n   * Validate model\n  * @param {Map} attrs\n  */\n  validate: function( attrs ) {\n    if ( !attrs.email ) {\n      return \"Email is required.\";\n    }\n    if ( !this.isEmailValid( attrs.email ) ) {\n      return \"Invalid email address.\";\n    }\n  }\n});\n```", "```js\n<!DOCTYPE html>\n<html>\n  <script type=\"text/javascript\" src=\"img/jquery.min.js\"></script>\n  <script type=\"text/javascript\" src=\"img/underscore-min.js\"></script>\n  <script type=\"text/javascript\" src=\"img/backbone-min.js\"></script>\n  <script type=\"text/javascript\" src=\"img/ContactSearchView.js\"></script>\n  <script type=\"text/javascript\" src=\"img/ContactSearchModel.js\"></script>\n  <style>\n    fieldset { border: 0; }\n    .error-msg{ color: red; }\n  </style>\n  <body>\n   <form data-bind=\"fooForm\">\n    <fieldset>\n      <label for=\"email\">Email:</label>\n      <input id=\"email\" name=\"email\" required />\n      <span class=\"error-msg\" data-bind=\"errorMsg\"></span>\n    </fieldset>\n    <fieldset>\n      <button data-bind=\"submitBtn\" type=\"submit\">Submit</button>\n    </fieldset>\n  </form>\n<script>\n\n// Render foo view\n new ContactSearchView({\n   el: $( \"[data-bind=fooForm]\" ),\n   model: new ContactSearchModel\n });\n\n</script>\n  </body>\n</html> \n```", "```js\n<!DOCTYPE html>\n<html>\n  <script src=\"img/angular.min.js\"></script>\n  <style>\n    fieldset { border: 0; }\n    .error-msg{ color: red; }\n  </style>\n  <body>\n   <form ng-app=\"contactSearch\" name=\"csForm\" ng-submit=\"submit()\" ng-controller=\"csController\">\n    <fieldset>\n      <label for=\"email\">Email:</label>\n      <input id=\"email\" name=\"email\" ng-model=\"email\" required\n          ng-pattern=\"/^[a-zA-Z0-9\\!\\#\\$\\%\\&\\'\\*\\+\\-\\/\\=\\?\\^\\_\\`\\{\\|\\}\\~\\.]+@[a-zA-Z0-9.\\-]+\\.[a-zA-Z]{2,4}$/\"  />\n      <span class=\"error-msg\" ng-show=\"csForm.email.$dirty && csForm.email.$invalid\">\n        <span ng-show=\"csForm.email.$error.required\">Email is required.</span>\n        <span ng-show=\"csForm.email.$error.pattern\">Invalid email address.</span>\n      </span>\n    </fieldset>\n    <fieldset>\n      <button type=\"submit\" ng-disabled=\"csForm.email.$dirty && csForm.email.$invalid\">Submit</button>\n    </fieldset>\n  </form>\n<script>\n  \"use strict\";\n  angular.module( \"contactSearch\", [] ).controller( \"csController\", [ \"$scope\", function ( $scope ){\n    $scope.email = \"\";\n    $scope.submit = function() {\n      alert( \"Looking up for \" + $scope.email );\n    };\n  }]);\n</script>\n  </body>\n</html>\n```", "```js\n   /** @class {FormView}  */\nvar FormView = React.createClass({\n  /** Create an initial state with the model  */\n  getInitialState: function () {\n    return {\n      email: new EmailModel()\n    };\n  },\n  /**\n   * Update state on input change event\n   * @param {String} value - changed value of the input\n   */\n  onChange: function( value ){\n    this.state.email.set( \"email\", value );\n    this.forceUpdate();\n  },\n  /** Handle form submit */\n  onSubmit: function( e ){\n    e.preventDefault();\n    alert( \"Looking up for \" + this.state.email.get( \"email\") );\n  },\n  /** Render form */\n  render: function () {\n    return <form onSubmit={this.onSubmit}>\n      <fieldset>\n      <label htmlFor=\"email\">Email:</label>\n      <EmailView model={this.state.email} onChange={this.onChange} />\n      </fieldset>\n      <fieldset>\n        <button data-bind=\"submitBtn\" type=\"submit\">Submit</button>\n      </fieldset>\n    </form>;\n  }\n});\n```", "```js\n    /** @class {EmailView}  */\nvar EmailView = React.createClass({\n  /**\n   * Delegate input on-changed event to the from view\n   * @param {Event} e\n   */\n  onChanged: function( e ){\n    this.props.onChange( e.target.value );\n  },\n  /** Render input */\n  render: function () {\n    var model = this.props.model;\n    return <span>\n      <input id=\"email\" type=\"text\" value={model.email} onChange={this.onChanged} />      \n      <span className=\"error-msg\" data-bind=\"errorMsg\"> {model.isValid() ? \"\" : model.validationError}</span>\n    </span>;\n  }\n});\n```", "```js\n<!DOCTYPE html>\n<html>\n<head>\n  <script src=\"img/react.js\"></script>\n  <script src=\"img/JSXTransformer.js\"></script>\n  <script type=\"text/javascript\" src=\"img/underscore-min.js\"></script>\n  <script type=\"text/javascript\" src=\"img/backbone-min.js\"></script>\n  <script type=\"text/javascript\" src=\"img/ContactSearchModel.js\"></script>\n  <style>\n    fieldset { border: 0; }\n    .error-msg{ color: red; }\n  </style>\n</head>\n<body>\n  <div data-bind=\"app\"></div>\n<script type=\"text/jsx\">\n  /** @jsx React.DOM */\n\n// Please insert here both components\n// FormView and EmailView\n\n// render app\nReact.render(\n  <FormView />,\n  document.querySelector( \"[data-bind=app]\" )\n);\n</script>\n</body>\n</html>\n```"]