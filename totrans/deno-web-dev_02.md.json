["```js\n└── src\n    ├── museums\n    │   ├── controller.ts\n    │   ├── repository.ts\n    │   └── types.ts\n    └── web\n```", "```js\n    export type Museum = {\n      id: string,\n      name: string,\n      description: string,\n      location: {\n        lat: string,\n        lng: string\n      }\n    }\n    ```", "```js\n    export interface MuseumController {\n      getAll: () => Promise<Museum[]>;\n    }\n    ```", "```js\n    import type { MuseumController } from \"./types.ts\";\n    export class Controller implements MuseumController {\n      async getAll() {\n        return [];\n      }\n    } \n    ```", "```js\n    export interface MuseumRepository {\n      getAll: () => Promise<Museum[]>\n    }\n    ```", "```js\n    museumRepository that implements the MuseumRepository interface. By creating this and *lifting the dependencies*, we no longer need to return an empty array from our controller.Before we write any more logic, let's make sure our code runs and check if it is working. We're just missing one thing.\n    ```", "```js\n    import { Controller as MuseumController } from\n      \"./museums/controller.ts\";\n    const museumController = new MuseumController({\n      museumRepository: {\n        getAll: async () => []\n      }\n    })\n    console.log(await museumController.getAll())\n    ```", "```js\n    $ deno run src/index.ts \n    []\n    ```", "```js\n    import type { Museum, MuseumRepository } from\n      \"./types.ts\";\n    export class Repository implements MuseumRepository {\n      storage = new Map<string, Museum>();\n    }\n    ```", "```js\n    export class Repository implements MuseumRepository {\n      storage = new Map<string, Museum>();\n    src should only be accessible from the outside through a single file. This means that whoever wants to import stuff from src/museums should only do so from a single src/museums/index.ts file.\n    ```", "```js\n    export { Controller } from \"./controller.ts\";\n    export { Repository } from \"./repository.ts\";\n    export type { Museum, MuseumController,\n      MuseumRepository } from \"./types.ts\"; \n    ```", "```js\n    import type { MuseumController, MuseumRepository }\n      from \"./index.ts\";\n    ```", "```js\n    import {\n      Controller as MuseumController,\n      Repository as MuseumRepository,\n    } from \"./museums/index.ts\";\n    const museumRepository = new MuseumRepository();\n    const museumController = new MuseumController({\n      museumRepository })\n    console.log(await museumController.getAll())\n    ```", "```js\n    const museumRepository = new MuseumRepository();\n    …\n    museumRepository.storage.set\n      (\"1fbdd2a9-1b97-46e0-b450-62819e5772ff\", {\n      id: \"1fbdd2a9-1b97-46e0-b450-62819e5772ff\",\n      name: \"The Louvre\",\n    description: \"The world's largest art museum \n        and a historic monument in Paris, France.\",\n      location: {\n        lat: \"48.860294\",\n        lng: \"2.33862\",\n      },\n    });\n    console.log(await museumController.getAll())\n    ```", "```js\n    $ deno run src/index.ts\n    [\n      {\n        id: \"1fbdd2a9-1b97-46e0-b450-62819e5772ff\",\n        name: \"The Louvre\",\n        description: \"The world's largest art\n          museum and a historic monument in Paris,\n            France.\",\n        location: { lat: \"48.860294\", lng: \"2.33862\" }\n      }\n    ]\n    ```", "```js\n    import { serve } from\n      \"https://deno.land/std@0.83.0/http/server.ts\";\n    const PORT = 8080;\n    const server = serve({ port: PORT });\n    console.log(`Server running at\n      https://localhost:${PORT}`);\n    for await (let req of server) {\n      req.respond({ body: 'museums api', status: 200 })\n    }\n    ```", "```js\n    import { serve } from\n      \"https://deno.land/std@0.83.0/http/server.ts\";\n    port defining its type. \n    ```", "```js\n    interface CreateServerDependencies {\n      configuration: {\n        port: number\n      }\n    }\n    export async function createServer({\n      configuration: {\n        port\n      }\n    }: CreateServerDependencies) {\n    …\n    ```", "```js\n    import { createServer } from \"./web/index.ts\";\n    …\n    createServer({\n      configuration: {\n        port: 8080\n      }\n    })\n    …\n    ```", "```js\n    $ deno run --allow-net src/index.ts\n    Server running at http://localhost:8080\n    [\n      {\n        id: \"1fbdd2a9-1b97-46e0-b450-62819e5772ff\",\n        name: \"The Louvre\",\n        description: \"The world's largest art museum and a\n          historic monument in Paris, France.\",\n        location: { lat: \"48.860294\", lng: \"2.33862\" }\n      }\n    ]\n    ```", "```js\n$ curl http://localhost:8080\nmuseums api\n```", "```js\nexport async function createServer({\n  configuration: {\n    port\n  }\n}: CreateServerDependencies) {\n  const server = serve({ port });\n  console.log(`Server running at\n    http://localhost:${port}`);\n  for await (let req of server) {\n    if (req.url === \"/api/museums\" && req.method === \"GET\")     \n     {\nreq.respond({ \nbody: JSON.stringify({ \nmuseums: [] \n}), \nstatus: 200 \n      })\n      continue\n    }\n    req.respond({ body: \"museums api\", status: 200 })\n  }\n}\n```", "```js\n$ deno run --allow-net src/index.ts \nServer running at http://localhost:8080\n```", "```js\n$ curl http://localhost:8080/api/museums\n{\"museums\":[]}\n```", "```js\n    MuseumController type we defined in the museum's module. We're also adding a museum object alongside the configuration object.\n    ```", "```js\n    export async function createServer({\n      configuration: {\n        port\n      },\n      createServer function, but we're not sending it when we call createServer. Let's fix that.\n    ```", "```js\n    import { createServer } from \"./web/index.ts\";\n    import {\n      Controller as MuseumController,\n      Repository as MuseumRepository,\n    } from \"./museums/index.ts\";\n    const museumRepository = new MuseumRepository();\n    const museumController = new MuseumController({\n      museumRepository })\n    museumRepository.storage.set\n     (\"1fbdd2a9-1b97-46e0-b450-62819e5772ff\", {\n      id: \"1fbdd2a9-1b97-46e0-b450-62819e5772ff\",\n      name: \"The Louvre\",\n      description: \"The world's largest art museum \n        and a historic monument in Paris, France.\",\n      location: {\n        lat: \"48.860294\",\n        lng: \"2.33862\",\n      },\n    });\n    createServer({\n      configuration: { port: 8080 },\n      museum: museumController\n    })\n    ```", "```js\n    $ deno run --allow-net src/index.ts\n    Server running at http://localhost:8080\n    ```", "```js\n    $ curl localhost:8080/api/museums\n    {\"museums\":[{\"id\":\"1fbdd2a9-1b97-46e0-b450-62819e5772ff\",\"name\":\"The Louvre\",\"description\":\"The world's largest art museum and a historic monument in Paris, France.\",\"location\":{\"lat\":\"48.860294\",\"lng\":\"2.33862\"}}]}\n    ```", "```js\nimport { Drash } from\n  \"https://deno.land/x/drash@v1.2.2/mod.ts\";\nclass HomeResource extends Drash.Http.Resource {\n  static paths = [\"/\"];\n  public GET() {\n    this.response.body = \"Hello World!\";\n    return this.response;\n  }\n}\n```", "```js\nconst server = new Drash.Http.Server({\n  response_output: \"text/html\",\n  resources: [HomeResource]\n});\nserver.run({\n  hostname: \"localhost\",\n  port: 1447\n});\n```", "```js\nimport { createApp } from\n  \"https://servestjs.org/@v1.1.4/mod.ts\";\nconst app = createApp();\napp.handle(\"/\", async (req) => {\n  await req.respond({\n    status: 200,\n    headers: new Headers({\n      \"content-type\": \"text/plain\",\n    }),\n    body: \"Hello, Servest!\",\n  });\n});\napp.listen({ port: 8899 });\n```", "```js\nimport { Application } from\n  \"https://deno.land/x/oak/mod.ts\";\nconst app = new Application();\napp.use((ctx) => {\n  ctx.response.body = \"Hello world!\";\n});\nawait app.listen(\"127.0.0.1:8000\");\n```", "```js\nimport { Controller, Get, Area, App } from\n  'https://deno.land/x/alosaur@v0.21.1/mod.ts';\n@Controller() // or specific path @Controller(\"/home\")\nexport class HomeController {\n    @Get() // or specific path @Get(\"/hello\")\n    text() {\n        return 'Hello world';\n    }\n}\n// Declare module\n@Area({\n    controllers: [HomeController],\n})\nexport class HomeArea {}\n// Create alosaur application\nconst app = new App({\n    areas: [HomeArea],\n});\napp.listen();\n```"]