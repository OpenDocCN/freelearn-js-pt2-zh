["```js\nfunction Car() {}\nfunction BMW() {}\nvar engines = 1;\nvar features = {\n  seats: 6,\n  airbags:6\n};\n```", "```js\n// Single global object\nvar CARFACTORY = CARFACTORY || {};\nCARFACTORY.Car = function () {};\nCARFACTORY.BMW = function () {};\nCARFACTORY.engines = 1;\nCARFACTORY.features = {\n  seats: 6,\n  airbags:6\n};\n```", "```js\nvar basicServerConfig = {\n  environment: \"production\",\n  startupParams: {\n    cacheTimeout: 30,\n    locale: \"en_US\"\n  },\n  init: function () {\n    console.log( \"Initializing the server\" );\n  },\n  updateStartup: function( params ) {\n      this.startupParams = params;\n      console.log( this.startupParams.cacheTimeout );\n      console.log( this.startupParams.locale );\n  }\n};\nbasicServerConfig.init(); //\"Initializing the server\"\nbasicServerConfig.updateStartup({cacheTimeout:60, locale:\"en_UK\"}); //60, en_UK\n```", "```js\nvar basicServerConfig = (function () {\n  var environment= \"production\";\n  startupParams= {\n    cacheTimeout: 30,\n    locale: \"en_US\"\n  };\n  return {\n    init: function () {\n      console.log( \"Initializing the server\" );\n    },\n    updateStartup: function( params ) {\n      this.startupParams = params;\n      console.log( this.startupParams.cacheTimeout );\n      console.log( this.startupParams.locale );\n    }\n  };\n})();\nbasicServerConfig.init(); //\"Initializing the server\"\nbasicServerConfig.updateStartup({cacheTimeout:60, locale:\"en_UK\"}); //60, en_UK\n```", "```js\n// Single global object\nvar SERVER = SERVER||{};\nSERVER.basicServerConfig = (function () {\n  Var environment= \"production\";\n  startupParams= {\n    cacheTimeout: 30,\n    locale: \"en_US\"\n  };\n  return {\n    init: function () {\n      console.log( \"Initializing the server\" );\n    },\n    updateStartup: function( params ) {\n      this.startupParams = params;\n      console.log( this.startupParams.cacheTimeout );\n      console.log( this.startupParams.locale );\n    }\n  };\n})();\nSERVER.basicServerConfig.init(); //\"Initializing the server\"\nSERVER.basicServerConfig.updateStartup({cacheTimeout:60, locale:\"en_UK\"}); //60, en_UK\n```", "```js\nvar modulePattern = function(){\n  var privateOne = 1;\n  function privateFn(){\n    console.log('privateFn called');\n  }\n  return {\n    publicTwo: 2,\n    publicFn:function(){\n      modulePattern.publicFnTwo();   \n    },\n    publicFnTwo:function(){\n      privateFn();\n    }\n  }\n}();\nmodulePattern.publicFn(); \"privateFn called\"\n```", "```js\nvar revealingExample = function(){\n  var privateOne = 1;\n  function privateFn(){\n    console.log('privateFn called');\n  }\n  var publicTwo = 2;\n  function publicFn(){\n    publicFnTwo();    \n  }\n  function publicFnTwo(){\n    privateFn();\n  }\n  function getCurrentState(){\n    return 2;\n  }\n  // reveal private variables by assigning public pointers\n  return {\n    setup:publicFn,\n    count:publicTwo,\n    increaseCount:publicFnTwo,\n    current:getCurrentState()\n  };\n}();\nconsole.log(revealingExample.current); // 2\nrevealingExample.setup(); //privateFn called\n```", "```js\n//Add a dependency module \nvar crypto = require('crypto');\nfunction randomString(length, chars) {\n  var randomBytes = crypto.randomBytes(length);\n  ...\n  ...\n}\n//Export this module to be available for other modules\nmodule.exports=randomString;\n```", "```js\ndefine(\n  module_id /*optional*/,\n  [dependencies] /*optional*/,\n  definition function /*function for instantiating the module or object*/\n);\n```", "```js\ndefine(\n{ \n  add: function(x, y){ \n    return x + y; \n  } \n});\n```", "```js\nrequire([\"math\",\"draw\"], function ( math,draw ) {\n  draw.2DRender(math.pi);\n});\n```", "```js\n//json_processor.js\nfunction processJSON(url) {\n  ...\n}\nexport function getSiteContent(url) {\n  return processJSON(url);\n}\n//main.js\nimport { getSiteContent } from \"json_processor.js\";\ncontent=getSiteContent(\"http://google.com/\");\n```", "```js\nvar golf = CarFactory.make('Compact');\nvar vento = CarFactory.make('Sedan');\nvar touareg = CarFactory.make('SUV');\n```", "```js\n// Factory Constructor\nfunction CarFactory() {}\nCarFactory.prototype.info = function() {\n  console.log(\"This car has \"+this.doors+\" doors and a \"+this.engine_capacity+\" liter engine\");\n};\n// the static factory method\nCarFactory.make = function (type) {\n  var constr 0= type;\n  var car;\n  CarFactory[constr].prototype = new CarFactory();\n  // create a new instance\n  car = new CarFactory[constr]();\n  return car;\n};\n\nCarFactory.Compact = function () {\n  this.doors = 4;\n  this.engine_capacity = 2; \n};\nCarFactory.Sedan = function () {\n  this.doors = 2;\n  this.engine_capacity = 2;\n};\nCarFactory.SUV = function () {\n  this.doors = 4;\n  this.engine_capacity = 6;\n}; \n  var golf = CarFactory.make('Compact');\n  var vento = CarFactory.make('Sedan');\n  var touareg = CarFactory.make('SUV');\n  golf.info(); //\"This car has 4 doors and a 2 liter engine\"\n```", "```js\nvar _ = require('underscore');\n//Shared functionality encapsulated into a CustomLogger\nvar logger = (function () {\n  var CustomLogger = {\n    log: function (message) {\n      console.log(message);\n    }\n  };\n  return CustomLogger;\n}());\n\n//An object that will need the custom logger to log system specific logs\nvar Server = (function (Logger) {\n  var CustomServer = function () {\n    this.init = function () {\n      this.log(\"Initializing Server...\");\n    };\n  };\n\n  // This copies/extends the members of the 'CustomLogger' into 'CustomServer'\n  _.extend(CustomServer.prototype, Logger);\n  return CustomServer;\n}(logger));\n\n(new Server()).init(); //Initializing Server...\n```", "```js\nvar phpServer = new BasicServer();\nphpServer = phpServer.decorate('reverseProxy');\nphpServer = phpServer.decorate('servePHP');\nphpServer = phpServer.decorate('80');\nphpServer = phpServer.decorate('serveStaticAssets');\nphpServer.init();\n```", "```js\nvar nodeServer = new BasicServer();\nnodeServer = nodeServer.decorate('serveNode');\nnodeServer = nodeServer.decorate('3000');\nnodeServer.init();\n```", "```js\n//Implement BasicServer that does the bare minimum\nfunction BasicServer() {\n  this.pid = 1;\n  console.log(\"Initializing basic Server\");\n  this.decorators_list = []; //Empty list of decorators\n}\n//List of all decorators\nBasicServer.decorators = {};\n\n//Add each decorator to the list of BasicServer's decorators\n//Each decorator in this list will be applied on the BasicServer instance\nBasicServer.decorators.reverseProxy = {\n  init: function(pid) {\n    console.log(\"Started Reverse Proxy\");\n    return pid + 1;\n  }\n};\nBasicServer.decorators.servePHP = {\n  init: function(pid) {\n    console.log(\"Started serving PHP\");\n    return pid + 1;\n  }\n};\nBasicServer.decorators.serveNode = {\n  init: function(pid) {\n    console.log(\"Started serving Node\");\n    return pid + 1;\n  }\n};\n\n//Push the decorator to this list everytime decorate() is called\nBasicServer.prototype.decorate = function(decorator) {\n  this.decorators_list.push(decorator);\n};\n//init() method looks through all the applied decorators on BasicServer\n//and executes init() method on all of them\nBasicServer.prototype.init = function () {\n  var running_processes = 0;\n  var pid = this.pid;\n  for (i = 0; i < this.decorators_list.length; i += 1) {\n    decorator_name = this.decorators_list[i];\n    running_processes = BasicServer.decorators[decorator_name].init(pid);\n  }\n  return running_processes;\n};\n\n//Create server to serve PHP\nvar phpServer = new BasicServer();\nphpServer.decorate('reverseProxy');\nphpServer.decorate('servePHP');\ntotal_processes = phpServer.init();\nconsole.log(total_processes);\n\n//Create server to serve Node\nvar nodeServer = new BasicServer();\nnodeServer.decorate('serveNode');\nnodeServer.init();\ntotal_processes = phpServer.init();\nconsole.log(total_processes);\n```", "```js\nvar Subject = ( function(  ) {\n  function Subject() {\n    this.observer_list = [];\n  }\n  // this method will handle adding observers to the internal list\n  Subject.prototype.add_observer = function ( obj ) {\n    console.log( 'Added observer' );\n    this.observer_list.push( obj );\n  };\n  Subject.prototype.remove_observer = function ( obj ) {\n    for( var i = 0; i < this.observer_list.length; i++ ) {\n      if( this.observer_list[ i ] === obj ) {\n        this.observer_list.splice( i, 1 );\n        console.log( 'Removed Observer' );\n      }\n    }\n  };\n  Subject.prototype.notify = function () {\n    var args = Array.prototype.slice.call( arguments, 0 );\n    for( var i = 0; i<this.observer_list.length; i++ ) {\n this.observer_list[i].update(args);\n    }\n  };\n  return Subject;\n})();\n```", "```js\nfunction Tweeter() {\n  var subject = new Subject();\n  this.addObserver = function ( observer ) {\n    subject.add_observer( observer );\n  };\n  this.removeObserver = function (observer) {\n    subject.remove_observer(observer);\n  };\n  this.fetchTweets = function fetchTweets() {\n    // tweet\n    var tweet = {\n      tweet: \"This is one nice observer\"\n    };\n    // notify our observers of the stock change\n    subject.notify( tweet );\n  };\n}\n```", "```js\nvar TweetUpdater = {\n  update : function() {\n    console.log( 'Updated Tweet -  ', arguments );\n  }\n};\nvar TweetFollower = {\n  update : function() {\n    console.log( '\"Following this tweet -  ', arguments );\n  }\n};\n```", "```js\nvar tweetApp = new Tweeter();\ntweetApp.addObserver( TweetUpdater );\ntweetApp.addObserver( TweetFollower );\ntweetApp.fetchTweets();\ntweetApp.removeObserver(TweetUpdater);\ntweetApp.removeObserver(TweetFollower);\n```", "```js\nAdded observer\nAdded observer\nUpdated Tweet -   { '0': [ { tweet: 'This is one nice observer' } ] }\n\"Following this tweet -   { '0': [ { tweet: 'This is one nice observer' } ] }\nRemoved Observer\nRemoved Observer\n```", "```js\nvar EmployeeModel = Backbone.Model.extend({\n  url: '/employee/1',\n  defaults: {\n    id: 1,\n    name: 'John Doe',\n    occupation: null\n  }\n  initialize: function() {\n }\n}); var JohnDoe = new EmployeeModel();\n```", "```js\n<li class=\"employee_photo\">\n  <h2>{{title}}</h2>\n  <img class=\"emp_headshot_small\" src=\"img/{{src}}\"/>\n  <div class=\"employee_details\">\n    {{employee_details}}\n  </div>\n</li>\n```", "```js\nvar EmployeeRouter = Backbone.Router.extend({\n  routes: { \"employee/:id\": \"route\" },\n  route: function( id ) {\n    ...view render logic...\n  }\n});\n```"]