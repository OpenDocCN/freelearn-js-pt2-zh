- en: Chapter 9. Animations
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章 动画
- en: Animations in an application are common nowadays. Animating visual transitions
    often gives some sense of fluidity, and a well-used animation can be the best
    way to communicate something to the user, more so than icons, images, or yet another
    chunk of text.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序中的动画现在是常见的。动画视觉转换通常会给人一种流畅感，而且很好地使用动画可以是向用户传达某事最好的方式，比图标、图片或又是另一段文字。
- en: Aurelia's templating engine has been designed to support animations. It uses
    an abstraction layer that allows for pluggable animation libraries, and the Aurelia
    ecosystem already offers multiple implementations.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Aurelia的模板引擎已被设计来支持动画。它使用一个抽象层，允许可插拔的动画库，而Aurelia生态系统已经提供了多个实现。
- en: In this chapter, we'll start by going over the Animator API, and see how the
    templating engine interacts with it. Then, we'll add some simple CSS-based animations
    to our contact-management application to get a taste of how it works.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将首先了解动画师API，并看看模板引擎是如何与其交互的。然后，我们将向我们的联系管理应用程序添加一些简单的基于CSS的动画，以了解它是如何工作的。
- en: The Animator API
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动画师API
- en: In the `aurelia-templating` library, the `TemplatingEngine` class needs to work
    with an animator service to perform view transitions. By default, it uses a class
    named `Animator`, which acts as a null object and, incidentally, describes the
    expected interface of an `Animator`.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在`aurelia-templating`库中，`TemplatingEngine`类需要与动画服务一起工作以执行视图转换。默认情况下，它使用一个名为`Animator`的类，该类作为空对象，顺便说一下，描述了`Animator`期望的接口。
- en: Note
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The **Null Object** design pattern describes an object or class that acts as
    an empty implementation of an interface. This object can be used instead of a
    null reference and removes the need to check for null before referencing it. You
    can get further information about this pattern at [https://sourcemaking.com/design_patterns/null_object](https://sourcemaking.com/design_patterns/null_object).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**空对象**设计模式描述了一个作为接口的空实现的对象或类。这个对象可以用作null引用，并消除了在引用之前检查null的需要。您可以在[https://sourcemaking.com/design_patterns/null_object](https://sourcemaking.com/design_patterns/null_object)上获取有关此模式的更多信息。'
- en: 'Here are the most commonly used methods from the Animator API:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是从动画师API中最常用的方法：
- en: '`enter(element: HTMLElement): Promise<boolean>`: Animates the addition of the
    element in the DOM'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`enter(element: HTMLElement): Promise<boolean>`: 在DOM中添加元素的动画效果'
- en: '`leave(element: HTMLElement): Promise<boolean>`: Animates the removal of the
    element from the DOM'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`leave(element: HTMLElement): Promise<boolean>`: 将元素从DOM中移除的动画效果'
- en: '`addClass(element: HTMLElement, className: string): Promise<boolean>`: Adds
    a CSS class to an element, which can trigger an animation, depending on the implementation'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`addClass(element: HTMLElement, className: string): Promise<boolean>`: 为元素添加CSS类，这可以根据实现方式触发动画'
- en: '`removeClass(element: HTMLElement, className: string): Promise<boolean>`: Removes
    a CSS class from an element, which can trigger an animation, depending on the
    implementation'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`removeClass(element: HTMLElement, className: string): Promise<boolean>`: 从元素中移除CSS类，这可以根据实现方式触发动画'
- en: '`animate(element: HTMLElement|HTMLElement[], className: string): Promise<boolean>`:
    Executes a single animation on an element or an array of elements. The `className`
    is either the CSS class triggering the animation, the name of the effect to apply,
    or the properties to animate, depending on the animator implementation'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`animate(element: HTMLElement|HTMLElement[], className: string): Promise<boolean>`:
    在一个元素或元素数组上执行单个动画。`className`要么是触发动画的CSS类，要么是应用的效果名称，要么是动画的属性，这取决于动画师实现方式'
- en: '`runSequence(animations: CssAnimation[]): Promise<boolean>`: Runs a series
    of animations in sequence. `CssAnimation` is an interface fulfilled by an object
    having both an `element: HTMLElement` and a `className: string` property. For
    each animation, the `className` is either the CSS class triggering the animation,
    the name of the effect to apply, or the properties to animate, depending on the
    animator implementation'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`runSequence(animations: CssAnimation[]): Promise<boolean>`: 按顺序运行一系列动画。`CssAnimation`是一个由具有`element:
    HTMLElement`和`className: string`属性的对象实现的接口。对于每个动画，`className`要么是触发动画的CSS类，要么是应用的效果名称，要么是动画的属性，这取决于动画师实现方式'
- en: All these methods return a `Promise` resolving to a `boolean` value. This value
    will typically be `true` when an animation was indeed performed and `false` when
    one wasn't. This last scenario can occur, for example, when trying to animate
    an element using a CSS class that doesn't define any animation.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些方法都返回一个`Promise`，其解决值为一个`boolean`值。这个值通常是`true`，当确实执行了动画时，以及`false`，当没有执行动画时。最后一个场景可能会发生，例如，尝试使用不定义任何动画的CSS类来动画化一个元素。
- en: At the time of writing, the usage of the animator by the templating engine is
    limited to calling the `enter` method for an element when adding it to the DOM
    and then calling the `leave` method when removing it. The other methods are not
    used by the framework, but will be by our own code.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，模板引擎对动画师的调用仅限于在将元素添加到DOM时调用其`enter`方法，然后在移除它时调用其`leave`方法。其他方法不被框架使用，但将由我们自己的代码使用。
- en: Finally, animating an element is done on an opt-in basis. The templating engine
    will call `enter` when rendering an element, and `leave` when removing it from
    the DOM, only if the element has the `au-animate` CSS class. This is for performance
    reasons; without this opt-in mechanism, a lot of useless code would be executed
    every time any element is rendered and unrendered, when typically, only a few
    selected elements have animated transitions.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，对元素的动画转换是可选的。模板引擎在渲染元素时调用`enter`方法，在从DOM中移除它时调用`leave`方法，但仅当元素具有`au-animate`CSS类。这是出于性能原因；如果没有这个可选机制，每次渲染和卸载任何元素时都会执行大量无用的代码，而通常，只有少数选定的元素具有动画转换。
- en: The CSS animator
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS动画师
- en: The `aurelia-animator-css` library is a CSS-based animator implementation. We'll
    install it and use it to add simple CSS-based animations in our contact-management
    application.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`aurelia-animator-css`库是基于CSS的动画师实现。我们将安装它，并使用它为我们的联系人管理应用程序添加简单的基于CSS的动画。'
- en: Installing the plugin
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装插件
- en: 'Start by opening a console in the project directory and run the following command:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在项目目录中打开一个控制台，并运行以下命令：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'As usual, it needs to be added to the vendor bundle. In the `aurelia_project/aurelia.json`
    file, under `build`, in the `bundles` section, at the following line to the `dependencies`
    of the bundle named `vendor-bundle.js`:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 像往常一样，它需要添加到供应商包中。在`aurelia_project/aurelia.json`文件中，在`build`下的`bundles`部分，添加到名为`vendor-bundle.js`的包的`dependencies`下列：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Finally, we need to load the plugin so the templating engine uses it instead
    of the default `Animator`:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要加载插件，以便模板引擎使用它而不是默认的`Animator`：
- en: '`src/main.js`'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`src/main.js`'
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: At this point, everything is ready to handle CSS animations.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 至此，一切就绪，可以处理CSS动画。
- en: Animating view transitions
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动画视图转换
- en: However, before getting our hands dirty, let's quickly walk through the high
    level algorithm and see how the `enter` and `leave` methods of the CSS-based animator
    work.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在动手之前，让我们快速了解一下高级算法，并看看基于CSS的动画师的`enter`和`leave`方法是如何工作的。
- en: 'When the templating engine adds a rendered element to the DOM, the following
    process takes place:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当模板引擎将渲染的元素添加到DOM时，以下过程会发生：
- en: The templating engine adds the element to the DOM.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 模板引擎将元素添加到DOM。
- en: The templating engine checks if the element has the `au-animate` class. If it
    does, it calls the animator's `enter` method. If it doesn't, the animator is bypassed
    altogether and the process ends here.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 模板引擎检查元素是否具有`au-animate`类。如果有，它调用动画师的`enter`方法。如果没有，动画师完全被绕过，过程到这里结束。
- en: The animator adds the `au-enter` class to the element. This class can be used
    in a CSS rule that describes styles for the element that will be constant during
    the whole animation.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 动画师为元素添加`au-enter`类。这个类可以在描述元素在整个动画过程中将保持不变的样式的CSS规则中使用。
- en: The animator adds the `au-enter-active` class to the element. This class should
    be used in a CSS rule triggering an animation.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 动画师为元素添加`au-enter-active`类。这个类应该在触发动画的CSS规则中使用。
- en: The animator checks if the element's computed style contains an animation. If
    it doesn't, it removes both `au-enter` and `au-enter-active` classes from it and
    resolves the resulting `Promise` with `false`. The process ends here. If it does,
    it starts listening for an `animationend` event from the browser.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 动画师检查元素的计算样式是否包含动画。如果不包含，它会从其中移除`au-enter`和`au-enter-active`类，并使用`false`解决产生的`Promise`。到这里过程结束。如果包含，它开始监听浏览器上的`animationend`事件。
- en: When the `animationend` event is received, the animator removes the `au-enter`
    and the `au-enter-active` classes from the element and resolves the resulting
    `Promise` with `true`.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当收到`animationend`事件时，动画师将元素的`au-enter`和`au-enter-active`类移除，并将产生的`Promise`解决为`true`。
- en: 'The process to remove an element from the DOM is pretty similar, but in reverse:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 从DOM中删除元素的流程非常相似，但顺序相反：
- en: The templating engine checks if the element has the `au-animate` class. If it
    does, it calls the animator's `leave` method. If it doesn't, the animator is bypassed
    altogether and the process directly goes to step 6.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 模板引擎检查元素是否具有`au-animate`类。如果有，它调用动画师的`leave`方法。如果没有，动画师完全被绕过，过程直接跳到第6步。
- en: The animator adds the `au-leave` class to the element. This class can be used
    in a CSS rule that describes styles for the element that will be constant during
    the whole animation.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 动画师给元素添加了`au-leave`类。这个类可以在描述元素在整个动画期间将保持不变的样式的CSS规则中使用。
- en: The animator adds the `au-leave-active` class to the element. This class should
    be used in a CSS rule triggering an animation.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 动画师给元素添加了`au-leave-active`类。这个类应该用在触发动画的CSS规则中。
- en: The animator checks if the element's computed style contains an animation. If
    it does, it starts listening for an `animationend` event from the browser. If
    it doesn't, it removes both `au-leave` and `au-leave-active` classes from it and
    resolves the resulting `Promise` with `false`. The process jumps directly to step
    6.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 动画师检查元素的计算样式是否包含动画。如果有，它开始监听浏览器的一个`animationend`事件。如果没有，它将`au-leave`和`au-leave-active`类从其中移除，并将产生的`Promise`解决为`false`。过程直接跳到第6步。
- en: When the `animationend` event is received, the animator removes the `au-leave`
    and the `au-leave-active` classes from the element and resolves the resulting
    `Promise` with `true`.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当收到`animationend`事件时，动画师将元素的`au-leave`和`au-leave-active`类移除，并将产生的`Promise`解决为`true`。
- en: The templating engine removes the element from the DOM.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 模板引擎将元素从DOM中移除。
- en: Now that we understand how the CSS-based animator handles things, let's start
    by animating the `list-editor` component.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经理解了基于CSS的动画师是如何处理事情的，让我们先来动画化`list-editor`组件。
- en: Animating the list-editor
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 列表编辑器动画
- en: The `list-editor` component we wrote in [Chapter 5](ch05.html "Chapter 5. Making
    Reusable Components"), *Making Reusable Components*, has features that allow the
    user to add and remove items. It shouldn't be hard to make added items appear,
    such as a blind being pulled down, and removed items disappear, such as a blind
    being pulled up.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第5章](ch05.html "第5章 制作可复用的组件")*制作可复用的组件*中编写的`list-editor`组件具有允许用户添加和删除项目的特性。让添加的项目出现，比如窗帘被拉下，和删除的项目消失，比如窗帘被拉上，应该不会很难。
- en: 'To do so, we''ll first need to define the CSS animations for our component:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 为了这样做，我们首先需要为组件定义CSS动画：
- en: '`src/resources/elements/list-editor.css`'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`src/resources/elements/list-editor.css`'
- en: '[PRE3]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here, we start by defining the CSS rule used when adding an item; the item's
    `max-height` will be animated from 0 to 80 pixels in 0.2 seconds, during which
    its overflowing content will be hidden.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们首先定义了用于添加项目的CSS规则；项目的`max-height`将在0.2秒内从0动画到80像素，在此期间，其溢出内容将被隐藏。
- en: We then define the CSS rule used when removing an item. It is pretty much the
    same thing as when adding one, but in reverse; its `max-height` is animated from
    80 pixels to 0 in 0.2 seconds. Its overflowing content will also be hidden during
    this animation.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们定义了用于删除项目的CSS规则。这与添加项目非常相似，但顺序相反；它的`max-height`在0.2秒内从80像素动画到0。在这个动画期间，它的溢出内容也将被隐藏。
- en: 'Of course, we need to load this new CSS file with the component:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们需要用组件加载这个新的CSS文件：
- en: '`src/resources/elements/list-editor.html`'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`src/resources/elements/list-editor.html`'
- en: '[PRE4]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We also need to hint to the templating engine that the items should be animated:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要提示模板引擎项目应该被动画化：
- en: '`src/resources/elements/list-editor.html`'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`src/resources/elements/list-editor.html`'
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Here, we add a string interpolation expression in the `class` attribute, which
    adds the `au-animate` class to the `div` element of an item only when the `animated`
    property is truthy.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们在`class`属性中添加了一个字符串插值表达式，只有在`animated`属性为真时，才会给项目的`div`元素添加`au-animate`类。
- en: 'In the view-model, the `animated` property will be initially set to `false`,
    so the items are not animated when the component is rendered. It will be set to
    `true` only when the component is fully attached to the DOM, so operations such
    as adding a new item or removing an existing item are properly animated:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在视图模型中，`animated`属性将初始设置为`false`，因此在组件渲染时项目不会被动画化。只有在组件完全附加到DOM时，该属性才会被设置为`true`，因此添加新项目或移除现有项目的操作才能正确动画化：
- en: '`src/resources/elements/list-editor.js`'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`src/resources/elements/list-editor.js`'
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Why do we not just set `animated` to `true` in the `attached` callback method?
    Why the class to `setTimeout`? Well, if you remember the animation process described
    in the previous section, the element is first attached to the DOM, meaning that
    the `attached` callback is called at the same time, then the animator checks for
    the `au-animate` CSS class. If the `attached` callback synchronously sets `animated`
    to `true`, the `au-animate` CSS class will be present on the element when the
    animator checks if it needs to be animated, and the items will be animated during
    their initial rendering, which we want to prevent. Instead, we push the setting
    of `animated` to `true` on the browser's event queue, so the component's rendering
    is completed when the `au-animate` CSS class is added to the item's `div` elements.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么我们不在`attached`回调方法中直接将`animated`设置为`true`？为什么要用`setTimeout`类？嗯，如果你记得前一部分中描述的动画过程，首先元素被附加到DOM，这意味着`attached`回调在同一时间被调用，然后动画师检查`au-animate`CSS类。如果在`attached`回调中同步地将`animated`设置为`true`，当动画师检查是否需要对元素进行动画化时，`au-animate`CSS类将出现在元素上，在初始渲染期间项目将被动画化，这是我们想要防止的。相反，我们将`animated`设置为`true`推送到浏览器的事件队列中，这样当`au-animate`CSS类添加到项目的`div`元素时，组件的渲染已完成。
- en: At this point, if you run the application, navigate to either the contacts `creation`
    or `edition` component, and play around with the list editors; you should see
    the animations play.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 至此，如果你运行应用程序，导航到联系人`creation`或`edition`组件，并尝试编辑列表编辑器；你应该看到动画播放。
- en: Manually triggering an animation
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 手动触发动画
- en: In addition to animated transitions, the animator also supports manually triggered
    animations. Manual animations work differently than animated transitions; there
    are no `au-enter` or `au-leave` CSS classes. Instead, animations are manually
    triggered a using user-defined CSS class.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 除了动画过渡效果，动画师还支持手动触发的动画。与动画过渡不同，手动动画没有`au-enter`或`au-leave`这样的CSS类。相反，动画是通过使用用户自定义的CSS类来手动触发的。
- en: The basic methods used to manually trigger animations are addClass and removeClass.
    These methods allow you to add a CSS class to, or remove one from an element,
    with an animated transition between the two states.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 用于手动触发动画的基本方法是addClass和removeClass。这些方法允许你向元素添加或移除CSS类，并在两个状态之间实现动画过渡。
- en: 'For example, let''s imagine we have a CSS class named `A`. If we call `animator.addClass(''A'')`,
    the following process happens:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们有一个名为`A`的CSS类。如果我们调用`animator.addClass('A')`，以下过程会发生：
- en: The animator adds the `A-add` class to the element.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 动画师将`A-add`类添加到元素上。
- en: The animator checks if the element's computed style contains an animation. If
    it doesn't, it adds the `A` class to the element, then removes the `A-add` class
    from it, and resolves the resulting `Promise` with `false`. The process ends here.
    If it does, it starts listening for an `animationend` event from the browser.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 动画师检查元素的计算样式是否包含动画。如果不包含，它将`A`类添加到元素上，然后将其上的`A-add`类移除，并以`false`解析结果`Promise`。在此处结束该过程。如果包含动画，它开始监听浏览器上的`animationend`事件。
- en: When the `animationend` event is received, the animator adds the `A` class to
    the element, then removes the `A-add` class from it.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当接收到`animationend`事件时，动画师将`A`类添加到元素上，然后将其上的`A-add`类移除。
- en: As you can see, this process allows you to add a CSS class to an element, with
    an animated state transition between the element without the class and the element
    with the class, which should be triggered by the intermediary class with the `-add`
    suffix.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，这个过程允许你向元素添加一个CSS类，并在没有该类的元素和具有该类的元素之间实现动画状态过渡，该过程应由带有`-add`后缀的中间类触发。
- en: 'Additionally, when calling `animator.removeClass(''A'')` on the same element,
    the following process happens:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，当在同一元素上调用`animator.removeClass('A')`时，以下过程会发生：
- en: The animator removes the `A` class from the element.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 动画师将`A`类从元素中移除。
- en: The animator adds the `A-remove` class to the element.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 动画师将`A-remove`类添加到元素上。
- en: The animator checks if the element's computed style contains an animation. If
    it doesn't, it removes the `A-remove` class from it and resolves the resulting
    `Promise` with `false`. The process ends here. If it does, it starts listening
    for an `animationend` event from the browser.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 动画师检查元素的计算样式是否包含动画。如果不包含，它会从其中移除`A-remove`类，并用`false`解析产生的`Promise`。流程在这里结束。如果包含，它开始监听浏览器上的`animationend`事件。
- en: When the `animationend` event is received, the animator removes the `A-remove`
    class from the element and resolves the resulting `Promise` with `true`.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当收到`animationend`事件时，动画师从元素中移除`A-remove`类，并用`true`解析产生的`Promise`。
- en: This process allows you to remove a CSS class from an element, with an animated
    state transition between the element with the class and the element without the
    class, which should be triggered by the intermediary class with the `-remove`
    suffix.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程允许您从一个元素中移除CSS类，在带有类和不带类的元素之间进行带有动画的状态转换，该状态转换应由带有`-remove`后缀的中间类触发。
- en: Finally, the `animate` method allows to trigger both `addClass` and `removeClass`
    in sequence. In such a case, an animation can be triggered either by the `-add`
    class, the `-remove` class, or both.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`animate`方法允许按顺序触发`addClass`和`removeClass`。在这种情况下，动画可以由`-add`类、`-remove`类或两者同时触发。
- en: Emphasizing validation errors
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 强调验证错误
- en: Let's try this out in our contact-management application by adding an animation
    that will make the validation errors blink a couple of times when the user tries
    to save a contact and the form is invalid.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在我们的联系人管理应用程序中尝试这个功能，通过添加一个动画，当用户尝试保存一个联系人并且表单无效时，验证错误会闪烁几次。
- en: 'First, we need to create the CSS animation:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要创建一个CSS动画：
- en: '`src/contacts/components/form.css`'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`src/contacts/components/form.css`'
- en: '[PRE7]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Here, we simply define a CSS rule that will make the matched elements blink
    twice in half a second. The class triggering the animation is named `blink-add`,
    so it means we could trigger it by calling `addClass` on the elements to trigger
    it. However, since making the error messages blink is not a state transition and
    we don't want to leave our error messages with the `blink` class, we will trigger
    it by calling `animate`, so we are sure `blink` is removed at the end of the animation.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们简单地定义了一个CSS规则，使匹配的元素在半秒内闪烁两次。触发动画的类名为`blink-add`，所以我们可以通过调用`addClass`来触发它。然而，由于使错误信息闪烁不是一个状态转换，并且我们不想让我们的错误信息带有`blink`类，我们将通过调用`animate`来触发它，这样我们就可以确保`blink`在动画结束时被移除。
- en: 'To favor code reuse, let''s transform the contact `form` component, which is
    currently a template-only component, into a full-blown component. To do this,
    we need to create a view-model for the form. In this view-model, we will add a
    method to emphasize the errors by making them blink:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 为了促进代码重用，让我们将当前仅作为模板的联系人`form`组件转换为完整的组件。为此，我们需要为表单创建一个视图模型。在这个视图模型中，我们将添加一个通过使它们闪烁来强调错误的方法：
- en: '`src/contacts/components/form.js`'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`src/contacts/components/form.js`'
- en: '[PRE8]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Here, we start by defining the view-model, in which we move the declaration
    of the bindable `contact` property; then we inject the component's DOM element
    and the `animator` instance. Next, we define an `emphasizeErrors` method, which
    retrieves all validation errors within the element and calls `animate` on them
    using the `blink` effect.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们定义视图模型，在其中移动`bindable` `contact`属性的声明；然后我们注入组件的DOM元素和`animator`实例。接下来，我们定义一个`emphasizeErrors`方法，该方法检索元素内的所有验证错误并使用`blink`效果调用它们。
- en: When `animate` is called, the `animator` will go through the process of adding
    `blink-add` to the elements, which will trigger the animation. When the animation
    completes, it will remove `blink`, add `blink-remove` and, since `blink-remove`
    triggers no animation, will remove it right away, leaving the elements in the
    state they were in at the beginning of the process.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用`animate`时，`animator`将遍历向元素添加`blink-add`的过程，这将触发动画。动画完成后，它将移除`blink`，添加`blink-remove`，并且由于`blink-remove`不触发任何动画，它将立即移除它，使元素回到过程开始时的状态。
- en: 'Next, we need to remove the `bindable` attribute from the template, since `contact`
    is now defined by the view-model, and load the CSS file containing the new animation:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要从模板中移除`bindable`属性，因为`contact`现在是由视图模型定义的，并且加载包含新动画的CSS文件：
- en: '`src/contacts/components/form.html`'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`src/contacts/components/form.html`'
- en: '[PRE9]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Finally, let''s update the `creation` component. We first need to change the
    `require` statement for the `form` by removing the `.html` suffix so the templating
    engine knows that the component is not just a template but also has a view-model.
    We also need to retrieve a reference of the `form` view-model in the `creation`
    component''s template:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们更新一下`creation`组件。我们首先需要更改`form`的`require`语句，去掉`.html`后缀，这样模板引擎就知道该组件不仅仅是一个模板，还包含一个视图模型。我们还需要在`creation`组件的模板中获取`form`视图模型的引用：
- en: '`src/contacts/components/creation.html`'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`src/contacts/components/creation.html`'
- en: '[PRE10]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: By adding the `view-model.ref="form"` attribute on the `contact-form` custom
    element, a reference of the `form` view-model will be assigned to the `creation`
    view-model as a new `form` property.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在`contact-form`自定义元素上添加`view-model.ref="form"`属性，将`form`视图模型的引用分配给`creation`视图模型作为一个新的`form`属性。
- en: 'We can now use this `form` property to call the `emphasizeErrors` method when
    the validation fails:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以使用这个`form`属性在验证失败时调用`emphasizeErrors`方法：
- en: '`src/contacts/components/creation.js`'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`src/contacts/components/creation.js`'
- en: '[PRE11]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: At this point, if you run the application, click the `New` button, type gibberish
    in the **Birthday** field, and click **Save**, the validation error message should
    appear and blink twice. It should blink again every time you click the **Save**
    button.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 至此，如果您运行应用程序，点击`New`按钮，在**Birthday**字段中输入胡言乱语，然后点击**Save**，验证错误信息应该出现并闪烁两次。每次点击**Save**按钮时，它应该再次闪烁。
- en: Of course, the `edition` component should also be modified the same way. I'll
    leave it as an exercise to the reader. This chapter's sample application can be
    used as a reference.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，`edition`组件也应该以同样的方式进行修改。我将留给读者作为练习。本章节的示例应用程序可以作为参考。
- en: Animating route transitions
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动画路由转换
- en: 'Another area that could benefit from an animated transition is the router.
    Let''s add a simple fade-in/fade-out animation to the route transitions:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个可能从动画转换中受益的区域是路由器。让我们给路由转换添加一个简单的淡入/淡出动画：
- en: '`src/app.css`'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`src/app.css`'
- en: '[PRE12]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Here, we create CSS rules that will make `section` elements fade in upon entering
    and fade out upon leaving.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们创建CSS规则，使`section`元素在进入时淡入，在离开时淡出。
- en: Next, we simply need to add the `au-animate` class to the `section` element
    of each route component.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们只需向每个路由组件的`section`元素添加`au-animate`类。
- en: If you run the application at this point, route changes should smoothly transition
    using the new animation.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在此时运行应用程序，路由更改应该使用新动画平滑过渡。
- en: Swap order
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 交换顺序
- en: When performing a route transition, the `router-view` element swaps the old
    view with the new one. By default, this swapping process first animates the removal
    of the old view, then the insertion of the new one. If none of the views are animated,
    the process is immediate. If both views are animated, the animations run one after
    the other.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 当执行路由转换时，`router-view`元素用新视图替换旧视图。默认情况下，这个交换过程首先动画化旧视图的移除，然后是新视图的插入。如果没有视图动画，过程是立即的。如果两个视图都有动画，动画一个接一个地运行。
- en: 'The way the `router-view` handles view swapping is called a swap strategy,
    and can be one of the following:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`router-view`处理视图交换的方式称为交换策略，可以是以下之一：'
- en: '`before`: The new view is added first, then the old view is removed. If the
    new view is animated, the process waits for its `enter` animation to complete
    before animating the removal of the old view.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`before`：首先添加新视图，然后移除旧视图。如果新视图有动画，则等待其`enter`动画完成后再动画化旧视图的移除。'
- en: '`with`: The new view is added and the old view is removed simultaneously. Both
    animations run in parallel.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`with`：新视图添加，旧视图移除同时进行。两个动画并行运行。'
- en: '`after`: The default swap strategy. The old view is removed, then the new view
    is added. If the old view is animated, the new view''s insertion is animated only
    once the old view''s removal animation is completed.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`after`：默认的交换策略。先移除旧视图，然后添加新视图。如果旧视图有动画，新视图的插入仅在旧视图的移除动画完成后进行一次动画化。'
- en: 'Our fade-in/fade-out transition works fine because it follows the default swap
    strategy: the old view is first animated out, then the new view is animated in.
    However, some animations may need a different swap strategy.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的淡入/淡出转换之所以正常工作，是因为它遵循了默认的交换策略：首先将旧视图动画化移出，然后将新视图动画化进入。然而，某些动画可能需要不同的交换策略。
- en: For example, if the effect you want to implement when navigating from one route
    to another is to see the new view slide in from the right while the old view slides
    out to the left, you'll want the animation of the old view's removal and the animation
    of the new view's addition to run simultaneously, so you'll want to use the `with`
    swap strategy.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你在从一个路由跳转到另一个路由时希望看到新视图从右侧滑入，而旧视图向左滑出，那么你需要旧视图的移除动画和新视图的添加动画同时运行，因此你需要使用`with`交换策略。
- en: 'As such, a `router-view` element''s swap strategy can be changed by setting
    its `swap-order` attribute to the name of the proper strategy:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`router-view`元素的交换策略可以通过将其`swap-order`属性设置为适当策略的名称来更改：
- en: '[PRE13]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Summary
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Animating an Aurelia application is pretty easy. The CSS-based implementation
    allows you to easily and quickly add animations to an existing application.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 为Aurelia应用程序添加动画相当简单。基于CSS的实现允许您轻松快速地为现有应用程序添加动画。
- en: When the need for more complex animations arises, an adapter plugin over your
    favorite animation library can be easily written if it doesn't exist. At the time
    of writing, the official Aurelia libraries comprise `aurelia-velocity`, an adapter
    plugin for the popular `velocity.js` library. I'm sure that the community will
    eventually come up with adapters for other animation solutions, so I strongly
    suggest you keep an eye on it.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 当需要更复杂的动画时，如果它不存在，可以很容易地编写您最喜欢的动画库的适配器插件。在撰写本文时，官方Aurelia库包括`aurelia-velocity`，它是流行的`velocity.js`库的适配器插件。我确信社区最终会提出其他动画解决方案的适配器，所以我强烈建议您密切关注它。
