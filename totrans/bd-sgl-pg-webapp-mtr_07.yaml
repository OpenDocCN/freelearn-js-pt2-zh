- en: Chapter 7. Users and Permissions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 7 章。用户和权限
- en: Having worked through the previous chapters, we should have a working blog by
    now. We can click on all links and posts, and even lazy load more posts.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 通过对前一章的内容进行操作，我们应该现在有一个运行中的博客了。我们可以点击所有的链接和帖子，甚至可以延迟加载更多的帖子。
- en: In this chapter, we will add our backend login and create the admin user. We
    will also create the template to edit posts and make an edit button visible to
    the admin user so that they can edit and add new content.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将添加我们的后端登录并创建管理员用户。我们还将创建一个编辑帖子的模板，并使管理员用户能够看到编辑按钮，以便他们可以编辑和添加新内容。
- en: 'In this chapter, we will learn the following concepts:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习以下概念：
- en: Meteor's `accounts` package
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Meteor 的 `accounts` 包
- en: Creating users and a log in
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建用户和登录
- en: How to restrict certain routes to only logged-in users
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何限制某些路由仅供已登录用户使用
- en: Note
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can delete all the session examples from the previous chapter, as we won't
    need them to progress with our app. Delete the session's code from `my-meteor-blog/main.js`,
    `my-meteor-blog/client/templates/home.js`, and `my-meteor-blog/client/templates/home.html`,
    or download a fresh copy of the previous chapter's code.
  id: totrans-8
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以删除前一章中的所有会话示例，因为我们在推进应用时不需要它们。从 `my-meteor-blog/main.js`、`my-meteor-blog/client/templates/home.js`
    和 `my-meteor-blog/client/templates/home.html` 中删除会话的代码，或者下载前一章代码的新副本。
- en: If you've jumped right into the chapter and want to follow the examples, download
    the previous chapter's code examples from either the book's web page at [https://www.packtpub.com/books/content/support/17713](https://www.packtpub.com/books/content/support/17713)
    or from the GitHub repository at [https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter6](https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter6).
  id: totrans-9
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你直接跳到这一章并且想跟随示例，可以从以下网址下载前一章的代码示例：[https://www.packtpub.com/books/content/support/17713](https://www.packtpub.com/books/content/support/17713)
    或从 GitHub 仓库 [https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter6](https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter6)
    下载。
- en: These code examples will also contain all the style files, so we don't have
    to worry about adding CSS code along the way.
  id: totrans-10
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些代码示例还将包含所有的样式文件，所以我们不需要在过程中添加 CSS 代码。
- en: Meteor's accounts packages
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Meteor 的 accounts 包
- en: 'Meteor makes it very easy to add authentication to our web app using its `accounts`
    package. The `accounts` package is a complete login solution tied to Meteor''s
    core. Created users can be identified by ID in many of Meteor''s server-side functions,
    for example, in a publication:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Meteor 使得通过其 `accounts` 包向我们的网络应用添加身份验证变得非常容易。`accounts` 包是一个与 Meteor 的核心紧密相连的完整的登录解决方案。创建的用户可以在许多
    Meteor 的服务器端函数中通过 ID 进行识别，例如，在一个出版物中：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Additionally, we can add support for login via Facebook, GitHub, Google, Twitter,
    Meetup, and Weibo by simply adding one or more of the `accounts-*` core packages.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还可以通过简单地添加一个或多个 `accounts-*` 核心包来添加通过 Facebook、GitHub、Google、Twitter、Meetup
    和 Weibo 登录的支持。
- en: Meteor also comes with a simple login interface, an extra template that can
    be added using the `{{> loginButtons}}` helper.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Meteor 还提供了一个简单的登录界面，一个可以通过使用 `{{> loginButtons}}` 助手添加的额外模板。
- en: All registered user profiles will be stored in a collection called `Users`,
    which Meteor creates for us. All the processes in authentication and communication
    use the **Secure Remote Password** (**SRP**) protocol and most external services
    use OAuth.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 所有注册的用户资料都将存储在一个名为 `Users` 的集合中，Meteor 为我们创建了这个集合。所有的认证过程和通信过程都使用 **Secure Remote
    Password** (**SRP**) 协议，大多数外部服务都使用 OAuth。
- en: For our blog, we will simply create one admin user, which when logged in will
    be able to create and edit posts.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的博客，我们只需创建一个管理员用户，当登录后，他们可以创建和编辑帖子。
- en: Note
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If we want to use one of the third-party services to log in, we can work through
    this chapter first, and then add one of the previously mentioned packages.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要使用第三方服务之一进行登录，我们可以先完成本章的内容，然后添加前面提到的其中一个包。
- en: After we add the additional packages, we can open up the **Sign in** form. We
    will see a button where we can configure the third-party services for use with
    our app.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 添加额外包后，我们可以打开 **登录** 表单。我们将看到一个按钮，我们可以配置第三方服务以供我们的应用使用。
- en: Adding the accounts packages
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加 accounts 包
- en: 'To start using a login system, we need to add the `accounts-ui` and `accounts-password`
    packages to our app, as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用登录系统，我们需要将 `accounts-ui` 和 `accounts-password` 包添加到我们的应用中，如下所示：
- en: 'To do so, we open up the terminal, navigate to our `my-meteor-blog` folder,
    and type the following command:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了做到这一点，我们打开终端，导航到我们的`my-meteor-blog`文件夹，并输入以下命令：
- en: '[PRE1]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: After we have successfully added the packages, we can run our app again using
    the `meteor` command.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们成功添加包之后，我们可以使用`meteor`命令再次运行我们的应用程序。
- en: As we want to prevent the creation of additional user accounts by our visitors,
    we need to disallow this functionality in our `accounts` package, `config`. First,
    we need to open up our `my-meteor-blog/main.js` file, which we created in the
    previous chapter, and remove all of the code, as we won't need the session examples
    anymore.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为我们想要阻止我们的访客创建额外的用户账户，所以我们需要在我们的`accounts`包中禁止这个功能。首先，我们需要打开我们在前一章节中创建的`my-meteor-blog/main.js`文件，并删除所有代码，因为我们不再需要会话示例。
- en: 'Then add the following lines of code to this file, but make sure you don''t
    use `if(Meteor.isClient)`, as we want to execute the code on both the client and
    the server this time:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后在这个文件中添加以下代码行，但一定要确保不要使用`if(Meteor.isClient)`，因为这次我们希望在客户端和服务器上都执行代码：
- en: '[PRE2]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This will forbid any call of `Accounts.createUser()` on the client and the `accounts-ui`
    package will not show the **Register** button to our visitors.
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将禁止在客户端调用`Accounts.createUser()`，并且`accounts-ui`包将不会向我们的访客显示**注册**按钮。
- en: Note
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This option doesn't seem to work for third-party services. So, when using third-party
    services, everybody can sign up and edit posts. To prevent this, we will need
    to create "deny" rules for user creation on the server side, which is beyond the
    scope of this chapter.
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个选项似乎对第三方服务不起作用。所以，当使用第三方服务时，每个人都可以注册并编辑文章。为了防止这种情况，我们将在服务器端创建“拒绝”规则以禁止用户创建，这超出了本章节的范围。
- en: Adding admin functionality to our templates
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为我们的模板添加管理功能
- en: The best way to allow editing of our post is to add an **Edit post** link to
    our post's page, which can only be seen if we are logged in. This way, we save
    rebuilding a similar infrastructure for an additional backend, and make it easy
    to use as there is no strong separation between frontend and backend.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 允许编辑我们文章的最佳方式是在我们文章的页面上添加一个**编辑文章**链接，这个链接只有在登录后才能看到。这样，我们节省了为另一个后端重建类似基础设施的工作，并且使用起来很方便，因为前端和后端之间没有严格的分离。
- en: First, we will add a **Create new post** link to our `home` template, then add
    the **Edit post** link to the post's `pages` template, and finally add the login
    buttons and form to the main menu.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将向我们的`home`模板添加一个**创建新文章**链接，然后将**编辑文章**链接添加到文章的`pages`模板中，最后在主菜单中添加登录按钮和表单。
- en: Adding a link for new posts
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加新文章的链接
- en: 'Let''s begin by adding a **Create new post** link. Open the `home` template
    at `my-meteor-blog/clients/templates/home.html` and add the following lines of
    code just above the `{{#each postsList}}` block helper:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先添加一个**创建新文章**链接。打开`my-meteor-blog/clients/templates/home.html`中的`home`模板，并在`{{#each
    postsList}}`块助手之上添加以下代码行：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `{{currentUser}}` helper comes with the `accounts-base` package, which was
    installed when we installed our `accounts` packages. It will return the current
    logged-in user, or return null if no user is logged in. Using it inside an `{{#if}}`
    block helper allows us to show content only to logged-in users.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`{{currentUser}}`助手随`accounts-base`包一起提供，当我们安装我们的`accounts`包时安装了它。它会返回当前登录的用户，如果没有用户登录，则返回null。将其用于`{{#if}}`块助手内部允许我们只向登录用户显示内容。'
- en: Adding the link to edit posts
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加编辑文章的链接
- en: 'To edit posts, we simply add an **Edit post** link to our `post` template.
    Open up `post.html` from the same folder and add `{{#if currentUser}}..{{/if}}`
    after `{{author}}`, as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 要编辑文章，我们只需在我们的`post`模板中添加一个**编辑文章**链接。打开同一文件夹中的`post.html`，并在`{{author}}`之后添加`{{#if
    currentUser}}..{{/if}}`，如下所示：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Adding the login form
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加登录表单
- en: Now that we have both links to add and edit posts, let's add the login form.
    We can create our own form, but Meteor already comes with a simple login form,
    which we can style to fit our design.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了添加和编辑文章的链接，让我们添加登录表单。我们可以创建自己的表单，但Meteor已经包含了一个简单的登录表单，我们可以将其样式修改以符合我们的设计。
- en: 'Since we added the `accounts-ui` package previously, Meteor provides us with
    the `{{> loginButtons}}` template helper, which works as a drop-in-place template.
    To add this, we will open our `layout.html` template and add the following helper
    inside our menu''s `<ul></ul>` tags, as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们之前添加了`accounts-ui`包，Meteor为我们提供了`{{> loginButtons}}`模板助手，它作为一个即插即用的模板工作。为了添加这个功能，我们将打开我们的`layout.html`模板，并在菜单的`<ul></ul>`标签内添加以下助手，如下所示：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Creating the template to edit posts
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建编辑文章的模板
- en: 'Now we are only missing the template to edit the posts. To add this, we will
    create a file called `editPost.html` inside our `my-meteor-blog/client/templates`
    folder, and fill it with the following lines of code:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们只缺少编辑帖子的模板。为了添加这个模板，我们将在`my-meteor-blog/client/templates`文件夹中创建一个名为`editPost.html`的文件，并填入以下代码行：
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As we can see, we have added the helpers for `{{title}}`, `{{description}}`,
    and `{{text}}`, which will come later from the post's data. This simple template,
    with its three text fields, will allow us to edit and create new posts later.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，我们添加了`{{title}}`、`{{description}}`和`{{text}}`帮助器，这些将从帖子数据中稍后获取。这个简单的模板，带有它的三个文本字段，将允许我们以后编辑和创建新帖子。
- en: If we now check out our browser, we will notice that we can't see any of the
    changes we made so far, apart from the **Sign in** link in the corner of our website.
    To be able to log in, we first need to add our admin user.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在查看浏览器，我们会注意到我们看不到到目前为止所做的任何更改，除了网站角落里的**登录**链接。为了能够登录，我们首先需要添加我们的管理员用户。
- en: Creating the admin user
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建管理员用户
- en: Since we deactivated the creation of users from the client, as a security measure
    we will create the admin user on the server in the same way we created our example
    posts.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已禁用客户端创建用户，作为一种安全措施，我们将在服务器上以创建示例帖子的方式创建管理员用户。
- en: 'Open the `my-meteor-blog/server/main.js` file and add the following lines of
    code somewhere inside `Meteor.startup(function(){...})`:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`my-meteor-blog/server/main.js`文件，在`Meteor.startup(function(){...})`内的某个位置添加以下代码行：
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: If we now go to our browser, we should be able to log in using the user we just
    created, and we immediately see that all the edit links appear.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在打开浏览器，我们应该能够使用我们刚才创建的用户登录，我们会立即看到所有编辑链接出现。
- en: However, when we click any of the edit links, we will see the `notFound` template
    appearing because we didn't create any of our admin routes yet.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，当我们点击任何编辑链接时，我们会看到`notFound`模板出现，因为我们还没有创建任何管理员路由。
- en: Adding permissions
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加权限
- en: Meteor's `account` package doesn't come by default with configurable permissions
    for users.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Meteor的`account`包默认并不带有对用户可配置权限的支持。
- en: To add permission control, we can add a third-party package such as the `deepwell:authorization`
    package, which can be found on Atmosphere at [http://atmospherejs.com/deepwell/authorization](http://atmospherejs.com/deepwell/authorization)
    and which comes with a complex role model.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 为了添加权限控制，我们可以添加第三方包，比如`deepwell:authorization`包，可以在Atmosphere上找到，网址为[http://atmospherejs.com/deepwell/authorization](http://atmospherejs.com/deepwell/authorization)，它带有复杂的角色模型。
- en: If we want to do it manually, we can add the simple `roles` properties to our
    user document when we create the user, and then check for these roles in our allow/deny
    roles when we create or update posts. We will learn about allow/deny rules in
    the next chapter.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想手动完成，我们可以在创建用户时向用户文档添加简单的`roles`属性，然后在创建或更新帖子时在允许/拒绝角色中检查这些角色。我们将在下一章学习允许/拒绝规则。
- en: 'If we create a user using the `Accounts.createUser()` function, we can''t add
    a custom property, so we need to update the user document after we have created
    the user, as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用`Accounts.createUser()`函数创建用户，我们就不能添加自定义属性，因此我们需要在创建用户后更新用户文档，如下所示：
- en: '[PRE8]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'By default, Meteor publishes the `username`, `emails`, and `profile` properties
    of the currently logged-in user. To add additional properties, such as our custom
    `roles` property, we need to add a publication, to access the `roles` property
    on the client as well, as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Meteor会发布当前登录用户`username`、`emails`和`profile`属性。要添加其他属性，比如我们的自定义`roles`属性，我们需要添加一个发布功能，以便在客户端访问`roles`属性，如下所示：
- en: 'Open the `my-meteor/blog/server/publictions.js` file and add the following
    publication:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`my-meteor/blog/server/publications.js`文件，添加以下发布功能：
- en: '[PRE9]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In the `my-meteor-blog/main.js` file, we add the subscription as follows:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`my-meteor-blog/main.js`文件中，我们像下面这样添加订阅：
- en: '[PRE10]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now that we have the `roles` property available on the client, we can change
    `{{#if currentUser}}..{{/if}}` in the `home` and `post` templates to `{{#if currentUser.roles.admin}}..{{/if}}`
    so that only admins can see the buttons.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在既然我们在客户端已经有了`roles`属性，我们可以把`home`和`post`模板中的`{{#if currentUser}}..{{/if}}`改为`{{#if
    currentUser.roles.admin}}..{{/if}}`，这样只有管理员才能看到按钮。
- en: A note on security
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 有关安全性的说明
- en: 'The user can only update their own `profile` property using the following command:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 用户只能使用以下命令更新自己的`profile`属性：
- en: '[PRE11]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If we want to update the `roles` property, we will fail. To see this in action,
    we can open up the browser''s console and type the following command:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要更新`roles`属性，我们将失败。为了看到这一点，我们可以打开浏览器的控制台并输入以下命令：
- en: '[PRE12]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This will give us an error stating: **update failed: Access denied**, as shown
    in the following screenshot:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给我们一个错误，指出：**更新失败：拒绝访问**，如下面的屏幕截图所示：
- en: '![A note on security](img/00021.jpeg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![关于安全性的说明](img/00021.jpeg)'
- en: Note
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If we want to allow users to edit other properties such as their `roles` property,
    we need to add a `Meteor.users.allow()` rule for that.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要允许用户编辑其他属性，例如他们的`roles`属性，我们需要为此添加一个`Meteor.users.allow()`规则。
- en: Creating routes for the admin
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为管理员创建路由
- en: Now that we have an admin user, we can add the routes, which lead to the `editPost`
    template. Though in theory the `editPost` template is available to every client,
    it doesn't create any risk, as the allow and deny rules are the real security
    layer, which we will take a look at in the next chapter.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了一个管理员用户，我们可以添加那些指向`editPost`模板的路由。尽管从理论上讲`editPost`模板对每个客户端都是可用的，但它不会造成任何风险，因为允许和拒绝规则才是真正的安全层，我们将在下一章中查看这些规则。
- en: 'To add the route to create posts, let''s open up our `my-meteor-blog/routes.js`
    file and add the following route to the `Router.map()` function:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加创建文章的路由，让我们打开我们的`my-meteor-blog/routes.js`文件，并向`Router.map()`函数添加以下路由：
- en: '[PRE13]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This will simply show the `editPost` template as soon as we click on the **Create
    new post** link on our home page, as shown in the following screenshot:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在我们点击主页上的**创建新文章**链接后立即显示`editPost`模板，如下面的屏幕截图所示：
- en: '![Creating routes for the admin](img/00022.jpeg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![为管理员创建路由](img/00022.jpeg)'
- en: We see that the form is empty because we did not set any data context to the
    template, and therefore the `{{title}}`, `{{description}}`, and `{{text}}` placeholders
    in the template displayed nothing.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们发现表单是空的，因为我们没有为模板设置任何数据上下文，因此模板中显示的`{{title}}`、`{{description}}`和`{{text}}`占位符都是空的。
- en: 'To make the edit post route work, we need to add subscriptions similar to those
    we did for the `Post` route itself. To keep things **DRY** (which means **Don''t
    Repeat Yourself**), we can create a custom controller, which both routes will
    use, as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使编辑文章的路由工作，我们需要添加类似于为`Post`路由本身所做的订阅。为了保持事物的**DRY**（这意味着**不要重复自己**），我们可以创建一个自定义控制器，这个控制器将被两个路由使用，如下所示：
- en: 'Add the following lines of code after the `Router.configure(...);` call:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Router.configure(...);`调用之后添加以下代码行：
- en: '[PRE14]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now we can simply edit the `Post` route, remove the `waitOn()` and `data()`
    functions, and add `PostController` instead:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以简单地编辑`Post`路由，删除`waitOn()`和`data()`函数，并添加`PostController`：
- en: '[PRE15]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now we can also add the `Edit Post` route by just changing the `path` and the
    `template` properties:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们还可以通过简单地更改`path`和`template`属性来添加`编辑文章`路由：
- en: '[PRE16]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: That's it! When we now go to our browser, we will be able to access any post
    and click on the **Edit** button, and we will be directed to `editPost` template.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这就完成了！现在当我们打开浏览器时，我们将能够访问任何文章并点击**编辑**按钮，然后我们将被引导到`editPost`模板。
- en: If you are wondering why the form is filled in with the post data, take a look
    at `PostController`, which we just created. Here, we return the post document
    inside the `data()` function, setting the data context of the template to the
    post's data.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想知道为什么表单会填充文章数据，请查看我们刚刚创建的`PostController`。在这里，我们在`data()`函数中返回文章文档，将模板的数据上下文设置为文章的数据。
- en: Now that we have these routes in place, we should be done. Shouldn't we?
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置了这些路由，我们应该完成了。难道不是吗？
- en: Not yet, because everybody who knows the `/create-post` and `/edit-post/my-title`
    routes can simply see the `editPost` template, even if he or she is not an admin.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 还不是，因为任何知道`/create-post`和`/edit-post/my-title`路由的人都可以简单地看到`editPost`模板，即使他或她不是管理员。
- en: Preventing visitors from seeing the admin routes
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 防止访客看到管理路由
- en: '[PRE17]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Here, first we create the `requiresLogin()` function, which will be executed
    before the `Create Post` and `Edit Post` routes because we pass them as the second
    arguments to the `Router.onBeforeAction()` function.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，首先我们创建了`requiresLogin()`函数，它将在`创建文章`和`编辑文章`路由之前执行，因为我们将其作为第二个参数传递给`Router.onBeforeAction()`函数。
- en: Inside the `requiresLogin()`, we check whether the user is logged in, which
    will return the user document when calling `Meteor.user()`, and if they have the
    role `admin`. If not, we simply render the `notFound` template and don't continue
    to the route. Otherwise, we run `this.next()`, which will continue to render the
    current route.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在`requiresLogin()`内部，我们检查用户是否已登录，当调用`Meteor.user()`时，这将返回用户文档，并且检查他们是否有`admin`角色。如果没有，我们简单地渲染`notFound`模板，并不再继续路由。否则，我们运行`this.next()`，这将继续渲染当前路由。
- en: That's it! If we now log out and navigate to the `/create-post` route, we will
    see the `notfound` template.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！如果我们现在登出并导航到`/create-post`路由，我们将看到`notfound`模板。
- en: If we log in, the template will switch and immediately show the `editPost` template.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们登录，模板将切换并立即显示`editPost`模板。
- en: This happens because the `requiresLogin()` function becomes reactive as soon
    as we pass it to `Router.onBeforeAction()`, and since `Meteor.user()` is a reactive
    object, any change to the user's status will rerun this function.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为一旦我们将`requiresLogin()`函数传递给`Router.onBeforeAction()`，它就会变得具有反应性，而`Meteor.user()`是一个反应式对象，所以用户状态的任何变化都会重新运行这个函数。
- en: Now that we have created the admin user and the necessary templates, we can
    move on to actually creating and editing the posts.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了管理员用户和所需的模板，我们可以继续实际创建和编辑帖子。
- en: Summary
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned how to create and log in users, how we can show
    content and templates only to logged-in users, and how routes can be altered depending
    on the login status.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何创建和登录用户，如何仅向已登录用户显示内容和模板，以及如何根据登录状态更改路由。
- en: 'To learn more, take a look at the following links:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多，请查看以下链接：
- en: '[https://www.meteor.com/accounts](https://www.meteor.com/accounts)'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[https://www.meteor.com/accounts](https://www.meteor.com/accounts)
- en: '[https://docs.meteor.com/#/full/accounts_api](https://docs.meteor.com/#/full/accounts_api)'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[https://docs.meteor.com/#/full/accounts_api](https://docs.meteor.com/#/full/accounts_api)
- en: '[https://docs.meteor.com/#/full/meteor_users](https://docs.meteor.com/#/full/meteor_users)'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[https://docs.meteor.com/#/full/meteor_users](https://docs.meteor.com/#/full/meteor_users)
- en: '[http://en.wikipedia.org/wiki/Secure_Remote_Password_protocol](http://en.wikipedia.org/wiki/Secure_Remote_Password_protocol)'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://en.wikipedia.org/wiki/Secure_Remote_Password_protocol](http://en.wikipedia.org/wiki/Secure_Remote_Password_protocol)'
- en: '[https://github.com/EventedMind/iron-router/blob/devel/Guide.md#using-hooks](https://github.com/EventedMind/iron-router/blob/devel/Guide.md#using-hooks)'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/EventedMind/iron-router/blob/devel/Guide.md#using-hooks](https://github.com/EventedMind/iron-router/blob/devel/Guide.md#using-hooks)'
- en: You can find this chapter's code examples at [https://www.packtpub.com/books/content/support/17713](https://www.packtpub.com/books/content/support/17713)
    or on GitHub at [https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter7](https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter7).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://www.packtpub.com/books/content/support/17713](https://www.packtpub.com/books/content/support/17713)或GitHub上的[https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter7](https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter7)找到本章的代码示例。
- en: In the next chapter, we will learn how we can create and update posts and how
    to control updates to the database from the client side.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何创建和更新帖子以及如何从客户端控制数据库的更新。
