["```js\nclass Person {\n  private personId: string = '';\n  private personName: string = '';\n  private dateOfBirth: Date;\n  constructor() {}\n  getPersonName(): string {\n  return this.personName;\n  }\n  setPersonName(value): void {\n  this.personName = value;\n}}\n```", "```js\nvar Person = (function () {\nfunction Person() {\n  this.personId = '';\n  this.personName = '';\n}\nPerson.prototype.getPersonName = function () {\n  return this.personName;\n};\nPerson.prototype.setPersonName = function (value) {\n  this.personName = value;\n};\n  return Person;\n})();\n```", "```js\nvar name: string\nname =2;//give error\n```", "```js\nclass Person {\n  constructor(name: string) {\n  }\n}\nclass Employee extends Person{\n  constructor() {\n  super(2); //error \n  }\n}\n```", "```js\nprivate sNo = 1;\nprivate text = 'Hello world';\n```", "```js\nprivate sNo: number = 1;\nprivate text: string = 'Hello world';\n```", "```js\nvar name;\n```", "```js\nvar name: string;\n```", "```js\nvar name: string = \"Hello World\";    \n```", "```js\nlet decimal: number = 2;\nlet hex: number = 0x001;\nlet binary: number = 0b1010;\nlet octal: number = 0o744;\n```", "```js\nlet x: string = 'Hello';\nlet y: string = \"Hello\";\n```", "```js\nlet countries = ['US', 'UK', 'UAE'];\nlet countries<string> = ['US', 'UK', 'UAE'];\n```", "```js\nlet val: [string, number, Date];\nval = ['Hello World', 10, new Date()];\nval[0];//print Hello World\n```", "```js\nenum Status {InProcess, Active, Ready, Success, Error}\nlet s: Status = Status.Active;\n//specify values explicitly\nenum Status {InProcess=1, Active=2, Ready=3, Success=4, Error=5}\n```", "```js\nlet x: any;\nx=['Hello', 1, 2]; //tuple;\nx=1; //number\nx='Hello World'; //string\n```", "```js\ninterface IShape {\n  shapeName: string;\n  draw();\n}\nclass TodoService implements IShape  {\n  constructor(private http: Http) {\n  this.shapeName = \"Square\";\n  }\n\n  shapeName: string;\n\n  draw() {\n  alert(\"this is \" + this.shapeName);\n  }\n}\n```", "```js\ninterface IPerson {\n  id: number;\n  firstName: string;\n  lastName: string;\n  dateOfBirth: Date;\n}\n\ninterface IEmployee extends IPerson{\n  empCode: string;\n  designation: string;\n}\n\nclass Person implements IPerson {\n  id: number;\n  firstName: string;\n  lastName: string;\n  dateOfBirth: Date;\n}\n\nclass Employee extends Person implements IEmployee {\n  empCode: string;\n  designation: string;\n}\n```", "```js\nIPerson and IEmployee. IPerson contains common properties such as id, firstName, lastName, and dateOfBirth, which can be used in all derived interfaces, such as IEmployee or any other.\n```", "```js\nclass Process<T>{\n  value: T;\n  getTypeInfo(){\n  if (typeof this.value == \"string\")\n    console.log(\"Type is a string\");\n  else if (typeof this.value == \"number\")\n    console.log(\"Type is a number\");\n  else alert(\"type is unknown\");\n\n  }\n}\n\nlet pString = new Process<string>();\npString.getTypeInfo(); //print Type is a string\nlet pNumber = new Process<number>();\npNumber.getTypeInfo(); //print Type is a number\n```", "```js\nfunction concat(x: string, y: string): string {\n  return x +\" \"+ y; \n}\n```", "```js\nfunction concat(x: string, y: string, z?: string): string {\n  return x + \" \" + y + \" \" + z; \n}\n```", "```js\nfunction process<T>(x: T, y: T): string{\n  if (typeof x == \"string\")\n  return x + \" \" + y;\n  else if (typeof x == \"number\")\n  return \"Sum is: \"+ x + y ;\n  else \n  return \"Type in unknown\";\n}\n```", "```js\ncountries = ['USA', 'UK', 'UAE'];  \n  //this loop will display keys 0, 1, 2\nfor (let index in this.countries) {\n  console.log(index);\n}\n//this loop will display values USA, UK, UAE\nfor (let index of this.countries) {\n  console.log(index);\n}\n```", "```js\n//BaseManager.ts\nexport class BaseManager{\n}\n```", "```js\n//ServiceManager.ts\nexport class ServiceManager extends BaseManager{\n}\n```", "```js\n//Main.ts\nimport {ServiceManager} from \"./ServiceManager\"\n```", "```js\n//Main.ts\nimport {ServiceManager as serviceMgr} from \"./ServiceManager\"\n```", "```js\n//PersonManager.ts\nnamespace BusinessManagers{\n  export class PersonManager{}\n}\n//SecurityManager.ts\nnamespace BusinessManagers{\n  export class SecurityManager(){\n}\n}\n//main.ts\n/// <reference path=\"personmanager.ts\" />\n  ///  <reference path=\"SecurityManager.ts\" />\npersonObj = new BusinessManagers.PersonManager();\nsecurityObj =new BusinessManagers.SecurityManager();\n```", "```js\nnamespace BusinessManagers {\n  export class PersonManager {\n\n  }\n}\n\nimport mgr = BusinessManagers;\nlet personObj = new mgr.PersonManager();\n\nTo LC: Apply code to:\n\"namespace BusinessManagers {\n  export class PersonManager {\n\n  }\n}\n\nimport mgr = BusinessManagers;\nlet personObj = new mgr.PersonManager();\n```", "```js\n//Loading module through Import statement\nImport {AppComponent} from 'path of my component'\nbootstrap(AppComponent, [Providers]);\n```", "```js\nimport {bootstrap} from 'angular2/platform/browser';\n```", "```js\n//app.component.ts\nimport { Component, View} from 'angular2/core';\n  import {bootstrap} from 'angular2/platform/browser';\n  @Component({\n  selector: \"my-app\",\n  template: `<p>This is a first component</p>`,\n  })  \n  class AppComponent  {\n  }\n  bootstrap(AppComponent);\n```", "```js\n//math.ts\nimport {Component} from 'angular2/core';\n@Component({\n\n})\nexport class MathService {\n  constructor() {\n  }\n  public sum(a: number, b: number): number {\n  return a + b;\n  }\n  public subtract(a: number, b: number): number {\n  return a - b;\n  }\n  public divide(a: number, b: number): number {\n  return a / b;\n  }\n  public multiply(a: number, b: number): number {\n  return a * b;\n  }\n}\n```", "```js\n@Component({\n  providers: string[],\n  selector: string,\n  inputs: string[],\n  outputs: string[],\n  properties: string[],\n  events: string[],\n  host: { [key: string]: string },\n  exportAs: string,\n  moduleId: string,\n  viewProviders: any[],\n  queries: { [key: string]: any },\n  changeDetection: ChangeDetectionStrategy,\n  templateUrl: string,\n  template: string,\n  styleUrls: string[],\n  styles: string[],\n  directives: Array < Type | any[] >,\n  pipes: Array < Type | any[] >,\n  encapsulation: ViewEncapsulation\n})\n```", "```js\nimport { Component, View } from 'angular2/core';\nimport {bootstrap} from 'angular2/platform/browser';\n@Component({\n  selector: \"my-app\",\n  template: \"<p> {{message}}</p><button (click)='logMessage()'>Log Message</button>\"\n})\nclass AppComponent {\n  logMessage() {\n    this.message = \"Hello World\";\n  }\n  message: string = \"\";\n}\nbootstrap(AppComponent);\n```", "```js\n<html>\n<body>\n  <my-app></my-app>\n</body>\n</html>\n```", "```js\n<html>\n<body>\n  <p>Hello World</p>\n  <button (click)='logMessage()'>Log Message</button>\n</body>\n</html>\n```", "```js\nchild.component.ts and contains the selector as child; the template displays the Boolean values of the logToConsole and showAlert attributes specified in the child tag. The inputs contain the list of string variables that will be defined as the child tag attributes:\n```", "```js\n//child.component.ts\nimport { Component} from 'angular2/core';\n@Component({\n  selector: 'child',\n  template: `<div> Log to Console: {{logToConsole}}, Show Alert: {{showAlert}} <button (click)=\"logMessage()\" >Log</button> </div>`,\n  inputs: ['logToConsole', 'showAlert'],\n})\n```", "```js\nexport class ChildComponent {\n  public logToConsole: boolean;\n  public showAlert: boolean;\n\n  logMessage(message: string) {\n    if (this.logToConsole) {\n      console.log(\"Console logging is enabled\");\n    }\n    if (this.showAlert) {\n      alert(\"Showing alert message is enabled\");\n    }\n\n  }\n}\n```", "```js\n//app.component.ts\nimport { Component, View } from 'angular2/core';\nimport {bootstrap} from 'angular2/platform/browser';\nimport {ChildComponent} from './child.component';\n\n@Component({\n  selector: \"my-app\",\n  template: `<child [logToConsole]=true [showAlert]=true></child>`,\n  directives: [ChildComponent]\n})\nexport class AppComponent {\n}\nbootstrap(AppComponent);\n```", "```js\nChildComponent:\n```", "```js\n  //child.component.ts\nimport { Component, EventEmitter, Output} from 'angular2/core';\n@Component({\n  selector: 'child',\n  template: `<div> Log to Console: {{logToConsole}}, Show Alert: {{showAlert}}  <button (click)=\"logMessage()\" >Log</button> </div>`,\n  inputs: ['logToConsole', 'showAlert']\n})\nexport class ChildComponent {\n  public logToConsole: boolean;\n  public showAlert: boolean;\n  @Output() clickLogButton = new EventEmitter();\n\n  logMessage(message: string) {\n    this.clickLogButton.next(\"From child\");\n  }\n}\n```", "```js\n(clickLogButton)=\"logMessage($event)\"\n\nHere is the code snippet for AppComponent:\n\n  //app.component.ts \nimport { Component, View } from 'angular2/core';\nimport {bootstrap} from 'angular2/platform/browser';\nimport {ChildComponent} from './child.component';\n\n@Component({\n  selector: \"my-app\",\n  template: `<child [logToConsole]=true [showAlert]=true (clickLogButton)=\"logMessage($event)\" ></child>`,\n  directives: [ChildComponent]\n})\nexport class AppComponent {\n\n  logMessage(value) {\n    alert(value);\n  }\n}\nbootstrap(AppComponent);\n```", "```js\n//helloworld.component.ts\nimport {Component} from 'angular2/core';\n\n@Component({\n  selector: \"helloworld\",\n  template: \"<h1>Hello world</h1>\"\n})\n\nexport class HelloWorldComponent {\n\n}\n```", "```js\nimport { Component, View, provide, Inject } from 'angular2/core';\n  import {bootstrap} from 'angular2/platform/browser';\n  import {HelloWorldComponent} from './helloworld.component';\n\n  @Component({\n    selector: \"my-app\",\n    template: `<helloworld></helloworld>`,\n    directives: [, HelloWorldComponent],\n  })\n  export class AppComponent{\n\n  }\n  bootstrap(AppComponent);\n```", "```js\n<helloworld></helloworld>\n```", "```js\n  <div *ngIf=\"display\">\n    <table>\n      <thead>\n        <tr>\n          <th>\n            Country\n          </th>\n          <th>\n            Currency\n          </th>\n        </tr>\n      </thead>\n      <tbody *ngFor=\"#country of countries\">\n        <tr><td>{{country.CountryName}}</td><td>{{country.Currency}}</td></tr>\n      </tbody>\n    </table>\n  </div>\n```", "```js\n///<reference path=\"../../node_modules/angular2/typings/browser.d.ts\" />\nimport {Component} from 'angular2/core';\nimport {Http, Response} from 'angular2/http';\n\n@Component({\n  selector: 'app',\n  templateUrl: 'Countries'\n})\nexport class TodoAppComponent {\n  countries = [];\n  display: boolean = true;\n  //constructor\n  constructor(private http: Http) {\n  }\n\n  //Page Initialized Event Handler\n  ngOnInit() {\n    this.getCountries();\n  }\n  getCountries() {\n    this.http.get(\"http://localhost:5000/api/todo\").map((res: Response) => res.json())\n      .subscribe(data => {\n        this.countries = data;\n      },\n      err => console.log(err),\n      () => console.log(\"done\")\n      );\n  }\n\n}\n```", "```js\nimport { Directive, ElementRef, Input } from 'angular2/core';\n@Directive({ selector: '[myFont]' })\nexport class FontDirective {\n  constructor(el: ElementRef) {\n    el.nativeElement.style.fontStyle = 'italic';\n  }\n}\n```", "```js\nmyFont directive applied.\n```", "```js\n<p myFont>myFont is an Attribute directive</p>\n```", "```js\n//math.component.ts\nimport { Component } from 'angular2/core';\n@Component({})\n\nexport class MathComponent {\n\n  public sum(a: number, b: number) : number{\n    return a + b;\n  }\n  public divide(a: number, b: number): number {\n    return a / b;\n  }\n  public subtract(a: number, b: number): number {\n    return a - b;\n  }\n  public multiply(a: number, b: number): number {\n    return a * b;\n  }\n\n}\n```", "```js\n//app.component.ts\nimport { Component, View } from 'angular2/core';\nimport {bootstrap} from 'angular2/platform/browser';\nimport {MathComponent} from './servicemanager.component';\n  @Component({\n    selector: \"my-app\",\n    template: \"<button (click)=\"add()\" >Log</button>\",\n    providers: [MathComponent]\n  })  \n  export class AppComponent  {\n    obj: MathComponent;\n    constructor(mathComponent: MathComponent) {\n      this.obj = mathComponent;\n    }\n    public add() {\n      console.log(this.obj.sum(1, 2));\n    }\n  }\n  bootstrap(AppComponent);\n```", "```js\nproviders: [provide('Key', {useValue: 'Hello World'})]\n```", "```js\nproviders: [provide(MathComponent, {mathComponent: MathComponent })]\n```", "```js\n  //app.component.ts\nimport { Component, View, provide, Inject } from 'angular2/core';\n  import {bootstrap} from 'angular2/platform/browser';\n  import {MathComponent} from './servicemanager.component';\n  @Component({\n    selector: \"my-app\",\n    template: `button (click)=\"logMessage()\" >Log</button>`,\n    providers: [MathComponent, provide('SampleText', {useValue: 'Sample Value'})]\n  })\n  export class AppComponent{\n    obj: MathComponent;\n    Val: string;\n    constructor(mathComponent: MathComponent, @Inject('SampleText') value) {\n      this.obj = mathComponent;\n      this.Val = value;\n    }\n\n  public logMessage() {\n    alert(this.kVal);\n  }\n  }\n  bootstrap(AppComponent);\n```", "```js\nMathComponent in the providers array of the ChildComponent, and as it is defined in the ParentComponent, it is already injected by the Angular dependency injection module.\nAppComponent (parent):\n```", "```js\n  //app.component.ts\n  import { Component} from 'angular2/core';\n  import {bootstrap} from 'angular2/platform/browser';\n  import {MathComponent} from './servicemanager.component';\n  import {ChildComponent} from './child.component';\n  @Component({\n    selector: \"my-app\",\n    template: `<button (click)=\"callChildComponentMethod()\">Log</button>`,\n    providers: [MathComponent, ChildComponent]\n  })\n  export class AppComponent  {\n    childObj: ChildComponent;\n      constructor(childComponent: ChildComponent) {\n      this.childObj = childComponent;\n\n  }\n    public callChildComponentMethod() {\n      this.childObj.addNumbers(1, 2);   \n\n    }\n  }\n  bootstrap(AppComponent);\n```", "```js\nMathComponent, which contains some basic arithmetic operations:\n```", "```js\n//math.component.ts\nimport { Component } from 'angular2/core';\n@Component({})\nexport class MathComponent {\n\n  public sum(a: number, b: number) : number{\n    return a + b;\n  }\n  public divide(a: number, b: number): number {\n    return a / b;\n  }\n  public subtract(a: number, b: number): number {\n    return a - b;\n  }\n  public multiply(a: number, b: number): number {\n    return a * b;\n  }\n}\n```", "```js\n//child.component.ts\nimport {Component} from 'angular2/core';\nimport {MathComponent} from './servicemanager.component';\n@Component({\n  selector: 'child-app',\n  template: '<h1>Hello World</h1>'\n})\nexport class ChildComponent {\n  obj: MathComponent;\n  constructor(mathComponent: MathComponent) {\n    this.obj = mathComponent;\n  } \n  public addNumbers(a: number, b: number) {\n    alert(this.obj.sum(a, b));\n  }\n}\n```", "```js\n    @RouteConfig([\n      { path: '/page1', name: 'Page1', component: Page1Component, useAsDefault: true },\n      { path: '/page2', name: 'Page2', component: Page2Component }]\n    )\n    ```", "```js\n//app.component.ts\nimport {Component} from 'angular2/core';\nimport {RouteConfig, ROUTER_DIRECTIVES} from 'angular2/router';\nimport {Page1Component} from './page1.component';\nimport {Page2Component} from './page2.component';\n\n@Component({\n  selector: \"my-app\",\n  template: `{{name}}\n    <a [routerLink]=\"['Page2']\">Page 2</a>\n    <router-outlet></router-outlet>`,\n  directives: [ROUTER_DIRECTIVES],\n})\n@RouteConfig([\n  { path: '/', name: 'Page1', component: Page1Component, useAsDefault:true },\n  { path: '/page2', name: 'Page2', component: Page2Component }]\n)\nexport class AppComponent {\n}\n```", "```js\n//page1.component.ts\nimport {Component} from 'angular2/core';\n@Component({\n  template:'<h1>Page1 Content</h1>'\n})\nexport class Page1Component {\n}\n```", "```js\n//page2.component.ts\nimport {Component} from 'angular2/core';\n\n@Component({\n  template: '<h1>Page2 Content</h1>'\n})\n\nexport class Page2Component {\n}\n```", "```js\n    using System;\n    using System.Collections.Generic;\n    using System.Linq;\n    using System.Threading.Tasks;\n\n    namespace Common\n    {\n      public class TodoItem\n      {\n        public int Id { get; set; }\n        public string Title { get; set; }\n        public string Description { get; set; }\n        public DateTime DueDateTime { get; set; }\n        public int UserId { get; set; }\n      }\n    }\n    ```", "```js\n    \"dependencies\": {\n      \"Microsoft.NETCore.App\": {\n        \"version\": \"1.0.0-rc2-3002702\",\n        \"type\": \"platform\"\n      },\n      \"Microsoft.AspNetCore.Server.IISIntegration\": \"1.0.0-rc2-final\",\n      \"Microsoft.AspNetCore.Server.Kestrel\": \"1.0.0-rc2-final\",\n      \"Common\": \"1.0.0-*\"\n    }\n    ```", "```js\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0-rc2-final\"\n    ```", "```js\n    public void ConfigureServices(IServiceCollection services)\n      {\n        services.AddMvc();\n      }\n    ```", "```js\n    public void Configure(IApplicationBuilder app)\n      {\n        app.UseMvc();\n      }\n    ```", "```js\n      \"dependencies\": {\n      \"Microsoft.NETCore.App\": {\n        \"version\": \"1.0.0-rc2-3002702\",\n        \"type\": \"platform\"\n      },\n      \"Microsoft.AspNetCore.Server.IISIntegration\": \"1.0.0-rc2-final\",\n      \"Microsoft.AspNetCore.Server.Kestrel\": \"1.0.0-rc2-final\",\n      \"common\": \"1.0.0-*\",\n      \"Microsoft.AspNetCore.Mvc\": \"1.0.0-rc2-final\",\n      \"Microsoft.EntityFrameworkCore.SqlServer\": \"1.0.0-rc2-final\",\n      \"Microsoft.EntityFrameworkCore.Tools\": {\n        \"type\": \"build\",\n        \"version\": \"1.0.0-preview1-final\"\n      }\n    }\n    ```", "```js\n    {\n      \"Data\": {\n        \"DefaultConnection\": {\n          \"ConnectionString\": \"Data Source =.; Initial Catalog = tododatabase; Integrated Security = True;MultiSubnetFailover = False; \"\n        }\n      }\n    }\n    ```", "```js\n    \"Microsoft.Extensions.Configuration.Json\": \"1.0.0-rc2-final\",\n    \"Microsoft.Extensions.Options.ConfigurationExtensions\": \"1.0.0-rc2-final\",\n    ```", "```js\n    public Startup()\n      {\n        // Set up configuration sources.\n        var builder = new ConfigurationBuilder()\n          .AddJsonFile(\"appsettings.json\")\n        Configuration = builder.Build();\n      }\n\n      public IConfigurationRoot Configuration { get; set; }\n    ```", "```js\n    Configuration[\"Data:DefaultConnection:ConnectionString\"];\n    ```", "```js\n    using Common;\n    using Microsoft.Data.Entity;\n    using System;\n    using System.Collections.Generic;\n    using System.Linq;\n    using System.Threading.Tasks;\n\n    namespace TodoServiceApp.DataAccess\n    {\n      public class TodoContext : DbContext\n      {\n        public DbSet<TodoItem> TodoItem { get; set; }\n      }\n    }\n    ```", "```js\n    using System;\n    using System.Collections.Generic;\n    using System.Linq;\n    using System.Threading.Tasks;\n\n    namespace TodoServiceApp\n    {\n      public class Data\n      {\n        public DefaultConnection DefaultConnection { get; set; }\n      }\n\n      public class DefaultConnection {\n\n        public string ConnectionString { get; set; } \n      }\n    }\n    ```", "```js\n    using Common;\n    using System;\n    using System.Collections.Generic;\n    using System.Linq;\n    using System.Threading.Tasks;\n    using TodoServiceApp.DataAccess;\n\n    namespace TodoServiceApp.Repository\n    {\n      public interface ITodoRepository\n      {\n        void CreateTodo(TodoItem todoItem);\n        void DeleteTodo(int todoItemId);\n        List<TodoItem> GetAllTodos(int userId);\n        void UpdateTodo(TodoItem todoItem);\n      }\n\n      public class TodoRepository : ITodoRepository\n      {\n        private TodoContext context;\n        public TodoRepository()\n        {\n          context = new TodoContext();\n        }\n        public List<TodoItem> GetAllTodos(int userId)\n        {\n          return context.TodoItems.ToList();\n        }\n        public void CreateTodo(TodoItem todoItem)\n        {\n          context.TodoItems.Add(todoItem);\n          context.SaveChanges();\n        }\n        public void DeleteTodo(int todoItemId)\n        {\n          var item = context.TodoItems.Where(i => i.Id == todoItemId).FirstOrDefault();\n          context.Remove(item);\n          context.SaveChanges();\n        }\n        public void UpdateTodo(TodoItem todoItem)\n        {\n          context.Update(todoItem);\n          context.SaveChanges();\n        }\n\n      }\n    }\n    ```", "```js\n    public void ConfigureServices(IServiceCollection services)\n    {\n      string connString = Configuration[\"Data:DefaultConnection:ConnectionString\"];\n      services.AddDbContext<TodoContext>(options => options.UseSqlServer(connString));\n\n      services.AddMvc();\n\n      services.AddScoped<ITodoRepository, TodoRepository>();\n      services.Configure<Data>(Configuration.GetSection(\"Data\"));\n\n    }\n    ```", "```js\n    services.AddCors(options => { options.AddPolicy(\"AllowAllRequests\", builder => builder.AllowAnyOrigin().AllowAnyMethod().AllowAnyHeader()); });\n    ```", "```js\n    app.UseCors(\"AllowAllRequests\");\n    ```", "```js\n    \"tools\": {\n      \"Microsoft.AspNetCore.Server.IISIntegration.Tools\": {\n        \"version\": \"1.0.0-preview1-final\",\n        \"imports\": \"portable-net45+win8+dnxcore50\"\n      },\n      \"Microsoft.EntityFrameworkCore.Tools\": {\n        \"imports\": [ \"portable-net451+win8\" ],\n        \"version\": \"1.0.0-preview1-final\"\n      }\n      },\n    ```", "```js\n    dotnet ef database update –verbose \n\n    ```", "```js\n    using System;\n    using System.Collections.Generic;\n    using System.Linq;\n    using System.Threading.Tasks;\n    using Microsoft.AspNetCore.Mvc;\n    using Common;\n    using TodoServiceApp.Repository;\n\n    namespace TodoApi.Controllers\n    {\n      [Route(\"api/[controller]\")]\n      public class ToDoController : Controller\n      {\n        ITodoRepository repository;\n        public ToDoController(ITodoRepository repo)\n        {\n          repository = repo;\n        }\n        // GET: api/values\n        [HttpGet]\n        public IEnumerable<string> Get()\n        {\n          return repository.GetAllTodos();\n        }\n        // GET api/values/5\n        [HttpGet(\"{id}\")]\n        public IEnumerable<TodoItem> Get(int id)\n        {\n          return repository.GetAllTodos(id);\n        }\n        // POST api/values\n        [HttpPost]\n        public void Post([FromBody]TodoItem value)\n        {\n          repository.CreateTodo(value);\n        }\n        // PUT api/values/5\n        [HttpPut(\"{id}\")]\n        // DELETE api/values/5\n        [HttpDelete(\"{id}\")]\n        public void Delete(int id)\n        {\n          repository.DeleteTodo(id);\n        }\n      }\n    }\n    ```", "```js\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0-rc2-final\",\n    \"Microsoft.AspNetCore.StaticFiles\": \"1.0.0-rc2-final\",\n    ```", "```js\n    namespace TodoWebApp\n    {\n      public class Startup\n      {\n        // This method gets called by the runtime. Use this method to add services to the container.\n        // For more information on how to configure your application, visit http://go.microsoft.com/fwlink/?LinkID=398940\n        public void ConfigureServices(IServiceCollection services)\n        {\n          services.AddMvc();\n        }\n        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.\n        public void Configure(IApplicationBuilder app)\n        {\n          app.UseStaticFiles();\n          app.UseMvc(routes =>\n          {\n            routes.MapRoute(name: \"default\", template: \"{controller=Home}/{action=Index}/{id?}\");\n        }\n    }\n    ```", "```js\n    {\n      \"name\": \"ASP.NET\",\n      \"version\": \"0.0.0\",\n      \"dependencies\": {\n      \"angular2\": \"2.0.0-beta.9\",\n      \"systemjs\": \"0.19.24\",\n      \"reflect-metadata\": \"0.1.3\",\n      \"rxjs\": \"5.0.0-beta.2\",\n      \"zone.js\": \"0.6.4\"\n      },\n      \"devDependencies\": {\n        \"gulp\": \"3.8.11\",\n        \"typescript\": \"1.8.7\",\n      }\n    }\n    ```", "```js\n    {\n      \"compilerOptions\": {\n      \"noImplicitAny\": false,\n      \"noEmitOnError\": true,\n      \"removeComments\": false,\n      \"sourceMap\": true,\n      \"target\": \"es5\",\n      \"module\": \"commonjs\",\n      \"moduleResolution\": \"node\",\n      \"outDir\": \"../wwwroot/todosapp\",\n      \"mapRoot\": \"../scripts\",\n      \"experimentalDecorators\": true,\n      \"emitDecoratorMetadata\": true\n      },\n      \"exclude\": [\n        \"node_modules\",\n        \"wwwroot\"\n      ]\n    }\n    ```", "```js\n    /// <binding Clean='clean' />\n    \"use strict\";\n\n    var gulp = require(\"gulp\")\n\n    var paths = {\n      webroot: \"./wwwroot/\"\n    };\n    var config = {\n      libBase: 'node_modules',\n      lib: [\n        require.resolve('systemjs/dist/system.js'),\n        require.resolve('systemjs/dist/system.src.js'),\n        require.resolve('systemjs/dist/system-polyfills.js'),\n        require.resolve('angular2/bundles/angular2.dev.js'),\n        require.resolve('angular2/bundles/angular2-polyfills.js'),\n        require.resolve('angular2/bundles/router.dev.js'),\n        require.resolve('angular2/bundles/http.dev.js'),\n        require.resolve('angular2/bundles/http.js'),\n        require.resolve('angular2/bundles/angular2'),\n        require.resolve('rxjs/bundles/Rx.js')\n      ]\n    };\n    gulp.task('build.lib', function () {\n      return gulp.src(config.lib, { base: config.libBase })\n      .pipe(gulp.dest(paths.webroot + 'lib'));\n    });\n    ```", "```js\n    //main.ts\n    import {bootstrap} from 'angular2/platform/browser';\n    import {TodoAppComponent} from './apps/todoapp.component';\n    import {HTTP_PROVIDERS} from 'angular2/http';\n    import 'rxjs/add/operator/map';\n\n    bootstrap(TodoAppComponent, [HTTP_PROVIDERS]);  \n    ```", "```js\nbootstrap component to bootstrap our first TodoAppComponent. HTTP_PROVIDERS contains all the providers to make any HTTP request. It is provided while bootstrapping, so the TodoAppComponent or the chain of components in the following hierarchy can do HTTP-based operations. Rxjs/add/operator/map is a dependent package for HTTP_PROVIDERS, which needs to be added as well:\n```", "```js\n    //todoapp.component.ts\n    ///<reference path=\"../../node_modules/angular2/typings/browser.d.ts\" />\n    import {Component} from 'angular2/core';\n\n    @Component({\n\n      selector: 'todo',\n      template: '<h1>{{message}}</h1>'\n    })\n\n    export class TodoAppComponent {\n      message: string = \"Hello World\";\n\n    }\n    ```", "```js\n    importer.js:\n    ```", "```js\n      System.import('todosapp/Main')\n        .then(null, console.error.bind(console));\n    ```", "```js\n    System.config({ defaultJSExtensions: true });\n    ```", "```js\n    //_Layout.cshtml\n\n      <environment names=\"Development\">\n        <link rel=\"stylesheet\" href=\"~/lib/bootstrap/dist/css/bootstrap.css\" />\n        <link rel=\"stylesheet\" href=\"~/css/site.css\" />\n        <script src=\"img/angular2-polyfills.js\"></script>\n        <script src=\"img/system.js\"></script>\n        <script src=\"img/angular_config.js\"></script>\n        <script src=\"img/Rx.js\"></script>\n        <script src=\"img/angular2.dev.js\"></script>\n        <script src=\"img/router.dev.js\"></script>\n        <script src=\"img/http.js\"></script>\n        <script src=\"img/importer.js\"></script>\n        <script src=\"img/jquery-2.1.4.min.js\"\n          asp-fallback-src=\"img/jquery.min.js\"\n          asp-fallback-test=\"window.jQuery\">\n        </script>\n        <script src=\"img/bootstrap.min.js\"\n          asp-fallback-src=\"img/bootstrap.min.js\"\n          asp-fallback-test=\"window.jQuery && window.jQuery.fn && window.jQuery.fn.modal\">\n        </script>\n      </environment>\n    ```", "```js\n    @{\n      ViewData[\"Title\"] = \"Todo Applications\";\n      Layout = \"~/Views/Shared/_Layout.cshtml\";\n\n    }\n    <div id=\"myCarousel\" class=\"container\" data-ride=\"carousel\" data-interval=\"6000\">\n      <todo-app>Loading...</todo-app>\n    </div>\n    ```", "```js\n    //baseservice.component.ts\n    import {Component} from 'angular2/core';\n    import {Http, Headers} from 'angular2/http';\n\n    @Component({})\n    export class BaseService {\n      baseUrl: string;\n      constructor() {\n        this.baseUrl = \"http://localhost:7105/api/\";\n      }\n    }\n    ```", "```js\n    //todoservice.component.ts\n    import {Component} from 'angular2/core';\n    import {Http, Headers} from 'angular2/http';\n    import {BaseService} from '../services/baseservice.component';\n\n    @Component({\n      providers: [TodoService]\n    })\n\n    export class TodoService extends BaseService {\n      constructor(private http: Http) {\n        super();\n      }\n      public getTodoItems() {\n        return this.http.get(this.baseUrl + 'todo/1');\n      }\n      public createTodo(item) {\n        var path = this.baseUrl + 'todo';\n        const headers = new Headers({ 'Content-Type': 'application/json' });\n        return this.http.post(path, JSON.stringify(item), { headers: headers });\n      }\n\n      public deleteTodo(itemId) {\n        var path = this.baseUrl + 'todo';\n        return this.http.delete(path + \"/\" + itemId);\n      }\n    }\n    ```", "```js\n    TodoApp.Component.ts:\n    ```", "```js\n    //todoApp.component.ts\n    ///<reference path=\"../../node_modules/angular2/typings/browser.d.ts\" />\n    import {Component} from 'angular2/core';\n    import {Http, Response} from 'angular2/http';\n    import {CreateTodoComponent} from '../apps/createTodo.component';\n    import {TodoService} from '../services/todoservice.component';\n\n    @Component({\n      selector: 'todo-app',\n      templateUrl: 'Todo',\n      directives: [CreateTodoComponent],\n      providers: [TodoService]\n    })\n    export class TodoAppComponent {\n      //member variables\n      todos = [\n      ];\n\n      //constructor\n      constructor(private http: Http, private todoService: TodoService) {\n      }\n\n      //Page Initialized Event Handler\n      ngOnInit() {\n        this.getTodoItems();\n      }\n\n      //Member Functions\n      getTodoItems() {\n        this.todoService.getTodoItems().map((res: Response) => res.json())\n          .subscribe(data => {\n            this.todos = data\n            this.parseDate();\n          },\n          err  => console.log(err),\n          () => console.log('done')\n          );\n      }\n      deleteTodoItem(itemID) {\n        var r = confirm(\"Are you sure to delete this item\");\n        if (r == true) {\n          this.todoService.deleteTodo(itemID)\n            .map(r=> r.json())\n            .subscribe(result => {\n              alert(\"record deleted\");\n        });\n      }\n      this.getTodoItems();\n      }\n\n      parseDate() {\n        for (let todo of this.todos) {\n          let todoDate = new Date(todo.DueDateTime);\n          todo.DueDateTime = todoDate;\n        }\n      }\n\n      handleRefresh(args) {\n        this.getTodoItems();\n      }\n    }\n    ```", "```js\n      [HtmlTargetElement(\"todo\")]\n      public class TodoTagHelper : TagHelper\n      {\n        public override void Process(TagHelperContext context, TagHelperOutput output)\n        {\n          string todo = \"<div class='thumbnail'><div class='caption'><nav class='nav navbar-inverse' role='navigation'></nav>\";\n\n          todo += \"<label class='date'>{{todo.DueDateTime | date:'short'}}</label> <img src='images/delete.png' (click)=deleteTodoItem(todo.Id)/>\";\n\n          todo += \"<h4><a href='#'>{{todo.Title}}</a></h4>\";\n          todo += \"<textarea readonly class='form-control' style='resize:none;' rows='4' cols='28'>{{todo.Description}}</textarea></div></div>\";\n          output.Content.AppendHtml(todo);\n        }\n      }\n    ```", "```js\n    @addTagHelper \"*, TodoWebApp\"\n    ```", "```js\nusing System.Linq;\nusing Microsoft.AspNetCore.Mvc;\nusing TodoNotes.Models;\n\nnamespace TodoNotes.Controllers\n{\n  public class TodoController : Controller\n  {\n    public TodoController()\n    {\n      _context = context;  \n    }\n    // GET: Todo\n    public IActionResult Index()\n    {\n      return View();\n    }\n\n    // GET: Todo/Create\n    public IActionResult Create()\n    {\n      return View();\n    }\n\n}\n```", "```js\nTodo/Index.cshtml:\n```", "```js\n@{\n  Layout = null;\n}\n<div class=\"col-md-3\">\n  <p class=\"lead\">ToDo Items</p>\n  <div class=\"list-group\">\n    <h4>\n      <a href=\"#\">Want to add new Todo?</a>\n    </h4>\n    <p>Click on the button below</p>\n    <div class=\"col-md-3\">\n      <a class=\"btn btn-primary\" data-toggle=\"modal\" data-target=\"#todoModal\">Create Todo</a>\n\n    </div>\n  </div>\n</div>\n<div id=\"todoModal\" class=\"modal fade\" role=\"dialog\">\n  <div class=\"modal-dialog\">\n\n    <!-- Modal content-->\n    <div class=\"modal-content\">\n      <div class=\"modal-header\">\n        <button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button>\n        <h4 class=\"modal-title\">Insert Todo</h4>\n      </div>\n      <div class=\"modal-body\">\n      <createTodo (refreshTodos)=\"handleRefresh($event)\"></createTodo>\n      </div>\n\n    </div>\n  </div>\n</div>\n<div class=\"col-md-9\">\n  <div class=\"row\" >\n    <div class=\"col-sm-4 col-lg-4 col-md-4\" *ngFor=\"#todo of todos\">\n      <todo></todo>\n     </div>\n\n  </div>\n</div>\n```", "```js\n//createtodo.component.ts\n///<reference path=\"../../node_modules/angular2/typings/browser.d.ts\" />\nimport {Component} from 'angular2/core';\nimport {Http, Response} from 'angular2/http';\nimport {FormBuilder, Validators} from 'angular2/common';\nimport {TodoService} from '../services/todoservice.component';\n\n@Component({\n  selector: 'createTodo',\n  templateUrl: 'Todo/Create'\n})\n\nexport class CreateTodoComponent {\n\n  @Output() refreshTodos = new EventEmitter();\n\n  addTodoForm: any;\n\n  constructor(fb: FormBuilder, private todoService: TodoService) {\n    this.addTodoForm = fb.group({\n      title: [\"\", Validators.required],\n      description: [\"\", Validators.required],\n      dueDateTime: [\"\", Validators.required]\n    });\n  }\n  addTodoItem(): void {\n    this.todoService.createTodo(this.addTodoForm.value)\n      .map(r=> r.json())\n      .subscribe(result => {});\n    this.refreshTodos.next([]);\n    alert(\"Record added successfully\");\n  }\n\n}\n```", "```js\nHttp and Response objects to handle the response received from TodoService. In the @Component annotation, we have defined the selector that is used in the parent TodoAppComponent component to render the Create Todo view inside the modal dialog.\n```", "```js\n@{\n  Layout = null;\n}\n\n<form [ngFormModel]=\"addTodoForm\" (submit)=\"addTodoItem($event)\" class=\"container\" >\n  <div class=\"form-horizontal\">\n    <div class=\"form-group\">\n      <label class=\"col-md-2 control-label\">Title</label>\n      <div class=\"col-md-10\">\n        <input ngControl=\"title\" class=\"form-control\" id=\"Title\" placeholder=\"Enter Todo Title\" [(ngModel)]=\"title\" />\n      </div>\n    </div>\n    <div class=\"form-group\">\n      <label class=\"col-md-2 control-label\">Description</label>\n      <div class=\"col-md-10\">\n        <textarea ngControl=\"description\"  class=\"form-control\" placeholder=\"Enter Description\"></textarea>\n        {{description}}\n      </div>\n    </div>\n    <div class=\"form-group\">\n      <label class=\"col-md-2 control-label\">Due Date</label>\n      <div class=\"col-md-10\">\n        <input ngControl=\"dueDateTime\" class=\"form-control\" type=\"datetime-local\" placeholder=\"Enter Due Date\" />\n      </div>\n    </div>\n    <div class=\"form-group\">\n      <div class=\"col-md-offset-2 col-md-10\">\n        <input type=\"submit\" value=\"Create\" class=\"btn btn-primary\" />\n      </div>\n    </div>\n  </div>\n</form>\n@section Scripts {\n  <script src=\"img/jquery.min.js\"></script>\n  <script src=\"img/jquery.validate.min.js\"></script>\n  <script src=\"img/jquery.validate.unobtrusive.min.js\"></script>\n}\n```", "```js\nngFormModel to the model we defined in the createtodo.component.ts and the submit form, and we are calling the addTodoItem method, which sends all the values bound with the ngControl directive. ngControl is a new directive introduced in Angular 2 that provides unidirectional binding. With forms, ngControl not only binds the value, but also tracks the state of the control. If the value is invalid, it updates the control with special CSS classes to tell the user that the value is invalid.\n```"]