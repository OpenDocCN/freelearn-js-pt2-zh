- en: IndexedDB
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 索引数据库（IndexedDB）
- en: Web Storage serves well when we have to store a considerably small amount of
    data (megabytes). However, if we need structured data in a much greater quantity
    and we want do performance searches through this data using indices, we will use
    IndexedDB API. The idea of an API to store data in databases in a browser isn't
    new. A few years ago, Google and their partners were actively advocating a standard
    candidate called **Web SQL Database**. This specification has failed to make it
    through W3C recommendation though. Now, we have IndexedDB API instead that is
    widely-supported already and provides a significant performance boost (asynchronous
    API and robust search due to indexed keys).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们需要存储相当小的数据量（兆字节）时，Web Storage表现很好。然而，如果我们需要大量结构化数据，并且我们希望通过索引进行性能搜索，我们将使用IndexedDB
    API。在浏览器中存储数据的API的想法并不新鲜。几年前，谷歌及其合作伙伴积极推广一个名为**Web SQL Database**的标准候选。尽管如此，这个规范还是未能通过W3C推荐。现在，我们有了IndexedDB
    API，它已经得到广泛支持，并提供了显著的性能提升（异步API以及由于索引键而强大的搜索功能）。
- en: 'However, the API of IndexedDB is pretty complex. It''s also quite hard to read
    because of a large amount of nested callbacks:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，IndexedDB的API相当复杂。由于大量的嵌套回调，它也很难阅读：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In this sample, we created a request for opening DB. If the DB doesn''t exist
    or its version is changed, the `upgradeneeded` event is fired. In the function
    subscribed to this event, we can define the schema by declaring object stores
    and their indices. So if we need to update the schema of the existing DB, we can
    increment the version number, `upgradeneeded` will fire again and the listener
    will be called to update the schema. As soon as we have defined the schema, we
    can populate the object store with sample data. When the request to open the DB
    is complete, we request the record that matches the email ID `don@company.com`.
    When the request is done, we go inside the console:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们创建了一个打开数据库的请求。如果数据库不存在或其版本已更改，将触发`upgradeneeded`事件。在监听这个事件的函数中，我们可以通过声明对象存储及其索引来定义模式。因此，如果我们需要更新现有数据库的模式，我们可以增加版本号，`upgradeneeded`将再次触发，监听器将被调用以更新模式。一旦我们定义了模式，我们就可以用示例数据填充对象存储。当打开数据库的请求完成后，我们请求与电子邮件ID
    `don@company.com`匹配的记录。请求完成后，我们进入控制台：
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Pretty tangled, isn''t it? This API makes me think of a wrapper. The best I
    know is called **Dexie** ([http://www.dexie.org](http://www.dexie.org)). Just
    compare how easy it is to solve the same task with the interface it exposes:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 相当复杂，不是吗？这个API让我想到了一个包装器。我所知道最好的一个叫做**Dexie** ([http://www.dexie.org](http://www.dexie.org))。只需比较一下它暴露的接口如何轻松地解决同一个任务：
- en: '[PRE2]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: FileSystem API
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文件系统API
- en: 'Well, in a web application, we can store key value pairs with Web Storage and
    we can create and use IndexedDB. Something is still missing. Desktop applications
    can read and write files and directories. That is what we often need in a web
    application that is capable of running offline. The FileSystem API allows us to
    create, read, and write to a user''s local file system in application scope. Let''s
    take up an example:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，在Web应用程序中，我们可以使用Web Storage存储键值对，我们也可以创建和使用IndexedDB。还有一件事 missing。桌面应用程序可以读写文件和目录。这是我们经常在能够离线运行的Web应用程序中需要的东西。FileSystem
    API允许我们在应用程序范围内创建、读取和写入用户的本地文件系统。让我们举一个例子：
- en: '[PRE3]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'First of all, we request for a local file system (`requestFileSystem`) that''s
    sandboxed to the application. With the first argument, we state whether the file
    system should be persistent. By passing `window.TEMPORARY` in the argument, we
    allow the browser to remove the data automatically (for example, when more space
    is needed). If we go with `window.PERSISTENT`, we determine that the data cannot
    be cleaned without explicit user confirmation. The second argument specifies how
    much space we can allocate for the file system. Then, there are the `onSuccess`
    and `onError` callbacks. When the file system is created, we receive a reference
    to the `FileSystem` object. This object has the `fs.root` property, where the
    object keeps `DirectoryEntry` bound to the root file system directory. The `DirectoryEntry`
    object has the `DirectoryEntry.getDirectory`, `DirectoryEntry.getFile`, `DirectoryEntry.removeRecursevly`,
    and `DirectoryEntry.createReader` methods. In the preceding example, we write
    into the current (`root`) directory, so we simply use `DirectoryEntry.getFile`
    to open a file of a given name. On successfully opening a file, we receive `FileEntry`
    that represents the open file. The object has a few properties such as: `FileEntry.fullPath`,
    `FileEntry.isDirectory`, `FileEntry.isFile`, and `FileEntry.name` and methods
    such as `FileEntry.file` and `FileEntry.createWriter`. The first method returns
    the `File` object, which can be used to read file content, and the second is used
    to write in the file. By the time the operation is complete, we read from the
    file. For this, we create a `FileReader` object and make it read our `File` object
    as text.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们请求一个沙盒化的本地文件系统（`requestFileSystem`），该文件系统对应用程序来说是持久的。通过将 `window.TEMPORARY`
    作为第一个参数传递，我们允许浏览器自动删除数据（例如，当需要更多空间时）。如果我们选择 `window.PERSISTENT`，我们确定数据在没有明确用户确认的情况下无法清除。第二个参数指定了我们可以为文件系统分配多少空间。然后，还有
    `onSuccess` 和 `onError` 回调。当创建文件系统时，我们收到一个对 `FileSystem` 对象的引用。这个对象有一个 `fs.root`
    属性，其中对象保持对根文件系统目录的 `DirectoryEntry` 绑定。`DirectoryEntry` 对象有 `DirectoryEntry.getDirectory`、`DirectoryEntry.getFile`、`DirectoryEntry.removeRecursevly`
    和 `DirectoryEntry.createReader` 方法。在前一个示例中，我们在当前（`root`）目录中写入，所以我们只需使用 `DirectoryEntry.getFile`
    打开一个给定名称的文件。成功打开文件后，我们收到一个代表打开文件的 `FileEntry` 对象。该对象有几个属性，如：`FileEntry.fullPath`、`FileEntry.isDirectory`、`FileEntry.isFile`
    和 `FileEntry.name`，以及方法如 `FileEntry.file` 和 `FileEntry.createWriter`。第一个方法返回一个
    `File` 对象，该对象可用于读取文件内容，第二个用于写入文件。当操作完成时，我们从文件中读取。为此，我们创建一个 `FileReader` 对象，并让它读取我们的
    `File` 对象作为文本。
- en: Boosting performance with JavaScript workers
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 JavaScript workers 提高性能
- en: JavaScript is a single-threaded environment. So, multiple scripts cannot really
    run simultaneously. Yes, we use `setTimeout()`, `setInterval()`, `XMLHttpRequest`
    and event handlers to run tasks asynchronously. So we gain non-blocking execution,
    but this doesn't mean concurrency. However, using web workers, we can run one
    or more scripts in the background independent of the UI scripts. Web workers are
    long running scripts that are not interrupted by blocking UI events. Web workers
    utilize multithreading, so we can benefit from multicore CPUs.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 是单线程环境。所以，多个脚本实际上并不能真的同时运行。是的，我们使用 `setTimeout()`、`setInterval()`、`XMLHttpRequest`
    以及事件处理程序来异步运行任务。因此我们获得了非阻塞执行，但这并不意味着并发。然而，通过使用 web workers，我们可以在与 UI 脚本无关的后台独立运行一个或多个脚本。Web
    workers 是长期运行的脚本，不会被阻塞的 UI 事件中断。Web workers 利用多线程，因此我们可以从多核 CPU 中受益。
- en: Well, where can we use web workers? Anywhere where we do processor-intensive
    calculations and don't want them blocking the UI thread. It can be graphics, web
    games, crypto, and Web I/O. We cannot manipulate the DOM from a web worker directly,
    but we have access to `XMLHttpRequest`, Web Storage, IndexedDB, FileSystem API,
    Web Sockets and other features.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们可以在哪些地方使用 web workers 呢？任何我们需要进行处理器密集型计算而不希望它们阻塞 UI 线程的地方。这可以是图形、网络游戏、加密和
    Web I/O。我们从 web worker 直接操作 DOM 是不可能的，但我们有访问 `XMLHttpRequest`、Web Storage、IndexedDB、FileSystem
    API、Web Sockets 等特性的权限。
- en: 'So let''s see what these web workers are in practice. By and large, we register
    an existing web worker in the main script and communicate to the web worker using
    the PostMessage API ([https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage)):'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，让我们来看看实践中这些 web workers 是什么。总的来说，我们在主脚本中注册一个现有的 web worker 并通过 PostMessage
    API 与 web worker 进行通信（[https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage)）：
- en: '[PRE4]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here in `index.html`, we requested the web worker (`foo-worker.js`) to subscribe
    for worker messages and requested it to load the CPU for 2,000 ms, which represents
    a resource-consuming process. The worker receives the message and checks for a
    function specified in the `command` property. If this exists, the workers pass
    the message value to the function and replies with the return value.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里的`index.html`中，我们请求网络工作者（`foo-worker.js`）订阅工作者消息，并要求它加载CPU 2,000毫秒，这代表了一个消耗资源的进程。工作者接收到消息并检查`command`属性中指定的函数。如果存在，工作者会将消息值传递给函数，并返回返回值。
- en: 'Note that despite of launching such an expensive process by starting up `index.html`,
    the main thread stays nonblocked. Nonetheless, it reports to the console when
    the process is complete. But if you try to run the `loadCpu` function within the
    main script, the UI freezes and most probably results in a script-timeout error.
    Now consider this: if you call `loadCpu` asynchronously (for instance, with `setTimeout`),
    the UI will still hang. The only safe way to deal with processor-sensitive operations
    is to hand them over to web workers.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，尽管通过启动`index.html`启动了如此昂贵的进程，主线程仍然是非阻塞的。然而，当进程完成后，它还是会向控制台报告。但是，如果你尝试在主脚本内运行`loadCpu`函数，UI将会冻结，很可能会导致脚本超时错误。现在考虑这个：如果你异步调用`loadCpu`（例如，使用`setTimeout`），UI仍然会挂起。处理CPU敏感操作的唯一安全方法是将它们交给网络工作者。
- en: 'Web workers can be dedicated and shared. A dedicated worker is accessible only
    through a script, the one where we call the worker. Shared workers can be accessed
    from multiple scripts, even those running in different windows. That makes this
    API a bit different:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 网络工作者可以是专用的，也可以是共享的。专用的网络工作者只能通过一个脚本访问，该脚本是我们调用工作者的地方。共享工作者可以从多个脚本中访问，甚至包括在不同窗口中运行的脚本。这使得这个API有些不同：
- en: '**index.html**'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**index.html**'
- en: '[PRE5]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The preceding example worker simply echoes the received message. If the worker
    does some effective computation, we would be able to command it from different
    scripts on different pages.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的例子中的工作线程只是简单地回显了接收到的消息。如果工作线程进行了有效的计算，我们就可以从不同页面上的不同脚本中指挥它。
- en: 'These examples show the use of web workers for concurrent computations. What
    about unloading the main thread from some of the web I/O operations? For example,
    we are requested to report specified UI events to a remote **Business Intelligence
    Server** (**BI Server** is used here to receive statistical data). This is not
    a core functionality, so it would be great to keep any loads that these requests
    produce out of the main thread. So we can use a web worker. However, a worker
    is available only after it''s loaded. Normally, this happens very fast, but I
    still want to be sure that no BI events are lost because the worker was unavailable.
    What I can do is embed the web worker code into HTML and register the web worker
    by data URI:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这些例子展示了并发计算中网络工作者的使用。那么，将一些网络I/O操作从主线程中卸载又会怎样呢？例如，我们被要求将特定的UI事件报告给远程**商业智能服务器**（在这里**BI服务器**用于接收统计数据）。这不是核心功能，因此最好是将这些请求产生的任何负载都保持在主线程之外。因此，我们可以使用一个网络工作者。然而，工作者只有在加载后才可用。通常，这非常快，但我还是想确保由于工作者不可用而没有丢失任何BI事件。我可以做的是将网络工作者代码嵌入HTML中，并通过数据URI注册网络工作者：
- en: '[PRE6]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: By handing over the web I/O to a worker, we can also get additional control
    over it. For example, in reaction to a network status change (the `ononline` and
    `onoffline` events, and the `navigator.online` property being available to workers),
    we can respond to an application either with the actual call results or cached
    ones. In other words, we can make our application work offline. In fact, there
    are special types of JavaScript workers called Service Workers. Service Workers
    inherit from Shared Workers and act as a proxy between the web application and
    the network ([https://developer.mozilla.org/en-US/docs/Mozilla/Projects/Social_API/Service_worker_API_reference](https://developer.mozilla.org/en-US/docs/Mozilla/Projects/Social_API/Service_worker_API_reference)).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将网络I/O交给工作者，我们还可以对其进行额外的控制。例如，在网络状态发生变化时（`ononline`和`onoffline`事件，以及工作者可以访问的`navigator.online`属性），我们可以要么返回实际的调用结果，要么返回缓存的结果。换句话说，我们可以使我们的应用程序离线工作。实际上，还有特殊类型的JavaScript工作者，称为服务工作者。服务工作者继承自共享工作者，充当网页应用程序和网络之间的代理（[https://developer.mozilla.org/en-US/docs/Mozilla/Projects/Social_API/Service_worker_API_reference](https://developer.mozilla.org/en-US/docs/Mozilla/Projects/Social_API/Service_worker_API_reference)）。
- en: Creating the first web component
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建第一个网络组件
- en: 'You might be familiar with HTML5 video element ([http://www.w3.org/TR/html5/embedded-content-0.html#the-video-element](http://www.w3.org/TR/html5/embedded-content-0.html#the-video-element)).
    By placing a single element in your HTML, you will get a widget that runs a video.
    This element accepts a number of attributes to set up the player. If you want
    to enhance this, you can use its public API and subscribe listeners on its events
    ([http://www.w3.org/2010/05/video/mediaevents.html](http://www.w3.org/2010/05/video/mediaevents.html)).
    So, we reuse this element whenever we need a player and only customize it for
    project-relevant look and feel. If only we had enough of these elements to pick
    every time we needed a widget on a page. However, this is not the right way to
    include any widget that we may need in an HTML specification. However, the API
    to create custom elements, such as video, is already there. We can really define
    an element, package the compounds (JavaScript, HTML, CSS, images, and so on),
    and then just link it from the consuming HTML. In other words, we can create an
    independent and reusable web component, which we then use by placing the corresponding
    custom element (`<my-widget />`) in our HTML. We can restyle the element, and
    if needed, we can utilize the element API and events. For example, if you need
    a date picker, you can take an existing web component, let''s say the one available
    at [http://component.kitchen/components/x-tag/datepicker](http://component.kitchen/components/x-tag/datepicker).
    All that we have to do is download the component sources (for example, using the
    browser package manager) and link to the component from our HTML code:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能熟悉HTML5视频元素([http://www.w3.org/TR/html5/embedded-content-0.html#the-video-element](http://www.w3.org/TR/html5/embedded-content-0.html#the-video-element)).通过在HTML中放置一个元素，你将得到一个运行视频的小工具。这个元素接受多个属性来设置播放器。如果你想要增强这个功能，你可以使用它的公共API并在其事件上订阅监听器([http://www.w3.org/2010/05/video/mediaevents.html](http://www.w3.org/2010/05/video/mediaevents.html)).因此，每当我们需要播放器时，我们都会重用这个元素，并且只针对与项目相关的外观和感觉进行自定义。如果每次我们都需要页面上的小工具时，都有足够多的这样的元素就好了。然而，这并不是在HTML规范中包含我们可能需要的任何小工具的正确方法。然而，创建自定义元素的API，比如视频，已经存在。我们确实可以定义一个元素，打包化合物（JavaScript，HTML，CSS，图片等），然后只需从消费HTML中链接它。换句话说，我们可以创建一个独立且可重用的Web组件，然后通过在HTML中放置相应的自定义元素（`<my-widget
    />`）来使用它。我们可以重新样式化该元素，如果需要，我们可以利用元素API和事件。例如，如果你需要一个日期选择器，你可以取一个现有的Web组件，比如说在[http://component.kitchen/components/x-tag/datepicker](http://component.kitchen/components/x-tag/datepicker)可用的那个。我们只需要下载组件源（例如，使用浏览器包管理器）并在我们的HTML代码中链接到该组件：
- en: '[PRE7]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Declare the component in the HTML code:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在HTML代码中声明组件：
- en: '[PRE8]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This is supposed to go smoothly in the latest versions of Chrome, but this
    won''t probably work in other browsers. Running a web component requires a number
    of new technologies to be unlocked in a client browser, such as **Custom Elements**,
    **HTML Imports**, **Shadow DOM**, and templates. The templates include the JavaScript
    templates that we examined in [Chapter 1](part0014_split_000.html#DB7S2-f4ff6b81796e4f78aa983a623fb95daf
    "Chapter 1. Diving into the JavaScript Core"), *Diving into JavaScript core*.
    The Custom Element API allows us to define new HTML elements, their behavior,
    and properties. The Shadow DOM encapsulates a DOM subtree required by a custom
    element. And support of HTML imports assumes that by a given link the user-agent
    enables a web-component by including its HTML on a page. We can use a polyfill
    ([http://webcomponents.org/](http://webcomponents.org/)) to ensure support for
    all of the required technologies in all the major browsers:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该在最新版本的Chrome中顺利运行，但在其他浏览器中可能不会工作。运行Web组件需要在客户端浏览器中解锁多项新技术，如**自定义元素**、**HTML导入**、**Shadow
    DOM**和模板。模板包括我们在[第1章](part0014_split_000.html#DB7S2-f4ff6b81796e4f78aa983a623fb95daf
    "第1章：深入JavaScript核心")中研究的JavaScript模板(*Diving into JavaScript core*)。自定义元素API允许我们定义新的HTML元素、它们的行为和属性。Shadow
    DOM封装了一个由自定义元素所需的DOM子树。而HTML导入的支持意味着通过给定的链接，用户代理通过在页面上包含其HTML来启用Web组件。我们可以使用polyfill([http://webcomponents.org/](http://webcomponents.org/))确保所有主要浏览器都支持所需的技术：
- en: '[PRE9]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Do you fancy writing your own web components? Let''s do it. Our component acts
    similar to HTML''s `details/summary`. When one clicks on **summary**, the details
    show up. So we create `x-details.html`, where we put component styles and JavaScript
    with the component API:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 你想写自己的Web组件吗？我们一起做。我们的组件类似于HTML的`details/summary`。当点击**summary**时，详细信息显示出来。因此，我们创建`x-details.html`，在其中我们放置组件样式和JavaScript以及组件API：
- en: '**x-details.html**'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**x-details.html**'
- en: '[PRE10]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Further in the JavaScript code, we create an element based on a generic HTML
    element (`Object.create( HTMLElement.prototype )`). Here we could inherit from
    a complex element (for example, video) if needed. We register a `x-details` custom
    element using the earlier one created as a prototype. With `element.createdCallback`,
    we subscribe a handler that will be called when a custom element is created. Here
    we attach our view to the element to enhance it with the functionality that we
    intend for it. Now we can use the component in HTML, as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript代码的进一步部分，我们基于一个通用HTML元素（`Object.create( HTMLElement.prototype )`）创建了一个元素。如果需要，我们这里可以继承一个复杂元素（例如，视频）。我们使用前面创建的作为原型的元素注册了一个`x-details`自定义元素。通过`element.createdCallback`，我们在自定义元素创建时订阅了一个处理程序。在这里，我们将我们的视图附加到元素上，以通过为其提供我们打算的功能来增强它。现在我们可以在HTML中使用该组件，如下所示：
- en: '[PRE11]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'X-details web-component in action is shown in the following screenshot:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 下面屏幕截图展示了X-details web-组件在行动中的情况：
- en: '![Creating the first web component](img/00009.jpeg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![创建第一个web组件](img/00009.jpeg)'
- en: Learning to use server-to-browser communication channels
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 学习使用服务器到浏览器的通信通道
- en: Using XHR or Fetch API, we can request a state from the server. This is a one-way
    communication. If we want real-time communication, we need this in the opposite
    direction as well. For example, we may want user notifications (your post has
    been liked, new comment, or new private message) to pop up as soon as the corresponding
    records change in the DB. The server side has connection to the DB, so we expect
    the server to notify the client. In the past, to receive these events on the client,
    we were using tricks that were known under the umbrella term **COMET** (hidden
    iframe, long polling, tag long polling, and others). Now we can go with native
    JavaScript APIs.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 使用XHR或Fetch API，我们可以从服务器请求一个状态。这是一条单向通信。如果我们想要实时通信，我们同样也需要反方向也这样做。例如，我们可能希望在数据库中相应记录发生变化时，用户通知（你的帖子被点赞了，新评论，或者新私信）能够立即弹出。服务器端有连接到数据库，所以期望服务器能通知客户端。在过去，要在客户端接收这些事件，我们使用了被称为**COMET**（隐藏iframe，长轮询，标签长轮询等）的技巧。现在我们可以使用原生的JavaScript
    API。
- en: Server-Sent Events
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 服务器发送事件
- en: 'The technology that provides a way to subscribe to server-side events is the
    **Server-Sent Events** (**SSE**) API. On the client, we register a server stream
    (`EventSource`) and subscribe to the event coming from it:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 提供了一种订阅服务器端事件的技术是**服务器发送事件**（**SSE**）API。在客户端，我们注册一个服务器流（`EventSource`）并订阅来自它的事件：
- en: '[PRE12]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Here, we subscribed a listener to a specific event called `"foo"`. If you want
    your callback to be invoked on every server event, just use `src.onmessage`. As
    for the server side, we just need to set the MIME type `text/event-stream` and
    send event payload blocks separated with pairs of new lines:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们为特定事件`"foo"`订阅了一个监听器。如果你想让回调在每次服务器事件上被调用，只需使用`src.onmessage`。至于服务器端，我们只需要设置MIME类型`text/event-stream`，并发送由换行符成对分隔的事件负载块：
- en: '[PRE13]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'SSE works via an HTTP connection, so we need a web server to create a stream.
    PHP is considerably simpler and a widely used server-side language. Chances are
    that you are already familiar with its syntax. On the other hand, PHP isn''t designed
    for a persistent connection of long duration. Yet, we can trick it by declaring
    a loop that makes our PHP script never ending:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: SSE通过HTTP连接工作，因此我们需要一个Web服务器来创建一个流。PHP要简单得多，并且是一个广泛使用的服务器端语言。很可能你已经熟悉其语法。另一方面，PHP并不适合持久连接的长久维持。然而，我们可以通过声明一个循环让我们的PHP脚本永不结束来欺骗它：
- en: '[PRE14]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: You may have seen SSE examples where the server script outputs the data once
    and terminates the process (for example, [http://www.html5rocks.com/en/tutorials/eventsource/basics/](http://www.html5rocks.com/en/tutorials/eventsource/basics/)).
    That is also a working example, because every time the connection is terminated
    by the server, the browser renews the connection. However, this way we do not
    have any benefit of SSE that works the same as polling.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能看到过SSE示例，其中服务器脚本一次性输出数据并终止进程（例如，[http://www.html5rocks.com/en/tutorials/eventsource/basics/](http://www.html5rocks.com/en/tutorials/eventsource/basics/)）。那也是一个工作示例，因为每次服务器通过服务器终止连接时，浏览器都会重新建立连接。然而，这种方法并没有SSE的任何好处，它像轮询一样工作。
- en: 'Now everything looks ready, so we can run the HTML code. As we do this, we
    get the following output in the console:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在一切看起来都准备好了，所以我们可以运行HTML代码。这样做时，我们在控制台得到以下输出：
- en: '[PRE15]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Web Sockets
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Web Sockets
- en: Well, with XHR/Fetch we communicate from client to server. With SSE, we do this
    in the opposite direction. But can we have communication both ways at once? Another
    HTML5 goody called Web Sockets provides bidirectional, full-duplex client-server
    communications.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，使用XHR/Fetch我们从客户端到服务器进行通信。使用SSE，我们这样做是反向的。但是我们可以同时进行双向通信吗？另一个HTML5好东西叫做Web
    Sockets，它提供了双向、全双工的客户端服务器通信。
- en: 'The client side looks similar to SEE. We just register the Web Socket server,
    subscribe to its events, and send to it our events:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端看起来类似于SSE。我们只需注册WebSocket服务器，订阅其事件，并向其发送我们的事件：
- en: '[PRE16]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This demo source at `ws://echo.websocket.org` simply echoes any messages sent
    to it:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这个在`ws://echo.websocket.org`的演示源简单地回显发送给它的任何消息：
- en: '[PRE17]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Need something more practical? I believe the most illustrative case would be
    a chat:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 需要更实际的东西吗？我相信最说明问题的例子将是一个聊天室：
- en: '**demo.html**'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**demo.html**'
- en: '[PRE18]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Here we have a form with two input fields. The first expects a person''s name
    and the second, the chat message. When the form is submitted, the values of both
    inputs are sent to the Web Socket server. Server response is displayed in the
    output element. Unlike SSE, Web Sockets require a special protocol and server
    implementation to get working. To run the example, we will take a simple nodejs-based
    server implementation, **nodejs-websocket** ([https://github.com/sitegui/nodejs-websocket](https://github.com/sitegui/nodejs-websocket)):'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个带有两个输入字段的表单。第一个期望输入一个人的名字，第二个是聊天信息。当表单提交时，将两个输入字段的值发送到WebSocket服务器。服务器的响应显示在输出元素中。与SSE不同，WebSocket需要特殊的协议和服务器实现才能工作。为了运行示例，我们将使用一个简单的基于nodejs的服务器实现，**nodejs-websocket**（[https://github.com/sitegui/nodejs-websocket](https://github.com/sitegui/nodejs-websocket)）：
- en: '**ws.js**'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**ws.js**'
- en: '[PRE19]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The script creates a server available on the port 8001 that listens to the
    Web Socket messages, and when any message is received, the port broadcasts it
    to all the available connections. We can fire up the server like this:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本创建了一个在端口8001上监听WebSocket消息的服务器，当接收到任何消息时，端口将其广播给所有可用的连接。我们可以这样启动服务器：
- en: '[PRE20]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now we open our demo chat in two different browsers. When we send a message
    from one of them, the message shows up in both browsers. Following screenshot
    shows the WebSocket-driven chat in Firefox:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们在两个不同的浏览器中打开我们的聊天室演示。当我们从一个浏览器中发送消息时，消息会在两个浏览器中显示出来。下面的截图显示了在Firefox中的WebSocket驱动的聊天：
- en: '![Web Sockets](img/00010.jpeg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![Web Sockets](img/00010.jpeg)'
- en: 'Following screenshot shows the WebSocket-driven chat in Chrome:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图显示了在Chrome中的WebSocket驱动的聊天：
- en: '![Web Sockets](img/00011.jpeg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![Web Sockets](img/00011.jpeg)'
- en: Note how fast the clients react to the events. Communication through sockets
    gives irrefutable advantages.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 注意客户端对事件反应有多快。通过套接字进行的通信具有无可争辩的优势。
- en: 'There are a number of Web Socket server implementations for various languages,
    for example, Socket.IO ([http://socket.io](http://socket.io)) for Node.js, Jetty
    ([http://www.eclipse.org/jetty](http://www.eclipse.org/jetty)) for Java, Faye
    ([http://faye.jcoglan.com](http://faye.jcoglan.com)) for Ruby, Tornado ([http://www.tornadoweb.org](http://www.tornadoweb.org))
    for Python, and even one for PHP called Ratchet ([http://socketo.me](http://socketo.me)).
    However, I would like to draw your attention to a language-agnostic WebSocket
    daemon—Websocketd ([http://websocketd.com/](http://websocketd.com/)). It''s like
    **Common Gateway Interface** (**CGI**), but for Web Sockets. so you can write
    the server login in your favorite language and then attach your script to the
    daemon:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多针对不同语言的WebSocket服务器实现，例如，Socket.IO（[http://socket.io](http://socket.io)）用于Node.js，Jetty（[http://www.eclipse.org/jetty](http://www.eclipse.org/jetty)）用于Java，Faye（[http://faye.jcoglan.com](http://faye.jcoglan.com)）用于Ruby，Tornado（[http://www.tornadoweb.org](http://www.tornadoweb.org)）用于Python，甚至还有一个名为Ratchet的PHP实现（[http://socketo.me](http://socketo.me)）。然而，我想向您介绍一个与语言无关的WebSocket守护进程——Websocketd（[http://websocketd.com/](http://websocketd.com/)）。它就像**公共网关接口**（**CGI**），但是用于Web
    Sockets。所以您可以使用您喜欢的语言编写服务器登录脚本，然后将脚本附加到守护进程：
- en: '[PRE21]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Summary
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: HTML5 provide a number of awesome APIs, and we just examined some of them. Among
    browser storage APIs, there are localStorage and sessionStorage that extend the
    cookies relict. Both are capable of storing megabytes of data and can be easily
    synchronized across different browser windows/tabs. IndexedDB allows us to store
    even greater quantity of data and provides an interface for high-performance searches
    using indices. We can also use FileSystem API to create and operate a local file
    system bound to the web application.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: HTML5提供了一些很棒的API，我们刚才检查了一些。在浏览器存储API中，有localStorage和sessionStorage，它们扩展了cookie遗留问题。两者都
    capable of storing megabytes of data and can be easily synchronized across different
    browser windows/tabs. IndexedDB允许我们存储更多的数据，并提供了一个用于使用索引的高性能搜索的接口。我们还可以使用FileSystem
    API来创建和操作与网络应用程序绑定的本地文件系统。
- en: While JavaScript is a single-threaded environment, we can still run scripts
    in multiple threads. We can register dedicated or shared Web Workers and hand
    over any processor-intensive operations, leaving the main thread and the UI unaffected.
    We also can leverage a special kind of JavaScript workers—Service Workers--- as
    a proxy between the web application and the network. This enables control to network
    I/O when the browsers switches mode online/offline.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然JavaScript是一个单线程环境，我们仍然可以在多个线程中运行脚本。我们可以注册专用或共享的Web Workers，并将任何耗处理器操作交给它们，从而不会影响主线程和UI。我们还可以利用一种特殊的JavaScript工作者---服务工作者---作为网络应用程序和网络之间的代理。这可以在浏览器在线/离线模式之间切换时控制网络I/O。
- en: Nowadays we can create own custom advanced elements that can be easily reused,
    restyled, and enhanced. The assets required to render such elements are HTML,
    CSS, JavaScript, and images are bundled as Web Components. So, we literally can
    build the Web now from the components similar to how buildings are made from bricks.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以创建自己的自定义高级元素，这些元素可以轻松地被重复使用、重新设计并增强。渲染此类元素所需的资源包括HTML、CSS、JavaScript和图片，它们被作为Web组件捆绑在一起。因此，我们实际上可以从类似建筑物的组件开始构建网页。
- en: In the past, we used tricks known as COMET to exchange events between server
    and client. Now we can use SSE API to subscribe for server events sent over HTTP.
    We can also use Web Sockets for bidirectional, full-duplex client-server communications.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去，我们使用被称为COMET的技巧来在服务器和客户端之间交换事件。现在我们可以使用SSE API来订阅通过HTTP发送的服务器事件。我们还可以使用Web
    Sockets进行双向、全双工的客户端-服务器通信。
