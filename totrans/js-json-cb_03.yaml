- en: Chapter 3. Using JSON in Simple AJAX Applications
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章 使用JSON的简单AJAX应用程序
- en: In this chapter, we'll look at the part that JSON plays in asynchronous JavaScript
    and XML (AJAX) applications that provide better responsiveness than older web
    pages by dynamically loading bits of a web page on demand.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨JSON在提供比旧网页更好的响应性的异步JavaScript和XML（AJAX）应用程序中所扮演的角色，这些应用程序通过动态按需加载网页的片段来实现。
- en: 'In this chapter, you''ll find the following recipes:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将找到以下食谱：
- en: Creating an `XMLHttpRequest` object
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建`XMLHttpRequest`对象
- en: Making an asynchronous request for data
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为数据发起异步请求
- en: Sending JSON to your web server
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将JSON发送到你的Web服务器
- en: Accepting JSON using Node.js
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Node.js接受JSON
- en: Getting the progress of an asynchronous request
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取异步请求的进度
- en: Parsing the returned JSON
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解析返回的JSON
- en: Issuing a web service request using Node.js
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Node.js发起Web服务请求
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引言
- en: AJAX is a set of web development techniques used on the client side of web development
    to create asynchronous web applications—web pages that can fetch their content
    from different servers, once the base content has been loaded. The "X" in AJAX
    stands for XML, but today's AJAX applications typically use JSON to encapsulate
    data between the client and server.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: AJAX是一组用于网络开发的客户端技术，用于创建异步网络应用程序——能够从不同的服务器获取内容的网络页面，一旦加载了基本内容。AJAX中的“X”代表XML，但今天的AJAX应用程序通常使用JSON来封装客户端和服务器之间的数据。
- en: The underpinning components of AJAX are actually quite old, dating back to an
    ActiveX component in Internet Explorer introduced by Microsoft back in 1998.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: AJAX的基础组件实际上 quite old，可以追溯到1998年由Microsoft在Internet Explorer中引入的ActiveX组件。
- en: 'However, the technique really gained widespread traction by 2005, when *Jesse
    Garrett* wrote his article titled *Ajax: A New Approach to Web Applications*.
    In April of 2006, the World Wide Web Consortium released the first draft standard
    for the `XMLHttpRequest` object, which is the underlying object powering all of
    today''s AJAX applications in modern browsers.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这项技术实际上在2005年得到了广泛的应用，当时*杰西·加勒特*（Jesse Garrett）撰写了一篇题为《Ajax:一种新的网络应用程序方法》的文章。2006年4月，万维网联盟发布了`XMLHttpRequest`对象的第一个草案标准，这是当今所有现代浏览器中所有AJAX应用程序的底层对象。
- en: In this chapter, we'll build a simple AJAX application that returns the latitude
    and longitude of an amateur radio station reported through the **Automated Packet
    Reporting System** (**APRS**) network as cached by [http://www.aprs.fi/](http://www.aprs.fi/),
    a popular website in the amateur radio community. We'll build the client side
    using HTML and JavaScript for Google Chrome and Internet Explorer, and build the
    server side using Node.js.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将构建一个简单的AJAX应用程序，该程序通过**自动数据包报告系统**（**APRS**）网络返回一个业余无线电台报告的纬度和经度，这些数据由[http://www.aprs.fi/](http://www.aprs.fi/)网站进行缓存，这是一个在业余无线电台社区中广受欢迎的网站。我们将使用HTML和JavaScript为Google
    Chrome和Internet Explorer构建客户端，并使用Node.js构建服务器端。
- en: Tip
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: To begin, be sure you installed Node.js as instructed in [Chapter 2](ch02.html
    "Chapter 2. Reading and Writing JSON on the Server"), *Reading and Writing JSON
    on the Server*, in the section *Reading and writing JSON with Node.js*. You'll
    also need to install the request module of Node.js. Do this by running `npm install
    request` at a command prompt once you've installed Node.js.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，请确保你按照[第2章](ch02.html "第2章 在服务器上读写JSON")，*在服务器上读写JSON*，中的*使用Node.js读写JSON*部分安装了Node.js。你还需要安装Node.js的request模块。在安装Node.js后，通过命令提示符运行`npm
    install request`来实现。
- en: Setting up the server
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置服务器
- en: 'We''ll start with a bare-bones server. Make a directory for your node applications
    and save the following to `json-encoder.js`:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从一个骨架服务器开始。为你的node应用程序创建一个目录，并将以下内容保存到`json-encoder.js`中：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This code handles two kinds of HTTP requests: `POST` requests and `GET` requests.
    It begins by allocating `http`, `filesystem`, and `url` manipulation objects,
    and then registers an HTTP server on port `1337` of the localhost. Its server
    switches on the request type. For `POST` requests, it presently returns an empty
    JSON body, ignoring its incoming content. For `GET` requests, it attempts to load
    the file indicated in the URL out of the `public` subdirectory below the current
    working directory and return it to the client as an HTML document. If the incoming
    request is for a favicon, it ignores the request.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码处理两种HTTP请求：`POST` 请求和 `GET` 请求。它首先分配了 `http`、`filesystem` 和 `url` 操作对象，然后在本地的
    `1337` 端口上注册了一个HTTP服务器。它的服务器根据请求类型进行切换。对于 `POST` 请求，它目前返回一个空的JSON体，忽略其传入的内容。对于
    `GET` 请求，它尝试从当前工作目录下面的 `public` 子目录中加载URL指示的文件，并将其作为HTML文档返回给客户端。如果传入的请求是针对 favicon
    的，它将忽略该请求。
- en: 'This server is crude but adequate for our purposes. If you''re interested in
    learning more about Node.js, you might want to extend it for the following purposes:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这个服务器很原始但足以满足我们的需求。如果你对学习更多关于Node.js的内容感兴趣，你可能会想为以下目的扩展它：
- en: Correctly determine the MIME type of the documents it returns, and send the
    appropriate Content-Type header based on the document MIME type.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正确确定返回文档的MIME类型，并根据文档的MIME类型发送适当的 `Content-Type` 头部。
- en: Not throw an exception and kill the server if a given document isn't found,
    returning a 404 page not found error instead.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果找不到给定的文档，不要抛出异常并杀死服务器，而是返回一个404页面未找到错误。
- en: We'll extend the server-side JavaScript throughout this chapter.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章中扩展服务器端的JavaScript。
- en: Setting up the client page
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置客户端页面
- en: 'Make a subdirectory inside `json-encoder.js` and call it `public`. In this
    directory, create an HTML file containing the following HTML and name it `json-example.html`:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `json-encoder.js` 中创建一个子目录，并将其命名为 `public`。在这个目录中，创建一个包含以下HTML的HTML文件，并将其命名为
    `json-example.html`：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This is a simple HTML document with three `div` tags we''ll populate with data
    from the asynchronous requests: `debug` to show debug messages; `json` to show
    the raw JSON; and `result` to show the actual result, which will show some formatted
    data from the JavaScript object obtained by parsing the JSON. There''s one script
    at the bottom of the page, `doAjax`, which the browser invokes after loading all
    the HTML through the `onload` attribute of the body tag.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个包含三个 `div` 标签的简单HTML文档，我们将从异步请求中填充这些标签的数据：`debug` 用于显示调试信息；`json` 用于显示原始JSON；`result`
    用于显示实际结果，这将显示从解析JSON的JavaScript对象中获取的格式化数据。页面底部有一个脚本 `doAjax`，浏览器在加载所有HTML后通过
    `body` 标签的 `onload` 属性调用它。
- en: 'Loading the web page in Chrome with the developer''s tools active, you should
    see something like this:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在Chrome中使用开发者工具激活加载网页，你应该看到类似这样的内容：
- en: '![Setting up the client page](img/6902OS_03_01.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![设置客户端页面](img/6902OS_03_01.jpg)'
- en: We'll extend the HTML throughout this chapter.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章中扩展HTML。
- en: Creating an XMLHttpRequest object
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 XMLHttpRequest 对象
- en: All modern web browsers provide an `XMLHttpRequest` class you can instantiate
    in your code, which you can use to issue asynchronous calls to obtain content
    over HTTP. You'll create one or more of these in your client-side JavaScript using
    the `new` operator.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 所有现代网络浏览器都提供了一个 `XMLHttpRequest` 类，你可以在代码中实例化它，你可以使用它发出异步调用以通过HTTP获取内容。你将在客户端的JavaScript中使用
    `new` 操作符创建一个或多个这样的实例。
- en: How to do it...
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何进行...
- en: 'You''ll want to create an instance of this class early on in your JavaScript
    after the page loads, as shown in the following code:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 你希望在JavaScript页面加载后尽早创建这个类的实例，如下面的代码所示：
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How it works…
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The preceding code tests the root-level JavaScript `window` object for the `XMLHttpRequest`
    class, and if the browser defines the class, creates an instance of the class
    for us to use in the making of asynchronous requests.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码测试了根级别的JavaScript `window` 对象是否具有 `XMLHttpRequest` 类，如果浏览器定义了该类，则为我们创建了该类的实例，以便在制作异步请求时使用。
- en: See also
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: If you're working with a very old version of Internet Explorer, you may need
    to use a `Microsoft.XMLHTTP` ActiveX object. In which case, the test for `window.XMLHttpRequest`
    will fail.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用一个非常旧的Internet Explorer版本，你可能需要使用一个 `Microsoft.XMLHTTP` ActiveX 对象。在这种情况下，`window.XMLHttpRequest`
    的测试将失败。
- en: Making an asynchronous request for data
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 制作数据异步请求
- en: You use the instance of the `XMLHttpRequest` class you created to request data.
    You can request data using any HTTP method; typically you'll use GET or POST.
    GET is good if you don't need to pass any arguments, or if the arguments are encoded
    in the service URL; POST is necessary if you're going to post JSON to the server
    as arguments for your server-side script.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 您使用创建的`XMLHttpRequest`类的实例来请求数据。您可以使用任何HTTP方法来请求数据；通常您会使用GET或POST。GET很好，如果您不需要传递任何参数，或者如果参数已编码在服务URL中；POST是必要的，如果您需要将JSON作为服务器端脚本的参数提交给服务器。
- en: How to do it...
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'Continuing to enhance our client page script''s `doAjax` function, here''s
    how to issue an asynchronous request, modifying the previous example:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 继续增强我们的客户端页面脚本`doAjax`函数，以下是如何发起异步请求，修改之前的示例：
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How it works…
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'The `XMLHttpRequest` class has two methods you use to make a request: `open`
    and `send`. You use the `open` method to start the process of issuing the request,
    and the `send` method if you need to send data (say, with a `POST` request) for
    the server to process.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`XMLHttpRequest`类有两个用于发起请求的方法：`open`和`send`。您使用`open`方法来开始发出请求的过程，如果需要发送数据（例如，与`POST`请求一起）供服务器处理，则使用`send`方法。'
- en: 'The `open` method takes three arguments: the HTTP method, the URL (relative
    to the page containing the script), and a Boolean indicating whether the request
    should be synchronous (indicated by the value `false`) or asynchronous (indicated
    by the value `true`). In the preceding code, we submit a `POST` request to the
    web server''s root and request the browser to handle the request asynchronously,
    so the page will be rendered and the user can interact with the page.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`open`方法接受三个参数：HTTP方法、URL（相对于包含脚本的页面）和一个布尔值，指示请求是否应为同步（由值`false`表示）或异步（由值`true`表示）。在前面的代码中，我们向web服务器的根提交了一个`POST`请求，并请求浏览器以异步方式处理请求，因此页面将被渲染，用户可以与页面交互。'
- en: The `send` method takes a single argument, a string containing the data you'd
    like to send to the server. In this example, we're not sending anything; we'll
    use this method to send the JSON for our argument.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`send`方法接受一个参数，一个包含您希望发送给服务器的数据的字符串。在这个例子中，我们不发送任何东西；我们将使用这个方法来发送我们的参数的JSON。'
- en: See also
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 也见
- en: This recipe is closely related to the next, *Sending JSON to your web server*,
    in which we actually create a JavaScript object, stringify it, and send it using
    the `send` method.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱与下一个菜谱*向你的web服务器发送JSON*非常相关，我们在其中实际上创建了一个JavaScript对象，将其字符串化，并使用`send`方法发送它。
- en: Sending JSON to your web server
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向你的web服务器发送JSON
- en: Some AJAX requests just need to get data at a URL. This is the case when the
    server updates an object for all clients, or when the URL for an object uniquely
    identifies the object (common when you design a service using **Representational
    State Transfer** (**REST**)). Other times, you may want to pass JavaScript data
    to the server, such as when you have a complex query you'd like the server to
    process. To do this, create your JavaScript object, then stringify it and pass
    the string containing the JSON to the `XMLHttpRequest` object's `send` method.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 有些AJAX请求只需要从URL获取数据。这种情况下，服务器为所有客户端更新一个对象，或者当一个对象的URL唯一地标识该对象时（在设计使用**代表性状态转移**（**REST**）的服务时很常见）。其他时候，您可能希望将JavaScript数据传递给服务器，例如当您有一个复杂的查询需要服务器处理时。为此，创建您的JavaScript对象，然后将其字符串化，并将包含JSON的字符串传递给`XMLHttpRequest`对象的`send`方法。
- en: How to do it...
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'Omitting the code that creates an `XMLHttpRequest` object, you send JSON to
    a server with the following code:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 省略创建`XMLHttpRequest`对象的代码，您使用以下代码向服务器发送JSON：
- en: '[PRE4]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note that we're using an HTTP `POST` request here, which submits the JSON document
    to the server as an HTTP object body.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们这里使用了一个HTTP `POST`请求，它将JSON文档作为HTTP对象主体提交给服务器。
- en: How it works…
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'This code creates a JavaScript object request that has a single field: call.
    The call field''s value is set to the station we''re looking for and the server
    will use it when it processes the request.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码创建了一个具有单个字段：call的JavaScript对象请求。call字段的值设置为我们寻找的车站，服务器在处理请求时会使用它。
- en: 'When you pass data to the server, you should correctly set the Content-Type
    header, which HTTP uses to indicate to the server the type of the data being carried.
    The MIME type for JSON is application/json; however, some web application developers
    have chosen alternate representations, such as `text/x-json`, `text/x-javascript`,
    `text/javascript`, or `application/x-javascript`. You should use `application/json`
    unless you have a compelling reason (think legacy code you can''t fix on a server).
    You specify the content type by setting a request header using the `setRequestHeader`
    method. This method takes two arguments: the name of the header to set and its
    value. Note that header names are case sensitive!'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 当你向服务器传递数据时，你应该正确设置Content-Type头，HTTP使用这个头来指示服务器正在传输的数据类型。JSON的MIME类型是application/json；然而，一些网络应用程序开发者选择了其他表示形式，如`text/x-json`、`text/x-javascript`、`text/javascript`或`application/x-javascript`。除非你有充分的理由（想想服务器上无法修复的遗留代码），否则你应该使用`application/json`。你通过使用`setRequestHeader`方法设置一个请求头来自定义内容类型。这个方法有两个参数：要设置的头的名称及其值。请注意，头名称是大小写敏感的！
- en: Once you set the request header, the final thing to do is call `send` and pass
    the stringified JavaScript object. We do this in the last line of the preceding
    example.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦设置了请求头，最后要做的就是调用`send`并传递字符串化的JavaScript对象。我们在前面的示例的最后一行这样做。
- en: Accepting JSON using Node.js
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Node.js接受JSON
- en: Different web server systems accept data posted by a client in different ways.
    That being said, in most cases, you read the data piecewise as it comes in from
    the client and once the POST request finishes, process it as a batch. Here's how
    to do it with Node.js.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的网络服务器系统以不同的方式接受客户端提交的数据。话说回来，在大多数情况下，你按片读取来自客户端的数据，一旦POST请求完成，就将其作为一批数据处理。以下是使用Node.js进行处理的方法。
- en: How to do it...
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'In our case, we accept JSON submitted from the client via HTTP `POST` requests.
    To do this, we need to read the data from the client, aggregate it in a string,
    and when all of the data arrives at the server, convert the data from a JSON string
    to a JavaScript object. In json-encoder, js, we modify it to read as the following:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的案例中，我们通过HTTP `POST`请求接受客户端提交的JSON。为此，我们需要从客户端读取数据，将其汇总成字符串，当所有数据到达服务器时，将数据从JSON字符串转换为JavaScript对象。在json-encoder.js中，我们将其修改为如下所示：
- en: '[PRE5]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How it works…
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The preceding code extends the server-side Node.js script we saw in this chapter's
    introduction. The code begins by testing for the `POST` request method. If we
    get a `POST` request, we create an empty string `body` to contain the body of
    the request. Node.js is event-driven; to read data from the `POST` request, we
    add a `'data'` event handler to the request, which concatenates newly-read data
    to the value referred to by the variable `body`.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码扩展了本章介绍中的服务器端Node.js脚本。这段代码首先检查`POST`请求方法。如果我们收到一个`POST`请求，我们创建一个空字符串`body`来包含请求的主体。Node.js是事件驱动的；为了从`POST`请求中读取数据，我们向请求添加了一个`'data'`事件处理程序，该处理程序将新读取的数据连接到变量`body`所引用的值。
- en: At some point, the `POST` request concludes, which causes the request to raise
    the `'end'` event. We register an event handler for this event, which uses `JSON.parse`
    to parse the incoming JSON. Then, we set an additional field in the resulting
    object, the result field, giving it a value of **'** `OK`**'**. Finally, we write
    the Content-Type header and then the JSON representing the object to the client
    using the `writeHead` and `end` methods respectively.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在某个时刻，`POST`请求结束，这导致请求引发`'end'`事件。我们为这个事件注册一个事件处理程序，该处理程序使用`JSON.parse`解析传入的JSON。然后，我们在结果对象中设置一个额外的字段，即结果字段，并将其值设为**'**
    `OK`**'**。最后，我们使用`writeHead`和`end`方法分别设置内容类型头和向客户端写入代表该对象的JSON。
- en: See also
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 也请参阅
- en: As suggested in the introduction, how you read posted data on your server depends
    a lot on the server environment and server-side scripting language. If you haven't
    done this before, a quick trip to a search engine such as Bing or Google is in
    order. Once you do so, be prepared to take the resulting string data and convert
    it to an object in your server-side scripting language using one of the recipes
    from [Chapter 2](ch02.html "Chapter 2. Reading and Writing JSON on the Server"),
    *Reading and Writing JSON on the Server*.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如引言中所建议，你如何在服务器上读取已提交的数据很大程度上取决于服务器环境和服务器端脚本语言。如果你以前没做过这件事，去一个搜索引擎，比如Bing或Google，是很有必要的。一旦你这样做，准备好取出的字符串数据，并在你的服务器端脚本语言中使用其中一个食谱将其转换为对象，这个食谱来自[第2章](ch02.html
    "第2章 阅读和编写服务器端的JSON")，*阅读和编写服务器端的JSON*。
- en: Getting the progress of an asynchronous request
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取异步请求的进度
- en: Our request is pretty lightweight but that's not always going to be the case
    in your application. Moreover, progressing is especially important in mobile web
    applications, where the mobile device may move in and out of network coverage
    and suffer temporary network outages. A robust application will test progress
    status and errors and retry important requests.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的请求相当轻量级，但这种情况在你的应用程序中并不总是如此。此外，在移动网络应用程序中，特别是在移动设备可能进入和退出网络覆盖并遭受暂时性网络中断时，进度的监控尤为重要。一个健壮的应用程序将测试进度状态和错误，并重试重要的请求。
- en: 'The `XMLHttpRequest` object provides events for it to notify you about the
    progress of a pending request. These events are as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`XMLHttpRequest`对象提供了事件，用于通知你有关待处理请求的进度。这些事件如下：'
- en: '`load`: This event executes immediately after you open a connection.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`load`: 此事件在你打开一个连接后立即执行。'
- en: '`loadstart`: This event executes as a load first starts.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`loadstart`: 此事件在加载开始时执行。'
- en: '`progress`: This event executes periodically as the load takes place.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`progress`: 此事件在加载过程中定期执行。'
- en: '`error`: This event executes in the event of a network error.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`error`: 在发生网络错误的情况下执行此事件。'
- en: '`abort`: This event executes in the event that the network transaction is aborted
    (such as the user navigating away from the page issuing the request).'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`abort`: 在网络交易被取消的情况下执行此事件（例如，用户导航离开发出请求的页面）。'
- en: How to do it...
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: For each of these events, you'll want to register a function that handles the
    event in some way. For example, the `error` handler should notify the user that
    an error occurs, while the `abort` handler should clean up any client-side data
    that is left lingering in the event of an abandoned request.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这些事件中的每一个，你都希望注册一个以某种方式处理事件的函数。例如，`error`处理程序应该通知用户发生了错误，而`abort`处理程序应该在请求被放弃的情况下清理任何客户端数据。
- en: 'Here''s an example of how to do this, which reports debugging information for
    each of these events; this would go in the `<script>` tag at the bottom of our
    example HTML:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个如何实现此功能的示例，它报告了这些事件的调试信息；这将是我们的示例HTML文件底部`<script>`标签中的内容：
- en: '[PRE6]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How it works…
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作...
- en: The `XMLHttpRequest` object offers the `addEventListener` method, which you
    use to register functions the object should invoke when particular events occur.
    To this method, you pass the name of the event, the function (or a closure) to
    invoke on the event, and whether the registered function should capture the event
    or not (usually not). In the preceding example, we invoke that method for each
    of the events, passing the function that we wrote to handle the event. Each of
    our functions just logs the fact that the event was received in the debug div
    in our HTML content.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`XMLHttpRequest`对象提供了`addEventListener`方法，你可以用它来注册对象在特定事件发生时应该调用的函数。向这个方法传递事件名称、要在事件上执行的函数（或闭包）以及是否应该捕获事件（通常不捕获）的布尔值。在前面的示例中，我们对每个事件调用该方法，传递我们编写来处理事件的函数。我们的每个函数只是记录了事件在HTML内容中的debug
    div中已接收的事实。'
- en: There's more...
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The `XMLHttpResult` object defines an attribute, `onreadystatechange`, to which
    you can assign a function that the object will invoke periodically as the request
    runs. The next recipe, *Parsing the returned JSON*, describes how to use this
    to monitor the status of a request.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`XMLHttpResult`对象定义了一个属性`onreadystatechange`，你可以向其分配一个函数，该对象在请求运行期间会定期调用此函数。下一个食谱，《解析返回的JSON》描述了如何使用此功能来监控请求的状态。'
- en: The behavior of these events varies from browser to browser, and worse, from
    browser version to browser version. For example, early versions of Microsoft Internet
    Explorer (prior to Version 9) don't support these events at all. You should take
    a lowest-common-denominator approach to handle these events if your web application
    is to run on multiple browsers, especially if they're different versions.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这些事件的行为在不同的浏览器之间以及浏览器版本之间都有所不同。例如，微软Internet Explorer的早期版本（版本9之前）根本不支持这些事件。如果你的网页应用程序要在多个浏览器上运行，特别是如果它们是不同版本的情况下，你应该采取最低公倍数的方法来处理这些事件。
- en: See also
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: Because the support for these events varies by browser and browser version,
    this is another area where using a JavaScript framework such as jQuery or AngularJS
    can really help. These frameworks abstract away specific browser differences.
    [Chapter 4](ch04.html "Chapter 4. Using JSON in AJAX Applications with jQuery
    and AngularJS"), *Using JSON in AJAX Applications with jQuery and AngularJS,*
    discusses using these frameworks for AJAX.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 由于对这些事件的支持因浏览器和浏览器版本而异，因此在使用这些事件方面使用像 jQuery 或 AngularJS 这样的 JavaScript 框架确实很有帮助。这些框架抽象了特定的浏览器差异。第
    4 章讨论了使用这些框架进行 AJAX 的方法。
- en: See *Getting the progress of an asynchronous request using jQuery* and *Getting
    the progress of an asynchronous request using AngularJS* in [Chapter 4](ch04.html
    "Chapter 4. Using JSON in AJAX Applications with jQuery and AngularJS"), *Using
    JSON in AJAX Applications with jQuery and AngularJS*, for browser-independent
    ways to respond to these events.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[第 4 章](ch04.html "第 4 章：使用 jQuery 和 AngularJS 在 AJAX 应用程序中使用 JSON")中的*使用
    jQuery 和 AngularJS 获取异步请求的进度*和*使用 AngularJS 获取异步请求的进度*，了解响应这些事件的浏览器无关方法。
- en: Parsing the returned JSON
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解析返回的 JSON 数据
- en: Once the server returns the result, you need a way to get that result from the
    `XMLHttpRequest` object and convert the result from a string to a JavaScript object.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦服务器返回结果，你需要一种方法从 `XMLHttpRequest` 对象中获取该结果，并将结果从字符串转换为 JavaScript 对象。
- en: How to do it...
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'The `XMLHttpRequest` object defines the `onreadystatechange` attribute to which
    you assign a function that is called periodically throughout the lifespan of a
    request. Here''s our `doAjax` function in its entirety, including a function assigned
    to this attribute to monitor the request for completion:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`XMLHttpRequest` 对象定义了 `onreadystatechange` 属性，你将一个函数分配给它，这个函数在整个请求的生命周期中定期被调用。以下是完整的
    `doAjax` 函数，包括分配给这个属性的一个函数，用于监视请求的完成情况：'
- en: '[PRE7]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: How it works…
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: After adding the various event listeners, we assign a function to the `onreadystatechange`
    attribute. This function is called as the state of the request object changes;
    at each invocation, we test the `readyState` field of the request object and its
    status. The `readyState` field indicates the state of the request; we're interested
    in state 4, which indicates that the request is complete. Once complete, we can
    find the HTTP status of the request in the status field of the request; the HTTP
    status code 200 indicates a normal successful status in reading content from the
    server.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在添加了各种事件监听器之后，我们将一个函数分配给 `onreadystatechange` 属性。每当请求对象的状态发生变化时，这个函数就会被调用；每次调用时，我们测试请求对象的
    `readyState` 字段及其状态。`readyState` 字段表示请求的状态；我们关注的状态是 4，它表示请求已完成。一旦请求完成，我们可以在请求的
    `status` 字段中找到请求的 HTTP 状态；HTTP 状态码 200 表示从服务器读取内容的成功状态。
- en: Once we get `readyState` of 4 and a HTTP status of 200, we define a new variable
    `result` as the object returned by parsing the JSON returned by the server, available
    from the request's `responseText` field. You can do whatever you want with the
    resulting object; we copy the JSON to `jsondiv` so you can see the JSON and read
    a few fields of the JavaScript object when we create the contents of `resultdiv`.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们得到 `readyState` 4 和 HTTP 状态 200，我们定义了一个新变量 `result` 作为由服务器返回的 JSON 解析后的对象，该对象可从请求的
    `responseText` 字段中获得。你可以随意处理结果对象；我们将 JSON 复制到 `jsondiv`，这样你就可以看到 JSON 并在创建 `resultdiv`
    的内容时读取 JavaScript 对象的几个字段。
- en: There's more...
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The `XMLHttpRequest` class defines the following ready states:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`XMLHttpRequest` 类定义了以下就绪状态：'
- en: 0 indicates that the request has not been initialized
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 0 表示请求尚未初始化
- en: 1 indicates that the request has been set up
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1 表示请求已设置
- en: 2 indicates that the request has been sent
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2 表示请求已发送
- en: 3 indicates that the request is in progress
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 3 表示请求正在进行中
- en: 4 indicates that the request is complete
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 4 表示请求已完成
- en: In practice, you should usually use only the last value and use events for other
    progress reporting.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际应用中，你通常应该只使用最后一个值，并用事件进行其他进度报告。
- en: HTTP result codes are defined in the HTTP request for comment, Internet RFC
    2616; the section you'd be interested in for this purpose is at [http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html).
    The 200 series of results indicate a successful transaction; how you handle the
    other notifications will depend on the business logic for your web application.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP结果代码在HTTP请求的注释中定义，互联网RFC 2616；您对此感兴趣的部分位于[http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html)。200系列的结果表示事务成功；您如何处理其他通知将取决于您Web应用程序的业务逻辑。
- en: 'The final Node.js server looks like this:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 最终的Node.js服务器看起来像这样：
- en: '[PRE8]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Issuing a web service request using Node.js
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Node.js发出Web服务请求
- en: So far, our server doesn't do much in response to a `POST` request; all it does
    is say "OK" and return the client's JSON back to the client. Typically, your server
    will need to do something with the JSON you provide, that is, make a web or database
    query, for example, or perform a computation. Our example queries the web service
    JSON endpoint at [http://www.aprs.fi/](http://www.aprs.fi/), which lets you see
    how you can make a server-to-server web service request using Node.js.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们的服务器对`POST`请求的响应不做太多事情；它所做的就是返回“OK”并将客户端的JSON返回给客户端。通常，您的服务器需要对您提供的JSON做些事情，例如，进行Web或数据库查询，或者执行计算。我们的示例查询位于[http://www.aprs.fi/](http://www.aprs.fi/)的Web服务JSON端点，让您了解如何使用Node.js进行服务器到服务器的Web服务请求。
- en: Getting ready
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备
- en: If you want to run the example for yourself, you'll first need to go to [http://www.aprs.fi](http://www.aprs.fi),
    register for an account, and obtain an API key. Follow the links on the page to
    do this, and substitute your API key for the text `"—key-"`in the example that
    follows.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想亲自运行示例，首先需要去[http://www.aprs.fi](http://www.aprs.fi)注册一个账户，并获得一个API密钥。按照页面上的链接进行操作，并将随后的示例中的文本`"—key-"`替换为您的API密钥。
- en: How to do it...
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'Our Node.js code will construct a URL with the identifier of the station we''re
    interested in and our API key, and issue an additional HTTP request on behalf
    of the client. It looks like this:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的Node.js代码将构建一个包含我们感兴趣的车站标识符和我们的API密钥的URL，并代表客户端发出额外的HTTP请求。它看起来像这样：
- en: '[PRE9]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: How it works…
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: After converting the client JSON to a JavaScript object, the code creates a
    URL for our web request consisting of the request station identifier, API key,
    and the fact that we'd like JSON for the result. We then use the `request` method
    to issue a simple `GET` request to that URL, passing a function that Node.js will
    invoke when the request succeeds.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在将客户端JSON转换为JavaScript对象后，代码创建了一个包含请求车站标识符、API密钥以及我们想要为结果获取JSON的Web请求URL。然后我们使用`request`方法向该URL发出简单的`GET`请求，并传递一个Node.js将在请求成功时调用的函数。
- en: Node.js invokes our callback function with an indicator of an error, a response
    object with fields containing the details of the HTTP response, and the body returned
    by the request. In this example, we assume success for brevity, and convert the
    resulting body from JSON to a JavaScript object using `JSON.parse`. The resulting
    object is a JavaScript object similar to what you saw in [Chapter 1](ch01.html
    "Chapter 1. Reading and Writing JSON on the Client"), *Reading and Writing JSON
    on the Client*, in the *Introduction* section. It has an entries array which has
    zero or more records indicating the location of each station in the record's `lat`
    and `lng` fields. We extract the first returned result and copy the relevant data
    to the JavaScript object we'll return to the original client.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js用错误指示器、包含HTTP响应详情的响应对象以及请求返回的正文调用我们的回调函数。在此示例中，我们假设成功以节省篇幅，并使用`JSON.parse`将结果正文从JSON转换为JavaScript对象。结果对象是一个类似于您在*介绍*部分看到的[第1章](ch01.html
    "第1章。在客户端读写JSON")，*在客户端读写JSON*中的JavaScript对象。它有一个entries数组，有零个或多个记录，指示记录中的`lat`和`lng`字段中每个车站的位置。我们提取返回的第一个结果并将相关数据复制到我们将返回给原始客户端的JavaScript对象中。
- en: There's more...
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Most server-side frameworks provide various ways to modify the semantics of
    a web service request, including specifying headers and the HTTP method to use
    when issuing the request. Node.js's request module is no different.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数服务器端框架提供了各种修改Web服务请求语义的方法，包括指定头部和发出请求时使用的HTTP方法。Node.js的请求模块也不例外。
- en: 'First, the request method can take a JavaScript object instead of a URL with
    a number of fields that let you customize the request. If you pass an object,
    you should put the URL to which the request should be made in the URI or URL attributes.
    You can also specify the following:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，请求方法可以接受一个JavaScript对象，而不是一个URL，其中有多个字段允许您自定义请求。如果您传递一个对象，您应该将请求应发送到的URL放在URI或URL属性中。您还可以指定以下内容：
- en: The HTTP method to use, which is passed in the method parameter
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要使用的HTTP方法，通过method参数传入
- en: The HTTP headers to send, which are passed as a JavaScript object with attribute-value
    pairs for each header in the attribute headers
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要发送的HTTP头，作为具有每个头属性-值对的JavaScript对象，在attribute headers中传入每个头
- en: A body to pass to the client for `PATCH`, `POST`, and `PUT` method requests,
    in the body attribute
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于`PATCH`、`POST`和`PUT`方法请求，要传递给客户端的正文，在body属性中传入
- en: A timeout indicating how long to wait in milliseconds in the timeout attribute
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 超时时间，在超时属性中以毫秒为单位表示等待多长时间
- en: Whether or not to gzip the response, indicated by setting the gzip attribute
    to `true`
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否对响应进行gzip压缩，通过设置gzip属性为`true`来指示
- en: Other options are available as well. See the Node.js documentation for details
    at [https://nodejs.org/api/index.html](https://nodejs.org/api/index.html).
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他选项可供选择。详情请参阅Node.js文档，网址为[https://nodejs.org/api/index.html](https://nodejs.org/api/index.html)。
- en: See also
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The Node.js request module has its documentation on GitHub at [https://github.com/request/request](https://github.com/request/request)
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js请求模块的文档在GitHub上，网址为[https://github.com/request/request](https://github.com/request/request)
