["```js\n> npm install aurelia-i18n i18next --save\n\n```", "```js\n> npm install i18next-xhr-backend --save\n\n```", "```js\n{ \n  \"name\": \"aurelia-i18n\", \n  \"path\": \"../node_modules/aurelia-i18n/dist/amd\", \n  \"main\": \"aurelia-i18n\" \n}, \n{ \n  \"name\": \"i18next\", \n  \"path\": \"../node_modules/i18next/dist/umd\", \n  \"main\": \"i18next\" \n}, \n{ \n  \"name\": \"i18next-xhr-backend\", \n  \"path\": \"../node_modules/i18next-xhr-backend/dist/umd\", \n  \"main\": \"i18nextXHRBackend\" \n}, \n\n```", "```js\nimport Backend from 'i18next-xhr-backend'; \n//Omitted snippet... \nexport function configure(aurelia) { \n  aurelia.use \n    .standardConfiguration() \n    .feature('validation') \n    .feature('resources') \n    .feature('contacts') \n .plugin('aurelia-i18n', (i18n) => { \n      i18n.i18next.use(Backend); \n\n      return i18n.setup({ \n        backend: { \n          loadPath: './locales/{{lng}}/{{ns}}.json',  \n        }, \n        lng : 'en', \n        fallbackLng : 'en', \n        debug : environment.debug \n      }); \n    }); \n  //Omitted snippet... \n}); \n\n```", "```js\n{} \n\n```", "```js\n<template> \n  <select class=\"navbar-btn form-control\"  \n          value.bind=\"selectedLocale\"  \n          disabled.bind=\"isChangingLocale\"> \n    <option repeat.for=\"locale of locales\" value.bind=\"locale\"> \n      ${locale} \n    </option> \n  </select> \n</template> \n\n```", "```js\nimport {inject, bindable} from 'aurelia-framework'; \nimport {I18N} from 'aurelia-i18n'; \n\n@inject(I18N) \nexport class LocalePickerCustomElement { \n\n  @bindable selectedLocale; \n  @bindable locales = ['en', 'fr']; \n\n  constructor(i18n) { \n    this.i18n = i18n; \n\n    this.selectedLocale = this.i18n.getLocale(); \n    this.isChangingLocale = false; \n  } \n\n  selectedLocaleChanged() { \n    this.isChangingLocale = true; \n    this.i18n.setLocale(this.selectedLocale).then(() => { \n      this.isChangingLocale = false; \n    }); \n  } \n} \n\n```", "```js\n{} \n\n```", "```js\n<!-- Omitted snippet...--> \n<form class=\"navbar-search pull-right\"> \n  <locale-picker></locale-picker> \n</form> \n<ul class=\"nav navbar-nav navbar-right\"> \n  <!-- Omitted snippet...--> \n</ul> \n<!-- Omitted snippet...--> \n\n```", "```js\n{ \n  \"404\": { \n    \"explanation\": \"The page cannot be found.\", \n    \"title\": \"Something is broken...\" \n  } \n} \n\n```", "```js\n{ \n  \"404\": { \n    \"explanation\": \"La page est introuvable.\", \n    \"title\": \"Quelque-chose ne fonctionne pas...\" \n  } \n} \n\n```", "```js\n<template> \n  <h1 t=\"404.title\"></h1> \n  <p t=\"404.explanation\"></p> \n</template> \n\n```", "```js\n<h1 t=\"404.title\">The page cannot be found.</h1> \n<p t=\"404.explanation\">Something is broken...</p> \n\n```", "```js\n<input type=\"text\" value.bind=\"contact.firstName\"  \n       t=\"[placeholder]contacts.firstName\"> \n\n```", "```js\n<label t=\"[title] help; text\"> \n\n```", "```js\n{ \"message\": \"Hi {{name}}, welcome back!\" } \n\n```", "```js\n<p t=\"message\" t-params.bind=\"{ name: 'Chuck' }\"></p> \n\n```", "```js\n<p>${'explanation' | t}</p> \n\n```", "```js\n<p title.bind=\" 'explanation' | t \"></p> \n\n```", "```js\n{ \"message\": \"Hi {{name}}, welcome back!\" } \n\n```", "```js\n<p>${'message' | t: { name: 'Chuck' } }</p> \n\n```", "```js\n<p ></p> \n\n```", "```js\ntr(key: string, parameters?: object): string \n\n```", "```js\nlet message = i18n.tr('message', { name: 'Chuck' }); \n\n```", "```js\n${1234 | nf} \n\n```", "```js\n${1234 | nf: myNumberFormat} \n\n```", "```js\n${1234 | nf: { currency: 'EUR' }} \n${1234 | nf: { currency: 'EUR' }: 'fr'} \n\n```", "```js\n${1234 & nf} \n\n```", "```js\nnf(options?: object, locales?: string | string[]): Intl.NumberFormat \n\n```", "```js\nlet value = i18n.nf({ currency: 'EUR' }).format(1234); \n\n```", "```js\n${contact.birthday | df} \n\n```", "```js\n${contact.birthday | df: myDateTimeFormat} \n\n```", "```js\n${contact.birthday | df: { timeZone: 'UTC' }} \n${contact.birthday | df: { timeZone: 'UTC' }: 'fr'} \n\n```", "```js\n${contact.birthday & df} \n\n```", "```js\ndf(options?: object, locales?: string | string[]): Intl.DateTimeFormat \n\n```", "```js\nlet value = i18n.df({ timeZone: 'UTC' }).format(new Date()); \n\n```", "```js\n//Omitted snippet... \n${contact.modifiedAt | rt} \n//Omitted snippet... \n\n```", "```js\n//Omitted snippet... \n${contact.modifiedAt | rt & signal: 'rt-update'} \n//Omitted snippet... \n\n```", "```js\nimport {inject} from 'aurelia-framework';  \nimport {Router} from 'aurelia-router'; \nimport {BindingSignaler} from 'aurelia-templating-resources';   \nimport {ContactGateway} from '../services/gateway'; \nimport {Contact} from '../models/contact'; \n\n@inject(ContactGateway, Router, BindingSignaler) \nexport class ContactDetails { \n\n  constructor(contactGateway, router, signaler) { \n    this.contactGateway = contactGateway; \n    this.router = router; \n    this.signaler = signaler; \n  } \n\n  activate(params, config) { \n    return this.contactGateway.getById(params.id) \n      .then(contact => { \n        this.contact = Contact.fromObject(contact); \n        config.navModel.setTitle(this.contact.fullName); \n        this.rtUpdater = setInterval( \n          () => this.signaler.signal('rt-update'), 1000); \n      }); \n  } \n\n  //Omitted snippet... \n\n  deactivate() { \n    if (this.rtUpdater) { \n      clearInterval(this.rtUpdater); \n      this.rtUpdater = null; \n    } \n  } \n} \n\n```", "```js\n//Omitted snippet... \n${contact.modifiedAt | rt  \n  & signal:'rt-update':'aurelia-translation-signal'} \n//Omitted snippet... \n\n```", "```js\ngetRelativeTime(time: Date): string \n\n```", "```js\nimport {inject} from 'aurelia-framework'; \nimport {I18N} from 'aurelia-i18n'; \nimport {ValidationParser, ValidationMessageProvider}  \n  from 'aurelia-validation'; \n\n@inject(ValidationParser, I18N) \nexport class I18nValidationMessageProvider  \n  extends ValidationMessageProvider { \n\n  options = { \n    messageKeyPrefix: 'validation.messages.', \n    propertyNameKeyPrefix: 'validation.properties.' \n  }; \n\n  constructor(parser, i18n) { \n    super(parser); \n    this.i18n = i18n; \n  } \n\n  getMessage(key) { \n    let translationKey = key.includes('.') || key.includes(':')  \n      ? key  \n      : `${this.options.messageKeyPrefix}${key}`; \n    let translation = this.i18n.tr(translationKey); \n    if (translation !== translationKey) { \n      return this.parser.parseMessage(translation); \n    } \n    return super.getMessage(key); \n  } \n\n  getDisplayName(propertyName) { \n    let translationKey =  \n      `${this.options.propertyNameKeyPrefix}${propertyName}`; \n    let translation = this.i18n.tr(translationKey); \n    if (translation !== translationKey) { \n      return translation; \n    } \n    return super.getDisplayName(propertyName); \n  } \n} \n\n```", "```js\nimport {ValidationMessageProvider} from 'aurelia-validation'; \nimport './rules'; \nimport {BootstrapFormValidationRenderer}  \n  from './bootstrap-form-validation-renderer'; \nimport {I18nValidationMessageProvider}  \n  from './i18n-validation-message-provider'; \n\nexport function configure(config) { \n  config.plugin('aurelia-validation'); \n  config.container.registerHandler('bootstrap-form',  \n    container => container.get(BootstrapFormValidationRenderer)); \n\n config.container.registerSingleton( \n    ValidationMessageProvider, I18nValidationMessageProvider); \n} \n\n```", "```js\n{ \n  //Omitted snippet... \n  \"validation\": { \n    \"default\": \"${$displayName} is invalid.\", \n    \"required\": \"${$displayName} is required.\", \n    \"matches\": \"${$displayName} is not correctly formatted.\", \n    \"email\": \"${$displayName} is not a valid email.\", \n    \"minLength\": \"${$displayName} must be at least ${$config.length} character${$config.length === 1 ? '' : 's'}.\", \n    \"maxLength\": \"${$displayName} cannot be longer than ${$config.length} character${$config.length === 1 ? '' : 's'}.\", \n    \"minItems\": \"${$displayName} must contain at least ${$config.count} item${$config.count === 1 ? '' : 's'}.\", \n    \"maxItems\": \"${$displayName} cannot contain more than ${$config.count} item${$config.count === 1 ? '' : 's'}.\", \n    \"equals\": \"${$displayName} must be ${$config.expectedValue}.\", \n    \"date\": \"${$displayName} must be a valid date.\", \n    \"notEmpty\": \"${$displayName} must contain at least one item.\", \n    \"maxFileSize\": \"${$displayName} must be smaller than ${$config.maxSize} bytes.\", \n    \"fileExtension\": \"${$displayName} must have one of the following extensions: ${$config.extensions.join(', ')}.\" \n  },  \n  \"properties\": { \n    \"address\": \"Address\", \n    \"birthday\": \"Birthday\", \n    \"city\": \"City\", \n    \"company\": \"Company\", \n    \"country\": \"Country\", \n    \"firstName\": \"First name\", \n    \"lastName\": \"Last name\", \n    \"note\": \"Note\", \n    \"number\": \"Number\", \n    \"postalCode\": \"Postal code\",  \n    \"state\": \"State\", \n    \"street\": \"Street\", \n    \"username\": \"Username\" \n  }, \n  //Omitted snippet... \n} \n\n```", "```js\nimport {EventAggregator} from 'aurelia-event-aggregator'; \n//Omitted snippet... \n@inject(ContactGateway, NewInstance.of(ValidationController),  \n  Router, EventAggregator) \nexport class ContactCreation { \n\n  contact = new Contact(); \n\n  constructor(contactGateway, validationController,  \n              router, events) { \n    this.contactGateway = contactGateway; \n    this.validationController = validationController; \n    this.router = router; \n    this.events = events; \n  } \n\n  activate() { \n    this.i18nChangedSubscription = this.events.subscribe( \n      'i18n:locale:changed',  \n      () => { this.validationController.validate(); }); \n  }\n deactivate() { \n    if (this.i18nChangedSubscription) { \n      this.i18nChangedSubscription.dispose(); \n      this.i18nChangedSubscription = null; \n    } \n  } \n  //Omitted snippet... \n} \n\n```", "```js\nimport {Router} from 'aurelia-router';  \nimport {EventAggregator} from 'aurelia-event-aggregator'; \n//Omitted snippet... \nexport function configure(aurelia) { \n  aurelia.use \n    .standardConfiguration() \n    .feature('validation') \n    .feature('resources') \n    .feature('contacts') \n    .plugin('aurelia-i18n', (i18n) => { \n      i18n.i18next.use(Backend); \n\n      return i18n.setup({ \n        backend: { \n          loadPath: './locales/{{lng}}/{{ns}}.json',  \n        }, \n        lng : 'en', \n        fallbackLng : 'en', \n        debug : environment.debug \n      }).then(() => { \n        const router = aurelia.container.get(Router);  \n        const events = aurelia.container.get(EventAggregator); \n        router.transformTitle = title => i18n.tr(title);  \n        events.subscribe('i18n:locale:changed', () => { \n          router.updateTitle(); \n        }); \n      }); \n    }); \n  //Omitted snippet... \n}); \n\n```"]