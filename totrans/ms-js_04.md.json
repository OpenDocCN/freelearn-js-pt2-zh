["```js\n//programming to an interface 'List' and not implementation 'ArrayList'\nList theList = new ArrayList();\n```", "```js\nArrayList theList = new ArrayList();\n```", "```js\nList theList = new LinkedList();\n```", "```js\nvar nothing = {};\nvar author = {\n  \"firstname\": \"Douglas\",\n  \"lastname\": \"Crockford\"\n}\n```", "```js\nvar author = {\n  firstname : \"Douglas\",\n  lastname : \"Crockford\",\n  book : {\n    title:\"JavaScript- The Good Parts\",\n    pages:\"172\"\n  }\n};\n```", "```js\nconsole.log(author['firstname']); //Douglas\nconsole.log(author.lastname);     //Crockford\nconsole.log(author.book.title);   // JavaScript- The Good Parts\n```", "```js\nconsole.log(author.age);\n```", "```js\nconsole.log(author.age || \"No Age Found\");\n```", "```js\nauthor.book.pages = 190;\nconsole.log(author.book.pages); //190\n```", "```js\nvar meetingRoom = {};\nmeetingRoom.book = function(roomId){\n  console.log(\"booked meeting room -\"+roomId);\n}\nmeetingRoom.book(\"VL\");\n```", "```js\nvar author = {};\nauthor.firstname = 'Douglas';\nauthor.lastname = 'Crockford';\n```", "```js\nnew operator to instantiate an object via constructors. However, there is no concept of a class in JavaScript, and it is important to note that the new operator is applied to the constructor function. To clearly understand this, let's look at the following example:\n```", "```js\n//A function that returns nothing and creates nothing\nfunction Player() {}\n\n//Add a function to the prototype property of the function\nPlayer.prototype.usesBat = function() {\n  return true;\n}\n\n//We call player() as a function and prove that nothing happens\nvar crazyBob = Player();\nif(crazyBob === undefined){\n  console.log(\"CrazyBob is not defined\");\n}\n\n//Now we call player() as a constructor along with 'new' \n//1\\. The instance is created\n//2\\. method usesBat() is derived from the prototype of the function\nvar swingJay = new Player();\nif(swingJay && swingJay.usesBat && swingJay.usesBat()){\n  console.log(\"SwingJay exists and can use bat\");\n}\n```", "```js\nfunction Player() {\n  this.isAvailable = function() {\n    return \"Instance method says - he is hired\";\n  };\n}\nPlayer.prototype.isAvailable = function() {\n  return \"Prototype method says - he is Not hired\";\n};\nvar crazyBob = new Player();\nconsole.log(crazyBob.isAvailable());\n```", "```js\n    function globalAlias(){\n      return this;\n    }\n    console.log(globalAlias()); //[object Window]\n    ```", "```js\n    var f = {\n      name: \"f\",\n      func: function () {\n        return this; \n      }\n    };\n    console.log(f.func());  \n    //prints - \n    //[object Object] {\n    //  func: function () {\n    //    return this; \n    //  },\n    //  name: \"f\"\n    //}\n    ```", "```js\n    var member = \"global\";\n    function f()\n    {\n      this.member = \"f\";\n    }\n    var o= new f(); \n    console.log(o.member); // f\n    ```", "```js\nfunction Player() {\n  isAvailable=false;\n}\nvar crazyBob = new Player();\nPlayer.prototype.isAvailable = function() {\n  return isAvailable;\n};\nconsole.log(crazyBob.isAvailable()); //false\n```", "```js\nfunction Player(name,sport,age,country){ \n\n  this.constructor.noOfPlayers++;\n\n  // Private Properties and Functions\n  // Can only be viewed, edited or invoked by privileged members\n  var retirementAge = 40;\n  var available=true;\n  var playerAge = age?age:18;\n  function isAvailable(){ return available && (playerAge<retirementAge); } \n  var playerName=name ? name :\"Unknown\";\n  var playerSport = sport ? sport : \"Unknown\";\n\n  // Privileged Methods\n  // Can be invoked from outside and can access private members\n  // Can be replaced with public counterparts\n  this.book=function(){ \n    if (!isAvailable()){ \n      this.available=false;\n    } else {\n      console.log(\"Player is unavailable\");\n    } \n  };\n  this.getSport=function(){ return playerSport; }; \n  // Public properties, modifiable from anywhere\n  this.batPreference=\"Lefty\";\n  this.hasCelebGirlfriend=false;\n  this.endorses=\"Super Brand\";\n} \n\n// Public methods - can be read or written by anyone\n// Can only access public and prototype properties\nPlayer.prototype.switchHands = function(){ this.batPreference=\"righty\"; }; \nPlayer.prototype.dateCeleb = function(){ this.hasCelebGirlfriend=true; } ;\nPlayer.prototype.fixEyes = function(){ this.wearGlasses=false; };\n\n// Prototype Properties - can be read or written by anyone (or overridden)\nPlayer.prototype.wearsGlasses=true;\n\n// Static Properties - anyone can read or write\nPlayer.noOfPlayers = 0;\n\n(function PlayerTest(){ \n  //New instance of the Player object created.\n  var cricketer=new Player(\"Vivian\",\"Cricket\",23,\"England\"); \n  var golfer =new Player(\"Pete\",\"Golf\",32,\"USA\"); \n  console.log(\"So far there are \" + Player.noOfPlayers + \" in the guild\");\n\n  //Both these functions share the common 'Player.prototype.wearsGlasses' variable\n  cricketer.fixEyes(); \n  golfer.fixEyes(); \n\n  cricketer.endorses=\"Other Brand\";//public variable can be updated \n\n  //Both Player's public method is now changed via their prototype \n  Player.prototype.fixEyes=function(){ \n    this.wearGlasses=true;\n  };\n  //Only Cricketer's function is changed\n  cricketer.switchHands=function(){\n    this.batPreference=\"undecided\";\n  };\n\n})();\n```", "```js\nfunction Person() {}\nPerson.prototype.cry = function() { \n  console.log(\"Crying\");\n}\nfunction Child() {}\nChild.prototype = {cry: Person.prototype.cry};\nvar aChild = new Child();\nconsole.log(aChild instanceof Child);  //true\nconsole.log(aChild instanceof Person); //false\nconsole.log(aChild instanceof Object); //true\n```", "```js\nSubClass.prototype = new SuperClass();\nChild.prototype = new Person();\n```", "```js\nfunction Person() {}\nPerson.prototype.cry = function() { \n  console.log(\"Crying\");\n}\nfunction Child() {}\nChild.prototype = new Person();\nvar aChild = new Child();\nconsole.log(aChild instanceof Child);  //true\nconsole.log(aChild instanceof Person); //true\nconsole.log(aChild instanceof Object); //true\n```", "```js\nfunction Employee() {\n  this.name = '';\n  this.dept = 'None';\n  this.salary = 0.00;\n}\n```", "```js\nfunction Manager() {\n Employee.call(this);\n  this.reports = [];\n}\nManager.prototype = Object.create(Employee.prototype);\n\n```", "```js\nfunction IndividualContributor() {\n  Employee.call(this);\n  this.active_projects = [];\n}\nIndividualContributor.prototype = Object.create(Employee.prototype);\n\nfunction TeamLead() {\n  Manager.call(this);\n  this.dept = \"Software\";\n  this.salary = 100000;\n}\nTeamLead.prototype = Object.create(Manager.prototype);\n\nfunction Engineer() {\n  TeamLead.call(this);\n  this.dept = \"JavaScript\";\n  this.desktop_id = \"8822\" ;\n  this.salary = 80000;\n}\nEngineer.prototype = Object.create(TeamLead.prototype);\n```", "```js\nvar genericEmployee = new Employee();\nconsole.log(genericEmployee);\n```", "```js\n[object Object] {\n  dept: \"None\",\n  name: \"\",\n  salary: 0\n}\n```", "```js\nvar karen = new Manager();\nkaren.name = \"Karen\";\nkaren.reports = [1,2,3];\nconsole.log(karen);\n```", "```js\n[object Object] {\n  dept: \"None\",\n  name: \"Karen\",\n  reports: [1, 2, 3],\n  salary: 0\n}\n```", "```js\nvar jason = new TeamLead();\njason.name = \"Json\";\nconsole.log(jason);\n```", "```js\n[object Object] {\n  dept: \"Software\",\n  name: \"Json\",\n  reports: [],\n  salary: 100000\n}\n```", "```js\nEmployee.prototype.name = \"Undefined\";\n```", "```js\nfunction Employee() {\n  this.dept = 'None';\n  this.salary = 0.00;\n}\nEmployee.prototype.name = '';\nfunction Manager() {\n  this.reports = [];\n}\nManager.prototype = new Employee();\nvar sandy = new Manager();\nvar karen = new Manager();\n\nEmployee.prototype.name = \"Junk\";\n\nconsole.log(sandy.name);\nconsole.log(karen.name);\n```", "```js\nString object to add a reverse() method to reverse a string. This method does not exist in the native String object but by manipulating String's prototype, we add this method to String:\n```", "```js\nString.prototype.reverse = function() {\n  return Array.prototype.reverse.apply(this.split('')).join('');\n};\nvar str = 'JavaScript';\nconsole.log(str.reverse()); //\"tpircSavaJ\"\n```", "```js\nvar person = {\n  firstname: \"Albert\",\n  lastname: \"Einstein\",\n  setLastName: function(_lastname){\n    this.lastname= _lastname;\n  },\n  setFirstName: function (_firstname){\n    this.firstname= _firstname;\n  },\n  getFullName: function (){\n    return this.firstname + ' '+ this.lastname;\n  }  \n};\nperson.setLastName('Newton');\nperson.setFirstName('Issac');\nconsole.log(person.getFullName());\n```", "```js\nvar person = {\n  firstname: \"Albert\",\n  lastname: \"Einstein\",\n  get fullname() {\n    return this.firstname +\" \"+this.lastname;\n  },\n  set fullname(_name){\n    var words = _name.toString().split(' ');\n    this.firstname = words[0];\n    this.lastname = words[1];\n  }\n};\nperson.fullname = \"Issac Newton\";\nconsole.log(person.firstname); //\"Issac\"\nconsole.log(person.lastname);  //\"Newton\"\nconsole.log(person.fullname);  //\"Issac Newton\"\n```", "```js\nvar person = {\n  firstname: \"Albert\",\n  lastname: \"Einstein\",\n};\nObject.defineProperty(person, 'fullname', {\n  get: function() {\n    return this.firstname + ' ' + this.lastname;\n  },\n  set: function(name) {\n    var words = name.split(' ');\n    this.firstname = words[0];\n    this.lastname = words[1];\n  }\n});\nperson.fullname = \"Issac Newton\";\nconsole.log(person.firstname); //\"Issac\"\nconsole.log(person.lastname);  //\"Newton\"\nconsole.log(person.fullname);  //\"Issac Newton\"\n```", "```js\n    var _ = require('underscore');\n    var testobj = {\n      name: 'Albert',\n      age : 90,\n      profession: 'Physicist'\n    };\n    console.log(_.keys(testobj));\n    //[ 'name', 'age', 'profession' ]\n    ```", "```js\n    var _ = require('underscore');\n    function Scientist() {\n      this.name = 'Albert';\n    }\n    Scientist.prototype.married = true;\n    aScientist = new Scientist();\n    console.log(_.keys(aScientist)); //[ 'name' ]\n    console.log(_.allKeys(aScientist));//[ 'name', 'married' ]\n\n    ```", "```js\n    var _ = require('underscore');\n    function Scientist() {\n      this.name = 'Albert';\n    }\n    Scientist.prototype.married = true;\n    aScientist = new Scientist();\n    console.log(_.values(aScientist)); //[ 'Albert' ]\n    ```", "```js\n    var _ = require('underscore');\n    function Scientist() {\n      this.name = 'Albert';\n      this.age = 90;\n    }\n    aScientist = new Scientist();\n    var lst = _.mapObject(aScientist, function(val,key){\n      if(key===\"age\"){\n        return val + 10;\n      } else {\n        return val;\n      }\n    });\n    console.log(lst); //{ name: 'Albert', age: 100 }\n    ```", "```js\n    var _ = require('underscore');\n    var testobj = {\n      name: 'Albert',\n      age : 90,\n      profession: 'Physicist'\n    };\n    console.log(_.pick(testobj, 'name','age')); //{ name: 'Albert', age: 90 }\n    console.log(_.pick(testobj, function(val,key,object){\n      return _.isNumber(val);\n    })); //{ age: 90 }\n    ```"]