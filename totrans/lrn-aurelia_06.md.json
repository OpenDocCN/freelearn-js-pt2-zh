["```js\nimport {ValidationRules} from 'aurelia-validation'; \n\n```", "```js\nimport {PhoneNumber} from './phone-number'; \nimport {EmailAddress} from './email-address'; \nimport {Address} from './address'; \nimport {SocialProfile} from './social-profile'; \n\n```", "```js\nimport environment from 'environment'; \n\n```", "```js\nimport {Contact} from '../models/contact'; \n\n```", "```js\nimport {ContactGateway} from '../services/gateway'; \n\n```", "```js\nimport {Contact} from '../models/contact'; \n\n```", "```js\n<require from=\"./form.html\" as=\"contact-form\"></require> \n\n```", "```js\nconfig.map([ \n  { route: '', redirect: 'contacts' }, \n  { route: 'contacts', name: 'contacts',  \n    moduleId: 'contacts/components/list', nav: true, title: 'Contacts' }, \n  { route: 'contacts/new', name: 'contact-creation',  \n    moduleId: 'contacts/components/creation', title: 'New contact' }, \n  { route: 'contacts/:id', name: 'contact-details',  \n    moduleId: 'contacts/components/details' }, \n  { route: 'contacts/:id/edit', name: 'contact-edition',  \n    moduleId: 'contacts/components/edition' }, \n  { route: 'contacts/:id/photo', name: 'contact-photo',  \n    moduleId: 'contacts/components/photo' }, \n]); \n\n```", "```js\nexport class App { \n  configureRouter(config, router) { \n    this.router = router; \n    config.title = 'Learning Aurelia'; \n    config.map([ \n { route: '', redirect: 'contacts' }, \n { route: 'contacts', name: 'contacts', moduleId: 'contacts/main', \n nav: true, title: 'Contacts' }, \n ]); \n    config.mapUnknownRoutes('not-found'); \n  } \n} \n\n```", "```js\nimport {inlineView} from 'aurelia-framework'; \n\n@inlineView('<template><router-view></router-view></template>') \nexport class Contacts { \n  configureRouter(config) { \n    config.map([ \n      { route: '', name: 'contacts',  \n        moduleId: './components/list', title: 'Contacts' }, \n      { route: 'new', name: 'contact-creation',  \n        moduleId: './components/creation', title: 'New contact' }, \n      { route: ':id', name: 'contact-details',  \n        moduleId: './components/details' }, \n      { route: ':id/edit', name: 'contact-edition',  \n        moduleId: './components/edition' }, \n      { route: ':id/photo', name: 'contact-photo',  \n        moduleId: './components/photo' }, \n    ]); \n  } \n} \n\n```", "```js\nimport {Router} from 'aurelia-router'; \n\nconst routes = [ \n  { route: 'contacts', name: 'contacts',  \n    moduleId: 'contacts/components/list', nav: true, title: 'Contacts' }, \n  { route: 'contacts/new', name: 'contact-creation',  \n    moduleId: 'contacts/components/creation', title: 'New contact' }, \n  { route: 'contacts/:id', name: 'contact-details',  \n    moduleId: 'contacts/components/details' }, \n  { route: 'contacts/:id/edit', name: 'contact-edition',  \n    moduleId: 'contacts/components/edition' }, \n  { route: 'contacts/:id/photo', name: 'contact-photo',  \n    moduleId: 'contacts/components/photo' }, \n]; \n\nexport function configure(config) { \n  const router = config.container.get(Router); \n  routes.forEach(r => router.addRoute(r)); \n} \n\n```", "```js\n//Omitted snippet... \nexport function configure(aurelia) { \n  aurelia.use \n    .standardConfiguration() \n    .feature('validation') \n    .feature('resources') \n    .feature('contacts'); \n  //Omitted snippet... \n} \n\n```", "```js\nexport class App { \n  configureRouter(config, router) { \n    this.router = router; \n    config.title = 'Learning Aurelia'; \n    config.map([ \n { route: '', redirect: 'contacts' }, \n ]); \n    config.mapUnknownRoutes('not-found'); \n  } \n} \n\n```", "```js\nfunction findDefaultRoute(router) { \n  return router.navigation[0].relativeHref; \n} \n\nexport class App { \n  configureRouter(config, router) { \n    this.router = router; \n    config.title = 'Learning Aurelia'; \n    config.map([ \n      { route: '', redirect: findDefaultRoute(router) }, \n    ]); \n    config.mapUnknownRoutes('not-found'); \n  } \n} \n\n```", "```js\nimport {inlineView} from 'aurelia-framework'; \n\n@inlineView('<template><router-view></router-view></template>') \nexport class Contacts { \n  configureRouter(config) { \n    config.map([ \n      { route: '', name: 'contacts',  \n        moduleId: './components/list', title: 'Contacts' }, \n      { route: 'new', name: 'contact-creation',  \n        moduleId: './components/creation', title: 'New contact' }, \n      { route: ':id', name: 'contact-details',  \n        moduleId: './components/details' }, \n      { route: ':id/edit', name: 'contact-edition',  \n        moduleId: './components/edition' }, \n      { route: ':id/photo', name: 'contact-photo',  \n        moduleId: './components/photo' }, \n    ]); \n  } \n} \n\n```", "```js\nimport {Router} from 'aurelia-router'; \n\nexport function configure(config) { \n  const router = config.container.get(Router); \n  router.addRoute({ route: 'contacts', name: 'contacts', \n moduleId: 'contacts/main', nav: true, title: 'Contacts' }); \n} \n\n```", "```js\nimport {inject} from 'aurelia-framework'; \nimport {EventAggregator} from 'aurelia-event-aggregator'; \n\n@inject(EventAggregator) \nexport class SomeComponent { \n  constructor(eventAggregator) { \n    this.eventAggregator = eventAggregator; \n  }       \n\n  doSomething(args) { \n    this.eventAggregator.publish('something-happened', { args }); \n  } \n} \n\n```", "```js\nimport {inject} from 'aurelia-framework'; \nimport {EventAggregator} from 'aurelia-event-aggregator'; \n\n@inject(EventAggregator) \nexport class AnotherComponent { \n  constructor(eventAggregator) { \n    this.eventAggregator = eventAggregator; \n  }       \n\n  activate() { \n    this.subscription = this.eventAggregator.subscribe('something-happened', e => { \n      console.log('Something happened.', e.args); \n    }); \n  } \n\n  deactivate() { \n    this.subscription.dispose(); \n  } \n} \n\n```", "```js\nimport {includeEventsIn} from 'aurelia-event-aggregator'; \n\nexport class SomeModel { \n  constructor() { \n    includeEventsIn(this); \n  }       \n\n  doSomething() { \n    this.publish('something-happened'); \n  } \n} \n\n```", "```js\nconst model = new SomeModel(); \nmodel.subscribe('something-happened', () => { \n  console.log('Something happened!'); \n}); \n\n```", "```js\nexport class ContactCreated { \n  constructor(contact) { \n    this.contact = contact; \n  } \n} \n\n```", "```js\neventAggregator.publish(new ContactCreated(newContact)); \n\n```", "```js\neventAggregator.subscribe(ContactCreated, e => { \n  console.log(e.contact.fullName); \n}); \n\n```", "```js\nexport class ContactEvent { \n  constructor(contact) { \n    this.contact = contact; \n  } \n} \n\nexport class ContactCreated extends ContactEvent { \n  constructor(contact) { \n    super(contact); \n  } \n} \n\n```", "```js\neventAggregator.subscribe(ContactCreated, e => { \n  console.log('A contact was created'); \n}); \neventAggregator.subscribe(ContactEvent, e => { \n  console.log('Something happened to a contact'); \n}); \n\n```", "```js\n> npm install socket.io-client --save\n\n```", "```js\n{ \n  \"name\": \"socket.io-client\", \n  \"path\": \"../node_modules/socket.io-client/dist\", \n  \"main\": \"socket.io.min\" \n}, \n\n```", "```js\nimport {inject} from 'aurelia-framework'; \nimport io from 'socket.io-client'; \nimport environment from 'environment'; \nimport {EventAggregator} from 'aurelia-event-aggregator'; \nimport {Contact} from '../models/contact'; \n\n@inject(EventAggregator) \nexport class ContactEventDispatcher { \n\n  constructor(eventAggregator) { \n    this.eventAggregator = eventAggregator; \n  } \n\n  activate() { \n    if (!this.connection) { \n      this.connection = io(environment.contactsUrl); \n\n      this.connecting = new Promise(resolve => { \n        this.connection.on('contacts.loaded', e => { \n          this.eventAggregator.publish('contacts.loaded', { \n            contacts: e.contacts.map(Contact.fromObject) \n          }); \n          resolve(); \n        }); \n      }); \n    } \n\n    return this.connecting; \n  } \n\n  deactivate() { \n    this.connection.close(); \n    this.connection = null; \n    this.connecting = null; \n  } \n} \n\n```", "```js\n//Omitted snippet... \nexport class ContactEventDispatcher { \n  //Omitted snippet... \n\n  activate() { \n    if (!this.connection) { \n      this.connection = io(environment.contactsUrl); \n\n      this.connecting = new Promise(resolve => { \n        this.connection.on('contacts.loaded', e => { \n          this.eventAggregator.publish('contacts.loaded', { \n            contacts: e.contacts.map(Contact.fromObject) \n          }); \n          resolve(); \n        }); \n      }); \n\n      this.connection.on('contact.created', e => { \n this.eventAggregator.publish('contact.created', { \n contact: Contact.fromObject(e.contact) \n }); \n }); \n this.connection.on('contact.updated', e => { \n this.eventAggregator.publish('contact.updated', { \n contact: Contact.fromObject(e.contact) \n }); \n }); \n this.connection.on('contact.deleted', e => { \n this.eventAggregator.publish('contact.deleted', { \n contact: Contact.fromObject(e.contact) \n }); \n }); \n    } \n\n    return this.connecting; \n  } \n\n  //Omitted snippet... \n} \n\n```", "```js\nimport {Router} from 'aurelia-router'; \nimport {ContactEventDispatcher} from './services/event-dispatcher'; \n\nexport function configure(config) { \n  const router = config.container.get(Router); \n  router.addRoute({ route: 'contacts', name: 'contacts', moduleId: 'contacts/main', nav: true, title: 'Contacts' }); \n\n config.postTask(() => {\nconst dispatcher = config.container.get(ContactEventDispatcher); \n return dispatcher.activate();\n }); \n} \n\n```", "```js\n> npm install humane-js --save\n\n```", "```js\n{ \n  \"name\": \"humane-js\", \n  \"path\": \"../node_modules/humane-js\", \n  \"main\": \"humane.min\" \n}, \n\n```", "```js\nimport {inject, noView} from 'aurelia-framework'; \nimport {EventAggregator} from 'aurelia-event-aggregator'; \nimport Humane from 'humane-js'; \n\n@noView \n@inject(EventAggregator, Humane) \nexport class ContactNotifications { \n\n  constructor(events, humane) { \n    this.events = events; \n    this.humane = humane; \n  } \n\n  attached() { \n    this.subscriptions = [ \n      this.events.subscribe('contact.created', e => { \n        this.humane.log(`Contact '${e.contact.fullName}' was created.`); \n      }), \n      this.events.subscribe('contact.updated', e => { \n        this.humane.log(`Contact '${e.contact.fullName}' was updated.`); \n      }), \n      this.events.subscribe('contact.deleted', e => { \n        this.humane.log(`Contact '${e.contact.fullName}' was deleted.`); \n      }) \n    ]; \n  } \n\n  detached() { \n    this.subscriptions.forEach(s => s.dispose()); \n    this.subscriptions = null; \n  } \n} \n\n```", "```js\n<template> \n  <require from=\"./components/notifications\"></require>\n<contact-notifications></contact-notifications> \n  <router-view></router-view> \n</template> \n\n```", "```js\n<!DOCTYPE html> \n<html> \n  <head> \n    <!-- Omitted snippet... --> \n <link href=\"node_modules/humane-js/themes/flatty.css\" rel=\"stylesheet\"> \n  </head> \n  <body> \n    <!-- Omitted snippet... --> \n  </body> \n</html> \n\n```", "```js\n<!DOCTYPE html> \n<html> \n  <head> \n    <!-- Omitted snippet... --> \n  </head> \n  <body> \n    <div aurelia-app=\"main\"> \n      <!-- Omitted snippet... --> \n    </div> \n  </body> \n</html> \n\n```", "```js\n> npm install -g http-server\n\n```", "```js\n> au build\n\n```", "```js\n> http-server -o -c-1\n\n```", "```js\nimport {inject} from 'aurelia-framework'; \nimport {EventAggregator} from 'aurelia-event-aggregator';  \nimport {Contact} from '../models/contact'; \n\n@inject(EventAggregator) \nexport class ContactStore { \n\n  contacts = []; \n\n  constructor(eventAggregator) { \n    this.eventAggregator = eventAggregator; \n  } \n\n  activate() { \n    this.subscriptions = []; \n  } \n\n  detached() { \n    this.subscriptions.forEach(s => s.dispose()); \n    this.subscriptions = null; \n  } \n\n  getById(id) { \n    const index = this.contacts.findIndex(c => c.id == id); \n    if (index < 0) { \n      return Promise.reject(); \n    } \n    return Promise.resolve(Contact.fromObject(this.contacts[index])); \n  } \n} \n\n```", "```js\n// Omitted snippet... \nexport class ContactStore { \n  // Omitted snippet... \n\n  activate() { \n    this.subscriptions = [ \n      eventAggregator.subscribe('contacts.loaded', e => { \n this.contacts.splice(0); \n this.contacts.push.apply(this.contacts, e.contacts); \n }), \n eventAggregator.subscribe('contact.created', e => { \n const index = this.contacts.findIndex(c => c.id == e.contact.id); \n if (index < 0) { \n this.contacts.push(e.contact); \n } \n }), \n eventAggregator.subscribe('contact.updated', e => { \n const index = this.contacts.findIndex(c => c.id == e.contact.id); \n if (index >= 0) { \n Object.assign(this.contacts[index], e.contact); \n } \n }), \n eventAggregator.subscribe('contact.deleted', e => { \n const index = this.contacts.findIndex(c => c.id == e.contact.id); \n if (index >= 0) { \n this.contacts.splice(index, 1); \n } \n }), \n    ]; \n  } \n\n  // Omitted snippet... \n} \n\n```", "```js\nimport {inject} from 'aurelia-framework'; \nimport {Router} from 'aurelia-router'; \nimport {ContactStore} from '../services/store'; \nimport {ContactGateway} from '../services/gateway'; \n\n@inject(ContactStore, ContactGateway, Router) \nexport class ContactDetails { \n\n  constructor(store, gateway, router) { \n    this.store = store; \n    this.gateway = gateway; \n    this.router = router; \n  } \n\n  activate(params, config) { \n    return this.store.getById(params.id).then(contact => { \n      this.contact = contact; \n      config.navModel.setTitle(this.contact.fullName); \n    }); \n  } \n\n  tryDelete() { \n    if (confirm('Do you want to delete this contact?')) { \n      this.gateway.delete(this.contact.id) \n        .then(() => { this.router.navigateToRoute('contacts'); }); \n    } \n  } \n} \n\n```", "```js\nimport {inject, computedFrom} from 'aurelia-framework'; \nimport {ContactStore} from '../services/store'; \n\n@inject(ContactStore) \nexport class ContactList { \n\n  constructor(store) { \n    this.contacts = store.contacts; \n  } \n} \n\n```", "```js\nimport {Router} from 'aurelia-router';  \nimport {ContactStore} from './services/store'; \nimport {ContactEventDispatcher} from './services/event-dispatcher'; \n\nexport function configure(config) { \n  const router = config.container.get(Router); \n  router.addRoute({ route: 'contacts', name: 'contacts', moduleId: 'contacts/main', nav: true, title: 'Contacts' }); \n\n  config.postTask(() => { \n    const store = config.container.get(ContactStore); \n store.activate(); \n\n    const dispatcher = config.container.get(ContactEventDispatcher); \n    return dispatcher.activate(); \n  }); \n} \n\n```"]