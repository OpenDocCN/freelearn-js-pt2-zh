- en: Chapter 6. Application and Folder Structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To allow you to jump right in, Meteor creates a default set of libraries, default
    folder structure, and default permissions. This default configuration works great
    for quick development, testing, and learning-as-you-go. It does not, however,
    make for a great production environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll go over changes you''ll want to make to the default
    configuration, so that your app will be performant, secure, and easier to manage.
    Specifically, you will learn about:'
  prefs: []
  type: TYPE_NORMAL
- en: Separating the client, server, and public files of your application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling database security and user login
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tailoring display results to protect privacy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Client and server folders
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Up to this point, we''ve put all of our JavaScript code in one file: `LendLib.js`.'
  prefs: []
  type: TYPE_NORMAL
- en: Inside `LendLib.js`, we have two sections, separated by `if` statements. The
    client-facing code is found inside the `if (Meteor.isClient) {...}` block, and
    the server-side code is found inside the `if (Meteor.isServer) {...}` block.
  prefs: []
  type: TYPE_NORMAL
- en: That structure works fine for a very simple application, but when we are writing
    a more complex application, or we have multiple people working on the same app,
    trying to share one file with conditional statements will quickly turn into a
    nightmare situation.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, Meteor will read any and all files in our application folders,
    and try to apply JavaScript to both the client and the server. This makes for
    sort of a strange situation if we want to use a client-facing JavaScript library
    (for example, Twitter Bootstrap or jQuery). If we add the library to the root
    folder, Meteor will try to implement that file on both the client and the server.
    This either creates performance issues because we're loading files to the server
    that it doesn't need, or produces errors because the server doesn't know what
    to do with display objects (the server doesn't display anything).
  prefs: []
  type: TYPE_NORMAL
- en: Conversely, if there is server-side code in files accessible to both the client
    and server, the client may try to implement that code, which can cause all kinds
    of problems, or will at the very least make the code available to the client,
    which could quickly become a security issue. There simply are some files and code
    that we don't want the client to see or have access to.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see an example of the client code being processed by the server, and
    then let''s move that code to a place where only the client will try to execute
    it. Create a new file in `~/Documents/Meteor/` called `LendLibClient.js`. Open
    `LendLib.js` and cut the entire client code block from it indicated by the following
    highlighted code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You should have cut about 186 lines of code. Make sure you get the closing `}`
    bracket!
  prefs: []
  type: TYPE_NORMAL
- en: Now paste the code you just cut into `LendLibClient.js`, and save the changes
    to both files. You'll notice that this made no visual changes to your running
    application. That's because Meteor is processing both files, and the `if` condition
    stops the server from executing the code.
  prefs: []
  type: TYPE_NORMAL
- en: But let's see what happens when we remove the `if` condition. In `LendLibClient.js`,
    remove the first line, containing the `if (Meteor.isClient) {` condition. Additionally,
    make sure you remove the last line, containing the closing bracket (`}`) for the
    `if` condition. Save `LendLibClient.js` and then go take a look at your console
    where Meteor is running.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will see the following error message, or something similar to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Removing the `if` condition has created a situation where the server part of
    Meteor is trying to run the client-facing code. It doesn't know what to do with
    it, so the app is crashing. We're going to fix the situation by using folder structure.
  prefs: []
  type: TYPE_NORMAL
- en: If you recall, when we implemented Twitter Bootstrap, we created the `client`
    folder. Meteor identifies the `client` folder, and will run any JavaScript files
    it finds in there exclusively as client-facing code, and not on the server side.
  prefs: []
  type: TYPE_NORMAL
- en: 'Move (cut + paste, click-and-drag, or `mv`) the `LendLibClient.js` file from
    `~/Documents/Meteor/LendLib/` to `~/Documents/Meteor/LendLib/client/`. This will
    instantly fix our crashing app, and Meteor is happy again! You''ll see the following
    in the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Because we moved `LendLibClient.js` to the `client` folder, the `if` condition
    is no longer needed. Because of the file location, Meteor knows that the code
    is only intended to be run on the client, so it doesn't try to run it on the server.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You will want to refresh your browser pointing to `http://localhost:3000`.
  prefs: []
  type: TYPE_NORMAL
- en: This is because you crashed the application. Repent of your evil ways, and refresh
    your page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s do the same thing with the server code. Create a new folder named
    `server`. You can do this through a Finder window, or directly in the command
    line as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We know we should create our JavaScript file directly in the new `server` folder,
    but we are also pathologically curious and we enjoy breaking things, so we're
    going to create it where it can cause problems.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `LendLibServer.js` in the `~/Documents/Meteor/LendLib`
    folder. Cut the `if (Meteor_is.server) { … }` block from `LendLib.js`, paste it
    into `LendLibServer.js`, and save both files.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'At this point, there should be only one line of code left in `LendLib.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: As with the move of the client code, nothing adverse will happen at this point,
    because we still have the `if` condition. Let's remove that, and let the app crashing
    continue!
  prefs: []
  type: TYPE_NORMAL
- en: In `LendLibServer.js`, remove the first line, containing `if (Meteor.isServer)
    {` and remove the last line, containing the closing bracket (`}`).
  prefs: []
  type: TYPE_NORMAL
- en: Save your changes, and let's see the carnage!
  prefs: []
  type: TYPE_NORMAL
- en: '![Client and server folders](img/0823OS_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Huh. No crashes. The app still works fine. What a let down...
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s check the browser console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Client and server folders](img/0823OS_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Yes! We *did* do something naughty! The reason this (unfortunately) didn''t
    interfere with or affect the rest of the application is twofold:'
  prefs: []
  type: TYPE_NORMAL
- en: It's the client side (browser) that threw the error. That won't affect the server
    application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The only code in `LendLibServer.js` is the server code. If that code breaks
    on the client, no big deal, because it wasn't supposed to run on the client anyway.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The end user will never know that the error is there, but we will, so let's
    fix it. Move `LendLibServer.js` to `~/Documents/Meteor/LendLib/server/`. The error
    will go away, and all will be right again in our tiny little Meteor kingdom.
  prefs: []
  type: TYPE_NORMAL
- en: Public folder
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It's pretty logical that the `client` folder will only be processed by the client,
    and the `server` folder will only be processed by the server. But there's one
    more consideration we need to make, and that's for **assets** (images, text/content
    files, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: The assets are only needed in runtime. We don't depend on them for any logic
    or processing, and so if we can get them out of the way, the Meteor compiler can
    ignore them, which speeds up the processing and delivery of our application.
  prefs: []
  type: TYPE_NORMAL
- en: That's where the `public` folder comes into play. When Meteor is compiling CSS
    or JavaScript for both the client and the server, it ignores anything inside of
    `public`. Then, when all the compiling is done, it will use the `public` folder
    to access anything it may need to deliver.
  prefs: []
  type: TYPE_NORMAL
- en: Let's add a background image to our application. The handsome and generous fellas
    over at [subtlepatterns.com](http://subtlepatterns.com) have quite a few to choose
    from, and they're all free, so we'll pick one from there. We'll use Texturetastic
    Gray, because it seems to fit our theme. Navigate to [http://subtlepatterns.com/texturetastic-gray/](http://subtlepatterns.com/texturetastic-gray/)
    and download the image.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can use any background you'd like. Just perform the following steps with
    your custom background, and replace the name with your image name in the CSS when
    we declare `background-image`.
  prefs: []
  type: TYPE_NORMAL
- en: Before we can use our downloaded background, we need to make a quick change
    to `LendLib.css`, and create a public folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `LendLib.css` (found in `~/Documents/Meteor/LendLib/` unless you moved
    it to the `client` folder, which is totally fine), and add the following CSS declaration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Save this change. Nothing will happen (yet) but we''ll take care of that right
    now. Create the folder `~/Documents/Meteor/LendLib/public`. Now, open the downloaded
    zip folder `texturetastic_gray.zip` and copy `texturetastic_gray.png` from the
    zipped folder to our newly created `public` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Public folder](img/0823OS_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The background has changed to your background, and we now have a snazzier interface!
  prefs: []
  type: TYPE_NORMAL
- en: This file is safely tucked away in the `public` folder, so the Meteor compiler
    doesn't have to deal with it, but it's still available and ready to go when it
    needs to be served to a client for display purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Other folders exist, which have varying effects and purposes. For a full explanation,
    consult the Meteor documentation at [http://docs.meteor.com/#structuringyourapp](http://docs.meteor.com/#structuringyourapp).
  prefs: []
  type: TYPE_NORMAL
- en: Security and accounts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this point, our Lending Library app does exactly what we want it to. It keeps
    track of all our stuff, and who we've lent items out to. If we were to put this
    app into use, however, there are some security issues inside the app itself that
    we'd have to deal with.
  prefs: []
  type: TYPE_NORMAL
- en: First and foremost, what's to stop someone from accessing our app and erasing
    their name from an item they borrowed? That scumbag STEVE might just keep our
    linear compression wrench forever, if he were so inclined, and we'd have no way
    of proving whether he still had it or not.
  prefs: []
  type: TYPE_NORMAL
- en: 'We cannot let such thievery and dishonesty go unpunished! STEVE must be held
    accountable! So, we need to implement security. Specifically, we need to perform
    two actions:'
  prefs: []
  type: TYPE_NORMAL
- en: Only allow editing in the UI by the owner of the items
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Secure the database so that changes can't be made using the web console
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removing insecure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first step in accomplishing these two goals is to remove the `insecure`
    library from Meteor. By default, the `insecure` library is included so that we
    can go about building our application without having to worry about security until
    we've got our security strategy in place, and most of our code written.
  prefs: []
  type: TYPE_NORMAL
- en: 'The time has come, we know what we want security-wise, so let''s go ahead and
    get rid of that library. Stop the Meteor application (press *Ctrl* + *C* in the
    terminal window) and enter the following command (you need to be in the `LendLib`
    directory):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This will generate the following message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Our application is now secure. It''s actually *too* secure. Start Meteor again
    (type `meteor` in the terminal and press *Enter*) and navigate to our app in a
    browser window, using `http://localhost:3000`. Once you''re there, try to add
    a new item; add a lendee, or even delete an item. We''ll try to lend our favorite
    shirt to our sexy American girlfriend, but nothing will happen; no deletions,
    no additions, no changes. Nothing is working now! If you open the browser console,
    you''ll see that every attempt to update the database is being met with the message
    **update failed: Access denied**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Removing insecure](img/0823OS_06_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This message is occurring because we disabled the insecure package. Put another
    way, no anonymous changes are allowed anymore. Because we don't yet have a login
    account, all of our requests are anonymous, and will therefore fail.
  prefs: []
  type: TYPE_NORMAL
- en: Adding an admin account
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To re-enable update functionality, we need to be able to create an admin account,
    give the admin account permissions to make changes, and provide the user a way
    to recover a lost password.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll first need to add three built-in Meteor packages. Stop the Meteor application,
    and in the terminal window, enter the following three commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: These commands will add the necessary packages to our Meteor application for
    us to administer accounts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Meteor also has a UI package that will create the login logic for us automatically,
    so that we don''t have to write any custom accounts UI code. Let''s add that package
    while we''re at it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we''ve added the `accounts-ui` package, we just need to quickly configure
    the fields to be displayed, and update our HTML template. Open `LendLibClient.js`
    and append the following code to the very bottom of the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This tells the `accounts-ui` package that we want to display the `username`
    and `email` fields in the sign up form, with the `email` field being optional
    (we need it to recover a lost password).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now open `LendLib.html` and enter the following code directly below the `<body>`
    tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This HTML code will add a login link and context menu box to the top right
    of our screen. Let''s see that in action. Save all your changes, start your Meteor
    app, and navigate to `http://localhost:3000` in a browser. Notice the top right
    of the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding an admin account](img/0823OS_06_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on **Sign in** and then click on **Create account** in the bottom right
    of the popup window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding an admin account](img/0823OS_06_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Fill in the create account form, making sure to enter a username for admin,
    and a valid e-mail address, so that you can recover your password if needed. Enter
    and confirm your new password, and click on **Create account**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding an admin account](img/0823OS_06_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You will now be logged in as admin, and we can proceed with configuring permissions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding an admin account](img/0823OS_06_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Granting admin permissions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have our admin account, let's allow the account to make any changes
    needed in the UI, while at the same time removing the ability to make changes
    in the browser console, if the admin account is not logged in.
  prefs: []
  type: TYPE_NORMAL
- en: Our original `LendLib.js` file currently has only one line of code in it. We
    will add some account checking code to it, ensuring that only the admin account
    can make changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code to `LendLib.js` and save your changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The `adminUser` function is used in multiple places, so it makes sense to create
    a common function, which simply checks to see if the `userId` making the request
    is the same as the `_id` of the admin account.
  prefs: []
  type: TYPE_NORMAL
- en: '`lists.allow` sets up the conditions upon which operations are allowed, with
    each operation having a function that returns `true` to allow and `false` to deny.
    We could, for example, set the `remove` function check to always return `false`
    if we never wanted to let anyone (including the admin account) delete categories.'
  prefs: []
  type: TYPE_NORMAL
- en: For now, we simply want to make the operations conditional on whether the admin
    account is logged in and making the request, so we will set each function to `return
    adminUser(userId);`.
  prefs: []
  type: TYPE_NORMAL
- en: In our browser, we can now test our permissions. Add a new category (anything
    you'd like, but we'll add `glassware`), add a new item, change an owner, and so
    on – all operations should now be allowed, provided you're logged in as admin.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s make sure that the access is indeed linked to our admin account. Log
    out of the app by clicking on **admin** in the top right corner, and clicking
    on the **Sign out** button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Granting admin permissions](img/0823OS_06_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, in the browser console, enter the following command (or equivalent to
    the category you added):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get an **Access denied** message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Granting admin permissions](img/0823OS_06_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Log back in as admin, and run the command again. This time the category will
    be removed. By setting the permissions and allowed actions on the lists level,
    using `lists.allow()`, we've made it impossible for someone to make changes without
    being logged in as admin. Both the UI and the browser console are now secure from
    the evil machinations of STEVE, the wrench thief!
  prefs: []
  type: TYPE_NORMAL
- en: Customizing results
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is one more consideration we should make when it comes to security and
    usability of our app. What if we could enable multiple users to use the Lending
    Library, with each user only able to see the items that belong to them? If we
    did this, we could stop people from being able to see what kinds of things other
    people own, and at the same time we could allow each person to track their own
    stuff. We originally set out to just create an app for ourselves, but with a little
    tweaking, we can let anyone use it, and they'll think we're awesome and maybe
    buy us lunch!
  prefs: []
  type: TYPE_NORMAL
- en: Modifying Meteor.publish()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In preparation for multiple people using our application, we need to make sure
    that no one can see anyone else's stuff. This is done inside the `Meteor.publish()`
    declaration for `Categories`. Logically, if we limit the categories that can be
    seen by a user, that limitation will cascade to the visible items, because items
    are found inside categories.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `LendLibServer.js`, and modify the `find({})` block, found approximately
    around line 6:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Adding the selector `owner:this.userId` will check each list in our `lists`
    repository, and return the category for each instance where the currently logged
    in user is the owner of the list. Save this change, and you'll notice that all
    of the current categories disappeared!
  prefs: []
  type: TYPE_NORMAL
- en: '![Modifying Meteor.publish()](img/0823OS_06_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: That's because the lists we already created don't have any owner, and we're
    logged in as admin. We're going to experience similar problems when we try to
    modify existing items, because no lists have any owner.
  prefs: []
  type: TYPE_NORMAL
- en: We have several options of how to fix this, including manually adding the admin
    account as the owner, letting the admin account see all unclaimed lists, or just
    starting with a clean slate. Since we only have one item lent out (dangit, STEVE!
    We want our wrench back!), now is a good time to clear out our database, and add
    back our linear compression wrench, before we forget who has it (yeah, right!).
  prefs: []
  type: TYPE_NORMAL
- en: 'In your browser console, while logged in as admin, enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This will remove all of our lists, and we can start over, once we've added an
    owner to newly created lists.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you want to clear out all users as well, you can do that by stopping the
    Meteor application, and running `meteor reset` in the terminal window and then
    restarting the Meteor application. Be careful! There's no warning, and no takebacks!
  prefs: []
  type: TYPE_NORMAL
- en: Adding owner privileges
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Adding an owner to any new category is pretty simple. We just need to update
    our `lists.insert()` function, and add the owner field. Open `LendLibClient.js`,
    and locate the `Templates.categories.events` declaration. Inside the event delegate
    for `''keyup #add-category''` you will see the `lists.insert()` function call.
    Modify that call as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Now whenever a new list is added, instead of just adding a category field, we
    are also adding an owner field. This allows our `Meteor.publish()` code to work
    correctly for any new lists we make.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add back the Tools category, enter the item `Linear Compression Wrench`
    and assign the Lendee as `STEVE`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding owner privileges](img/0823OS_06_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There, we're back up and running, and hidden in each list, we now have an owner
    property. This becomes important when we enable others to create and maintain
    their own lists.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling multiple users
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Okay, everything is in place now for us to have a customized, private view of
    our own stuff, but currently only the admin account can add lists or items, and
    assign a lendee to an item.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll fix that by going back to `LendLib.js`, and adding some logic to check
    if either the currently logged in user owns the list, or is an admin. Inside `LendLib.js`,
    in the `lists.allow()` code block, make the following additions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Inside `insert`, we check to see if the current `doc.owner` is the logged in
    user. In `update` and `remove`, we iterate through all the records to be updated
    (using `_.all()`) and check if the `doc.owner` is the logged in user.
  prefs: []
  type: TYPE_NORMAL
- en: You will now want to save your changes, and create a new account on `http://localhost:3000`.
    Add categories and items to your heart's content. You can switch between users,
    and add as many more users and lists as you would like.
  prefs: []
  type: TYPE_NORMAL
- en: 'You''ll notice that there''s no visibility from one person''s lists to another,
    and consequently no way for someone to manipulate or delete another person''s
    lists and records. Now when STEVE finally gets his grubby little hands on your
    application, he can only see his stuff (none of which is worth borrowing, by the
    way!):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Enabling multiple users](img/0823OS_06_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you've learned how Meteor compiles and searches for JavaScript
    and CSS code, and how to optimize that search. You've learned how to protect your
    server code, and keep things running smoothly and efficiently. You've learned
    how to secure your database, through the use of Meteor's built-in Accounts packages,
    and you've closed all the major security loopholes in your application. Finally,
    you've enabled multiple accounts, so anybody can use your Lending Library to keep
    track of their items, and you've done so without compromising on privacy for the
    end user.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter you will learn how to deploy a meteor application to a production
    environment, and learn techniques to start coding fast, robust, and production-ready
    Meteor applications.
  prefs: []
  type: TYPE_NORMAL
