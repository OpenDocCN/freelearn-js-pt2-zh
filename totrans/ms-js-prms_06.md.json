["```js\nD:\\> node –v\nD:\\> NPM  –v\n\n```", "```js\n// simple server written in Nodejs\n// This server would be running on default IP http://127.0.0.1\nvar http = require('http');\nhttp.createServer(function (request, response) \n{\n  response.writeHead(200, {'Content-Type': 'text/plain'}); // this defines the MIME type of content\n  response.end('Hello World\\n'); // this is the browser's output. \n}).listen(1337, '127.0.0.1'); // 1337 is the port number where the browser is listing to this request. \nconsole.log('Server running at http://127.0.0.1:1337/'); //This line will show at command prompt  \n```", "```js\nprocess_one(function (value1) {\n    process_two(value1, function(value2) {\n        process_three(value2, function(value3) {\n            process_four(value3, function(value4) {\n                // Do something with value4 \n            });\n        });\n    });\n});\n```", "```js\nQ.fcall(process_one)\n.then(process_two)\n.then(process_three)\n.then(process_four)\n.then(function (value4) {\n    // Do something with value4 \n})\n.catch(function (error) {\n    // Error Handler\n})\n.done();\n```", "```js\niPromiseSomething() .then(function (value) { //your code }, function (reason) { //your code } );\n```", "```js\nvar reapPromise  = getInputPromise()\n.then(function (input) {\n}, function (reason) {\n});\n```", "```js\nvar reapPromise = getInputPromise()\n.then(function (value) {\n});\n```", "```js\nvar reapPromise = getInputPromise()\n.then(null, function (error) {\n});\n```", "```js\nvar reapPromise = getInputPromise()\n.fail(function (error) {\n});\n```", "```js\nvar reapPromise = getInputPromise()\n.fin(function () {\n});\n```", "```js\nf1_promise()\n    .then(function() { return s1_promise(); })\n    .then(function() { return t1_promise();  })\n        ...\n    .then(function() { return nth_promise();    });\n```", "```js\nreturn seq(startValue).then(secondValue).then(thirdValue);\n```", "```js\nvar funcs = [startValue, secondValue, thirdValue];\n\nvar result = Q(startValue); \nfuncs.forEach(function (f) {\n    result = result.then(f);\n});\nreturn result;\n```", "```js\nreturn func.reduce(function (tillNow, f) {\n    return tillNow.then(f); \n}, Q(startValue));\n```", "```js\nreturn Q.all([\n    eventAdd(2, 2),\n    eventAdd (10, 20)\n]);\n```", "```js\nfunction eventAdd (var1, var2) { \n    return Q.spread([var1, var2], function (var1, var2) {\n        return a + b;\n    })\n}\n\nQ.spread(). Call all initially\n\nreturn getUsr() .then(function (userName) { return [username, getUser(userName)]; }) .spread(function (userName, user) {\n});\n```", "```js\nQ.allSettled(promises)\n.then(function (results) {\n    results.forEach(function (result) {\n        if (result.state === \"fulfilled\") {\n            var value = result.value;\n        } else {\n            var reason = result.reason;\n        }\n    });\n});\n```", "```js\nQ.any(promises).then(function (firstPromise) {\n    // list of any of the promises that were fulfilled. \n}, function (error) {\n    // All of the promises were rejected. \n});\n```", "```js\nreturn scenario().then(function (value) {\n    throw new Error(\"I am your error mesg here .\");\n}, function (error) {\n    // We only get here if scenario fails \n});\n```", "```js\nQ.\ntry(function()\n    {return scneario().then(function(value)throw new Error(\"im your thrown error\");)} )\n.catch({ function (error)\n    {console.error(\"i am catched\",error)} \n});\n```", "```js\nreturn uploadFile()\n.then(function () {\n    // Success uploading the file \n}, function (err) {\n    // There was an error, and we get the reason for error \n}, function (progress) {\n    // this is where I am reporting back my progress. executed \n});\n```", "```js\nreturn uploadFile().progress(function (progress) {\n    // We get notified of the upload's progress \n});\n```", "```js\nreturn hoo()\n.then(function () {\n    return \"foo\";\n});\nOr we can do It like this:\nhoo()\n.then(function () {\n    return \"bar\";\n})\n.done();\n```", "```js\nQ.fcall(); \n//Using this function fcall you can create and  call other //functions, along with Promise functions. To do that simply //follow this syntax \nreturn Q.fcall(function () {\n    return 10; \n});\n```", "```js\nreturn Q.fcall(function () {\n    throw new Error(\"I am an error\");\n});\n```", "```js\nreturn Q.fcall(eventualAdd, 2, 2);\n```", "```js\nvar deferred = Q.defer();\nFS.readFile(\"hoo.txt\", \"utf-8\", function (error, text) {\n    if (error) {\n        deferred.reject(new Error(error));\n    } else {\n        deferred.resolve(text);\n    }\n});\nreturn deferred.promise;\n```", "```js\n//normal way of handling rejected promises.\ndeferred.reject(new Error(\"Can't do it\"));\n//this is how we do it\nvar rejection = Q.fcall(function () {\n    throw new Error(\"Can't do it\");\n});\ndeferred.resolve(rejection);\n```", "```js\nfunction delay(ms) {\n    var deferred = Q.defer();\n    setTimeout(deferred.resolve, ms);\n    return deferred.promise;\n}\n```", "```js\nfunction timeout(promise, ms) {\n    var deferred = Q.defer();\n    Q.when(promise, deferred.resolve);\n    delay(ms).then(function () {\n        deferred.reject(new Error(\"Timed out\"));\n    });\n    return deferred.promise;\n}\n```", "```js\nfunction requestOkText(url) {\n    var request = new XMLHttpRequest();\n    var deferred = Q.defer();\n    request.open(\"GET\", url, true);\n    request.onload = onload;\n    request.onerror = onerror;\n    request.onprogress = onprogress;\n    request.send();\n\n    function onload() {\n        if (request.status === 200) {\n            deferred.resolve(request.responseText);\n        } else {\n            deferred.reject(new Error(\"Status code was \" + request.status));\n        }\n    }\n\n    function onerror() {\n        deferred.reject(new Error(\"Can't XHR \" + JSON.stringify(url)));\n    }\n\n    function onprogress(event) {\n        deferred.notify(event.loaded / event.total);\n    }\n\n    return deferred.promise;\n}\n```", "```js\nrequestOkText(\"http://localhost:5000\")\n.then(function (responseText) {\n    // If the HTTP response returns 200 OK, log the response text. \n    console.log(responseText);\n}, function (error) {\n    // If there's an error or a non-200 status code, log the error. \n    console.error(error);\n}, function (progress) {\n    // Log the progress as it comes in. \n    console.log(\"Request progress: \" + Math.round(progress * 100) + \"%\");\n});\n```", "```js\nfunction requestOkText(url) {\n    return Q.Promise(function(resolve, reject, notify) {\n        var request = new XMLHttpRequest();\n        request.open(\"GET\", url, true);\n        request.onload = onload;\n        request.onerror = onerror;\n        request.onprogress = onprogress;\n        request.send();\n\n        function onload() {\n            if (request.status === 200) {\n                resolve(request.responseText);\n            } else {\n                reject(new Error(\"Status code was \" + request.status));\n            }\n        }\n        function onerror() {\n            reject(new Error(\"Can't XHR \" + JSON.stringify(url)));\n        }\n        function onprogress(event) {\n            notify(event.loaded / event.total);\n        }\n    });\n}\n```", "```js\n//using when \nreturn Q.when(AmIAvalueOrPromise, function (value) {\n}, function (error) {\n});\n//The following are equivalent:\nreturn Q.all([a, b]);\nreturn Q.fcall(function () {\n    return [a, b];\n})\n.all();\n```", "```js\nreturn Q($.ajax(...))\n.then(function () {\n});\n```", "```js\nreturn Q.invoke($, 'ajax', ...)\n.then(function () {\n});\n```", "```js\nreturn Q.fcall(function () {\n    return [{ foo: \"bar\" }, { foo: \"baz\" }];\n})\n.then(function (value) {\n    return value[0].foo;\n});\n```", "```js\nreturn Q.fcall(function () {\n    return [{ foo: \"bar\" }, { foo: \"baz\" }];\n})\n.get(0)\n.get(\"foo\");\n```", "```js\n    return Q.nfcall(FS.readFile, \"foo.txt\", \"utf-8\");\n    ```", "```js\n    return Q.nfapply(FS.readFile, [\"foo.txt\", \"utf-8\"]);\n    ```", "```js\n    return Q.ninvoke(redisClient, \"get\", \"user:1:id\"); // node invoke\n    return Q.npost(redisClient, \"get\", [\"user:1:id\"]); // node post\n    ```", "```js\n    //using Q.denodeify\n    var readFile = Q.denodeify(FS.readFile);\n    return readFile(\"foo.txt\", \"utf-8\");\n    ```", "```js\n    // Q.nbind\n    var redisClientGet = Q.nbind(redisClient.get, redisClient);\n    return redisClientGet(\"user:1:id\");\n    ```", "```js\nfunction TheDepthOfMyCode() {\n  Q.delay(100).done(function explode() {\n    throw new Error(\"hello I am your error Stack!\");\n  });\n}\nTheDepthOfMyCode ();\n```", "```js\nError: hello I am your error Stack!\n at explode (/path/to/test.js5:166)\n at _fulfilled (/path/to/test.js:q:54)\n at resolvedValue.promiseDispatch.done (/path/to/q.js:923:20)\n at makePromise.promise.promiseDispatch (/path/to/q.js:400:23)\n at pending (/path/to/q.js:397:39)\n at process.startup.processNextTick.process._tickCallback (node.js:244:9)\n\n```", "```js\nError: hello I am your error Stack!\n at explode (/path/to/test.js:3:11)\nFrom previous event:\n at theDepthsOfMyProgram (/path/to/test.js:2:16)\n at Object.<anonymous> (/path/to/test.js:7:1)\n\n```", "```js\nQ_DEBUG=1 node server.js\n```", "```js\n// using-promise.js\nvar httpGet = function (opts) {\n     var deferred = Q.defer();\n     http.get(opts, deferred.resolve);\n     return deferred.promise;\n};\n```", "```js\n// promise-resolve-then-flow.js\nvar deferred = Q.defer();\ndeferred.promise.then(function (obj) {\n    console.log(obj);\n});\n\ndeferred.resolve(\"Hello World\");\n```", "```js\n// promise-translate-action.js\naction(arg1, arg2, function (result) {\n    doSomething(result);\n});\n```", "```js\n// promise-translate-action.js\nvar promiseAction = function (arg1, arg2) {\n    var deferred = Q.defer();\n    action(arg1, arg2, deferred.resolve);\n    return deferred.promise;\n}\n\npromiseAction(arg1, arg2).then(function (result) {\n    doSomething(result);\n});\n```", "```js\n// object-unsued.js\nhttpGet(url.parse(\"http://abc.org\")).then(function (response) {\n    return response.headers[\"location\"].replace(/^http:/, \"\");\n}).then(console.log);\n```", "```js\n// object-decomposed.js\nhttpGet(url.parse(\"http://abc.org\")).then(function (response) {\n    return response.headers;\n}).then(function (handlers) {\n    return handlers[\"location\"];\n}).then(function (location) {\n    return location.replace(/^http:/, \"\");\n}).then(console.log);\n```", "```js\n// object.primitive.js\nhttpGet(url.parse(\"http://example.org\"))\n    .get(\"handlers\").get(\"location\").post(\"replace\", [/^http:/, \"\"])\n    .then(console.log);\n```", "```js\n// object-view.js\nQ.resolve(new Date()).view().then(function (dateView) {\n    return dateView.toTimeString().then(function (str) {\n        return /\\((.*)\\)/.exec(str)[0]\n    });\n}).then(console.log);\n```", "```js\nthen().then().done();\n```"]