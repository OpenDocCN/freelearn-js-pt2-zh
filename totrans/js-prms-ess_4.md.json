["```js\ntry {\n    return JSON.parse(\"json\"); //this will cause an error\n} catch (error) {\n    alert(\"I have an error with the following details: \\n\" + error);\n}\n```", "```js\npromise.then(onFulfilled, onRejected)\n```", "```js\nvar promiseTest = new Promise(function (resolve) {\n    // JSON.parse will throw an error because of invalid JSON\n    // so this indirectly rejects\n    resolve(JSON.parse(\"json\"));\n});\n\npromiseTest.then(function (data) {\n    alert(\"It worked!\" + data);\n}, function (error) { //error handler\n    alert(\" I have failed you: \" + error);\n});\n```", "```js\nPromise.prototype.catch = function(onRejected) {\n    return this.then(null, onRejected);\n};\n```", "```js\nvar promiseTest = new Promise(function (resolve) {\n    resolve(JSON.parse(\"json\"));\n});\n\npromiseTest.then(function (data) {\n    alert(\"It worked: \" + data)\n}).catch(function(error) {\n  alert(\"I have Failed you! \" + error);\n});\n```", "```js\npromise.then(handler1, handler2);\n\npromise.then(handler1).catch(handler2);\n```", "```js\npromise.then(handler1).then(null, handler2);\n```", "```js\npromise1.then(function () {\n    return promise2();\n}).then(function () {\n    return promise3();\n}).catch (function (error) {\n    return promiseError1();\n}).then(function () {\n    return promise4();\n}, function (error) {\n    return promiseError2();\n}).catch (function (error) {\n    alert(\"Everything is gonna be alright!\");\n}).then(function () {\n    alert(\"We are out of here!\");\n}); \n```"]