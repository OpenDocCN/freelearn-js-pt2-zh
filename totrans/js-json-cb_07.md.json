["```js\nusingNewtonsoft.Json;\n```", "```js\nusing System;\nusingNewtonsoft.Json;\n\nnamespaceJSONExample\n{\n\n  public class Record\n  {\n    public string call;\n    public double lat;\n    public double lng;\n  }\n\n  class Program\n  {\n    static void Main(string[] args)\n      {\n        String json = @\"{ 'call': 'kf6gpe-9', \n        'lat': 21.9749, 'lng': 159.3686 }\";\n\n        var result = JsonConvert.DeserializeObject<Record>(\n          json, newJsonSerializerSettings\n            {\n        MissingMemberHandling = MissingMemberHandling.Error\n          });\n        Console.Write(JsonConvert.SerializeObject(result));\n\n        return;\n        }\n  }\n}\n```", "```js\nstring json = JsonConvert.SerializeObject(p, \nnewIsoDateTimeConverter());\n```", "```js\n2015-07-29T08:00:00\n```", "```js\nFunction isoDateReviver(value) {\n  if (typeof value === 'string') {\n  var a = /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2}(?:\\.\\d*)?)(?:([\\+-])(\\d{2})\\:(\\d{2}))?Z?$/\n  .exec(value);\n  if (a) {\n     var utcMilliseconds = Date.UTC(+a[1], \n          +a[2] - 1, \n          +a[3], \n          +a[4], \n          +a[5], \n          +a[6]);\n        return new Date(utcMilliseconds);\n    }\n  }\nreturn value;\n}\n```", "```js\n// Assuming we have a class Record that looks like this:\n/*\nclass Record {\n  private String call;\n  private float lat;\n  private float lng;\n    // public API would access these fields\n}\n*/\n\nGson gson = new com.google.gson.Gson(); \nString json = \"{ \\\"call\\\": \\\"kf6gpe-9\\\", \n\\\"lat\\\": 21.9749, \\\"lng\\\": 159.3686 }\";\nRecord result = gson.fromJson(json, Record.class);\n```", "```js\nnpm install â€“g typescript\n\n```", "```js\nfunction greeter(person: string) {\n  return \"Hello, \" + person;\n}\n\nvar user: string = \"Ray\";\n\nconsole.log(greeter(user));\n```", "```js\nfunction greeter(person) {\n  return \"Hello, \" + person;\n}\n\nvar user = \"Ray\";\n\nconsole.log(greeter(user));\n```", "```js\nconsole.log(greeter(2));\n```", "```js\nC:\\Users\\rarischp\\Documents\\node.js\\typescript\\hello.ts(8,13): error TS2082: Supplied parameters do not match any signature of call target:\n        Could not apply type 'string' to argument 1 which is of type 'number'.\nC:\\Users\\rarischp\\Documents\\node.js\\typescript\\hello.ts(8,13): error TS2087: Could not select overload for 'call' expression.\n```", "```js\nfunction greeter(person: string): string {\n  return \"Hello, \" + person;\n}\n\nfunction circumference(radius: number) : number {\n  var pi: number = 3.141592654;\n  return 2 * pi * radius;\n}\n\nvar user: string = \"Ray\";\n\nconsole.log(greeter(user));\nconsole.log(\"You need \" + \ncircumference(2) + \n  \" meters of fence for your dog.\");\n```", "```js\n    var list:string[] = [ \"one\", \"two\", \"three\"];\n    ```", "```js\n    enumColor { Red = 1, Green, Blue };\n    var c : Color = Color.Blue;\n    ```", "```js\ninterface Record {\n  call: string;\n  lat: number;\n  lng: number;\n}\n\nFunction printLocation(r: Record) {\n  console.log(r.call + ': ' + r.lat + ', ' + r.lng);\n}\n\nvar myObj = {call: 'kf6gpe-7', lat: 21.9749, lng: 159.3686};\n\nprintLocation(myObj);\n```", "```js\ninterface Record {\n  call: string;\n  lat: number;\n  lng: number;\n}\n\nFunction printLocation(r: Record) {\n  console.log(r.call + ': ' + r.lat + ', ' + r.lng);\n}\n\nvar myObj = {call: 'kf6gpe-7', lat: 21.9749, lng: 159.3686};\nprintLocation(myObj);\n\nvar json = '{\"call\":\"kf6gpe-7\",\"lat\":21.9749}';\nvar myOtherObj = JSON.parse(json);\nprintLocation(myOtherObj);\n```", "```js\nkf6gpe-7: 21.9749, 159.3686\nkf6gpe-7: 21.9749, undefined\n```", "```js\nclass RecordInterface {\n  call: string;\n  lat: number;\n  lng: number;\n\n  constructor(c: string, la: number, lo: number) {}\n  printLocation() {}\n\n}\n\nclass Record implements RecordInterface {\n  call: string;\n  lat: number;\n  lng: number;\n\n  constructor(c: string, la: number, lo: number) {\n    this.call = c;\n    this.lat = la;\n    this.lng = lo;\n  }\n\n  printLocation() {\n    console.log(this.call + ': ' + this.lat + ', ' + this.lng);\n  }\n}\n\nvar myObj : Record = new Record('kf6gpe-7', 21.9749, 159.3686);\n\nmyObj.printLocation();\n```", "```js\nimport module = require('module');\n```"]