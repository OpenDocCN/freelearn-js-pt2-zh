["```js\nconsole.log(\"1\");\nvar log = fileSystemReader.read(\"./verybigfile.txt\");\nconsole.log(\"2\");\n```", "```js\nvar fs = require('fs');\nconsole.log('1');\nfs.readFile('./response.json', function (error, data) {\n  if(!error){\n    console.log(data);\n  });\nconsole.log('2');\n```", "```js\nvar http = require('http');\nvar server = http.createServer();\nserver.on('request', function (req, res) {\n  res.writeHead(200, {'Content-Type': 'text/plain'});\n  res.end('Hello Node\\n');\n});\nserver.listen(3000); \n```", "```js\n$ » node app.js\n```", "```js\n~ » curl -v http://localhost:3000 \n* Rebuilt URL to: http://localhost:3000/\n*   Trying ::1...\n* Connected to localhost (::1) port 3000 (#0)\n> GET / HTTP/1.1\n> Host: localhost:3000\n> User-Agent: curl/7.43.0\n> Accept: */*\n>\n< HTTP/1.1 200 OK\n< Content-Type: text/plain\n< Date: Thu, 12 Nov 2015 05:31:44 GMT\n< Connection: keep-alive\n< Transfer-Encoding: chunked\n<\nHello Node\n* Connection #0 to host localhost left intact\n```", "```js\nvar i=0;\nfunction add(num){\n  console.log(i);\n  i=i+num;\n}\nadd(100);\nconsole.log(i);\n```", "```js\n~/Chapter9 » node app.js\n0\n100\n```", "```js\nnpm install request\n```", "```js\nvar request = require('request');\nvar status = undefined;\nrequest('http://google.com', function (error, response, body) {\n  if (!error && response.statusCode == 200) {\n    status_code = response.statusCode;\n  }\n});\nconsole.log(status); \n```", "```js\nvar request = require('request');\nvar status = undefined;\nfunction getSiteStatus(callback){\n  request('http://google.com', function (error, response, body) {\n    if (!error && response.statusCode == 200) {\n      status_code = response.statusCode;\n    }\n    callback(status_code);\n  });\n}\nfunction showStatusCode(status){\n  console.log(status);\n}\ngetSiteStatus(showStatusCode);\n```", "```js\n$node app.js\n200\n```", "```js\nhttp.createServer(function (req, res) {\n  getURL(url, function (err, res) {\n    getURLContent(res.data, function(err,res) {\n      ...\n    });\n  });\n});\n```", "```js\nvar urlContentProcessor = function(data){\n  ...\n}\nvar urlResponseProcessor = function(data){\n  getURLContent(data,urlContentProcessor);\n}\nvar createServer = function(req,res){\n  getURL(url,urlResponseProcessor);\n};\nhttp.createServer(createServer);\n```", "```js\nsetTimeout(function() {\n  console.log(\"This is just one time delay\");\n},1000);\nvar count=0;\nvar t = setInterval(function() {\n  count++;\n  console.log(count);\n  if (count> 5){\n    clearInteval(t);\n  }\n}, 2000 );\n```", "```js\nvar EventEmitter = require('events');\n```", "```js\nvar _net = require('net');\nvar _events = require ('events');\nvar _emitter = new events.EventEmitter();\n_emitter.on('join', function(id,caller){\n  console.log(id+\" - joined\");\n});\n_emitter.on('quit', function(id,caller){\n  console.log(id+\" - left\");\n});\n\nvar _server = _net.createServer(function(caller) {\n  var process_id = caller.remoteAddress + ':' + caller.remotePort;\n  _emitter.emit('join',id,caller);\n  caller.on('end', function() {\n    console.log(\"disconnected\");\n    _emitter.emit('quit',id,caller);\n  });\n});\n_server.listen(8124);\n```", "```js\nnet module from Node. The idea here is to create a server and let the client connect to it via a standard telnet command. When a client connects, the server displays the client address and port, and when the client quits, the server logs this too.\n```", "```js\ntelnet 127.0.0.1 8124\n```", "```js\n» node app.js\n::ffff:127.0.0.1:51000 - joined\n::ffff:127.0.0.1:51001 – joined\n```", "```js\nnode_project/src/nav\n                --- >index.js\n```", "```js\nexports.area = function (r) {\n  return 3.14 * r * r;\n};\nexports.circumference = function (r) {\n  return 3.14 * 3.14 * r;\n};\n```", "```js\nvar geo = require('./geo.js');\nconsole.log(geo.area(2));\n```", "```js\nvar Geo = function(PI) {\n  this.PI = PI;\n}\nGeo.prototype.area = function (r) {\n  return this.PI * r * r;\n};\nGeo.prototype.circumference = function (r) {\n  return this.PI * this.PI * r;\n};\nmodule.exports = Geo;\n```", "```js\nvar db_config = {\n  server: \"0.0.0.0\",\n  port: \"3306\",\n  user: \"mysql\",\n  password: \"mysql\"\n};\nmodule.exports = db_config;\n```", "```js\nvar config = require('./config.js');\nconsole.log(config.user);\n```", "```js\n{\n  \"name\": \"supermodule\",\n  \"main\": \"./lib/config.js\"\n}\n```", "```js\nnpm install request\n```", "```js\nnpm init\n```", "```js\n{\n  \"name\": \"chapter9\",\n  \"version\": \"1.0.0\",\n  \"description\": \"chapter9 sample project\",\n  \"main\": \"app.js\",\n  \"dependencies\": {\n    \"request\": \"^2.65.0\"\n  },\n  \"devDependencies\": {},\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"keywords\": [\n    \"Chapter9\",\n    \"sample\",\n    \"project\"\n  ],\n  \"author\": \"Ved Antani\",\n  \"license\": \"MIT\"\n}\n```", "```js\n\"dependencies\": {\n  \"request\": \"^2.65.0\"\n},\n```", "```js\nnpm install async --save\nnpm WARN package.json chapter9@1.0.0 No repository field.\nnpm WARN package.json chapter9@1.0.0 No README data\nasync@1.5.0 node_modules/async\n```", "```js\n\"dependencies\": {\n  \"async\": \"^1.5.0\",\n  \"request\": \"^2.65.0\"\n},\n```"]