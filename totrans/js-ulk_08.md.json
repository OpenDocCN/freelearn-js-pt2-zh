["```js\nconsole.log( \"Hello world!\" );\n```", "```js\nnode hello.js\n```", "```js\nconsole.log( \"Running foo.js\" );\nmodule.exports = \"foo\";\nmain.js\nvar foo = require( \"./foo\" );\nconsole.log( \"Running main.js\" );\nconsole.log( \"Exported value:\", foo );\n```", "```js\nRunning foo.js\nRunning main.js\nExported value: foo\n```", "```js\n\"use strict\";\nvar fs = require( \"fs\" );\nfs.readFile( __filename, \"UTF-8\", function( err, data ){\n  if ( err ) {\n    throw new Error( err );\n  }\n  console.log( \"Source of \", __filename, \":\\n\", data );\n});\n```", "```js\n./Lib/BlockComment.js \n   /**\n   * Block comment entity\n   * @class\n   * @param {String} code\n   */\nvar BlockComment = function( code ){\n  return {\n    /**\n     * Check a block comment\n     * @returns {Boolean}\n     */\n    isValid: function(){\n      var lines = code.split( \"\\n\" );\n      return lines.some(function( line ){\n          var date = new Date();\n          return line.indexOf( \"@copyright \" + date.getFullYear() ) !== -1;\n        });\n    }\n  };\n};\n\nmodule.exports = BlockComment;\n```", "```js\nvar comment = new BlockComment( \"/**\\n* @copyright 2015 \\n*/\" );\ncomment.isValid() // true \n```", "```js\n./Lib/SourceFile.js\n    /** @type {module:esprima} */\nvar esprima = require( \"esprima\" ),\n\n/**\n * Source file entity\n * @class\n * @param {String} fileSrc\n * @param {module:Lib/BlockComment} BlockComment - dependency injection\n */\nSourceFile = function( fileSrc, BlockComment ){\n  return {\n    /**\n     * Test if source file has valid copyright\n     */\n    isValid: function() {\n      var blockComments = this.parse( fileSrc );\n      return Boolean( blockComments.filter(function( comment ){\n        return comment.isValid();\n      }).length );\n    },\n    /**\n     * Extract all the block comments as array of BlockComment instances\n     * @param {String} src\n     * @returns {Array} - collection of BlockComment\n     */\n    parse: function( src ){\n      return esprima.parse( src, {\n        comment: true\n      }).comments.filter(function( item ){\n        return item.type === \"Block\";\n      }).map(function( item ){\n        return new BlockComment( item.value );\n      });\n    }\n\n  };\n};\n\nmodule.exports = SourceFile;\n```", "```js\n        /** @type {module:cli-color} */\nvar clc = require( \"cli-color\" ),\n    /** @type {module:fs-walk} */\n    walk = require( \"fs-walk\" ),\n    /** @type {module:path} */\n    path = require( \"path\" ),\n    /** @type {module:fs} */\n    fs = require( \"fs\" ),\n    /**\n     * Source file entity\n     * @type {module:Lib/SourceFile}\n     */\n    SourceFile = require( \"./Lib/SourceFile\" ),\n    /** @type {module:Lib/BlockComment} */\n    BlockComment = require( \"./Lib/BlockComment\" ),\n    /**\n     * Command-line first argument (if none given, go with \".\")\n     * @type {String}\n     */\n    dir = process.argv[ 2 ] || \".\";\n\nconsole.log( \"Checking in \" + clc.yellow( dir ) );\n\n// Traverse directory tree recursively beginning from 'dir'\nwalk.files( dir, function( basedir, filename ) {\n      /** @type {Function} */\n  var next = arguments[ 3 ],\n      /** @type {String} */\n      fpath = path.join( basedir, filename ),\n      /** @type {String} */\n      fileSrc = fs.readFileSync( fpath, \"UTF-8\" ),\n      /**\n       * Get entity associated with the file located in fpath\n       * @type {SourceFile}\n       */\n      file = new SourceFile( fileSrc, BlockComment );\n  // ignore non-js files\n  if ( !filename.match( /\\.js$/i ) ) {\n    return next();\n  }\n  if ( file.isValid() ) {\n    console.log( fpath + \": \" + clc.green( \"valid\" ) );\n  } else {\n    console.log( fpath + \": \" + clc.red( \"invalid\" ) );\n  }\n  next();\n}, function( err ) {\n  err && console.log( err );\n});\n```", "```js\nnode copyright-checker.js some-dir\n```", "```js\n[ \"node\", \"/AbsolutePath/copyright-checker.js\", \"some-dir\" ]\n```", "```js\nnpm install fs-walk cli-color\n```", "```js\nsimple-server.js\n\"use strict\";\n    /** @type {module:http}  */\nvar http = require( \"http\" ),\n    /** @type {HttpServer}  */\n    server = http.createServer(function( request, response ) {\n      response.writeHead( 200, {\"Content-Type\": \"text/html\"} );\n      response.write( \"<h1>Requested: \" + request.url + \"</h1>\" );\n      response.end();\n    });\n\nserver.listen( 80 );\nconsole.log( \"Server is listening...\" );\n```", "```js\nRequested: /\n```", "```js\nnpm install connect serve-static\n```", "```js\n\"use strict\";\n    /** @type {module:connect}  */\nvar connect = require( \"connect\" ),\n    /** @type {module:serve-static}  */\n    serveStatic = require( \"serve-static\" );\n\nconnect().use( serveStatic( __dirname ) ).listen( 80 );\n```", "```js\n\"use strict\";\n    /** @type {module:express}  */\nvar express = require( \"express\" ),\n    /** @type {module:http}  */\n    http = require( \"http\" ),\n    /** @type {Object}  */\n    app = express();\n// Send common HTTP header for every incoming request\napp.all( \"*\", function( request, response, next ) {\n  response.writeHead( 200, { \"Content-Type\": \"text/plain\" } );\n  next();\n});\n// Say hello for the landing page\napp.get( \"/\", function( request, response ) {\n  response.end( \"Welcome to the homepage!\" );\n});\n// Show use if for requests like http://localhost/user/1\napp.get( \"/user/:id\", function( request, response ) {\n  response.end( \"Requested ID: \"  + req.params.id );\n});\n// Show `Page not found` for any other requests\napp.get( \"*\", function( request, response ) {\n  response.end( \"Opps... Page not found!\" );\n});\n\nhttp.createServer( app ).listen( 80 );\n```", "```js\n{\n  \"name\": \"roster\",\n  \"main\": \"wwwroot/index.html\",\n  \"window\": {\n    \"title\": \"The Roster\",\n    \"icon\": \"wwwroot/roaster.png\",\n    \"position\": \"center\",\n    \"resizable\": false,\n    \"toolbar\": false,\n    \"frame\": false,\n    \"focus\": true,\n    \"width\": 800,\n    \"height\": 600,\n    \"transparent\": true\n  }\n}\n```", "```js\n<html>\n  <body>\n    Hello world!\n  </body>\n</html>\n```", "```js\n<main class=\"container\">\n  <form >\n    <div class=\"form-group\">\n      <label for=\"name\">Name</label>\n      <input class=\"form-control\">\n    </div>\n    <button class=\"btn btn-danger\">Empty List</button>\n    <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\n  </form>\n  <table class=\"table table-condensed\">\n    <tr>\n      <td></td>\n    </tr>\n  </table>\n</main>\n```", "```js\n<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css\">\n```", "```js\n<html>\n<body ng-app=\"myApp\" >\n      <main ng-controller=\"RosterController\" class=\"container\">\n        <form ng-submit=\"submit()\">\n          <div class=\"form-group\">\n            <label for=\"name\">Name</label>\n            <input class=\"form-control\" id=\"name\" name=\"name\" ng-model=\"name\" required placeholder=\"Name\">\n          </div>\n          <button ng-click=\"empty()\" class=\"btn btn-danger\">Empty List</button>\n          <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\n        </form>\n        <table class=\"table table-condensed\">\n          <tr ng-repeat=\"person in persons\">\n            <td>{{person.value}}</td>\n          </tr>\n        </table>\n      </main>\n  </body>\n</html>\n```", "```js\n<table class=\"table table-condensed\">\n  <tr ng-repeat=\"person in persons\">\n    <td>{{person.value}}</td>\n  </tr>\n</table>\n```", "```js\n<script>\n  var app = angular.module( \"myApp\", [ \"ngStorage\" ]);\n\n  app.controller(\"RosterController\", function( $scope, $localStorage ) {\n    var sync = function() {\n      $scope.persons = JSON.parse( $localStorage.persons || \"[]\" );\n    };\n    sync();\n    $scope.name = \"\";\n    $scope.submit = function() {\n      sync();\n      $scope.persons.push({ value: $scope.name });\n      $localStorage.persons = JSON.stringify( $scope.persons );\n    };\n    $scope.empty = function() {\n      $localStorage.persons = \"[]\";\n      sync();\n    };\n  });\n</script>\n```", "```js\n<script src=\"img/angular.min.js\"></script>\n\n<script src=\"img/ngStorage.min.js\"></script>\n```", "```js\n<header ng-controller=\"ToolbarController\">\n  <a href=\"#\" ng-click=\"minimize()\">Minimize</a>\n  <a href=\"#\" ng-click=\"close()\">Close</a>\n</header>\n```", "```js\nvar win = require( \"nw.gui\" ).Window.get();\napp.controller(\"ToolbarController\", function( $scope ) {\n  $scope.close = function(){\n    win.close();\n  };\n  $scope.minimize = function(){\n    win.minimize();\n  };\n});\n```", "```js\nheader {\n  -webkit-app-region: drag;\n}\nheader a {\n   -webkit-app-region: no-drag;\n}\n```", "```js\nhtml {\n height: 100%;\n border-radius: 20px;\n background-color: rgba(0,0,0,0);\n}\nbody {\n  min-height: 100%;\n  background: linear-gradient(to bottom,  #deefff 0%,#98bede 100%);\n  overflow: auto;\n}\nheader {\n  text-align: right;\n  width: auto;\n  padding: 12px;\n  background: rgba(255,255,255, 0.5);\n  border-radius: 20px 20px 0 0;\n  -webkit-app-region: drag;\n}\nheader a {\n  margin: 12px;\n  -webkit-app-region: no-drag;\n}\n```", "```js\nopen -n ./nwjs.app --args --enable-transparent-visuals â€“disable-gpu\n```", "```js\nconsole.info( \"Here we go!\" );\n\ndocument.addEventListener( \"keydown\", function( e ){\n  var key = parseInt( e.key || e.keyCode, 10 );\n  // Ctrl-Shift-i\n  if ( e.ctrlKey && e.shiftKey && key === 73 ) {\n    e.preventDefault();\n    win.showDevTools();\n  }\n}, false );\n```", "```js\nrun copy /b nw.exe+app.nw app.exe\n```", "```js\nnpm install -g cordova\n```", "```js\ncordova create roster org.tempuri.roster Roster\n```", "```js\ncordova platform add ios\ncordova platform add android\n```", "```js\ncordova build ios\ncordova emulate ios\n```", "```js\ncordova build android\ncordova emulate android\n```", "```js\ncordova plugin add cordova-plugin-vibration\n```", "```js\n// Vibrate for 3 seconds\nnavigator.vibrate(3000);\n```"]