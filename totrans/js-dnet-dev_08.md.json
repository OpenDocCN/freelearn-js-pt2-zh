["```js\nnpm install NAME_OF_THE_PACKAGE –save\n\n```", "```js\nnpm install gulp –save\n\n```", "```js\nconsole.log(\"NodeJs example\");\n\nvar numbers= [100,20,29,96,55];\n\nvar sum=0;\nfor(i=0; i< numbers.length; i++)\n{\n sum += numbers[i];\n}\nconsole.log(\"total sum is \"+ sum);\n\n```", "```js\nexport: used to export variables, functions and objects \n\n//exportexample.js\nmodule.exports.greeting = \"Hello World\";\n\nrequire: To use the objects resides in different JavaScript files using require object. \n\n//consumerexample.js – referencing through file\nvar obj = require('./exportexample.js');\n```", "```js\n//consumerexample.js – referencing through file\nvar obj= require('./exportexample');\n```", "```js\nmodule.exports.cars = [\n{name:\"Honda Accord\" , model:\"2016\", engine: \"V6\"}, \n{name:\"BMW X6\", model:\"2015\", engine: \"V8\"}, \n{name:\"Mercedez Benz\",model:\"2016\", engine:\"V12\"}\n];\n```", "```js\nvar cars = require('./cars.js');\nconsole.log(cars);\n```", "```js\nmodule.exports = function () {\n  this.carsList =   \n  [\n    { name: \"Honda Accord\" , model: \"2016\", engine: \"V6\" }, \n    { name: \"BMW X6\", model: \"2015\", engine: \"V8\" }, \n    { name: \"Mercedez Benz\", model: \"2016\", engine: \"V12\" }\n  ];\n};\n```", "```js\nvar cars = require('./cars.js');\nvar c = new cars();\nvar carsList = c.carsList;\nfor (i = 0; i < carsList.length; i++) { \n  console.log(carsList[i].name);\n}\n```", "```js\nlisten() method that actually listens for the incoming requests, and sends the response using the res.end() method. Alternatively, we can also specify the content we are returning using the res.write() method. Here is the more simplified version of the same code, to understand how the pieces fit together:\n```", "```js\n//Initialized http object\nvar http = require('http');\n\n//declared port\nvar port = process.env.port || 1337;\n\n//Initialized http server object and use res.write() to send actual response content\nvar httpServer= http.createServer(function (req, res) {\n    res.writeHead(200, { 'Content-Type': 'text/plain' });\n    res.write('Hello World\\n');\n    res.end();\n});\n\n//listening for incoming request\nhttpServer.listen(port);\n```", "```js\n//Initialized http object\nvar http = require('http');\n\n//adding express dependency\nvar express = require('express');\n\n//creating express application\nvar expressApp = express();\n\n//Configuring root call where '/' represents root path of the URL\nexpressApp.get(\"/\", function (req, res) {\n    res.send(\"<html><body><div>Hello World</div></body></html>\");\n});\n\n//declared port\nvar port = process.env.port || 1337;\n\n//Initialized http server object and use res.write() to send actual response content\nvar httpServer = http.createServer(expressApp);\n\n//listening for incoming request\nhttpServer.listen(port);\n```", "```js\n//Initialized http object\nvar http = require('http');\n\n//adding express dependency\nvar express = require('express');\n\n//creating express application\nvar expressApp = express();\n\n//Set jade for Node.js application\nexpressApp.set('view engine', 'ejs') \n```", "```js\n//Configuring root call where '/' represents root path of the URL\nexpressApp.get(\"/\", function (req, res) {\n    res.render(\"ejsviews/home/index\");\n});\n```", "```js\n<html>\n <body>\n  <div> <h1> This is EJS View </h1> </div>\n </body>\n</html>\n```", "```js\n//declared port\nvar port = process.env.port || 1337;\n\n//Initialized http server object and use res.write() to send actual response content\nvar httpServer = http.createServer(expressApp);\n\n//listening for incoming request\nhttpServer.listen(port);\n```", "```js\n//Configuring root call where '/' represents root path of the URL\nexpressApp.get(\"/\", function (req, res) {\n    res.render(\"ejsviews/home/index\", { appName: \"EJSDemo\", message: \"This is our first EJS view engine example!\" });\n});\n```", "```js\n<html>\n <body>\n   <h1> <%= appName %> </h1>\n  <p> <%= message %></p>\n </body>\n</html>\n```", "```js\n//Initialized http object\nvar http = require('http');\n\n//adding express dependency\nvar express = require('express');\nvar ejsLocal = require('ejs-locals');\n//creating express application\nvar expressApp = express();\n\n//Add engine that supports master pages\napp.engine('ejs', ejsLocal);\n```", "```js\n<html>\n<head>\n  <title> <%= appName %> </title>\n</head>\n<body>\n  <%= body %>\n</body>\n</html>\n```", "```js\nindex.ejs file:\n```", "```js\n<% layout('../layout.ejs') -%>\n<h1><%= appName %></h1>\n<p> <%= message %></p>\n```", "```js\n//adding express dependency\nvar express = require('express');\n\n//creating express application\nvar expressApp = express();\n\n//Set jade for Node.js application\nexpressApp.set('view engine', 'jade');\n```", "```js\n//Configuring root call where '/' represents root path of the URL\nexpressApp.get(\"/\", function (req, res) {\nres.render(\"home/index\", \n{ \nappName: \"JadeDemo\",   \nmessage: \"This is our first Jade view engine example!\"\n}\n);\n});\n```", "```js\ndoctype\nhtml\n    body\n        h1= appName\n        p= message\n```", "```js\ndoctype\nhtml\n    body\n        h1 Jade App\n        p This is Jade View\n```", "```js\ninput(type='text' name='txtName')\n```", "```js\n<input type='text' name='txtName'/>\n```", "```js\na(href='microsoft.com') Microsoft\n```", "```js\n<a href=\"microsoft.com\">Microsoft</a>\n```", "```js\ninput(type='checkbox', checked)\n```", "```js\n<input type=\"checkbox\" checked=\"checked\"/>\n```", "```js\na(style = {color: 'green', background: 'black'})\n```", "```js\n<a style=\"color:green;background:black\"></a>\n```", "```js\ninput(type='button' name='btn')\n```", "```js\n<input type=\"button\" name=\"btn\"/>\n```", "```js\ndoctype html\nhtml\n  head\n    title Jade App\n  body\n  block contentBlock\n```", "```js\nextends layout\nblock contentBlock\n        h1= appName\n        p= message\n```", "```js\nexpressApp.get(\"/About\", function (req, res) {\n    res.render(\"ejsviews/home/about\");\n});\n```", "```js\nexpressApp.all('/middlewareexample', function (req, res) {\n    console.log('Accessing the secret1 section ...');\n});\n```", "```js\nexpressApp.all('/middlewareexample', function (req, res, next) {\n    console.log('Accessing the secret1 section ...');\n    next();\n});\n```", "```js\n//Initialized http object\nvar http = require('http');\n//adding express dependency\nvar express = require('express');\n\n//creating express application\nvar expressApp = express();\n\nexpressApp.all('/middlewareexample', function (req, res, next) {\n    console.log('Middleware executed now calling next middleware in the pipeline');\n    next(); // pass control to the next handler\n});\nexpressApp.all('/middlewareexample', function (req, res) {\n    res.send(\"<html><body><div>Middleware executed</div></body></html>\");    \n});\n\n//declared port\nvar port = process.env.port || 1337;\n\n//Initialized http server object and use res.write() to send actual response content\nvar httpServer = http.createServer(expressApp);\n\n//listening for incoming request\nhttpServer.listen(port);\n```", "```js\n(function (homeController) {\n    homeController.load = function (expressApp) {\n        expressApp.get('/', function (req, res) {\n            res.render(\"ejsviews/home/index\", {appName: \"EJS Application\", message:\"EJS MVC Implementation\"})\n        });\n    };\n})(module.exports);\n```", "```js\n//Initialized http object\nvar http = require('http');\n\n//adding express dependency\nvar express = require('express');\n\n//adding ejs locals\nvar ejsLocal = require('ejs-locals');\n\n//creating express application\nvar expressApp = express();\n\n//Add engine that supports master pages\nexpressApp.engine('ejs', ejsLocal);\n\n//Set jade for Node.js application\nexpressApp.set('view engine', 'ejs');\n\n//Initializing HomeController\nvar homeController = require('./Controllers/HomeContoller.js');\nhomeController.load(expressApp);\n\n//declared port\nvar port = process.env.port || 1337;\n\n//Initialized http server object and use res.write() to send actual response content\nvar httpServer = http.createServer(expressApp);\n\n//listening for incoming request\nhttpServer.listen(port);\n```", "```js\n(function(data){\n    data.getProducts = function () {\n        return [{\n                name: 'Product1',\n                price: 200,\n            }, \n            {\n                name: 'Product2',\n                price: 500\n            },\n            {\n                name: 'Product3',\n                price: 1000\n            }\n        ];\n    };\n})(module.exports);\n```", "```js\n(function (homeController) {\n    var productService = require('../DataServices/ProductService');\n\n    homeController.load = function (expressApp) {\n        expressApp.get('/', function (req, res) {\n            var products = productService.getProducts();\n            res.render(\"ejsviews/home/index\", { appName: \"EJS Application\", message: \"EJS MVC Implementation\", data: products });\n        });\n    };\n})(module.exports);\n```", "```js\n<% layout('../layout.ejs') -%>\n<h1><%= appName %></h1>\n\n<p> <%= message %></p>\n\n<div>\n\n <% data.forEach(function(product) { %>\n   <li><%= product.name %> - <%= product.price %></li>\n <% }); %>\n\n</div>\n```", "```js\n(function(data){\ndata.getRecords = function (callbackFn) {\n        //loaded SQL object\n        var sql = require('mssql');\n\n        //database configuration attributes to connect\n        var config = {\n            user: 'sa',\n            password: '123',\n            server: 'ovais-pc', // You can use 'localhost\\\\instance' to connect to named instance \n            database: 'products'\n        }\n\n        var products = null;\n        //Connect to SQL Server returns a promise and on successfull connection executing a query using Request object\n        sql.connect(config).then(function () {\n            new sql.Request().query('select * from products', function (err, recordset) {      \n                callbackFn(recordset);        \n            });\n        });\n\n     };\n})(module.exports);\n```", "```js\n(function (homeController) {\n    var productService = require('../DataServices/ProductService');\n\n    homeController.load = function (expressApp) {\n        expressApp.get('/', function (req, res) {\n            var products = productService.getRecords(function (products) {\n                console.dir(products);\n                res.render(\"ejsviews/home/index\", { appName: \"EJS Application\", message: \"EJS MVC Implementation\", data: products });\n            });\n        });\n    };\n})(module.exports);\n```", "```js\n<% layout('../layout.ejs') -%>\n<h1><%= appName %></h1>\n<p> <%= message %></p>\n\n<table>\n<th> \n<td> Product Name </td>\n<td> Description </td>\n<td> Price </td>\n</th>\n <% data.forEach(function(product) { %>\n  <tr> <td><%= product.Name %> </td> <td> <%= product.Description %> </td><td> <%= product.Price %> </td></tr>\n <% }); %>\n</table>\n```", "```js\nvar bodyParser = require('body-parser');\n\nexpressApp.use(new bodyParser());\n```", "```js\n    expressApp.post('/', function (req, res) {\n            console.log(req.body.txtName);\n           productService.saveProduct(req.body.txtName, req.body.txtDescription, req.body.txtPrice, function (result) {\n                res.send(\"Record saved successfully\");\n            });\n        });\n```", "```js\nDataService.js file:\n```", "```js\ndata.saveProduct = function (name, description, price, callbackFn) {\n\n        //loaded SQL object\n        var sql = require('mssql');\n\n        //database configuration attributes to connect\n        var config = {\n            user: 'sa',\n            password: '123',\n            server: 'ovais-pc', // You can use 'localhost\\\\instance' to connect to named instance \n            database: 'products'\n        }\n\n        //Connect to SQL Server returns a promise and on successfull connection executing a query using Request object\n        sql.connect(config).then(function () {\n            new sql.Request().query(\"INSERT into products (Name, Description, Price) values('\"+ name +\"', '\"+ description+\"',\"+ price+\")\", function (err, recordset) {\n                callbackFn(recordset);\n            });\n       });\n\n    };\n```", "```js\n<form method=\"post\">\n<table>\n<tr>\n  <td> Product Name: </td>\n  <td> <input type='text' name='txtName'  /> </td>\n</tr>\n<tr>\n  <td> Description: </td>\n  <td><input type='text' name='txtDescription'  /></td>\n</tr>\n<tr>\n  <td> Price: </td>\n  <td><input type='number' name='txtPrice' /></td>\n\n</tr>\n<tr>\n<td> &nbsp; </td>\n<td><input type=\"submit\" value=\"Save\" /> </td>\n</tr>\n</table>\n</form>\n```"]