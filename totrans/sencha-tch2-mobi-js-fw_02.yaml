- en: Chapter 2. Creating a Simple Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章 创建一个简单的应用
- en: 'In this chapter, we will go through the basics of creating a simple application
    in Sencha Touch. We will cover the basic elements that are used in most Sencha
    Touch applications and take a look at the more common components you might use
    in your own applications: containers, panels, lists, toolbars, and buttons.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将带领大家了解如何在Sencha Touch中创建一个简单应用的基础知识。我们将涵盖大多数Sencha Touch应用中使用的的基本元素，并查看你可能会在自己的应用中使用的更常见的组件：容器、面板、列表、工具栏和按钮。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Creating a basic application with Sencha Cmd
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Sencha Cmd创建基本应用
- en: Understanding the application's files and folders
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解应用的文件和文件夹
- en: Modifying the application
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改应用
- en: Controlling the application's layout
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制应用的布局
- en: Testing and debugging the application
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试和调试应用
- en: Updating the application for production
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新生产环境中的应用
- en: Let's learn how to set up a basic Sencha Touch application.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们学习如何设置一个基本的Sencha Touch应用。
- en: Setting up the application
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置应用
- en: Before we get started, you need to be sure that you've set up your development
    environment properly as per the outline in the previous chapter.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，你需要确保你已经根据前章的概要正确地设置了你的开发环境。
- en: Note
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**The root folder**'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**根目录**'
- en: As noted in the previous chapter, you will need to have files and folders for
    your application located in the correct folder on your local machine in order
    to allow the web server to locate them.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如前章所述，为了允许网络服务器找到它们，你需要将你的应用文件和文件夹放在你本地机器上正确的文件夹中。
- en: On a Mac machine, this will be the `Sites` folder under your home folder if
    you are using web sharing. If you are using MAMP, the location is `/Applications/MAMP/htdocs`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在Mac机器上，如果你使用网络共享，这将是你家目录下的`Sites`文件夹。如果你使用MAMP，位置是`/Applications/MAMP/htdocs`。
- en: On Windows, this will be `C:\xampp\htdocs` (assuming you installed XAMPP as
    described in the previous chapter).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上，这将是在前章中描述的安装XAMPP后的`C:\xampp\htdocs`。
- en: Through out the rest of this book, we will refer to this folder as the root
    folder.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的其余部分，我们将把这个文件夹称为根目录。
- en: In previous versions of Sencha Touch, you had to set up your directory structure
    manually. In an effort to make this a bit easier and more consistent, Sencha now
    recommends the use of Sencha Cmd to create the initial application structure.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在Sencha Touch的先前版本中，你必须手动设置你的目录结构。为了使这个过程变得稍微容易一些并且更加一致，Sencha现在建议使用Sencha Cmd来创建初始应用结构。
- en: Getting started with Sencha Cmd
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Sencha Cmd入门
- en: As mentioned in the previous chapter, Sencha Cmd is a command-line tool that
    allows you to generate a number of basic Sencha Touch files from the command line.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前章所提到的，Sencha Cmd是一个命令行工具，它允许你从命令行生成许多基本的Sencha Touch文件。
- en: You will first need to download a copy of Sencha Cmd from:[http://www.sencha.com/products/sencha-cmd/download](http://www.sencha.com/products/sencha-cmd/download)
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要从以下链接下载一个Sencha Cmd的副本：[http://www.sencha.com/products/sencha-cmd/download](http://www.sencha.com/products/sencha-cmd/download)
- en: On Windows or Mac, you can run the installer after it downloads and then follow
    the prompts for installing Sencha Cmd.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows或Mac上，下载安装程序后可以运行它，然后按照安装Sencha Cmd的提示操作。
- en: 'Once you have installed Sencha Cmd, you can open the command-line prompt on
    your computer in the following manner:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你安装了Sencha Cmd，你可以以以下方式在你的电脑上打开命令行提示：
- en: On Mac OS X, go to `Applications/Utilities` and launch **Terminal**
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Mac OS X上，前往`Applications/Utilities`并启动**终端**
- en: On Windows, go to **Start** | **Run** and type `cmd`
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Windows上，点击**开始** | **运行**，然后输入`cmd`
- en: 'Once the command line is available, type `sencha` and you should see something
    similar to this:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦命令行可用，输入`sencha`，你应该会看到类似以下内容：
- en: '![Getting started with Sencha Cmd](img/0748OS_02_01.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![Sencha Cmd入门](img/0748OS_02_01.jpg)'
- en: 'This tells you that the command was successful and provides you with some of
    the basic `help` options for Sencha Cmd. In fact, we will be using the first command
    listed in this Help section to generate our new application:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉你命令是否成功，并提供了一些Sencha Cmd的基本`帮助`选项。实际上，我们将使用这个帮助部分列出的第一个命令来生成我们的新应用：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'There are seven pieces to this command, so let''s take a look at them one by
    one:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令有七个部分，所以我们逐一来看看：
- en: '`sencha`: This tells the command line the name of the application that will
    process the command; in this case, `Sencha Cmd,` or just `sencha` for short.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sencha`：这告诉命令行将处理命令的应用程序名称；在这个例子中，`Sencha Cmd`，或者简称`sencha`。'
- en: '`-sdk`: This tells Sencha Cmd that we will specify the path to our Sencha Touch
    libraries. We can also just change the directory to the folder where we downloaded
    these libraries and eliminate the `–sdk` part and the path information that follows.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-sdk`：这告诉Sencha Cmd我们将指定我们Sencha Touch库的路径。我们也可以直接将目录更改为我们下载这些库的文件夹，从而省略`-sdk`部分以及随后的路径信息。'
- en: '`/path/to/sdk`: This will be replaced with the actual path to the Sencha Touch
    library files we downloaded (not Sencha Cmd, but the actual Sencha Touch library).'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/sdk`：这将被替换为我们下载的Sencha Touch库文件的实际路径（不是Sencha Cmd，而是实际的Sencha Touch库）。'
- en: '`generate`: This indicates what we are going to do.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`generate`：这表明了我们接下来要做什么。'
- en: '`app`: Since we are generating something, what will we be generating? This
    part of the command answers this question. In this case, we will be generating
    an application.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app`：由于我们将要生成一些东西，那么我们将要生成什么？这一部分的命令回答了这个问题。在这个例子中，我们将要生成一个应用。'
- en: '`MyApp`: This will be the name of your application. It will also be used for
    the JavaScript namespace, which we will cover a bit later. This is arbitrary,
    but it must be a single word with no spaces.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MyApp`：你的应用将被称为这个名字。它还将用于我们稍后介绍的JavaScript命名空间。这是任意的，但必须是一个没有空格的单个单词。'
- en: '/`path/to/myapp`: This will be the path to your new application. This path
    should be in a new folder in the root folder we talked about earlier.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/path/to/myapp`：这将是你的新应用的路径。这个路径应该在我们之前提到的根目录中的一个新文件夹里。'
- en: 'For this chapter, we are going to create an application called `TouchStart`.
    Your path information will need to reflect your own personal setup, but the command
    should look something similar to this:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章节，我们将要创建一个名为`TouchStart`的应用。你的路径信息需要反映你个人的设置，但命令应该看起来类似于这样：
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Adjust your paths to match the location of your Sencha Touch libraries and
    your root folder. Once the command is executed, you will see a number of messages
    appearing in your terminal in the following manner:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你的Sencha Touch库和根目录的位置调整你的路径。命令一旦执行，你将在终端中看到如下方式出现的一系列信息：
- en: '![Getting started with Sencha Cmd](img/0748OS_02_02.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![使用Sencha Cmd开始](img/0748OS_02_02.jpg)'
- en: Sencha Cmd copies the files that it needs and sets up your application. Once
    the command has been executed, you should have a new folder in your root folder
    called `TouchStart`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Sencha Cmd复制它需要的文件并设置你的应用。一旦命令执行，你应该在根目录中有一个名为`TouchStart`的新文件夹。
- en: 'Open that folder and you will see the following files and directories:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 打开那个文件夹，你会看到以下文件和目录：
- en: '![Getting started with Sencha Cmd](img/0748OS_02_03.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![使用Sencha Cmd开始](img/0748OS_02_03.jpg)'
- en: 'We will be working almost exclusively with the files in the `app` folder, but
    it''s worth covering a little bit about each of these files and directories:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将几乎完全与`app`目录中的文件一起工作，但了解这些文件和目录的每个部分还是值得的：
- en: '`app`: This is where all of our application files reside; we will cover this
    in detail throughout this chapter.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app`：本章节我们将详细介绍这个目录，这是我们的所有应用文件所在的地方。'
- en: '`app.js`: This is the JavaScript file that sets up our application and handles
    the initial launch of the application. We will take a closer look at this in the
    next section.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app.js`：这个JavaScript文件设置我们的应用并在应用启动时处理初始化。我们将在下一节更详细地查看这个文件。'
- en: '`build.xml`: This is a configuration file for building compiled applications.
    You may not need to change this file.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`build.xml`：这是一个编译应用程序的配置文件。你可能不需要更改这个文件。'
- en: '`index.html`: This file is much like the `index.html` file for any website.
    It is the first file that is loaded by the web browser. However, unlike traditional
    websites, the `index.html` file of our application only loads our initial JavaScript
    and doesn''t do anything else. You shouldn''t need to change this file.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index.html`：这个文件与任何网站的`index.html`文件类似。它是浏览器加载的第一个文件。然而，与传统的网站不同，我们应用的`index.html`文件只加载我们的初始JavaScript，然后什么都不做。你不需要更改这个文件。'
- en: '`packager.json`: This is a configuration file that tells our application how
    the files are set up and where they are located. For the most part, you may not
    need to change this file.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`packager.json`：这个配置文件告诉我们应用如何设置文件以及它们的所在位置。大部分情况下，你可能不需要更改这个文件。'
- en: '`packages`: The `packages` directory is a placeholder where you can install
    additional packages for your application. It is largely unused at this juncture.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`packages`：`packages`目录是一个占位符，你可以在这里为你的应用程序安装额外的包。在这个阶段，它基本上是未被使用的。'
- en: '`resources`: The `resources` directory contains our CSS files and start up
    screens and icons. We will learn more about this directory in the next chapter
    on styling.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`resources`：`resources`目录包含我们的CSS文件和启动屏幕及图标。我们将在下一章关于样式的内容中了解更多关于这个目录的信息。'
- en: '`touch`: This directory contains a copy of the Sencha Touch library files.
    It should never be modified.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`touch`：这个目录包含Sencha Touch库文件的副本。它绝不应该被修改。'
- en: We can also view our new application in a web browser by going to our web directory.
    This would be `http://localhost/TouchStart` for Windows and MAMP or `http://localhost/~username/TouchStart`
    for Mac users with web sharing enabled.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以通过访问我们的网页目录，在网络浏览器中查看我们新的应用程序。对于Windows和MAMP用户，这将是在`http://localhost/TouchStart`，而对于启用了网络共享的Mac用户，则是在`http://localhost/~username/TouchStart`。
- en: '![Getting started with Sencha Cmd](img/0748OS_02_04(new).jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![Sencha Cmd入门](img/0748OS_02_04(new).jpg)'
- en: Tip
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'It is also worth noting that Sencha Cmd itself has a built-in web server that
    you can use to view your Sencha Touch applications. You can start the Sencha Cmd
    web server using the following command:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 值得一提的是，Sencha Cmd本身就有一个内置的网络服务器，你可以用它来查看你的Sencha Touch应用程序。你可以使用以下命令启动Sencha
    Cmd网络服务器：
- en: '[PRE2]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You can then open your web browser by going to `http://localhost:8000.`
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以通过访问`http://localhost:8000`来打开你的网络浏览器。
- en: For more information on using the Sencha Cmd web server, visit [http://docs.sencha.com/cmd/3.1.2/#!/guide/command.](http://docs.sencha.com/cmd/3.1.2/#!/guide/command.)
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 有关使用Sencha Cmd网络服务器的更多信息，请访问[http://docs.sencha.com/cmd/3.1.2/#!/guide/command.](http://docs.sencha.com/cmd/3.1.2/#!/guide/command.)
- en: As we can see from the basic application that has been created, we are looking
    at the contents of a file called `Main.js` located at `app/view`. We can make
    changes to this file and see the results when we reload the page.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 从已经创建的基本应用程序中，我们可以看到的是位于`app/view`的`Main.js`文件的内容。我们可以修改这个文件，并在重新加载页面时看到结果。
- en: Before we start tinkering around with the `Main.js` file, we need to take a
    look at the file that loads everything up for us, namely `app.js`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始修改`Main.js`文件之前，我们需要先查看一下为我们加载所有内容的文件，即`app.js`。
- en: Creating the app.js file
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 app.js 文件
- en: The `app.js` file is responsible for setting up our application, and though
    we don't need to modify it very often, it's a good idea to get a feel of what
    it does and why.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`app.js`文件负责设置我们的应用程序，虽然我们不需要经常修改它，但了解它做什么以及为什么这样做是个好主意。'
- en: 'Open your `app.js` file in your code editor; at the top, you will see a long
    block of comments (which you should read and familiarize yourself with). Underneath
    the comments, the code begins with:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的代码编辑器中打开`app.js`文件；在顶部，你会看到一大段注释（你应该阅读并熟悉它）。在注释下方，代码以：
- en: '[PRE3]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This tells the application where our Sencha Touch library files are located.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉应用程序我们的Sencha Touch库文件位于哪里。
- en: 'Next, we define our application with the following code:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们用以下代码定义我们的应用程序：
- en: '[PRE4]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now that is quite a bit of code for one big bite, so let's understand one piece
    at a time.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 一口气吃下这么多代码确实有些多，所以让我们一步一步来理解。
- en: The first part, `Ext.Application({…});`, creates a new application for Sencha
    Touch. Everything listed between the curly braces is a configuration option for
    this new application. While there are a number of configuration options for an
    application, most consist of at least the application's name and launch function.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 第一部分，`Ext.Application({…});`，为Sencha Touch创建了一个新的应用程序。大括号之间的所有内容都是这个新应用程序的配置选项。虽然一个应用程序有很多配置选项，但大多数至少包括应用程序的名称和启动函数。
- en: Note
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Namespaces**'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**命名空间**'
- en: One of the biggest problems with using someone else's code is the issue of naming.
    For example, if the framework you are using has an object called `Application`,
    and if you create your own object called `Application`, the two functions will
    conflict. Sencha Touch uses the concept of namespaces to keep these conflicts
    from happening.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 使用他人代码时的一个最大问题就是命名问题。例如，如果你正在使用的框架有一个名为`Application`的对象，而你又创建了一个名为`Application`的自定义对象，这两个对象的功能将会发生冲突。Sencha
    Touch 使用命名空间的概念来防止这些冲突的发生。
- en: In this case, Sencha Touch uses the namespace `Ext`. You will see this namespace
    being used throughout the code in this book. It is simply a way to eliminate potential
    conflicts between the frameworks' objects and code and your own objects and code.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在此案例中，Sencha Touch使用了命名空间`Ext`。你会在本书的代码中看到这个命名空间被广泛使用。这只是一个消除框架对象和代码以及您自己的对象和代码之间潜在冲突的方式。
- en: Sencha will automatically set up a namespace for your own code as part of the
    new `Ext.Application` object. In this case, it will be `TouchStart`, which we
    used to generate our application.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Sencha将自动为您自己的代码设置命名空间，作为新`Ext.Application`对象的一部分。在此案例中，它将是`TouchStart`，我们用它来生成我们的应用程序。
- en: '`Ext` is also part of the name of Sencha''s web application framework called
    `ExtJS`. Sencha Touch uses the same namespace convention to allow developers to
    familiarize with one library and easily understand the other.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`Ext`也是Sencha的Web应用程序框架`ExtJS`的名称之一。Sencha Touch使用相同的命名空间约定，让开发者熟悉一个库，并容易理解另一个库。'
- en: 'When we create a new application, we need to pass it some configuration options.
    This will tell the application how to look and what to do. These configuration
    options are contained within curly braces `{}` and separated by commas. The first
    option is:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们创建一个新应用程序时，我们需要向其传递一些配置选项。这将告诉应用程序如何外观以及要做什么。这些配置选项包含在花括号`{}`内，并用逗号分隔。第一个选项是：
- en: '[PRE5]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This sets the name of our application to whatever is between the quotes. The
    `name` value should not contain spaces as Sencha also uses this value to create
    a namespace for your own code objects. In this case, we have called the application
    `TouchStart`.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这将我们应用程序的名称设置为引号之间的任何内容。`name`值不应包含空格，因为Sencha也使用这个值为您自己的代码对象创建命名空间。在此案例中，我们称之为应用程序`TouchStart`。
- en: 'After the `name` option, we have a `requires` option:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在`name`选项之后，我们有一个`requires`选项：
- en: '[PRE6]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This is where we list any files that are required as soon as the application
    launches. Since we actually use the `Ext.Msg.confirm` function towards the bottom
    of this file, we have to include the `Ext.MessageBox` class here.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们列出任何文件的地方，这些文件在应用程序启动时就需要。由于我们实际上在文件的底部使用了`Ext.Msg.confirm`函数，所以我们不得不在这里包含`Ext.MessageBox`类。
- en: 'Next, we have the `views` section:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们有`views`部分：
- en: '[PRE7]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This section serves as a reference to our `Main.js` file in the `app/view` folder.
    We can also have listings for `controllers`, `stores`, or `models` here, but right
    now, the `Main.js` view file is the only one we have as part of this skeleton
    app. We will learn more about controllers, models, stores, and views in later
    chapters.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 本节作为`app/view`文件夹中`Main.js`文件的参考。我们也可以在这里为`controllers`、`stores`或`models`列出清单，但目前，这个骨架应用中唯一的一个是`Main.js`视图文件。我们将在后面的章节中了解更多关于控制器、模型、存储器和视图的内容。
- en: The `icon` and `startupImage` sections provide links to the image files used
    for the application's icon and startup screens. The various sizes listed ensure
    that the application's images display correctly across multiple devices.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`icon`和`startupImage`部分提供了用于应用程序图标和启动屏幕的图像文件的链接。列出的大小确保了应用程序的图像能够在多种设备上正确显示。'
- en: 'The next option is where things start to get interesting:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个选项是事情开始变得有趣的地方：
- en: '[PRE8]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `launch` function executes once the required JavaScript files (as well as
    any views, models, stores, and controllers that are listed) have been loaded.
    This function first destroys our loading indicator (since we are done loading
    files). It then creates our main view and adds it to the viewport. This viewport
    is where we will add things that we want to display to the user.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`launch`函数在所需的JavaScript文件（以及任何列出的视图、模型、存储器和控制器）加载完成后执行。这个函数首先销毁我们的加载指示器（因为我们已经完成加载文件）。然后创建我们的主视图并将其添加到视口。视口是我们向用户显示内容的地方。'
- en: 'In this case, `TouchStart.view.Main` refers to our `Main.js` file in the `app/view`
    folder. This is how Sencha Touch knows how to find files:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在此情况下，`TouchStart.view.Main`指的是`app/view`文件夹中的`Main.js`文件。这就是Sencha Touch如何查找文件的方式：
- en: '`TouchStart` is our application'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TouchStart`是我们应用程序的一部分。'
- en: '`view` is the `views` folder'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`view`是`views`文件夹'
- en: '`Main` is our `Main.js` file'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Main`是我们的`Main.js`文件。'
- en: Let's take a closer look at this `Main.js` file and see how it creates all of
    the visual pieces we currently see in our skeleton application.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们 closer 看看这个`Main.js`文件，看看它是如何创建我们目前看到的骨架应用程序中的所有视觉元素的。
- en: Creating the Main.js file
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建Main.js文件
- en: The `Main.js` file is located in the `app/view` folder. The `view` files are
    the visual components of our application. Let's open this file and see how a simple
    tab panel is created.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`Main.js`文件位于`app/view`文件夹中。`view`文件是我们应用程序的视觉组件。让我们打开这个文件，看看如何创建一个简单的标签面板。'
- en: '[PRE9]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We've removed the contents of the `items` section from our code example to make
    this a bit easier to read through.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从我们的代码示例中删除了`items`部分的内容，以使这更容易阅读。
- en: The first two lines of the preceding code are common to pretty much every component
    you will create in Sencha Touch.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 前代码的的第一行和第二行在您在Sencha Touch中创建的几乎每个组件中都是通用的。
- en: '[PRE10]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The first line defines the full name of your component in the form:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行定义了组件的全名，格式如下：
- en: App name (namespace)
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序名称（命名空间）。
- en: Folder name
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件夹名称。
- en: Filename (no extension)
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件名（无扩展名）。
- en: Next, we list the component we are extending; in this case, a tab panel. You
    will see this define/extend pattern throughout this book.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们列出我们要扩展的组件；在这个例子中，是一个标签面板。您会在本书中看到这个定义/扩展模式。
- en: 'You will also notice that the tab panel is called `Ext.tab.Panel`. This lets
    Sencha Touch know that the component is a native component (`Ext`) located in
    a folder named `tab` in a file called `Panel.js`. This pattern allows Sencha Touch
    to load the correct file and extend it using our new configuration options:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 您还会注意到，标签面板被称为`Ext.tab.Panel`。这使得Sencha Touch知道该组件是一个本地组件（`Ext`），位于名为`tab`的文件夹中的一个名为`Panel.js`的文件中。这种模式允许Sencha
    Touch加载正确的文件，并使用我们新的配置选项对其进行扩展：
- en: '[PRE11]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The first thing we do is set an `xtype` value for our new component. The `xtype`
    part is a short name that allows us to easily reference and create copies of our
    component without having to use the full name. You will see some examples of this
    later on in this book.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们做的第一件事是为我们的新组件设置一个`xtype`值。`xtype`部分是一个简短的名字，允许我们轻松地引用和创建我们组件的副本，而不必使用完整名称。您稍后在本书中会看到一些这样的例子。
- en: Our skeleton application uses a `TitleBar` and a `Video` component, so we need
    these two files.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的骨架应用程序使用了一个`TitleBar`和一个`Video`组件，因此我们需要这两个文件。
- en: Next, we set up a `config` section. This is where we set any custom settings
    for our new component. In this case, we position our tab bar at the bottom.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们设置了一个`config`部分。这个部分用于为我们新组件设置任何自定义设置。在这个例子中，我们将我们的标签栏定位在底部。
- en: Now we want to take a look at the `items` section that we removed from our code
    example and see what effect this section has on our tab panel.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们想看看我们从代码示例中删除的`items`部分，并研究这个部分对我们的标签面板有什么影响。
- en: Exploring the tab panel
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索标签面板。
- en: The `Ext.tab.Panel` is designed to do a few things for us automatically. The
    most important thing is that for every panel we add in the `items` section, a
    corresponding tab is created for us in the tab panel. By default, only the first
    panel is actually shown. However, the tab panel also switches these panels for
    us automatically when the panel's tab is tapped.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`Ext.tab.Panel`被设计为自动为我们做几件事情。最重要的是，对于我们在`items`部分添加的每一个面板，都会自动为我们在标签面板中创建一个对应的标签。默认情况下，只显示第一个面板。然而，标签面板也会在我们点击面板的标签时自动切换这些面板。'
- en: 'If you look back at our app in the browser, you will also see that each tab
    has a title and an icon. These two `config` options are set as part of the individual
    items that currently look similar to this:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您回过头来看我们在浏览器中的应用程序，您还会看到每个标签页都有一个标题和一个图标。这两个`config`选项是作为当前看起来类似于这样的个别项目设置的：
- en: '[PRE12]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Notice that our `items` list is enclosed in brackets and the individual components
    within the item list are contained in curly braces. This nested component structure
    is a key part of Sencha Touch, and you will see it in use throughout this book.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们的`items`列表用括号括起来，列表中的各个组件用花括号包含。这种嵌套组件结构是Sencha Touch的关键部分，您会在本书的各个章节中看到它的使用。
- en: 'The `title` and the `iconCls` properties control how the tabs appear for each
    item. Our titles are currently set to `Welcome` and `Getting Started`. Our `iconCls`
    configuration determines the icon that will be used in the tab. In this case,
    we are using two of the default icons: `home` and `action`.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`title`和`iconCls`属性控制了每个条目中标签的外观。我们的标题目前设置为`Welcome`和`Getting Started`。我们的`iconCls`配置决定了标签中使用的图标。在这种情况下，我们使用了两个默认图标：`home`和`action`。'
- en: Our panel is the `Welcome` panel and it has config options that allow us to
    use styled HTML content and make it scrollable (if the content is larger than
    the screen size). The text inside the `html` config option is what we see as the
    content of our first panel.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的面板是`Welcome`面板，它有配置选项，允许我们使用带样式的HTML内容并使其可滚动（如果内容大于屏幕大小）。`html`配置选项里面的文本是我们看作是第一个面板的内容的。
- en: You will also notice that our panel has items of its own. In this case, there's
    a `titlebar` that will be `docked` at the `top` of our panel by `title Welcome
    to Sencha Touch 2`.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到我们的面板也有它自己的项目。在这种情况下，有一个`titlebar`将会被`docked`在我们的面板的`top`上，标题是“**欢迎使用Sencha
    Touch 2**”。
- en: 'Our second `Get Started` panel has two `items` in it: a `titlebar` like our
    first panel and a `video` component which lists a URL for the video and a separate
    `posterUrl` for the image that will appear before the user plays the video.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第二个`Get Started`面板里面有 two `items`：一个像我们第一个面板一样的`titlebar`和一个`video`组件，它列出视频的URL和另一个`posterUrl`，这是在用户播放视频前会显示的图片。
- en: As the text in our first panel notes, we can change the content of this file
    and see the results when we reload the page. Let's give that a try and see how
    it works.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们第一个面板中的文本所提到的，我们可以更改这个文件的内容，当我们重新加载页面时，就能看到结果。让我们试一试，看看它是如何工作的。
- en: Adding a panel
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加一个面板
- en: 'The first thing we want to do is delete everything between the `items` brackets
    `[ ]` for our tab panel. Next, we will add in a new panel similar to this:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要做的第一件事是删除我们标签面板中`items`括号`[ ]`之间的所有内容。接下来，我们将添加一个类似的新面板：
- en: '[PRE13]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'If we reload the browser now, we see this:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在重新加载浏览器，我们看到这个：
- en: '![Adding a panel](img/0748OS_02_05.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![添加一个面板](img/0748OS_02_05.jpg)'
- en: Since we only have one panel now, we only get one tab. We also got rid of the
    title bar, so we don't have anything at the top of the page.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们现在只有一个面板，所以我们只有一个标签。我们还移除了标题栏，所以我们页面顶部没有什么东西。
- en: Tip
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Sharp-eyed readers will also notice that we explicitly set an `xtype` value
    for `panel` in this example. The tab panel automatically assumes that if you don't
    specify an `xtype` value for one of its items, it's a panel. However, it's a good
    idea to get in the habit of setting the `xtype` value for any components you use.
    We'll talk more about xtypes in [Chapter 4](ch04.html "Chapter 4. Components and
    Configurations"), *Components and Configurations*.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 细心的读者还会注意到，我们在这个例子中明确为`panel`设置了一个`xtype`值。标签面板会自动假设，如果你没有为它的一个项目指定`xtype`值，那么它就是个面板。然而，设定组件使用的`xtype`值是一个好习惯。我们将在[第4章](ch04.html
    "第4章：组件和配置")，*组件和配置*中更多地讨论xtype。
- en: Right now, our panel is very simple and only contains one line of text. In the
    real world, applications are rarely this simple. We need a way to arrange different
    elements inside our panel so we can create modern, complex layouts. Fortunately
    for us, Sencha Touch has a built-in configuration called `layout`, which will
    help us with this.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的面板非常简单，只包含一行文本。在现实世界中，应用程序很少有这么简单。我们需要一种在我们面板内安排不同元素的方法，这样我们就可以创建现代、复杂的布局。幸运的是，Sencha
    Touch有一个内置的配置叫做`layout`，这将帮助我们实现这一点。
- en: Controlling the look with layouts
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用布局控制外观
- en: 'Layouts give you a number of options for arranging content inside containers.
    Sencha Touch offers five basic layouts for containers:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 布局为您提供了一系列在容器内安排内容的选择。Sencha Touch为容器提供了五种基本布局：
- en: '`fit`: This is a single item layout that automatically expands to take up the
    whole container'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fit`：这是一个单一项目的布局，它会自动扩展以占据整个容器。'
- en: '`hbox`: This arranges items horizontally in the container'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hbox`：这使得项目在容器内水平排列。'
- en: '`vbox`: This arranges items vertically in the container'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`vbox`：这使得项目在容器内垂直排列。'
- en: '`card`: This arranges items like a stack of cards, where only the active card
    is initially visible'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`card`：这像是一叠卡片一样排列项目，最初只显示活动卡片。'
- en: '`docked`: This places an item at the top or bottom or to the left or right
    of the display'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docked`：这使得项目在显示区域的顶部或底部或左侧或右侧。'
- en: In our previous example, we did not declare a layout. In general, you will always
    want to declare a layout for any container. If you don't, the components inside
    the container may not size themselves appropriately when they appear.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前的例子中，我们没有声明布局。通常，你总是想要为任何容器声明一个布局。如果你不这么做，容器内的组件在出现时可能不会适当地调整大小。
- en: We have seen the last two layouts already. The tab panel uses a `card` layout
    to switch between the different panels in its `items` list.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了最后两种布局。标签面板使用`card`布局在它的`items`列表中切换不同的面板。
- en: The title bars in our original `Main.js` file had a `docked` property as part
    of their configuration. This configuration docks them to a particular part of
    the screen. You can even dock multiple items to one of the four sides of a panel.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们原始的`Main.js`文件中的标题栏有一个`docked`属性作为它们配置的一部分。这个配置将它们停靠到屏幕的特定部分。你甚至可以将多个项目停靠到一个面板的四个边之一。
- en: 'For example, if we add an `items` section to our current panel with the following:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们向我们的当前面板的`items`部分添加如下内容：
- en: '[PRE14]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The two bars will stack one on top of the other in the following manner:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个栏将以下方式堆叠在一起：
- en: '![Controlling the look with layouts](img/0748OS_02_06.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![使用布局控制外观](img/0748OS_02_06.jpg)'
- en: Using a fit layout
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用适合布局
- en: 'Let''s add a second panel to understand what we did earlier. After the closing
    curly brace from our first panel, add a comma and then the following code:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加第二个面板来理解我们之前做了什么。在我们第一个面板的闭合花括号后，加上一个逗号，然后添加以下代码：
- en: '[PRE15]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'For this panel, we have added a `config` option, `layout: ''fit''`, and an
    `items` section with a single button.'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '对于这个面板，我们添加了一个`config`选项，`layout: ''fit''`，以及一个`items`部分，里面有一个按钮。'
- en: '![Using a fit layout](img/0748OS_02_07.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![使用适合布局](img/0748OS_02_07.jpg)'
- en: As you can see from the preceding screenshot, this gives us a second tab, which
    contains our new button. Since the layout is set to fit, the button expands to
    take up all the available space. While this is useful when you want a component
    to take up all the available space, it doesn't work very well if you want to nest
    multiple components.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前一个屏幕截图所示，这给了我们第二个标签页，其中包含我们新添加的按钮。由于布局被设置为适合，按钮会扩展以占据所有可用的空间。虽然当你想要一个组件占据所有可用空间时这很有用，但如果你想要嵌套多个组件，它就不会表现得很好。
- en: Using a vbox layout
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用vbox布局
- en: 'The `vbox` layout arranges components in a stack from top to bottom. In this
    case, multiple components will fill up the available screen space. Let''s add
    another panel to see what this looks like. As before, after the closing curly
    brace from our last panel, add a comma and then the following code:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`vbox`布局从上到下堆叠组件。在这个例子中，多个组件将填满可用的屏幕空间。让我们添加另一个面板来看看这是什么样子。像之前一样，在我们最后一个面板的闭合花括号后，加上一个逗号，然后添加以下代码：'
- en: '[PRE16]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'As you can see, this panel has a configuration of `layout: ''vbox''` and a
    list of three `items`. The items are a collection of `container` components we
    want to include inside our `panel`.'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '正如你所看到的，这个面板有一个`layout: ''vbox''`的配置和一个三个`items`的列表。这些项目是我们想要包含在我们`panel`内的`container`组件的集合。'
- en: The `container` component is a simplified version of the `panel`, which has
    no options for elements such as toolbars or title bars.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`container`组件是`panel`的简化版，它没有工具栏或标题栏等元素的选项。'
- en: 'Our first two containers have a configuration called `flex`. The `flex` configuration
    is unique to `vbox` and `hbox` layouts (we''ll get to `hbox` right after this).
    The `flex configuration` controls how much space the component will take up proportionally
    in the overall layout. You may also have noticed that the last container does
    not have a `flex` configuration. Instead, it has `height: 50`. The `vbox` layout
    will interpret these values to layout the container as follows:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '我们的前两个容器有一个叫做`flex`的配置。`flex`配置是`vbox`和`hbox`布局所特有的（我们会在后面马上讲到`hbox`）。`flex`配置控制组件在整体布局中占用的比例空间。你也许还注意到最后一个容器没有`flex`配置。相反，它有`height:
    50`。`vbox`布局会解释这些值来按以下方式布局容器：'
- en: Since we have a component with a height of `50`, the `vbox` layout will leave
    that component's height to 50 pixels.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们有一个高度为`50`的组件，`vbox`布局将把这个组件的高度留为50像素。
- en: The `vbox` layout will then use the `flex` values of the other two components
    as a ratio. In this case, 2:1.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`vbox`布局然后将其他两个组件的`flex`值作为比例。在这个例子中，2:1。'
- en: The end result is a 50-pixel high container at the bottom of the screen. The
    other two containers will take up the rest of the available space. The top container
    will also be twice as tall as the middle container.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最终结果是在屏幕底部的一个50像素高的容器。其他两个容器将占据剩余的可用空间。顶部容器也将是中间容器两倍高。
- en: 'In order to make these sizes clearer, we have also added a style to each container
    to color the background and make it stand out a bit. The result is as follows:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这些大小更清晰，我们还给每个容器添加了一个样式，以颜色背景并使其稍微突出。结果如下：
- en: '![Using a vbox layout](img/0748OS_02_08.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![使用vbox布局](img/0748OS_02_08.jpg)'
- en: This layout will also shrink and expand when the window is resized, making it
    a very effective layout for various device sizes.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 这种布局在窗口大小调整时也会缩小和扩大，使其成为适应各种设备尺寸非常有效的布局。
- en: Using an hbox layout
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用hbox布局
- en: The `hbox` layout works almost in the same way as the `vbox` layout, except
    that the containers are arranged from left to right in the `hbox` layout.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '`hbox`布局的运作方式几乎与`vbox`布局相同，不同之处在于`hbox`布局中的容器是从左到右排列的。'
- en: You can add a panel with an `hbox` layout by copying our previous `vbox` example
    and pasting it after the last panel in our `items` list (don't forget the comma
    between the items).
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过复制我们之前的`vbox`示例并将其粘贴在我们`items`列表中的最后一个面板之后来添加一个具有`hbox`布局的面板（不要忘记在项目之间加上逗号）。
- en: 'Next we need to modify a few configurations in our new panel:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要修改我们新面板中的几个配置：
- en: 'Set `title: ''VBox''` to `title: ''HBox''`'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '将`title: ''VBox''`设置为`title: ''HBox''`'
- en: 'Set `layout: ''vbox''` to `layout: ''hbox''`'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '将`layout: ''vbox''`设置为`layout: ''hbox''`'
- en: 'In the last `container,` set `height: 50` to `width: 50`'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '在最后一个`container`中，将`height: 50`设置为`width: 50`'
- en: 'When you reload the page, you should be able to click on the **HBox** tab and
    see something similar to the following screenshot:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 当你重新加载页面时，你应该能够点击**HBox**标签，并看到以下类似屏幕截图：
- en: '![Using an hbox layout](img/0748OS_02_09.jpg)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![使用hbox布局](img/0748OS_02_09.jpg)'
- en: You can nest these basic layouts to arrange your components in any number of
    ways. We will also cover some ways to style components in [Chapter 3](ch03.html
    "Chapter 3. Styling the User Interface"), *Styling the User Interface*.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以嵌套这些基本布局以以任何方式安排你的组件。我们还将介绍一些在[第3章](ch03.html "第3章：用户界面样式")中样式化用户界面的方法*样式化用户界面*。
- en: Testing and debugging the application
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试和调试应用程序
- en: The first place to start while testing an application is the error console.
    In Safari, from the **Develop** menu, select **Show Error Console**. In Chrome,
    from the **View** menu, choose **Developer** and then **JavaScript Console**.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试应用程序时，首先要查找错误控制台的地方。在Safari中，从**开发**菜单中选择**显示错误控制台**。在Chrome中，从**查看**菜单中选择**开发者**，然后选择**JavaScript控制台**。
- en: '![Testing and debugging the application](img/0748OS_02_10.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![测试和调试应用程序](img/0748OS_02_10.jpg)'
- en: Parse errors
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解析错误
- en: 'The error console in the previous screenshot tells us two very important things.
    The first is that we have **SyntaxError: Parse error**. This means that somewhere
    in the code, we did something that the browser didn''t understand. Typically,
    this can be something such as:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个屏幕截图中的错误控制台告诉我们两件非常重要的事情。首先，我们有一个**语法错误：解析错误**。这意味着代码中的某个地方，我们做了浏览器无法理解的事情。通常，这可能是因为：
- en: Forgetting to close a parenthesis, bracket, or brace, or adding an extra one
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 忘记关闭一个括号、方括号或花括号，或者添加了一个多余的
- en: Not having a comma between the configuration options or adding an extra comma
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在配置选项之间没有逗号，或者添加了多余的逗号
- en: Leaving out a semicolon at the end of one of the variable declarations
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在变量声明的末尾遗漏了一个分号
- en: Not closing quotes or double quotes (also not escaping quotes where necessary)
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有关闭引号或双引号（也没有在必要的地方转义引号）
- en: 'The second important bit of information is **/app/TouchStart-4.js: 39**. It
    tells us that:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '第二个重要信息是 **/app/TouchStart-4.js: 39**。它告诉我们：'
- en: '**/app/TouchStart-4.js** is the file where the error occurred'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**/app/TouchStart-4.js** 是发生错误的文件'
- en: '**39** is the line where the error occurred'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**39** 是发生错误的行'
- en: Using this information, we should be able to track down the error quickly and
    fix it.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些信息，我们应该能够快速追踪到错误并修复它。
- en: Case sensitivity
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 区分大小写
- en: 'JavaScript is a case-sensitive language. This means that if you type `xtype:
    ''Panel''`, you will get the following in the Error Console:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 'JavaScript是一种区分大小写的语言。这意味着如果你输入`xtype: ''Panel''`，你将在错误控制台中得到以下内容：'
- en: '**Attempting to create a component with an xtype that has not been registered:
    Panel**'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '**尝试创建一个具有未注册xtype的组件：Panel**'
- en: This is because Sencha Touch is expecting `panel` and not `Panel`.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为Sencha Touch期望`panel`而不是`Panel`。
- en: Missing files
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 丢失文件
- en: 'Another common problem is missing files. If you don''t point your `index.html`
    file at your `sencha-touch-debug.js` file correctly, you will get two separate
    errors:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个常见的问题是丢失文件。如果你没有正确地将你的`index.html`文件指向你的`sencha-touch-debug.js`文件，你会得到两个不同的错误：
- en: '**Failed to load resource: the server responded with a status of 404 (Not Found)**'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**加载资源失败：服务器响应状态为404（未找到）**'
- en: '**ReferenceError: Can''t find variable: Ext**'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**引用错误：找不到变量：Ext**'
- en: The first error is the critical bit of information; the browser could not find
    one of the files you tried to include. The second error is caused by the missing
    file and simply complains that the `Ext` variable cannot be found. In this case,
    it's because the missing file is `sencha-touch-debug.js`, which sets up the `Ext`
    variable in the first place.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个错误是关键信息；浏览器找不到您尝试包含的文件之一。第二个错误是由缺少的文件引起的，它简单地抱怨找不到`Ext`变量。在这种情况下，是因为缺少的文件是`sencha-touch-debug.js`，它首先设置了`Ext`变量。
- en: The web inspector console
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络检查器控制台
- en: 'Another feature of the Safari web inspector that is incredibly useful for debugging
    applications is the console. In your `app.js` file, add the following command:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个对于调试应用程序非常有用的 Safari 网络检查器功能是控制台。在您的`app.js`文件中，添加以下命令：
- en: '[PRE17]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Add it just before this `Ext.Application` line:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在这行`Ext.Application`之前添加它：
- en: '[PRE18]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'You should see the text **Creating Application** in your web inspector''s console
    tab. You can also send variables to the console where you can view their contents:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '您应该在网页检查器的控制台标签中看到**创建应用**的文本。您还可以向控制台发送变量，以查看它们的 contents:'
- en: '[PRE19]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: If you place this console log after the line `Ext.Viewport.add(Ext.create('TouchStart.view.Main'));`
    in `app.js`, the console will display the full viewport and all of its nested
    child components. This is useful if, for some reason, you have a component that
    is not displaying properly. Sending an object to the console allows you to see
    the object as JavaScript sees it.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在`app.js`中的这行`Ext.Viewport.add(Ext.create('TouchStart.view.Main'));`之后放置这个控制台日志，控制台将显示完整的视图和所有嵌套的子组件。如果您有组件显示不正常的原因，这很有用。将对象发送到控制台允许您以
    JavaScript 的方式查看对象。
- en: Note
  id: totrans-204
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For more information about the Chrome Developer Tools, go to [https://developers.google.com/chrome-developer-tools/](https://developers.google.com/chrome-developer-tools/).
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 Chrome 开发者工具的更多信息，请访问[https://developers.google.com/chrome-developer-tools/](https://developers.google.com/chrome-developer-tools/)。
- en: If you'd like to learn more about using the Safari web inspector for debugging
    your application, visit Apple's *Debugging your website* page at [http://developer.apple.com/library/safari/#documentation/AppleApplications/Conceptual/Safari_Developer_Guide/DebuggingYourWebsite/DebuggingYourWebsite.html](http://
    http://developer.apple.com/library/safari/#documentation/AppleApplications/Conceptual/Safari_Developer_Guide/DebuggingYourWebsite/DebuggingYourWebsite.html).
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想了解更多关于使用 Safari 网络检查器调试您应用程序的信息，请访问苹果公司的*调试您的网站*页面：[http://developer.apple.com/library/safari/#documentation/AppleApplications/Conceptual/Safari_Developer_Guide/DebuggingYourWebsite/DebuggingYourWebsite.html](http://developer.apple.com/library/safari/#documentation/AppleApplications/Conceptual/Safari_Developer_Guide/DebuggingYourWebsite/DebuggingYourWebsite.html)。
- en: Updating the application for production
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为生产更新应用程序
- en: When an application is ready for production, there are typically a number of
    steps to get your code ready and optimized. This process involves compressing
    the JavaScript to load faster, optimizing images, and getting rid of any parts
    of the code library that are not actually required by your application. This can
    be a pretty tedious process, but Sencha Cmd will actually do this for you with
    a single command.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个应用程序准备好投入生产时，通常需要进行许多步骤来准备和优化您的代码。这个过程包括压缩 JavaScript 以加快加载速度，优化图像，以及删除代码库中实际上您的应用程序不需要的部分。这可能是一个相当繁琐的过程，但
    Sencha Cmd 将实际上用一个命令为您完成这个任务。
- en: 'When you are ready to update your application for production, you can open
    your command line and move into your code''s root directory using the `cd` command:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 当您准备好更新您的应用程序以用于生产时，您可以打开您的命令行，并使用`cd`命令将您的代码根目录移动到：
- en: '[PRE20]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Once you are in the directory, you can type the following command:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您进入该目录，您可以输入以下命令：
- en: '[PRE21]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This command will create a `build` directory with an optimized version of your
    application inside it. You can test this optimized version for any errors. If
    you need to make changes to the application, you can make them to the unoptimized
    code and then run the `build` command again.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将在其中创建一个`build`目录，里面有您应用程序的优化版本。您可以测试这个优化版本是否有任何错误。如果您需要更改应用程序，您可以对未优化的代码进行更改，然后再次运行`build`命令。
- en: Once you are satisfied with the code building, put the application into production.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您对代码构建感到满意，就可以将应用程序投入生产。
- en: Putting the application into production
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将应用程序投入生产
- en: Now that you've written and tested your application and prepared it for production,
    we need to figure out where our code is going to live. Since the method for putting
    an application into production will vary based on your setup, we will be covering
    this task in very general terms.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 既然你已经编写了并测试了你的应用程序并为其生产做好了准备，我们需要弄清楚我们的代码将存放在哪里。由于将应用程序投入生产的方法将根据您的设置而有所不同，我们将非常一般性地介绍这个任务。
- en: 'The first thing to do is to familiarize yourself with three basic pieces of
    the puzzle for putting your application into production:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要熟悉将应用程序投入生产的三个基本部分：
- en: Web hosting
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网页托管
- en: File transfer
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件传输
- en: Folder structure
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件夹结构
- en: While it is fine to develop your application on a local web server, if you want
    anyone else to see it, you will need a publicly accessible web server with a constant
    connection to the Internet. There are a number of web hosting providers, such
    as GoDaddy, HostGator, Blue Host, HostMonster, and RackSpace.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然在本地的Web服务器上开发应用程序是可以的，但如果您想让其他人看到它，您需要一个可以持续连接到互联网的公共可访问的Web服务器。有许多网页托管提供商，例如GoDaddy、HostGator、Blue
    Host、HostMonster和RackSpace。
- en: Since our application is pure HTML/JavaScript/CSS, you don't need any fancy
    add-ons, such as databases or server-side programming languages (PHP or Java),
    for your web hosting account. Any account that can serve up HTML pages is good
    enough. The key to this decision should be customer support. Make sure to check
    the reviews before choosing a provider.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的应用程序是纯HTML/JavaScript/CSS，您不需要任何花哨的插件，例如数据库或服务器端编程语言（PHP或Java），在您的网页托管账户中。任何能够提供HTML页面的账户都足够了。这个决定的关键应该是客户支持。在选择提供商之前，确保检查评论。
- en: The hosting provider will also supply information on setting up your domain
    and uploading your files to the web server. Be sure to keep good track of your
    username and password for future reference.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 托管提供商还将提供有关设置您的域名并将您的文件上传到Web服务器的信息。确保为将来参考保留好您的用户名和密码。
- en: In order to copy your application to your web hosting account, you'll probably
    have to familiarize yourself with an **FTP** (**File Transfer Protocol**) program
    such as **FileZilla**. As with hosting providers, there is a huge selection of
    FTP programs. Most of them follow a few basic conventions.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将您的应用程序复制到您的网页托管账户，你可能需要熟悉一个**FTP**（**文件传输协议**）程序，例如**FileZilla**。与托管提供商一样，FTP程序的选择非常多。它们中的大多数遵循一些基本规范。
- en: 'To begin with, you will need to connect to the web server with the FTP program.
    For this, you will need the following:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 一开始，您需要使用FTP程序连接到Web服务器。为此，您需要以下内容：
- en: A name or IP address for the web server
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web服务器的名称或IP地址
- en: Your web hosting username and password
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的网页托管用户名和密码
- en: A connection port for the web server
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web服务器的连接端口
- en: Your web hosting provider should provide you with this information when you
    sign up.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 您的网页托管提供商应该在您注册时提供这些信息。
- en: '![Putting the application into production](img/0748OS_02_11.jpg)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
  zh: '![将应用程序投入生产](img/0748OS_02_11.jpg)'
- en: Once you are connected to the server, you will see a list of files on your local
    machine as well as files on your remote web server. You need to drag the **TouchStart**
    files on to the remote server to upload them. Your hosting provider will also
    provide you with the name of a specific folder where these files need to go. The
    folder is typically called `httpd`, `htdocs`, `html`, or `public_html`.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您连接到服务器，您将看到您本地机器上的文件列表以及您远程Web服务器上的文件。您需要将**TouchStart**文件拖到远程服务器上以进行上传。您的托管提供商还将为您提供这些文件需要去的特定文件夹的名称。该文件夹通常称为`httpd`、`htdocs`、`html`或`public_html`。
- en: 'This brings us to our last consideration for uploading files: the folder path.'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 这让我们考虑上传文件的最后一件事情：文件夹路径。
- en: The folder path affects how the application locates its files and resources.
    When you upload the application to the remote web server, it can affect how your
    folder is seen within the application. If you have any files referenced from an
    absolute path, such as `http://127.0.0.1/~12ftguru/TouchStart/myfile.js`, then
    the file will not work when you move things over to the web server.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 文件夹路径会影响应用程序定位其文件和资源的方式。当您将应用程序上传到远程Web服务器时，它可能会影响应用程序内部如何查看您的文件夹。如果您有从绝对路径引用的任何文件，例如`http://127.0.0.1/~12ftguru/TouchStart/myfile.js`，那么在您将东西移到Web服务器上时，文件将无法工作。
- en: Even relative URLs can become problematic when you transfer files to the remote
    server. For example, if you have a file which uses the path `/TouchStart/myFile.js`
    and you upload the contents of the `TouchStart` folder instead of uploading the
    folder itself, the file path will be incorrect.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 即使相对路径在将文件传输到远程服务器时也可能出现问题。例如，如果你有一个使用路径`/TouchStart/myFile.js`的文件，而你上传了`TouchStart`文件夹的内容而不是上传整个文件夹，文件路径将会错误。
- en: This is something to keep in mind if you find yourself facing a missing images
    error or other errors.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你发现自己遇到图片缺失错误或其他错误，这是一个需要记住的事情。
- en: Again, your web hosting provider is your best resource for information. Be sure
    to look for the *Getting Started* document and don't be afraid to seek help from
    any user forums that your hosting provider may have.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，你的网页托管服务商是你获取信息最好的资源。一定要寻找*入门指南*文档，并且不要害怕在任何用户论坛寻求帮助，这些论坛你的托管服务商可能会有。
- en: Summary
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we created our first simple application with Sencha Cmd. We
    learnt some of the basics of Sencha Touch components including configuration and
    nesting components within one another. We introduced you to the `TabPanel`, `Panel`,
    and `Container` components. In addition, we explained some basic debugging methodology
    and prepared our application for production.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章，我们使用Sencha Cmd创建了第一个简单应用。我们了解了一些Sencha Touch组件的基本知识，包括配置和组件之间的嵌套。我们向你介绍了`TabPanel`、`Panel`和`Container`组件。此外，我们解释了一些基本的调试方法，并为我们应用的生产准备好了。
- en: In the next chapter, we will create a custom theme for our application by using
    SASS and the Sencha Touch library's styling tools.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将通过使用SASS和Sencha Touch库的样式工具为我们的应用创建一个自定义主题。
