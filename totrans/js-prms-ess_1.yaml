- en: Chapter 1. JavaScript Promises – Why Should I Care?
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。JavaScript承诺 - 我为什么要关心？
- en: 'There was never a time before when JavaScript had been this popular. What was
    once and maybe still is for some, the most misunderstood programing language,
    mainly because of its name, now ranks among the top popular programming languages
    available. Furthermore, nearly every personal computer out there might have at
    least one JavaScript interpreter in use or at least installed. The growing popularity
    of JavaScript is entirely due to its role as the scripting language of the Web.
    When it was first developed, JavaScript was designed to run in Netscape Navigator.
    Its success there led to it becoming the standard equipment in virtually all the
    web browsers, but JavaScript has grown and matured and is now exposed to a large
    portion of development not related to the Web. In this first chapter, we will
    be covering a brief introduction about the following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 曾经从未有过JavaScript如此受欢迎的时候。曾经，也许现在对一些人来说，它还是最受误解的编程语言，主要是因为它的名字，但现在它已经跻身最受欢迎的编程语言之列。此外，几乎每台个人电脑上可能都至少有一个JavaScript解释器在运行或至少已安装。JavaScript日益受欢迎的原因完全在于它作为Web脚本语言的角色。当它最初被开发时，JavaScript是设计在Netscape
    Navigator中运行的。在那里取得成功后，它几乎成为了所有网络浏览器中的标准配置，但JavaScript已经成长和成熟，现在暴露在大量与Web无关的开发中。在第一章中，我们将简要介绍以下内容：
- en: Asynchronous programming in JavaScript
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 异步编程在JavaScript中
- en: Issues that developers face with traditional approaches to handle asynchronous
    operations
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发者使用传统方法处理异步操作时所面临的问题
- en: Introduction to JavaScript Promises
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript承诺简介
- en: Why we should care about promises when comparing it to the common way of doing
    things asynchronously
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么在比较它与常见异步操作方式时，我们应该关心承诺。
- en: Asynchronous programming in JavaScript
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异步编程在JavaScript中的运用
- en: 'When it comes to asynchronous programming in JavaScript, there are two things
    to talk about: the web and programming language. The web environment represented
    by browsers is different from the desktop environment and this reflects in the
    way we program and code for each of them. Browsers, contrary to the desktop environment,
    provide a single thread for everything that needs access to the user interface;
    in HTML terms, the DOM. This single threading model has a negative impact on the
    application code that might need to access and modify the UI elements, because
    it restricts the execution of that code to the same thread. Hence, we will have
    blocking functions and threads that basically block the UI until that thread has
    been executed. That is why, in web development, it is highly important to take
    advantage of any asynchronous capabilities the browser offers.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到JavaScript中的异步编程时，有二件事情需要讨论：Web和编程语言。以浏览器为代表的Web环境与桌面环境不同，这也反映在我们为它们编程和编码的方式上。与桌面环境相反，浏览器为需要访问用户界面的所有事物提供了一个线程；在HTML术语中，就是DOM。这种单线程模型对需要访问和修改UI元素的应用程序代码产生了负面影响，因为它将该代码的执行限制在同一个线程上。因此，我们将会有阻塞函数和线程，基本上会阻塞UI，直到该线程执行完毕。这就是为什么，在Web开发中，充分利用浏览器提供的任何异步能力至关重要。
- en: Let's review some history to get more context. Back in the day, websites comprised
    complete HTML pages in which every user action needed the entire web page to be
    loaded from the server. This caused a lot of problems for developers, especially
    when writing a server-side code that would affect the page. Furthermore, it resulted
    in an unpleasant end user experience. Responding to a user action or changes to
    an HTML form were carried on with an HTTP `POST` request to the same page that
    the form was on; this caused the server to refresh the same page using the information
    it had just received. This entire process and model were inefficient as it resulted
    in having the entire content of the page disappear, and then reappear, and sometimes
    the content would get lost along the way in a slow internet environment. The browser
    then reloaded a web page resending all of the content even though only some of
    the information had changed; this used excessive bandwidth and resulted in additional
    load on the server. Additionally, it reflected negatively on the user experience.
    Later, with much work and effort from different parties in the industry, asynchronous
    web technologies started emerging to help address this limitation. A famous player
    in this area is **Asynchronous JavaScript and XML** (**AJAX**), which is a group
    of technologies used on the client-side to create web applications that communicate
    in an asynchronous manner. The AJAX technology allowed web applications to send
    data to and retrieve data from a server in an asynchronous manner without interfering
    with the UI and behavior of the current page; basically, without the need to reload
    the whole page. The core API to achieve this was the `XMLHttpRequest` API.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一些历史以获得更多背景信息。在过去，网站由完整的HTML页面组成，每次用户行动都需要从服务器加载整个网页。这给开发者带来了很多问题，尤其是当编写会影响页面的服务器端代码时。此外，它还导致了用户体验不佳。响应用户行动或HTML表单的变化是通过向表单所在的同一页面发送HTTP
    `POST`请求来进行的；这导致服务器使用刚刚收到的信息刷新同一页面。整个过程和模型都是低效的，因为它导致页面内容的消失，然后重新出现，而且在慢速互联网环境下，有时内容会在传输过程中丢失。然后浏览器重新加载一个网页，重新发送所有内容，尽管只有部分信息发生了变化；这导致了带宽的浪费，并增加了服务器的负载。此外，它对用户体验产生了负面影响。后来，随着行业内不同方面的努力，异步网络技术开始出现以帮助解决这一局限性。在这一领域中，一个著名的角色是**异步JavaScript和XML**（**AJAX**），这是在客户端用于创建以异步方式进行通信的网络应用程序的一组技术。AJAX技术允许网络应用程序以异步方式发送和检索服务器上的数据，而不会干扰当前页面的UI和行为；基本上，无需重新加载整个页面。实现这一点的核心API是`XMLHttpRequest`
    API。
- en: While the web technologies and browsers advanced, JavaScript grew more prominent
    as a web scripting language allowing developers to access the DOM and dynamically
    display and interact with the content presented on the web page. However, JavaScript
    is also single-threaded by nature, which means that, at any given time, any two
    lines of script cannot run together; instead, JavaScript statements are executed
    line by line. Likewise, in browsers, JavaScript shares that single thread with
    a bunch of other workloads executed by the browser from painting and updating
    styles to handling user actions. One activity will delay the other.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 随着网络技术的发展和浏览器的进步，JavaScript作为一种网络脚本语言变得越来越重要，使开发者能够访问DOM，并动态地显示和与网页上呈现的内容进行交互。然而，JavaScript也是单线程的，这意味着在任何给定时间，任何两条脚本线都不能同时运行；相反，JavaScript语句是逐行执行的。同样，在浏览器中，JavaScript与浏览器执行的其他工作负载（从绘制和更新样式到处理用户行动等）共享那个单线。一项活动将延迟另一项。
- en: When it first started, JavaScript was intended for short, quick-running pieces
    of code. Major application logic and calculations were done on the server side.
    Ever since loading content on the web changed from reloading the whole page to
    the client side, asynchronous loading developers started relying more heavily
    on JavaScript for web development. Now, we can find complete application logic
    being written with JavaScript, and so many libraries have flourished to help developers
    do so.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，JavaScript旨在运行简短、快速的代码片段。主要的应用程序逻辑和计算是在服务器端完成的。自从网页内容的加载从重新加载整个页面改变到客户端以来，异步加载的开发人员开始更频繁地依赖JavaScript进行网络开发。现在，我们可以找到用JavaScript编写的完整应用程序逻辑，并且已经出现了许多库来帮助开发者这样做。
- en: 'In web development, we have the following three main components:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在网络开发中，我们有以下三个主要组件：
- en: HTML and CSS
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTML和CSS
- en: The Document Object Model (DOM)
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文档对象模型（DOM）
- en: JavaScript
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript
- en: 'And I will add a fourth component that plays a pivotal role in AJAX programming:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我将添加第四个在AJAX编程中扮演关键角色的组件：
- en: The XMLHttpRequest API
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: XMLHttpRequest API
- en: Briefly, HTML and CSS are used for the presentation and layout of a web page.
    The DOM is used for the dynamic display and interaction with content. The XHR
    object sends HTTP/HTTPS requests to a web server and loads the server response
    data back into the script, mediating an asynchronous communication. Lastly, JavaScript
    allows developers to bring all these technologies together in order to create
    beautiful, responsive, and dynamic web applications.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 简要地说，HTML和CSS用于网页的呈现和布局。DOM用于动态显示和与内容交互。XHR对象向网络服务器发送HTTP/HTTPS请求，并将服务器的响应数据加载回脚本中，中介一种异步通信。最后，JavaScript允许开发者将所有这些技术结合起来，以创建美观、响应迅速和动态的网页应用程序。
- en: In order to tackle the multithreading limitation, developers relied heavily
    on events and callbacks because that is the way browsers expose asynchronous programming
    to the application logic.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 为了克服多线程限制，开发者严重依赖事件和回调，因为这是浏览器将异步编程暴露给应用程序逻辑的方式。
- en: In event-based asynchronous APIs, an event handler is registered for a given
    object and the action is called when the event is fired. The browser will perform
    the action usually in a different thread, and triggers the event in the main thread
    when appropriate.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在基于事件的异步API中，为给定对象注册一个事件处理程序，当事件被触发时调用该动作。浏览器通常会在不同的线程上执行这个动作，并在适当的时候在主线程上触发事件。
- en: We can achieve this event-based technique using the `object.addEventListener()`
    method. This method will simply register a listener on the target object it is
    called on. The event target object may be an element in an HTML document, the
    document itself, a window, or any other object that supports events (such as XHR).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`object.addEventListener()`方法实现这种基于事件的技术。这个方法 simply 在被调用的目标对象上注册一个监听器。事件目标对象可能是一个HTML文档中的元素，文档本身，一个窗口，或其他支持事件的对象（如XHR）。
- en: The following code shows what a simple event listener looks like using HTML
    and JavaScript.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码展示了使用HTML和JavaScript创建的简单事件监听器的外观。
- en: 'The HTML part is as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是HTML部分：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The JavaScript part is as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是JavaScript部分：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the HTML part, we define a `div` element in the DOM with the `testDiv` ID.
    In the JavaScript part, we retrieve the `div` element in the first line of the
    code and assign it to a variable. Then, we add an event listener on that object
    and pass it to the `click` event followed by an anonymous function (a function
    without a name) as the listener function. This function will be invoked later
    in response to a click event on the element.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在HTML部分，我们在DOM中定义了一个带有`testDiv` ID的`div`元素。在JavaScript部分，我们在代码的第一行检索到这个`div`元素，并将其赋值给一个变量。然后，我们在那个对象上添加一个事件监听器，并将其传递给`click`事件，后跟一个匿名函数（一个没有名字的函数）作为监听函数。这个函数将在元素上发生点击事件后调用。
- en: Tip
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: If you add this JavaScript code before the HTML markup that includes the `div`
    element, it will raise an error. Since the element is not created yet when the
    code executes against it, the code will not find the target object to call `addEventListener`
    on.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在包含`div`元素的HTML标记之前添加了这段JavaScript代码，它将会抛出一个错误。因为当代码针对它执行时，该元素还未被创建，所以代码将无法找到目标对象来调用`addEventListener`。
- en: As we can see in the previous code sample, the second parameter to the `addEventListener`
    method is a function in itself that contains some inline code. We are able to
    do so in JavaScript because functions are first-class objects. This function is
    a callback. Callback functions are *super* important and widely spread in JavaScript
    programming because they give us the ability to do things asynchronously.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在之前的代码示例中看到的那样，`addEventListener`方法的第二个参数本身就是一个包含一些内联代码的函数。我们之所以能在JavaScript中这样做，是因为函数是一等对象。这个函数是一个回调。回调函数在JavaScript编程中非常重要且广泛应用，因为它们让我们能够异步地做事。
- en: Passing a callback function as a parameter to another function is only passing
    the function definition. Hence, the function is not executed immediately in the
    parameter; it is *called back* (hence the name) at some specified point inside
    the container function's body. This is very useful for scripts that take some
    time to complete actions such as making an AJAX request to the server or performing
    some IO activity without holding up the browser along the way.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 将回调函数作为参数传递给另一个函数，这只是传递了函数定义。因此，在参数中函数并不会立即执行；它会在容器函数体内某个指定点*回调*（因此得名）。这对于执行一些需要时间来完成的操作的脚本非常有用，例如向服务器发送AJAX请求或执行一些IO活动，而不会在这个过程中阻塞浏览器。
- en: Tip
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If you're new to JavaScript, seeing functions passed as parameters might be
    somewhat unfamiliar, but don't worry; it becomes easy when you think of them as
    objects.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对JavaScript不熟悉，看到函数作为参数可能会有些不习惯，但不要担心；当你将它们视为对象时，它会变得容易。
- en: 'Some browser APIs such as HTML5 Geolocation are called back based on design.
    I will use Geolocation''s `getCurrentMethod` to use a callback function in an
    example. The code will look like the following:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 一些浏览器API，如HTML5 Geolocation，是基于设计回调的。我将使用Geolocation的`getCurrentMethod`示例中使用回调函数。代码如下所示：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the previous example, we simply called the `getCurrentPosition` method and
    pass it an anonymous function, which in turn invokes an alert method that will
    get called back with the result we requested. This allows the browser to execute
    this code synchronously or asynchronously; thus, the code will not be blocking
    the browser while the position is being retrieved.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个示例中，我们简单地调用了`getCurrentPosition`方法，并传递了一个匿名函数，该函数反过来调用了alert方法，该方法将用我们请求的结果进行回调。这允许浏览器同步或异步执行此代码；因此，在获取位置时，代码不会阻塞浏览器。
- en: In this case, we used a built-in browser API, but we can also make our applications
    asynchronous-ready by exposing their basic APIs in an asynchronous manner with
    callback functions at least the ones involved in an I/O operation or in heavy
    computing, which might take a great deal of time.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用了内置浏览器API，但我们也可以通过以异步方式暴露基本API，并至少使用回调函数来使应用程序具备异步准备，涉及到I/O操作或计算量大的操作，这些操作可能需要花费大量时间。
- en: 'For example, in a callback scenario, the simplest code to retrieve some data
    would look like the following:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在回调场景中，检索某些数据的最简单代码如下所示：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the previous JavaScript code, we just defined a `getMyData` function that
    takes a callback function as a parameter, which in turn executes an alert that
    displays the data we are supposed to retrieve. This code actually obliges with
    the application UI code to be asynchronous-ready; thus, the UI will not be blocked
    while the code is retrieving the data.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的JavaScript代码中，我们定义了一个`getMyData`函数，该函数接受一个回调函数作为参数，进而执行一个显示我们应 retrieve
    的数据的弹窗。实际上，这段代码使得与应用程序UI代码保持异步准备；因此，在代码检索数据时，UI界面不会被阻塞。
- en: 'Let''s compare it to a non-callback scenario; the code will look like the following:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将其与非回调场景进行比较；代码如下所示：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the previous example, the JavaScript code will run line by line, and the
    next line of code will run even though the first one is not finished. Such an
    API design will make the code UI-blocking because it will freeze the UI until
    the data is retrieved. Furthermore, if the the execution of the `getMyData()`
    function happens to take some time, for example, fetching data from the internet,
    the overall experience will not be pleasant to the user because the UI will have
    to wait for this function to finish executing.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个示例中，JavaScript代码将逐行运行，尽管第一行还没有完成，下一行代码也将运行。这样的API设计会使代码UI阻塞，因为它将冻结UI，直到数据被检索。此外，如果`getMyData()`函数的执行恰好需要一些时间，例如从互联网获取数据，整个用户体验将不会很好，因为UI必须等待这个函数执行完成。
- en: 'Moreover, in the previous examples of callback functions, we passed an anonymous
    function as a parameter of the containing function. This is the most common pattern
    of using callback functions. Another way to use callback functions is to declare
    a named function and pass the name of that function as a parameter. In the following
    example, we will use a named function instead. We will create a generic function
    that takes a string parameter and displays it in an alert. We will call it `popup`.
    Then, we will create another function and call it `getContent`; this takes two
    parameters: a string object and a callback function. Lastly, we will call the
    `getContent` function, and pass it a string value in the first parameter and the
    callback function `popup` in the second. Run the script and the result will be
    an alert that contains the value in the first string parameter. The following
    is a code sample for this example:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在前面 callback 函数的例子中，我们向包含函数传递了一个匿名函数作为参数。这是使用回调函数的最常见模式。使用回调函数的另一种方式是声明一个有名字的函数，然后将这个函数的名字作为参数传递。在下面的例子中，我们将使用一个有名字的函数。我们将创建一个通用函数，它接受一个字符串参数并在一个
    alert 中显示它。我们将其称为 `popup`。然后，我们将创建另一个函数并称之为 `getContent`；这个函数接受两个参数：一个字符串对象和一个回调函数。最后，我们将调用
    `getContent` 函数，并在第一个参数中传递一个字符串值，在第二个参数中传递回调函数 `popup`。运行脚本，结果将是一个包含第一个字符串参数值的
    alert。以下是为这个例子准备的代码样本：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As we can see in the previous example, we were able to pass a parameter to the
    callback function since, at the end of the day, it is just a normal function when
    it is executed. We can pass to the callback function any of the containing function's
    variables as parameters or even global variables from elsewhere in the code.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在 previous example 中所见，由于 callback 函数最终只是一般的函数，所以我们能够向其传递一个参数。我们可以将包含函数中的任何变量作为参数传递给
    callback 函数，甚至可以是代码其他部分的全局变量。
- en: To summarize, JavaScript callback functions are powerful and have contributed
    greatly to the web development environment, thus allowing developers to have asynchronous
    JavaScript programming.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，JavaScript 回调函数非常强大，极大地丰富了网页开发环境，从而使得开发者能够进行异步的 JavaScript 编程。
- en: Why should I care about promises?
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我为什么要关心承诺呢？
- en: What do promises have to do with all of this? Well, let's start by defining
    promises.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 承诺与这一切有什么关系呢？好吧，让我们先定义一下承诺。
- en: '|   | *A promise represents the eventual result of an asynchronous operation.*
    |   |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '|   | *承诺代表异步操作的最终结果。* |   |'
- en: '|   | --*Promises/A+ specification, [http://promisesaplus.com/](http://promisesaplus.com/)*
    |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '|   | --*Promises/A+ 规格，[http://promisesaplus.com/](http://promisesaplus.com/)*
    |'
- en: So, a promise object represents a value that may not be available yet, but will
    be resolved at some point in the future.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，一个 Promise 对象代表了一个可能尚未可用的值，但会在未来的某个时刻被解决。
- en: 'Promises have states and at any point in time, can be in one of the following:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 承诺有状态，在任何时刻，它可以处于以下之一的状态：
- en: '**Pending**: The promise''s value is not yet determined and its state may transition
    to either fulfilled or rejected.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**挂起**：承诺的值尚未确定，其状态可能转变为已实现或已拒绝。'
- en: '**Fulfilled**: The promise was fulfilled with success and now has a value that
    must not change. Additionally, it must not transition to any other state from
    the fulfilled state.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实现**：承诺已成功实现，现在有一个必须不能改变的值。此外，它必须不能从已实现的状态转移到任何其他状态。'
- en: '**Rejected**: The promise is returned from a failed operation and must have
    a reason for failure. This reason must not change and the promise must not transition
    to any other state from this state.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**拒绝**：承诺从一个失败的操作中返回，并且必须有一个失败的原因。这个原因不能改变，且承诺从这个状态不能转移到其他任何状态。'
- en: A promise may only move from the pending state to the fulfilled state or from
    the pending state to the rejected state. However, once a promise is either fulfilled
    or rejected, it must not transition to any other state and its value cannot change
    because it is immutable.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 承诺只能从挂起状态转移到实现状态，或者从挂起状态转移到拒绝状态。然而，一旦一个承诺是实现或拒绝状态，它必须不再转移到任何其他状态，且其值不能改变，因为它是不可变的。
- en: Tip
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The immutable characteristic of promises is *super* important. It helps evade
    undesired side effects from listeners, which can cause unexpected changes in behavior,
    and in turn allows promises to be passed to other functions without affecting
    the caller function.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 承诺的不变特性是*非常重要的*。它帮助避免了监听器产生的意外副作用，这些副作用可能会导致行为上的意外变化，从而使得承诺在不影响调用函数的情况下，可以被传递给其他函数。
- en: 'From an API perspective, a promise is defined as an object that has a function
    as the value for the property `then`. The promise object has a primary `then`
    method that returns a new promise object. Its syntax will look like the following:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 从API的角度来看，承诺被定义为一个具有`then`属性值为函数的对象。承诺对象有一个主要的`then`方法，它返回一个新的承诺对象。它的语法将如下所示：
- en: '[PRE6]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The following two arguments are basically callback functions that will be called
    for completion of a promise:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 以下两个参数基本上是在承诺完成时调用的回调函数：
- en: '`onFulfilled`: This argument is called when a promise is fulfilled'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onFulfilled`：当一个承诺被满足时调用此参数'
- en: '`onRejected`: This argument is called when a promise has failed'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onRejected`：当一个承诺失败时调用此参数'
- en: Bear in mind that both the arguments are optional. Moreover, non-function values
    for the arguments will be ignored, so it might be a good practice to always check
    whether the arguments passed are functions before executing them.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，这两个参数都是可选的。此外，非函数值的参数将被忽略，因此始终在执行它们之前检查传递的参数是否为函数可能是一个好习惯。
- en: Note
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'It is worth noting that, when you research promises, you might come across
    two definitions/specifications: one based on Promises/A+ and an older one based
    on Promises/A by CommonJS. While Promises/A+ is based on the concepts and then
    API presented in the CommonJS Promises/A proposal, A+ implementation differs from
    Promises/A in several ways, as we will see in [Chapter 2](part0018_split_000.html#H5A42-fe4c0b71cd2847c897e147ea131725a8
    "Chapter 2. The Promise API and Its Compatibility"), *The Promise API and Its
    Compatibility*.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，当你研究承诺时，你可能会遇到两个定义/规格：一个基于Promises/A+，另一个是基于CommonJS的Promises/A的较旧的定义。虽然Promises/A+是基于CommonJS
    Promises/A提案中呈现的概念和API，但A+实现与Promises/A在几个方面有所不同，正如我们在[第二章](part0018_split_000.html#H5A42-fe4c0b71cd2847c897e147ea131725a8
    "第二章．承诺API及其兼容性")《承诺API及其兼容性》中所见的那样。
- en: 'The new promise returned by the `then` method is resolved when the given `onFulfilled`
    or `onRejected` callback is completed. The implementation reflects a very simple
    concept: when a promise is fulfilled, it has a value, and when it is rejected,
    it has a reason.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`then`方法返回的新承诺在给定的`onFulfilled`或`onRejected`回调完成时被解决。实现反映了一个非常简单的概念：当一个承诺被满足时，它有一个值，当它被拒绝时，它有一个原因。'
- en: 'The following is a simple example of how to use a promise:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是如何使用承诺的一个简单示例：
- en: '[PRE7]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The fact that the value returned from the callback handler is the fulfillment
    value for the returned promise allows promise operations to be chained together.
    Hence, we will have something like the following:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 从回调处理程序返回的值是返回承诺的实现值，这使得承诺操作可以连锁进行。因此，我们将会像以下这样：
- en: '[PRE8]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Well, you guessed it right! What the previous code sample does is chain the
    promise returned from the first `then()` call to the second `then()` call. Hence,
    the `getJSON` method will return a promise that contains the value of the JSON
    returned. Thus, we can call a `then` method on it, following which we will invoke
    another `then` call on the promise returned. This promise includes the value of
    `JSON.parse`. Eventually, we will take that value and display it in an alert.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，你说对了！前一个代码示例所做的就是在第一个`then()`调用返回的承诺上链第二个`then()`调用。因此，`getJSON`方法将返回一个包含JSON返回值的承诺。因此，我们可以在其中调用一个`then`方法，然后调用另一个返回的承诺上的`then`调用。这个承诺包括`JSON.parse`的值。最终，我们将取该值并在一个警告框中显示它。
- en: Can't I just use a callback?
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我不能 just 使用回调吗？
- en: Callbacks are simple! We pass a function, it gets invoked at some point in the
    future, and we get to do things asynchronously. Additionally, callbacks are lightweight
    since we need to add extra libraries. Using functions as higher-order objects
    is already built into the JavaScript programming language; hence, we do not require
    additional code to use it.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 回调很简单！我们传递一个函数，它在未来的某个时刻被调用，我们可以异步地做事情。此外，回调是轻量级的，因为我们需要添加额外的库。将函数作为高阶对象的使用已经内置在JavaScript编程语言中；因此，我们不需要额外的代码来使用它。
- en: 'However, asynchronous programming in JavaScript can quickly become complicated
    if not dealt with care, especially callbacks. Callback functions tend to become
    difficult to maintain and debug when nested within long lines of code. Additionally,
    the use of anonymous inline functions in a callback can make reading the call
    stack very tedious. Also, when it comes to debugging, exceptions that are thrown
    back from within a deeply nested set of callbacks might not propagate properly
    up to the function that initiated the call within the chain, which makes it difficult
    to determine exactly where the error is located. Moreover, it is hard to structure
    a code that is based around callbacks as they roll out a messy code like a snowball.
    We will end up having something like the following code sample but on a much larger
    scale:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果不用心处理，JavaScript中的异步编程可能会迅速变得复杂，尤其是回调。回调函数在嵌套在冗长的代码行中时，往往难以维护和调试。此外，在回调中使用匿名内联函数会使阅读调用堆栈变得非常繁琐。此外，当涉及到调试时，从嵌套的回调集中抛出的异常可能不会正确地传播到链中发起调用的函数，这使得确定错误的确切位置变得困难。而且，基于回调的结构化代码很难展开，就像滚雪球一样展开混乱的代码。我们最终会得到如下代码样本，但规模要大得多：
- en: '[PRE9]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The sample code in the previous example is an excerpt of a deeply nested code
    that is sometimes referred to as the *pyramid of doom*. Such a code, when it grows,
    will make it a daunting task to read through, structure, maintain, and debug.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 前面示例中的样本代码是被称为“末日金字塔”的深层嵌套代码的摘录。这样的代码在增长时，会使阅读、结构化、维护和调试变得令人望而却步。
- en: Promises, on the other hand, provide an abstraction to manage interactions with
    asynchronous APIs and present a more managed approach towards asynchronous programming
    in JavaScript when compared to the use of callbacks and event handlers. We can
    think of promises as more of a pattern for asynchronous programming.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，承诺提供了一个抽象概念，用于管理与异步API的交互，并在与回调和事件处理器的使用相比时，为JavaScript中的异步编程提供了一个更管理化的方法。我们可以将承诺视为异步编程的更多模式。
- en: Simply put, the promises pattern will allow the asynchronous programming to
    move from the continuation-passing style that is widespread to one where the functions
    we call return a value, called a promise, which will represent the eventual results
    of that particular operation.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，承诺模式将使异步编程从广泛采用的延续传递风格转变为一种函数返回一个值（称为承诺），该值代表该特定操作的最终结果。
- en: 'It allows you to go from:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 它允许你从：
- en: '[PRE10]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'To:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 致：
- en: '[PRE11]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If we list the properties that make promises easier to work with, they will
    be as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们列出使承诺更易于处理的属性，它们将是以下内容：
- en: It is easier to read as with the usage of cleaner method signatures
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用更简洁的方法签名时，它更容易阅读
- en: It allows us to attach more than one callback to a single promise
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它允许我们将多个回调附加到同一个承诺
- en: It allows for values and errors to be passed along and bubble up to the caller
    function
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它允许值和错误被传递并冒泡到调用者函数
- en: It allows for chaining of promises
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它允许承诺的链式操作
- en: What we can observe is that promises bring functional composition to synchronous
    capabilities by returning values, and error bubbling by throwing exceptions to
    the asynchronous functions. These are capabilities that we take for granted in
    the synchronous world.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以观察到，承诺通过返回值将功能组合带到同步能力，并通过抛出异常将错误冒泡到异步函数。这些是在同步世界中视为理所当然的能力。
- en: The following sample (dummy) code shows the difference between using callbacks
    to compose asynchronous functions communicating with each other and promises to
    do the same.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例（伪）代码展示了使用回调来组合相互通信的异步函数和用承诺来做同样事情的区别。
- en: 'The following is an example with callbacks:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用回调的示例：
- en: '[PRE12]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The following is a code example that converts the previous callback functions
    to promise-returning functions that can be chained to each other:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个将之前的回调函数转换为可以相互链式的承诺返回函数的代码示例：
- en: '[PRE13]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: As we have seen, the flat chains that promises provide allow us to have code
    that is easier to read and eventually easier to maintain when compared to the
    traditional callback approach.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，承诺提供的平坦链使我们能够拥有比传统的回调方法更容易阅读和维护的代码。
- en: Summary
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Callbacks in JavaScript allow us to have a user interface that is more responsive
    by responding asynchronously to events (that is, user input), without blocking
    the rest of the application. Promises are a pattern that allows for a standardized
    approach in asynchronous programming, which enables developers to write asynchronous
    code that is more readable and maintainable.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，回调函数使我们能够拥有一个更响应灵敏的用户界面，它能够异步响应事件（即用户输入），而不会阻塞应用程序的其他部分。Promise是一种模式，它允许在异步编程中采用一种标准化的方法，这使得开发者能够编写更易读、更易维护的异步代码。
- en: In the next chapter, we will take a look at the browsers that support promises
    and their compatibility with jQuery. You will also learn about libraries that
    support promise-like functionalities.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将查看支持Promise的浏览器及其与jQuery的兼容性。你还将了解到支持类似Promise功能的库。
