- en: Appendix A. Using JSPM
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录 A：使用 JSPM
- en: '**JSPM** ([http://jspm.io/](http://jspm.io/)) is a package manager for the
    **SystemJS** universal module loader ([https://github.com/systemjs/systemjs](https://github.com/systemjs/systemjs)),
    which is probably the most forward-looking module loader out there as it is based
    on future web standards.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**JSPM** ([http://jspm.io/](http://jspm.io/)) 是基于未来网络标准的、[https://github.com/systemjs/systemjs](https://github.com/systemjs/systemjs)
    通用模块加载器的包管理器，这可能是目前最前瞻性的模块加载器。'
- en: At the moment of writing, the simplest way to create a JSPM-based Aurelia project
    is to use the proper skeleton. The Aurelia team, however, plans to add creation
    of JSPM-based projects to the CLI in the future.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文的时刻，创建基于JSPM的Aurelia项目的最简单方法是使用合适的骨架。然而，Aurelia团队计划在未来的CLI中添加创建基于JSPM的项目功能。
- en: In this appendix, we will see the differences between a CLI-based project that
    uses `requirejs` at the moment of writing, and a JSPM-based project started using
    the skeleton.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个附录中，我们将看到在撰写本文时使用`requirejs`的CLI基础项目和基于JSPM的项目骨架之间的区别。
- en: Note
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The purpose of this appendix is not to cover JSPM and SystemJS in detail. As
    such, I strongly suggest that you get more familiar with them if you intend to
    use them in your project.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 附录的目的是不详细介绍JSPM和SystemJS。因此，我强烈建议如果你打算在你的项目中使用它们，你要更多地熟悉它们。
- en: Tip
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Our contact management application, rebuilt using the JSPM-based skeleton, can
    found at `appendix-a\using-jspm` in the book's assets and can be used as a reference
    throughout this appendix.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 使用基于JSPM的骨架重建的我们的联系人管理应用程序，可以在书籍资源中的`appendix-a\using-jspm`找到，并可在整个附录中作为参考。
- en: Getting started
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门
- en: The first step for creating a JSPM-based application is to download the latest
    version of the skeletons from [https://github.com/aurelia/skeleton-navigation/releases/latest](https://github.com/aurelia/skeleton-navigation/releases/latest)
    and to unzip the file. In the root folder, you'll find a distinct directory for
    each available skeleton. The one we will look at here is named `skeleton-esnext`.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 创建基于JSPM的应用程序的第一步是从[https://github.com/aurelia/skeleton-navigation/releases/latest](https://github.com/aurelia/skeleton-navigation/releases/latest)下载最新的骨架版本，并解压文件。在根目录中，你会发现每个可用的骨架都有一个独特的目录。我们将要查看的是名为`skeleton-esnext`的一个。
- en: 'The JSPM skeleton uses Gulp as its build system. As such, let''s first install
    it globally if you don''t already have it installed, by opening a console and
    running the following command:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: JSPM骨架使用Gulp作为其构建系统。因此，如果你还没有安装它，首先打开一个控制台并运行以下命令来全局安装它：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Additionally, we need to install JSPM itself:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，我们还需要安装JSPM本身：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Once the tools we need are installed, let''s restore the dependencies of the
    project''s build system, by opening a console in the project directory and running
    the following command:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们需要的工具安装完毕，让我们通过在项目目录中打开一个控制台并运行以下命令来恢复项目的构建系统的依赖项：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This command will restore all the dependencies that are used to run and build
    our application, basically everything in the `devDependencies` section of the
    `package.json` file.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将恢复运行和构建我们应用程序所需的所有依赖项，基本上就是`package.json`文件中的`devDependencies`部分的所有内容。
- en: 'Next, we need to restore the libraries used by our application itself by running
    the following command:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要通过运行以下命令来恢复我们应用程序本身使用的库：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This command will use JSPM to restore all `dependencies` in the `jspm` section
    of the `package.json` file.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将使用JSPM恢复`package.json`文件中`jspm`部分的所有的`dependencies`。
- en: At this point, everything is ready to roll.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，一切准备就绪。
- en: Running tasks
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行任务
- en: The JSPM skeleton comes with a pretty complete set of Gulp tasks. These tasks
    can be found in the `build/tasks` directory.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: JSPM骨架附带一套相当完整的Gulp任务。这些任务可以在`build/tasks`目录中找到。
- en: 'The first thing you''ll probably want to do is to run the sample application
    from the skeleton. This can be done by opening a console in the project directory
    and running the following command:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你最可能想做的第一件事是运行来自骨架的示例应用程序。这可以通过在项目目录中打开一个控制台并运行以下命令来完成：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This command launches a development web server with a watcher process which
    will refresh the browser every time a source file changes.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将启动一个带监视器的开发Web服务器，每当源文件更改时都会刷新浏览器。
- en: 'If you want to run the application without watching the files and automatically
    refreshing the browser, you can do it by running the `serve` task:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在不用监听文件和自动刷新浏览器的情况下运行应用程序，可以通过运行`serve`任务来实现：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Running unit tests
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行单元测试
- en: 'By default, the JSPM skeleton''s unit tests can be found in the `test/unit`
    directory. It also typically contains three different Gulp tasks related to unit
    tests:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，基于JSPM的骨架的单元测试可以在`test/unit`目录中找到。它通常还包含三个与单元测试相关的不同Gulp任务：
- en: '`test`: Runs the unit tests once'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`test`：运行单元测试一次'
- en: '`tdd`: Runs the unit tests once, then watches the files and reruns the tests
    when the code changes'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tdd`：运行单元测试一次，然后监视文件并当代码变化时重新运行测试'
- en: '`cover`: Runs the unit tests once with code coverage enabled using Istanbul
    ([https://github.com/gotwarlost/istanbul](https://github.com/gotwarlost/istanbul))'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cover`：使用Istanbul（[https://github.com/gotwarlost/istanbul](https://github.com/gotwarlost/istanbul)）启用代码覆盖率运行单元测试一次。'
- en: 'For example, if you want to do some test-driven development and have your tests
    run continuously while you code, you can run the following command:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你想进行测试驱动开发并且让测试在编码过程中持续运行，你可以运行以下命令：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Since the skeleton relies on Karma to run the tests, you need to install the
    Karma CLI on your environment before running any of the tasks above:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 由于骨架依赖于Karma来运行测试，所以在运行上述任何任务之前，你需要在你的环境中安装Karma CLI：
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Running end-to-end tests
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行端到端测试
- en: The JSPM skeleton also contains an `e2e` task, which will launch the end-to-end
    tests found in the `test/e2e/src` directory.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 基于JSPM的骨架还包含一个`e2e`任务，它将启动在`test/e2e/src`目录中找到的端到端测试。
- en: 'However, since the end-to-end tests rely on Protractor, you first need to update
    the Selenium drivers by running the proper task:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，由于端到端测试依赖于Protractor，你首先需要通过运行正确的任务来更新Selenium驱动程序：
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Then, since the E2E tests need to interact with the application itself, you
    need to launch the application:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，由于端到端测试需要与应用程序本身交互，你需要启动应用程序：
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Finally, you can open a second console and launch the E2E tests:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你可以打开第二个控制台并启动端到端测试：
- en: '[PRE10]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Adding libraries
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加库
- en: 'Adding a library using JSPM is only a matter of running the proper command:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 使用JSPM添加库只需运行正确的命令：
- en: '[PRE11]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This command will install the `aurelia-validation` library to the project. Since
    JSPM has been designed to work with SystemJS, it will also add the proper entries
    to the SystemJS mapping configuration, which is found in the `config.js` file
    and is used by SystemJS to map module names to URLs or local paths.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将为项目安装`aurelia-validation`库。由于JSPM被设计为与SystemJS一起工作，它还将添加适当的条目到SystemJS映射配置中，该配置在`config.js`文件中，并由SystemJS用来将模块名称映射到URL或本地路径。
- en: Once this command completes, the SystemJS module loader will be able to locate
    `aurelia-validation` and its dependencies, if any, so you can start using it right
    away in your application.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦这个命令完成，SystemJS模块加载器将能够定位到`aurelia-validation`及其任何依赖项，所以你可以立即在你的应用程序中使用它。
- en: 'Using a library in a JSPM-based application is similar to a CLI-based project.
    If you need to use some of the library''s JS exports, simply import them in a
    JS file:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在基于JSPM的应用程序中使用库类似于基于CLI的项目。如果你需要使用库的一些JS导出，只需在JS文件中导入它们：
- en: '[PRE12]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'If you want to import other resources, like CSS files, simply `require` it
    in the proper template:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要导入其他资源，比如CSS文件，只需在适当的模板中`require`它：
- en: '[PRE13]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Bundling
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 打包
- en: 'Contrary to the CLI or the Webpack-based skeleton, the JSPM-based skeleton
    doesn''t bundle the application automatically when running in a development environment.
    It however contains a Gulp task dedicated to bundling:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 与CLI或基于Webpack的骨架相反，基于JSPM的骨架在开发环境中运行时不会自动打包应用程序。但它包含了一个专门的Gulp任务用于打包：
- en: '[PRE14]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This task will create some bundles according to the bundling configuration.
    It will also update the SystemJS mapping in the `config.js` file, so the loader
    knows to load each module from the proper bundle.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 此任务将根据打包配置创建一些捆绑包。它还将更新`config.js`文件中的SystemJS映射，所以加载器知道从每个正确的捆绑包中加载每个模块。
- en: 'This means that if you do manual deployment from your development environment
    instead of using an automated build system, you''ll need to unbundle your application
    after deployment:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着，如果你手动从开发环境部署应用程序，而不是使用自动构建系统，那么在部署后你需要解包你的应用程序：
- en: '[PRE15]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This command will reset the SystemJS mapping in the `config.js` file to its
    original, unbundled state. It is however automatically called when running the
    `watch` task, so you shouldn't have to manually run it very often.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将重置`config.js`文件中的SystemJS映射到其原始的未捆绑状态。然而，当运行`watch`任务时，它会自动调用，所以你不需要手动经常运行它。
- en: Configuring bundles
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置捆绑包
- en: 'The bundling configuration can be found in the `build/bundles.js` file. It
    looks like this:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: bundling配置可以在`build/bundles.js`文件中找到。它看起来像这样：
- en: '`build/bundles.js`'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`build/bundles.js`'
- en: '[PRE16]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'By default, this configuration describes two bundles:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，此配置描述了两个包：
- en: '`app-build`: Contains all JS modules, templates, and CSS files from the `src`
    directory'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app-build`：包含从`src`目录中所有的JS模块、模板和CSS文件。'
- en: '`aurelia`: Contains the Aurelia libraries, Bootstrap, the fetch polyfill, and
    jQuery'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`aurelia`：包含Aurelia库、Bootstrap、fetch polyfill和jQuery。'
- en: The brackets around the `app-build` bundle's JS glob pattern `[**/*.js]`, tell
    the bundler to ignore dependencies. Without those brackets, the bundler would
    recursively walk up every `import` statement of every JS file, and would include
    all dependencies in the bundle. Since the default bundling configuration packages
    the application's resources in a first bundle and all external dependencies in
    a second, we don't want to include any dependency in the `app-build` bundle, hence
    the brackets.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`app-build`包的JS glob模式`[**/*.js]`周围的括号，告诉打包器忽略依赖关系。如果没有这些括号，打包器将递归地遍历每个JS文件的每个`import`语句，并将所有依赖关系包含在包中。由于默认的打包配置将应用程序的资源放在第一个包中，所有外部依赖放在第二个包中，所以我们不想在`app-build`包中包含任何依赖关系，因此使用了括号。'
- en: When adding an external library to your application, you'll need to add it to
    a bundle's `includes`, typically it would be in the `aurelia` bundle, which I
    normally rename to `vendor-bundle`. If you don't, SystemJS's mapping will refer
    to the unbundled library, and will try to load it from the `jspm_packages` directory,
    which is not what we want in a production scenario.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 当向您的应用程序添加外部库时，您需要将其添加到包的`includes`中，通常它会在`aurelia`包中，我通常将其重命名为`vendor-bundle`。如果您不这样做，SystemJS的映射将引用未打包的库，并尝试从`jspm_packages`目录中加载它，这在生产环境中不是我们想要的结果。
- en: In addition to its content, the configuration of a bundle has `options`. The
    most useful of those options is probably `rev`, which, when set to `true`, enables
    bundle versioning. As such, the name of each bundle will be appended with a content-based
    hash, and the SystemJS mapping will be updated with those versioned bundle names.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 除了其内容外，包的配置还有`options`。这些选项中最有用的大概是`rev`，当设置为`true`时，启用包版本控制。因此，每个包的名称将附上一个基于内容的哈希，SystemJS映射也将用这些版本化的包名称更新。
- en: Summary
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: For most of Aurelia's development, JSPM has been the *de facto* package manager
    and SystemJS the preferred module loader; that is, until the CLI was released.
    JSPM and SystemJS are however, still pretty central in Aurelia's ecosystem, and
    most projects that were started before the CLI arrived run on this technology.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在Aurelia的大部分开发过程中，JSPM一直是*事实上的*包管理器，SystemJS是首选的模块加载器；也就是说，直到CLI发布为止。然而，JSPM和SystemJS在Aurelia生态系统中仍然非常重要，大多数在CLI发布之前启动的项目都运行在这项技术上。
