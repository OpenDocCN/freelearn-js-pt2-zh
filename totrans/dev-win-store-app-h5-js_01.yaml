- en: Chapter 1. HTML5 Structure
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章. HTML5结构
- en: HTML5 introduced new elements and attributes for a neater structure, smarter
    forms, and richer media; this make the life of a developer much easier. HTML5
    features are classified into several groups based on their function, and the new
    structural elements fall under the group semantics, which include structural elements,
    media elements, attributes, form types, link relation types, semantics for internationalization,
    and microdata for additional semantics. There is a big list of additions and enhancements
    in HTML5, all with the aim of better presenting the content on the web. You will
    use many of these when developing apps for Windows 8; the difference and, moreover,
    the advantage of using it for Windows 8 development is that you do not have to
    worry about the browser's compatibility, at least at the level of Windows Store
    apps, since Windows 8 is an HTML5 platform that uses the most recent web standards.
    Everything that you use from HTML5 and CSS3 is provided for you in your code and
    is guaranteed to work in the application. And the latest version of Visual Studio
    (VS 2012) includes a new HTML and CSS editor that offers full support for HTML5
    and CSS3 elements and snippets.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: HTML5引入了新的元素和属性，以更整洁的结构、更智能的表单和更丰富的媒体，这使得开发者的生活变得更加容易。HTML5功能根据其功能分为几个组，新的结构元素属于语义组，包括结构元素、媒体元素、属性、表单类型、链接关系类型、国际化语义和附加语义的微数据。HTML5有很多增加和增强的内容，所有这些都是为了更好地在网络上呈现内容。当你开发Windows
    8应用时，你会使用其中许多功能；使用Windows 8开发的区别在于，至少在Windows Store应用层面，你不必担心浏览器的兼容性，因为Windows
    8是一个使用最新网络标准的HTML5平台。你所使用的HTML5和CSS3的一切都为你代码中提供，并保证在应用程序中工作。最新版本的Visual Studio（VS
    2012）包括一个新HTML和CSS编辑器，提供对HTML5和CSS3元素和片段的全面支持。
- en: 'In this chapter we will be covering the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Semantic elements
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语义元素
- en: Media elements
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 媒体元素
- en: Form elements
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表单元素
- en: Custom data attributes
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义数据属性
- en: Understanding semantic elements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解语义元素
- en: 'HTML5 markup is more semantic than its predecessors due to the new semantic
    elements for describing the structure of the page content. The list of semantic
    elements includes the following:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: HTML5标记语义比其前辈更强，这要归功于描述页面内容结构的新语义元素。语义元素的列表包括以下内容：
- en: The `<header>` tag defines a header for the document or section. It wraps the
    heading or a group of headings in a page or a section, and it can also contain
    information such as logos, banners, and main navigation links. You can have multiple
    `<header>` tags in a page.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<header>`标签定义了文档或节的头部。它在页面或节中包裹标题或一组标题，并且它还可以包含诸如徽标、横幅和主要导航链接等信息。在页面中你可以有多个`<header>`标签。'
- en: The `<nav>` tag represents the major navigation links. Typically it is bound
    to the header.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<nav>`标签代表主要的导航链接。通常它绑定在头部。'
- en: The `<section>` tag wraps related content that can be grouped thematically.
    A `<section>` tag can include a `<header>` and `<footer>` tag.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<section>`标签包裹可以按主题组合的相关内容。一个`<section>`标签可以包括一个`<header>`和`<footer>`标签。'
- en: The `<footer>` tag represents content about a page or a section, for example,
    related links, privacy terms, and copyright information. You can have more than
    one `<footer>` in a page, and it is same as the `<header>` tag.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<footer>`标签代表关于页面或节的内容，例如，相关链接、隐私条款和版权信息。在页面中你可以有多个`<footer>`，它与`<header>`标签相同。'
- en: The `<article>` tag represents self-contained content that can be used independent
    of the document as a whole, for example, a blog entry. `<article>` and `<section>`
    are much alike because both are standalone tags and hold related content; however,
    if it's content can be syndicated (via an atom or an RSS feed), then the `<article>`
    element is more appropriate.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<article>`标签代表可以独立于整个文档使用的独立内容，例如，一篇博客文章。`<article>`和`<section>`非常相似，因为两者都是独立的标签并包含相关内容；然而，如果它的内容可以通过原子或RSS提要进行联合（syndication），那么`<article>`元素更为合适。'
- en: The `<aside>` tag represents the part of a page that is tangentially related
    to the content around it, and also separate from that content, as it can be removed
    without affecting the main content of the page. Typical usage can be a sidebar.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<aside>`标签代表与页面内容相关但分离的部分，因为它可以被移除而不会影响页面的主要内容。典型的用法是侧边栏。'
- en: The `<address>` tag represents the contact information for the nearest `<article>`
    parent element, if present, or the parent `<body>` element, which in that case
    applies to the whole document.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<address>`标签代表最近的`<article>`父元素的联系信息，如果存在的话，或者适用于整个文档的父`<body>`元素。'
- en: 'Putting all these new elements together in a page would yield the following
    markup:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 将这些新元素全部放在一个页面中会产生以下的标记：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Introducing built-in media elements
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引入内置媒体元素
- en: 'HTML5 introduced new media elements such as `<audio>` and `<video>`, which
    can be considered as a new revolution in media types after images in the earlier
    versions of HTML. These two elements make it very easy to embed media in your
    HTML page/document and provide built-in media support via the **HTML5 Media element
    API**. According to the latest specs by W3C, we can define `<video>` and `<audio>`
    as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: HTML5引入了新的媒体元素，如`<audio>`和`<video>`，这些可以被认为是HTML早期版本中图像之后的媒体类型的新的革命。这两个元素使得在HTML页面/文档中嵌入媒体变得非常简单，并通过**HTML5媒体元素API**提供内置媒体支持。根据W3C最新的规范，我们可以这样定义`<video>`和`<audio>`：
- en: The `<video>` tag is a media element used for playing videos or movies and audio
    files with captions
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<video>`标签是一个媒体元素，用于播放视频或电影以及带字幕的音频文件。'
- en: The `<audio>` tag is a media element whose media data is audio, that is, a sound
    or an audio stream
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<audio>`标签是一个媒体元素，其媒体数据是音频，即声音或音频流。'
- en: The `<audio>` and `<video>` elements play audio and video files respectively.
    The only difference between them is that the `<audio>` element does not have a
    playback area for visual content, contrary to the `<video>` element.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`<audio>`和`<video>`元素分别播放音频和视频文件。它们之间的唯一区别是，`<audio>`元素没有用于视觉内容的播放区域，这与`<video>`元素相反。'
- en: 'Prior to HTML5, we needed a plugin in order to play an audio or a video file,
    and that required writing a large chunk of markup. Without HTML5, embedding media
    elements was never so easy; just by putting an `<audio>` tag resulting in two
    lines of code you can get a media player with playback controls. It is almost
    the same as the `<img />` tag before. Refer to the following code:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在HTML5之前，我们需要一个插件来播放音频或视频文件，这需要编写大量的标记代码。没有HTML5，嵌入媒体元素从未如此简单；只需放入一个`<audio>`标签，就可以得到带有播放控制的媒体播放器，仅需两行代码。它几乎与之前的`<img
    />`标签一样。参考以下代码：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The previous example results in a media player that will look like the following
    screenshot on Internet Explorer 9 (IE9), and might differ from one browser to
    another:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个例子会在Internet Explorer 9 (IE9)上看起来像以下的屏幕截图，并且可能因浏览器而异：
- en: '![Introducing built-in media elements](img/7102EN_01_01.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![引入内置媒体元素](img/7102EN_01_01.jpg)'
- en: 'The previous code shows the `<audio>` tag in its simplest form, but the `<audio>`
    tag has more attributes and options. Refer to the following code:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码展示了`<audio>`标签的最简单形式，但`<audio>`标签还有更多的属性和选项。参考以下代码：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: First, notice the content wrapped in a `<p>` tag inside the `<audio>` element.
    This content is a fallback text and will only be used if the browser doesn't support
    the `<audio>` tag. It provides a graceful fallback for older web browsers by informing
    the user about this issue, and we can add a link to allow the download of this
    audio file instead. This way, the user will not just stand there wondering what
    has happened. This is the simplest way to fallback; you can use JavaScript for
    the same purpose too.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，注意`<audio>`元素内的`<p>`标签中的内容。这部分内容是备用文本，只有在浏览器不支持`<audio>`标签时才会使用。它通过告知用户这个问题，为旧版网页浏览器提供一个优雅的回退方案，并且我们可以添加一个链接允许下载这个音频文件。这样，用户就不会只是站在那里想知道发生了什么。这是最简单的回退方式；你也可以用JavaScript达到同样的效果。
- en: The preceding code snippet also shows some of the attributes for the `<audio>`
    element. According to the W3C specification, `src`, `controls`, `autoplay`, `loop`,
    `preload`, `mediagroup`, and `muted` are common attributes to both the media elements,
    namely `<audio>` and `<video>`.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码片段还展示了一些`<audio>`元素的属性。根据W3C规范，`src`、`controls`、`autoplay`、`loop`、`preload`、`mediagroup`和`muted`是两个媒体元素（即`<audio>`和`<video>`）共同的属性。
- en: The `controls` attribute displays the standard HTML5 controls for the audio
    on the webpage, and the design of the controls varies between browser agents.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`controls`属性在网页上显示音频的标准HTML5控件，控件的设计在不同浏览器代理之间可能会有所不同。'
- en: The `autoplay` attribute plays the audio file automatically as soon as the DOM
    finishes loading.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoplay`属性在DOM加载完成后自动播放音频文件。'
- en: The `loop` attribute enables repetition automatically.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`loop` 属性 enable 自动重复。'
- en: The `mediagroup` attribute links multiple media elements together using a media
    controller.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mediagroup` 属性通过媒体控制器将多个媒体元素链接在一起。'
- en: The `muted` attribute sets a default state of the audio file to mute.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`muted` 属性设置了音频文件默认静音状态。'
- en: The `preload` attribute provides a hint to the user agent about what the author
    thinks will lead to the best user experience. Its values can be `none`, `metadata`,
    or `auto`.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`preload` 属性向用户代理提供了关于作者认为将导致最佳用户体验的提示。它的值可以是 `none`、`metadata` 或 `auto`。'
- en: '`none`: This value hints to the browser that the web page doesn''t expect users
    to need the media resource.'
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`none`：这个值提示浏览器，网页不期望用户需要媒体资源。'
- en: '`metadata`: This value hints to the browser to fetch the resource metadata
    (dimensions, track list, duration, and so on).'
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`metadata`：这个值提示浏览器获取资源元数据（维度、轨道列表、持续时间等）。'
- en: '`auto`: This value hints to the browser to put the user''s needs first without
    any risk to the server. An empty value, as in just adding the attribute `preload`,
    maps to the `auto` value.'
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`auto`：这个值提示浏览器在没有任何风险的情况下优先考虑用户的需求。空值，如只是添加了 `preload` 属性，映射到 `auto` 值。'
- en: You can specify a value for the attributes as in `controls="controls"`, which
    would have the same behavior. But for simplicity and less code, you can simply
    leave out the value for this attribute; the same can be applied for `loop`, `autoplay`,
    and `muted`. You can specify the media resource by either using the `src` attribute
    or the `<source>` elements.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以像 `controls="controls"` 一样为属性指定值，这将具有相同的行为。但为了简化代码和减少代码量，您可以省略这个属性的值；同样的适用于
    `loop`、`autoplay` 和 `muted`。您可以通过使用 `src` 属性或 `<source>` 元素来指定媒体资源。
- en: Note
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The attribute overrides the elements.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 属性覆盖了元素。
- en: 'The media resource (audio or video) has a MIME type and additionally a codec
    as in the following code:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 媒体资源（音频或视频）有一个 MIME 类型，另外还有一个编解码器，如下代码所示：
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Setting the value for the `type` attribute has to be done within the `<source>`
    element. The browser/user agent will avoid downloading the resource if it does
    not support its type. You can add multiple formats of your audio/video in order
    to ensure playback support across different browsers. The browser agent will go
    over the `<source>` elements; if it cannot render the first type, it will skip
    to the next `<source>` to validate its type, and so on. For this purpose, you
    will have to check the list of MIME types supported by the `<audio>` and `<video>`
    elements in different browsers. The browser not only checks for the MIME types
    but also for the specified codec. So, even if the browser agent can render the
    resource type, the video/audio will not load if the codec is not supported.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 为 `type` 属性设置值必须在 `<source>` 元素内完成。如果浏览器/用户代理不支持其类型，将避免下载资源。您可以为不同的浏览器添加多种格式的音频/视频，以确保播放支持。浏览器代理将查看
    `<source>` 元素；如果它无法渲染第一个类型，它将跳到下一个 `<source>` 以验证其类型，依此类推。为此，您必须检查不同浏览器中 `<audio>`
    和 `<video>` 元素支持的 MIME 类型列表。浏览器不仅检查 MIME 类型，还检查指定的编解码器。所以，即使浏览器代理可以渲染资源类型，如果编解码器不受支持，视频/音频也不会加载。
- en: 'The following table lists the support for the 3 main video formats across the
    major browsers:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格列出了主要视频格式在主要浏览器中的支持情况：
- en: '| Format | IE9+ | Chrome | Firefox | Opera | Safari |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| 格式 | IE9+ | Chrome | Firefox | Opera | Safari |'
- en: '| --- | --- | --- | --- | --- | --- |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- |'
- en: '| WebM (VP8 CODEC) | Yes | Yes | Yes | Yes | No |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| WebM (VP8 编解码器) | 是 | 是 | 是 | 是 | 否 |'
- en: '| MP4 (H.264 CODEC) | Yes | Yes | No | No | Yes |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| MP4 (H.264 编解码器) | 是 | 是 | 否 | 否 | 是 |'
- en: '| OGV (OGG THEORA CODEC) | No | Yes | Yes | Yes | No |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| OGV (OGG THEORA 编解码器) | 否 | 是 | 是 | 是 | 否 |'
- en: 'From the listing in the previous table, we can conclude that providing a media
    resource with both WebM and MP4 formats in your HTML5 video will guarantee it
    to load in the latest versions of all major browsers. This theory is reinforced
    in Visual Studio 2012, which offers full Intellisense support for HTML5 tags.
    When you insert the following snippet for an HTML5 `<video>` element, it lists
    3 `<source>` elements within the `<video>` tag:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的表格列表中，我们可以得出结论，在您的 HTML5 视频中提供 WebM 和 MP4 格式的媒体资源将保证在所有主要浏览器的最新版本中加载。这个理论在
    Visual Studio 2012 中得到了加强，它为 HTML5 标签提供了完整的 Intellisense 支持。当你插入以下 HTML5 `<video>`
    元素的代码片段时，它在 `<video>` 标签内列出 3 个 `<source>` 元素：
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The `<video>` element also includes a `poster` attribute, which is used to
    specify a path for an image to be displayed in the visual content area when no
    video data is available or until the user clicks on the play button. For advertising
    purposes, you can use an image or a frame from the video that gives the user an
    idea of what the video is like. If you do not specify a poster image and if the
    `autoplay` attribute is not set, the browser may just display a black box filling
    the dimensions of the `<video>` element. For example, the following code shows
    the difference between code samples for two similar videos, with a poster specified
    for the second video:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`<video>`元素还包括一个`poster`属性，用于指定在没有视频数据可用或直到用户点击播放按钮时在视觉内容区域显示的图像的路径。出于广告目的，你可以使用图像或视频中的帧，让用户了解视频的样子。如果你没有指定海报图像，并且`autoplay`属性没有设置，浏览器可能会显示一个填充`<video>`元素尺寸的黑色盒子。例如，以下代码显示了两个相似视频的代码示例之间的区别，第二个视频指定了海报：'
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The output of this markup will produce the following on the screen:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这段标记输出的结果将在屏幕上产生以下内容：
- en: '![Introducing built-in media elements](img/7102EN_01_02.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![介绍内置媒体元素](img/7102EN_01_02.jpg)'
- en: You might have noticed that we specified a `width` value of `400` for the two
    videos in the previous example. The `<video>` element accepts standard HTML `width`
    and `height` attributes. If there is no value set for `width` and `height`, the
    visual content area stretches to the native size of video. It is recommended to
    set the `width` and `height` attributes on the `<video>` element, thus avoiding
    stretching to full size, and to encode the video at the desired viewing dimensions.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会注意到，在之前的示例中我们对两个视频指定了`width`值为`400`。`<video>`元素接受标准的HTML`width`和`height`属性。如果没有设置`width`和`height`的值，视觉内容区域将扩展到视频的原生尺寸。建议在`<video>`元素上设置`width`和`height`属性，从而避免扩展到全尺寸，并且按照期望的观看尺寸对视频进行编码。
- en: Note
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The values for the width and height attributes do not accept units. The value
    indicates CSS pixels, for example, `width=400` is the same as `width=400px`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`width`和`height`属性的值不接受单位。该值表示CSS像素，例如，`width=400`与`width=400px`相同。'
- en: There are JavaScript methods, properties, and DOM events that are part of the
    HTML5 standard that is associated with these new elements. You can read and set
    properties programmatically, such as the `src` path and the dimensions (`width`
    and `height`) of the `<video>` tag. You can use JavaScript methods to load the
    audio and video, and then play and pause the media resource. You can also write
    code to handle different DOM events raised by media elements, such as `onplaying`,
    `onprogress` (load progress), `onplay`, and `onpause`. For example, you disable
    the default controls displayed by the element by removing the `controls` attribute
    and by calling the functions that play and pause the media resource from separate
    buttons.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些JavaScript方法、属性和DOM事件是HTML5标准的一部分，与这些新元素相关。你可以程序化地读取和设置属性，例如`src`路径和`<video>`标签的尺寸（`width`和`height`）。你可以使用JavaScript方法加载音频和视频，然后播放和暂停媒体资源。你还可以编写代码来处理媒体元素触发的不同DOM事件，例如`onplaying`、`onprogress`（加载进度）、`onplay`和`onpause`。例如，你可以通过移除`controls`属性并从单独的按钮调用播放和暂停媒体资源的函数来禁用元素显示的默认控件。
- en: 'The following code listing shows how we can play and pause the video using
    JavaScript. We first need to detect the current state of the video file by calling
    the Boolean property `.paused`, and if true, we then call the methods `play()`
    or `pause()` accordingly:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码列表显示了如何使用JavaScript播放和暂停视频。我们首先需要通过调用布尔属性`.paused`来检测视频文件当前的状态，如果为真，则相应地调用`play()`或`pause()`方法：
- en: '[PRE6]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the preceding code, we declare a variable `testVideo` and assign it to the
    `myVideo` element from DOM. Assuming that the element was assigned an ID, you
    can use the name, tag name, or the element's place in the DOM hierarchy to retrieve
    the elements.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的代码中，我们声明了一个变量`testVideo`，并将其赋值给DOM中的`myVideo`元素。假设该元素被分配了一个ID，你可以使用名称、标签名或元素在DOM层次结构中的位置来检索元素。
- en: Advanced media with JavaScript
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 高级媒体与JavaScript
- en: The media elements have a rich API to access with pure JavaScript. Using JavaScript,
    we can add a lot of functionality to the media elements. You can manipulate the
    media resource, style it, rotate a video, play two and more media elements in
    sync, display a progress bar while the media resource loads, resize a video dynamically,
    and so on.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 媒体元素拥有丰富的 API，可以纯JavaScript进行访问。利用JavaScript，我们可以向媒体元素添加许多功能。您可以操纵媒体资源，给它样式，旋转视频，同步播放两个或更多的媒体元素，在媒体资源加载时显示进度条，动态调整视频大小等等。
- en: The following is the code sample that adds functionality to the `timeupdate`
    event, which fetches the current play time of the video in seconds and displays
    it in a separate div.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码示例为 `timeupdate` 事件添加了功能，该事件获取视频的当前播放时间（以秒为单位）并在一个单独的 div 中显示它。
- en: 'The following is the HTML code:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是的HTML代码：
- en: '[PRE7]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The following is the JavaScript code:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 以下的JavaScript代码：
- en: '[PRE8]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The JavaScript `addEventListener` method is used to provide a handler for the
    `timeupdate` event. It takes three parameters and has the basic syntax, which
    is as follows:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 使用JavaScript `addEventListener` 方法提供 `timeupdate` 事件的处理程序。它接受三个参数，具有以下基本语法：
- en: '[PRE9]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `type` parameter specifies the type of event to register, while `listener`
    is the event handler function to associate with the event, and the third parameter
    `capture` is a Boolean value that specifies whether the event handler is registered
    for the capturing phase or not.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`type` 参数指定了要注册的事件类型，而 `listener` 是与事件关联的事件处理函数，第三个参数 `capture` 是一个布尔值，用于指定事件处理程序是否注册在捕获阶段。'
- en: In addition, you can combine the capabilities of the `<video>` element with
    a canvas, allowing you to manipulate video data in real time and add a variety
    of visual effects.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您可以将 `<video>` 元素与画布结合使用，允许您实时操作视频数据并添加各种视觉特效。
- en: Introducing feature-rich form elements
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍功能丰富的表单元素
- en: Forms and `<form>` elements are an integral part of any application or website,
    from a login form to a complete contact or registration form. In HTML4, the `<form>`
    elements were very idle, and for any feature or advanced styling, JavaScript was
    a necessity. And for any interaction, or data submission and validation, it demanded
    server and client-side scripting, and its functionality was inhibited if the scripting
    was disabled in the browser. HTML5 brought major improvements to the `<form>`
    elements with new attributes and input types, and added features such as browser-based
    validation and CSS styling that provide a better experience for the users filling
    it, and all possible simplicity for the developers creating it.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 表单和 `<form>` 元素是任何应用程序或网站的重要组成部分，从登录表单到完整的联系或注册表单。在HTML4中，`<form>` 元素非常简单，对于任何功能或高级样式，JavaScript都是必需的。而对于任何交互，或者数据提交和验证，都要求服务器和客户端脚本，如果浏览器中禁用了脚本，其功能就会受到限制。HTML5通过新的属性和输入类型对
    `<form>` 元素进行了重大改进，并添加了诸如基于浏览器的验证和CSS样式等功能，为填写表单的用户提供了更好的体验，并为创建表单的开发人员提供了所有可能的简单性。
- en: An enriched <input> tag
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个丰富的 `<input>` 标签
- en: New values for the `type` attribute are introduced to the `<input>` element.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`<input>` 元素引入了 `type` 属性的新值。'
- en: HTML5 adds 13 new `<input>` types to the ones we were already familiar with
    in HTML4, such as `text` and `checkbox`. With this addition, the `<input>` control
    now supports types such as `range`, `date`, `number`, `telephone`, `email`, and
    `URL`. And these new `<input>` types add intelligent behavior to the element themselves.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: HTML5在HTML4我们已经熟悉的 `<input>` 类型中增加了13个新类型，如 `text` 和 `checkbox`。添加这些类型后，`<input>`
    控制现在支持如 `range`、`date`、`number`、`telephone`、`email` 和 `URL` 等类型。而这些新的 `<input>`
    类型为元素本身添加了智能行为。
- en: 'The following is the table listing of these types:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是这些类型的表格列表：
- en: '| `<input>` types | Description |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '```<input>``` 类型 | 描述 |'
- en: '| --- | --- |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '```---``` | ```---``` |'
- en: '| `tel` | It expects a telephone number. |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '```tel``` | 它期望一个电话号码。|'
- en: '| `search` | It prompts the user to enter text that they want to search for,
    and adds a search icon to the input element (on browsers that support it). |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '```search``` | 它提示用户输入他们想要搜索的文本，并在支持它的浏览器上向输入元素添加一个搜索图标。|'
- en: '| `url` | It expects a single URL. |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '```url``` | 它期望一个URL。|'
- en: '| `email` | It expects a single e-mail address or a list of e-mail addresses
    (separated by commas). |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '```email``` | 它期望一个电子邮件地址或由逗号分隔的电子邮件地址列表。|'
- en: '| `datetime` | It expects a date and time with UTC time zone. |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '```datetime``` | 它期望一个带有UTC时区的日期和时间。|'
- en: '| `date` | It expects a date. |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '```date``` | 它期望一个日期。|'
- en: '| `month` | It expects a date with a year and a month, but no time zone. |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '`| month |` 它期望一个带有年份和月份的日期，但没有时区。|'
- en: '| `week` | It expects a date that consists of a week-year number and a week
    number. |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '`| week |` 它期望由周年号和周号组成的日期。|'
- en: '| `time` | It expects a time-value such as hours, minutes, seconds, and fractional
    seconds. |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '`| time |` 它期望时间值，如小时、分钟、秒和分数秒。|'
- en: '| `datetime-local` | It expects date and time with no time zone. |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '`| datetime-local |` 它期望日期和时间没有时区。|'
- en: '| `number` | It expects numerical input. |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '`| number |` 它期望数字输入。|'
- en: '| `range` | It expects a numerical input and displays a slider. |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '`| range |` 它期望数字输入，并显示一个滑块。|'
- en: '| `color` | It expects color value and displays a color palette to choose from.
    |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '`| color |` 它期望颜色值，并显示颜色调色板以供选择。|'
- en: Along with the addition to the `<input>` types, new features have been added
    to the already existing ones such as the File input element, which now supports
    multifile selection using the `multiple` attribute. The **browse** button will
    display the file dialog and then you can select files from your local disk or
    `SkyDrive`; the files can be sent to the server as part of the form data when
    the form is submitted.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 除了向`<input>`类型添加新特性外，还增加了对新现有特性的支持，例如文件输入元素，现在支持使用`multiple`属性进行多文件选择。当表单提交时，**浏览**按钮将显示文件对话框，然后你可以从本地磁盘或`SkyDrive`中选择文件；文件可以作为表单数据的一部分发送到服务器。
- en: 'You can also take advantage of the `progress` element that represents the progress
    of a task, as specified by the W3C. It can be used to show the progress of a large
    file being uploaded or a media resource that is being loaded. The progress of
    a task is determined by two attributes of this element:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以利用表示任务进度的`progress`元素，如W3C所指定。它可以用来显示大文件正在上传或媒体资源正在加载的进度。任务的进度由此元素的两个属性决定：
- en: The `value` attribute, which indicates how much progress has been made
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`value`属性，表示进度已完成多少'
- en: The `max` attribute, which indicates the total amount of work required till
    task completion
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`max`属性，表示直到任务完成所需的总工作量'
- en: The following code uses a `progress` element and a button, and the script adds
    the value specified in the JavaScript function parameter to its existing value.
    When you load the sample and try it, you will see the progress bar visually updating
    the completion progress.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码使用`progress`元素和一个按钮，脚本将其参数中的值添加到其现有值中。当你加载示例并尝试它时，你将看到进度条 visually updating
    the completion progress。
- en: 'The following is the HTML code:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是的HTML代码：
- en: '[PRE10]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The following is the JavaScript code:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是的JavaScript代码：
- en: '[PRE11]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Easy validation
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简单的验证
- en: HTML5's new `<input>` types along with the validation attributes such as `required`
    and `pattern`, and the pseudo CSS3 selectors allow browser-based validation, where
    you can catch a form's input errors without a single line of code or script. This
    was previously impossible and needed a custom JavaScript code or a JavaScript
    library. Basically, it provides client-side form validation without JavaScript.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: HTML5的新`<input>`类型以及验证属性，如`required`和`pattern`，还有伪CSS3选择器允许基于浏览器的验证，这样你可以在不编写一行代码或脚本的情况下捕获表单的输入错误。这在过去是不可能的，需要自定义JavaScript代码或JavaScript库。基本上，它提供了无JavaScript的客户端表单验证。
- en: We'll start with the most trivial validation, filling a required field. In order
    to achieve this, we need to add the `required` attribute to an `<input>` element.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从最简单的验证开始，即填写一个必填字段。为了实现这一点，我们需要向`<input>`元素添加`required`属性。
- en: The `required` attribute can be set on the `<input>` elements with type `text`,
    `URL`, `email`, `checkbox`, or `radio`, and on `select` and `textarea` elements.
    It is a Boolean attribute and can only be set on an element.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`required`属性可以设置在类型为`text`、`URL`、`email`、`checkbox`或`radio`的`<input>`元素上，以及`select`和`textarea`元素上。它是一个布尔属性，只能设置在元素上。'
- en: 'We specify that filling a value for a field is mandatory by simply adding the
    `required` attribute. In the following code listing, you will find a couple of
    `<input>` elements with the `required` attribute:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过简单地向`<input>`元素添加`required`属性来指定字段的值为必填。在下面的代码列表中，你会发现带有`required`属性的几个`<input>`元素：
- en: '[PRE12]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Once the `required` attribute is added, and then when you click on the **submit**
    button, all the fields in the form will be validated; an error is returned if
    any of the fields are incorrect. The required fields are highlighted, and moreover,
    default messages are provided to notify the user that these fields are required
    in the form.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦添加了`required`属性，然后当你点击**提交**按钮时，表单中的所有字段都将进行验证；如果任何字段不正确，将返回错误。必填字段会被突出显示，而且，默认消息会通知用户这些字段在表单中是必须的。
- en: 'You can see the following screenshot displaying the output of the preceding
    code:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到下面的截图显示了前面代码的输出：
- en: '![Easy validation](img/7102EN_01_03.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![轻松验证](img/7102EN_01_03.jpg)'
- en: We can apply one or more styles using the CSS3 pseudo-selector `required` (more
    on that in the next chapter). For example, the following style adds a CSS3 pseudo-class
    `required`, which will look for all the `input` elements in the document that
    have the `required` attribute, and style it with the `yellow` `border-color`.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用CSS3伪选择器`required`应用一个或多个样式（关于这方面的更多信息将在下一章中介绍）。例如，下面的样式添加了一个CSS3伪类`required`，它将寻找文档中具有`required`属性的所有`input`元素，并用`yellow`
    `border-color`来设置样式。
- en: '[PRE13]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: If you want to apply a style that affects all the non-required elements in the
    form, well that's very easy; just add the `optional` pseudo-class and give it
    a style just as we did with the `required` class. In the following code, we apply
    a `LightGray` `border-color` to all the `input` elements that don't have a `required`
    attribute.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想对表单中所有非必填元素应用一种样式，那是非常简单的；只需添加`optional`伪类，并像我们对`required`类所做的那样给它一个样式。在下面的代码中，我们给所有没有`required`属性的`input`元素应用了`LightGray`
    `border-color`。
- en: '[PRE14]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: HTML5 forms not only validate for required fields, but they also check the content
    of the field values and validate it either automatically, as in the URL and `email`
    input types, or by using the `pattern` attribute. The `pattern` attribute uses
    a regular expression to define the valid format that the element value must match,
    for example, a telephone number or social security number.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: HTML5表单不仅对必填字段进行验证，而且还检查字段值的内容，并自动验证，就像在URL和`email`输入类型中一样，或者使用`pattern`属性。`pattern`属性使用正则表达式来定义元素值必须匹配的有效格式，例如，电话号码或社会保障号码。
- en: 'The following example shows the syntax for a `password` field, which is both
    required and must have a valid input with a minimum length of eight characters.
    And here, the default validation message is replaced by the text provided in the
    `title` attribute:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的例子展示了`password`字段的语法，该字段是必填的，并且必须有有效的输入，最小长度为八个字符。在这里，默认的验证消息被`title`属性中提供的文本替换：
- en: '[PRE15]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'There are more attributes that add to the validation technique, such as `placeholder`,
    which provides the users with a hint message displayed in light text until the
    user starts typing inside the element; the hint could be about the value they
    should enter in the field. For example, you can add a demo e-mail address in the
    `email` field such as:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 还有更多属性可以增加验证技术，比如`placeholder`，它提供了一个在用户开始在元素内输入文字前以浅色文字显示的提示信息；这个提示可能是关于用户应该在字段中输入的值。例如，你可以在`email`字段中添加一个示例电子邮件地址，如：
- en: '[PRE16]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: You can check for the maximum number of characters allowed in a `text` or a
    `textarea` input using the `maxlength` attribute. Also, we have the `min`, `max`,
    and `step` attributes used with the `range` element to validate the values entered
    for that element. The `min` and `max` attributes check for the minimum and maximum
    values that can be entered, while the `step` attribute checks for the allowed
    values.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`maxlength`属性检查`text`或`textarea`输入中允许的最大字符数。此外，我们还有`min`、`max`和`step`属性与`range`元素一起使用，以验证该元素输入的值。`min`和`max`属性检查可以输入的最小和最大值，而`step`属性检查允许的值。
- en: You can also specify acceptable file MIME types with the `accept` attribute.
    As you may have noticed in the preceding code listing, the `accept` attribute
    was added to the `<input type="file" />` element, which is the only element to
    be used with it. Once you add this to the file control, and then when you try
    to browse for a file using Windows 8 File Explorer, only the types that are in
    the `accept` list will be displayed.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过`accept`属性指定可接受的文件MIME类型。正如你在前面的代码列表中可能注意到的，`accept`属性被添加到了`<input type="file"
    />`元素中，这是唯一与之使用的元素。一旦你把这个属性添加到文件控件中，然后当你尝试使用Windows 8文件资源管理器浏览文件时，只有`accept`列表中的类型才会显示。
- en: HTML5 form validation is the default behavior; no code is needed to activate
    it, but you can turn it off by adding the `formnovalidate` attribute to the **submit**
    button or any `<input>` element. This attribute allows a form to be submitted
    without being validated.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: HTML5表单验证是默认行为；不需要编写代码来激活它，但您可以通过在**提交**按钮或任何`<input>`元素上添加`formnovalidate`属性来关闭它。这个属性允许表单在没有经过验证的情况下提交。
- en: Assigning custom data attributes
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分配自定义数据属性
- en: 'With HTML5, we now have the ability to assign custom data attributes to any
    HTML5 element. The W3C defines it as:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 随着HTML5的出现，我们现在有能力为任何HTML5元素分配自定义数据属性。W3C将其定义为：
- en: '*Attribute that is intended to store custom data private to the page or application,
    for which there are no more appropriate attributes or elements.*'
  id: totrans-129
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**用于存储页面或应用程序私有自定义数据的属性，如果没有更合适的属性或元素，则可以使用该属性。**'
- en: 'These new custom data attributes consist of two parts:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这些新的自定义数据属性由两部分组成：
- en: '**Attribute name**: It must start with the prefix data- and should be followed
    with at least one character and should not contain uppercase characters'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**属性名称**：它必须以`data-`前缀开头，后跟至少一个字符，且不应包含大写字母。'
- en: '**Attribute value**: It must be a string value'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**属性值**：它必须是一个字符串值'
- en: 'Let''s add a custom attribute to a `<div>` tag as shown in the following code:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们像下面的代码示例那样给`<div>`标签添加一个自定义属性：
- en: '[PRE17]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'You can see the custom attribute name `data-category` and the attribute value
    `TechnicalBooks` assigned to the `<div>` element. This data can be retrieved and
    updated by your JavaScript code using the native `getAttribute` and `setAttribute`
    methods, because the custom data attributes are considered to be part of the page
    on which they are used. The following is the code sample that shows how to manipulate
    the custom attributes using native JavaScript:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到自定义属性名`data-category`和属性值`TechnicalBooks`被分配给`<div>`元素。这些数据可以通过使用原生的`getAttribute`和`setAttribute`方法来检索和更新，因为自定义数据属性被认为是它们所使用的页面的组成部分。下面的代码示例展示了如何使用原生的JavaScript来操作自定义属性：
- en: '[PRE18]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The HTML5 specification clearly states that the data attributes should not
    be used to replace an existing attribute or an element that may be more semantically
    appropriate. For example, it would be inappropriate to add a data-time attribute
    to specify a time value in a `span` element as the following code shows:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: HTML5规范明确指出，数据属性不应用来替代已存在的属性或可能更具有语义 appropriate 的元素。例如，在`span`元素中添加一个data-time属性来指定时间值是不恰当的，如下面的代码所示：
- en: '[PRE19]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The most appropriate and more semantic element to use would be a `time` element,
    as the following code shows:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 最合适且更具语义的元素是一个`time`元素，如下面的代码所示：
- en: '[PRE20]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: When developing Windows 8 apps, we can use the Windows library for JavaScript
    (`WinJS`) to achieve more advanced binding of data to HTML elements. The Win8
    JavaScript library utilizes the HTML `data-*` attributes to provide an easy way
    to programmatically implement data binding.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 当开发Windows 8应用时，我们可以使用Windows为JavaScript提供的库（`WinJS`）来实现将数据与HTML元素更高级的绑定。Win8
    JavaScript库利用HTML的`data-*`属性提供了一种简单的方式来程序化实现数据绑定。
- en: Summary
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概要
- en: In HTML5, there are new semantically rich elements that can convey the purpose
    of their use. There are media elements that allow you to easily add audio and
    video to your application, and new input types and attributes that you can use
    to create intelligent and interactive forms and bind them to data on-the-fly,
    all with less markup and code than ever before.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在HTML5中，有新的语义丰富的元素，可以传达它们使用的目的。有媒体元素允许您轻松地向应用程序添加音频和视频，还有新的输入类型和属性，您可以使用它们创建智能和交互式的表单，并实时地将它们与数据绑定，所有这些都比以往任何时候的标记和代码都要少。
- en: In the next chapter, we will have a look at the new and rich CSS3 features available
    for us when developing for Windows 8, and how we can use them to style and apply
    layouts to our HTML.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将查看在为Windows 8开发时可用的丰富的新CSS3特性，以及我们如何使用它们来为我们的HTML应用样式和布局。
