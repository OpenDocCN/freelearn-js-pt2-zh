["```js\nfunction foo(){\n  console.log( \"Calling Foo\" );\n}\nfunction bar(){\n  console.log( \"Calling Bar\" );\n}\nsetTimeout(foo, 0 );\nbar();\n```", "```js\nCalling Bar\nCalling Foo\n```", "```js\nfunction bar(){\n  console.log( \"Bar complete\" );\n}\nfetch( \"http://www.telize.com/jsonip\" ).then(function( response ) {\n  console.log( \"Fetch complete\" );\n});\nbar();\n\n// Console:\n// Bar complete\n// Fetch complete\n```", "```js\n\"use strict\";\n// This statement loads imaginary AMD modules\n// You can find details about AMD standard in \n// \"Chapter 2: Modular programming with JavaScript\" \nrequire([ \"news\", \"Session\", \"User\", \"Ui\" ], function ( News, Session, User, Ui ) {\n  var session = new Session(),\n      news = new News(),\n      ui = new Ui({ el: document.querySelector( \"[data-bind=ui]\" ) });\n  // load news\n news.load( ui.update );\n //  authorize user \n session.authorize(function( token ){\n   var user = new User( token );\n   // load user data\n   user.load(function(){\n     ui.update();\n     // load user profile picture\n     user.loadProfilePicture( ui.update );\n     // load user notifications  \n     user.loadNotifications( ui.update );\n   });\n });\n});\n```", "```js\nfunction foo(){\n  throw new Error( \"Foo throws an error\" );\n}\ntry {\n  foo();\n} catch( err ) {\n  console.log( \"The error is caught\" );\n}\n```", "```js\nfunction foo(){\n  throw new Error( \"Foo throws an error\" );\n}\ntry {\n  setTimeout(foo, 0 );\n} catch( err ) {\n  console.log( \"The error is caught\" );\n}\n```", "```js\nvar el = document.createElement( \"div\" );\n    event = new CustomEvent( \"foo\", { detail: \"foo data\" });\nel.addEventListener( \"foo\", function( e ){\n  console.log( \"Foo event captured: \", e.detail );\n}, false );\n\nel.dispatchEvent( event );\n\n// Foo event captured: foo data\n```", "```js\nobj.on( \"foo\", function( data ){\n  console.log( \"Foo event captured: \", data );\n});\nobj.trigger( \"foo\", \"foo data\" );\n```", "```js\nfs.readFile( \"foo.txt\", function ( err, data ) {\n  if ( err ) {\n    console.error( err );\n  }\n  console.log( data );\n});\n```", "```js\n\"use strict\";\n    /**\n     * Increment a given value\n     * @param {Number} val\n     * @returns {Promise}\n     */\nvar foo = function( val ) {\n      /**\n       * Return a promise.\n       * @param {Function} resolve\n       */\n      return new Promise(function( resolve ) {\n        setTimeout(function(){\n          resolve( val + 1 );\n        }, 0 );\n      });\n    };\n\nfoo( 1 ).then(function( val ){\n  console.log( \"Result: \", val );\n});\n\n// Result: 5\n```", "```js\n\"use strict\";\n/**\n * Make GET request\n * @param {String} url\n * @returns {Promise}\n */\nfunction ajaxGet( url ) {\n  return new Promise(function( resolve, reject ) {\n    var req = new XMLHttpRequest();\n    req.open( \"GET\", url );\n    req.onload = function() {\n      // If response status isn't 200 something went wrong\n      if ( req.status !== 200 ) {\n        // Early exit\n        return reject( new Error( req.statusText ) );\n      }\n      // Everything is ok, we can resolve the promise\n      return resolve( JSON.parse( req.responseText ) );\n    };\n    // On network errors\n    req.onerror = function() {\n      reject( new Error( \"Network Error\" ) );\n    };\n    // Make the request\n    req.send();\n  });\n};\n\najaxGet(\"http://www.telize.com/jsonip\").then(function( data ){\n  console.log( \"Your IP is \", data.ip );\n}).catch(function( err ){\n  console.error( err );\n});\n// Your IP is 127.0.0.1\n```", "```js\n\"use strict\";\n    /**\n     * Increment a given value\n     * @param {Number} val\n     * @returns {Promise}\n     */\nvar foo = function( val ) {\n      /**\n       * Return a promise.\n       * @param {Function} resolve\n       * @param {Function} reject\n       */\n      return new Promise(function( resolve, reject ) {\n        if ( !val ) {\n          return reject( new RangeError( \"Value must be greater than zero\" ) );\n        }\n        setTimeout(function(){\n          resolve( val + 1 );\n        }, 0 );\n      });\n    };\n\nfoo( 1 ).then(function( val ){\n  // chaining async call\n  return foo( val );\n}).then(function( val ){\n  // transforming output\n  return val + 2;\n}).then(function( val ){\n  console.log( \"Result: \", val );\n}).catch(function( err ){\n  console.error( \"Error caught: \", err.message );\n});\n\n// Result: 5\n```", "```js\n\"use strict\";\n    /**\n     * Increment a given value\n     * @param {Number} val\n     * @returns {Promise}\n     */\nvar foo = function( val ) {\n      return new Promise(function( resolve ) {\n        setTimeout(function(){\n          resolve( val + 1 );\n        }, 100 );\n      });\n    },\n    /**\n     * Increment a given value\n     * @param {Number} val\n     * @returns {Promise}\n     */\n    bar = function( val ) {\n      return new Promise(function( resolve ) {\n        setTimeout(function(){\n          resolve( val + 2 );\n        }, 200 );\n      });\n    };\n\nPromise.all([ foo( 1 ), bar( 2 ) ]).then(function( arr ){\n  console.log( arr );\n});\n//  [2, 4]\n```", "```js\nPromise.race([ foo( 1 ), bar( 2 ) ]).then(function( arr ){\n  console.log( arr );\n});\n// 2\n```", "```js\n\"use strict\";\n\n// Fetch a random joke\nfunction fetchQuote() {\n  return fetch( \"http://api.icndb.com/jokes/random\" )\n  .then(function( resp ){\n    return resp.json();\n  }).then(function( data ){\n    return data.value.joke;\n  });\n}\n// Report either a fetched joke or error\nasync function sayJoke()\n{\n  try {\n    let result = await fetchQuote();\n    console.log( \"Joke:\", result );\n  } catch( err ) {\n    console.error( err );\n  }\n}\nsayJoke();\n```", "```js\n/**\n * Concat given arguments\n * @returns {String}\n */\nfunction concat(){\n  var args = [].slice.call( arguments );\n  return args.join( \",\" );\n}\n\nasync.waterfall([\n    function( cb ){\n      setTimeout( function(){\n        cb( null, concat( \"foo\" ) );\n      }, 10 );\n    },\n    function( arg1, cb ){\n      setTimeout( function(){\n        cb( null, concat( arg1, \"bar\" ) );\n      }, 0 );\n    },\n    function( arg1, cb ){\n      setTimeout( function(){\n        cb( null, concat( arg1, \"baz\" ) );\n      }, 20 );\n    }\n], function( err, results ){\n   if ( err ) {\n     return console.error( err );\n   }\n   console.log( \"All done:\", results );\n});\n\n// All done: foo,bar,baz\n```", "```js\nasync.parallel([\n    function( cb ){\n      setTimeout( function(){\n        console.log( \"foo is complete\" );\n        cb( null, \"foo\" );\n      }, 10 );\n    },\n    function( cb ){\n      setTimeout( function(){\n        console.log( \"bar is complete\" );\n        cb( null, \"bar\" );\n      }, 0 );\n    },\n    function( cb ){\n      setTimeout( function(){\n        console.log( \"baz is complete\" );\n        cb( null, \"baz\" );\n      }, 20 );\n    }\n], function( err, results ){\n   if ( err ) {\n     return console.error( err );\n   }\n   console.log( \"All done:\", results );\n});\n\n// bar is complete\n// foo is complete\n// baz is complete\n// All done: [ 'foo', 'bar', 'baz' ]\n```", "```js\n  /**\n   * Invoke a given callback only after this function stops being called `wait` milliseconds\n   * usage:\n   * debounce( cb, 500 )( ..arg );\n   *\n   * @param {Function} cb\n   * @param {Number} wait\n   * @param {Object} thisArg\n   */\n  function debounce ( cb, wait, thisArg ) {\n    /**\n     * @type {number}\n     */\n    var timer = null;\n    return function() {\n      var context = thisArg || this,\n          args = arguments;\n      window.clearTimeout( timer );\n      timer = window.setTimeout(function(){\n        timer = null;\n        cb.apply( context, args );\n      }, wait );\n    };\n  }\n```", "```js\nvar TOP_OFFSET = 200;\n// Lazy-loading\nwindow.addEventListener( \"scroll\", debounce(function(){\n  var scroll = window.scrollY || window.pageYOffset || document.documentElement.scrollTop;\n  if ( scroll >= TOP_OFFSET ){\n     console.log( \"Load the deferred widget (if not yet loaded)\" );\n  }\n}, 20 ));\n```", "```js\n  /**\n   * Invoke a given callback every `wait` ms until this function stops being called\n   * usage:\n   * throttle( cb, 500 )( ..arg );\n   *\n   * @param {Function} cb\n   * @param {Number} wait\n   * @param {Object} thisArg\n   */\n function throttle( cb, wait, thisArg ) {\n  var prevTime,\n      timer;\n  return function(){\n    var context = thisArg || this,\n        now = +new Date(),\n        args = arguments;\n\n    if ( !prevTime || now >= prevTime + wait ) {\n      prevTime = now;\n      return cb.apply( context, args );\n    }\n    // hold on to it\n    clearTimeout( timer );\n    timer = setTimeout(function(){\n      prevTime = now;\n      cb.apply( context, args );\n    }, wait );\n  };\n}\n```", "```js\ndocument.body.addEventListener( \"mousemove\", throttle(function( e ){\n  console.log( \"The cursor is within the element at \", e.pageX, \",\", e.pageY );\n}, 1000 ), false );\n\n// The cursor is within the element at 946 , 715\n// The cursor is within the element at 467 , 78\n```"]