["```js\nvar numberIsFinite = Number.isFinite || function isFinite(value) {\n  return typeof value === 'number' && globalIsFinite(value);\n};\n```", "```js\nvar a = 1;\n(function blockscope(){\n    var a = 2;\n    console.log(a);   // 2\n})();\nconsole.log(a);       // 1\n```", "```js\n\"use strict\";\nvar a = 1;\n{\n  let a = 2;\n  console.log( a ); // 2\n}\nconsole.log( a ); // 1\n```", "```js\nfunction fooey() {\n  console.log(foo); // ReferenceError\n  let foo = 5000;\n}\n```", "```js\nfor (let i = 0; i<5; i++) {\n  console.log(i);\n}\nconsole.log(i); // i is not defined\n```", "```js\nif(true){\n  const a=1;\n  console.log(a);\n  a=100;  ///\"a\" is read-only, you will get a TypeError\n}\n```", "```js\nfunction sum(a,b){\n  a = a || 0;\n  b = b || 0;\n  return (a+b);\n}\nconsole.log(sum(9,9)); //18\nconsole.log(sum(9));   //9\n```", "```js\nfunction sum(a=0, b=0){\n  return (a+b);\n}\nconsole.log(sum(9,9)); //18\nconsole.log(sum(9));   //9\n```", "```js\nfunction print(a, b){\n  console.log(a,b);\n}\nprint(...[1,2]);  //1,2\n```", "```js\nprint(...[1,2,3 ]);  //1,2\n```", "```js\nvar a = [1,2];\nvar b = [ 0, ...a, 3 ];\nconsole.log( b ); //[0,1,2,3]\n```", "```js\nfunction print (a,...b){\n  console.log(a,b);\n}\nconsole.log(print(1,2,3,4,5,6,7));  //1 [2,3,4,5,6,7]\n```", "```js\nvar [start, end] = [0,5];\nfor (let i=start; i<end; i++){\n  console.log(i);\n}\n//prints - 0,1,2,3,4\n```", "```js\nvar [start, end] = [0,5];\n```", "```js\nfunction fn() {\n  return [1,2,3];\n}\nvar [a,b,c]=fn();\nconsole.log(a,b,c); //1 2 3\n//We can skip one of them\nvar [d,,f]=fn();\nconsole.log(d,f);   //1 3\n//Rest of the values are not used\nvar [e,] = fn();\nconsole.log(e);     //1\n```", "```js\nfunction f() {\n  return {\n    a: 'a',\n    b: 'b',\n    c: 'c'\n  };\n}\n```", "```js\nvar { a: a, b: b, c: c } = f();\nconsole.log(a,b,c); //a b c\n```", "```js\nvar { a,b,c } = f();\n```", "```js\n//this is target: source - which is incorrect\nvar { x: a, x: b, x: c } = f();\nconsole.log(x,y,z); //x is undefined, y is undefined z is undefined\n//this is source: target - correct\nvar { a: x, b: y, c: z } = f();\nconsole.log(x,y,z); // a b c\n```", "```js\nvar firstname = \"Albert\", lastname = \"Einstein\",\n  person = {\n    firstname: firstname,\n    lastname: lastname\n  };\n```", "```js\nvar firstname = \"Albert\", lastname = \"Einstein\",\n  person = {\n    firstname,\n    lastname\n  };\n```", "```js\nvar person = {\n  getName: function(){\n    // ..\n  },\n  getAge: function(){\n    //..\n  }\n}\n```", "```js\nvar person = {\n  getName(){\n    // ..\n  },\n  getAge(){\n    //..\n  }\n}\n```", "```js\nfunction SuperLogger(level, clazz, msg){\n  console.log(level+\": Exception happened in class:\"+clazz+\" - Exception :\"+ msg);\n}\n```", "```js) delimiter. You can use string interpolation to put placeholders in a template string literal. The placeholders will be parsed and evaluated.\n\nThe preceding example can be rewritten as follows:\n\n```", "```js\n\nWe are using ```", "```js\nvar quote =\n`Good night, good night! \nParting is such sweet sorrow, \nthat I shall say good night \ntill it be morrow.`;\nconsole.log( quote );\n```", "```js\nfunction sum(a,b){\n  console.log(`The sum seems to be ${a + b}`);\n}\nsum(1,2); //The sum seems to be 3\n```", "```js\nfunction emmy(key, ...values){\n  console.log(key);\n  console.log(values);\n}\nlet category=\"Best Movie\";\nlet movie=\"Adventures in ES6\";\nemmy`And the award for ${category} goes to ${movie}`;\n\n//[\"And the award for \",\" goes to \",\"\"]\n//[\"Best Movie\",\"Adventures in ES6\"]\n```", "```js\nfunction priceFilter(s, ...v){\n  //Bump up discount\n  return s[0]+ (v[0] + 5);\n}\nlet default_discount = 20;\nlet greeting = priceFilter `Your purchase has a discount of ${default_discount} percent`;\nconsole.log(greeting);  //Your purchase has a discount of 25\n```", "```js\nlet m = new Map();\nlet s = { 'seq' : 101 };\n\nm.set('1','Albert');\nm.set('MAX', 99);\nm.set(s,'Einstein');\n\nconsole.log(m.has('1')); //true\nconsole.log(m.get(s));   //Einstein\nconsole.log(m.size);     //3\nm.delete(s);\nm.clear();\n```", "```js\nlet m = new Map([\n  [ 1, 'Albert' ],\n  [ 2, 'Douglas' ],\n  [ 3, 'Clive' ],\n]);\n```", "```js\nlet m2 = new Map([\n    [ 1, 'Albert' ],\n    [ 2, 'Douglas' ],\n    [ 3, 'Clive' ],\n]);\nfor (let a of m2.entries()){\n  console.log(a);\n}\n//[1,\"Albert\"] [2,\"Douglas\"][3,\"Clive\"] \nfor (let a of m2.keys()){\n  console.log(a);\n} //1 2 3\nfor (let a of m2.values()){\n  console.log(a);\n}\n//Albert Douglas Clive\n```", "```js\nlet x = {'first': 'Albert'};\nlet s = new Set([1,2,'Sunday',x]);\n//console.log(s.has(x));  //true\ns.add(300);\n//console.log(s);  //[1,2,\"Sunday\",{\"first\":\"Albert\"},300]\n\nfor (let a of s.entries()){\n  console.log(a);\n}\n//[1,1]\n//[2,2]\n//[\"Sunday\",\"Sunday\"]\n//[{\"first\":\"Albert\"},{\"first\":\"Albert\"}]\n//[300,300]\nfor (let a of s.keys()){\n  console.log(a);\n}\n//1\n//2\n//Sunday\n//{\"first\":\"Albert\"}\n//300\nfor (let a of s.values()){\n  console.log(a);\n}\n//1\n//2\n//Sunday\n//{\"first\":\"Albert\"}\n//300\n```", "```js\nlet s = Symbol();\nconsole.log(typeof s); //symbol\n```", "```js\nvar a = [1,2];\nvar i = a[Symbol.iterator]();\nconsole.log(i.next());      // { value: 1, done: false }\nconsole.log(i.next());      // { value: 2, done: false }\nconsole.log(i.next());      // { value: undefined, done: true }\n```", "```js\nvar list = ['Sunday','Monday','Tuesday'];\nfor (let i in list){\n  console.log(i);  //0 1 2\n}\nfor (let i of list){\n  console.log(i);  //Sunday Monday Tuesday\n}\n```", "```js\n//Traditional Function\nfunction multiply(a,b) {\n  return a*b;\n}\n//Arrow\nvar multiply = (a,b) => a*b;\nconsole.log(multiply(1,2)); //2\n```", "```js\n// single argument, single statement\n//arg => expression;\nvar f1 = x => console.log(\"Just X\");\nf1(); //Just X\n\n// multiple arguments, single statement\n//(arg1 [, arg2]) => expression;\nvar f2 = (x,y) => x*y;\nconsole.log(f2(2,2)); //4\n\n// single argument, multiple statements\n// arg => {\n//     statements;\n// }\nvar f3 = x => {\n  if(x>5){\n    console.log(x);\n  }\n  else {\n    console.log(x+5);\n  }\n}\nf3(6); //6\n\n// multiple arguments, multiple statements\n// ([arg] [, arg]) => {\n//   statements\n// }\nvar f4 = (x,y) => {\n  if(x!=0 && y!=0){\n    return x*y;\n  }\n}\nconsole.log(f4(2,2));//4\n\n// with no arguments, single statement\n//() => expression;\nvar f5 = () => 2*2;\nconsole.log(f5()); //4\n\n//IIFE\nconsole.log(( x => x * 3 )( 3 )); // 9\n```", "```js\nfunction CustomStr(str){\n  this.str = str;\n}\nCustomStr.prototype.add = function(s){   // --> 1\n  'use strict';\n  return s.map(function (a){             // --> 2\n    return this.str + a;                 // --> 3\n  });\n};\n\nvar customStr = new CustomStr(\"Hello\");\nconsole.log(customStr.add([\"World\"])); \n//Cannot read property 'str' of undefined\n```", "```js\nfunction CustomStr(str){\n  this.str = str;\n}\nCustomStr.prototype.add = function(s){   \n  'use strict';\n var that = this;                       // --> 1\n  return s.map(function (a){             // --> 2\n    return that.str + a;                 // --> 3\n  });\n};\n\nvar customStr = new CustomStr(\"Hello\");\nconsole.log(customStr.add([\"World\"])); \n//[\"HelloWorld]\n```", "```js\nfunction CustomStr(str){\n  this.str = str;\n}\nCustomStr.prototype.add = function(s){ \n return s.map((a)=> {\n return this.str + a;\n });\n};\nvar customStr = new CustomStr(\"Hello\");\nconsole.log(customStr.add([\"World\"])); \n//[\"HelloWorld]\n```"]