- en: Chapter 2. Styling with CSS3
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章．使用CSS3进行样式设计
- en: HTML defines the document/page structure and lists the elements it contains.
    But the job of defining the layout, the positioning, and the styling of those
    elements is the sole responsibility of CSS. **A cascading style sheet (CSS)**,
    as the name suggests, is basically a sheet that contains a list of style rules.
    Each CSS style rule links a **selector**, which defines what is going to be styled,
    to a declaration block, which includes a single or a set of styles, which in turn
    define the effect(s) you want applied to that associated selector. The syntax
    of a basic style rule would look like this
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: HTML定义了文档/页面结构并列出了包含的元素。但定义这些元素的布局、定位和样式是CSS的唯一责任。**层叠样式表（CSS）**，正如其名，基本上是一张包含一系列样式规则的表。每个CSS样式规则将一个**选择器**，它定义将要样式的内容，链接到一个声明块，其中包含一个或一组样式，进而定义要应用于相关选择器的效果(s)。基本样式规则的语法看起来像这样
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Throughout this chapter, we will go over the following topics: CSS3 selectors,
    Grid and Flexbox, Animation and Transforms, and Media Queries. These topics cover
    some of the CSS3 features that are frequently used when developing a Windows Store
    app with JavaScript.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将回顾以下主题：CSS3选择器、网格和Flexbox、动画和转换，以及媒体查询。这些主题涵盖了在用JavaScript开发Windows
    Store应用时经常使用的CSS3的一些特性。
- en: The power of CSS3 selectors
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS3选择器的威力
- en: CSS selectors are very powerful and come in handy when formatting an HTML document.
    Using selectors is sometimes tricky, as selecting exactly what you want, and then
    ensuring that the style rules applied are affecting just the elements that you
    intended, is a tedious mission. But when done properly with the right selectors,
    the outcome is very rewarding. Mastering the use of selectors will result in a
    less complex CSS, minimizing the probability of having redundant styles and over-defining
    the HTML with classes and IDs, thus ensuring a better performance. The selector
    can simply be an HTML element, a class, an element ID, or it can even be the element's
    position in the DOM.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: CSS选择器非常强大，在格式化HTML文档时非常方便。使用选择器有时会有些棘手，因为精确地选择你想要的内容，并确保应用的样式规则只影响你意图中的元素，是一项繁琐的任务。但是，当使用正确的选择器正确地完成时，结果是非常有价值的。掌握选择器的使用将导致更简单的CSS，最小化冗余样式和通过类和ID对HTML进行过度定义的可能性，从而确保更好的性能。选择器可以是一个HTML元素、一个类、一个元素ID，甚至可以是元素在DOM中的位置。
- en: 'The following is a list of CSS selectors; we will start with the basics and
    get to the new selectors introduced in CSS3:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一份CSS选择器的列表；我们将从基础的选择器开始，进而介绍CSS3中新增的选择器：
- en: '**The asterisk (*) symbol**: This is the `catch-all` selector, called the universal
    type selector, and is used to target every element in the document. It is often
    used with CSS Reset to reset all the default styles.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**星号(*)符号**：这是一个`万能`选择器，被称为通用类型选择器，用于定位文档中的每一个元素。它经常与CSS重置一起使用，以重置所有默认样式。'
- en: '[PRE1]'
  id: totrans-8
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**The HTML element**: It is called the type selector and is used to select
    all the elements in the document according to their type. For example, the following
    selector will target every `<p>` element in the DOM, change the color of the text
    to red, and underline it.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**HTML元素**：它被称为类型选择器，用于根据它们的类型选择文档中的所有元素。例如，下面的选择器将定位DOM中的每一个`<p>`元素，把文本颜色改为红色，并加下划线。'
- en: '[PRE2]'
  id: totrans-10
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Tip
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Using the `<body>` element as a selector will target the document's body, thereby
    selecting every element as if you are using the asterisk (*).
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用`<body>`元素作为选择器将定位文档的正文，从而选择每一个元素，就像你正在使用星号(*)一样。
- en: '**The ID selector**: It is specified by the value in the id attribute of the
    element prefixed with the hash (`#`) symbol. The ID should be the element''s name
    and, more importantly, it must be unique. The name should be a clear reference
    to the element. For instance, it would be quite clear to have an `id` value of
    `mainMenu` for a `nav` element. For example:'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ID选择器**：它由元素id属性中的值前缀哈希符号（`#`）指定。ID应该是元素的名称，更重要的是，它必须是唯一的。名称应该是对元素的清晰引用。例如，对于一个`nav`元素来说，有一个`id`值为`mainMenu`会很清晰。例如：'
- en: '[PRE3]'
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Moreover, being unique means that logically there should be no other element
    with an `id` value of `mainMenu` on the page. Since the `id` should always be
    unique, the selector will target only one element in the HTML document. For example,
    if you have a `<div>` element with an `id` value of `logo` as follows:'
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另外，唯一性意味着在页面上不应该有其他具有`id`值为`mainMenu`的元素。由于`id`应该始终是唯一的，选择器将在HTML文档中只针对一个元素。例如，如果你有如下的`<div>`元素，其`id`值为`logo`：
- en: '[PRE4]'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then the corresponding selector will be:'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 则相应的选择器将是：
- en: '[PRE5]'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**The class selector**: It is specified by the name of a class prefixed with
    a period (`.`) and targets all the elements with the matching class name. The
    basic syntax for this selector is as follows:'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类选择器**：它由一个类名前缀和一个点号（`.`）组成，目标是指具有匹配类名的所有元素。这个选择器的基本语法如下：'
- en: '[PRE6]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Any element with this class name will have bold text in a yellow background
    color. Classes should be applied when you want to style more than one element,
    specifically, a set of elements that have something in common. Bear in mind that
    contrary to the `id` property, the class name can never be used to uniquely identify
    an element. Moreover, the `class` property may have more than a single value;
    similarly, the same class may apply to more than one element. Although the use
    of class selectors may seem general, you can use it in a more specific manner
    by prefixing it with a type selector. For example, the following code snippet
    will target only the `<div>` elements that have the class **highlighted**:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 具有这个类名的任何元素都将拥有粗体文本和黄色背景颜色。当您想要为多个元素设置样式时，应该使用类，特别是有一组共通之处的元素。记住，与`id`属性相反，类名永远不能用来唯一标识一个元素。此外，`class`属性可能有多个值；同样，相同的类也可能适用于多个元素。尽管类选择器的使用可能看起来很通用，但您可以通过在前缀类型选择器来更具体地使用它。例如，下面的代码片段将只针对具有`highlighted`类的`<div>`元素：
- en: '[PRE7]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Also, you can chain class selectors to target all the elements that have all
    of the specified classes.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，您可以连锁类选择器来针对具有所有指定类名的所有元素。
- en: Attribute selectors
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 属性选择器
- en: 'The attribute selector is used to select elements based on their attributes.
    It checks whether an attribute is present; if yes, it checks the value of the
    attribute. The attribute should be enclosed within square braces. If the square
    braces contain only the name of the attribute, it will check if the attribute
    exists on the element. That''s why it''s also called the existence selector. In
    the following code snippet, the selector will target only the anchor elements
    having the `title` attribute:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 属性选择器用于根据元素的属性来选择元素。它首先检查属性是否存在；如果存在，它再检查属性的值。属性应该被包含在方括号内。如果方括号内只包含属性名，它将检查该属性是否存在于元素中。这就是它也被称为存在选择器的原因。在下面的代码片段中，选择器将只针对具有`title`属性的锚元素：
- en: '[PRE8]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The preceding syntax is helpful when checking for attributes that do not hold
    a value. If you remember, in the previous chapter we mentioned that some attributes
    do not need a value, such as the `required` attribute with the `<input>` elements,
    or the `loop` attribute with the audio and video elements. The following selector
    will look for all the audio elements that have the `loop` attribute and hide it:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的语法在检查没有值的属性时很有帮助。如果你记得，在前一章节我们提到了一些属性不需要值，比如`<input>`元素的`required`属性，或者音频和视频元素的`loop`属性。下面的选择器将寻找所有具有`loop`属性的音频元素并隐藏它：
- en: '[PRE9]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'To target the element(s) that exactly matches the specified attribute value,
    we will use the equality attribute marked with an equal symbol (`=`) and the value
    wrapped within quotes. So, if we want to target all input elements that have the
    value `email` in their `type` attribute, the syntax will look like the following:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为了精确匹配指定的属性值，我们将使用带有等号（`=`）的等价属性，并将值用引号括起来。所以，如果我们想要针对所有`type`属性值为`email`的输入元素，语法将如下所示：
- en: '[PRE10]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Also, under the attribute selector category, we have the **prefix** or the
    "starts with" attribute selector, which is used to check if an attribute has a
    value that starts with some value. The following syntax will match all the images
    that have an `id` value starting with `home`. For example, if you want to target
    all the images in your home page, you can add `home` to the `id`, thus having
    `homeLogo`, `homeBanner`, and so on, and apply a margin of 10 px to it:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，在属性选择器类别下，我们有前缀选择器或“以...开始”的属性选择器，用于检查属性是否以某个值开始。以下语法将匹配所有`id`值以`home`开始的图片。例如，如果你想定位首页上的所有图片，可以将`home`添加到`id`中，从而有`homeLogo`、`homeBanner`等，并为其应用10像素的边距：
- en: '[PRE11]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Similarly, we have the **suffix** selector or the "ends with" attribute selector,
    which will select all the elements whose attribute ends with the value you specify.
    The suffix selector is marked with the dollar (`$`) symbol before the equal (`=`)
    sign, and the syntax will look as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们有后缀选择器或“以...结尾”的属性选择器，它将选择所有属性值以你所指定的值结尾的元素。后缀选择器在等号（`=`）之前用美元（`$`）符号标记，语法如下：
- en: '[PRE12]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This will target all the anchor elements whose `href` attribute holds a value
    that ends with `.jpg`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这将匹配所有`href`属性值以`.jpg`结尾的锚点元素：
- en: 'Another attribute selector is the **substring** selector, also known as the
    "contains" selector. As the name suggests, it matches the attribute value containing
    the value specified in the selector. It is marked with the asterisk (`*`) symbol
    before the equal (`=`) sign, and the syntax will look as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个属性选择器是**子字符串**选择器，也称为“包含”选择器。正如其名，它匹配包含选择器中指定的值的属性值。它用星号（`*`）符号在等号（`=`）之前标记，语法如下：
- en: '[PRE13]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The preceding syntax will match all the `<ul>` elements that have an ID containing
    the string `Nav`. For example, you have multiple `<ul>` elements used for navigational
    purposes and marked with IDs such as `secondaryNav`, `sidebarNav`, and so on.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的语法将匹配所有含有`Nav`字符串的`<ul>`元素ID。例如，你有多个用于导航目的的`<ul>`元素，并标记有诸如`secondaryNav`、`sidebarNav`等ID：
- en: 'Also, we have the **hyphen** selector, marked with `|=`, which is used to match
    all the attribute values that are exactly equal and is immediately followed by
    a hyphen. You might use this selector rarely but a typical use for it would be
    with values that include a hyphen, for example, the `lang` attribute. The following
    listing will target all the elements with a value that exactly matches "en", additionally
    followed by a hyphen, and will return `en`, `en-us`, `en-uk`, and so on:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也有一种**连字符**选择器，用`|=`标记，它用于匹配后面紧跟连字符的完全相等的属性值。你可能很少使用这个选择器，但它的典型用途是用于包含连字符的值，例如`lang`属性。下面的列表将目标定位在与"en"完全匹配，且后面紧跟连字符的元素上，并将返回`en`、`en-us`、`en-uk`等：
- en: '[PRE14]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The last attribute selector would be the **whitespace** selector, which targets
    the specified attribute value that exactly matches in a space-delimited list of
    values. In the following code snippet, we have a `<p>` element with a custom `data-`
    attribute, containing three space-separated values, named `new events local`,
    and the selector will match this element since its `data-post-type` value matches
    exactly the value specified as `events`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个属性选择器将是**空白符**选择器，它针对的是在空格分隔的值列表中完全匹配指定属性值的元素。在以下代码片段中，我们有一个带有自定义`data-`属性的`<p>`元素，包含三个空格分隔的值，分别为`new
    events local`，选择器将匹配这个元素，因为它的`data-post-type`值与`events`完全匹配。
- en: 'The following is the HTML code:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 以下为HTML代码：
- en: '[PRE15]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'And the CSS code is as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: CSS代码如下：
- en: '[PRE16]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Note
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that, with HTML5, any attribute starting with `data-` is valid, unlike
    its predecessor that considers only the recognized attributes as valid.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在HTML5中，任何以`data-`开头的属性都是有效的，与其前身只认为识别的属性有效的规定不同。
- en: Combinator selectors
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组合选择器
- en: 'A CSS selector can contain multiple selectors, that is, a combination of simple
    selectors. A combinator selector contains more than one simple selector joined
    by a combinator. The combinator is a symbol that represents the relationship between
    the selectors. We already had three different combinators in CSS2, and CSS3 added
    one extra. Listed as follows are the four selectors, the combinators used, and
    what each selector matches:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '| Selector | Combinator | Target |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
- en: '| Descendant | Space Character | Matches the elements that are descendants
    of the specified element. |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
- en: '| Direct Descendant (Child Selector) | > | Matches the elements that are a
    direct descendant of the specified element. |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
- en: '| Adjacent Sibling | + | Matches the elements that are an adjacent sibling
    (immediately following) to the specified element. |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
- en: '| General Sibling | ~ | Matches the elements that are an adjacent sibling to
    the specified element. |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
- en: 'The preceding selectors are described as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '**The Descendant selector**: It is marked by a space character as a combinator
    and it will select all elements that are descendants of a specified element. It
    is as if we are applying an additional filter on the first simple selector. The
    first selector represents the parent element, and the second is the child (descendant)
    element you are trying to match. For example, the following code snippet will
    match all the anchor elements that have the `<li>` element as their parent:'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The HTML code is as follows:'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The CSS selector is as follows:'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '**The Direct Descendant selector**: It is marked by the greater-than (`>`)
    sign as a combinator and has the basic form E>F, which matches every F element
    that is a direct descendant (child) of the E element. In the following code snippet,
    only the `<p>` elements that are immediate children of the `<div>` element are
    going to be colored blue while the rest are not.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The HTML code is as follows:'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The CSS code is as follows:'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '**The Adjacent Sibling selector**: It is marked by a plus (`+`) sign as a combinator,
    and matches all the sibling elements that are immediately following the parent
    element. So, there can be no elements in between the sibling elements. If it is
    a bit complex, the following example will explain it. The selector will apply
    red color only to one `<p>` element.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The HTML code is as follows:'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The CSS code is as follows:'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '**The General Sibling selector**: It is marked by the tilde (`~`) sign as a
    combinator, and is a new addition in CSS3\. It is used to select all the elements
    that are siblings of a given element. So, if we apply the selector to the HTML
    in the preceding example, both the `<p>` elements will match and will be colored
    red, as they are both siblings of `h1`.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Pseudo-class selectors
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A pseudo-class is similar to a class but, since it is in-built, you do not
    have to explicitly add it in the HTML code. Also, it differs in syntax; a class
    selector is preceded by a period (`.`), whereas a pseudo-class is preceded by
    a colon (`:`). In its basic form, a pseudo-class selector will take the following
    form:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 伪类类似于类，但由于它是内置的，您不需要在HTML代码中显式添加它。此外，它在语法上也有所不同；类选择器前面有一个点（`.`），而伪类选择器前面有一个冒号（`:`）。在其基本形式中，伪类选择器将采用以下形式：
- en: '[PRE24]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'You can specify a pseudo-class without a selector, and it will invoke the default
    type selector. So, if we specify `:hover` alone, it will match all the elements
    and apply the style rule to anything in the document that can be hovered on. Else,
    you can be more detailed and apply the pseudo-class selector to a specific HTML
    element. For example, the following code snippet will apply a pink color on all
    the `<p>` elements when hovered over:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以指定没有选择器的伪类，它将调用默认类型选择器。所以，如果我们单独指定`:hover`，它将匹配所有元素，并将样式规则应用于文档中可以悬停的任何内容。否则，您可以更详细地将对特定HTML元素的伪类选择器。例如，以下代码片段将在悬停时为所有`<p>`元素应用粉红色：
- en: '[PRE25]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Pseudo-classes existed in CSS prior to CSS3 and you are most probably familiar
    with the famous `:hover`, `:visited`, and `:active` pseudo-classes that represent
    the different states of the anchor element. CSS3 introduced many more powerful
    pseudo-classes such as `:required`, `:valid`, `:nth-child(n)`, `:first-child`,
    `:last-child`, `:only-child`, `:first-of-type`, `:last-of-type`, and several others.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在CSS3之前，伪类就已经存在，您可能对著名的`:hover`、`:visited`和`:active`伪类很熟悉，这些伪类代表锚元素的不同的状态。CSS3引入了许多更强大的伪类，如`:required`、`:valid`、`:nth-child(n)`、`:first-child`、`:last-child`、`:only-child`、`:first-of-type`、`:last-of-type`等。
- en: Pseudo-element selectors
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 伪元素选择器
- en: Pseudo-elements represent parts of elements, such as the first line of a paragraph,
    or the part that appears after an element. Similar to a pseudo-class that acts
    as a class, a pseudo-element behaves as an element but is in-built and does not
    need to be defined in the HTML code. Pseudo-elements are distinguished by a double
    colon (`::`), which was introduced in CSS3\. Note that all the pseudo-elements
    that were introduced before CSS3 used a single colon (`:`), similar to the pseudo-class
    syntax.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 伪元素代表元素的某些部分，如段落的第一行，或元素后面的部分。伪元素类似于一个伪类，它作为类的行为，但是内置的，不需要在HTML代码中定义。伪元素通过双冒号（`::`）来区分，这个语法是在CSS3中引入的。需要注意的是，在CSS3之前引入的所有伪元素都使用单个冒号（`:`），类似于伪类的语法。
- en: 'The following code snippet will select all the generated content defined by
    the `content` style property that appears after the `<p>` element:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段将选择由`content`样式属性定义的`<p>`元素后的所有生成内容：
- en: 'The HTML code is as follows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: HTML代码如下：
- en: '[PRE26]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The CSS code is as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: CSS代码如下：
- en: '[PRE27]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The output will be:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果将是：
- en: '**Paragraph content goes here ''I come after a paragraph''**'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**段落内容放在这里 ''我在段落后''**'
- en: 'The following table lists the pseudo-elements:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是伪元素的表格：
- en: '| **::first-letter** | Matches the first letter in an element. |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| `::first-letter` | 匹配元素中的第一个字母。 |'
- en: '| **::first-line** | Selects the first line in an element. |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| `::first-line` | 选择元素中的第一行。 |'
- en: '| **::before** | Selects the content generated before an element. |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| `::before` | 选择元素生成的内容之前。 |'
- en: '| **::after** | Selects the content generated after an element. |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| `::after` | 选择元素生成的内容之后。 |'
- en: '| **::selection** | Selects any content that the user might have highlighted,
    including text within an editable text field, such as input type text, or any
    element with the `contenteditable` attribute declared. |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| `::selection` | 选择用户可能已经高亮显示的任何内容，包括可编辑文本字段中的文本，如输入类型为文本的元素，或具有`contenteditable`属性的任何元素。
    |'
- en: Tip
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Although you can have the same behavior programmatically by adding classes to
    your HTML code using JavaScript, it is easier to add pseudo-classes and pseudo-elements
    to your selectors; moreover, it gives you cleaner code.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然您可以通过使用JavaScript向您的HTML代码中添加类来以编程方式实现相同的行为，但通过向您的选择器中添加伪类和伪元素更为简单；此外，它还可以使您的代码更清晰。
- en: Creating fluid layouts with Grid and Flexbox
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Grid和Flexbox创建流体布局
- en: When it comes to implementing the design principles set by Microsoft to build
    attractive, intuitive, and interactive Windows 8 apps, layout is very important.
    It is common to define a page layout using HTML structural elements such as `<div>`
    and `<table>`, and the positioning style rules.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到实施由Microsoft设定的构建吸引人、直观且互动的Windows 8应用的设计原则时，布局非常重要。通常，使用HTML结构元素（如`<div>`和`<table>`）和定位样式规则定义页面布局。
- en: But now, there is a more flexible way to do it with the CSS3 advanced layout
    features, namely **Grid** layout and **Flexbox** (**Flexible box**) layout. These
    layout systems allow you to easily implement an adaptive and fluid layout.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 但是现在，使用CSS3高级布局功能（即**网格**布局和**Flexbox**（**灵活盒**）布局）有一种更灵活的方法来实现。这些布局系统允许您轻松实现适应性和流体布局。
- en: The Grid layout
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网格布局
- en: It offers a very simple way to create fluid and adaptable layouts for a Windows
    8 app. It is ideal for implementing a full screen UI since the grid can automatically
    expand to fill in all the space that is available. The Grid layout allows you
    to align and position its child elements as columns and rows, entirely using CSS,
    and is independent of their order in the HTML code. It enables more fluidity in
    layouts than what would be possible with the approach that uses floats or scripts.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 它为Windows 8应用提供了一种非常简单的方法来创建流体和适应性布局。由于网格可以自动扩展以填充所有可用空间，因此它非常适合实现全屏UI。网格布局允许您使用CSS完全对齐和定位其子元素作为列和行，与它们在HTML代码中的顺序无关。与使用浮动或脚本的方法相比，它使布局更加流体。
- en: 'The following example demonstrates how we traditionally used floats to position
    elements:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的例子演示了我们传统上如何使用浮动来定位元素：
- en: 'The HTML code is as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是HTML代码：
- en: '[PRE28]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The CSS code is as follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是CSS代码：
- en: '[PRE29]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The preceding code will result in the following multicolor box. The container
    has a black border surrounding the two divs inside, the blue div to the left and
    the red one to the right, and the white space in between is the remaining unoccupied
    space:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码将导致以下多色盒子。容器有一个黑色边框围绕着里面的两个div，左边的蓝色div和右边的红色div，之间的空白是剩余未占用的空间：
- en: '![The Grid layout](img/7102EN_02_01.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![网格布局](img/7102EN_02_01.jpg)'
- en: 'The Grid layout is specified by setting the `display` style rule property of
    an element to `-ms-grid`, or you can use the `-ms-inline-grid` property for an
    inline-level grid element. You may have noticed the vendor prefix `-ms`(Microsoft-specific),
    which is because the status of this CSS feature is still a Working Draft; adding
    this vendor prefix allows it to work with both Internet Explorer 10 and Windows
    Store apps using JavaScript in Windows 8\. The following is an example:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 网格布局通过将元素的`display`样式规则属性设置为`-ms-grid`来指定，或者您可以为内联级别网格元素使用`-ms-inline-grid`属性。您可能注意到了`-ms`这个厂商前缀（Microsoft-specific），这是因为这个CSS特性的状态仍然是一个工作草案；添加这个厂商前缀允许它在Internet
    Explorer 10和Windows 8中使用JavaScript构建的Windows商店应用中工作。以下是示例：
- en: '[PRE30]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The `display: -ms-grid;` property creates a grid; afterwards, we define the
    columns and rows and specify their sizes using the following properties: `-ms-grid-column`
    and `-ms-grid-rows`. The `-ms-grid-columns` property specifies the width of each
    column, and `-ms-grid-rows` specifies the height of each row, in that grid. The
    width and height values in these two properties respectively are separated by
    a space character. In the preceding example, the `-ms-grid-columns: 120px 1fr;`
    property creates two columns; the first one has a width of 120 px and the second
    one has a width value of 1 fr, that is, one fractional unit, which means that
    the width of the second column will automatically fill in all of the remaining
    available space. The same concept applies for rows. The remaining two classes
    in the preceding code snippet will position the elements in these classes into
    columns and rows of the grid using the `-ms-grid-column` and `-ms-grid-row` properties.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`display: -ms-grid;`属性创建了一个网格；之后，我们定义了列和行，并使用以下属性指定它们的大小：`-ms-grid-column`和`-ms-grid-row`。`-ms-grid-columns`属性指定了每列的宽度，而`-ms-grid-rows`指定了每行的
    height, 在那个网格中。这两个属性中的宽度和高度值分别由一个空格字符分隔。在前面的例子中，`-ms-grid-columns: 120px 1fr;`属性创建了两个列；第一个宽度为120
    px，第二个宽度值为1 fr，即一个分数单位，这意味着第二列的宽度将自动填充所有剩余的可用空间。行也适用同样的概念。在前面的代码片段中剩下的两个类将使用`-ms-grid-column`和`-ms-grid-row`属性将具有这些类的元素定位到网格的列和行中。'
- en: Note
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The **fraction units (fr)** designate how the available space should be divided
    among the columns or rows according to their fractional values. For example, if
    we have a four-columns layout such as the following: `-ms-grid-columns: 100px
    100px 1fr 2fr;`, column 3 takes one fraction and column 4 takes two fractions
    of the total remaining space. Hence, the total remaining space is now 3 fr; column
    3 is set to 1 fr divided by the total (3), so both one-third of the remaining
    space and column 4 having 2 fr will be assigned two-thirds of the remaining space.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '**分数单位（fr）** 表示可用空间应该如何根据它们的分数值在列或行之间进行划分。例如，如果我们有一个四列布局，如下所示：`-ms-grid-columns:
    100px 100px 1fr 2fr;`，第3列占据一个分数，第4列占据两个分数的剩余空间。因此，剩余空间现在为3个分数；第3列被设置为1个分数除以总数（3），所以第3列和第4列（2个分数）将分配剩余空间的三分之二。'
- en: 'In the preceding example, we used px and fr units to specify the size of the
    columns and rows. Additionally, we can do so using standard length units (such
    as px or em), or the percentage of the element''s width or height. Also, we can
    use the following keywords:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们使用了px和fr单位来指定列和行的尺寸。此外，我们还可以使用标准长度单位（如px或em），或者元素的宽度和高度的百分比。还可以使用以下关键字：
- en: '`auto`: This keyword makes the size of the column or row stretch to fit the
    content inside'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`auto`: 这个关键字使得列或行的尺寸伸展以适应内部内容。'
- en: '`min-content`: This keyword sets the size of the column or row to the minimum
    size of any child element'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`min-content`: 这个关键字将列或行的尺寸设置为任何子元素的最小尺寸。'
- en: '`max-content`: This keyword sets the size of the column or row to the maximum
    size of any child element'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`max-content`: 这个关键字将列或行的尺寸设置为任何子元素的最大尺寸。'
- en: '`minmax(a,b)`: This keyword sets the size of the column or row to a value between
    a and b as much as the available space allows'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`minmax(a,b)`: 这个关键字将列或行的尺寸设置为a和b之间的值，尽可能利用可用空间。'
- en: 'The following table lists the properties associated with the Grid layout:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格列出了与网格布局相关的属性：
- en: '| **-ms-grid-column** | Specifies in which column of the grid the element will
    reside. The numbering system is of the **1-based index** type. |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| **-ms-grid-column** | 用于指定元素在网格中的列。编号系统是基于**1的索引**类型。 |'
- en: '| **-ms-grid-columns** | Specifies a width value for each of the grid columns.
    |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| **-ms-grid-columns** | 用于指定每个网格列的宽度值。 |'
- en: '| **-ms-grid-column-span** | Specifies the number of columns that the element
    will occupy in the grid. |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| **-ms-grid-column-span** | 用于指定元素在网格中占据的列数。 |'
- en: '| **-ms-grid-column-align** | Specifies a value for the horizontal alignment
    of the element inside the column. |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| **-ms-grid-column-align** | 用于设置元素在列内的水平对齐值。 |'
- en: '| **-ms-grid-row** | Specifies in which row of the grid the element will reside.
    The numbering system is of the 1-based index type. |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| **-ms-grid-row** | 用于指定元素在网格中的行。编号系统是基于1的索引类型。 |'
- en: '| **-ms-grid-rows** | Specifies a height value for each of the grid rows. |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| **-ms-grid-rows** | 用于指定每个网格行的宽度值。 |'
- en: '| **-ms-grid-row-span** | Specifies the number of rows that the element will
    occupy in the grid. |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| **-ms-grid-row-span** | 用于指定元素在网格中占据的行数。 |'
- en: '| **-ms-grid-row-align** | Specifies a value for the vertical alignment of
    the element inside the row. |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| **-ms-grid-row-align** | 用于设置元素在行内的垂直对齐值。 |'
- en: Moreover, the Grid layout exposes a rich set of properties that allows you to
    easily cater to the changes in the view states and orientation of the app. We
    will discuss that later on when we get to the design of the app.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，网格布局暴露出一组丰富的属性，使您能够轻松地适应用户界面的视图状态和应用程序的方向变化。我们将在设计应用程序时讨论这一点。
- en: The Flexbox layout
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 弹性盒布局（Flexbox layout）
- en: The second layout model we have is the Flexbox mode, another recent addition
    in CSS3\. Similar to the Grid layout, the Flexbox layout is enabled using the
    `display` property and also requires a Microsoft-specific vendor prefix as it
    is still a **World Wide Web Consortium (W3C)** Working Draft. The Flexbox layout
    is used to make the relative position and the size of elements stay constant,
    even if the window sizes of the screen and browser change. Compared to floats,
    Flexbox provides a better and easier control on the position and size of elements.
    The advantage you have with Flexbox layout is that it enables relative positioning
    and dimensions of the elements inside it, since it considers the available space.
    This allows you to create a fluid layout that maintains the position and size
    of the elements relative to each other; hence, it enables the elements inside
    a Flexbox container to resize and reposition themselves when the dimensions of
    the browser or app window change. A Flexbox layout would be ideal for building
    apps that present any digital print media, such as a newspaper or a magazine.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们拥有的第二种布局模型是Flexbox模式，这是CSS3中的又一次近期添加。与Grid布局类似，Flexbox布局通过设置`display`属性启用，并且由于它仍是一个**万维网联盟（W3C）**工作草案，因此还需要一个微软特定的供应商前缀。Flexbox布局用于使元素的相对位置和大体保持不变，即使屏幕和浏览器窗口的大小发生变化。与浮动相比，Flexbox为元素的位置和大小提供了更好的控制。使用Flexbox布局的优势在于，它使元素在其内部具有相对定位和尺寸，因为它考虑了可用空间。这允许您创建一个流体布局，维持元素之间的相对位置和大小；因此，当浏览器或应用程序窗口的大小发生变化时，Flexbox容器内的元素可以重新调整大小和位置。Flexbox布局非常适合构建显示任何数字印刷媒体的应用程序，例如报纸或杂志。
- en: 'As with the Grid layout, it is quite easy to create a container with a Flexbox
    layout by setting the `display` property to `-ms-flexbox`. After creating a Flexbox
    container, we can start manipulating the elements inside it, using the following
    properties:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 与Grid布局一样，通过将`display`属性设置为`-ms-flexbox`，很容易创建一个带有Flexbox布局的容器。创建Flexbox容器后，我们可以开始使用以下属性操纵它内部的元素：
- en: '`-ms-flex-direction`: It specifies the orientation of the child elements using
    the following keyword values: `row` (initial value), `column`, `row-reverse`,
    and `column-reverse`. We will go over each one of the values, and show the effect
    it applies, in the following example. And what better way to explain it than actual
    code? So,o suppose we have the following HTML and CSS code snippets:'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-ms-flex-direction`：它使用以下关键字值指定子元素的取向：`row`（初始值）、`column`、`row-reverse`和`column-reverse`。我们将逐一介绍每个值，并展示它应用的效果，在下面的示例中。那么，更好的解释方法是什么呢？所以，假设我们有以下的HTML和CSS代码片段：'
- en: '[PRE31]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The preceding syntax creates a Flexbox container with the `flexit` class that
    wraps in a Flexbox layout the child `<div>` elements marked with text 1, 2, and
    3 for tracking. We apply some styles and background colors to mark the child elements.
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前面的语法创建了一个带有`flexit`类的Flexbox容器，该容器以Flexbox布局包裹了标记有文本1、2和3的子`<div>`元素以进行跟踪。我们对一些子元素应用了一些样式和背景颜色。
- en: 'So the following values in the `-ms-flex-direction` property will give us the
    results in the following table. Notice how the order and the positioning of the
    elements change without adding anything to the markup:'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 因此，在`-ms-flex-direction`属性中的以下值将给我们以下表格中的结果。注意元素的出现顺序和定位如何在不添加任何标记的情况下发生变化：
- en: '| Property | The Flexbox container | The order and the positioning of the elements
    |'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 属性 | Flexbox容器 | 元素的出现顺序和定位 |'
- en: '| --- | --- | --- |'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| row | ![The Flexbox layout](img/7102EN_02_02.jpg) | The child elements are
    positioned from left to right, in the same order of appearance in the HTML markup.
    |'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 行 | ![Flexbox布局](img/7102EN_02_02.jpg) | 子元素从左至右定位，与HTML标记中的出现顺序相同。|'
- en: '| row-reverse | ![The Flexbox layout](img/7102EN_02_03.jpg) | The child elements
    are positioned from right to left, in the reverse order of appearance in the HTML
    markup. |'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 行反转 | ![Flexbox布局](img/7102EN_02_03.jpg) | 子元素从右至左定位，与HTML标记中的出现顺序相反。|'
- en: '| column | ![The Flexbox layout](img/7102EN_02_04.jpg) | The child elements
    are positioned from top to bottom, in the same order of appearance in the HTML
    markup from left to right. |'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 列 | ![Flexbox布局](img/7102EN_02_04.jpg) | 子元素从上至下定位，与从左至右的HTML标记中的出现顺序相同。|'
- en: '| column-reverse | ![The Flexbox layout](img/7102EN_02_05.jpg) | The child
    elements are positioned from bottom to top, in the same order of appearance in
    the HTML markup. |'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| column-reverse | ![Flexbox 布局](img/7102EN_02_05.jpg) | 子元素从底部向上定位，按照 HTML
    标记出现的顺序。 |'
- en: '`-ms-flex-align`: This property specifies the alignment of the child elements
    in a Flexbox container. It takes the following keyword values: `start`, `end`,
    `center`, `stretch`, and `baseline`. The alignment is always perpendicular to
    the layout axis defined in the `-ms-flex-direction` property; so, if the orientation
    is horizontal, it will set the alignment to vertical and vice versa. For example,
    if the orientation is `row` (horizontal), the value `start` will set the alignment
    to top (vertical).'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-ms-flex-align`：此属性指定了 Flexbox 容器中子元素的对齐方式。它接受以下关键字值：`start`、`end`、`center`、`stretch`
    和 `baseline`。对齐总是垂直于在 `-ms-flex-direction` 属性中定义的布局轴；因此，如果方向是水平的话，它将对齐设置为垂直，反之亦然。例如，如果方向是
    `row`（水平），则值 `start` 将设置对齐为顶部（垂直）。'
- en: '`-ms-flex-pack`: This property specifies how the available space is divided
    between the child elements of the Flexbox container, parallel to the axis defined
    by the `-ms-flex-direction` property, unlike the alignment property described
    earlier. It takes the following keyword values: `start`, `end`, `center`, and
    `justify`.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-ms-flex-pack`：此属性指定了如何将 Flexbox 容器中子元素之间的可用空间分配给定义在 `-ms-flex-direction`
    属性中的轴线，与前面描述的对齐属性不同。它接受以下关键字值：`start`、`end`、`center` 和 `justify`。'
- en: '`-ms-flex-wrap`: This property enables the child elements to overflow and wrap
    to the next line or columns, and specifies the direction of that flow. It takes
    the following keyword values: `none`, `wrap`, and `wrap-reverse`.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-ms-flex-wrap`：此属性允许子元素溢出并在下一行或列中换行，并指定该流动的方向。它接受以下关键字值：`none`、`wrap` 和 `wrap-reverse`。'
- en: CSS-powered animations
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS 驱动的动画
- en: '**CSS transforms** allow you to manipulate HTML elements in a way that previously
    was only possible with scripts. It enables rotation, translation, scaling, and
    skewing of elements, and enables the transformation of elements in 2D and 3D.
    CSS animations enable you to smoothly change the style properties over a period
    of time, allowing you to design complex animations with better rendering performance
    when compared to JavaScript-powered animations. Working with the two combined,
    you can do magic on your app.'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS 转换** 允许你以前只能通过脚本实现的方式来操作 HTML 元素。它使元素的旋转、平移、缩放和倾斜成为可能，并允许在 2D 和 3D 中转换元素。CSS
    动画使你能够在一段时间内平滑地改变样式属性，与基于 JavaScript 的动画相比，使你能够设计出复杂动画且具有更好的渲染性能。将两者结合使用，你可以在应用上施展魔法。'
- en: CSS3 animations
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CSS3 动画
- en: CSS3 revolutionized animation in web development. Earlier, creating animations
    required animated images, plugins such as Flash, or some heavy scripting. Although
    jQuery and other supporting libraries made it a bit easier for developers to create
    animations with JavaScript, still it cannot compete with the performance capability
    that the CSS animations offer. Basically, an animation defines an effect that
    allows an element to change one or many styles, such as color, size, position,
    opacity, and others, within a time frame. Also, with CSS3 animations, you can
    allow multiple intermediate changes in styles during the animation itself, other
    than the ones specified at the beginning and end of the animation.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: CSS3 革命化了网页开发中的动画效果。在此之前，制作动画需要使用动画图片、Flash 这类插件，或者进行一些复杂的脚本编程。尽管 jQuery 和其他支持库让开发者用
    JavaScript 制作动画变得稍微容易一些，但它在性能上仍然无法与 CSS 动画相匹敌。基本来说，动画定义了一个效果，允许元素在一段时间内改变一种或多种样式，如颜色、大小、位置、透明度等。此外，借助
    CSS3 动画，你可以在动画过程中允许多种中间样式的变化，而不仅仅是动画开始和结束时指定的那些。
- en: 'In order to create an animation, you will need the `@keyframe` CSS rule, which
    is used to specify the styles that will be changed during the animation. The following
    is the code snippet that creates a `@keyframe` rule named `demo` and changes the
    background color from red to yellow, and halfway through, at 50percent, it changes
    the opacity to zero:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建一个动画，你需要使用 `@keyframe` CSS 规则，该规则用于指定动画过程中将发生变化的样式。以下代码片段创建了一个名为 `demo`
    的 `@keyframe` 规则，将背景颜色从红色变为黄色，在中间 50% 的地方，将透明度变为零：
- en: '[PRE32]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Afterwards, we bind the animation that is defined in the `@keyframe` rule to
    the element (or the selector) we want the effect applied to. Left alone without
    being attached to any element, the animation will not be applied anywhere. We
    will need to specify at least two animation properties when binding the animation
    to a selector:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们将在`@keyframe`规则中定义的动画绑定到我们想要应用效果的元素（或选择器）上。如果动画不绑定到任何元素，它将不会在任何地方应用。在将动画绑定到选择器时，我们需要指定至少两个动画属性：
- en: Name
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名称
- en: Duration
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续时间
- en: 'For example:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE33]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The preceding example binds the animation named `demo` that we created using
    the `@keyframe` rule, with a duration of 4 seconds, to the element with ID `#logo`.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的示例将我们使用`@keyframe`规则创建的名为`demo`的动画，持续时间为4秒，绑定到ID为`#logo`的元素上。
- en: 'Animations are triggered automatically as soon as they are defined in the DOM.
    You can specify a certain delay time to avoid that, or you can trigger the animation
    by code. The animation has six major properties as shown below:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 动画一旦在DOM中定义，就会自动触发。你可以指定一定的延迟时间来避免这种情况，或者可以通过代码来触发动画。动画有以下六个主要属性，如下所示：
- en: '[PRE34]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Or we can use the animation shorthand property by which we can combine all
    of these properties into a single line:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 或者我们可以使用动画简写属性，通过这个属性，我们可以将这些属性组合到一行中：
- en: '[PRE35]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Developers are still a bit hesitant to use CSS3 animations, or any other HTML5
    feature for that matter, due to browser support. In order to address this problem
    of browser compatibility, some style rules had to be defined with vendor-prefixes.
    For example, an animation definition would be duplicated to support other browsers,
    each with its own vendor prefixes as follows:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 由于浏览器支持问题，开发者仍然对使用CSS3动画或其他HTML5特性持谨慎态度。为了解决浏览器兼容性问题，一些样式规则必须定义带有厂商前缀的版本。例如，一个动画定义将被复制以支持其他浏览器，每个浏览器都有它自己的厂商前缀，如下所示：
- en: '[PRE36]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: But when developing for Windows 8, you can reduce it to one, which is the standard.
    Worrying about multi-browser support is the least of your concerns as Windows
    8 supports all the standards that work for Internet Explorer 10.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 但是在为Windows 8开发时，你可以将其减少到只有一个，这就是标准。担心多浏览器支持是最不需要担心的问题，因为Windows 8支持所有对Internet
    Explorer 10有效的标准。
- en: CSS3 transforms
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CSS3转换
- en: Another advantage of CSS3 is the concept of 2D and 3D transforms, which enables
    you to manipulate the elements in your app in a way that was not possible using
    CSS. It enables you to create rotation, scaling, skewing, and translation of HTML
    elements in 2D and, newly, in 3D space without the need for a plugin or scripts,
    defined by the W3C under the **CSS transforms** specification.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: CSS3的另一个优点是2D和3D转换的概念，它使你能够以使用CSS无法实现的方式操纵应用中的元素。它使你能够在2D和全新的3D空间中对HTML元素进行旋转、缩放、倾斜和翻译，而无需插件或脚本，这是由W3C在**CSS转换**规范下定义的。
- en: 'Transforms are created using the `transform` property, which holds a list of
    transform functions to be applied to the specified element. The property value
    can be set to one or more (space-delimited) transform functions, which will be
    applied in the order they are listed. Following is a sample code of the `transform`
    property that applies the rotate function:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`transform`属性创建转换，该属性包含一个或多个（由空格分隔）的转换函数，应用于指定的元素。属性值可以设置为一个或多个（由空格分隔）的转换函数，它们将按照列表的顺序应用。以下是一个示例代码，应用了旋转函数的`transform`属性：
- en: '[PRE37]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The result of the preceding `transform` property is that the element is rotated
    90 degrees and then translated (moved) 100 px horizontally to the right.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 前面`transform`属性的结果是，元素首先旋转90度，然后（水平）向右移动100像素。
- en: The list of functions available for the `transform` property includes `matrix()`,
    `matrix3d()`, `perspective()`, `rotate()`, `rotate3d()`, `rotateX()`, `rotateY()`,
    `rotateZ()`, `scale()`, `scale3d()`, `scaleX()`, `scaleY()`, `scaleZ()`, `skew()`,
    `skewX()`, `skewY()`, `translate()`, `translate3d()`, `translateX()`, `translateY()`,
    and `translateZ()`. These functions are provided with the CSS3 IntelliSense features
    in Visual Studio; thus, when writing a `transform` property, you will be prompted
    to choose one of those functions.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '`transform`属性可用的函数列表包括`matrix()`、`matrix3d()`、`perspective()`、`rotate()`、`rotate3d()`、`rotateX()`、`rotateY()`、`rotateZ()`、`scale()`、`scale3d()`、`scaleX()`、`scaleY()`、`scaleZ()`、`skew()`、`skewX()`、`skewY()`、`translate()`、`translate3d()`、`translateX()`、`translateY()`和`translateZ()`。这些函数在Visual
    Studio的CSS3智能感知功能中提供，因此，在编写`transform`属性时，你会被提示选择其中一个函数。'
- en: Tip
  id: totrans-170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Visual Studio 2012 has enhanced support for CSS with features such as Regions,
    IntelliSense, vendor prefixes, and built-in snippets, thereby making it very easy
    and convenient to develop apps for Windows 8 using HTML5 and CSS.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio 2012 通过提供如 Regions、IntelliSense、供应商前缀和内置片段等特性，增强了对 CSS 的支持，从而使得使用
    HTML5 和 CSS 开发 Windows 8 应用变得非常简单和方便。
- en: Introducing media queries
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍媒体查询
- en: Your Windows 8 app should have a fluid and responsive UI, as the same app will
    be downloaded and opened either on a tablet, a PC with a large monitor, or a phone.
    Your app should adapt to the different view states (full screen portrait or landscape,
    filled or snapped) and display accordingly. It should look good and function well
    when the users flip the screen between portrait and landscape, when they zoom,
    when they snap the app, and so on. Too much stuff to look out for, you might say?
    Worry not, because if you are developing using a JavaScript app, the answer to
    all your concerns is **CSS Media Queries**!
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 你的 Windows 8 应用应该具有流畅和响应式的用户界面，因为同一个应用将会在平板电脑、带有大型显示器的 PC 或手机上下载和打开。你的应用应该适应不同的视图状态（全屏纵向或横向、填充或吸附），并相应显示。当用户在纵向和横向之间翻转屏幕、缩放、吸附应用时，应用应该看起来不错且功能良好。要关注的东西太多，你可能会说？不用担心，因为如果你正在使用
    JavaScript 应用进行开发，所有你的担忧的答案就是**CSS 媒体查询**！
- en: 'By using CSS media queries, you can manage the changes to the layout by easily
    defining different styles to apply to the HTML elements in your app, depending
    on the view state and size of the current media. You can use a separate media
    query to tailor for each view state, or you can combine media queries to apply
    the same set of styles to multiple view states. The basic syntax of a media query
    is as follows:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用 CSS 媒体查询，你可以通过轻松定义不同的样式来管理当前媒体的大小和视图状态对布局的影响，这些样式将应用于你的应用中的 HTML 元素。你可以为每个视图状态定义一个单独的媒体查询，或者可以将媒体查询组合起来，将同一组样式应用于多个视图状态。媒体查询的基本语法如下：
- en: '[PRE38]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'It is a logical expression that is either `true` or `false`, and consists of
    the following:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 它是一个逻辑表达式，要么是 `true`，要么是 `false`，并且由以下内容组成：
- en: '**@media**: It is a keyword that indicates a media query'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**@media**：这是一个指示媒体查询的关键字。'
- en: '**MediaType**: It is used to specify the type of media we are targeting; it
    can have one of the following values: `screen` for computer screens, `print` for
    documents viewed in print mode, and `all` for all devices'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**媒体类型**：它用于指定我们正在针对的媒体类型，可以有以下值之一：`screen` 用于计算机屏幕，`print` 用于以打印模式查看的文档，`all`
    用于所有设备。'
- en: '**TargetMediaProperty**: It is used to create more specific queries by adding
    conditions such as orientation and size'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**目标媒体属性**：通过添加如方向和大小等条件，它用于创建更具体的查询。'
- en: '**MediaRule**: It is used to specify one or more style rules that will be applied
    in case the media query is evaluated to `true`'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**媒体规则**：它用于指定在媒体查询评估为 `true` 时将应用的一个或多个样式规则。'
- en: 'A simple example would look like the following:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的例子如下：
- en: '[PRE39]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The preceding media query will check whether the medium is a screen and the
    width of window does not exceed 400 pixels. If `true`, it will apply the orange
    background color to the body element.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的媒体查询将检查媒体是否是屏幕，且窗口的宽度不超过 400 像素。如果是 `true`，它将把橙色背景颜色应用到 body 元素上。
- en: 'The following code snippet checks for the orientation:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段检查方向：
- en: '[PRE40]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'We can also include the Microsoft-specific vendor property `-ms-view-state`
    to check for different view states that the app can handle. For example:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以包含 Microsoft 特定的供应商属性 `-ms-view-state` 以检查应用可以处理的不同的视图状态。例如：
- en: '[PRE41]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Summary
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we tried to cover and learn as much as possible from the new
    and rich CSS3 features and describe which ones are available for us when developing
    apps for Windows 8\. We looked in detail at the CSS selectors and learned to use
    them to filter the DOM elements according to our need. We learned about new layout
    techniques using the Grid and Flexbox display properties.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们尝试涵盖并从新的丰富的 CSS3 特性中学到尽可能多的内容，并描述在开发 Windows 8 应用时哪些是可用的。我们详细地查看了 CSS
    选择器，并学会了根据我们的需要使用它们来过滤 DOM 元素。我们学习了使用 Grid 和 Flexbox 显示属性的新布局技术。
- en: We saw what magic we can do with the animation and transform properties, and
    got to have a look at the power of media queries to help us build a responsive
    layout. In short, CSS3 is a wonderland and you will need to get familiar with
    its features in order to harness all its powers.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到了动画和变换属性所能带来的魔法，也初步了解了媒体查询的强大，它能帮助我们构建响应式布局。简而言之，CSS3就是一个奇妙的领域，你需要熟悉其特性才能充分利用它的力量。
- en: In the next chapter, we will go over the main features provided by the Windows
    Library for JavaScript, which is the backbone of the Windows Store app that is
    built using JavaScript.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将学习Windows库为JavaScript提供的主要功能，这是使用JavaScript构建的Windows商店应用的骨架。
