- en: Chapter 7. ECMAScript 6
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章 ECMAScript 6
- en: So far, we have taken a detailed tour of the JavaScript programming language.
    I am sure that you must have gained significant insight into the core of the language.
    What we saw so far was as per the **ECMAScript** **5** (**ES5**) standards. **ECMAScript
    6** (**ES6**) or **ECMAScript 2015** (**ES2015**) is the latest version of the
    ECMAScript standard. This standard is evolving and the last round of modifications
    was done in June, 2015\. ES2015 is significant in its scope and the recommendations
    of ES2015 are being implemented in most JavaScript engines. This is great news.
    ES6 introduces a huge number of features that add syntactic forms and helpers
    that enrich the language significantly. The pace at which ECMAScript standards
    keep evolving makes it a bit difficult for browsers and JavaScript engines to
    support new features. It is also a practical reality that most programmers have
    to write code that can be supported by older browsers. The notorious Internet
    Explorer 6 was once the most widely used browser in the world. To make sure that
    your code is compatible with the most number of browsers is a daunting task. So,
    while you want to jump to the next set of awesome ES6 features, you will have
    to consider the fact that several ES6 features may not be supported by the most
    popular of browsers or JavaScript frameworks.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经对JavaScript编程语言进行了详细的了解。我相信您一定对语言的核心有了深刻的了解。到目前为止，我们所了解的都是按照**ECMAScript**
    **5**（**ES5**）标准进行的。**ECMAScript 6**（**ES6**）或**ECMAScript 2015**（**ES2015**）是ECMAScript标准的最新版本。这个标准在不断发展，最后一次修改是在2015年6月。ES2015在其范围和推荐方面都具有重要意义，并且ES2015的推荐正在大多数JavaScript引擎中得到实施。这对我们来说是个好消息。ES6引入了大量的新特性和帮助器，这些新特性和帮助器极大地丰富了语言。ECMAScript标准的快速发展使得浏览器和JavaScript引擎支持新特性变得有些困难。同时，大多数程序员实际上需要编写可以在旧浏览器上运行的代码。臭名昭著的Internet
    Explorer 6曾经是世界上使用最广泛的浏览器。确保您的代码与尽可能多的浏览器兼容是一项艰巨的任务。因此，虽然您想使用ES6下一组酷炫的特性，但您必须考虑这样一个事实：许多ES6特性可能不被最流行的浏览器或JavaScript框架支持。
- en: This may look like a dire scenario, but things are not that dark. **Node.js**
    uses the latest version of the V8 engine that supports majority of ES6 features.
    Facebook's **React** also supports them. Mozilla Firefox and Google Chrome are
    two of the most used browsers today and they support a majority of ES6 features.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来可能是一个糟糕的情况，但事情并没有那么糟糕。**Node.js**使用支持大多数ES6特性的最新版V8引擎。Facebook的**React**也支持它们。Mozilla
    Firefox和Google Chrome是目前使用最广泛的两种浏览器，它们支持大多数ES6特性。
- en: To avoid such pitfalls and unpredictability, certain solutions have been proposed.
    The most useful among these are polyfills/shims and transpilers.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免这些陷阱和不可预测性，提出了一些解决方案。这些解决方案中最有用的是polyfills/shims和转译器。
- en: Shims or polyfills
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Shims或polyfills
- en: Polyfills (also known as shims) are patterns to define behavior from a new version
    in a compatible form supported by an older version of the environment. There's
    a great collection of ES6 shims called **ES6 shim** ([https://github.com/paulmillr/es6-shim/](https://github.com/paulmillr/es6-shim/));
    I would highly recommend a study of these shims. From the ES6 shim collection,
    consider the following example of a shim.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Polyfills（也称为shims）是一种定义新版本环境中兼容旧版本环境的行为的模式。有一个很棒的ES6 shims集合叫做**ES6 shim**（[https://github.com/paulmillr/es6-shim/](https://github.com/paulmillr/es6-shim/)）；我强烈建议您研究这些shims。从ES6
    shim集合中，考虑以下shim的示例。
- en: 'The `Number.isFinite()` method of the ECMAScript 2015 (ES6) standard determines
    whether the passed value is a finite number. The equivalent shim for it would
    look something as follows:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 根据ECMAScript 2015（ES6）标准，`Number.isFinite()`方法用于确定传递的值是否是一个有限数字。它的等效shim可能如下所示：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The shim first checks if the `Number.isFinite()` method is available; if not,
    it *fills* it up with an implementation. This is a pretty nifty technique to fill
    in gaps in specifications. Shims are constantly upgraded with newer features and,
    hence, it is a sound strategy to keep the most updated shims in your project.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这个shim首先检查`Number.isFinite()`方法是否可用；如果不可用，则用实现来*填充*它。这是一种非常巧妙的技巧，用于填补规范中的空白。shims不断升级，加入新特性，因此，在项目中保留最新版本的shims是一个明智的策略。
- en: Note
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `endsWith()` polyfill is described in detail at [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith).
    `String.endsWith()` is part of ES6 but can be polyfilled easily for pre-ES6 environments.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '`endsWith()` polyfill 的详细说明可以在 [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith)
    找到。`String.endsWith()` 是 ES6 的一部分，但可以很容易地为 pre-ES6 环境进行 polyfill。'
- en: Shims, however, cannot polyfill syntactical changes. For this, we can consider
    transpilers as an option.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，shims 不能 polyfill 语法变化。为此，我们可以考虑转译器作为一个选项。
- en: Transpilers
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 转译器
- en: Transpiling is a technique that combines both compilation and transformation.
    The idea is to write ES6-compatible code and use a tool that transpiles this code
    into a valid and equivalent ES5 code. We will be looking at the most complete
    and popular transpiler for ES6 called **Babel** ([https://babeljs.io/](https://babeljs.io/)).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 转译是一种结合了编译和转换的技术。想法是写 ES6 兼容的代码，并使用一个将这种代码转译成有效且等效的 ES5 代码的工具。我们将探讨最完整且流行的 ES6
    转译器，名为 **Babel** ([https://babeljs.io/](https://babeljs.io/)）。
- en: Babel can be used in various ways. You can install it as a node module and invoke
    it from the command line or import it as a script in your web page. Babel's setup
    is exhaustive and well-documented at [https://babeljs.io/docs/setup/](https://babeljs.io/docs/setup/).
    Babel also has a great **Read-Eval-Print-Loop** (**REPL**). We will Babel REPL
    for most of the examples in this chapter. An in-depth understanding of various
    ways in which Babel can be used is out of the scope of this book. However, I would
    urge you to start using Babel as part of your development workflow.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Babel 可以用多种方式使用。你可以把它安装为 node 模块，从命令行调用它，或者在你的网页中导入它作为一个脚本。Babel 的设置非常全面且文档齐全，详情请查看
    [https://babeljs.io/docs/setup/](https://babeljs.io/docs/setup/)。Babel 还有一个很棒的
    **Read-Eval-Print-Loop** (**REPL**)。在本章中，我们将使用 Babel REPL 来进行大多数示例。深入理解 Babel
    可以用的各种方式超出了本书的范围。然而，我建议你开始将 Babel 作为你开发工作流程的一部分来使用。
- en: We will cover the most important part of ES6 specifications in this chapter.
    You should explore all the features of ES6 if possible and make them part of your
    development workflow.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章覆盖 ES6 规范的最重要部分。如果可能的话，你应该探索 ES6 的所有特性，并让它们成为你开发工作流程的一部分。
- en: ES6 syntax changes
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ES6 语法变化
- en: ES6 brings in significant syntactic changes to JavaScript. These changes need
    careful study and some getting used to. In this section, we will study some of
    the most important syntax changes and see how you can use Babel to start using
    these newer constructs in your code right away.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: ES6 为 JavaScript 带来了重大的语法变化。这些变化需要仔细学习和适应。在本节中，我们将学习一些最重要的语法变化，并了解如何使用 Babel
    立即在你的代码中使用这些新的构造。
- en: Block scoping
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 块级作用域
- en: 'We discussed earlier that the variables in JavaScript are function-scoped.
    Variables created in a nested scope are available to the entire function. Several
    programming languages provide you with a default block scope where any variable
    declared within a block of code (usually delimited by `{}`) is scoped (available)
    only within this block. To achieve a similar block scope in JavaScript, a prevalent
    method is to use **immediately-invoked function expressions** (**IIFE**). Consider
    the following example:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前讨论过，JavaScript 中的变量是函数作用域的。在嵌套作用域中创建的变量对整个函数都是可用的。几种编程语言为你提供了一个默认的块作用域，其中在任何代码块（通常由
    `{}` 限定）中声明的变量（可用）仅限于这个块。为了在 JavaScript 中实现类似的块作用域，一个普遍的方法是使用立即调用函数表达式（**IIFE**）。考虑以下示例：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Using the IIFE, we are creating a block scope for the `a` variable. When a
    variable is declared in the IIFE, its scope is restricted within the function.
    This is the traditional way of simulating the block scope. ES6 supports block
    scoping without using IIFEs. In ES6, you can enclose any statement(s) in a block
    defined by `{}`. Instead of using `var`, you can declare a variable using `let`
    to define the block scope. The preceding example can be rewritten using ES6 block
    scopes as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 IIFE，我们为 `a` 变量创建了一个块作用域。当在 IIFE 中声明一个变量时，它的作用域被限制在函数内部。这是模拟块作用域的传统方式。ES6
    支持不使用 IIFE 的块作用域。在 ES6 中，你可以用 `{}` 定义的块来包含任何语句（或语句）。用 `var` 声明变量，你可以使用 `let` 来定义块作用域。前一个示例可以用
    ES6 块作用域重写如下：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Using standalone brackets `{}` may seem unusual in JavaScript, but this convention
    is fairly common to create a block scope in many languages. The block scope kicks
    in other constructs such as `if { }` or `for (){ }` as well.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中使用独立的方括号`{}`可能看起来很奇怪，但这种约定在许多语言中用来创建块级作用域是非常普遍的。块级作用域同样适用于其他构造，比如`if
    { }`或`for (){ }`。
- en: 'When you use a block scope in this way, it is generally preferred to put the
    variable declaration on top of the block. One difference between variables declared
    using `var` and `let` is that variables declared with `var` are attached to the
    entire function scope, while variables declared using `let` are attached to the
    block scope and they are not initialized until they appear in the block. Hence,
    you cannot access a variable declared with `let` earlier than its declaration,
    whereas with variables declared using `var`, the ordering doesn''t matter:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当你以这种方式使用块级作用域时，通常最好将变量声明放在块的最顶部。`var`和`let`声明的变量之间的一个区别是，用`var`声明的变量附着在整个函数作用域上，而用`let`声明的变量附着在块级作用域上，并且在块中出现之前它们不会被初始化。因此，你不能在声明之前访问用`let`声明的变量，而对于用`var`声明的变量，顺序并不重要：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'One specific use of `let` is in for loops. When we use a variable declared
    using `var` in a for loop, it is created in the global or parent scope. We can
    create a block-scoped variable in the for loop scope by declaring a variable using
    `let`. Consider the following example:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`let`的一个特定用途是在for循环中。当我们使用`var`声明一个变量在for循环中时，它是在全局或父作用域中创建的。我们可以在for循环作用域中通过使用`let`声明一个变量来创建一个块级作用域的变量。考虑以下示例：'
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As `i` is created using `let`, it is scoped in the `for` loop. You can see that
    the variable is not available outside the scope.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`i`是通过`let`创建的，它在`for`循环中是有作用域的。你可以看到，这个变量在作用域之外是不可用的。
- en: 'One more use of block scopes in ES6 is the ability to create constants. Using
    the `const` keyword, you can create constants in the block scope. Once the value
    is set, you cannot change the value of such a constant:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在ES6中，块级作用域的另一个用途是创建常量。使用`const`关键字，你可以在块级作用域中创建常量。一旦值被设置，你就无法改变这样一个常量的值：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: A constant has to be initialized while being declared. The same block scope
    rules apply to functions also. When a function is declared inside a block, it
    is available only within that scope.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 常量必须在声明时初始化。同样的块级作用域规则也适用于函数。当一个函数在块内部声明时，它只能在那个作用域内使用。
- en: Default parameters
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 默认参数
- en: 'Defaulting is very common. You always set some default value to parameters
    passed to a function or variables that you initialize. You may have seen code
    similar to the following:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 默认值是非常常见的。你总是为传递给函数的参数或你初始化的变量设置一些默认值。你可能见过类似下面的代码：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here, we are using `||` (the OR operator) to default variables `a` and `b`
    to `0` if no value was supplied when this function was invoked. With ES6, you
    have a standard way of defaulting function arguments. The preceding example can
    be rewritten as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用`||`（或运算符）来默认变量`a`和`b`如果没有在调用函数时提供值，则默认为`0`。在ES6中，你有了一种标准的默认函数参数的方法。之前的示例可以重写如下：
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You can pass any valid expression or function call as part of the default parameter
    list.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将任何有效的表达式或函数调用作为默认参数列表的一部分传递。
- en: Spread and rest
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 展开和剩余
- en: 'ES6 has a new operator, `…`. Based on how it is used, it is called either `spread`
    or `rest`. Let''s look at a trivial example:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: ES6有一个新的操作符，`…`。根据它的使用方式，它被称为`展开`或`剩余`。让我们看一个简单的例子：
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'What''s happening here is that when you add `…` before an array (or an iterable)
    it *spreads* the element of the array in individual variables in the function
    parameters. The `a` and `b` function parameters were assigned two values from
    the array when it was spread out. Extra parameters are ignored while spreading
    an array:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这里发生的事情是，当你在数组（或可迭代对象）前加上`…`时，它*展开*了数组中的元素，将其分别赋值给函数参数中的独立变量。当数组被展开时，`a`和`b`这两个函数参数被赋予了数组中的两个值。在展开数组时，会忽略多余的参数：
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This would still print `1` and `2` because there are only two functional parameters
    available. Spreads can be used in other places also, such as array assignments:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这仍然会打印`1`和`2`，因为这里只有两个功能参数可用。展开也可以用在其他地方，比如数组赋值：
- en: '[PRE10]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'There is another use of the `…` operator that is the very opposite of the one
    that we just saw. Instead of spreading the values, the same operator can gather
    them into one:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`…`操作符还有一个与我们刚才看到完全相反的用途。不是展开值，而是用同一个操作符将它们聚集到一起：'
- en: '[PRE11]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In this case, the variable `b` takes the *rest* of the values. The `a` variable
    took the first value as `1` and `b` took the rest of the values as an array.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，变量`b`取剩余的值。变量`a`取第一个值作为`1`，变量`b`取剩余的值作为一个数组。
- en: Destructuring
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解构
- en: 'If you have worked on a functional language such as **Erlang**, you will relate
    to the concept of pattern matching. Destructuring in JavaScript is something very
    similar. Destructuring allows you to bind values to variables using pattern matching.
    Consider the following example:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在函数式语言如**Erlang**上工作过，你会理解模式匹配的概念。JavaScript中的解构与之一致。解构允许你使用模式匹配将值绑定到变量。考虑以下示例：
- en: '[PRE12]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We are assigning two variables with the help of array destructuring:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用数组解构来分配两个变量：
- en: '[PRE13]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'As shown in the preceding example, we want the pattern to match when the first
    value is assigned to the first variable (`start`) and the second value is assigned
    to the second variable (`end`). Consider the following snippet to see how the
    destructuring of array elements works:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所示的例子，我们希望模式在第一个值分配给第一个变量（`start`）和第二个值分配给第二个变量（`end`）时匹配。考虑以下片段，看看数组元素解构是如何工作的：
- en: '[PRE14]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Let''s discuss how objects'' destructuring works. Let''s say that you have
    a function `f` that returns an object as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论一下对象解构是如何工作的。假设你有一个返回对象的函数`f`，它按照如下方式返回：
- en: '[PRE15]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'When we destructure the object being returned by this function, we can use
    the similar syntax as we saw earlier; the difference is that we use `{}` instead
    of `[]`:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们解构这个函数返回的对象时，我们可以使用我们之前看到的类似语法；不同的是，我们使用`{}`而不是`[]`：
- en: '[PRE16]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Similar to arrays, we use pattern matching to assign variables to their corresponding
    values returned by the function. There is an even shorter way of writing this
    if you are using the same variable as the one being matched. The following example
    would do just fine:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 与数组类似，我们使用模式匹配将变量分配给函数返回的相应值。如果你使用与匹配的变量相同的变量，这种写法会更短。下面的例子恰到好处：
- en: '[PRE17]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'However, you would mostly be using a different variable name from the one being
    returned by the function. It is important to remember that the syntax is *source:
    destination* and not the usual *destination: source*. Carefully observe the following
    example:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，你通常会使用与函数返回的变量不同的变量名。重要的是要记住，语法是*源：目标*，而不是通常的*目标：源*。仔细观察下面的例子：
- en: '[PRE18]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This is the opposite of the *target = source* way of assigning values and hence
    will take some time in getting used to.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这是*目标 = 源*赋值方式的相反，因此需要一些时间来适应。
- en: Object literals
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对象字面量
- en: 'Object literals are everywhere in JavaScript. You would think that there is
    no scope of improvement there. However, ES6 wants to improve this too. ES6 introduces
    several shortcuts to create a concise syntax around object literals:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 对象字面量在JavaScript中无处不在。你会认为没有改进的余地。然而，ES6也想改进这一点。ES6引入了几种快捷方式，以围绕对象字面量创建紧凑的语法：
- en: '[PRE19]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'If you intend to use the same property name as the variable that you are assigning,
    you can use the concise property notation of ES6:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打算使用与分配变量相同的属性名，你可以使用ES6的紧凑属性表示法：
- en: '[PRE20]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Similarly, you are assigning functions to properties as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 同样地，你是这样给属性分配函数的：
- en: '[PRE21]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Instead of the preceding lines, you can say the following:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 与其前的行相比，你可以这样说：
- en: '[PRE22]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Template literals
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模板字面量
- en: 'I am sure you have done things such as the following:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我相信你肯定做过如下的事情：
- en: '[PRE23]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This is a very common way of replacing variable values to form a string literal.
    ES6 provides you with a new type of string literal using the backtick ([PRE24]
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种非常常见的替换变量值以形成字符串字面量的方法。ES6为您提供了一种新的字符串字面量类型，使用反引号（`）：
- en: function SuperLogger(level, clazz, msg){
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 SuperLogger(level, clazz, msg){
- en: 'console.log(`${level} : Exception happened in class: ${clazz} - Exception :
    {$msg}`);'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 'console.log(`${level} : 在类: ${clazz} 中发生异常 - 异常 : {$msg}`);'
- en: '}'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE25]` around a string literal. Within this literal, any expression of the
    `${..}` form is parsed immediately. This parsing is called interpolation. While
    parsing, the variable''s value replaces the placeholder within `${}`. The resulting
    string is just a normal string with the placeholders replaced with actual variable
    values.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '` around一个字符串字面量。在这个字面量内部，任何`${..}`形式的表达式都会立即解析。这种解析称为插值。在解析时，变量的值替换了`${}`内的占位符。结果字符串只是普通字符串，占位符被实际变量值替换。'
- en: 'With string interpolation, you can split a string into multiple lines also,
    as shown in the following code (very similar to Python):'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 使用字符串插值，你也可以将字符串拆分为多行，如下面的代码所示（与Python非常相似）：
- en: '[PRE26]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'You can use function calls or valid JavaScript expressions as part of the string
    interpolation:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用函数调用或有效的JavaScript表达式作为字符串插值的一部分：
- en: '[PRE27]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The final variation of the template strings is called **tagged template string**.
    The idea is to modify the template string using a function. Consider the following
    example:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 模板字符串的最后一种变体称为**带标签的模板字符串**。想法是用一个函数来修改模板字符串。考虑以下示例：
- en: '[PRE28]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The strangest part is when we call the `emmy` function with the template literal.
    It's not a traditional function call syntax. We are not writing `emmy()`; we are
    just *tagging* the literal with the function. When this function is called, the
    first argument is an array of all the plain strings (the string between interpolated
    expressions). The second argument is the array where all the interpolated expressions
    are evaluated and stored.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们用模板字面量调用`emmy`函数时，最奇怪的是这并不是传统函数调用的语法。我们不是写`emmy()`；我们只是在标记字面量。当这个函数被调用时，第一个参数是所有普通字符串（插值表达式之间的字符串）的数组。第二个参数是所有插值表达式被求值和存储的数组。
- en: 'Now what this means is that the tag function can actually change the resulting
    template tag:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着标签函数实际上可以改变结果模板标签：
- en: '[PRE29]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: As you can see, we modified the value of the discount in the tag function and
    returned the modified values.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们在标签函数中修改了折扣的值并返回了修改后的值。
- en: Maps and Sets
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 映射和集合
- en: 'ES6 introduces four new data structures: **Map**, **WeakMap**, **Set**, and
    **WeakSet**. We discussed earlier that objects are the usual way of creating key-value
    pairs in JavaScript. The disadvantage of objects is that you cannot use non-string
    values as keys. The following snippets demonstrate how Maps are created in ES6:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: ES6引入了四种新的数据结构：**Map**、**WeakMap**、**Set**和**WeakSet**。我们之前讨论过，对象是JavaScript中创建键值对的常用方式。对象的缺点是你不能使用非字符串值作为键。以下片段演示了如何在ES6中创建映射：
- en: '[PRE30]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'You can initialize the map while declaring it:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在声明它时初始化映射：
- en: '[PRE31]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'If you want to iterate over the entries in the Map, you can use the `entries()`
    function that will return you an iterator. You can iterate through all the keys
    using the `keys()` function and you can iterate through the values of the Map
    using the `values()` function:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想遍历映射中的条目，你可以使用`entries()`函数，它将返回一个迭代器。你可以使用`keys()`函数遍历所有键，使用`values()`函数遍历映射的值：
- en: '[PRE32]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: A variation of JavaScript Maps is a WeakMap—a WeakMap does not prevent its keys
    from being garbage-collected. Keys for a WeakMap must be objects and the values
    can be arbitrary values. While a WeakMap behaves in the same way as a normal Map,
    you cannot iterate through it and you can't clear it. There are reasons behind
    these restrictions. As the state of the Map is not guaranteed to remain static
    (keys may get garbage-collected), you cannot ensure correct iteration.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript映射的一种变体是WeakMap——WeakMap不阻止其键被垃圾回收。WeakMap的键必须是对象，而值可以是任意值。虽然WeakMap的行为与普通映射相同，但你不能遍历它，也不能清空它。这些限制背后有原因。由于映射的状态不能保证保持静态（键可能被垃圾回收），你不能确保正确的遍历。
- en: There are not many cases where you may want to use WeakMap. Most uses of a Map
    can be written using normal Maps.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 使用WeakMap的情况并不多。大多数映射的使用可以用普通映射来实现。
- en: 'While Maps allow you to store arbitrary values, Sets are a collection of unique
    values. Sets have similar methods as Maps; however, `set()` is replaced with `add()`,
    and the `get()` method does not exist. The reason that the `get()` method is not
    there is because a Set has unique values, so you are interested in only checking
    whether the Set contains a value or not. Consider the following example:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然映射允许你存储任意值，但集合是唯一值的集合。映射和集合有类似的方法；然而，`set()`被替换为`add()`，而`get()`方法不存在。`get()`方法不存在的原因是因为集合有唯一值，所以你只关心集合是否包含一个值。考虑以下示例：
- en: '[PRE33]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The `keys()` and `values()` iterators both return a list of the unique values
    in the Set. The `entries()` iterator yields a list of entry arrays, where both
    items of the array are the unique Set values. The default iterator for a Set is
    its `values()` iterator.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`keys()`和`values()`迭代器都返回集合中唯一值的列表。`entries()`迭代器生成一个条目数组列表，数组中的两个项目都是集合中的唯一值。集合的默认迭代器是其`values()`迭代器。'
- en: Symbols
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 符号
- en: 'ES6 introduces a new data type called Symbol. A Symbol is guaranteed to be
    unique and immutable. Symbols are usually used as an identifier for object properties.
    They can be considered as uniquely generated IDs. You can create Symbols with
    the `Symbol()` factory method—remember that this is not a constructor and hence
    you should not use a `new` operator:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: ES6引入了一种新数据类型叫做Symbol。Symbol是保证唯一且不可变的。Symbol通常用作对象属性的标识符。它们可以被认为是唯一生成的ID。你可以使用`Symbol()`工厂方法创建Symbols——记住这不是一个构造函数，因此你不应该使用`new`操作符：
- en: '[PRE34]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Unlike strings, Symbols are guaranteed to be unique and hence help in preventing
    name clashes. With Symbols, we have an extensibility mechanism that works for
    everyone. ES6 comes with a number of predefined built-in Symbols that expose various
    meta behaviors on JavaScript object values.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 与字符串不同，Symbols保证是唯一的，因此有助于防止名称冲突。有了Symbols，我们有一个对每个人都有效的扩展机制。ES6带有一些预定义的内置Symbols，它们揭示了JavaScript对象值的各种元行为。
- en: Iterators
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 迭代器
- en: 'Iterators have been around in other programming languages for quite some time.
    They give convenience methods to work with collections of data. ES6 introduces
    iterators for the same use case. ES6 iterators are objects with a specific interface.
    Iterators have a `next()` method that returns an object. The returning object
    has two properties—`value` (the next value) and `done` (indicates whether the
    last result has been reached). ES6 also defines an `Iterable` interface, which
    describes objects that must be able to produce iterators. Let''s look at an array,
    which is an iterable, and the iterator that it can produce to consume its values:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 迭代器在其他编程语言中已经存在很长时间了。它们提供了方便的方法来处理数据集合。ES6引入了迭代器来处理同样的用例。ES6的迭代器是一个具有特定接口的对象。迭代器有一个`next()`方法，它返回一个对象。返回的对象有两个属性——`value`（下一个值）和`done`（表示是否已经达到最后一个结果）。ES6还定义了一个`Iterable`接口，描述了必须能够产生迭代器的对象。让我们看看一个数组，它是一个可迭代的，以及它能够产生的迭代器来消费其值：
- en: '[PRE35]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'As you can see, we are accessing the array''s iterator via `Symbol.iterator()`
    and calling the `next()` method on it to get each successive element. Both `value`
    and `done` are returned by the `next()` method call. When you call `next()` past
    the last element in the array, you get an undefined value and `done: true`, indicating
    that you have iterated over the entire array.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '正如你所见，我们是通过`Symbol.iterator()`访问数组的迭代器，并在其上调用`next()`方法来获取每个连续元素。`next()`方法调用返回`value`和`done`两者。当你在数组的最后一个元素之后调用`next()`时，你会得到一个未定义的值和`done:
    true`，这表明你已经遍历了整个数组。'
- en: For..of loops
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对于..of循环
- en: ES6 adds a new iteration mechanism in form of the `for..of` loop, which loops
    over the set of values produced by an iterator.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: ES6添加了一种新的迭代机制，形式为`for..of`循环，它遍历由迭代器产生的值集合。
- en: The value that we iterate over with `for..of` is an iterable.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们遍历的`for..of`值是一个可迭代的。
- en: 'Let''s compare `for..of` to `for..in`:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们比较一下`for..of`和`for..in`：
- en: '[PRE36]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: As you can see, using the `for..in` loop, you can iterate over indexes of the
    `list` array, while the `for..of` loop lets you iterate over the values stored
    in the `list` array.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，使用`for..in`循环，你可以遍历`list`数组的索引，而`for..of`循环让你遍历存储在`list`数组中的值。
- en: Arrow functions
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 箭头函数
- en: 'One of the most interesting new parts of ECMAScript 6 is arrow functions. Arrow
    functions are, as the name suggests, functions defined with a new syntax that
    uses an *arrow* (`=>`) as part of the syntax. Let''s first see how arrow functions
    look:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: ECMAScript 6最有趣的新特性之一是箭头函数。箭头函数，正如其名称所暗示的，是使用一种新语法定义的函数，该语法使用*箭头*（`=>`）作为语法的一部分。让我们首先看看箭头函数看起来如何：
- en: '[PRE37]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The arrow function definition consists of a parameter list (of zero or more
    parameters and surrounding `( .. )` if there's not exactly one parameter), followed
    by the `=>` marker, which is followed by a function body.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 箭头函数定义包括参数列表（零个或多个参数，如果恰好有一个参数则周围是`( .. )`），后面跟着`=>`标记，后面跟着函数体。
- en: 'The body of the function can be enclosed by `{ .. }` if there''s more than
    one expression in the body. If there''s only one expression, and you omit the
    surrounding `{ .. }`, there''s an implied return in front of the expression. There
    are several variations of how you can write arrow functions. The following are
    the most commonly used:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如果函数体中有多个表达式，可以用`{ .. }`括起来。如果只有一个表达式，并且省略了周围的`{ .. }`，则在表达式前面有一个隐式的返回。你可以以几种不同的方式编写箭头函数。以下是最常用的几种：
- en: '[PRE38]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: It is important to remember that all the characteristics of a normal function
    parameter are available to arrow functions, including default values, destructuring,
    and rest parameters.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要记住，所有正常函数参数的特征都适用于箭头函数，包括默认值、解构和剩余参数。
- en: 'Arrow functions offer a convenient and short syntax, which gives your code
    a very *functional programming* flavor. Arrow functions are popular because they
    offer an attractive promise of writing concise functions by dropping function,
    return, and { .. } from the code. However, arrow functions are designed to fundamentally
    solve a particular and common pain point with this-aware coding. In normal ES5
    functions, every new function defined its own value of `this` (a new object in
    case of a constructor, `undefined` in strict mode function calls, context object
    if the function is called as an *object method*, and so on). JavaScript functions
    always have their own `this` and this prevents you from accessing the `this` of,
    for example, a surrounding method from inside a callback. To understand this problem,
    consider the following example:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 箭头函数提供了一种方便且简洁的语法，给你的代码带来了非常*函数式编程*的风格。箭头函数之所以受欢迎，是因为它们通过从代码中删除function、return和{
    .. }，提供了编写简洁函数的吸引力。然而，箭头函数是为了根本解决与this相关的编程中的一个特定且常见痛点而设计的。在正常的ES5函数中，每个新定义的函数都定义了自己的`this`值（在构造函数中是一个新对象，在严格模式函数调用中是`undefined`，如果函数作为*对象方法*调用，则是上下文对象等）。JavaScript函数总是有自己的`this`，这阻止了你从回调内部访问例如周围方法中的`this`。为了理解这个问题，请考虑以下示例：
- en: '[PRE39]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'On the line marked with `3`, we are trying to get `this.str`, but the anonymous
    function also has its own `this`, which shadows `this` from the method from line
    `1`. To fix this in ES5, we can assign `this` to a variable and use the variable
    instead:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在标记为`3`的行上，我们试图获取`this.str`，但匿名函数也有自己的`this`，它遮蔽了从行`1`来的方法中的`this`。为了在ES5中修复这个问题，我们可以将`this`赋值给一个变量，然后使用这个变量：
- en: '[PRE40]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: On the line marked with `1`, we are assigning `this` to a variable, `that`,
    and in the anonymous function we are using the `that` variable, which will have
    a reference to `this` from the correct context.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在标记为`1`的行上，我们将`this`赋值给一个变量`that`，在匿名函数中我们使用`that`变量，它将引用正确上下文中的`this`。
- en: 'ES6 arrow functions have lexical `this`, meaning that the arrow functions capture
    the `this` value of the enclosing context. We can convert the preceding function
    to an equivalent arrow function as follows:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: ES6箭头函数具有词法`this`，这意味着箭头函数捕获了外层上下文的`this`值。我们可以如下将前面的函数转换为等效的箭头函数：
- en: '[PRE41]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Summary
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we discussed a few important features being added to the language
    in ES6\. It's an exciting collection of new language features and paradigms and,
    using polyfills and transpilers, you can start with them right away. JavaScript
    is an ever growing language and it is important to understand what the future
    holds. ES6 features make JavaScript an even more interesting and mature language.
    In the next chapter, we will dive deep into manipulating the browser's **Document
    Object Model** (**DOM**) and events using JavaScript with jQuery.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了几种重要特性，这些特性被添加到ES6语言中。这是一组令人兴奋的新语言特性和范式，并且，通过使用polyfills和transpilers，你可以立即开始使用它们。JavaScript是一种不断发展的语言，了解未来趋势非常重要。ES6特性使JavaScript成为一个更加有趣和成熟的语言。在下一章中，我们将深入研究使用jQuery和JavaScript操纵浏览器的**文档对象模型**（**DOM**）和事件。
