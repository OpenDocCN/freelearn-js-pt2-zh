- en: Chapter 6. Using JSON with CouchDB
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 6 章。使用 JSON 与 CouchDB 配合
- en: 'In the last chapter, we looked at using JSON with MongoDB, a popular NoSQL
    database. In this chapter, we continue in the same vein, showing you how to use
    JSON with CouchDB, another popular NoSQL database. Here, you''ll find recipes
    about:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们研究了如何使用 JSON 与 MongoDB 配合，MongoDB 是一个流行的 NoSQL 数据库。在本章中，我们继续这一主题，向您展示如何使用
    JSON 与 CouchDB 配合，CouchDB 又是另一个流行的 NoSQL 数据库。在这里，你会发现有关以下方面的食谱：
- en: Installing and setting up CouchDB and Cradle
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装和设置 CouchDB 和 Cradle
- en: Connecting to a CouchDB document using Node.js and Cradle
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Node.js 和 Cradle 连接到 CouchDB 文档
- en: Creating a CouchDB database using Node.js and Cradle
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Node.js 和 Cradle 创建 CouchDB 数据库
- en: Creating a document in CouchDB using Node.js and Cradle
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Node.js 和 Cradle 在 CouchDB 中创建文档
- en: Setting up a data view in CouchDB with Node.js and Cradle
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Node.js 和 Cradle 设置数据视图
- en: Searching for a document in CouchDB with Node.js and Cradle
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Node.js 和 Cradle 在 CouchDB 中搜索文档
- en: Updating a document in CouchDB with Node.js and Cradle
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Node.js 和 Cradle 在 CouchDB 中更新文档
- en: Deleting a document in CouchDB using Node.js and Cradle
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Node.js 和 Cradle 在 CouchDB 中删除文档
- en: Using REST to enumerate CouchDB records
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 REST 枚举 CouchDB 记录
- en: Using REST to search CouchDB
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 REST 搜索 CouchDB
- en: Using REST to upsert a document in CouchDB
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 REST 在 CouchDB 中更新或创建文档
- en: Using REST to delete a document in CouchDB
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 REST 在 CouchDB 中删除文档
- en: Introduction
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: CouchDB is a highly available, scalable document database. Like MongoDB, it
    is a NoSQL database; instead of organizing your data in tables related by IDs,
    you can place documents in the database. Unlike MongoDB, CouchDB has the interesting
    feature of *views*.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: CouchDB 是一个高可用性、可扩展的文档数据库。与 MongoDB 一样，它也是一个 NoSQL 数据库；不同的是，你不是将数据组织成通过 ID 相关联的表，而是将文档放入数据库中。与
    MongoDB 不同，CouchDB 有一个有趣的特性，即 *视图*。
- en: Documents you place in the DB with specific map and reduce functions that iterate
    across the data to provide specific views of the data by indexes that you can
    provide. Views are cached, making it easy to construct high-performance queries
    that return subsets of data or computed data-like reports.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 你将具有特定的 map 和 reduce 函数的文档放入数据库中，这些函数遍历数据以提供通过索引提供的特定数据视图。视图是缓存的，这使得构建高性能查询变得容易，这些查询返回数据子集或计算的数据（如报告）。
- en: The primary way you interact with CouchDB is via REST; even the Cradle driver
    we discuss in this chapter uses REST under the hood for document creation, updation,
    and deletion. You can also use REST for queries, either through document ID, or
    by converting an indexed query into a view.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你与 CouchDB 交互的主要方式是通过 REST 接口；即使在本章中讨论的 Cradle 驱动程序，也是利用 REST 接口在幕后进行文档的创建、更新和删除。你还可以用
    REST 接口进行查询，无论是通过文档 ID，还是将索引查询转换为视图。
- en: In this chapter, we examine how to integrate CouchDB with Node.js using the
    Cradle module and how to make REST queries of a CouchDB from the Web.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将研究如何使用 Cradle 模块将 CouchDB 与 Node.js 集成，以及如何从 Web 端对 CouchDB 进行 REST
    查询。
- en: Installing and setting up CouchDB and Cradle
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和设置 CouchDB 和 Cradle
- en: CouchDB comes as a click-and-run installer for major platforms.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: CouchDB 提供了主要平台的点击即可运行安装程序。
- en: How to do it…
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何进行…
- en: To begin, you first need to install the server. To do this, go to [http://couchdb.apache.org/](http://couchdb.apache.org/)
    and download the installer appropriate for your platform. Before installing Cradle,
    be sure to run the installer.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要安装服务器。为此，请访问 [http://couchdb.apache.org/](http://couchdb.apache.org/)
    并下载适合您平台的安装程序。在安装 Cradle 之前，一定要运行安装程序。
- en: 'Next, on a command line, run the following command to install Cradle:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在命令行上运行以下命令来安装 Cradle：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Finally, you need to enable cross-resource requests on the CouchDB server,
    to permit those requests on the Web. To do this, edit the `/etc/couchdb/default.ini`
    file, and change the following line:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你需要在 CouchDB 服务器上启用跨资源请求，以允许在 Web 上进行这些请求。为此，请编辑 `/etc/couchdb/default.ini`
    文件，并更改以下行：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'With the following line:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 以下行：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You also need to indicate which origin servers you''ll accept CORS requests
    from; to enable cross-resource requests for all domains, add the following line
    to `/etc/couchdb/default.ini` in the section labeled `[cors]`:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要指示你将接受 CORS 请求的哪些源服务器；要启用对所有域名的跨资源请求，请在 `/etc/couchdb/default.ini` 中 `[cors]`
    部分添加以下行：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If you want to be more specific, you can provide a comma-separated list of origin
    domains from which your HTML content and scripts are loaded.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要更具体一点，你可以提供一个由逗号分隔的域名列表，来自这些域名的 HTML 内容和脚本将被加载。
- en: Finally, you must start (or restart) the CouchDB server. On Windows, assuming
    you didn't install it as a service, go to the `bin` directory where you installed
    it and run `couchdb.bat`; on Linux and Mac OS X, kill and restart the CouchDB
    server process.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你必须启动（或重新启动）CouchDB 服务器。在 Windows 上，假设你没有将其作为服务安装，就去你安装它的 `bin` 目录下运行 `couchdb.bat`；在
    Linux 和 Mac OS X 上，杀死并重新启动 CouchDB 服务器进程。
- en: How it works…
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The Cradle module is a popular way to integrate CouchDB with Node.js, although
    if you prefer, you could just use Node.js's request module and make REST requests
    directly.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Cradle 模块是整合 CouchDB 和 Node.js 的流行方式，尽管如果你愿意，你也可以使用 Node.js 的 request 模块直接进行
    REST 请求。
- en: See also
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 也见
- en: For more information about CouchDB, see the Apache CouchDB wiki at [http://docs.couchdb.org/en/latest/contents.html](http://docs.couchdb.org/en/latest/contents.html).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 CouchDB 的更多信息，请参见 Apache CouchDB 维基百科上的页面：[http://docs.couchdb.org/en/latest/contents.html](http://docs.couchdb.org/en/latest/contents.html)。
- en: Connecting to a CouchDB database using Node.js and Cradle
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Node.js 和 Cradle 连接 CouchDB 数据库
- en: Although CouchDB provides a RESTful interface, you don't strictly need to make
    a database connection before using CouchDB; the Cradle module uses the notion
    of a connection to manage its internal state and there's still a connection object
    you need to create.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 CouchDB 提供了 RESTful 接口，但严格来说，在使用 CouchDB 之前并不需要一定要建立一个数据库连接；Cradle 模块使用连接的概念来管理其内部状态，你仍然需要创建一个连接对象。
- en: How to do it...
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 怎样做到…
- en: 'Here''s how to include the Cradle module in your Node.js application and initialize
    it, getting a handle to a particular database:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是如何在你的 Node.js 应用程序中包含 Cradle 模块并初始化它，获取对特定数据库的引用的方法：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: How it works…
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'This code first includes the Cradle module, and then creates a new Cradle `Connection`
    object, setting its database to the database `documents`. This initializes Cradle
    with the default CouchDB host (localhost) and port (5984). If you need to override
    the host or port, you can do so by passing the host and port as the first and
    second arguments to the `Connection` constructor, like this:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码首先包含了 Cradle 模块，然后创建了一个新的 Cradle `Connection` 对象，将其数据库设置为 `documents` 数据库。这初始化了
    Cradle，使其使用默认的 CouchDB 主机（localhost）和端口（5984）。如果你需要覆盖主机或端口，可以通过将主机和端口作为 `Connection`
    构造函数的第一个和第二个参数来这样做，像这样：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Creating a CouchDB database using Node.js and Cradle
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Node.js 和 Cradle 创建 CouchDB 数据库
- en: Before you can use a database in CouchDB, you must create it.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 CouchDB 中的数据库之前，你必须先创建它。
- en: How to do it...
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 怎样做到…
- en: 'Once you''ve obtained a handle to the database that you want to use, you should
    check to see whether it exists, and create it if it doesn''t:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你获得了你想要使用的数据库的句柄，你应该检查它是否存在，如果不存在，则创建它：
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How it works…
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The `exists` method checks to see whether a database exists, calling the callback
    you provide with an error if one occurred and a flag indicating whether or not
    the database exists. If the database doesn't exist, you create it using the `create`
    method.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`exists` 方法检查数据库是否存在，如果发生错误，调用你提供的回调函数，并带有一个指示数据库是否存在或不存在的标志。如果数据库不存在，你可以使用
    `create` 方法来创建它。'
- en: This is a common pattern for Cradle because the RESTful interface is, by nature,
    asynchronous. You'll pass the arguments to the method you want to perform and
    a callback function that the method invokes when it's complete.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 Cradle 的一个常见模式，因为 RESTful 接口本质上是非同步的。你会将你想要执行的方法的参数和回调函数传递给它。
- en: Tip
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: A common mistake that beginners make is to assume that you can call one of these
    methods without the callback function and then do something immediately that depends
    on the previous result. It won't work because the original operation hasn't taken
    place yet. Consider an insert and update on the same record. The insert completes
    asynchronously; if you try to do the update synchronously, there will be nothing
    to update!
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 初学者常犯的一个错误是认为可以调用这些方法而不带回调函数，然后立即执行一些依赖于之前结果的操作。这是行不通的，因为原始操作还没有发生。考虑对同一记录进行插入和更新。插入是异步完成的；如果你尝试同步执行更新，将没有东西可以更新！
- en: There's more…
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: If you want to destroy a database, you can do so using the `destroy` method,
    which also takes a callback function like create. This destroys all records in
    the database as you might imagine, so use it with caution!
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想销毁一个数据库，你可以使用 `destroy` 方法，它也接受一个回调函数，就像 create 一样。这会销毁数据库中的所有记录，就像你想象的那么彻底，所以要小心使用！
- en: Creating a document in CouchDB using Node.js and Cradle
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Node.js 和 Cradle 在 CouchDB 中创建文档
- en: The Cradle module provides the `save` method to save a new document to the database.
    You pass the document to save and a callback to invoke when the operation completes
    or fails.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Cradle 模块提供了`save`方法来将新文档保存到数据库中。你传递要保存的文档和一个当操作完成或失败时调用的回调函数。
- en: How to do it...
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Here''s how to save a simple record using `save`:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是如何使用`save`保存一个简单记录的方法：
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: How it works…
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'The save method returns a JavaScript object to your callback with fields for
    the newly created document IDs and an internal revision number, along with a field
    titled ok, which should be true. As you''ll see in the recipe titled *Updating
    a Record in CouchDB with Node.js*, you need both the revision of a document you
    store and the ID in order to update it; otherwise, you end up creating a new document
    or receiving a failure to save the record. An example result might look like this:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`save`方法返回一个 JavaScript 对象给你的回调函数，其中包含新创建文档的 ID 和一个内部修订号，以及一个名为 ok 的字段，该字段应该是
    true。正如你在标题为《使用 Node.js 在 CouchDB 中更新记录》的食谱中看到的，为了更新一个文档，你需要存储文档的修订版和 ID；否则，你最终会创建一个新的文档或记录保存失败。一个示例结果可能看起来像这样：'
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Setting up a data view in CouchDB with Node.js and Cradle
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何在 CouchDB 中使用 Node.js 和 Cradle 设置数据视图
- en: 'You can query CouchDB for documents by their ID, but of course, most of the
    time, you''ll want to issue more complex queries, such as matching a field in
    a record against a particular value. CouchDB lets you define *views* of your data
    that consist of an arbitrary key in a collection of objects and then the objects
    derived from the view. When you specify a view, you''re specifying two JavaScript
    functions: a `map` function that maps keys to items in your collection, and then
    an optional `reduce` function that iterates over the keys and values to create
    a final collection. In this recipe, we''ll use the map function of a view to create
    an index of records by a single field.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过它们的 ID 查询 CouchDB 的文档，但当然，大多数时候，你会希望发出更复杂的查询，比如将记录中的字段与特定值匹配。CouchDB 允许你定义*视图*，这些视图由集合中的任意键和从视图中派生的对象组成。当你指定一个视图时，你是在指定两个
    JavaScript 函数：一个`map`函数将键映射到集合中的项目，然后一个可选的`reduce`函数遍历键和值以创建最终集合。在本食谱中，我们将使用视图的`map`函数通过单个字段创建记录的索引。
- en: How to do it...
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Here''s how to add a simple view to the database using CouchDB:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是使用 CouchDB 为数据库添加一个简单视图的方法：
- en: '[PRE9]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This defines a single view for our database, the `byCall` view that consists
    of a map of call signs to documents in the database.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这为我们的数据库定义了一个单一视图，即`byCall`视图，它由一个呼号到数据库中文档的映射组成。
- en: How it works…
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Views are a powerful way to refer to documents in your database because you
    can construct arbitrarily simple or complex documents based on each document in
    the database.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 视图是一种强大的方法，可以引用数据库中的文档，因为你可以根据数据库中的每个文档构建任意简单或复杂的文档。
- en: Our example creates a single view, `byCall`, stored under the `views` directory
    (which is where you should put views) consisting of the call field of each record,
    and then the record is repeated. CouchDB defines the `emit` function to let you
    create pairings of keys for your view and view values; here, we use the `call`
    field as the key for each value and the document itself as the value. You could
    just as easily define a smaller subset of fields in a JavaScript object, or compute
    something across your JavaScript fields and emit that instead. You can define
    more than one view, each a field in the `views` field with a separate `map` function.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的示例创建了一个单一视图`byCall`，存储在`views`目录下（你应该把视图放在这里），由每个记录的呼号字段组成，然后重复记录。CouchDB
    定义了`emit`函数，让你为你的视图创建键值对；在这里，我们使用`call`字段作为每个值的关键字，文档本身作为值。你完全可以轻松地定义一个 JavaScript
    对象中的字段子集，或者在 JavaScript 字段上计算某物，并发出那个东西。你可以定义多个视图，每个视图在`views`字段中是一个单独的`map`函数。
- en: CouchDB caches views and updates them on demand as the database changes, storing
    the view data as B-trees, so updating and querying views are very fast at run
    time. As you'll see in the next example, searching a view for a specific key is
    as simple as passing the key to the view.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: CouchDB 缓存视图，并根据数据库的变化按需更新它们，将视图数据存储为 B-树，因此在运行时更新和查询视图非常快。正如你在下一个示例中看到的，搜索特定键的视图简单到只需将键传递给视图。
- en: Views are just documents in CouchDB, stored in a special location with functions
    instead of data values. Internally, CouchDB compiles the view's functions when
    it stores the view and runs them when there are changes such as insertions and
    deletions to the store.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 视图在CouchDB中只是存储在特定位置的文档，使用函数而不是数据值。内部实现上，CouchDB在存储视图时编译视图的函数，并在存储发生插入和删除等更改时运行它们。
- en: See also
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 也请参阅
- en: For more information on the CouchDB view concept, see the CouchDB wiki at [http://wiki.apache.org/couchdb/Introduction_to_CouchDB_views](http://wiki.apache.org/couchdb/Introduction_to_CouchDB_views)
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于CouchDB视图概念的更多信息，请参阅CouchDB维基百科中的[http://wiki.apache.org/couchdb/Introduction_to_CouchDB_views](http://wiki.apache.org/couchdb/Introduction_to_CouchDB_views)。
- en: CouchDB view API documentation at [http://wiki.apache.org/couchdb/HTTP_view_API](http://wiki.apache.org/couchdb/HTTP_view_API).
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CouchDB视图API文档在[http://wiki.apache.org/couchdb/HTTP_view_API](http://wiki.apache.org/couchdb/HTTP_view_API)。
- en: Searching for a document in CouchDB with Node.js and Cradle
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Node.js和Cradle在CouchDB中搜索文档
- en: Searching for a document in CouchDB is a matter of querying a specific view
    for a specific key. The Cradle module defines the `view` function to do this.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在CouchDB中搜索文档就是查询特定视图以获取特定键的问题。Cradle模块定义了`view`函数来实现这一点。
- en: How to do it...
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何进行...
- en: 'You''ll pass the URL of the view for the query you want to execute, and then
    pass the key for which you''re searching as the key parameter, like this:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 您将传递要执行查询的视图的URL，然后将您正在搜索的键作为键参数传递，像这样：
- en: '[PRE10]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In addition to passing the view and key you're looking for, you must pass a
    callback function that handles the result.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 除了传递您所寻找的视图和键外，您必须传递一个处理结果的回调函数。
- en: How it works…
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Here, we're searching the `byCall` view for a call sign of `kf6gpe-7`. Recall
    from the last recipe that the view consists of a map of call signs in the `call`
    field to records; when we issue the view request with the database's `view` method,
    it searches that map for records with keys matching `kf6gpe-7`, and returns a
    result that consists of an array of matching records. The method uses the array's
    `forEach` method to iterate across each item of the array, writing each item one
    at a time to the console.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们在`byCall`视图中搜索调用信号为`kf6gpe-7`。回想一下上一个食谱，视图由`call`字段中的调用信号映射到记录组成；当我们使用数据库的`view`方法发出视图请求时，它在那个映射中查找键匹配`kf6gpe-7`的记录，并返回由匹配记录组成的数组结果。该方法使用数组的`forEach`方法遍历数组中的每个元素，一次将每个元素写入控制台。
- en: There's more
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容
- en: You can pass a number of arguments to a view. The most obvious is the `key`
    argument, which lets you pass a single key to match. There's also the `keys` argument,
    which lets you pass an array of keys. You can also pass `startkey` and `endkey`
    instead, to query a view for a range of keys. If you need to limit the results,
    you can use the `limit` and `skip` arguments to limit the number of results, or
    skip the first *n* results that match.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以向视图传递多个参数。最明显的是`key`参数，它让您传递一个键以进行匹配。还有`keys`参数，它让您传递一个键的数组。您还可以传递`startkey`和`endkey`，以查询一个键范围的视图。如果您需要限制结果，您可以使用`limit`和`skip`参数来限制结果数量，或跳过前*n*个匹配的结果。
- en: 'If you know a document''s ID, you can also use Cradle''s `get` method to get
    the object directly:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您知道一个文档的ID，您还可以使用Cradle的`get`方法直接获取该对象：
- en: '[PRE11]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: See also
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 也请参阅
- en: For details about the query operations you can invoke on views, see the CouchDB
    wiki at [http://wiki.apache.org/couchdb/HTTP_view_API#Querying_Options](http://wiki.apache.org/couchdb/HTTP_view_API#Querying_Options).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 关于您可以对视图执行的查询操作的详细信息，请参阅CouchDB维基百科中的[http://wiki.apache.org/couchdb/HTTP_view_API#Querying_Options](http://wiki.apache.org/couchdb/HTTP_view_API#Querying_Options)。
- en: Updating a document in CouchDB with Node.js and Cradle
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Node.js和Cradle在CouchDB中更新文档
- en: The Cradle module defines the `merge` method to let you update an existing document.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Cradle模块定义了`merge`方法，以便让您更新现有文档。
- en: How to do it...
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何进行...
- en: 'Here''s an example where we change the call of a record from `kf6gpe-7` to
    `kf6gpe-9` by specifying its ID, and then performing a merge with the new data:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个示例，我们通过指定其ID将记录的调用从`kf6gpe-7`更改为`kf6gpe-9`，然后使用新数据执行合并：
- en: '[PRE12]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: As you can see from the function, `merge` takes the ID of the record to merge,
    and a JavaScript object with the fields to replace or add to the existing object.
    You can also pass a callback, which is invoked by merge when the operation completes.
    The error value will be non-zero in the event of an error, and the document is
    returned as the second argument. Here, we just log the contents of the revised
    document to the console.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 从函数中，你可以看到`merge`接收要合并记录的ID和一个JavaScript对象，该对象包含要替换或添加到现有对象的字段。你还可以传递一个回调函数，当合并操作完成时由merge调用。在出错的情况下，错误值将为非零，文档作为第二个参数返回。在这里，我们只是将修订后的文档的内容记录到控制台。
- en: Deleting a document in CouchDB using Node.js and Cradle
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Node.js和Cradle在CouchDB中删除文档
- en: To remove a record, you use the Cradle module's `remove` method and pass the
    ID of the document you want to remove.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除一个记录，你使用Cradle模块的`remove`方法，并传递你想要删除的文档的ID。
- en: How to do it...
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何进行...
- en: 'Here''s an example of remove:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个删除记录的例子：
- en: '[PRE13]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Passing an ID removes the document with the given ID.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 通过ID删除文档会移除具有指定ID的文档。
- en: There's more…
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'If you have more than one document to remove, you could iterate across all
    documents, the way the following code does, removing each document in turn:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有多个文档要删除，你可以像以下代码那样遍历所有文档，逐一删除每个文档：
- en: '[PRE14]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This is a more complex use of `remove`; it takes the document's ID, the revision
    of the document, and a callback function, which logs to the console the ID of
    each document that was removed.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`remove`的一个更复杂的使用方式；它需要文档的ID、文档的版本以及一个回调函数，该函数会将每个被移除文档的ID记录到控制台。
- en: Using REST to enumerate CouchDB records
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用REST枚举CouchDB记录
- en: REST semantics dictate that to fetch the full contents of a collection of objects,
    we just send a `GET` request to the collection's root. We can do that from a web
    client to a CouchDB with CORS enabled using jQuery with a single call.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: REST语义规定，要获取对象集合的完整内容，我们只需向集合的根发送一个`GET`请求。我们可以从启用了CORS的CouchDB中使用jQuery用一个调用完成这个操作。
- en: How to do it...
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何进行...
- en: 'Here''s some HTML, jQuery, and JavaScript that enumerate all items in a CouchDB
    view and shows some of the fields of each objects in an embedded table:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些HTML、jQuery和JavaScript代码，它枚举了CouchDB视图中的所有项目，并在内嵌表格中显示了每个对象的一些字段：
- en: '[PRE15]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: How it works…
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The HTML is straightforward; it includes jQuery, and then defines three `div`
    regions to show the results of the request. After that, it defines a form with
    fields for the document's ID, revision, callsign, latitude and longitude, and
    adds buttons to get a list of records, perform an insertion or update, and remove
    a record.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: HTML结构很简单；它包含了jQuery，然后定义了三个`div`区域来显示请求的结果。之后，它定义了一个表单，包含文档的ID、版本、呼号、纬度和经度字段，并添加了获取记录列表、执行插入或更新以及移除记录的按钮。
- en: We need to have the `byCall` view defined for this to work (see the recipe *Setting
    up a Data View in CouchDB Using Node.js* for how to set up the data view using
    Node.js). This code performs a HTTP GET to the view's base URL, and takes the
    returned JavaScript object (parsed from the JSON by jQuery) and formats it as
    a table. (Note that we could have appended a specific key to the URL to obtain
    only a single URL).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要定义`byCall`视图才能使其工作（参见食谱*使用Node.js在CouchDB中设置数据视图*，了解如何使用Node.js设置数据视图）。这段代码对视图的基本URL执行一个HTTP
    GET请求，并取回的JavaScript对象（由jQuery从JSON解析而来）进行格式化，使其成为一个表格。（注意我们本可以附加一个特定的键到URL上，以获取单一的URL）。
- en: 'The format of the REST response is a little different than if you query the
    collection using Cradle; you''re seeing the actual response from CouchDB rather
    than the result massaged by Cradle. It looks something like this in the raw form:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: REST响应的格式与使用Cradle查询集合的响应略有不同；你看到的是CouchDB的实际响应，而不是由Cradle处理的成果。以原始形式来看，它看起来像这样：
- en: '[PRE16]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Specifically, the `total_rows` field indicates how many rows are in the result
    in the collection; the `offset` field indicates how many rows were skipped in
    the collection before the first row returned, and then the `rows` array contains
    each key-value pair generated by the map of the view. The rows field has an ID
    field, the unique ID generating that map entry, the key emitted by the map operation,
    and the record emitted by the map operation.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，`total_rows`字段表示集合中结果有多少行；`offset`字段表示在返回的第一行之前在集合中跳过了多少行，然后`rows`数组包含了映射视图生成的每个键值对。`rows`字段有一个ID字段，它是生成该映射条目的唯一ID，由映射操作生成的键，以及由映射操作生成的记录。
- en: 'Note that if you perform a `GET` request on the base URL for the database,
    you get something different; not all the records in the database, but information
    about the database:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果你对数据库的基本URL执行一个`GET`请求，你会得到一些不同的事物；不是数据库中的所有记录，而是有关数据库的信息：
- en: '[PRE17]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: These fields may vary depending on the version of CouchDB that you're running.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这些字段可能因您运行的CouchDB版本而异。
- en: See also
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: For information about the HTTP REST interface to CouchDB, see the documentation
    at [http://wiki.apache.org/couchdb/HTTP_Document_API](http://wiki.apache.org/couchdb/HTTP_Document_API).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 有关CouchDB的HTTP REST接口的信息，请参阅位于[http://wiki.apache.org/couchdb/HTTP_Document_API](http://wiki.apache.org/couchdb/HTTP_Document_API)的文档。
- en: Using REST to search CouchDB
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用REST搜索CouchDB
- en: Using REST to search CouchDB uses a view with a map to create your index, which
    you insert once, and then a GET HTTP request.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 使用REST搜索CouchDB时，使用一个带有映射的视图来创建你的索引，你插入一次，然后是一个GET HTTP请求。
- en: How to do it...
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'We can modify the previous `doGet` function to search for a particular call
    sign, like this:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以修改之前的`doGet`函数，以搜索特定的呼号，如下所示：
- en: '[PRE18]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: How it works…
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The relevant lines are the argument call, passed to `doGet`, and the construction
    of the URL to which we dispatch the `GET` request. Note how we check for a null
    or empty call to fetch the entire collection; your code may want to do something
    different like report an error, especially if the collection is large.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 相关的行是传递给`doGet`的参数调用，以及我们构造的URL，我们通过`GET`请求发送到该URL。注意我们如何检查null或空调用以获取整个集合；你的代码可能希望做些不同的事情，比如报告一个错误，特别是如果集合很大的话。
- en: Tip
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Note that the view must exist prior to doing this. I like to use Node.js to
    create my views once when I initially update my database, and update the views
    if I make changes, rather than embedding the views in the client, because for
    most applications there are many clients and there's no point in thrashing the
    store with the same views being updated by many clients.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，视图必须在这样做之前存在。我喜欢使用Node.js在最初更新我的数据库时创建我的视图，并在更改时更新视图，而不是将视图嵌入客户端，因为对于大多数应用程序来说，有很多客户端，没有必要让存储重复更新相同的视图。
- en: Using REST to upsert a document in CouchDB
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用REST在CouchDB中更新或插入文档
- en: There's no REST equivalent of Cradle's merge when you want to perform an upsert;
    instead, insertion is handled by a HTTP `POST` request, while updating is handled
    by a `PUT` request.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 当你想要执行一个更新或插入操作时，Cradle并没有REST等效的合并功能；相反，插入操作由HTTP `POST`请求处理，而更新操作则由`PUT`请求处理。
- en: How to do it...
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'Here''s some HTML and a `doUpsert` method that looks at form elements on your
    HTML page and either creates a new document in the database or updates an existing
    document if one already exists and you pass both the ID and revision fields:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些HTML和一个`doUpsert`方法，它查看你HTML页面上的表单元素，如果数据库中尚不存在文档，则创建新文档，或者如果已存在文档并且你传递了ID和修订字段，则更新现有文档：
- en: '[PRE19]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: How it works…
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The `doUpsert` method begins by defining an empty JavaScript object, which is
    what we'll populate and send to the server with either a `PUT` or `POST` request.
    We then extract the values of the form fields; if the `id` field is set with an
    ID, we assume that this is an update, rather than an insert, and also capture
    the contents of the revision field named `rev`.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '`doUpsert`方法首先定义一个空JavaScript对象，这是我们将其填充并通过`PUT`或`POST`请求发送到服务器的对象。然后我们提取表单字段的值；如果`id`字段设置了ID，我们假设这是更新操作，而不是插入操作，并且还捕获了名为`rev`的修订字段的值。'
- en: If there is no ID value set, it's an insert operation, and we set the request
    type to `POST`. If it's an update, we set the request type to `PUT`, indicating
    to CouchDB that this is an update.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有设置ID值，它是一个插入操作，我们将请求类型设置为`POST`。如果它是更新，我们将请求类型设置为`PUT`，向CouchDB表明这是一个更新。
- en: Next, we construct the URL; the URL for a document update must include the ID
    of the document to be updated; that's how CouchDB knows which document to update.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们构造URL；更新文档的URL必须包括要更新的文档的ID；这就是CouchDB知道要更新哪个文档的方式。
- en: Finally, we perform an AJAX request of the type we previously defined (either
    `PUT` or `POST`). Of course, we JSON-encode the JavaScript document we send to
    the server, and include a header indicating that the document being sent is JSON.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们执行一个我们之前定义类型的AJAX请求（`PUT`或`POST`）。当然，我们将发送给服务器的JavaScript文档进行JSON编码，并包含一个指示发送的文档是JSON的头部。
- en: 'The returned value is a JSON document (converted by jQuery to a JavaScript
    object) that consists of the ID and revision of the inserted document, something
    like this:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的值是一个JSON文档（由jQuery转换为JavaScript对象），包括插入文档的ID和修订版，类似于这样：
- en: '[PRE20]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Tip
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Note that your request to update a document must include both the document's
    current revision and ID, or the `PUT` request will fail with a HTTP 409 error.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您更新文档的请求必须包括文档的当前修订版和ID，否则`PUT`请求将因HTTP 409错误而失败。
- en: Using REST to delete a document in CouchDB
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用REST在CouchDB中删除文档
- en: You denote a RESTful deletion of a document by sending a HTTP `DELETE` request
    with the ID and revision of the document to be deleted.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 您通过向要删除的文档发送带有ID和修订版的HTTP `DELETE`请求来表示RESTful删除。
- en: How to do it…
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到…
- en: 'Using the HTML from the previous recipe, here''s a script that extracts the
    ID and revision from the form fields, does some simple error checking, and sends
    a deletion request to the server for the document with the indicated ID and revision:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 使用之前的食谱中的HTML，这是一个脚本，它从表单字段中提取ID和修订版，进行一些简单的错误检查，并向服务器发送具有指示ID和修订版的文档的删除请求：
- en: '[PRE21]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: How it works…
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'The code begins by extracting the ID and revision from the form elements and
    popping up error dialogs if either is empty. Next, construct an AJAX HTTP `DELETE`
    request. The URL is the URL of the document—the database and document ID—with
    the revision of the document as an argument passed with the name `rev`. Assuming
    that you specify the ID and revision correctly, you''ll get a response identical
    to that of an update: the ID and revision of the document that was removed. If
    it fails, you''ll get an HTTP error.'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 代码首先从表单元素中提取ID和修订版，如果任何一个为空则弹出错误对话框。接下来，构建一个AJAX HTTP `DELETE`请求。URL是文档的URL
    - 数据库和文档ID，修订版作为名为`rev`的参数传递。假设您正确指定了ID和修订版，您将得到与更新相同的响应：被删除文档的ID和修订版。 如果失败，您将得到一个HTTP错误。
