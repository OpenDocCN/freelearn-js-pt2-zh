["```js\n    <div>\n    <input id=\"inputUrl\" />\n    <!—the input id above is called input URL -- >\n    </div>\n\n    Add a DIV element that displays the result for the URL.\n\n    <div id=\"ResultDiv\">Result</div>\n    <!—the div id named here as ResultDiv -- >\n\n    Add the styling instructions to \"default.css\".\n\n    input {\n      // add your style statements here\n    }\n    ```", "```js\nWinJS.Utilities.ready(function () {\n\n  // get the element by id\n  var input = document.getElementById(\"inputUrl\");\n  // add our event listener here\n  input.addEventListener(\"change\", changeHandler);\n\n}, false);\n```", "```js\nfunction changeHandler(e) {\n  var input = e.target;\n  var resDiv = document.getElementById(\"ResultDiv\");\n\n  WinJS.xhr({ url: e.target.value }).then(function completed(result) {\n    if (result.status === 200) {\n      resDiv.style.backgroundColor = \"lightGreen\";\n      resDiv.innerText = \"Success\";\n    }\n  });\n}\n```", "```js\nfunction changeHandler(e) {\n  var input = e.target;\n  var resDiv = document.getElementById(\"ResultDiv\");\n\n  WinJS.xhr({url: e.target.value}).then(\n    function fulfilled (result) {\n      if (result.status === 200) {\n        resDiv.style.backgroundColor = \"lightGreen\";\n        resDiv.innerText = \"Successfully returned the Promise \";\n      }\n    },\n    // our error handler Function\n\n    function error(e) {\n      resDiv.style.backgroundColor = \"red\";\n\n      if (e.message != undefined) {  // when the URL is incorrect or blank.\n        resDiv.innerText = e.message;\n      }\n\n      else if (e.statusText != undefined) { // If  XmlHttpRequest was made.\n        resDiv.innerText = e.statusText;\n      }\n\n      else {\n        resDiv.innerText = \"Error\";\n      }\n    });\n}\n```", "```js\nFirstAsync()\n    .then(function () { return SecondAsync(); })\n    .then(function () { return ThirdAsync(); })\n    .done(function () { finish(); });\n```", "```js\n//WinJs code\n\nWinJS.Utilities.startLog();\n\n// Allocate the URI where to get the download the file.\nvar AllocatedUri = new Windows.Foundation.UriExample(\"http://www.packt.com\");\n\n// Get the folder for temporary files.\nvar temporaryFolder = Windows.Storage.ApplicationData.current.temporaryFolder;\n\n// Create the temp file asynchronously.\ntemporaryFolder.createFileAsync(\"temporary.text\", Windows.Storage.CreationCollisionOption.replaceExisting)\n  .then(function (tempFile) {\n\n    // lets start the download operation if the createFileAsync call succeeded\n\n    var Iamdownloader = new Windows.Networking.BackgroundTransfer.BackgroundDownloader();\n    var transfer = Iamdownloader.createDownload(uriExample, tempFile);\n      return transfer.startAsync();\n    })\n    .then(\n\n      //Define the function to use when the download completes successfully\n      function (result) {\n        WinJS.log && WinJS.log(\"File was download successfully \");\n      });\n```", "```js\n// Allocate the URI where to get the download the file.\nvar AllocatedUri = new Windows.Foundation.Uri(\"http://www.packt.com\");\n\n// Get the folder for temporary files.\nvar temporaryFolder = Windows.Storage.ApplicationData.current.temporaryFolder;\n\n// Create the temp file asynchronously.\ntemporaryFolder.createFileAsync(\"tempfile.txt\", Windows.Storage.CreationCollisionOption.replaceExisting)\n  .then(function (tempFile) {\n\n    // lets start the download operation if the createFileAsync call succeeded\n\n    var Iamdownloader = new Windows.Networking.BackgroundTransfer.BackgroundDownloader();\n    var transfer = Iamdownloader.createDownload(uriExample, tempFile);\n    return transfer.startAsync();\n  })\n  .then(\n    //Define the function to use when the download completes successfully\n    function (result) {\n      WinJS.log && WinJS.log(\"File was download successfully \");\n    },\n\n    // this is where we add the error handlers which displays\n    function (err) {\n      WinJS.log && WinJS.log(\"File download failed.\");\n    },\n    // Define the progress handling function.\n    function (progress) {\n      WinJS.log && WinJS.log(\"Bytes retrieved: \" + progress.progress.bytesReceived);\n    });\n```"]