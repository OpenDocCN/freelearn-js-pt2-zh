- en: Chapter 5. Operators, Loops, and Timers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第五章。操作符、循环和定时器
- en: In previous chapters, we reviewed the basic tools used in JavaScript development.
    We looked at IDEs, code editors, and *JSLint*, a JavaScript code validator that
    not only showed us where our code contained issues, but it also gave us warnings
    and suggestions on how to improve our code.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们回顾了JavaScript开发中使用的基本工具。我们查看了IDE、代码编辑器以及*JSLint*，这是一个不仅显示我们代码存在问题的JavaScript代码验证器，而且它还给出了警告和建议，帮助我们改进代码。
- en: We also learned about the `console.time` and `console.timeEnd` methods that
    allowed us to quickly test our code execution performance. Finally, we learned
    about creating a basic build system to ensure our final code base is optimized
    and bug-free.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还学习了`console.time`和`console.timeEnd`方法，这些方法允许我们快速测试代码执行性能。最后，我们学习了创建一个基本构建系统，以确保我们的最终代码库经过优化且无错误。
- en: It's important to say that all of these tools and techniques are essential to
    write high-performance code, not because of the JavaScript you know, but because
    of the JavaScript you don't know. JavaScript is a language that anyone can pick
    up and start writing code without knowing object-oriented programming or knowing
    a pattern such as **Model View Controller** (**MVC**); over the years, however
    it's been modified to accommodate these higher-level programming concepts (hacked
    or otherwise).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 需要说明的是，所有这些工具和技术都是编写高性能代码的关键，这不是因为你知道JavaScript，而是因为你不了解JavaScript。JavaScript是一种任何人都可以上手并开始编写代码而无需了解面向对象编程或了解如**模型-视图-控制器**（**MVC**）这样的模式的语言；然而，多年来，它已经被修改以适应这些更高级的编程概念（无论是以哪种方式）。
- en: The flip side of an easy-to-use language is that it's very easy to write bugs
    or even nonoptimized code; this effect is doubled and even tripled if we're writing
    complex JavaScript. As mentioned in past chapters, one characteristic of JavaScript
    developers in general is that *we are human, and we make mistakes*. Much of this
    is just a lack of awareness on the part of the developer, which is why using build
    systems and code checkers such as JSLint is so important, long before we write
    perfect high-performance JavaScript; if we don't, these tools have us covered.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 一个易于使用的语言的副作用是，很容易编写错误或者甚至非优化代码；如果我们编写复杂的JavaScript，这种效应会翻倍甚至翻三倍。正如前面章节中提到的，JavaScript开发人员的一个普遍特征是我们*是人类，会犯错误*。这很大程度上只是开发者意识不足，这就是为什么使用构建系统和代码检查器（如JSLint）如此重要，在我们编写完美的、高性能的JavaScript之前，这些工具可以帮我们解决问题。
- en: 'In this chapter, we are leaving tools and build systems behind and are getting
    into JavaScript performance concepts head-on, breaking up the subject matter across
    two chapters, starting with following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将抛开工具和构建系统，直接深入研究JavaScript性能概念，将主题内容分布在两章中，从以下主题开始：
- en: Operators
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作符
- en: Loops
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 循环
- en: Timers
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定时器
- en: Operators
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作符
- en: In this section, we are going to learn efficient ways to create `for` loops
    using the comparison operator.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习使用比较操作符高效地创建`for`循环的方法。
- en: The comparison operator
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 比较操作符
- en: The comparison operator, `==`, is an operator that's common in JavaScript development
    (typically in `if` statements); it equates one object with another and returns
    a boolean, (`true` or `false`) value. It's pretty straightforward and is very
    common in C-based languages.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 比较操作符`==`是JavaScript开发中常见的操作符（通常在`if`语句中）；它将一个对象与另一个对象相等，并返回一个布尔值，（`true`或`false`）。这个操作符相当直接，在C语言基础的编程语言中非常普遍。
- en: Because of this, it's easy to take advantage of this operator and use it across
    a large code base. The reality of this is that the equals operator is slow compared
    to using the `===` strict comparison operator, which also compares object types
    as well as the object's value. As the JavaScript interpreter doesn't have to confirm
    the type before checking the equality, it operates faster than using the double
    equals operator.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 正因为如此，很容易利用这个操作符并在大型代码库中使用它。这个现实的真相是，等于操作符与使用`===`严格比较操作符相比，速度较慢，后者还比较对象类型以及对象的值。由于JavaScript解释器不需要在检查相等性之前确认类型，所以它的运行速度比双等号操作符要快。
- en: Is strict faster?
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 严格比较更快吗？
- en: 'Let''s test this using the `console.time` method. In the following screenshot
    we have a `05_01.js` code sample; we can also see this sample in the example files
    of this book, provided on the Packt Publishing''s website:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用`console.time`方法来测试一下。在下面的截图中有一个`05_01.js`代码示例；我们也可以在这本书的示例文件中看到这个示例，这些文件由Packt
    Publishing提供，可以在其网站上找到：
- en: '![Is strict faster?](img/7296OS_05_01.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![严格比较更快吗？](img/7296OS_05_01.jpg)'
- en: Here, we have three variables on lines 5, 6, and 7; two of these variables are
    floats referencing the pi value, and the last variable is a string with the same
    pi value. We then have an anonymous function with a `test` variable on line number
    12, which equates both our floats with a double equals operator. Wrapped around
    the function, we have `console.time` and `console.timeEnd` functions on lines
    9 and 14, respectively.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们有5行、6行和7行上的三个变量；其中两个变量是浮点数，引用π值，最后一个变量是具有相同π值的字符串。然后我们在第12行的匿名函数中有一个`test`变量，该变量使用双等号运算符将我们的浮点数相等。在第9行和第14行，我们分别包围了函数的`console.time`和`console.timeEnd`函数。
- en: 'Let''s run this in the Chrome browser; open up Chrome followed by **Developer
    tools** from the **More tools** option on an `about:blank` tab, and then open
    the **Snippets** tab in the right-hand side column under the **Sources** panel.
    The **Snippets** tab is like a scratchboard built to test JavaScript code; right-click
    in the tab content area, and select **New**. Save your snippet with a name and
    copy the code from the example, as shown in the following screenshot:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在Chrome浏览器中运行这个；首先打开Chrome，然后从**更多工具**选项中的`about:blank`标签中打开**开发者工具**，接着在**源**面板右侧的**代码片段**选项卡中打开。**代码片段**选项卡就像一个用于测试JavaScript代码的画纸；在选项卡内容区域右键点击，选择**新建**。给你的片段起个名字，并复制示例中的代码，如下所示：
- en: '![Is strict faster?](img/7296OS_05_02.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![严格比较更快吗？](img/7296OS_05_02.jpg)'
- en: 'Next, right-click on the code snippet in the left-hand side rail and click
    on **Run**. You''ll notice the console appear at the bottom of the **Developer
    tools** window. We can also see a `Check PI: 0.016ms` console message. This shows
    us that running the comparison operator on this simple evaluation takes 0.016
    ms to complete. What if we changed the comparison operator to a strict comparison
    operator to see what the result would be?'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '接下来，在左侧边栏中点击代码片段，然后点击**运行**。你会注意到控制台出现在**开发者工具**窗口的底部。我们还可以看到一个`Check PI: 0.016ms`的控制台消息。这告诉我们，在这个简单评估上运行比较运算符需要0.016毫秒来完成。如果我们更改比较运算符，用严格比较运算符来看看结果会怎样呢？'
- en: 'On changing the operator, we can see that our second `console.time` message
    is `Check PI: 0.007ms`. This is a simple example, sure, but it proves that the
    code runs faster using strict type checking with strict comparison operators.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '在更改运算符后，我们可以看到我们的第二个`console.time`消息是`Check PI: 0.007ms`。这个例子很简单，当然，但它证明了使用严格类型检查和严格比较运算符可以使代码运行得更快。'
- en: '![Is strict faster?](img/7296OS_05_03.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![严格比较更快吗？](img/7296OS_05_03.jpg)'
- en: Loops
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 循环
- en: In this section, we are going to learn efficient ways to create `for` loops
    in detail.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将详细学习创建`for`循环的有效方法。
- en: How loops affect performance
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 循环如何影响性能
- en: 'Loops are a very common way to iterate through large blobs of data or objects
    and iterating through each instance of a DOM object or a piece of data. Let''s
    say we have a simple loop that generates a `p` paragraph tag and appends the page
    with an inner text value of the `i` integer in the loop, with a maximum limit
    of `9000`. Let''s take a look at the following code sample and see how this is
    done. I''ve created a simple HTML5 page with a `script` tag that includes the
    code on line 10, as shown next:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 循环是遍历大量数据块或对象的一种非常常见方式，或者遍历DOM对象或数据片的每个实例。比如说我们有一个简单的循环，它生成一个`p`段落标签，并在页面内部以`i`整数循环的文本值，最大限制为`9000`。让我们来看一下下面的代码样本，了解一下是如何实现的。我创建了一个简单的HTML5页面，其中包含一个`script`标签，包含了第10行的代码，如下所示：
- en: '![How loops affect performance](img/7296OS_05_04.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![循环如何影响性能](img/7296OS_05_04.jpg)'
- en: 'So, how is this code process-intensive? For starters, if we look at line number
    17, we can see a variable called `ptag` that was created to create a blank paragraph
    tag in our DOM. We then apply the integer''s current value in the loop to the
    `innerText` property of the `ptag` variable; and lastly, we apply the newly created
    paragraph tag into the DOM with the value we specified at that point in the loop.
    For performance testing, we also wrapped the `for` loop in a `console.time` wrapper
    method to check the performance speed. If we run this in Chrome, we should get
    a page with a line for each number created in the `for` loop along with a `console.time`
    method with a `process time` label, as shown in the following screenshot:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，这段代码处理起来为什么这么费劲呢？首先，如果我们看第17行，可以看到一个名为`ptag`的变量，它被创建用来在我们的DOM中创建一个空段落标签。然后，我们在循环中应用整数的当前值到`ptag`变量的`innerText`属性；最后，我们用循环中指定的那个点的值创建新的段落标签，并将其应用到DOM中。为了进行性能测试，我们还用`console.time`包装方法将`for`循环包裹起来，以检查性能速度。如果我们用Chrome运行这个，我们应该能得到一个包含`for`循环中创建的每个数字的页面以及一个带有`process
    time`标签的`console.time`方法，如下面的屏幕截图所示：
- en: '![How loops affect performance](img/7296OS_05_05.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![循环如何影响性能](img/7296OS_05_05.jpg)'
- en: 'Looking at our `process time` label, we can see that processing this block
    of code about takes 18 milliseconds to complete. This is not great, but we can
    make it better; let''s update our code and move the `ptag` variable and our `i`
    integer variable outside the `for` loop so that they don''t get recreated with
    each iteration of the `for` loop. Let''s see what this looks like by updating
    our code, as in the following screenshot:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 查看我们的`process time`标签，我们可以看到处理这段代码大约需要18毫秒才能完成。这并不好，但我们可以让它变得更好；让我们更新我们的代码，将`ptag`变量和我们的`i`整数变量移出`for`循环，这样它们就不会在每次`for`循环迭代时重新创建。让我们通过更新我们的代码来看看这样做会是什么样子，如下面的屏幕截图所示：
- en: '![How loops affect performance](img/7296OS_05_06.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![循环如何影响性能](img/7296OS_05_06.jpg)'
- en: 'Notice that, on line number 16, we''ve moved the `i` and `ptag` variables outside
    the loop, and we are reassigning values and objects created in the loop rather
    than creating a unique scope for each loop pass. If we rerun our page, we should
    see the same body tag get updated with a slightly smaller performance number than
    before; in the following case, it should run in the range 15–17 milliseconds:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在第16行，我们将`i`和`ptag`变量移出了循环，我们正在循环中重新分配创建的值和对象，而不是为每次循环迭代创建一个独特的范围。如果我们重新运行我们的页面，我们应该看到相同的`body`标签用比以前稍小的性能数字更新；在以下情况下，它应该在15-17毫秒的范围内运行：
- en: '![How loops affect performance](img/7296OS_05_07.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![循环如何影响性能](img/7296OS_05_07.jpg)'
- en: The reverse loop performance myth
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 逆向循环性能神话
- en: A new idea that seems to have appeared in JavaScript developer circles is the
    concept of a reverse `for` loop. A reverse `for` loop is written just like a loop,
    but the loop counts backward rather than forward.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript开发者圈中似乎出现了一个新想法，即逆向`for`循环的概念。逆向`for`循环就像一个循环，但循环是倒计时的，而不是正向计数的。
- en: The idea behind a reverse loop is that, by counting backward, some JavaScript
    interpreters run loops faster. Let's test this and see whether this actually improves
    the speed of a `for` loop. First, let's create a `for` loop, counting forward
    from `9000`; we won't include any logic in the `for` loop, with the exception
    of adding an external variable called `result`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 逆向循环背后的想法是，通过倒计数，一些JavaScript解释器可以更快地运行循环。让我们测试一下这个想法，看看它是否能实际上提高`for`循环的速度。首先，让我们创建一个`for`循环，从`9000`开始正向计数；我们不会在`for`循环中包含任何逻辑，除了添加一个名为`result`的外部变量。
- en: Using our `result` variable with an increment, we can determine whether we are
    counting as we should and triggering a line of code at the end of `9000` in both
    a *reverse* loop and a standard `for` loop. In our case, a `console.timeEnd` function,
    as shown in the following code, is in its own HTML page, with a script tag at
    the bottom.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们的`result`变量进行递增，我们可以确定我们是否正在按应有的方式计数，并在`9000`末端触发一行代码，无论是*逆向*循环还是标准的`for`循环都是如此。在我们这个案例中，一个`console.timeEnd`函数，如以下代码所示，位于其自己的HTML页面中，页面底部有一个`script`标签。
- en: '![The reverse loop performance myth](img/7296OS_05_08.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![逆向循环性能神话](img/7296OS_05_08.jpg)'
- en: Let's take a look at the code sample. On line 13, we can see that we declare
    our `result` variable before starting our `for` loop while, on line number 14,
    we start the `console.time` wrapper method that has a label called `Time Up`.
    On line 15, we start our `for` loop and increment `result` on line 16\. Finally,
    on line 18, we have a condition where we ask whether the result is equal to 9000,
    and we execute our `timeEnd` function on line 19.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看代码示例。在第13行，我们可以看到我们在开始`for`循环之前声明了我们的`result`变量，而在第14行，我们开始了带有名为`Time Up`的标签的`console.time`包装方法。在第15行，我们开始`for`循环并在第16行增加`result`。最后，在第18行，我们有一个条件，我们询问结果是否等于9000，并在第19行执行我们的`timeEnd`函数。
- en: 'If we load the page with our `for` loop script inside the `body` tag, our console
    in **Developer tools** should output the following information:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们把我们的`for`循环脚本放在`body`标签内加载页面，我们的**开发者工具**中的控制台应该输出以下信息：
- en: '![The reverse loop performance myth](img/7296OS_05_09.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![逆序循环性能神话](img/7296OS_05_09.jpg)'
- en: So, our `console.time` object tells us that our standard `for` loop with a maximum
    value of `9000` takes roughly 0.15 milliseconds to process in Google Chrome. Having
    nothing else included on the HTML page, which isn't hosted on a server, ensures
    that network lag isn't a factor. This is a good baseline with which we can compare
    a reverse loop.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们的`console.time`对象告诉我们，在Google Chrome中，最大值为`9000`的标准`for`循环大约需要0.15毫秒来处理。HTML页面上没有其他内容，这确保了网络延迟不是因素。这是我们比较逆序循环的好基准。
- en: 'Now, let''s test a reverse `for` loop; here, we''ve created an updated version
    of the `for` loop, including our `result` variable. This is similar to the previous
    process, but let''s take a look at the code sample in the next screenshot:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们测试一个逆序的`for`循环；在这里，我们创建了`for`循环的更新版本，包括我们的`result`变量。这与前面的过程类似，但让我们看看下一张截图中的代码示例：
- en: '![The reverse loop performance myth](img/7296OS_05_10.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![逆序循环性能神话](img/7296OS_05_10.jpg)'
- en: If we look at line number 15 in this code sample, we can see that we've altered
    this line a bit so that the loop counts backward rather than forward. We start
    by setting the increment variable, `i` in this case, with a value of `9000`, and
    then we test whether `i` is greater than `0`. If it is, we decrease the `i` value
    by one.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们看这个代码示例的第15行，我们可以看到我们稍微修改了这一行，使得循环是倒数而不是正数。我们首先将增量变量`i`（在这个例子中）设置为9000的值，然后我们测试`i`是否大于0。如果是，我们将`i`的值减一。
- en: On line 17, we still increment our `result` variable as we did previously. This
    way, rather than using the `for` loop's decrement variable `i`, the `result` variable
    exists as our count outside the loop, counting up. This is called by the *reverse*
    loop. When the `result` equals `9000` on line 18, then on line 19 the `console.timeEnd`
    function is executed.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在第17行，我们仍然像以前一样增加我们的`result`变量。这样，而不是使用`for`循环的递减变量`i`，`result`变量在循环外作为我们的计数器存在，是递增的。这被称为*逆序*循环。当`result`在第18行等于9000时，然后在第19行执行`console.timeEnd`函数。
- en: 'Let''s test this in the **Developer tools** option in our Chrome browser and
    see what value we get, as shown here:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在Chrome浏览器的**开发者工具**选项中测试一下，看看我们得到什么值，如下所示：
- en: '![The reverse loop performance myth](img/7296OS_05_11.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![逆序循环性能神话](img/7296OS_05_11.jpg)'
- en: So, we can see our result in **Developer tools**, and our reverse loop's processing
    time is around 0.16 milliseconds, which isn't too much of a difference when comparing
    it with a `for` loop. In many cases, a reverse `for` loop isn't necessary for
    most JavaScript projects unless we need to count backward for a project.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们可以在**开发者工具**中看到我们的结果，我们的逆序循环处理时间大约是0.16毫秒，与`for`循环相比并没有太大差异。在许多情况下，除非我们需要为一个项目倒数，否则大多数JavaScript项目中不需要逆序`for`循环。
- en: Timers
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[定时器](#定时器)'
- en: Here, we are going to learn about optimizing JavaScript timers in detail.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将详细学习如何优化JavaScript定时器。
- en: What are timers and how do they affect performance?
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定时器是什么，它们如何影响性能？
- en: Timers are built-in functions of JavaScript that allow the execution of either
    inline JavaScript code or permit functions to be called at a specific point of
    time after, or repeatedly during, the life cycle of a JavaScript application.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 定时器是JavaScript的内置函数，它允许执行内联JavaScript代码，或者在JavaScript应用程序的生命周期的某个特定时间点之后调用函数，或者在应用程序的生命周期内重复调用。
- en: Timers are a great tool in a JavaScript developer's toolbelt, but they have
    their own issues when it comes to performance. Consider the fact that the JavaScript
    language is single-threaded, which means that every line of code in our application
    cannot be fired at the exact same time as another piece of code in our application.
    To get around this, we use a built-in function called `setTimeout`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 定时器是JavaScript开发者工具箱中一个非常好的工具，但它们在性能方面也有自己的问题。考虑一下这样的事实：JavaScript语言是单线程的，这意味着我们应用程序中的每一行代码都不能与应用程序中的另一行代码同时执行。为了解决这个问题，我们使用一个内置函数`setTimeout`。
- en: The `setTimeout` method takes two parameters to delay a block of code from executing;
    the first is either the name of a function with our code or a line of JavaScript
    code by itself, followed by an integer specifying the extent by which we want
    to delay code execution which is in milliseconds.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`setTimeout`方法有两个参数来延迟代码块的执行；第一个参数要么是我们代码的函数名或者独立的JavaScript代码行，后面跟着一个整数，指定我们想要延迟代码执行的程度，单位是毫秒。'
- en: 'On the surface, the `setTimeout` function may seem harmless, but consider this.
    Let''s say we have two functions, both being triggered by one `setTimeout` function
    each with a `for` loop that prints an incremented value of the `for` loop to the
    console window. Each function will have a different maximum value and the lower
    count function will be called slightly after the first larger functions of the
    `for` loop. Let''s take a look at the code sample here:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 从表面上看，`setTimeout`函数可能看起来无害，但考虑一下这个。假设我们有两个函数，每个函数都由一个`setTimeout`函数触发，每个函数都有一个`for`循环，该循环将`for`循环的递增值输出到控制台窗口。每个函数将有一个不同的最大值，较低计数的函数将在第一个较大函数的`for`循环稍微之后调用。让我们来看看这里的代码示例：
- en: '![What are timers and how do they affect performance?](img/7296OS_05_12.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![定时器是什么以及它们如何影响性能？](img/7296OS_05_12.jpg)'
- en: 'We can see that this is an empty HTML5 page with a script tag with our code
    on line number 9\. On lines 13 and 20, we have the start of two similar functions:
    one called `delay300000()` and another called `delay3000()`, with each function
    containing a `for` loop that prints each step of the loop to the console using
    the `console.info` statement. The `console.info` statement is a type of console
    print that simply formats the console line to indicate information.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到这是一个带有我们代码的script标签的空的HTML5页面，在第9行。在第13行和第20行，我们有两个相似函数的开始：一个叫`delay300000()`，另一个叫`delay3000()`，每个函数都包含一个`for`循环，该循环使用`console.info`语句将循环的每一步输出到控制台。`console.info`语句是一种控制台打印类型，它简单地将控制台行格式化为表示信息的样式。
- en: 'Now, on line 27, we will trigger both functions inside a `window.onload` function,
    with the larger delay function called 50 milliseconds after the page load and
    the shorter function called slightly later at 150 milliseconds. Let''s try this
    in Chrome and see what happens in Dev Tools, as shown next:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在第27行，我们在一个`window.onload`函数内触发这两个函数，较大的延迟函数在页面加载后50毫秒调用，较短的函数稍后在第150毫秒调用。我们试试在Chrome中运行这个，并看看在Dev
    Tools中会发生什么，如下图所示：
- en: '![What are timers and how do they affect performance?](img/7296OS_05_13.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![定时器是什么以及它们如何影响性能？](img/7296OS_05_13.jpg)'
- en: Here, we can notice quite a bit of lag as we print all these lines to the console.
    We can also see that we triggered both in a given timeout. In the preceding screenshot,
    we can see that our `delay3000()` isn't triggered until after our larger function,
    `delay300000()`, is completed.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以注意到当我们把这些行输出到控制台时会有明显的延迟。我们也可以看到我们在给定的超时时间内触发了这两个函数。在前面的截图中，我们可以看到我们的`delay3000()`直到我们的较大函数`delay300000()`完成后才被触发。
- en: Working around single-threading
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 处理单线程
- en: 'Sadly, with plain JavaScript, we simply can''t "multithread" a function like
    these two at the same time, but we can incorporate something like a `callback`
    method in our code. A `callback` method is simply a JavaScript function that''s
    triggered when a function is completed. Let''s set up our `delay300000()` function
    to call back our `delay3000()` method once it''s completed. Here''s what it would
    look like:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 遗憾的是，用纯JavaScript，我们根本无法“多线程”同时运行这两个函数，但我们可以在我们的代码中加入类似`回调`的方法。`回调`方法就是一个当函数完成时触发的JavaScript函数。让我们设置我们的`delay300000()`函数，一旦它完成，就调用我们的`delay3000()`方法。下面就是这样做的样子：
- en: '![Working around single-threading](img/7296OS_05_14.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![处理单线程](img/7296OS_05_14.jpg)'
- en: Looking at our code sample, we can see on line number 13 that we've added a
    parameter with the name `callback`. It's important to know that here, the naming
    of our `callback` method isn't important but including a placeholder parameter
    for a function is. Our placeholder function that will serve as our callback function
    is `Delay3000()`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 查看我们的代码示例，我们可以在第13行看到我们添加了一个名为`callback`的参数。重要的是要知道，在这里，我们`callback`方法的命名并不重要，但包含一个函数占位符参数是重要的。我们的占位函数，将作为我们的回调函数，是`Delay3000()`。
- en: Notice how we renamed `Delay3000` on line 22, capitalizing the *d*. The purpose
    of this is to indicate to the JavaScript interpreter that this is a **constructor**,
    a function that requires it to be initialized in memory. This is done by capitalizing
    the first letter in the function's name. You may recall from [Chapter 2](ch02.html
    "Chapter 2. Increasing Code Performance with JSLint"), *Increasing Code Performance
    with JSLint*, if we use a capitalized function name JSLint will return a warning
    that it "thinks" a constructor is being used even if it's a plain function. To
    keep our interpreter from second-guessing itself, we want to ensure we are writing
    our functions and objects as we intended.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们如何在第22行将`Delay3000`大写。这样做的目的是指示JavaScript解释器这是一个**构造函数**，一个需要在内存中初始化的函数。这是通过将函数名称的第一个字母大写来实现的。您可能还记得从[第2章](ch02.html
    "第2章：使用JSLint提高代码性能")，*使用JSLint提高代码性能*，如果我们使用大写函数名，JSLint将返回警告，它认为使用了构造函数，即使它是一个普通函数。为了不让我们的解释器猜疑，我们希望确保我们正在编写我们意图中的函数和对象。
- en: Finally, we have updated our `onload` function's logic by removing the extra
    `setTimeout` for `delay3000`, and we added the newly renamed `Delay3000` (without
    parentheses) as a parameter inside our `delay300000()` function in the `setTimeout`
    function. Let's run this again in our browser, and take a look at our console's
    output.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们通过移除`delay3000`的额外`setTimeout`，更新了我们的`onload`函数的逻辑，并在`delay300000()`函数中的`setTimeout`函数里添加了重新命名的`Delay3000`（没有括号）作为参数。让我们再次在浏览器中运行这个，并查看我们的控制台的输出。
- en: If we scroll down near the bottom of the console log (after processing the initial
    `delay300000()` function call), we can see that our `Delay3000` log message appears
    after completing the initial function. Using callbacks is a great way to efficiently
    manage your application's thread and ensure proper load stacking of a heavy application,
    allowing you to pass parameters after an initial function is completed.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们滚动到控制台日志的底部（在处理初始`delay300000()`函数调用之后），我们可以看到我们的`Delay3000`日志消息在完成初始函数后出现。使用回调是高效管理应用程序线程并确保重负载应用程序正确加载堆叠的好方法，让你在初始函数完成后传递参数。
- en: Closing the loop
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关闭循环
- en: Lastly, as we can see in this `callback` method example, it's usually not a
    great idea to use large hundred thousand scaled loops for performance reasons.
    Always look for better and more efficient ways to break up large loops and call
    other functions to help balance out the workload.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，正如我们在`callback`方法示例中看到的，出于性能原因，通常不建议使用大规模的循环。总是寻找更好的、更有效的方法来分解大循环，并调用其他函数来帮助平衡工作负载。
- en: Also, I encourage you to check out JavaScript **promises**, an EcmaScript 6
    feature. While not quite ready for discussion yet in this book, as at the time
    of writing, promises are still experimental. I encourage you, dear reader, to
    follow up and learn about what will be a successor to callbacks in JavaScript
    when it's finalized. You can learn more about promises on Mozilla's Developer
    Network site at [https://developer.mozilla.org/en-US/](https://developer.mozilla.org/en-US/).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我鼓励大家去了解一下JavaScript **promises**，这是EcmaScript 6的一个特性。虽然在这个书的写作时期，它还不足以讨论，因为承诺仍然处于实验阶段。我鼓励你，亲爱的读者，继续跟进，了解当它最终定型时，将取代JavaScript中回调的继任者。您可以在Mozilla开发者网络网站上了解更多关于承诺的信息：[https://developer.mozilla.org/en-US/](https://developer.mozilla.org/en-US/)。
- en: Summary
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned about conditionals and how efficient strict comparisons
    help our JavaScript perform better at runtime. We also learned about loops and
    how to optimize loops, preventing objects that are not required for our code base
    from being repeated over and over in a `for` loop and thus, keeping our code as
    efficient as possible.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了条件语句以及严格的比较如何帮助我们的JavaScript在运行时表现更好。我们还学习了循环以及如何优化循环，防止在`for`循环中重复不需要的对象，从而使我们的代码尽可能高效。
- en: Lastly, we also learned about timers and single-threading in JavaScript applications
    and how we can use callbacks to keep our code running as smoothly as possible
    even when we overload it. Next, we cover arrays and prototype creation performance
    and find out how best to work with them in JavaScript.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们还学习了在JavaScript应用程序中关于定时器和单线程的知识，以及如何使用回调来使我们的代码在过度加载的情况下也能尽可能流畅地运行。接下来，我们将讨论数组和原型创建的性能，并找出如何在JavaScript中最佳地使用它们。
