["```js\n> au test\n\n```", "```js\n> au test --watch\n\n```", "```js\nimport {Container} from 'aurelia-dependency-injection'; \nimport {BindingLanguage} from 'aurelia-templating'; \nimport {TemplatingBindingLanguage}  \n  from 'aurelia-templating-binding'; \nimport {ValidationParser, ValidationRules}  \n  from 'aurelia-validation'; \nimport '../../src/validation/rules'; \n\nconst container = new Container(); \ncontainer.registerSingleton( \n  BindingLanguage, TemplatingBindingLanguage); \nconst parser = container.invoke(ValidationParser); \nValidationRules.initialize(parser); \n\n```", "```js\n//Omitted snippet... \nfunction requireTests() { \n  var TEST_REGEXP = /(spec)\\.js$/i; \n  var allTestFiles = [ \n    '/base/test/unit/setup.js', \n    '/base/test/unit/setup-validation.js' \n  ]; \n\n  Object.keys(window.__karma__.files).forEach(function(file) { \n    if (TEST_REGEXP.test(file)) { \n      allTestFiles.push(file); \n    } \n  }); \n\n  require(allTestFiles, window.__karma__.start); \n} \n//Omitted snippet... \n\n```", "```js\nimport 'aurelia-polyfills'; \nimport {initialize} from 'aurelia-pal-browser'; \ninitialize(); \n\nPromise.config({ \n  warnings: { \n    wForgottenReturn: false \n  } \n}); \n\n```", "```js\n> au build\n\n```", "```js\n> au test -watch\n\n```", "```js\nChrome 53.0.2785 (Windows 10 0.0.0): Executed 0 of 0 ERROR (0.015 secs / 0 secs)\n\n```", "```js\nimport {PhoneNumber} from '../../../../src/contacts/models/phone-number'; \n\ndescribe('the PhoneNumber class', () => { \n  it('should create empty PhoneNumber when creating from empty object',  \n  () => { \n    const result = PhoneNumber.fromObject({}); \n    expect(result).toEqual(new PhoneNumber()); \n  }); \n}); \n\n```", "```js\nChrome 53.0.2785 (Windows 10 0.0.0): Executed 1 of 1 SUCCESS (0.016 secs / 0.008 secs)\n\n```", "```js\nimport {PhoneNumber} from '../../../../src/contacts/models/phone-number'; \n\ndescribe('the PhoneNumber class', () => { \n  //Omitted snippet... \n\n  it('should map all properties when creating from object', () => { \n    const src = { \n      type: 'Mobile', \n      number: '1234567890' \n    }; \n    const result = PhoneNumber.fromObject(src);\nfor (let property in src) { \n      expect(result[property]).toEqual(src[property]); \n    } \n  }); \n}); \n\n```", "```js\nimport {Contact} from '../../../../src/contacts/models/contact'; \n\ndescribe('the Contact class', () => { \n\n  it('should create empty Contact when creating from empty object', () => { \n    const result = Contact.fromObject({}); \n    expect(result).toEqual(new Contact()); \n  }); \n\n  it('should map all properties when creating from object', () => { \n    const src = { \n      firstName: 'Never gonna give you up', \n      lastName: 'Never gonna let you down', \n      company: 'Never gonna run around and desert you', \n      birthDay: '1987-11-16', \n      note: 'Looks like you've been rickrolled' \n    }; \n    const result = Contact.fromObject(src); \n\n    for (let property in src) { \n      expect(result[property]).toEqual(src[property]); \n    } \n  }); \n}); \n\n```", "```js\nimport {Contact} from '../../../../src/contacts/models/contact'; \nimport {Address} from '../../../../src/contacts/models/address'; \nimport {EmailAddress} from '../../../../src/contacts/models/email-address'; \nimport {PhoneNumber} from '../../../../src/contacts/models/phone-number'; \nimport {SocialProfile} from '../../../../src/contacts/models/social-profile'; \n\ndescribe('the Contact class', () => { \n  //Omitted snippet... \n\n  it ('should map phone numbers when creating from object', () => { \n    const result = Contact.fromObject({ phoneNumbers: [{}, {}] }); \n    const expected = [new PhoneNumber(), new PhoneNumber()]; \n\n    expect(result.phoneNumbers).toEqual(expected); \n  }); \n\n  it ('should map email addresses when creating from object', () => { \n    const result = Contact.fromObject({ emailAddresses: [{}, {}] }); \n    const expected = [new EmailAddress(), new EmailAddress()]; \n\n    expect(result.emailAddresses).toEqual(expected); \n  }); \n\n  it ('should map addresses when creating from object', () => { \n    const result = Contact.fromObject({ addresses: [{}, {}] }); \n    const expected = [new Address(), new Address()]; \n\n    expect(result.addresses).toEqual(expected); \n  });\nit ('should map social profiles when creating from object', () => { \n    const result = Contact.fromObject({ socialProfiles: [{}, {}] }); \n    const expected = [new SocialProfile(), new SocialProfile()];\nexpect(result.socialProfiles).toEqual(expected); \n  }); \n}); \n\n```", "```js\n//Omitted snippet... \nit('should be a person if it has a firstName and no lastName', () => { \n  const sut = Contact.fromObject({ firstName: 'A first name' }); \n  expect(sut.isPerson).toBeTruthy(); \n}); \n\nit('should be a person if it has a lastName and no firstName', () => { \n  const sut = Contact.fromObject({ lastName: 'A last name' }); \n  expect(sut.isPerson).toBeTruthy(); \n}); \n\nit('should be a person if it has a firstName and a lastName', () => { \n  const sut = Contact.fromObject({  \n    firstName: 'A first name', \n    lastName: 'A last name' \n  }); \n  expect(sut.isPerson).toBeTruthy(); \n}); \n\nit('should not be a person if it has no firstName and no lastName', () => { \n  const sut = Contact.fromObject({ company: 'A company' }); \n  expect(sut.isPerson).toBeFalsy(); \n}); \n//Omitted snippet... \n\n```", "```js\nimport {Router} from 'aurelia-router'; \nimport {HttpClient} from 'aurelia-fetch-client'; \nimport {ContactGateway} from './services/gateway'; \nimport environment from 'environment'; \n\nexport function configure(config) { \n  const router = config.container.get(Router); \n  router.addRoute({ route: 'contacts', name: 'contacts',  \n    moduleId: 'contacts/main', nav: true, title: 'Contacts' }); \n\n  const httpClient = config.container.invoke(HttpClient) \n    .configure(config => { config \n      .useStandardConfiguration() \n      .withBaseUrl(environment.contactsUrl); \n    }); \n  config.container.registerInstance(ContactGateway,  \n    new ContactGateway(httpClient)); \n} \n\n```", "```js\nimport {inject} from 'aurelia-framework'; \nimport {HttpClient, json} from 'aurelia-fetch-client'; \nimport {Contact} from '../models/contact'; \n\n@inject(HttpClient) \nexport class ContactGateway { \n\n  constructor(httpClient) { \n    this.httpClient = httpClient; \n  } \n\n  //Omitted snippet... \n} \n\n```", "```js\n> au build\n\n```", "```js\nimport {ContactGateway}  \n  from '../../../../src/contacts/services/gateway';  \nimport {Contact} from '../../../../src/contacts/models/contact'; \n\ndescribe('the ContactGateway class', () => { \n\n  let httpClient, sut; \n\n  beforeEach(() => { \n    httpClient = jasmine.createSpyObj('HttpClient', ['fetch']); \n    sut = new ContactGateway(httpClient); \n  }); \n\n  function createContact() { \n    return Contact.fromObject({ id: 1, company: 'Blue Spire' }); \n  } \n\n  function createJsonResponseMock(content) { \n    return { json: () => Promise.resolve(content) }; \n  } \n\n  it('should fetch all contacts', done => { \n    const contacts = [createContact()]; \n    httpClient.fetch.and.returnValue(Promise.resolve( \n      createJsonResponseMock(contacts))); \n\n    sut.getAll() \n      .then(result => expect(result).toEqual(contacts)) \n      .then(() => expect(httpClient.fetch) \n        .toHaveBeenCalledWith('contacts')) \n      .then(done); \n  }); \n\n  it('should fetch a contact by its id', done => { \n    const contact = createContact(); \n    httpClient.fetch.and.returnValue(Promise.resolve( \n      createJsonResponseMock(contact))); \n\n    sut.getById(contact.id) \n      .then(result => expect(result).toEqual(contact)) \n      .then(() => expect(httpClient.fetch) \n        .toHaveBeenCalledWith(`contacts/${contact.id}`)) \n      .then(done); \n  }); \n}); \n\n```", "```js\n//Omitted snippet... \n\nfunction readBlob(blob) { \n  return new Promise(resolve => { \n    let reader = new FileReader(); \n    reader.addEventListener(\"loadend\", () => {  \n      resolve(reader.result); \n    }); \n    reader.readAsText(blob); \n  }); \n} \n\nfunction expectBlobsToBeEqual(result, expected) { \n  expect(result.type).toEqual(expected.type); \n  expect(result.size).toEqual(expected.size); \n\n  return Promise \n    .all([ readBlob(result), readBlob(expected) ]) \n    .then(([c1, c2]) => expect(c1).toEqual(c2)); \n} \n\nfunction expectFetchToHaveBeenCalled(expectedPath,  \n                                     expectedProperties) { \n  let expectedBody; \n  if (expectedProperties.body) { \n    expectedBody = expectedProperties.body; \n    delete expectedProperties.body; \n  } \n\n  expect(httpClient.fetch).toHaveBeenCalledWith(expectedPath,    \n    jasmine.objectContaining(expectedProperties)); \n  if (expectedBody) { \n    return expectBlobsToBeEqual( \n      httpClient.fetch.calls.mostRecent().args[1].body,  \n      expectedBody); \n  } \n} \n//Omitted snippet... \n\n```", "```js\nimport {json} from 'aurelia-fetch-client'; \n//Omitted snippet... \n\nit('should create a contact', done => { \n  const contact = createContact(); \n  httpClient.fetch.and.returnValue(Promise.resolve()); \n\n  sut.create(contact) \n    .then(() => expectFetchToHaveBeenCalled( \n      'contacts',  \n      { method: 'POST', body: json(contact) })) \n    .then(done); \n}); \n//Omitted snippet... \n\n```", "```js\n//Omitted snippet... \nit('should update a contact', done => { \n  const contact = createContact(); \n  httpClient.fetch.and.returnValue(Promise.resolve()); \n\n  sut.update(contact.id, contact) \n    .then(() => expectFetchToHaveBeenCalled( \n      `contacts/${contact.id}`,  \n      { method: 'PUT', body: json(contact) })) \n    .then(done); \n}); \n\nit(\"should update a contact's photo\", done => { \n  const id = 9; \n  const contentType = 'image/png'; \n  const file = new File(['some binary content'], 'img.png', { \n    type: contentType \n  }); \n  httpClient.fetch.and.returnValue(Promise.resolve()); \n\n  const expectedRequestProperties = { \n    method: 'PUT', \n    headers: { 'Content-Type': contentType }, \n    body: file \n  }; \n  sut.updatePhoto(id, file) \n    .then(() => expectFetchToHaveBeenCalled( \n      `contacts/${id}/photo`,  \n      expectedRequestProperties)) \n    .then(done); \n}); \n//Omitted snippet... \n\n```", "```js\nimport {OrderByValueConverter}  \n  from '../../../../src/resources/value-converters/order-by'; \n\ndescribe('the orderBy value converter', () => { \n  let sut; \n\n  beforeEach(() => { \n    sut = new OrderByValueConverter(); \n  }); \n\n  it('should sort values using property', () => { \n    const array = [ { v: 3 }, { v: 2 }, { v: 4 }, { v: 1 }, ]; \n    const expectedResult = [ { v: 1 }, { v: 2 },  \n      { v: 3 }, { v: 4 }, ]; \n\n    const result = sut.toView(array, 'v'); \n\n    expect(result).toEqual(expectedResult); \n  }); \n\n  it('should sort values in reverse order when direction is \"desc\"', () => { \n    const array = [ { v: 3 }, { v: 2 }, { v: 4 }, { v: 1 }, ]; \n    const expectedResult = [ { v: 4 }, { v: 3 },  \n      { v: 2 }, { v: 1 }, ]; \n\n    const result = sut.toView(array, 'v', 'desc'); \n\n    expect(result).toEqual(expectedResult); \n  }); \n}); \n\n```", "```js\nwithResources(resources: string | string[]): ComponentTester \n\n```", "```js\nvar tester = StageComponent.withResources('some/resources') \nvar tester = new ComponentTester().withResources('some/resources') \n\n```", "```js\nimport {StageComponent} from 'aurelia-testing'; \nimport {bootstrap} from 'aurelia-bootstrapper'; \n\ndescribe('the file-drop-target custom attribute', () => { \n\n  let viewModel, component, element; \n\n  beforeEach(() => { \n    viewModel = { files: null }; \n    component = StageComponent \n      .withResources('resources/attributes/file-drop-target') \n      .inView('<div file-drop-target.bind=\"files\"></div>') \n      .boundTo(viewModel); \n  }); \n\n  function create() { \n    return component.create(bootstrap).then(() => { \n      element = document \n        .querySelector('[file-drop-target\\\\.bind]'); \n    }); \n  } \n\n  afterEach(() => { \n    component.dispose(); \n  }); \n}); \n\n```", "```js\nimport {DOM} from 'aurelia-pal'; \n//Omitted snippet...  \nfunction createDragEvent(type, dataTransfer) { \n  const e = DOM.createCustomEvent(type, { bubbles: true }); \n  e.dataTransfer = dataTransfer; \n  return e; \n} \n//Omitted snippet... \n\n```", "```js\n//Omitted snippet... \nfunction dragOver() { \n  element.dispatchEvent(createDragEvent('dragover')); \n  return new Promise(setTimeout); \n} \n\nfunction drop(dataTransfer) { \n  element.dispatchEvent(createDragEvent('drop', dataTransfer)); \n  return new Promise(setTimeout); \n} \n\nfunction dragEnd(dataTransfer) { \n  element.dispatchEvent(createDragEvent('dragend', dataTransfer)); \n  return new Promise(setTimeout); \n} \n//Omitted snippet... \n\n```", "```js\n//Omitted snippet... \nfunction createFile() { \n  return new File( \n    ['some binary content'],  \n    'test.txt',  \n    { type: 'text/plain' }); \n} \n//Omitted snippet... \n\n```", "```js\n//Omitted snippet... \nit('should assign dropped files to bounded instruction', done => { \n  const files = [createFile()]; \n\n  create() \n    .then(() => dragOver()) \n    .then(() => drop({ files })) \n    .then(() => expect(viewModel.files).toEqual(files)) \n    .then(done); \n}); \n//Omitted snippet... \n\n```", "```js\n//Omitted snippet... \nit('should clear data when drag ends', done => { \n  const files = [createFile()]; \n  const clearData = jasmine.createSpy('clearData'); \n\n  create() \n    .then(() => dragOver()) \n    .then(() => drop({ files })) \n    .then(() => dragEnd({ clearData })) \n    .then(() => expect(clearData).toHaveBeenCalled()) \n    .then(done); \n  }); \n//Omitted snippet... \n\n```", "```js\nimport {StageComponent} from 'aurelia-testing'; \nimport {bootstrap} from 'aurelia-bootstrapper'; \n\ndescribe('the list-editor custom element', () => { \n\n  let items, createItem, component, element; \n\n  beforeEach(() => { \n    items = []; \n    createItem = jasmine.createSpy('createItem'); \n    component = StageComponent \n      .withResources('resources/elements/list-editor') \n      .inView(`<list-editor items.bind=\"items\"  \n          add-item.call=\"createItem()\"></list-editor>`) \n      .boundTo({ items, createItem }); \n  }); \n\n  function create() { \n    return component.create(bootstrap).then(() => { \n      element = document.querySelector('list-editor'); \n    }); \n  } \n\n  afterEach(() => { \n    component.dispose(); \n  }); \n}); \n\n```", "```js\n//Omitted snippet... \nclass Item { \n  constructor(text) { \n    this.text = text; \n  } \n\n  toString() { \n    return this.text; \n  } \n} \n\n```", "```js\n<template> \n  <div class=\"form-group le-item\" repeat.for=\"item of items\"> \n    <template with.bind=\"item\"> \n      <template replaceable part=\"item\"> \n        <div class=\"col-sm-2 col-sm-offset-1\"> \n          <template replaceable part=\"label\"></template> \n        </div> \n        <div class=\"col-sm-8\"> \n          <template replaceable part=\"value\">${$this}</template> \n        </div> \n        <div class=\"col-sm-1\"> \n          <template replaceable part=\"remove-btn\"> \n            <button type=\"button\"  \n                    class=\"btn btn-danger le-remove-btn\"  \n                    click.delegate=\"items.splice($index, 1)\"> \n              <i class=\"fa fa-times\"></i> \n            </button> \n          </template> \n        </div> \n      </template> \n    </template> \n  </div> \n  <div class=\"form-group\" show.bind=\"addItem\"> \n    <div class=\"col-sm-9 col-sm-offset-3\"> \n      <button type=\"button\" class=\"btn btn-primary le-add-btn\"  \n              click.delegate=\"addItem()\"> \n        <slot name=\"add-button-content\"> \n          <i class=\"fa fa-plus-square-o\"></i> \n          <slot name=\"add-button-label\">Add</slot> \n        </slot> \n      </button> \n    </div> \n  </div> \n</template> \n\n```", "```js\n> au build\n\n```", "```js\n//Omitted snippet... \ndescribe('the list-editor custom element', () => { \n  //Omitted snippet... \n\n  function getItemsViews() { \n    return Array.from(element.querySelectorAll('.le-item'));   \n  }\nfunction clickRemoveButtonAt(index) { \n    const removeBtn = element \n      .querySelectorAll('.le-remove-btn')[index]; \n    removeBtn.click(); \n    return new Promise(setTimeout); \n  }\nfunction clickAddButton() { \n    const addBtn = element.querySelector('.le-add-btn'); \n    addBtn.click(); \n    return new Promise(setTimeout); \n  }\nfunction isItemRendered(item, itemsViews) { \n    return (itemsViews || getItemsViews()) \n      .some(iv => iv.textContent.includes(item.text)); \n  }\nfunction areAllItemsRendered() { \n    const itemsViews = getItemsViews(); \n    return items.every(i => isItemRendered(i, itemsViews)); \n  } \n}); \n\n```", "```js\n//Omitted snippet... \nit('should render one form-group per item', done => { \n  items.push(new Item('test item 1')); \n  items.push(new Item('test item 2')); \n\n  create() \n    .then(() => expect(areAllItemsRendered()).toBe(true)) \n    .then(done); \n}); \n//Omitted snippet... \n\n```", "```js\n//Omitted snippet... \nit('should remove the item when the remove button is clicked', done => { \n  items.push(new Item('test item 1')); \n  items.push(new Item('test item 2')); \n  items.push(new Item('test item 3')); \n\n  const indexToRemove = 1; \n  const itemToRemove = items[indexToRemove]; \n\n  create() \n    .then(() => clickRemoveButtonAt(indexToRemove))  \n    .then(() => expect(items.indexOf(itemToRemove)).toBe(-1)) \n    .then(() => expect(isItemRendered(itemToRemove)).toBe(false)) \n    .then(done); \n}); \n//Omitted snippet... \n\n```", "```js\n//Omitted snippet... \nit('should add new item when the add item button is clicked', done => { \n  items.push(new Item('test item 1')); \n  items.push(new Item('test item 2')); \n\n  const indexOfItemToAdd = items.length; \n  const itemToAdd = new Item('test item 3'); \n  createItem.and.callFake(() => { items.push(itemToAdd); }); \n\n  create() \n    .then(() => clickAddButton()) \n    .then(() => expect(items.indexOf(itemToAdd)) \n      .toBe(indexOfItemToAdd)) \n    .then(() => expect(isItemRendered(itemToAdd)).toBe(true)) \n    .then(done); \n}); \n//Omitted snippet... \n\n```", "```js\n import {ValidationError}\n  from 'aurelia-validation';\nimport {ContactCreation}\n  from '../../../../src/contacts/components/creation';\nimport {Contact} from '../../../../src/contacts/models/contact';\n\ndescribe('the contact creation component', () => {\n  let gateway, validationController, router, sut;\n  beforeEach(() => {\n    gateway = jasmine.createSpyObj('ContactGateway', ['create']);\n    validationController = jasmine.createSpyObj(\n       'ValidationController', ['validate']);\n    router = jasmine.createSpyObj('Router', ['navigateToRoute']);\n    sut = new ContactCreation(gateway, validationController,\n    router);\n   });\n});\n```", "```js\n//Omitted snippet... \nfunction createValidationError() { \n  return new ValidationError({}, 'Invalid', sut.contact,  \n    'firstName'); \n} \n//Omitted snippet... \n\n```", "```js\n//Omitted snippet... \nit('should do nothing when contact is invalid', done => { \n  const errors = [createValidationError()]; \n  validationController.validate.and \n    .returnValue(Promise.resolve(errors)); \n\n  sut.save() \n    .then(() => expect(gateway.create).not.toHaveBeenCalled()) \n    .then(() => expect(router.navigateToRoute) \n      .not.toHaveBeenCalled()) \n    .then(done); \n}); \n\nit('should create and navigate when contact is valid', done => { \n  validationController.validate.and \n    .returnValue(Promise.resolve([])); \n  gateway.create.and.returnValue(Promise.resolve()); \n\n  sut.save() \n    .then(() => expect(gateway.create) \n      .toHaveBeenCalledWith(sut.contact)) \n    .then(() => expect(router.navigateToRoute) \n      .toHaveBeenCalledWith('contacts')) \n    .then(done); \n}); \n//Omitted snippet... \n\n```", "```js\n> npm install gulp-protractor del --save-dev\n\n```", "```js\n{ \n  //Omitted snippet... \n  \"unitTestRunner\": { \n    \"id\": \"karma\", \n    \"displayName\": \"Karma\", \n    \"source\": \"test\\\\unit\\\\**\\\\*.js\" \n  }, \n \"e2eTestRunner\": { \n    \"id\": \"protractor\", \n    \"displayName\": \"Protractor\", \n    \"source\": \"test/e2e/src/**/*.js\", \n    \"output\": \"test/e2e/dist/\", \n    \"transpiler\": { \n      \"id\": \"babel\", \n      \"displayName\": \"Babel\", \n      \"options\": { \n        \"plugins\": [ \n          \"transform-es2015-modules-commonjs\" \n        ] \n      } \n    } \n  }, \n  //Omitted snippet... \n} \n\n```", "```js\n{ \n  \"name\": \"e2e\", \n  \"description\":  \n    \"Runs all end-to-end tests and reports the results.\", \n  \"flags\": [] \n} \n\n```", "```js\nimport gulp from 'gulp'; \nimport del from 'del'; \nimport {webdriver_update, protractor} from 'gulp-protractor'; \nimport plumber from 'gulp-plumber'; \nimport notify from 'gulp-notify'; \nimport changedInPlace from 'gulp-changed-in-place'; \nimport sourcemaps from 'gulp-sourcemaps'; \nimport babel from 'gulp-babel'; \nimport project from '../aurelia.json'; \nimport {CLIOptions} from 'aurelia-cli'; \n\nfunction clean() { \n  return del(project.e2eTestRunner.output + '*'); \n} \n\nfunction build() { \n  return gulp.src(project.e2eTestRunner.source) \n    .pipe(plumber({ \n      errorHandler: notify.onError('Error: <%= error.message %>') \n    })) \n    .pipe(changedInPlace({firstPass:true})) \n    .pipe(sourcemaps.init()) \n    .pipe(babel(project.e2eTestRunner.transpiler.options)) \n    .pipe(gulp.dest(project.e2eTestRunner.output)); \n} \n\nfunction run() { \n  return gulp.src(project.e2eTestRunner.output + '**/*.js') \n    .pipe(protractor({ \n      configFile: 'protractor.conf.js', \n      args: ['--baseUrl', 'http://127.0.0.1:9000'] \n    })) \n    .on('end', () => { process.exit(); }) \n    .on('error', e => { throw e; }); \n} \n\nexport default gulp.series( \n  webdriver_update, \n  clean, \n  build, \n  run \n); \n\n```", "```js\nexports.config = { \n  directConnect: true, \n\n  capabilities: { \n    'browserName': 'chrome' \n  }, \n\n  specs: ['test/e2e/dist/**/*.js'], \n\n  plugins: [{ \n    package: 'aurelia-tools/plugins/protractor' \n  }], \n\n  jasmineNodeOpts: { \n    showColors: true, \n    defaultTimeoutInterval: 30000 \n  } \n}; \n\n```", "```js\n> npm install\n\n```", "```js\nimport http from 'http'; \n\nexport function resetApi() { \n  const deferred = protractor.promise.defer(); \n\n  const request = http.request({ \n    protocol: 'http:', \n    host: '127.0.0.1', \n    port: 8000, \n    path: '/reset', \n    method: 'POST' \n  }, response => { \n    if (response.statusCode < 200 || response.statusCode >= 300) { \n      deferred.reject(response); \n    } else { \n      deferred.fulfill(); \n    } \n  }); \n  request.end(); \n\n  return deferred.promise; \n} \n\n```", "```js\nexport class ContactsListPO { \n\n  getTitle() { \n    return element(by.tagName('h1')).getText(); \n  } \n\n  getAllContacts() { \n    return element.all(by.css('.cl-details-link')) \n      .map(link => link.getText()); \n  } \n\n  clickContactLink(index) { \n    const result = {}; \n    const link = element.all( \n      by.css(`.cl-details-link`)).get(index); \n    link.getText().then(fullName => { \n      result.fullName = fullName; \n    }); \n    link.click(); \n    return browser.waitForRouterComplete().then(() => result); \n  } \n\n  clickNewButton() { \n    element(by.css('.cl-create-btn')).click(); \n    return browser.waitForRouterComplete(); \n  } \n\n  setFilter(value) { \n    element(by.valueBind('filter & debounce')) \n      .clear().sendKeys(value); \n    return browser.sleep(200); \n  } \n\n  clickClearFilter() { \n    element(by.css('.cl-clear-filter-btn')).click(); \n    return browser.sleep(200); \n  } \n} \n\n```", "```js\n<template> \n  <section class=\"container\"> \n    <h1>Contacts</h1> \n\n    <div class=\"row\"> \n      <div class=\"col-sm-1\"> \n        <a route-href=\"route: contact-creation\"  \n           class=\"btn btn-primary cl-create-btn\"> \n          <i class=\"fa fa-plus-square-o\"></i> New \n        </a> \n      </div> \n      <div class=\"col-sm-2\"> \n        <div class=\"input-group\"> \n          <input type=\"text\" class=\"form-control\"  \n                 placeholder=\"Filter\"  \n                 value.bind=\"filter & debounce\"> \n          <span class=\"input-group-btn\" if.bind=\"filter\"> \n            <button class=\"btn btn-default cl-clear-filter-btn\"  \n                    type=\"button\"  \n                    click.delegate=\"filter = ''\"> \n              <i class=\"fa fa-times\"></i> \n              <span class=\"sr-only\">Clear</span> \n            </button> \n          </span> \n        </div> \n      </div> \n    </div> \n\n    <group-list items.bind=\"contacts  \n                  | filterBy:filter:'firstName':'lastName': \n                    'company'\" \n                group-by=\"firstLetter\" order-by=\"fullName\"> \n      <template replace-part=\"item\"> \n        <a route-href=\"route: contact-details;  \n                       params.bind: { id: id }\"  \n           class=\"cl-details-link\"> \n          <span if.bind=\"isPerson\"> \n            ${firstName} <strong>${lastName}</strong> \n          </span> \n          <span if.bind=\"!isPerson\"> \n            <strong>${company}</strong> \n          </span> \n        </a> \n      </template> \n    </group-list> \n  </section> \n</template> \n\n```", "```js\nexport class ContactCreationPO { \n\n  getTitle() { \n    return element(by.tagName('h1')).getText(); \n  } \n} \n\n```", "```js\nexport class ContactDetailsPO { \n\n  getFullName() { \n    return element(by.tagName('h1')).getText(); \n  } \n} \n\n```", "```js\nimport {resetApi} from './api-mock.js'; \nimport {ContactsListPO} from './list.po.js'; \n\ndescribe('the contacts list page', () => { \n\n  let listPo; \n\n  beforeEach(done => { \n    listPo = new ContactsListPO(); \n\n    resetApi().then(() => { \n      browser \n        .loadAndWaitForAureliaPage('http://127.0.0.1:9000/') \n        .then(done); \n    }); \n  }); \n\n  it('should display the list of contacts', () => { \n    expect(listPo.getTitle()).toEqual('Contacts'); \n    listPo.getAllContacts().then(names => { \n      expect(names.length).toBeGreaterThan(0); \n    }); \n  }); \n}); \n\n```", "```js\n> npm start\n\n```", "```js\n> au run\n\n```", "```js\n> au e2e\n\n```", "```js\nimport {resetApi} from './api-mock.js'; \nimport {ContactsListPO} from './list.po.js'; \nimport {ContactDetailsPO} from './details.po.js'; \nimport {ContactCreationPO} from './creation.po.js'; \n\ndescribe('the contacts list page', () => { \n\n  let listPo, detailsPo, creationPo; \n\n  beforeEach(done => { \n    listPo = new ContactsListPO(); \n    detailsPo = new ContactDetailsPO(); \n    creationPo = new ContactCreationPO(); \n\n    resetApi().then(() => { \n      browser \n        .loadAndWaitForAureliaPage('http://127.0.0.1:9000/') \n        .then(done); \n    }); \n  }); \n\n  it('should load the list of contacts', () => { \n    expect(listPo.getTitle()).toEqual('Contacts'); \n    listPo.getAllContacts().then(names => { \n      expect(names.length).toBeGreaterThan(0); \n    }); \n  }); \n\n  it('should display details when clicking a contact link', () => { \n    listPo.clickContactLink(0).then(clickedContact => { \n      expect(detailsPo.getFullName()) \n        .toEqual(clickedContact.fullName); \n    }); \n  }); \n\n  it('should display the creation form when clicking New', () => { \n    listPo.clickNewButton(); \n\n    expect(creationPo.getTitle()).toEqual('New contact'); \n  }); \n\n  it('should filter the list', () => { \n    const searched = 'Google'; \n\n    listPo.setFilter(searched); \n\n    listPo.getAllContacts().then(names => { \n      expect(names.every(n => n.includes(searched))).toBe(true); \n    }); \n  }); \n\n  it('should reset unfiltered list when clicking clear filter', () =>  \n  { \n    let unfilteredNames; \n    listPo.getAllContacts().then(names => { \n      unfilteredNames = names; \n    }); \n    listPo.setFilter('Google'); \n\n    listPo.clickClearFilter(); \n\n    listPo.getAllContacts().then(names => { \n      expect(names).toEqual(unfilteredNames); \n    }); \n  }); \n}); \n\n```", "```js\nclass ListEditorPO { \n\n  constructor(property) { \n    this.property = property; \n  }  \n\n  _getContainer() { \n    return element(by.css( \n      `list-editor[items\\\\.bind=contact\\\\.${this.property}]`)); \n  } \n\n  _getItem(index) { \n    return this._getContainer() \n      .all(by.css(`.le-item`)) \n      .get(index); \n  }  \n\n  _selectOption(index, name, value) { \n    this._getItem(index) \n      .element(by.valueBind(`${name} & validate`)) \n      .element(by.css(`option[value=${value}]`)) \n      .click(); \n    return browser.sleep(200); \n  } \n\n  _setText(index, name, value) { \n    this._getItem(index) \n      .element(by.valueBind(`${name} & validate`)) \n      .clear() \n      .sendKeys(value); \n    return browser.sleep(200); \n  } \n\n  clickRemove(index) { \n    this._getItem(index) \n      .element(by.css(`.le-remove-btn`)) \n      .click(); \n    return browser.sleep(200); \n  } \n\n  clickAdd() { \n    this._getContainer() \n      .element(by.css(`.le-add-btn`)) \n      .click(); \n    return browser.sleep(200); \n  } \n} \n\n```", "```js\n//Omitted snippet... \n\nclass PhoneNumberListEditorPO extends ListEditorPO { \n\n  constructor() { \n    super('phoneNumbers'); \n  } \n\n  setType(index, value) { \n    return this._selectOption(index, 'type', value); \n  } \n\n  setNumber(index, value) { \n    return this._setText(index, 'number', value); \n  } \n} \n\nclass EmailAddressListEditorPO extends ListEditorPO { \n\n  constructor() { \n    super('emailAddresses'); \n  } \n\n  setType(index, value) { \n    return this._selectOption(index, 'type', value); \n  } \n\n  setAddress(index, value) { \n    return this._setText(index, 'address', value); \n  } \n} \n\nclass AddressListEditorPO extends ListEditorPO { \n\n  constructor() { \n    super('addresses'); \n  } \n\n  setType(index, value) { \n    return this._selectOption(index, 'type', value); \n  } \n\n  setNumber(index, value) { \n    return this._setText(index, 'number', value); \n  } \n\n  setStreet(index, value) { \n    return this._setText(index, 'street', value); \n  } \n\n  setPostalCode(index, value) { \n    return this._setText(index, 'postalCode', value); \n  } \n\n  setState(index, value) { \n    return this._setText(index, 'state', value); \n  } \n\n  setCountry(index, value) { \n    return this._setText(index, 'country', value); \n  } \n} \n\nclass SocialProfileListEditorPO extends ListEditorPO { \n\n  constructor() { \n    super('socialProfiles'); \n  } \n\n  setType(index, value) { \n    return this._selectOption(index, 'type', value); \n  } \n\n  setUsername(index, value) { \n    return this._setText(index, 'username', value); \n  } \n} \n\n```", "```js\n//Omitted snippet... \n\nexport class ContactFormPO { \n\n  constructor() { \n    this.phoneNumbers = new PhoneNumberListEditorPO(); \n    this.emailAddresses = new EmailAddressListEditorPO(); \n    this.addresses = new AddressListEditorPO(); \n    this.socialProfiles = new SocialProfileListEditorPO(); \n  } \n\n  _setText(name, value) { \n    element(by.valueBind(`contact.${name} & validate`)) \n      .clear() \n      .sendKeys(value); \n    return browser.sleep(200); \n  } \n\n  setFirstName(value) { \n    return this._setText('firstName', value); \n  } \n\n  setLastName(value) { \n    return this._setText('lastName', value); \n  } \n\n  setCompany(value) { \n    return this._setText('company', value); \n  } \n\n  setBirthday(value) { \n    return this._setText('birthday', value); \n  } \n\n  setNote(value) { \n    return this._setText('note', value); \n  } \n\n  getValidationErrors() { \n    return element.all(by.css('.validation-message')) \n      .map(x => x.getText()); \n  } \n} \n\n```", "```js\nimport {ContactFormPO} from './form.po.js'; \n\nexport class ContactCreationPO extends ContactFormPO { \n\n  getTitle() { \n    return element(by.tagName('h1')).getText(); \n  } \n\n  clickSave() { \n    element(by.buttonText('Save')).click(); \n    return browser.sleep(200); \n  } \n\n  clickCancel() { \n    element(by.linkText('Cancel')).click(); \n    return browser.sleep(200);\n } \n} \n\n```", "```js\nimport {resetApi} from './api-mock.js'; \nimport {ContactsListPO} from './list.po.js'; \nimport {ContactCreationPO} from './creation.po.js'; \n\ndescribe('the contact creation page', () => { \n\n  let listPo, creationPo; \n\n  beforeEach(done => { \n    listPo = new ContactsListPO(); \n    creationPo = new ContactCreationPO(); \n\n    resetApi().then(() => { \n      browser.loadAndWaitForAureliaPage('http://127.0.0.1:9000/'); \n      listPo.clickNewButton().then(done); \n    }); \n     });   \n}); \n\n```", "```js\nit('should display errors when clicking save and form is invalid', () => { \n  creationPo.setBirthDay('this is absolutely not a date'); \n  creationPo.phoneNumbers.clickAdd(); \n  creationPo.emailAddresses.clickAdd(); \n  creationPo.addresses.clickAdd(); \n  creationPo.socialProfiles.clickAdd(); \n\n  creationPo.clickSave(); \n\n  expect(creationPo.getTitle()).toEqual('New contact'); \n  expect(creationPo.getValidationErrors()).toEqual([ \n    'Birthday must be a valid date.',  \n    'Address is required.',      \n    'Number is required.',  \n    'Street is required.',  \n    'Postal Code is required.',  \n    'City is required.',  \n    'Country is required.',  \n    'Username is required.' \n  ]); \n}); \n\nit('should create contact when clicking save and form is valid', () => { \n  creationPo.setFirstName('Chuck'); \n  creationPo.setLastName('Norris'); \n  creationPo.setBirthDay('1940-03-10'); \n\n  creationPo.emailAddresses.clickAdd(); \n  creationPo.emailAddresses.setType(0, 'Office'); \n  creationPo.emailAddresses.setAddress(0,  \n    'himself@chucknorris.com'); \n\n  creationPo.clickSave(); \n\n  expect(listPo.getTitle()).toEqual('Contacts'); \n  expect(listPo.getAllContacts()).toContain('Chuck Norris'); \n}); \n\nit('should not create contact when clicking cancel', () => { \n  creationPo.setFirstName('Steven'); \n  creationPo.setLastName('Seagal'); \n\n  creationPo.clickCancel(); \n\n  expect(listPo.getTitle()).toEqual('Contacts'); \n  expect(listPo.getAllContacts()).not.toContain('Steven Seagal'); \n}); \n\n```"]