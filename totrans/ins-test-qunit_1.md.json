["```js\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <meta charset=\"UTF-8\" />\n        <title>Test Suite</title>\n        <link rel=\"stylesheet\" href=\"http://code.jquery.com/qunit/qunit-git.css\" type=\"text/css\" media=\"screen\">\n    </head>\n    <body>\n        <h1 id=\"qunit-header\">Test Suite</h1>\n        <h2 id=\"qunit-banner\"></h2>\n        <div id=\"qunit-testrunner-toolbar\"></div>\n       <h2 id=\"qunit-userAgent\"></h2>\n        <ol id=\"qunit-tests\"></ol>\n        <div id=\"qunit-fixture\">test markup</div>\n\n        <div id=\"sandbox\">\n            <!--Put here sandbox HTML if needed -->\n        </div>\n\n        <script type=\"text/javascript\" src=\"img/qunit-git.js\"></script>\n        <script type=\"text/javascript\">\n            QUnit.test( \"Test example\", function( assert ){\n                assert.ok( true );\n            });\n        </script>\n    </body>\n    </html>\n    ```", "```js\nQUnit.config.autostart = false;\nrequire(\n  [ \"test-module1\", \"test-module2\" ],\n  function() {\n    QUnit.start();\n  }\n);\n```", "```js\napp-wwwroot/\n  ├── js/\n  │   └── moduleA.js\n  └── tests/\n      ├── moduleA/\n      │    ├── dummies.js\n      │    ├── stubs.js\n      │    ├── mocks.js\n      │    ├── fixtures.js\n      │    └── unit-tests.js\n      └── unit-tests.html\n```", "```js\nvar utils = (function() {\n  \"use strict\";\n  return {\n    /**\n     * Port of PHP trim function which differ from EcmaScript 5 String.prototype.trim\n     * Strip whitespace (or other characters) from the beginning and end of a string\n     * Without the second parameter, trim() will strip these characters:\n     * \" \" (ASCII 32 (0x20)), an ordinary space.\n     * «\\t» (ASCII 9 (0x09)), a tab.\n     * \"\\n\" (ASCII 10 (0x0A)), a new line (line feed).\n     * \"\\r\" (ASCII 13 (0x0D)), a carriage return.\n     * \"\\0\" (ASCII 0 (0x00)), the NUL-byte.\n     * \"\\x0B\" (ASCII 11 (0x0B)), a vertical tab.\n     * @param {string} str\n     * @param {string} charlist\n     * @return {string}\n     */\n    trim: function( str, charlist ) {\n      charlist = charlist || \" \\t\\n\\r\\0\\x0B\";\n      return str.replace( new RegExp( \"^[\" + charlist + \"]+|[\" + charlist + \"]+$\", \"g\" ), '' );\n    },\n    /**\n     * Emulate class-based inheritance.\n     * <example>\n     * ClassA = function() {}\n     * ClassB = utils.extendClass(ClassA, {\n     *   prop: true\n     * });\n     * </example>\n     */\n    extendClass: function( SuperType, subType ) {\n      var prop,\n          F = function(){};\n      F.prototype = new SuperType();\n      F.prototype.constructor = SuperType;\n      for ( prop in subType ) {\n        if ( subType.hasOwnProperty( prop ) ) {\n          F.prototype[ prop ] = subType[ prop ];\n        }\n      }\n      return F;\n    }\n  };\n}( this ));\n```", "```js\n    QUnit.test( \"Test title\", function( assert ) {\n      assert.<assertion-method>( comparison of actual and expected values, \"assertion title\" );\n    });\n    ```", "```js\n    test( \"Test title\", function() {\n     <assertion-method>( comparison of actual and expected values, \"assertion title\" );\n    });\n    ```", "```js\n    QUnit.test( \"Test utils.trim function\", function( assert ) {\n      assert.eq ual( utils.trim(\" .. \"), \"..\", \"trims spaces\" );\n      assert.notEqual( utils.trim(\" .. \"), \" .. \", \"does not ignore trimming\" );\n    });\n    ```", "```js\n    QUnit.test( \"Test utils.trim function\", function( assert ) {\n      assert.strictEqual( utils.trim(\" .. \"), \"..\", \"trims spaces\" );\n      assert.notStrictEqual( utils.trim(\" .. \"), \" .. \", \"does not ignore trimming\" );\n    });\n    ```", "```js\n    assert.notEqual( \" \\n\\r\\t \", false ); // fails\n    assert.notStrictEqual( \" \\n\\r\\t \", false ); // passes\n    ```", "```js\n    QUnit.test( \"Test utils.extendClass function\", function( assert ) {\n      var ClassA = function() {\n        this.propA = true;\n      },\n      ClassB = utils.extendClass( ClassA, {\n        propB: true\n      }),\n      ClassC = utils.extendClass( ClassB, {\n        propC: true\n      }),\n      obj = new ClassC();\n\n      assert.ok( obj instanceof ClassA, \"it is an instance of ClassA\" );\n      assert.ok( obj instanceof ClassB, \"it is an instance of ClassB\" );\n      assert.ok( obj instanceof ClassC, \"it is an instance of ClassC\" );\n\n    });\n    ```", "```js\n    QUnit.test( \"Examine deepEqual\", function( assert ) {\n      var dummy1 = {\n        propA: true,\n        propB: true\n      },\n      dummy2 = {\n        propA: true,\n        propB: true\n      };\n\n      assert.notStrictEqual( dummy1, dummy2, \"that is not refernces on the same object\" );\n      assert.deepEqual( dummy1, dummy2, \"but they are identical\" );\n    });\n    ```", "```js\nQUnit\n        .cases([\n            { str: ' string ', charlist: null, expected : 'string' },\n            { str: '  string  ', charlist: null, expected : 'string' },\n            { str: '\\t\\n\\rstring  ', charlist: null, expected : 'string' },\n            { str: '||string|', charlist: \"|\", expected : 'string' },\n\n        ])\n        .test(\"Test trim\", function( params ) {\n            var expected = utils.trim( params.str, params.charlist );\n            strictEqual( expected, params.expected );\n        });\n```", "```js\nvar a = 1.1234,\n    b = 1.1230;\n\nconsole.log( ( Math.round( parseFloat( a ) * 1000 ) / 1000 ) === \n    ( Math.round( parseFloat( b ) * 1000 ) / 1000 ) );\n```", "```js\nassert.close(actual, expected, maxDifference, message);\nassert.notClose(actual, expected, minDifference, message);\n```", "```js\n(function(){\n    'use strict';\n    var closeToPi = 3.141,\n        notCloseToPi = 3.1;\n\n    test('Test closeToPi is close to PI till 1/1000', function( assert ) {\n        assert.close( closeToPi, Math.PI, 0.001 );\n    });\n    test('Test notCloseToPi isn\\'t close to PI till 1/1000', function( assert ) {\n        assert.notClose( 3.1, Math.PI, 0.001 );\n    });\n\n}( this )); \n```", "```js\n(function(){\n    'use strict';\n    test('Test \"foo\" is invoked after \"bar\"', function( assert ) {\n         function foo() {\n            assert.step( 2 );\n         }\n         function bar() {\n            assert.step( 1, \"bar is invoked first\" );\n         }\n         bar();\n         foo();\n    });\n}( this )); \n```", "```js\n<div id=\"sandbox\"><canvas width=\"5\" height=\"5\"></canvas></div>\n<script type=\"text/javascript\" src=\"img/qunit-git.js\"></script>\n<script type=\"text/javascript\" src=\"img/qunit-assert-canvas.js\"></script>\n<script type=\"text/javascript\">\n(function( window ){\n    'use strict';\n    var document = window.document,\n        canvas = document.getElementById('sandbox').firstChild,\n        context = canvas.getContext('2d');\n\n    test('Test the dot at 0,0 is black', function( assert ) {\n      context.fillStyle = 'rgba(0, 0, 0, 0)';\n      context.fillRect( 0, 0, 10, 10 );\n      assert.pixelEqual( canvas, 0, 0, 0, 0, 0, 0 );\n    });\n\n}( this ));\n</script>\n```", "```js\n(function( global ){\n        'use strict';\n\n        test('Test HTML strings are equal', function(assert) {\n            assert.htmlEqual('<B TITLE=test>test</B>', '<b title=\"test\">test</b>');\n        });\n\n}( this ));\n```", "```js\n    function isVisible( node ) {\n      return node.style.visibility !== \"hidden\" &&\n              node.style.display !== \"none\";\n    }\n    ```", "```js\n    (function( global ){\n        \"strict mode\";\n        var QUnit = global.QUnit;\n        QUnit.extend( QUnit.assert, {\n            /**\n             * Check if a supplied element is visible\n             *\n             * @example assert.isVisible(document.getElementById(\"#id\"));\n             * @param {object} HTMLElement\n             */\n            isVisible: function( node ) {\n                this.ok( node.style.visibility !== \"hidden\" && \n                  node.style.display !== \"none\" )\n            }\n        });\n    }( this ));\n    ```", "```js\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <meta charset=\"UTF-8\" />\n        <title>Plugin Usage Example</title>\n        <link rel=\"stylesheet\" href=\"http://code.jquery.com/qunit/qunit-git.css\" type=\"text/css\" media=\"screen\">\n    </head>\n    <body>\n        <h1 id=\"qunit-header\">Plugin Usage Example</h1>\n        <h2 id=\"qunit-banner\"></h2>\n        <div id=\"qunit-testrunner-toolbar\"></div>\n        <h2 id=\"qunit-userAgent\"></h2>\n        <ol id=\"qunit-tests\"></ol>\n        <div id=\"qunit-fixture\">test markup</div>\n\n        <div id=\"sandbox\">\n          <div id=\"myTarget\"><!-- --></div>\n        </div>\n\n        <script type=\"text/javascript\" src=\"img/qunit-git.js\"></script>\n        <script type=\"text/javascript\" src=\"img/qunit-assert-is-visible.js\"></script>\n        <script type=\"text/javascript\">\n            \"strict mode\";\n            QUnit.test( \"Test myTarget is visible\", function( assert ){\n              var node = document.getElementById(\"myTarget\");\n                assert.isVisible( node );\n            });\n        </script>\n    </body>\n    </html>\n    ```", "```js\nvar trim = function( str, charlist ) {\n\n  if ( typeof str !== \"string\" ) {\n    throw new this.InvalidTypeException(\"str argument must be a string\");\n  }\n  if ( charlist && typeof charlist !== \"string\" ) {\n    throw new this.InvalidTypeException(\"charlist argument must be a string\");\n  }\n  if ( !str.length ) {\n    throw new this.InvalidReferenceException(\"str argument must be empty\");\n  }\n\n  charlist = charlist || \" \\t\\n\\r\\0\\x0B\";\n  return str.replace( new RegExp( \"^[\" + charlist + \"]+|[\" + charlist + \"]+$\", \"g\" ), '' );\n}\n```", "```js\n\"strict mode\";\nvar utils = (function( global ) {\n  \"use strict\";\n  return {\n    /**\n     * Port of PHP trim function \n     * @param {string} str\n     * @param {string} charlist\n     * @return {string}\n     */\n    trim: function( str, charlist ) {\n    // function body from the example above\n   },\n    /**\n    * @constructor\n    */\n    InvalidReferenceException: function( message ) {\n       this.name = \"InvalidReferenceException\";\n       this.message = message || \"InvalidReferenceException thrown\";\n    },\n    /**\n    * @constructor\n    */\n    InvalidTypeException: function( message ) {\n       this.name = \"InvalidTypeException\";\n       this.message = message || \"InvalidTypeException thrown\";\n    }\n  };\n}());\n\n // Inherit from ReferenceError\nutils.InvalidReferenceException.prototype = new ReferenceError();\nutils.InvalidReferenceException.prototype.constructor = utils.InvalidReferenceException;\n// Inherit from TypeError\nutils.InvalidTypeException.prototype = new TypeError();\nutils.InvalidTypeException.prototype.constructor = utils.InvalidTypeException;  \n```", "```js\n    QUnit.test( \"Test title\", function( assert ) {\n      assert.throws( \"callback throwing exception, expected exception\", \"assertion title\" );\n    });\n    ```", "```js\n    QUnit.test( \"Test utils.trim contract violation\", function( assert ){\n      assert.throws( function() {\n          utils.trim(\"\");\n        }, utils.InvalidReferenceException, \n        \"str agrument must not be empty\" \n      );\n      assert.throws( function() {\n          utils.trim( 1 );\n        }, utils.InvalidTypeException, \n        \"str agrument must be a string\" \n      );\n      assert.throws( function() {\n          utils.trim( \"string\", 1 );\n        }, utils.InvalidTypeException, \n        \"charlist agrument must be a string\" \n      );\n    });\n    ```", "```js\nwindow.setTimeout( function() {\n    yourFunc1( param1, paramN );\n}, 0);\n```", "```js\n      /**\n       * Test async. called function\n       * @param {string} test title\n       * @param {number} number of expected assertions\n       * @param {function) test scope\n       */\n    QUnit.asyncTest( \"Test title\", 1, function( assert ){\n    });\n    ```", "```js\n      /**\n       * Test async. called function\n       * @param {string} test title\n       * @param {number} number of expected assertions\n       * @param {function) test scope\n       */\n      QUnit.asyncTest( \"Test async control\", 1, function( assert ){\n          window.setTimeout( function() {\n            assert.ok( true, \"captured\" );\n            QUnit.start();\n          }, 0);\n      });\n    ```", "```js\nvar\n  /**\n   * Object representing an abstract RSS Feed\n   * @constructor\n   */\n  RssFeed = function() {\n    var xml;\n    return {\n      /**\n       * Load data from a remote source\n       * @param {string} url\n       */\n      loadData: function( url ) {\n          $.get( url, function( rsp ){\n            xml = rsp;\n          });\n      },\n      /**\n       * Get last loaded data\n       */\n      getData: function() {\n        return xml;\n      }\n    };\n  };\n\n  QUnit.asyncTest( \"Test RssFeed.loadData requests remote source\", 1, function( assert ){\n      var feed = new RssFeed();\n\n       /**\n        * Mock XHR helper just for the case\n        * @param {string} url\n        * @param {function} callback\n        */\n       $.get = function( url, callback ) {\n         window.setTimeout( function(){\n               callback(\"data\");\n               assert.ok( true, \"data requested\" );\n               QUnit.start();\n           }, 0 );\n       };\n      feed.loadData(\"http://google.com\");\n  });\n```", "```js\nvar ResetPasswordForm = function() {\n    return {\n      /** Render and synchronize UI */\n      init: function() {\n      },\n      /** Show panel */\n      show: function() {},\n      /** Hide panel */\n      hide: function() {},\n      /** Validate form input */\n      validateInput: function() {}\n    };\n  },\n  SignInForm = function() {\n    return {\n      /** Render and synchronize UI */\n      init: function() {\n      },\n      /** Show panel */\n      show: function() {},\n      /** Hide panel */\n      hide: function() {},\n      /** Validate form input */\n      validateInput: function() {}\n    };\n  }\n```", "```js\n    QUnit.module(\"SignInForm\");\n    ```", "```js\n    QUnit.test( \"show method\", function( assert ){\n        // Stub assertion\n        assert.ok( true );\n      });\n      QUnit.test( \"hide method\", function( assert ){\n        // Stub assertion\n        assert.ok( true );\n      });\n      QUnit.test( \"validateInput method\", function( assert ){\n        // Stub assertion\n        assert.ok( true );\n      });\n    Repeat the flow for the ResetPasswordForm constructor.\n    // Define the group\n      QUnit.module(\"ResetPasswordForm\");\n      QUnit.test( \"show method\", function( assert ){\n        // Stub assertion\n        assert.ok( true );\n      });\n      QUnit.test( \"hide method\", function( assert ){\n        // Stub assertion\n        assert.ok( true );\n      });\n      QUnit.test( \"validateInput method\", function( assert ){\n        // Stub assertion\n        assert.ok( true );\n      });\n    ```", "```js\n/**\n   * @constructor\n   * @returns {object}\n   */\n  var SignInForm = function( boundingBox ) {\n    return {\n      /** Show panel */\n      show: function() {\n        boundingBox.style.display = \"inline-block\";\n      },\n      /** Hide panel */\n      hide: function() {\n        boundingBox.style.display = \"none\";\n      }\n    };\n  };\n```", "```js\n    QUnit.module(\"SignInForm\");\n    ```", "```js\n      QUnit.module(\"SignInForm\", {\n        setup: function() {\n        },\n        teardown: function() {\n        }\n    });\n    ```", "```js\n    QUnit.module(\"SignInForm\", {\n        // set up testing environment\n        setup: function() {\n          this.fixture = document.createElement(\"div\");\n          document.getElementsByTagName('body')[ 0 ].appendChild( this.fixture );\n        },\n        // restore the initial state\n        teardown: function() {\n          document.getElementsByTagName('body')[ 0 ].removeChild( this.fixture );\n        }\n    });\n    ```", "```js\n    ..\n        setup: function() {\n          this.fixture = document.createElement(\"div\");\n          document.getElementsByTagName('body')[ 0 ].appendChild( this.fixture );\n          this.form = new SignInForm( this.fixture );\n        },\n    ..\n    ```", "```js\n    // Test hide method\n      QUnit.test( \"hide method\", function( assert ){\n        this.form.hide();\n        assert.strictEqual( this.fixture.style.display, \"none\" );\n      });\n      // Test show method\n      QUnit.test( \"show method\", function( assert ){\n        this.form.show();\n        assert.notStrictEqual( this.fixture.style.display, \"none\" );\n    });\n    ```", "```js\n\"strict mode\";\n\nthis.utils = {\n    /**\n     * Fire a suplied event on a given element\n     * @param {object} el instance of HTMLElement\n     * @param {string} eventName\n     */\n    trigger: function( el, eventName ) {\n        var e = document.createEvent(\"Event\");\n        e.initEvent( eventName, true, true );\n        el.dispatchEvent( e );\n    },\n    /**\n     * Subscribe handler for event on a supplied element\n     * @param {object} el instance of HTMLElement\n     * @param {string} eventName\n     * @param {function} handlerCb\n     */\n    subscribe: function( el, eventName, handlerCb ) {\n        el.addEventListener( eventName, function( e ) {\n            handlerCb( e ); \n        }, false );\n    }\n};\n\n(function( global ){\n  var document = global.document,\n      utils = global.utils;\n\n  utils.subscribe( global, \"load\", function() {\n    utils.subscribe( document.getElementById(\"calc\"), \"click\", function( e ) {\n      var num1 = document.getElementById(\"num1\"),\n          num2 = document.getElementById(\"num2\"),\n          sum = document.getElementById(\"sum\");\n\n      e.preventDefault();\n      sum.value = parseInt(num1.value, 10) +\n        parseInt(num2.value, 10);\n    });  \n  });\n}( this )); \n```", "```js\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\" />\n        <title>Calc</title>\n        <link href=\"//netdna.bootstrapcdn.com/twitter-bootstrap/2.3.1/css/bootstrap-combined.min.css\" rel=\"stylesheet\">\n        <style>\n          .container {\n            margin: 32px;\n          }\n        </style>\n    </head>\n    <body>\n    <div class=\"container\">\n      <form class=\"form-inline\">\n        <input id=\"num1\" type=\"text\" class=\"input-small\" placeholder=\"Summand\">\n        <span>+</span>\n        <input id=\"num2\" type=\"text\" class=\"input-small\" placeholder=\"Summand\">\n        <span>=</span>\n        <input id=\"sum\" type=\"text\" class=\"input-small\" placeholder=\"Sum\">\n        <button  id=\"calc\" type=\"button\" class=\"btn btn-primary\">Calculate</button>\n        <button type=\"reset\" class=\"btn btn-danger\">Reset</button>\n      </form>\n    </div>\n    <script src=\"img/calc.js\"></script>\n    </body>\n</html>\n```", "```js\n    utils.subscribe( global, \"load\", function() {\n                 var calc =  document.getElementById(\"calc\"),\n                     num1 = document.getElementById(\"num1\"),\n                     num2 = document.getElementById(\"num2\"),\n                     sum = document.getElementById(\"sum\");\n    });\n    ```", "```js\n    utils.subscribe( global, \"load\", function() {\n                 var calc =  document.getElementById(\"calc\"),\n                     num1 = document.getElementById(\"num1\"),\n                     num2 = document.getElementById(\"num2\"),\n                     sum = document.getElementById(\"sum\");\n\n                QUnit.test( \"Test that calc sums up typed in numbers by click\", function( assert ){\n                    num1.value = \"5\";\n                    num2.value = \"7\";\n                    utils.trigger( calc, \"click\" );\n                    assert.strictEqual( sum.value, \"12\" );\n                });\n      });\n    ```", "```js\nbrew install phantomjs\n\n```", "```js\n    phantomjs runner.js test-suite.html \n\n    ```", "```js\n    brew install node\n\n    ```", "```js\n    npm install -g grunt-cli\n\n    ```", "```js\n    {\n      \"name\": \"project-name\",\n      \"description\": \"Project description\",\n      \"version\": \"0.0.1\",\n      \"devDependencies\": {\n        \"grunt\": \"~0.4.1\",\n        \"grunt-contrib-qunit\": \"~0.2.1\",\n        \"qunitjs\": \"1.x\"\n      }\n    }\n    ```", "```js\n    npm install \n\n    ```", "```js\n    module.exports = function(grunt) {\n      grunt.loadNpmTasks(\"grunt-contrib-qunit\");\n\n      grunt.initConfig({\n        qunit: {\n          all: [\"tests/test-suite.html\"]\n        }\n      });\n\n      grunt.registerTask(\"test\", [\"qunit\"]);\n      grunt.registerTask(\"default\", [\"test\"]);\n\n    };\n    ```", "```js\nnpm install -g bunyip\n\n```", "```js\n    if (QUnit && QUnit.config) { \n        QUnit.config.autostart = false; \n    }\n    ```", "```js\n    bunyip -f test-suite.html\n\n    ```", "```js\n\nQUnit.jUnitReport = function(report) {\nconsole.log(report.xml);\n};\n```", "```js\n    <?xml version=\"1.0\"?>\n    <!DOCTYPE project>\n    <project name=\"tree\"  basedir=\".\" default=\"build\">\n    <target name=\"build\" description=\"runs QUnit tests using PhantomJS\">\n      <!-- Clean up output directory -->\n      <delete dir=\"./build/qunit/\"/>  \n      <mkdir dir=\"./build/qunit/\"/>  \n      <!-- QUnit Javascript Unit Tests -->\n      <echo message=\"Executing QUnit Javascript Unit Tests...\"/>\n\n    </target>\n    </project>\n    ```", "```js\n    <?xml version=\"1.0\"?>\n    <!DOCTYPE project>\n    <project name=\"tree\"  basedir=\".\" default=\"build\">\n    <target name=\"build\" description=\"runs QUnit tests using PhantomJS\">\n      <!-- Clean up output directory -->\n      <delete dir=\"./build/qunit/\"/>\n      <mkdir dir=\"./build/qunit/\"/>\n      <!-- QUnit Javascript Unit Tests -->\n      <echo message=\"Executing QUnit Javascript Unit Tests...\"/>\n      <exec executable=\"/usr/local/bin/phantomjs\" output=\"./build/qunit/qunit-results.xml\">\n        <arg value=\"./vendors/Runner/runner-muted.js\" />\n        <arg value=\"http://test.dev/qunit/tests/test11/index.html\" />\n      </exec>\n    </target>\n    </project>\n    ```", "```js\n    ant\n\n    ```", "```js\n    sudo brew install jenkins \n\n    ```", "```js\ncd ~/.ssh\nssh-keygen -f jenkins_rsa -C 'Some comment' -N '' -t rsa -q\n\n```", "```js\nscp jenkins_rsa.pub git@our-git-server.com:/home/git/.ssh\n\n```", "```js\nHost git@our-git-server.com \n IdentityFile ~/.ssh/jenkins_rsa\n\n```"]