["```js\n<template> \n  <select value.bind=\"selectedCountry\"> \n    <option>Select your country</option> \n    <option repeat.for=\"country of countries\"  \n            value.bind=\"country\">${country}</option> \n  </select> \n</template> \n\n```", "```js\n<template> \n  <select value.bind=\"selectedCulture\"> \n    <option>Select your culture</option> \n    <option repeat.for=\"culture of cultures\"  \n            model.bind=\"culture\">${culture.name}</option> \n  </select> \n</template> \n\n```", "```js\n<template> \n  <select value.bind=\"selectedCultureIsoCode\"> \n    <option>Select your culture</option> \n    <option repeat.for=\"culture of cultures\"  \n            value.bind=\"culture.isoCode\">${culture.name}</option> \n  </select> \n</template> \n\n```", "```js\n<template> \n  <select value.bind=\"selectedCountries\" multiple> \n    <option repeat.for=\"country of countries\"  \n            value.bind=\"country\">${country}</option> \n  </select> \n</template> \n\n```", "```js\n<template> \n  <select value.bind=\"selectedCultures\" multiple> \n    <option repeat.for=\"culture of cultures\"  \n            model.bind=\"culture\">${culture.name}</option> \n  </select> \n</template> \n\n```", "```js\n<template> \n  <select value.bind=\"selectedCulturesIsoCodes\" multiple> \n    <option repeat.for=\"culture of cultures\"  \n            value.bind=\"culture.isoCode\">${culture.name}</option> \n  </select> \n</template> \n\n```", "```js\n<template> \n  <select value.bind=\"selectedCulture\" matcher.bind=\"matchCulture\"> \n    <option>Select your culture</option> \n    <option repeat.for=\"culture of cultures\"  \n            model.bind=\"culture\">${culture.name}</option> \n  </select> \n</template> \n\n```", "```js\nexport class ViewModel { \n  matchCulture = (culture1, culture2) => culture1.isoCode === culture2.isoCode; \n} \n\n```", "```js\n<template> \n  <input type=\"text\" value.bind=\"title\"> \n</template> \n\n```", "```js\n<template> \n  <input type=\"file\" accepts=\"image/*\" files.bind=\"images\"> \n</template> \n\n```", "```js\n<template> \n  <label repeat.for=\"country of countries\"> \n    <input type=\"radio\" name=\"countries\" value.bind=\"country\"  \n           checked.bind=\"selectedCountry\"> \n    ${country} \n  </label> \n</template> \n\n```", "```js\n<template> \n  <label repeat.for=\"culture of cultures\"> \n    <input type=\"radio\" name=\"cultures\" model.bind=\"culture\"  \n              checked.bind=\"selectedCulture\"> \n    ${culture.name} \n  </label> \n</template> \n\n```", "```js\n<template> \n  <h4>Do you speak more than one language?</h4> \n  <label> \n    <input type=\"radio\" name=\"isMultilingual\" model.bind=\"null\"  \n           checked.bind=\"isMultilingual\">  \n    That's none of your business \n  </label> \n  <label> \n    <input type=\"radio\" name=\"isMultilingual\" model.bind=\"true\"  \n           checked.bind=\"isMultilingual\"> \n    Yes \n  </label> \n  <label> \n    <input type=\"radio\" name=\"isMultilingual\" model.bind=\"false\"  \n           checked.bind=\"isMultilingual\"> \n    No \n  </label> \n</template> \n\n```", "```js\n<template> \n  <label repeat.for=\"country of countries\"> \n    <input type=\"checkbox\" value.bind=\"country\"  \n           checked.bind=\"selectedCountries\"> \n    ${country} \n  </label> \n</template> \n\n```", "```js\n<template> \n  <label> \n    <input type=\"checkbox\" model.bind=\"culture\"  \n           checked.bind=\"selectedCultures\"> \n    ${culture.name} \n  </label> \n</template> \n\n```", "```js\n<template> \n  <label> \n    <input type=\"checkbox\" value.bind=\"culture.isoCode\"  \n           checked.bind=\"selectedCulturesIsoCodes\"> \n    ${culture.name} \n  </label> \n</template> \n\n```", "```js\n<template> \n  <label> \n    <input type=\"checkbox\" checked.bind=\"speaksFrench\">French \n  </label> \n  <label> \n    <input type=\"checkbox\" checked.bind=\"speaksEnglish\">English \n  </label> \n  <label> \n    <input type=\"checkbox\" checked.bind=\"speaksGerman\">German \n  </label> \n</template> \n\n```", "```js\n<template> \n  <textarea value.bind=\"text\"></textarea> \n</template> \n\n```", "```js\n<template> \n  <input type=\"text\" disabled.bind=\"isSending\"> \n  <button disabled.bind=\"isSending\">Send</button> \n</template> \n\n```", "```js\n<template> \n  <input type=\"text\" readonly.bind=\"!canEdit\"> \n</template> \n\n```", "```js\nexport class App { \n  configureRouter(config, router) { \n    this.router = router; \n    config.title = 'Learning Aurelia'; \n    config.map([ \n      { route: '', redirect: 'contacts' }, \n      { route: 'contacts', name: 'contacts', moduleId:        'contact-list',  \n        nav: true, title: 'Contacts' }, \n      { route: 'contacts/new', name: 'contact-creation',  \n        moduleId: 'contact-edition', title: 'New contact' }, \n      { route: 'contacts/:id', name: 'contact-details',  \n        moduleId: 'contact-details' }, \n      { route: 'contacts/:id/edit', name: 'contact-edition',  \n        moduleId: 'contact-edition' }, \n      { route: 'contacts/:id/photo', name: 'contact-photo', \n        moduleId: 'contact-photo' }, \n    ]); \n    config.mapUnknownRoutes('not-found'); \n  } \n} \n\n```", "```js\n <template> \n  <section class=\"container\"> \n    <h1>Contacts</h1> \n\n    <div class=\"row\"> \n      <div class=\"col-sm-1\"> \n        <a route-href=\"route: contact-creation\" class= \"btn btn-primary\"> \n          <i class=\"fa fa-plus-square-o\"></i> New \n        </a> \n      </div> \n      <div class=\"col-sm-2\"> \n        <!-- Search box omitted for brevity --> \n      </div> \n    </div> \n    <!--  Contact list omitted for brevity --> \n  </section> \n</template> \n\n```", "```js\n <template> \n  <section class=\"container\"> \n    <div class=\"row\"> \n      <div class=\"col-sm-2\"> \n        <a route-href=\"route: contact-photo; params.bind:\n          { id: contact.id }\"  \n           > \n          <img src.bind=\"contact.photoUrl\" class= \"img-responsive\" alt=\"Photo\"> \n        </a> \n      </div> \n      <div class=\"col-sm-10\"> \n        <template if.bind=\"contact.isPerson\"> \n          <h1>${contact.fullName}</h1> \n          <h2>${contact.company}</h2> \n        </template> \n        <template if.bind=\"!contact.isPerson\"> \n          <h1>${contact.company}</h1> \n        </template> \n        <a class=\"btn btn-default\" route-href=\"route:\n          contact-edition;  \n          params.bind: { id: contact.id }\"> \n          <i class=\"fa fa-pencil-square-o\"></i> Modify \n        </a> \n      </div> \n    </div> \n    <!-- Rest of template omitted for brevity --> \n  </section> \n</template> \n\n```", "```js\nexport class PhoneNumber { \n  static fromObject(src) { \n    return Object.assign(new PhoneNumber(), src); \n  } \n\n  type = 'Home'; \n  number = ''; \n} \n\nexport class EmailAddress { \n  static fromObject(src) { \n    return Object.assign(new EmailAddress(), src); \n  } \n\n  type = 'Home'; \n  address = ''; \n} \n\nexport class Address { \n  static fromObject(src) { \n    return Object.assign(new Address(), src); \n  } \n\n  type = 'Home'; \n  number = ''; \n  street = ''; \n  postalCode = ''; \n  city = ''; \n  state = ''; \n  country = ''; \n} \n\nexport class SocialProfile { \n  static fromObject(src) { \n    return Object.assign(new SocialProfile(), src); \n  } \n\n  type = 'GitHub'; \n  username = ''; \n} \n\nexport class Contact { \n  static fromObject(src) { \n    const contact = Object.assign(new Contact(), src); \n    contact.phoneNumbers = contact.phoneNumbers \n      .map(PhoneNumber.fromObject); \n    contact.emailAddresses = contact.emailAddresses \n      .map(EmailAddress.fromObject); \n    contact.addresses = contact.addresses \n      .map(Address.fromObject); \n    contact.socialProfiles = contact.socialProfiles \n      .map(SocialProfile.fromObject); \n    return contact; \n  } \n\n  firstName = ''; \n  lastName = ''; \n  company = ''; \n  birthday = ''; \n  phoneNumbers = []; \n  emailAddresses = []; \n  addresses = []; \n  socialProfiles = []; \n  note = ''; \n\n  // Omitted snippet... \n} \n\n```", "```js\nimport {inject} from 'aurelia-framework'; \nimport {ContactGateway} from './contact-gateway'; \nimport {Contact} from './models'; \n\n@inject(ContactGateway) \nexport class ContactEdition { \n  constructor(contactGateway) { \n    this.contactGateway = contactGateway; \n  } \n\n  activate(params, config) { \n    this.isNew = params.id === undefined; \n    if (this.isNew) { \n      this.contact = new Contact(); \n    } \n    else { \n      return this.contactGateway.getById(params.id).then(contact => { \n        this.contact = contact; \n        config.navModel.setTitle(contact.fullName); \n      }); \n    } \n  } \n} \n\n```", "```js\n <template> \n  <section class=\"container\"> \n    <h1 if.bind=\"isNew\">New contact</h1> \n    <h1 if.bind=\"!isNew\">Contact #${contact.id}</h1> \n\n    <form class=\"form-horizontal\"> \n      <!-- The rest of the template goes in here --> \n    </form> \n  </section> \n</template> \n\n```", "```js\n<div class=\"form-group\"> \n  <label class=\"col-sm-3 control-label\">First name</label> \n  <div class=\"col-sm-9\"> \n    <input type=\"text\" class=\"form-control\" value.bind=\"contact.firstName\"> \n  </div> \n</div> \n\n<div class=\"form-group\"> \n  <label class=\"col-sm-3 control-label\">Last name</label> \n  <div class=\"col-sm-9\"> \n    <input type=\"text\" class=\"form-control\" value.bind=\"contact.lastName\"> \n  </div> \n</div> \n\n<div class=\"form-group\"> \n  <label class=\"col-sm-3 control-label\">Company</label> \n  <div class=\"col-sm-9\"> \n    <input type=\"text\" class=\"form-control\" value.bind=\"contact.company\"> \n  </div> \n</div> \n\n<div class=\"form-group\"> \n  <label class=\"col-sm-3 control-label\">Birthday</label> \n  <div class=\"col-sm-9\"> \n    <input type=\"date\" class=\"form-control\" value.bind=\"contact.birthday\"> \n  </div> \n</div> \n\n<div class=\"form-group\"> \n  <label class=\"col-sm-3 control-label\">Note</label> \n  <div class=\"col-sm-9\"> \n    <textarea class=\"form-control\" value.bind=\"contact.note\"></textarea> \n  </div> \n</div> \n\n```", "```js\n<hr> \n<div class=\"form-group\" repeat.for=\"phoneNumber of contact.phoneNumbers\"> \n  <div class=\"col-sm-2 col-sm-offset-1\"> \n    <select value.bind=\"phoneNumber.type\" class=\"form-control\"> \n      <option value=\"Home\">Home</option> \n      <option value=\"Office\">Office</option> \n      <option value=\"Mobile\">Mobile</option> \n      <option value=\"Other\">Other</option> \n    </select> \n  </div> \n  <div class=\"col-sm-8\"> \n    <input type=\"tel\" class=\"form-control\" placeholder=\"Phone number\"  \n           value.bind=\"phoneNumber.number\"> \n  </div> \n  <div class=\"col-sm-1\"> \n    <button type=\"button\" class=\"btn btn-danger\"  \n            click.delegate=\"contact.phoneNumbers.splice($index, 1)\"> \n      <i class=\"fa fa-times\"></i>  \n    </button> \n  </div> \n</div> \n<div class=\"form-group\"> \n  <div class=\"col-sm-9 col-sm-offset-3\"> \n    <button type=\"button\" class=\"btn btn-default\" click.delegate=\"contact.addPhoneNumber()\"> \n      <i class=\"fa fa-plus-square-o\"></i> Add a phone number \n    </button> \n  </div> \n</div> \n\n```", "```js\n//Snippet... \nexport class Contact { \n  //Snippet... \n  addPhoneNumber() { \n    this.phoneNumbers.push(new PhoneNumber()); \n  } \n} \n\n```", "```js\n<hr> \n<div class=\"form-group\" repeat.for=\"emailAddress of contact.emailAddresses\"> \n  <div class=\"col-sm-2 col-sm-offset-1\"> \n    <select value.bind=\"emailAddress.type\" class=\"form-control\"> \n      <option value=\"Home\">Home</option> \n      <option value=\"Office\">Office</option> \n      <option value=\"Other\">Other</option> \n    </select> \n  </div> \n  <div class=\"col-sm-8\"> \n    <input type=\"email\" class=\"form-control\" placeholder=\"Email address\"  \n           value.bind=\"emailAddress.address\"> \n  </div> \n  <div class=\"col-sm-1\"> \n    <button type=\"button\" class=\"btn btn-danger\"  \n            click.delegate=\"contact.emailAddresses.splice($index, 1)\"> \n      <i class=\"fa fa-times\"></i>  \n    </button> \n  </div> \n</div> \n<div class=\"form-group\"> \n  <div class=\"col-sm-9 col-sm-offset-3\"> \n    <button type=\"button\" class=\"btn btn-primary\"  \n            click.delegate=\"contact.addEmailAddress()\"> \n      <i class=\"fa fa-plus-square-o\"></i> Add an email address \n    </button> \n  </div> \n</div> \n\n```", "```js\n<hr> \n<div class=\"form-group\" repeat.for=\"address of contact.addresses\"> \n  <div class=\"col-sm-2 col-sm-offset-1\"> \n    <select value.bind=\"address.type\" class=\"form-control\"> \n      <option value=\"Home\">Home</option> \n      <option value=\"Office\">Office</option> \n      <option value=\"Other\">Other</option> \n    </select> \n  </div> \n  <div class=\"col-sm-8\"> \n    <div class=\"row\"> \n      <div class=\"col-sm-4\"> \n        <input type=\"text\" class=\"form-control\" placeholder=\"Number\"  \n               value.bind=\"address.number\"> \n      </div> \n      <div class=\"col-sm-8\"> \n        <input type=\"text\" class=\"form-control\" placeholder=\"Street\"  \n               value.bind=\"address.street\"> \n      </div> \n    </div> \n    <div class=\"row\"> \n      <div class=\"col-sm-4\"> \n        <input type=\"text\" class=\"form-control\" placeholder=\"Postal code\"  \n               value.bind=\"address.postalCode\"> \n      </div> \n      <div class=\"col-sm-8\"> \n        <input type=\"text\" class=\"form-control\" placeholder=\"City\"  \n               value.bind=\"address.city\"> \n      </div> \n    </div> \n    <div class=\"row\"> \n      <div class=\"col-sm-4\"> \n        <input type=\"text\" class=\"form-control\" placeholder=\"State\"  \n               value.bind=\"address.state\"> \n      </div> \n      <div class=\"col-sm-8\"> \n        <input type=\"text\" class=\"form-control\" placeholder=\"Country\"  \n               value.bind=\"address.country\"> \n      </div> \n    </div> \n  </div> \n  <div class=\"col-sm-1\"> \n    <button type=\"button\" class=\"btn btn-danger\"  \n            click.delegate=\"contact.addresses.splice($index, 1)\"> \n      <i class=\"fa fa-times\"></i>  \n    </button> \n  </div> \n</div> \n<div class=\"form-group\"> \n  <div class=\"col-sm-9 col-sm-offset-3\"> \n    <button type=\"button\" class=\"btn btn-primary\"  \n            click.delegate=\"contact.addAddress()\"> \n      <i class=\"fa fa-plus-square-o\"></i> Add an address \n    </button> \n  </div> \n</div> \n\n```", "```js\n<hr> \n<div class=\"form-group\" repeat.for=\"profile of contact.socialProfiles\"> \n  <div class=\"col-sm-2 col-sm-offset-1\"> \n    <select value.bind=\"profile.type\" class=\"form-control\"> \n      <option value=\"GitHub\">GitHub</option> \n      <option value=\"Twitter\">Twitter</option> \n    </select> \n  </div> \n  <div class=\"col-sm-8\"> \n    <input type=\"text\" class=\"form-control\" placeholder=\"Username\"  \n           value.bind=\"profile.username\"> \n  </div> \n  <div class=\"col-sm-1\"> \n    <button type=\"button\" class=\"btn btn-danger\"  \n            click.delegate=\"contact.socialProfiles.splice($index, 1)\"> \n      <i class=\"fa fa-times\"></i>  \n    </button> \n  </div> \n</div> \n<div class=\"form-group\"> \n  <div class=\"col-sm-9 col-sm-offset-3\"> \n    <button type=\"button\" class=\"btn btn-primary\"  \n            click.delegate=\"contact.addSocialProfile()\"> \n      <i class=\"fa fa-plus-square-o\"></i> Add a social profile \n    </button> \n  </div> \n</div> \n\n```", "```js\n//Omitted snippet... \nexport class Contact { \n  //Omitted snippet... \n  addEmailAddress() { \n    this.emailAddresses.push(new EmailAddress()); \n  } \n\n  addAddress() { \n    this. addresses.push(new Address()); \n  } \n\n  addSocialProfile() { \n    this.socialProfiles.push(new SocialProfile()); \n  } \n} \n\n```", "```js\n//Omitted snippet... \n<form class=\"form-horizontal\" submit.delegate=\"save()\"> \n  //Omitted snippet... \n  <div class=\"form-group\"> \n      <div class=\"col-sm-9 col-sm-offset-3\"> \n        <button type=\"submit\" class=\"btn btn-success\">Save</button> \n        <a if.bind=\"isNew\" class=\"btn btn-danger\"  \n           route-href=\"route: contacts\">Cancel</a> \n        <a if.bind=\"!isNew\" class=\"btn btn-danger\"  \n           route-href=\"route: contact-details;  \n           params.bind: { id: contact.id }\">Cancel</a> \n      </div> \n    </div> \n</form> \n\n```", "```js\nsave() { \n  alert(JSON.stringify(this.contact)); \n} \n\n```", "```js\n//Omitted snippet... \nimport {HttpClient, json} from 'aurelia-fetch-client'; \n//Omitted snippet... \nexport class ContactGateway { \n  //Omitted snippet... \n  create(contact) { \n    return this.httpClient.fetch('contacts',  \n      { method: 'POST', body: json(contact) }); \n  } \n\n  update(id, contact) { \n    return this.httpClient.fetch(`contacts/${id}`,  \n      { method: 'PUT', body: json(contact) }); \n  } \n} \n\n```", "```js\n//Omitted snippet... \nimport {Router} from 'aurelia-router'; \n\n@inject(ContactGateway, Router) \nexport class ContactEdition { \n  constructor(contactGateway, router) { \n    this.contactGateway = contactGateway; \n    this.router = router; \n  } \n\n  // Omitted snippet... \n  save() { \n    if (this.isNew) { \n      this.contactGateway.create(this.contact)  \n        .then(() => this.router.navigateToRoute('contacts')); \n    } \n    else { \n      this.contactGateway.update(this.contact.id, this.contact)  \n        .then(() => this.router.navigateToRoute('contact-details',  \n                    { id: this.contact.id })); \n    } \n  } \n} \n\n```", "```js\n <template> \n  <section class=\"container\"> \n    <h1>${contact.fullName}</h1> \n\n    <form class=\"form-horizontal\" submit.delegate=\"save()\"> \n      <div class=\"form-group\"> \n        <label class=\"col-sm-3 control-label\" for=\"photo\">Photo</label> \n        <div class=\"col-sm-9\"> \n          <input type=\"file\" id=\"photo\" accept=\"image/*\"  \n                 files.bind=\"photo\"> \n        </div> \n      </div> \n\n      <div class=\"form-group\"> \n        <div class=\"col-sm-9 col-sm-offset-3\"> \n          <button type=\"submit\" class=\"btn btn-success\">Save</button> \n          <a class=\"btn btn-danger\" route-href=\"route: contact-details;  \n             params.bind: { id: contact.id }\">Cancel</a> \n        </div> \n      </div> \n    </form> \n  </section> \n</template> \n\n```", "```js\nimport {inject} from 'aurelia-framework'; \nimport {Router} from 'aurelia-router'; \nimport {ContactGateway} from './contact-gateway'; \n\n@inject(ContactGateway, Router) \nexport class ContactPhoto { \n\n  constructor(contactGateway, router) { \n    this.contactGateway = contactGateway; \n    this.router = router; \n  } \n\n  activate(params, config) { \n    return this.contactGateway.getById(params.id).then(contact => { \n      this.contact = contact; \n      config.navModel.setTitle(this.contact.fullName); \n    }); \n  } \n  save() { \n    if (this.photo && this.photo.length > 0) { \n      this.contactGateway.updatePhoto( \n        this.contact.id,  \n        this.photo.item(0) \n      ).then(() => { \n        this.router.navigateToRoute( \n          'contact-details',  \n          { id: this.contact.id }); \n      }); \n    } \n  } \n} \n\n```", "```js\n//Omitted snippet... \nexport class ContactGateway { \n  //Omitted snippet... \n  updatePhoto(id, file) { \n    return this.httpClient.fetch(`contacts/${id}/photo`, {  \n      method: 'PUT', \n      headers: { 'Content-Type': file.type }, \n      body: file \n    }); \n  } \n} \n\n```", "```js\n <template> \n  <section class=\"container\"> \n    <div class=\"row\"> \n      <div class=\"col-sm-2\"> \n        <!-- Omitted snippet... --> \n      </div> \n      <div class=\"col-sm-10\"> \n        <!-- Omitted snippet... --> \n        <a class=\"btn btn-default\" route-href=\"route: contact-edition;  \n          params.bind: { id: contact.id }\"> \n          <i class=\"fa fa-pencil-square-o\"></i> Modify \n        </a> \n        <button class=\"btn btn-danger\" click.delegate=\"tryDelete()\"> \n          <i class=\"fa fa-trash-o\"></i> Delete \n        </button> \n      </div> \n    </div> \n    <!-- Rest of template omitted for brevity --> \n  </section> \n</template> \n\n```", "```js\n//Omitted snippet... \nexport class ContactDetails { \n  //Omitted snippet... \n  tryDelete() { \n    if (confirm('Do you want to delete this contact?')) { \n      this.contactGateway.delete(this.contact.id) \n        .then(() => { this.router.navigateToRoute('contacts'); }); \n    } \n  } \n} \n\n```", "```js\n//Omitted snippet... \nexport class ContactGateway { \n  //Omitted snippet... \n  delete(id) { \n    return this.httpClient.fetch(`contacts/${id}`, { method: 'DELETE' }); \n  } \n} \n\n```", "```js\n> npm install aurelia-validation --save\n\n```", "```js\n{ \n  \"name\": \"aurelia-validation\", \n  \"path\": \"../node_modules/aurelia-validation/dist/amd\", \n  \"main\": \"aurelia-validation\" \n}, \n\n```", "```js\nexport function configure(config) { \n  config \n    .plugin('aurelia-validation'); \n} \n\n```", "```js\nsrc/main.js \n//Omitted snippet... \nexport function configure(aurelia) { \n  aurelia.use \n    .standardConfiguration() \n    .feature('validation') \n    .feature('resources'); \n  //Omitted snippet... \n} \n\n```", "```js\n <template> \n  <!-- Omitted snippet... -->   \n  <input type=\"text\" class=\"form-control\"  \n         value.bind=\"contact.firstName & validate\"> \n  <!-- Omitted snippet... --> \n  <input type=\"text\" class=\"form-control\"  \n         value.bind=\"contact.birthday & validate\"> \n  <!-- Omitted snippet... --> \n  <textarea class=\"form-control\"  \n            value.bind=\"contact.note & validate\"></textarea> \n  <!-- Omitted snippet... --> \n  <select value.bind=\"phoneNumber.type & validate\" class=\"form-control\"> \n  <!-- Omitted snippet... --> \n  <input type=\"tel\" class=\"form-control\" placeholder=\"Phone number\"  \n         value.bind=\"phoneNumber.number & validate\"> \n  <!-- Omitted snippet... --> \n</template> \n\n```", "```js\nimport {inject, NewInstance} from 'aurelia-framework'; \nimport {ValidationController} from 'aurelia-validation'; @inject(ContactGateway, NewInstance.of(ValidationController), Router) \nexport class ContactEdition { \n\n  constructor(contactGateway, validationController, router) { \n    this.contactGateway = contactGateway; \n    this.validationController = validationController; \n    this.router = router; \n  } \n  //Omitted snippet... \n} \n\n```", "```js\n//Omitted snippet... \nexport class ContactEdition { \n  //Omitted snippet... \n  save() { \n    this.validationController.validate().then(errors => { \n if (errors.length > 0) { \n return; \n } \n      //Omitted call to create or update... \n    } \n  } \n} \n\n```", "```js\nimport {ValidationRules} from 'aurelia-validation'; \n// Omitted snippet... \n\nexport class Contact { \n  // Omitted snippet... \n\n  constructor() { \n ValidationRules \n .ensure('firstName').maxLength(100) \n .ensure('lastName').maxLength(100) \n .ensure('company').maxLength(100) \n .ensure('birthday') \n .satisfies((value, obj) => value === null || value === undefined \n || value === '' || !isNaN(Date.parse(value))) \n .withMessage('${$displayName} must be a valid date.') \n .ensure('note').maxLength(2000) \n .on(this); \n } \n\n  //Omitted snippet... \n} \n\n```", "```js\n//Omitted snippet... \n\nexport class PhoneNumber { \n  //Omitted snippet... \n\n  constructor() { \n ValidationRules \n .ensure('type').required().maxLength(25) \n .ensure('number').required().maxLength(25) \n .on(this); \n } \n\n  //Omitted snippet... \n} \n\nexport class EmailAddress { \n  //Omitted snippet...   \n\n  constructor() { \n ValidationRules \n .ensure('type').required().maxLength(25) \n .ensure('address').required().maxLength(250).email() \n .on(this); \n } \n\n  //Omitted snippet...   \n} \n\nexport class Address { \n  //Omitted snippet... \n\n  constructor() { \n ValidationRules \n .ensure('type').required().maxLength(25) \n .ensure('number').required()maxLength(100) \n .ensure('street').required().maxLength(100) \n .ensure('postalCode').required().maxLength(25) \n .ensure('city').required().maxLength(100) \n .ensure('state').maxLength(100) \n .ensure('country').required().maxLength(100) \n .on(this); \n } \n\n  //Omitted snippet... \n} \n\nexport class SocialProfile { \n  //Omitted snippet...   \n\n  constructor() { \n ValidationRules \n .ensure('type').required().maxLength(25) \n .ensure('username').required().maxLength(100) \n .on(this); \n } \n\n  //Omitted snippet...   \n} \n\n```", "```js\n<template>   \n  <!-- Omitted snippet... --> \n  <form class=\"form-horizontal\" submit.delegate=\"save()\"> \n    <ul class=\"col-sm-9 col-sm-offset-3 list-group text-danger\" \n        if.bind=\"validationController.errors\"> \n      <li repeat.for=\"error of validationController.errors\"  \n          class=\"list-group-item\"> \n        ${error.message} \n      </li> \n    </ul> \n    <!-- Omitted snippet... --> \n  </form> \n</template> \n\n```", "```js\n<template> \n  <!-- Omitted snippet... --> \n  <div validation-errors.bind=\"birthdayErrors\"  \n       class=\"form-group ${birthdayErrors.length ? 'has-error' : ''}\"> \n    <label class=\"col-sm-3 control-label\">Birthday</label> \n    <div class=\"col-sm-9\"> \n      <input type=\"text\" class=\"form-control\"  \n             value.bind=\"contact.birthday & validate\"> \n      <span class=\"help-block\" repeat.for=\"errorInfo of birthdayErrors\"> \n ${errorInfo.error.message} \n <span> \n    </div> \n  </div> \n  <!-- Omitted snippet... --> \n</template> \n\n```", "```js\nexport class BootstrapFormValidationRenderer { \n\n  render(instruction) { \n    for (let { error, elements } of instruction.unrender) { \n      for (let element of elements) { \n        this.remove(element, error); \n      } \n    } \n\n    for (let { error, elements } of instruction.render) { \n      for (let element of elements) { \n        this.add(element, error); \n      } \n    } \n  } \n} \n\n```", "```js\nadd(element, error) { \n  const formGroup = element.closest('.form-group'); \n  if (!formGroup) { \n    return; \n  } \n\n  formGroup.classList.add('has-error'); \n\n  const message = document.createElement('span'); \n  message.className = 'help-block validation-message'; \n  message.textContent = error.message; \n  message.id = `bs-validation-message-${error.id}`; \n  element.parentNode.insertBefore(message, element.nextSibling); \n} \n\n```", "```js\nremove(element, error) { \n  const formGroup = element.closest('.form-group'); \n  if (!formGroup) { \n    return; \n  } \n\n  const message = formGroup.querySelector( \n    `#bs-validation-message-${error.id}`); \n  if (message) { \n    element.parentNode.removeChild(message); \n    if (formGroup.querySelectorAll('.help-block.validation-message').length  \n        === 0) {     \n      formGroup.classList.remove('has-error'); \n    } \n  } \n} \n\n```", "```js\n//Omitted snippet... \nimport {BootstrapFormValidationRenderer} \n from './bootstrap-form-validation-renderer'; \n\nexport function configure(config) { \n  config.plugin('aurelia-validation'); \n  config.container.registerHandler( \n 'bootstrap-form', \n container => container.get(BootstrapFormValidationRenderer)); \n} \n\n```", "```js\n<template> \n  <!-- Omitted snippet... --> \n  <form class=\"form-horizontal\" submit.delegate=\"save()\" \n        validation-renderer=\"bootstrap-form\"> \n    <!-- Omitted snippet... --> \n  </form> \n  <!-- Omitted snippet... --> \n</template> \n\n```", "```js\nimport {ValidationController, validateTrigger} from 'aurelia-validation'; \n// Omitted snippet... \nexport class ContactEdition { \n  constructor(contactGateway, validationController, router) { \n    validationController.validateTrigger = validateTrigger.change; \n    // Omitted snippet... \n  } \n} \n\n```", "```js\nimport {ValidationRules} from 'aurelia-validation'; \n\nValidationRules.customRule( \n  'date',  \n  (value, obj) => value === null || value === undefined || value === ''  \n                  || !isNaN(Date.parse(value)),  \n  '${$displayName} must be a valid date.' \n); \n\n```", "```js\nimport './rules'; \n//Omitted snippet... \n\n```", "```js\n//Omitted snippet... \nexport class Contact { \n  //Omitted snippet... \n\n  constructor() { \n    ValidationRules \n      .ensure('firstName').maxLength(100) \n      .ensure('lastName').maxLength(100) \n      .ensure('company').maxLength(100) \n .ensure('birthday').satisfiesRule('date') \n      .ensure('note').maxLength(2000) \n      .on(this); \n  } \n\n  //Omitted snippet... \n} \n//Omitted snippet... \n\n```", "```js\n//Omitted snippet... \nValidationRules.customRule( \n  'notEmpty', \n  (value, obj) => value && value.length && value.length > 0, \n  '${$displayName} must contain at least one item.' \n); \n\n```", "```js\n//Omitted snippet... \nValidationRules.customRule( \n  'maxFileSize', \n  (value, obj, maximum) => !(value instanceof FileList) \n    || value.length === 0 \n    || Array.from(value).every(file => file.size <= maximum), \n  '${$displayName} must be smaller than ${$config.maximum} bytes.', \n  maximum => ({ maximum }) \n); \n\n```", "```js\nValidationRules.ensure('photo').satisfiesRule('maxFileSize', 1024); \n\n```", "```js\n//Omitted snippet... \nfunction hasOneOfExtensions(file, extensions) { \n  const fileName = file.name.toLowerCase(); \n  return extensions.some(ext => fileName.endsWith(ext)); \n} \n\nfunction allHaveOneOfExtensions(files, extensions) { \n  extensions = extensions.map(ext => ext.toLowerCase()); \n  return Array.from(files) \n    .every(file => hasOneOfExtensions(file, extensions)); \n} \n\nValidationRules.customRule( \n  'fileExtension', \n  (value, obj, extensions) => !(value instanceof FileList) \n    || value.length === 0 \n    || allHaveOneOfExtensions(value, extensions), \n  '${$displayName} must have one of the following extensions: '  \n    + '${$config.extensions.join(', ')}.', \n  extensions => ({ extensions }) \n); \n\n```", "```js\nimport {ValidationController, ValidationRules} from 'aurelia-validation'; \n//Omitted snippet... \nexport class ContactPhoto { \n  //Omitted snippet... \n\n  constructor(contactGateway, router, validationController) { \n    //Omitted snippet... \n    ValidationRules \n      .ensure('photo') \n        .satisfiesRule('notEmpty') \n          .withMessage('${$displayName} must contain 1 file.') \n        .satisfiesRule('maxFileSize', 1024 * 1024 * 2) \n        .satisfiesRule('fileExtension', ['.jpg', '.png']) \n      .on(this); \n  } \n\n  //Omitted snippet... \n} \n\n```", "```js\nimport {ValidationController, ValidationRules, validateTrigger}  \n  from 'aurelia-validation'; \n//Omitted snippet... \nexport class ContactPhoto { \n  //Omitted snippet... \n\n  constructor(contactGateway, router, validationController) { \n    validationController.validateTrigger = validateTrigger.change; \n    //Omitted snippet... \n  } \n\n  //Omitted snippet... \n} \n\n```", "```js\n> npm install aurelia-dialog --save \n\n```", "```js\n{ \n  \"name\": \"aurelia-dialog\", \n  \"path\": \"../node_modules/aurelia-dialog/dist/amd\", \n  \"main\": \"aurelia-dialog\" \n}, \n\n```", "```js\n//Omitted snippet... \nexport function configure(aurelia) { \n  aurelia.use \n    .standardConfiguration() \n    .plugin('aurelia-dialog') \n    .feature('validation') \n    .feature('resources'); \n  //Omitted snippet... \n} \n\n```", "```js\nimport {inject, NewInstance} from 'aurelia-framework'; \nimport {DialogController} from 'aurelia-dialog'; \nimport {ValidationController} from 'aurelia-validation'; \n\n@inject(DialogController, NewInstance.of(ValidationController)) \nexport class EditionDialog { \n\n  constructor(dialogController, validationController) { \n    this.dialogController = dialogController; \n    this.validationController = validationController; \n  } \n\n  activate(model) { \n    this.model = model; \n  } \n\n  ok() { \n    this.validationController.validate().then(errors => { \n      if (errors.length === 0) { \n        this.dialogController.ok(this.model) \n      } \n    }); \n  } \n\n  cancel() { \n    this.dialogController.cancel(); \n  } \n} \n\n```", "```js\n<template> \n  <ai-dialog> \n    <form class=\"form-horizontal\" validation-renderer=\"bootstrap-form\"  \n          submit.delegate=\"ok()\"> \n      <ai-dialog-body> \n        <h2>Phone number</h2> \n        <div class=\"form-group\"> \n          <div class=\"col-sm-2\"> \n            <label for=\"type\">Type</label> \n          </div> \n          <div class=\"col-sm-10\"> \n            <select id=\"type\" value.bind=\"model.type & validate\"  \n                    attach-focus=\"true\" class=\"form-control\"> \n              <option value=\"Home\">Home</option> \n              <option value=\"Office\">Office</option> \n              <option value=\"Mobile\">Mobile</option> \n              <option value=\"Other\">Other</option> \n            </select> \n          </div> \n        </div> \n        <div class=\"form-group\"> \n          <div class=\"col-sm-2\"> \n            <label for=\"number\">Number</label> \n          </div> \n          <div class=\"col-sm-10\"> \n            <input id=\"number\" type=\"tel\" class=\"form-control\"  \n                   placeholder=\"Phone number\"  \n                   value.bind=\"model.number & validate\"> \n          </div> \n        </div> \n      </ai-dialog-body>\n<ai-dialog-footer> \n        <button type=\"submit\" class=\"btn btn-primary\">Ok</button> \n        <button class=\"btn btn-danger\"  \n                click.trigger=\"cancel()\">Cancel</button> \n      </ai-dialog-footer> \n    </form> \n  </ai-dialog> \n</template> \n\n```", "```js\nimport {DialogService} from 'aurelia-dialog'; \nimport {Contact, PhoneNumber, EmailAddress, Address, SocialProfile}  \n  from './models'; \n//Omitted snippet... \n@inject(ContactGateway, NewInstance.of(ValidationController), Router,  \n        DialogService) \nexport class ContactEdition { \n  constructor(contactGateway, validationController, router, dialogService) { \n    this.contactGateway = contactGateway; \n    this.validationController = validationController; \n    this.router = router; \n    this.dialogService = dialogService; \n  } \n   //Omitted snippet... \n  _openEditDialog(view, model) { \n    return new Promise((resolve, reject) => { \n      this.dialogService.open({  \n        viewModel: 'dialogs/edition-dialog', \n        view: `dialogs/${view}-dialog.html`,  \n        model: model \n      }).then(response => { \n        if (response.wasCancelled) { \n          reject(); \n        } else { \n          resolve(response.output); \n        } \n      }); \n    }); \n  } \n\n  editPhoneNumber(phoneNumber) { \n    this._openEditDialog('phone-number',  \n                         PhoneNumber.fromObject(phoneNumber)) \n      .then(result => { Object.assign(phoneNumber, result); }); \n  } \n\n  addPhoneNumber() { \n    this._openEditDialog('phone-number', new PhoneNumber()) \n      .then(result => { this.contact.phoneNumbers.push(result); }); \n  } \n\n  //Omitted snippet... \n} \n\n```", "```js\n<template> \n  <!-- Omitted snippet... --> \n  <hr> \n  <div class=\"form-group\" repeat.for=\"phoneNumber of contact.phoneNumbers\"> \n    <div class=\"col-sm-2 col-sm-offset-1\">${phoneNumber.type}</div> \n    <div class=\"col-sm-7\">${phoneNumber.number}</div> \n    <div class=\"col-sm-1\"> \n      <button type=\"button\" class=\"btn btn-danger\"  \n              click.delegate=\"editPhoneNumber(phoneNumber)\"> \n        <i class=\"fa fa-pencil\"></i> Edit \n      </button> \n    </div> \n    <div class=\"col-sm-1\"> \n      <button type=\"button\" class=\"btn btn-danger\"  \n              click.delegate=\"contact.phoneNumbers.splice($index, 1)\"> \n        <i class=\"fa fa-times\"></i>  \n      </button> \n    </div> \n  </div> \n  <div class=\"form-group\"> \n    <div class=\"col-sm-9 col-sm-offset-3\"> \n      <button type=\"button\" class=\"btn btn-primary\"  \n              click.delegate=\"addPhoneNumber()\"> \n        <i class=\"fa fa-plus-square-o\"></i> Add a phone number \n      </button> \n    </div> \n  </div> \n  <!-- Omitted snippet... --> \n</template> \n\n```"]