["```js\nfunction getCountryGMT(countryName) {\n  if (countryName == \"Pakistan\") {\n    var gmt = \"+5.00\";\n  }\n  else if (country == \"Dubai\") {\n    var gmt = \"+4.00\";\n  } else {\n    return null;\n  }\n}\n```", "```js\nfunction getCountryGMT(countryName) {\n  var gmt; \n  if (countryName == \"Pakistan\") {\n    gmt = \"+5.00\";\n  }\n  else if (country == \"Dubai\") {\n    gmt = \"+4.00\";\n  } else {\n    return null;\n  }\n}\n```", "```js\nfunction getCountryGMT(countryName) {\n  if (countryName == \"Pakistan\") {\n    gmt = \"+5.00\";\n  }\n  else if (country == \"Dubai\") {\n    gmt = \"+4.00\";\n  } else {\n    return null;\n  }\n}\n\nvar gmt;\n```", "```js\nvar gmt;\n\nfunction getCountryGMT(countryName) {\n  if (countryName == \"Pakistan\") {\n    gmt = \"+5.00\";\n  }\n  else if (country == \"Dubai\") {\n    gmt = \"+4.00\";\n  } else {\n    return null;\n  }\n}\n```", "```js\nfunction getCountryGMT(countryName) {\n  if (countryName == \"Pakistan\") {\n    let gmt = \"+5.00\";\n  }\n  else {\n    return null;\n  }\n}\n```", "```js\nfunction getCountryGMT(countryName) {\n  var gmt;\n  if (countryName == \"Pakistan\") {\n    let gmt = \"+5.00\";\n  }\n  else {\n    return null;\n  }\n}\n```", "```js\nvar values = [];\nfor(var i=0;i<10;i++)\n  {\n    values.push(function () { console.log(\"value is \" + i) });\n  }\n  values.forEach(function(valuesfunc) {\n    valuesfunc();\n  })\n```", "```js\nlet is as follows:\n```", "```js\nvar values = [];\n  for(let i=0;i<10;i++)\n  {\n    values.push(function () { console.log(\"value is \" + i) });\n  }\n  values.forEach(function(valuesfunc) {\n    valuesfunc();\n  })\n```", "```js\n<html>\n  <body>\n    <div id=\"contentPane\" style=\"width:200px; height:200px;\">\n    </div>\n    <script>\n      var divPane = document.getElementById(\"contentPane\");\n      divPane.onmouseenter = function () {\n        divPane.innerHTML = \"You are inside the div\";\n      };\n      divPane.onmouseleave = function () {\n        divPane.innerHTML = \"You are outside the div\";\n      };\n    </script>\n  </body>\n</html>\n```", "```js\n<html>\n  <body>\n    <script>\n      function displayMessage() {\n        alert(\"you have clicked button\");\n      }\n    </script> \n    <input type=\"button\" onclick=\"displayMessage();\" />\n  </body>\n</html>\n```", "```js\nfunction execute(a, b) {\n  //do something\n}\n\n//calling without parameter values\nexecute();\n\n//passing numeric values\nexecute(1, 2);\n\n//passing string values\nexecute(\"hello\",\"world\");\n\n//passing more parameters\nexecute(1,2,3,4,5);\n```", "```js\nfunction execute(a, b) {\n  //do something\n  alert(arguments[0]);\n  alert(arguments[1]);\n  alert(arguments[2]);\n  alert(arguments[3]);\n  alert(arguments[4]);\n}\n\n  //passing more parameters\n  execute(1, 2, 3, 4, 5);\n}\n```", "```js\nvar person = {id: \"001\", name: \"Scott\", isActive: true, \n  Age: 35 };\n```", "```js\nvar personModel = {id: \"001\", name: \"Scott\", isActive: true, \n  Age: 35, function: savePerson(){ //code to save person record } };\n```", "```js\nvar person = new function(){};\n```", "```js\nvar p1 = new person();\n```", "```js\nfunction person(){};\n```", "```js\nclass Person {\n  constructor() { }\n}\n```", "```js\nvar person = {\n  id: \"001\",\n  name:\"Person 1\",\n  savePerson: function(){\n  }\n\n}\n```", "```js\nvar person = function(id, name){\n  this._id = id;\n  this._name = name;\n}\n```", "```js\nvar p1 = new person(\"001\",\"Person 1\");\nconsole.log(\"Person ID: \"+ p1.PersonID);\nconsole.log(\"Person Name: \"+ p1.name);\n```", "```js\nvar person = function(){\n}\nvar p1 = new person();\np1.id=\"001\";\np1.name=\"Person 1\";\n```", "```js\nfunction person(id, name){\n  this.id = id;\n  this.name = name;\n  this.logToConsole: function(){\n    console.log(\"Person ID is \"+ this.id  +\",Name: \"+ this.name);\n  };\n}\n```", "```js\nclass Person {\n  constructor(id, name) {\n    this.id = id;\n    this.name = name;\n  }\n}\nvar p1 = new person(\"001\", \"Person 1\");\nconsole.log (\"Person ID: \" + p1.id);\n```", "```js\nclass Person {\n  set Name(name) {\n    this.personName = name;\n  }\n  get Name() {\n    return this.personName;\n  }\n}\nvar p1 = new Person();\np1.Name = \"Person 1\";\nconsole.log(\"personName \" + p1.Name);\n```", "```js\nvar car = {\n  name: \"BMW\",\n  color: \"black\"\n};\n```", "```js\ndisplay(Object.getOwnPropertyDescriptor(car, 'name'));\n```", "```js\nObject.defineProperty(car, 'color',{enumerable: false});\nObject.defineProperty(car, 'color',{configurable: false});\nObject.defineProperty(car, 'color',{writable: false});\n```", "```js\nvar car = { name: { make: \"honda\",  brand: \"accord\"} };\nObject.defineProperty(car, 'fullname', \n{\n  get: function(){\n    return this.name.make + ' ' + this.name.brand \n  },\n  set: function (value) {\n    var names= value.split(' ');\n    this.name.make = names[0];\n    this.name.brand = names[1];\n  }\n});\ncar.fullname = \"Honda Accord\";\ndisplay(car.fullname);\n```", "```js\nvar person = {\n  id: \"001\",\n  name:\"Person 1\",\n  logToConsole: function()\n  {\n    console.log(\"Person ID is \"+ this.id  +\", Customer Name: \"+ this.name);\n  }\n}\n```", "```js\nvar person = function (id, name) {\n  this._id = id;\n  this._name = name;\n  this.LogToConsole= function(){\n    console.log(\"Person Name is \"+ this._name);\n  }\n}\nvar p1 = new person(\"001\", \"Person 1\");\np1.LogToConsole();\n```", "```js\nfunction person(id, name) {\n  this._id = id;\n  this._name = name;\n  this.LogToConsole= function(){\n    console.log(\"Name is \"+ this._name);\n  }\n}\nvar p1 = new person(\"001\",\"Person 1\");\np1.LogToConsole();\n```", "```js\nclass Person {\n\n  constructor() {\n\n  }\n\n  set Name(name) {\n    this._name = name;\n  }\n\n  get Name() {\n    return this._name;\n  }\n\n  logToConsole() {\n    console.log(\"Person Name is \" + Name);\n  }\n}\n\nvar p1 = new Person();\np1.Name = \"Person 1\";\np1.logToConsole();\n```", "```js\nvar Person = function (name) {\n  this.name = name;\n}\nvar p1 = new Person(\"Person 1\");\np1.phoneNo = \"0021002010\";\nalert(p1.name);\n```", "```js\nvar Person = function (name) {\n  this.name = name;\n}\nPerson.prototype.phoneNo = \"\";\nPerson.prototype.logToConsole = function () {\n  alert(\"Person Name is \" + this.name +\" and phone No is \"+ this.phoneNo)\n};\nvar p1 = new person(\"Person 1\");\np1.phoneNo = \"XXX\"\np1.logToConsole();\n```", "```js\nfunction a() {\n  var x = 1;\n  this.y = 2;\n  x1 = function () {\n    console.log(\"this is privately accessible\");\n  }\n  this.y1 = function () {\n    console.log(\"this is publicly accessible\");\n  }\n}\n```", "```js\nvar Person = function (id, name) {\n  this.id = id;\n  this.name = name;\n}\n\nvar Vendor = function (companyName, location) {\n  this.companyName = companyName;\n  this.location = location;\n}\n\nvar Employee = function (employeeType, dateOfJoining) {\n  this.employeeType = employeeType;\n  this.dateOfJoining = dateOfJoining;\n}\n\nVendor.prototype = new Person(\"001\", \"John\");\nEmployee.prototype = new Person(\"002\", \"Steve\");\n\nvar vendorObj = new Vendor(\"ABC\", \"US\");\nalert(vendorObj.id);\n```", "```js\nVendor.id=\"001\";\n```", "```js\nvar vendorObj = new Vendor(\"ABC\", \"US\");\nvendorObj.id=\"001\";\n```", "```js\nVendor.prototype = Person.prototype; \n```", "```js\nvar Person = function (id, name) {\n  this.id = id;\n  this.name = name;\n}\n\n//Adding method to the Person's prototype to show message\nPerson.prototype.showMessage = function (message) {\n  alert(message);\n}\n\nvar Vendor = function (companyName, location) {\n  this.companyName = companyName;\n  this.location = location;\n}\n\n//Assigning the parent's prototype to child's prototype\nVendor.prototype = Person.prototype;\nvar vendorObj = new Vendor(\"XYZ\", \"Dubai\");\nvendorObj.showMessage(vendorObj instanceof Person);\n```", "```js\nvar Person = function (id, name) {\n  this.id = id;\n  this.name = name;\n}\n\n//Adding method to the Person's prototype to show message\nPerson.prototype.showMessage = function (message) {\n  alert(message);\n}\n\nvar Vendor = function (companyName, location) {\n  this.companyName = companyName;\n  this.location = location;\n}\n\n//Assigning the parent's prototype to child's prototype\nVendor.prototype = Person.prototype;\n\n//Adding method to the Vendor's prototype to show at console\nVendor.prototype.showConsoleMessage = function (message) {\n  console.log(message);\n}\n\nvar personObj = new Person(\"001\", \"John\");\n//Person object access the child's object method\npersonObj.showConsoleMessage(\"Console\");\n```", "```js\nvar Person = function (id, name) {\n  this.id = id;\n  this.name = name;\n}\n\nvar Vendor = function (companyName, location, id, name) {\n  this.companyName = companyName;\n  this.location = location;\n  Person.call(this, id, name);\n}\n\nvar employee = function (employeeType, dateOfJoining, id, name) {\n  this.employeeType = employeeType;\n  this.dateOfJoining = dateOfJoining;\n  Person.call(this, id, name);\n}\n\nVendor.prototype = Person.prototype;\nEmployee.prototype = Person.prototype;\n\nvar vendorObj = new Vendor(\"ABC\", \"US\", \"V-01\",\"Vendor 1\");\nalert(vendorObj.name);\n```", "```js\nvar Person = function (id, name) {\n  this.id = id;\n  this.name = name;\n}\n\nvar Vendor = function (companyName, location, id, name) {\n  this.companyName = companyName;\n  this.location = location;\n  Person.call(this, id, name);\n}\n\nvar Employee = function (employeeType, dateOfJoining, id, name) {\n  this.employeeType = employeeType;\n  this.dateOfJoining = dateOfJoining;\n  Person.call(this, id, name);\n}\n\nVendor.prototype = Object.create(Person.prototype);\nEmployee.prototype = Object.create(Person.prototype);\n\nvar vendorObj = new Vendor(\"ABC\", \"US\", \"V-01\", \"Vendor 1\");\nalert(vendorObj.name);\n```", "```js\nvar customerObj = Object.create(Object.prototype, {\n  customerCode: {\n    value: \"001\",\n    enumerable: true,\n    writable: true,\n    configurable: true\n  }\n});\nalert(\"\" + customerObj.customerCode);\n```", "```js\nclass Person {\n\n  constructor(id, name) {\n    this._id = id;\n    this._name = name;\n  }\n\n  get GetID() {return this._id;}\n  get GetName() {return this._name;}\n}\n\nclass Vendor extends Person {\n  constructor(phoneNo, location, id, name){\n    super(id, name);\n    this._phoneNo = phoneNo;\n    this._location = location;\n\n  }\n  logToConsole() {\n    alert(\"Person ID is \" + this.GetID);\n  }\n}\n\nvar vendorObj = new Vendor(\"XXX\", \"US\", \"V-01\", \"Vendor 1\");\nvendorObj.logToConsole();\n```", "```js\nclass Person {\n  static logToConsole() {\n    console.log(\"Hello developers!\");\n  }\n}\n\nclass Vendor extends Person {\n}\n\nVendor.logToConsole();\n```", "```js\nvar person = function (id, name) {\n  this._id = id;\n  this._name = name;\n  this.showMessage = function () { };\n}\nvar vendor = function (companyName, location, id, name) {\n  this._companyName = companyName;\n  this._location = location;\n  person.call(this, id, name);\n  this.showMessage = function () {\n    alert(\"this is Vendor\");\n  }\n}\nvar employee = function (employeeType, dateOfJoining, id, name) {\n  this._employeeType = employeeType;\n  this._dateOfJoining = dateOfJoining;\n  person.call(this, id, name);\n  this.showMessage = function () {\n    alert(\"this is Employee\");\n  }\n}\nvendor.prototype = Object.create(person.prototype);\nemployee.prototype = Object.create(person.prototype);\nvar personController = function (person) {\n  this.personObj = person;\n  this.showMessage = function () {\n    this.personObj.showMessage();\n  }\n}\n\nvar v1 = new vendor(\"ABC\", \"USA\", \"V-01\", \"Vendor 1\");\nvar p1 = new personController(v1);\np1.showMessage();\n```", "```js\nclass person {\n  constructor(id, name) {\n    this._id = id;\n    this._name = name;\n  }\n  showMessage() { };\n}\nclass vendor extends person {\n  constructor(companyName, location, id, name) {\n    super(id, name);\n    this._companyName = companyName;\n    this._location = location;\n\n  }\n  showMessage() {\n    alert(\"this is Vendor\");\n  }\n}\nclass employee extends person {\n  constructor(employeeType, dateOfJoining, id, name) {\n    super(id, name);\n    this._employeeType = employeeType;\n    this._dateOfJoining = dateOfJoining;\n  }\n  showMessage() {\n    alert(\"this is Employee\");\n  }\n}\nclass personController {\n  constructor(person) {\n    this.personObj = person;\n  }\n  showMessage() {\n    this.personObj.showMessage();\n  }\n}\n\nvar v1 = new vendor(\"ABC\", \"USA\", \"V-01\", \"Vendor 1\");\nvar p1 = new personController(v1);\np1.showMessage();\n```", "```js\nclass person {\n  constructor(id, name) {\n    if(new.target === person){\n      throw new TypeError(\"Cannot create an instance of Person class as its abstract in nature\");\n    }\n    this._id = id;\n    this._name = name;\n  }\n\n  showMessage() { };\n}\n```", "```js\nvar BusinessLayer = BusinessLayer || {};\n```", "```js\nBusinessLayer.PersonManager = function(){\n};\n```", "```js\nvar BusinessLayer = BusinessLayer || {};\nvar BusinessLayer.Managers = BusinessLayer.Managers || {};\n```", "```js\ntry{ }catch{throw new Error(\"Some error occurred\");}\n```", "```js\nvar arr= new Array(-1);\n```", "```js\nfunction doWork(){\n  arr[0]=1;\n}\n```", "```js\nvar person ={};\nperson.saveRecord();\n```", "```js\nencodeURIComponent(\"-\");\n```", "```js\nfunction Incrementor() {\n  var x = 0;\n  return function () {\n    x++;\n    console.log(x);\n  }\n}\n\nvar inc= Incrementor();\ninc();\ninc();\ninc();\n```", "```js\nfunction tableGen(number) {\n  var x = number;\n  return function (multiplier) {\n    var res = x * multiplier;\n    console.log(x +\" * \"+ multiplier +\" = \"+ res);\n  }\n}\n\nvar twotable = tableGen(2);\nvar threetable = tableGen(3);\n\ntwotable(5);\nthreetable(6);\n```", "```js\n<body>\n  <input type=\"text\" id=\"txtMessage\" />\n  <button id=\"consoleLogger\"> Log to Console </button>\n  <button id=\"dialogLogger\">Log to Dialog </button>\n  <script>\n\n    function getLogger(loggerType) {\n      return function () {\n        var message = document.getElementById(\"txtMessage\").value;\n        if (loggerType == \"console\")\n        console.log(message);\n        else if (loggerType == \"dialog\")\n        alert(message);\n      }\n    }\n    var consoleLogger = getLogger(\"console\");\n    var dialogLogger = getLogger(\"dialog\");\n    document.getElementById(\"consoleLogger\").onclick = consoleLogger;\n    document.getElementById(\"dialogLogger\").onclick = dialogLogger;\n  </script>\n</body>\n```", "```js\nvar buffer = new ArrayBuffer(32);\n```", "```js\nvar int32View= new Int32Array(buffer);\n```", "```js\nfor(var i=0;i< int32View.length; i++){\n  int32View[i] = i;\n}\n```", "```js\n0 1 2 3 4 5 6 7\n```", "```js\nvar Int16View =new Int16Array(buffer);\nfor(var i=0;i< int16View.length;i++){\n  console.log(int16View[0]);\n}\n```", "```js\n0 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0\n```", "```js\nvar currencies = new Map();\ncurrencies.set(\"US\", \"US Dollar\");\ncurrencies.set(\"UK\", \"British Pound\");\ncurrencies.set(\"CA\", \"Canadian Dollar\");\ncurrencies.set(\"PK\", \"Rupee\");\ncurrencies.set(\"UAE\", \"Dirham\");\nfor (var currency of currencies) {\n  console.log(currency[0] + \" currency is \" + currency[1]);\n}\n```", "```js\ncurrencies.get(\"UAE\"); // returns dirham\ncurrencies.size; // returns 5 \ncurrencies.has(\"PK\") // returns true if found \ncurrencies.delete(\"CA\") // delete Canada from the list\n```", "```js\nvar authenticatorsecrets = new WeakMap();\n\nfunction TwitterAuthenticator() {\n  const loginSecret = {\n    apikey: 'testtwitterapikey',\n    secretkey: 'testtwittersecretkey'\n  };\n  authenticatorsecrets.set(this, loginSecret);\n}\n\nTwitterAuthenticator.prototype.Authenticate = function () {\n  const loginSecretVal = authenticatorsecrets(this);\n  //to do authenticate with twitter\n};\n```", "```js\nvar set = new Set();\nset.add(1);\nset.add(\"Hello World\");\nset.add(3.4);\nset.add(new Date());\n```", "```js\nvar no = { id: 1 };\nvar abc = { alphabets: ['a', 'b', 'c'] };\n\nvar x = new WeakSet();\nx.add(no);\nx.add(abc);\n```", "```js\n\"use strict;\"\n```", "```js\n\"use strict\";\nx=100;\nfunction execute(){\n  \"use strict;\"\n  x=100;\n}\n```"]