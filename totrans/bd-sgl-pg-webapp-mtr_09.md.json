["```js\nSession.set('first', false);\nSession.set('second', false);\n```", "```js\nTracker.autorun(function(){\n    console.log('Reactive function re-run');\n    if(Session.get('first')){\n        Session.get('second');\n    }\n});\n```", "```js\n    if(Meteor.isClient) {\n        ReactiveTimer = new Tracker.Dependency;\n    }\n    ```", "```js\n    Meteor.setInterval(function(){\n        // re-run dependencies every 10s\n        ReactiveTimer.changed();\n    }, 10000);\n    ```", "```js\nTracker.autorun(function(){\n    ReactiveTimer.depend();\n    console.log('Function re-run');\n});\n```", "```js\nReactiveTimer.depend();\n```", "```js\n    ReactiveTimer = (function () {\n\n        // Constructor\n        function ReactiveTimer() {\n            this._dependency = new Tracker.Dependency;\n            this._intervalId = null;\n        };\n\n        return ReactiveTimer;\n    })();\n    ```", "```js\n    ReactiveTimer = (function () {\n\n        // Constructor\n        function ReactiveTimer() {\n            this._dependency = new Tracker.Dependency;\n            this._intervalId = null;\n        };\n        ReactiveTimer.prototype.start = function(interval){\n            var _this = this;\n            this._intervalId = Meteor.setInterval(function(){\n                // rerun every \"interval\"\n                _this._dependency.changed();\n            }, 1000 * interval);\n        };\n\n        return ReactiveTimer;\n    })();\n    ```", "```js\n    ReactiveTimer.prototype.stop = function(){\n        Meteor.clearInterval(this._intervalId);\n    };\n    ```", "```js\n    ReactiveTimer.prototype.tick = function(){\n        this._dependency.depend();\n    };\n    ```", "```js\n    timer = new ReactiveTimer();\n    timer.start(10);\n    ```", "```js\n    Tracker.autorun(function(){\n        timer.tick();\n        console.log('Timer ticked!');\n    });\n    ```", "```js\nvar count = 0;\nvar someInnerFunction = function(count){\n    console.log('Running for the '+ count +' time');\n\n    if(count === 10)\n        Tracker.currentComputation.stop();\n};\nTracker.autorun(function(c){\n    timer.tick();\n\n    someInnerFunction(count);\n\n    count++;\n});\n\ntimer.stop();\ntimer.start(2);\n```", "```js\nTracker.autorun(function(c){\n    timer.tick();\n\n    if(c.firstRun)\n        return;\n\n    // Do some other stuff\n});\n```", "```js\nTracker.autorun(function(c){\n  if(c.firstRun)\n    return;\n\n  Session.get('myValue');\n}):\n```"]