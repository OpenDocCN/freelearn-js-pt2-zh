- en: Chapter 3. Styling the User Interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have an understanding of how an application is put together, we
    are going to take a look at some of the different visual elements you can use
    to customize your application. In this chapter, we will:'
  prefs: []
  type: TYPE_NORMAL
- en: Take a closer look at toolbars and buttons, using layouts, and additional styles
    and icons to boost the visual appeal of the user interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Expand on our previous work with icons; this includes using the Pictos icon
    font to display new icons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Talk about the considerations and shortcuts for working with different devices
    and screen sizes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Explore the incredibly powerful Sencha theme engine using Sass and Compass to
    create complex visual skins using simple CSS-style commands
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Styling components versus themes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we get into this chapter, it's important to have a good understanding
    of the difference between styling an individual component and creating a theme.
  prefs: []
  type: TYPE_NORMAL
- en: 'Almost every display component in Sencha Touch has the option to set its own
    style. For example, a `panel` component can use a style in this way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The style can also be set as an object using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You will notice that inside the `style` block, we have quoted both sides of
    the configuration setting. This is still the correct syntax for JavaScript and
    a very good habit to get in to for using `style` blocks. This is because a number
    of standard CSS styles use a dash as part of their name. If we do not add quotes
    to `border-left`, JavaScript will read this as `border` minus `left` and promptly
    collapse in a pile of errors.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also set a `style` class for a component and use an external CSS file
    to define the class as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Your external CSS file could then control the style of the component in the
    following manner:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This class-based control of display is considered a best practice as it separates
    the style logic from the display logic. This means that when you need to change
    a border color, it can be done in one file instead of hunting through multiple
    files for individual `style` settings.
  prefs: []
  type: TYPE_NORMAL
- en: 'These styling options are very useful for controlling the display of individual
    components. There are also certain style elements, such as border, padding, and
    margin, that can be set directly in the components'' configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: These configurations can accept either a number to be applied to all sides or
    a CSS string value, such as `1px solid black` or `10 5 5 5`. The number should
    be entered without quotes but the CSS string values need to be within quotes.
  prefs: []
  type: TYPE_NORMAL
- en: These kind of small changes can be helpful in styling your application, but
    what if you need to do something a bit bigger? What if you want to change the
    color or appearance of the entire application? What if you want to create your
    own default style for your buttons?
  prefs: []
  type: TYPE_NORMAL
- en: This is where themes and UI styles come into play.
  prefs: []
  type: TYPE_NORMAL
- en: UI styling for toolbars and buttons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's do a quick review of the basic MVC application we created in [Chapter
    2](ch02.html "Chapter 2. Creating a Simple Application"), *Creating a Simple Application*,
    and use it to start our exploration of styles with toolbars and buttons.
  prefs: []
  type: TYPE_NORMAL
- en: To begin, we are going to add a few things to the first panel, which has our
    `titlebar`, `toolbar,` and **Hello World** text.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the toolbar
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In `app/views`, you''ll find `Main.js`. Go ahead and open that in your editor
    and takea look at the first panel in our items list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We''re going to add a second toolbar on top of the existing one. Locate the
    `items` section, and after the curly braces for our first toolbar, add the second
    toolbar in the following manner:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Don't forget to add a comma between the two toolbars.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Extra or missing commas**'
  prefs: []
  type: TYPE_NORMAL
- en: 'While working in Sencha Touch, one of the most common causes of parse errors
    is an extra or missing comma. When you are moving the code around, always make
    sure you have accounted for any stray or missing commas. Fortunately for us, the
    Safari Error Console will usually give us a pretty good idea about the line number
    to look at for these types of parse errors. A more detailed list of common errors
    can be found at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://javascript.about.com/od/reference/a/error.htm](http://javascript.about.com/od/reference/a/error.htm)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now when you take a look at the first tab, you should see our new toolbar with
    our button to the left. Since the toolbars both have the same background, they
    are a bit difficult to differentiate. So, we are going to change the appearance
    of the bottom bar using the `ui` configuration option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The `ui` configuration is the shorthand for a particular set of styles in Sencha
    Touch. There are several `ui` styles included with Sencha Touch, and later on
    in the chapter, we will show you how to make your own.
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the toolbar](img/0748OS_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Styling buttons
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Buttons can also use the `ui` configuration setting, for which they offer several
    different options:'
  prefs: []
  type: TYPE_NORMAL
- en: '`normal`: This is the default button'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`back`: This is a button with the left side narrowed to a point'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`round`: This is a more drastically rounded button'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`small`: This is a smaller button'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`action`: This is a brighter version of the default button (the color varies
    according to the active color of the theme, which we will see later)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`forward`: This is a button with the right side narrowed to a point'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Buttons also have some color options built into the `ui` option. These color
    options are `confirm` and `decline`. These options are combined with the previous
    shape options using a hyphen; for example, `confirm-small` or `decline-round`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add some new buttons and see how this looks on our screen. Locate the
    `items` list with our button in the second toolbar:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace that old `items` list with the following new `items` list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'This will produce a series of buttons across the top of our toolbar. As you
    may notice, all of our buttons are aligned to the left. You can move buttons to
    the right by adding a `spacer` xtype in front of the buttons you want pushed to
    the right. Try this by adding the following between our `Forward` and `Action`
    buttons:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'This will make the `Forward` button move over to the right-hand side of the
    toolbar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Styling buttons](img/0748OS_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Since buttons can actually be used anywhere, we can add some to our title bar
    and use the `align` property to control where they appear. Modify the `titlebar`
    for our first `panel` and add an `items` section, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we should have two buttons in our title bar, one on either side of the
    title:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Styling buttons](img/0748OS_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Let's also add some buttons to the `panel` container so we can see what the
    `ui` options `confirm` and `decline` look like.
  prefs: []
  type: TYPE_NORMAL
- en: 'Locate the end of the `items` section of our `HelloPanel` container and add
    the following after the second toolbar:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: There are two things you may notice that differentiate our panel buttons from
    our toolbar buttons. The first is that we declare `xtype:'button'` in our panel
    but we don't in our toolbar. This is because the toolbar assumes it will contain
    buttons and `xtype` only has to be declared if you use something other than a
    button. The panel does not set a default `xtype` attribute, so every item in the
    panel must declare one.
  prefs: []
  type: TYPE_NORMAL
- en: The second difference is that we declare `width` for the buttons. If we don't
    declare `width` when we use a button in a panel, it will expand to the full width
    of the panel. On the toolbar, the button auto-sizes itself to fit the text.
  prefs: []
  type: TYPE_NORMAL
- en: '![Styling buttons](img/0748OS_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You will also see that our two buttons in the panel are mashed together. You
    can separate them out by adding `margin: 5` to each of the button configuration
    sections.'
  prefs: []
  type: TYPE_NORMAL
- en: These simple styling options can help make your application easier to navigate
    and provide the user with visual clues for important or potentially destructive
    actions.
  prefs: []
  type: TYPE_NORMAL
- en: The tab bar
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The tab bar at the bottom also understands the `ui` configuration option. In
    this case, the available options are `light` and `dark`. The tab bar also changes
    the icon appearance based on the `ui` option; a `light` toolbar will have dark
    icons and a `dark` toolbar will have light icons.
  prefs: []
  type: TYPE_NORMAL
- en: These icons are actually part of a special font called **Pictos**. Sencha Touch
    started using the Pictos font in Version 2.2 instead of images icons because of
    compatibility issues on some mobile devices.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The icon mask from previous versions of Sencha Touch is available but has been
    discontinued as of Version 2.2.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see some of the icons available in the documentation for the `Ext.Button`
    component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://docs.sencha.com/touch/2.2.0/#!/api/Ext.Button](http://docs.sencha.com/touch/2.2.0/#!/api/Ext.Button)'
  prefs: []
  type: TYPE_NORMAL
- en: If you're curious about the Pictos font, you can learn more about it at [http://pictos.cc/](http://pictos.cc/)
  prefs: []
  type: TYPE_NORMAL
- en: Sencha Touch themes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes you want to alter the looks of more than just a single panel or button.
    Themes in Sencha Touch are a powerful way to quickly change the overall look and
    feel of your application. We will cover the theming process a bit later in this
    chapter, but we do need to lay a bit of groundwork before we can get started.
    There is a lot of conceptual information to cover, but the flexibility you gain
    will be well worth the effort.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing we need to cover is a basic overview of the tools used by Sencha
    Touch that make theming your application possible: Sass and Compass.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are already familiar with Sass and Compass, you will be more comfortable
    installing first and then covering the concepts. You can skip ahead to the *Setting
    up Sass and Compass* section.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Sass and Compass
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Syntactically Awesome Stylesheets** (**Sass**) is used to extend standard
    CSS to allow variables, nesting, mixins, built-in functions, and selector inheritance.
    This means that all of your regular CSS declarations will work just fine, but
    you also get some extra goodies.'
  prefs: []
  type: TYPE_NORMAL
- en: Variables in Sass
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Variables allow you to define specific values and then use them throughout
    the stylesheet. The variable names are arbitrary and start with `$`. For example,
    we can use Sass to define the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'We can then use the following variables as part of our standard CSS declarations
    in the Sass file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also use basic math functions as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This creates a box with twice the padding and half the margin of the first box.
    This is great for creating flexible, scalable layouts. By changing your base values,
    you can quickly scale your application to deal with multiple devices that have
    multiple resolutions and screen sizes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Additionally, when you decide you want to change the shade of blue you are
    using, you only have to change it in one place. Sass also has a number of built-in
    functions for adjusting colors, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '`darken`: This makes the color darker by percentage'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lighten`: This makes the color lighter by percentage'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`complement`: This returns the complementary color'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`invert`: This returns the inverted color'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`saturate`: This saturates the color by a numerical value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`desaturate`: This desaturates the color by a numerical amount'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These functions allow you to perform operations, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: There are also functions for numbers, lists, strings, and basic if-then statements.
    These functions help make your stylesheets as flexible as your programming code.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Sass functions**'
  prefs: []
  type: TYPE_NORMAL
- en: The full list of Sass functions can be found at [http://sass-lang.com/docs/yardoc/Sass/Script/Functions.html](http://sass-lang.com/docs/yardoc/Sass/Script/Functions.html).
  prefs: []
  type: TYPE_NORMAL
- en: Mixins in Sass
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Mixins** are a variation of the standard Sass variables. Avoid simply declaring
    a single one-to-one variable such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Instead, you can use a mixin to declare an entire CSS class as a variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'You can then take that mixin and use it in the Sass file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: This gives you all of the attributes of the `baseDiv` mixin component plus the
    specific styles you declared in the `#specificDiv` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also set your mixin to use arguments to make it even more flexible.
    Let''s look at an alternative version of what we had seen previously:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'This means we can set values for `width`, `margin`, and `float` as part of
    our Sass code as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This gives us four `div` tags with slightly different properties. All of them
    share the same base properties as the mixin `baseDiv` class, but they have different
    values for `width` and `float`. We can also override the values for the mixin
    `baseDiv` by adding them after we include the mixin as seen in our `#divRightAlert`
    example.
  prefs: []
  type: TYPE_NORMAL
- en: Nesting in Sass
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sass also allows nesting of CSS declarations. This not only lets you write styles
    that more closely mirror the structure of your HTML, but also makes for cleaner,
    more easily maintainable code.
  prefs: []
  type: TYPE_NORMAL
- en: 'In HTML, we often nest elements within one another to give the document a structure.
    A common example of this would be an unordered list that contains several list
    items, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Normally, to style this list via CSS, you would write rules for the `ul` elements
    separately from the rules for the `li` elements. The two rules might not even
    be near one another in your CSS files, making debugging or modifying the styles
    more difficult.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Sass, we can write the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: See how we nest the style declarations for our `li` element inside the style
    declaration for `ul`? Not only does nesting match the structure of the HTML document,
    but it also lets you know that it can be found inside the `ul` element when you
    want to update the `li` element.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you compile this with Sass, the resulting CSS has separate rules for the
    `ul` and `li` elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: If you were to view this list in your browser, you would see a list with a red
    border around it and blue borders around each of the individual list items.
  prefs: []
  type: TYPE_NORMAL
- en: '![Nesting in Sass](img/0748OS_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: It's also possible to reference the item one level up in the nesting using the
    ampersand (`&`) character. This is useful while adding things like hover states
    to nested elements, or more generally, grouping together the exceptions to your
    rules.
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose we want to change the background color when we hover over one of our
    `li` elements. We could add `&:hover` inside the `li` style declaration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The `&:hover` gets translated into `li:hover` by the Sass compiler:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The `&` special character doesn''t have to be used at the beginning of a rule.
    Say your designer has the elements `li`, which use a bigger border when they''re
    located in a special `#sidebardiv` component. You could write a separate rule
    after your `ul`/`li` rules or you could add the exception inside the `li` ruleset
    using the special `&` character:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code will be translated to the following rule:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also nest CSS namespaces. In CSS, if properties all start with the
    same prefix, such as `font-`, then you can nest them as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Be sure to remember to put the colon after the namespace. When compiled, this
    will become the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: This works for any namespace CSS property, such as `border-` or `background-`.
  prefs: []
  type: TYPE_NORMAL
- en: Selector inheritance in Sass
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Selector inheritance in Sass is analogous to object inheritance in JavaScript.
    In the same way, a `panel` component extends the `container` object, meaning that
    a `panel` has all the properties and functions of a `container`, and then some.
    Sass lets you have objects that inherit the styles of other objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Say we want to create some message box elements for our application, one for
    informational messages and one for errors. First, we need to define a generic
    box:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, in any class where we want to include the `.messageBox` styles, we just
    use the `@extend` directive `@extend .messageBox;` on a line by itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, in HTML, we would just use the `.errorBox` and `.infoBox` classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Put it all together and you will see the left box with a blue border and blue
    text and the right box with a red border and red text:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Selector inheritance in Sass](img/0748OS_03_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Compass
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Just as Sencha Touch is a framework built on the lower-level languages of JavaScript,
    CSS, and HTML, Compass is a framework built on Sass and CSS. Compass provides
    a suite of reusable components for styling your application. These include:'
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS Resets**: These enforce a uniform appearance for most HTML across all
    of the major web browsers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mixins**: These allow you to declare complex programmatic functions for your
    CSS.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Layouts and Grids**: These enforce width and height standards to assist in
    keeping your layout consistent across all pages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Image Spriting**: This allows you to automatically generate a single image
    from multiple smaller images (this is faster for the browser to download). The
    CSS will automatically show just the portion of the image you need, hiding the
    rest.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Text Replacement**: This allows you to automatically swap specific text pieces
    within your document.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Typography**: This provides advanced options for using fonts within your
    web pages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compass also incorporates into its components the latest in CSS best practices,
    meaning that your stylesheet will be leaner and more efficient.
  prefs: []
  type: TYPE_NORMAL
- en: Sass + Compass = themes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sencha Touch themes take Sass and Compass one step further by providing variables
    and mixins whose functionalities are specific to Sencha Touch. The JavaScript
    portion of Sencha Touch generates lots of very complex HTML in order to display
    various components such as toolbars and panels. Rather than learning all of the
    intricate classes and HTML tricks used by Sencha Touch, you can simply use the
    appropriate mixins to change the appearance of your application.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Sass and Compass
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you decide that you would like to create your own Sencha Touch theme, you
    won't have to install either Sass or Compass as they come packaged with Sencha
    Cmd.
  prefs: []
  type: TYPE_NORMAL
- en: However, Windows users will first need to install Ruby. Ruby is used to compile
    the Sass/Compass files into a working theme. Linux and OS X users should already
    have Ruby installed on their computers.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Ruby on Windo
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: download the Ruby installer from [http://rubyinstaller.org/](http://rubyinstaller.org/).
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We recommend downloading Version 1.9.2 as Sencha Cmd can have problems with
    newer versions of Ruby.
  prefs: []
  type: TYPE_NORMAL
- en: Run the installer and follow the onscreen instructions to install Ruby. Be sure
    to check the box that says **Add Ruby executables to your PATH**. This will save
    you a lot of typing on the command line later on.
  prefs: []
  type: TYPE_NORMAL
- en: Once the installation is complete, open up the command line in Windows by going
    to **Start** | **Run**, typing `cmd`, and pressing *Enter*. This should bring
    up the command line.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, try typing **ruby -v**. You should see something such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: This means that Ruby is correctly installed.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a custom theme
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next thing we need to do is create our own theme SCSS file. Locate the `app.scss`
    file in `TouchStart/resources/sass` and make a copy of the file. Rename the new
    copy of the file as `myTheme.scss`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have renamed the file, you will need to compile the theme into an
    actual CSS file that our application can read. To do this, we need to return to
    the command line and move into our `TouchStart/resources/sass` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you are in the directory, you can enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: This will compile our new theme and create a new file under `resources/css`
    called `myTheme.css`.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Using `compass compile` will compile any `.scss` files in the directory. You
    will need to run this command each time you make changes to the `.scss` file.
    However, you can also use the command `compass watch` to monitor the current folder
    for any changes and compile them automatically.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have our new CSS theme file, we need to tell the application to
    load it. In previous versions of Sencha Touch, the CSS files were loaded from
    the `index.html` file. However, with applications generated by Sencha Cmd, the
    CSS files are actually loaded from within the `app.json` file located in our main
    `TouchStart` directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `app.json` and look for the section where it says:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Change this section to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**SCSS and CSS**'
  prefs: []
  type: TYPE_NORMAL
- en: Notice that we are currently including a stylesheet from the `css` folder called
    `sencha-touch.css` and we have a matching file in the `scss` folder called `sencha-touch.scss`.
    When the SCSS files are compiled, they create a new file in your `css` folder.
    This new file will have the suffix `.css` instead of `.scss`.
  prefs: []
  type: TYPE_NORMAL
- en: '`.scss` is the file extension for Sass files.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you reload the application in your web browser, you won''t see any changes
    since we have simply duplicated the file for our theme. Let''s take a look at
    how we can change that. Open your `myTheme.scss` file. You should see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: This code grabs all of the default Sencha Touch theme information. When we run
    `compass compile` or `compass watch`, it gets compiled and compressed into a CSS
    file that our application can read.
  prefs: []
  type: TYPE_NORMAL
- en: The best part is that we can now change the entire color scheme of the application
    with a single line of code.
  prefs: []
  type: TYPE_NORMAL
- en: Base color
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'One of the key variables in the Sencha Touch theme is `$base_color`. This color
    and its variations are used throughout the entire theme. To see what we mean,
    let''s change the color of our theme to a nice forest green by adding the following
    to the top of our `myTheme.scss` file (on top of all the other text):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Next, we need to recompile the Sass files to create our `myTheme.css` file.
    If you are running `compass watch`, this will happen automatically when you save
    the Sass file. If not, you will need to run `compass compile` as before to update
    the CSS (remember you need to run this from inside the `resources/sass` directory).
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**compass compile versus compass watch**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Compass uses the `compile` command to create the new stylesheet based on your
    SCSS file. However, you can also set up Compass to watch a particular file for
    changes and automatically compile files when anything new is added. This command
    is entered on the command line as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: This command will remain active as long as your terminal is open. Once you close
    the terminal window, you will need to run the command again in order to make Compass
    watch out for changes.
  prefs: []
  type: TYPE_NORMAL
- en: Reload the page in Safari and you should see a new forest green look for our
    application.
  prefs: []
  type: TYPE_NORMAL
- en: Note that this one line of code has created variations for both our dark and
    light toolbars. Changing the base color has also changed the icons for our tab
    bar at the bottom.
  prefs: []
  type: TYPE_NORMAL
- en: This is all pretty cool, but what if we want to tweak individual parts of the
    theme? Sencha Touch themes provide exactly what we need using mixins and the `ui`
    configuration option.
  prefs: []
  type: TYPE_NORMAL
- en: Mixins and the UI configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we have noted previously, the Sencha theme system is a set of predefined
    mixins and variables that get compiled to create a CSS stylesheet. Each component
    has its own mixins and variables for controlling styles. This means you can override
    these variables or use the mixins to customize your own theme.
  prefs: []
  type: TYPE_NORMAL
- en: You can also use mixins to create additional options for the `ui` configuration
    option (beyond the simple `light` and `dark` values that we have seen previously).
    For example, we can modify the color of our toolbar by adding a new mixin to our
    `myTheme.sass` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our `myTheme.sass` file, locate the line that says the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'After this line, add the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'This code tells Sass to create a new `ui` option for the toolbar. Our new option
    will be called `subnav`, and it will have a base color of `#625546`. The last
    option sets the style for the gradient. The available styles are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`flat`: No gradient'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`matte`: A subtle gradient'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bevel`: A medium gradient'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`glossy`: A glassy style gradient'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`recessed`: A reversed gradient'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can find additional information about these variables (and any available
    mixins) at the top of each component in the Sencha Touch documentation at [http://docs.sencha.com/touch/2.2.0/](http://docs.sencha.com/touch/2.2.0/).
  prefs: []
  type: TYPE_NORMAL
- en: '![Mixins and the UI configuration](img/0748OS_03_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once you have saved the file, you will need to recompile the stylesheet using
    the `compass compile` command on the command line.
  prefs: []
  type: TYPE_NORMAL
- en: 'We also need to change the `ui` configuration option in our JavaScript file.
    Locate our `Main.js` file in the `app/view` folder and open it. Find the second
    toolbar in our application, just on top of where we added the buttons. It should
    look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: You will need to change `ui:'light'` to `ui:'subnav'` and save the file.
  prefs: []
  type: TYPE_NORMAL
- en: You can then reload the page to see your changes.
  prefs: []
  type: TYPE_NORMAL
- en: '![Mixins and the UI configuration](img/0748OS_03_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You will also notice that the buttons within the toolbar also adjust their colors
    to match the new toolbar's `ui` configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Adding new icons
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we mentioned earlier in the chapter, previous versions of Sencha Touch used
    icon masks for creating icons in your application. This caused some issues with
    browser compatibility, so the new icons are actually generated from the Pictos
    icon font. By default, 26 of these icons are included, but you can add more of
    them using the `icon` mixin.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A list of default icons in Sencha Touch is available at [http://docs.sencha.com/touch/2.2.0/#!/api/Ext.Button](http://docs.sencha.com/touch/2.2.0/#!/api/Ext.Button).
  prefs: []
  type: TYPE_NORMAL
- en: A full list of Pictos icons is available at [http://pictos.cc/font/](http://pictos.cc/font/).
  prefs: []
  type: TYPE_NORMAL
- en: 'In your `myTheme.sass` file, locate the line that says:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'After this line, add the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'The `icon` mixin takes two arguments: the name you want to refer to the icon
    with (which is arbitrary) and the corresponding letter of the icon in the Pictos
    font. This second argument can be looked up on the Pictos website referred in
    the preceding tip.'
  prefs: []
  type: TYPE_NORMAL
- en: Once the stylesheet is recompiled, we can change the `iconCls` value in our
    panel to use the new image.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `app/Main.js` file, locate `iconCls` for our `HBox` panel that currently
    says:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace the line with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Save your changes and reload the page to see your new icon. Don't forget to
    recompile the Sass file using `compass compile` on the command line.
  prefs: []
  type: TYPE_NORMAL
- en: Variables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Variables are also available for most components, and they are used to control
    specific color, size, and appearance options. Unlike mixins, variables target
    a single setting for a component. For example, the `button` component includes
    variables for the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$button-gradient`: The default gradient for all buttons'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$button-height`: The default height for all buttons'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$button-radius`: The default border radius for all buttons'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$button-stroke-weight`: The default border thickness for all buttons'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As mentioned previously, you can find a listing for each of these variables
    (and any available mixins) at the top of each component in the Sencha Touch documentation
    at [http://docs.sencha.com/touch/2.2.0/](http://docs.sencha.com/touch/2.2.0/).
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if we add `$button-height: 2em;` to our `myTheme.scss` file, then
    we can recompile and see that buttons in our toolbar are now larger than they
    were before.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Variables](img/0748OS_03_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You will also notice that our **small** button did not change in size. This
    is because its UI configuration (`small`) has already been defined separately
    and includes a specific height. If you wanted to change the size of this button,
    you would need to remove the `ui` configuration for it in the `Main.js` file.
  prefs: []
  type: TYPE_NORMAL
- en: More Sass resources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using the mixins and variables included in the Sencha Touch theme, you can change
    almost any aspect of your interface to look exactly the way you want it to. There
    are a number of online resources that will help you dig deeper into all the possibilities
    with Sass and Compass.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Additional resources**'
  prefs: []
  type: TYPE_NORMAL
- en: A full list of the Sencha Touch theme mixins and variables is available at [http://dev.sencha.com/deploy/touch/docs/theme/](http://dev.sencha.com/deploy/touch/docs/theme/).
  prefs: []
  type: TYPE_NORMAL
- en: Learn more about Sass at [http://sass-lang.com/](http://sass-lang.com/).
  prefs: []
  type: TYPE_NORMAL
- en: The Compass home page has examples of sites using Compass, tutorials, help,
    and more; it is available at [http://compass-style.org/](http://compass-style.org/).
  prefs: []
  type: TYPE_NORMAL
- en: Default themes and theme switching
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the introduction of Sencha Touch 2.2, there is now support for Blackberry
    10 and Windows Phone platforms. To help style your application for these platforms,
    Sencha Touch 2.2 includes default themes for both of them. Let's take a look at
    how this works by creating a few new theme files.
  prefs: []
  type: TYPE_NORMAL
- en: Start by making two copies of our original `resources/sass/app.scss` file and
    rename them to `windows.scss` and `blackberry.scss`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In both files, locate the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'In `windows.scss,` change the lines to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'In `blackberry.scss,` change the lines to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Next, you will need to run `compass compile` to create the new CSS files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can use our `app.json` file to switch these themes based on the platform
    our application is running on. Open up the `app.json` file and look for our `css`
    section again. It should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s change that to look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Since most of us are not rolling in money, we probably don''t have one of every
    kind of device to test with. However, we can add an argument at the end of our
    application URL to test each of our themes. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://myapplication.com?platform=ie10](http://myapplication.com?platform=ie10)'
  prefs: []
  type: TYPE_NORMAL
- en: This will be handled automatically in the application, but we can test our application
    by adding this argument to the URL. We should now have three different themes
    based on the platform.
  prefs: []
  type: TYPE_NORMAL
- en: '![Default themes and theme switching](img/0748OS_03_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can make these kinds of conditional themes based on more than just these
    three options. The available platforms are:'
  prefs: []
  type: TYPE_NORMAL
- en: Phone, tablet, and desktop
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iOS, Android, and Blackberry
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Safari, Chrome, IE 10, and Firefox
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This means we can change styles based on any of the platforms mentioned in the
    preceding list. Just generate new Sass/CSS stylesheets and include the appropriate
    configuration lines in `app.json` as we have in the previous examples.
  prefs: []
  type: TYPE_NORMAL
- en: These types of conditional style tweaks will help keep your application readable
    and usable across multiple devices.
  prefs: []
  type: TYPE_NORMAL
- en: Images on multiple devices with Sencha.io Src
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If your application uses images, you probably need something a bit more robust
    than conditional styles, such as those used in the previous section. Creating
    individual image sets for each device would be a nightmare. Fortunately, the folks
    at Sencha have an answer to this problem: a web-based service called `Sencha.io
    Src`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`Sencha.io Src` is a separate service from Sencha and can be used in any web-based
    application. The service works by taking an original image and resizing it on
    the fly to fit the current device and screen size. These images are also cached
    by the service and optimized for quick, repeatable delivery. To use the `Sencha.io
    Src` service, the only thing you need to change is the URL for your image.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, a basic HTML image tag looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'The same image tag, using the `Sencha.io Src` service, would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: This passes the actual URL of your image to the system for processing.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Image URLs in Sencha.io Src**'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in the example, we are using a full image URL (with [http://www.mydomain.com/](http://www.mydomain.com/))
    instead of a shorter relative URL (such as `/images/my-big-image.jpg`). Since
    the `Sencha.io Src` service needs to be able to directly get to the file from
    the main `Sencha.io` server, a relative URL will not work. The image file needs
    to be on a publicly available web server in order to work correctly.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images on multiple devices with Sencha.io Src](img/0748OS_03_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: By using this service, our large image will be scaled to fit the full width
    of our device's screen no matter what the size of the device we use. `Sencha.io
    Src` also keeps the image proportions correct without any squishing or stretching.
  prefs: []
  type: TYPE_NORMAL
- en: Specifying sizes with Sencha.io Src
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We don''t always use fullscreen images in our applications. We often use them
    for things such as icons and accents within the application. `Sencha.io Src` also
    lets us specify a particular height and/or width for an image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case, we have set the width of our image to be resized to `320` pixels
    and the height to `200` pixels. We can also constrain just the width; the height
    will automatically be set to the correct proportion:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is important to note that `Sencha.io Src` will only shrink images; it will
    not enlarge them. If you enter a value larger than the dimensions of the actual
    image, it will simply display at the full image size. Your full-size image should
    always be the largest size you will need for the display.
  prefs: []
  type: TYPE_NORMAL
- en: Sizing by formula
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We can also use formulas to make changes based on the screen size of the device.
    For example, we can use the following code to make our photo 20 pixels narrower
    than the full width of the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: This is useful if you want to leave a small border around the image.
  prefs: []
  type: TYPE_NORMAL
- en: Sizing by percentage
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We can also use percentage widths to set our image sizes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: The `x50` part of our URL sets the image size to 50 percent of the screen width.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can even combine these two elements to create a scalable image gallery:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: By using the formula `-20x50-5`, we take our original image, remove 20 pixels
    for our margin, shrink it to 50 percent, and then remove an additional five pixels
    to allow for space between our two images.
  prefs: []
  type: TYPE_NORMAL
- en: '![Sizing by percentage](img/0748OS_03_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Changing file types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`Sencha.io Src` offers some additional options you may find useful. Firstly,
    it lets you change the file type for your image on the fly. For example, the following
    code will turn your JPG file into a PNG:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: This can be useful while offering your applications' users multiple image downloading
    options.
  prefs: []
  type: TYPE_NORMAL
- en: 'This option can also be combined with the resizing options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: This would convert the file to PNG format and scale it to 50 percent.
  prefs: []
  type: TYPE_NORMAL
- en: By using the functions available in `Sencha.io Src`, you can automatically size
    images for your application and provide a consistent look and feel across multiple
    devices.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Sencha.io is a free service. For a full list of all the functions you can use
    with `Sencha.io Src`, go to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.sencha.com/learn/how-to-use-src-sencha-io/](http://www.sencha.com/learn/how-to-use-src-sencha-io/)'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learnt how to style toolbars using the `ui` configuration
    option. We also talked about how Sencha Touch uses Sass and Compass to create
    a robust theme system. We included installation instructions for Sass and Compass
    and explained mixins, variables, nesting, and selector inheritance. Finally, we
    touched upon designing interfaces for multiple devices and handling automatic
    image resizing using `Sencha.io Src`.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will dive right back into the Sencha Touch framework.
    We'll review a bit of what we have previously learned about the components' hierarchies.
    Then, we will cover some of the more specialized components that are available.
    Finally, we'll give you some tips on finding the information youneed in the Sencha
    Touch API documentation.
  prefs: []
  type: TYPE_NORMAL
