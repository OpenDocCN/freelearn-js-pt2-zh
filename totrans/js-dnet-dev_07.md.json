["```js\n<script>\n    var Logger = (function () {\n\n        //private variable\n        var instance;\n\n        //private method\n        function initializeInstance() {\n            //closure returns the public access to the writeLog function that can be accessible by the singleton object\n            return {\n                writeLog: function (message) {\n                    console.log(message);\n                }\n            };\n        };\n        //closure that returns the public access to the getInstance method that returns the singleton object\n        return {\n            //This is a public method that returns the singleton instance\n            getInstance: function () {\n                if ( !instance ) {\n                    instance = initializeInstance();\n                }\n                return instance;\n            },\n        };\n    })();\n\n    var logger = Logger.getInstance();\n    logger.writeLog(\"Hello world\");\n</script>\n```", "```js\nfunction initializeInstance() {\n            //closure returns the public access to the writeLog function that can be accessible by the singleton object\n            return {\n                writeLog: function (message) {\n                    if(this.logEnabled)\n                     console.log(message);\n                },  \n                showAlert: function (message) {\n                    if(this.logEnabled)\n                        alert(message);\n                },\n                logEnabled: false\n            };\n        };\n```", "```js\n//LoggerFactory to instantiate objects based on logger type\n    function LoggerFactory() {\n        var logger;\n        this.createLogger = function (loggerType) {\n            if (loggerType === \"console\") {\n                logger = new ConsoleLogger();\n            }\n            else if (loggerType === \"alert\") {\n                logger = new AlertLogger();\n            }\n            return logger;\n        }\n    }\n\n    //Console logger function\n    var ConsoleLogger= function(){\n        this.logMessage=function(message){\n            console.log(message);\n        } \n    };\n\n    //Alert logger function\n    var AlertLogger= function(){\n        this.logMessage= function(message){\n            alert(message);\n        } \n    };\n\n    var factory = new LoggerFactory();\n\n    //creating Console logger object using LoggerFactory\n    var consoleLogger = factory.createLogger(\"console\");\n    consoleLogger.logMessage(\"Factory pattern\");\n\n    //create Alert logger object using LoggerFactory\n    var alertLogger = factory.createLogger(\"alert\");\n    alertLogger.logMessage(\"Factory pattern\");\n```", "```js\n<script>\n    //Shape Factory to create instances of Circle and Square\n    var ShapeFactory = function() {\n        var shape;\n        this.createShape = function (shapeType) {\n            if (shapeType === \"circle\") {\n                return new CircleShape();\n            }\n            else if (shapeType === \"square\") {\n                return new SquareShape();\n            }\n        }\n    }\n\n    //Circle object to draw circle\n    var CircleShape = function () {\n        this.make = function () {\n            var c = document.getElementById(\"myCanvas\");\n            var ctx = c.getContext(\"2d\");\n            ctx.beginPath();\n            ctx.arc(100, 75, 50, 0, 2 * Math.PI);\n            ctx.stroke();\n        }\n    }\n\n    //Square object to draw square\n    var SquareShape = function () {\n        this.make = function () {\n            var c = document.getElementById(\"myCanvas\");\n            var ctx = c.getContext(\"2d\");\n            ctx.beginPath();\n            ctx.rect(50, 50, 50, 50);\n            ctx.stroke();\n        }\n    }\n```", "```js\n    //Car factory to create cars\n    var CarFactory= function() {\n        var car\n        this.createCar = function (carType) {\n            if (carType === \"honda\") {\n                return new HondaCar();\n            }\n            else if (carType === \"nissan\") {\n                return new NissanCar();\n            }\n        }\n    }\n\n    //Honda object\n    var HondaCar = function () {\n        this.make = function () {\n            console.log(\"This is Honda Accord\");\n        }\n    }\n\n    //Nissan object\n    var NissanCar = function () {\n        this.make = function () {\n            console.log(\"This is Nissan Patrol\")\n        }\n    }\n```", "```js\n    function execute() {\n        //initializing an array to hold objects\n        var objects = [];\n\n        //Creating Shape Factory to create circle shape\n        var shapeFactory = new ShapeFactory();\n        var circleShape = shapeFactory.createShape(\"circle\");\n\n        //Creating Car Factory to create cars\n        var carFactory = new CarFactory();\n        var hondaCar= carFactory.createCar(\"honda\");\n        var nissanCar = carFactory.createCar(\"nissan\");\n\n        //Adding all the instances created through factories\n        objects.push(circleShape);\n        objects.push(hondaCar);\n        objects.push(nissanCar);\n\n        //Calling make method of all the instances. \n        for (var i = 0; i < objects.length; i++) {\n            alert(objects[i]);\n            objects[i].make();\n        }\n    }\n\n</script>\n```", "```js\n    <div>\n        <input type=\"button\" onclick=\"execute()\" value=\"Execute\" />\n    </div>\n    <div>\n        <canvas id=\"myCanvas\"></canvas>\n    </div>\n```", "```js\n<script>\n\n    function Car(make, model, year, type)\n    {\n        this.make = make;\n        this.model = model;\n        this.year = year;\n        this.type = type;\n\n        this.displayCarDetails = function(){\n\n        }\n\n    }\n\n    function CarPrototype(carPrototype) {\n        var car = new Car();\n\n        this.getPrototype = function () {\n            car.make = carPrototype.make;\n            car.model = carPrototype.model;\n            car.year = carPrototype.year;\n            car.type = carPrototype.type;\n            return car;\n        }\n\n    }\n\n    (function () {\n        var car = new Car(\"Honda\", \"Accord\", \"2016\",\"sedan\");\n        var carPrototype = new CarPrototype(car);\n        var clonedCar = carPrototype.getPrototype();\n\n    })();\n</script>\n```", "```js\n is a car object that accepts four parameters, make, model, year and type. CarPrototype() is a function that accepts the car object and returns the cloned version of the car object. This pattern is performance efficient and saves developers time creating a clone copy of the object by just calling the prototype object's clone method. The user does not need to care about populating the properties after object instantiation; it initializes when the object is created and gets the same values as the original object. It is used in conditions where we need to clone instances of objects when they are in a specific state and can be easily cloned by calling the getProtoype() method.\n```", "```js\n// old interface\n    function PersonRepository(){\n        this.SavePerson= function(name, email, phoneNo){\n            //Call ajax to save person\n            console.log(\"Name: \" + name + \", Email: \" + email + \", Phone No: \" + phoneNo);\n        }\n    }\n```", "```js\nvar execute = function () {\n\n        var personRepository = new PersonRepository();\n        personRepository.SavePerson(\"John\", \"john@email.com\", \"1201111111\");\n\n    }\n```", "```js\nfunction PersonRepository() {\n        this.SavePerson = function (person) {\n            //call ajax to send JSON person data\n          console.log(\"Name: \" + person.name + \", Email: \" + person.email + \", Phone No: \" + person.phoneNo);\n        }\n    }\n```", "```js\n    function PersonRepositoryAdapter() {\n        this.SavePerson = function (name, email, phoneNo) {\n            var person = { \"name\": name, \"email\": email, \"phoneNo\": phoneNo };\n\n            var personRepository = new PersonRepository();\n            //calling new Person Repository\npersonRepository.SavePerson(person);\n        }\n    }\n```", "```js\n    var execute = function () {\n\n    //old interface\n// var personRepository = new PersonRepository();\n  // personRepository.SavePerson(\"John\", \"john@email.com\", \"1201111111\");\n\n      //calling adapter pattern\n        var personAdapter = new PersonRepositoryAdapter();\n        personAdapter.SavePerson(\"John\", \"john@email.com\", \"1201111111\");\n\n    }\n```", "```js\n<script>\n\n    var Product= function (code, quantity, price) {\n        this.code = code;\n        this.quantity = quantity;\n        this.price = price\n\n        this.total = function () {\n            this.price = price * quantity;\n            return this.price;\n        }\n\n    }\n\n    //Decorator that takes product and percent as parameter to apply Tax\n    function AddTax(product, percent) {\n        product.total = function () {\n             product.price = product.price + (product.price * percent / 100);\n            return  product.price;\n        }\n    }\n\n    //Decorator to add Courier charges in the total amount.\n    function AddCourierCharges(product, amount) {\n        product.total = function () {\n            product.price = product.price + amount;\n            return product.price;\n        }\n    }\n\n    var execute = (function () {\n        var prod = new Product(\"001\", 2, 20);\n        console.log(\"Total price: \" + prod.total());\n        AddTax(prod, 15);\n        console.log(\"Total price after Tax: \" + prod.total());\n        AddCourierCharges(prod, 200);\n        console.log(\"Total price after Courier Charges: \" + prod.total());\n    })();\n```", "```js\n<script>\n    var Permission = function () {\n        this.loadPermission = function (userId) {\n            //load user permissions by calling service and populate HTML element\n            var repo = new ServiceRepository();\n            repo.loadUserPermissions(userId);\n        }\n    }\n\n    var Profile = function () {\n        this.loadUserProfile = function (userId) {\n            //load user profile and set user name and image in HTML page\n            var repo = new ServiceRepository();\n            repo.loadUserProfile(userId);\n        }\n    }\n\n    var Chat = function () {\n        this.loginUserChat = function (userId) {\n            //Login user chat and update HTML element\n            var repo = new ServiceRepository();\n            repo.loadUserChat(userId);\n        }\n    }\n\n    var UserFacade = function () {\n        this.loadUser = function (userId) {\n            var userPermission = new Permission();\n            var userProfile = new Profile();\n            var userChat = new Chat();\n\n            userPermission.loadPermission(userId);\n            userProfile.loadUserProfile(userId);\n            userChat.loginUserChat(userId);\n\n        }\n    }\n\n    var loginUser = (function (username, password) {\n\n            //Service to login user\n            var repo = new ServiceRepository();\n            //On successfull login, user id is returned\n            var userId = repo.login(username, password);\n\n            var userFacade = new UserFacade();\n            userFacade.loadUser(userId);\n\n    })();\n<\n```", "```js\n<script>\n\n    var Invitation = function (email) {\n        this.email = email;\n        this.sendInvite = function () {\n            this.email.sendMessage();\n        }\n    }\n\n    var Reminder = function (sms) {\n        this.sms = sms;\n        this.sendReminder = function () {\n            this.sms.sendMessage();\n        }\n    }\n\n    var SMS = function () {\n        //send SMS\n        this.sendMessage = function () { console.log(\"SMS sent\"); }\n\n    }\n\n    var Email = function () {\n        //send email\n        this.sendMessage = function () { console.log(\"Email sent\");}\n    }\n\n    var execute = (function () {\n        var email = new Email();\n        var sms = new SMS();\n\n        var invitation = new Invitation(email);\n        var reminder = new Reminder(sms);\n\n        invitation.sendInvite();\n        reminder.sendReminder();\n    })();\n</script>\n```", "```js\n<script>\n\n    //Main component\n    var Handler = function (table) {\n        this.table = table;\n        this.nextHandler = null;\n    }\n\n    //Prototype to chain objects\n    Handler.prototype = {\n        generate: function (count) {\n            for (i = 1; i <= count; i++) {\n                console.log(this.table + \" X \" + i + \" = \" + (this.table * i));\n            }\n            //If the next handler is available execute it\n            if (this.nextHandler != null)\n                this.nextHandler.generate(count);\n        },\n        //Used to set next handler in the pipeline\n        setNextHandler: function (handler) {\n            this.nextHandler = handler;\n        }\n    }\n\n    //function executed on Page load\n    var execute = (function () {\n\n        //initializing objects\n        var handler1 = new Handler(2),\n         handler2 = new Handler(3),\n         handler3 = new Handler(4);\n\n        //chaining objects\n        handler1.setNextHandler(handler2);\n        handler2.setNextHandler(handler3);\n\n        //calling first handler or the component in the pipeline\n        handler1.generate(10);\n\n    })();\n<script>\n```", "```js\n<script>\n\n    //Main component\n    var Handler = function (budget, budgetOwner) {\n        this.budget = budget;\n        this.budgetOwner = budgetOwner;\n        this.nextHandler = null;\n    }\n\n    //Prototype to chain objects\n    Handler.prototype = {\n        checkBudget: function (amount) {\n            var budgetFound = false;\n            if (amount <= this.budget) {\n                console.log(\"Amount is under \" + this.budgetOwner + \" level\");\n                budgetFound = true;\n            }\n\n            //If the next handler is available and budget is not found\n            if (this.nextHandler != null && !budgetFound)\n                this.nextHandler.checkBudget(amount);\n        },\n\n        //Used to set next handler in the popeline\n        setNextHandler: function (handler) {\n            this.nextHandler = handler;\n        }\n    }\n\n    //funciton executed on Page load\n    var execute = (function () {\n\n        //initializing objects\n        var handler1 = new Handler(10000, \"Line Manager\"),\n         handler2 = new Handler(50000, \"Head of Department\"),\n         handler3 = new Handler(100000, \"CTO\"),\n         handler4 = new Handler(1000000, \"CEO\");\n\n        //chaining objects\n        handler1.setNextHandler(handler2);\n        handler2.setNextHandler(handler3);\n        handler3.setNextHandler(handler4);\n\n        //calling first handler or the component in the pipeline\n        handler1.checkBudget(20000);\n\n    })();\n</script>\n```", "```js\nimplements the observer pattern:\n```", "```js\n<script>\n\n    //Sample function to convert text to French language\n    function translateTextToFrench(value) {\n        // call some service to convert text to French language\n        return value;\n    }\n\n    //Sample function to convert text to Arabic language\n    function translateTextToArabic(value) {\n        //cal some service to convert text to Arabic language\n        return value;\n\n    }\n\n    //Helper function used by the Observer implementors \n    var HelperFunction = function (type) {\n\n        var txtEntered = document.getElementById(\"txtEntered\");\n\n        var englishText = document.getElementById(\"englishText\");\n        var frenchText = document.getElementById(\"frenchText\");\n        var arabicText = document.getElementById(\"arabicText\");\n\n        if (type == \"english\") {\n            englishText.innerText = txtEntered.value;\n        } else if (type == \"french\") {\n            frenchText.innerText = translateTextToFrench(txtEntered.value);\n        } else if (type == \"arabic\") {\n            arabicText.innerText = translateTextToArabic(txtEntered.value);\n        }\n    }\n\n    var EnglishTranslator = {\n        update: function () {\n            //Call helper function to change text to English\n            HelperFunction(\"english\");\n        }\n    }\n\n    var FrenchTranslator = {\n        update: function () {\n            //Call helper function to change text to French\n            HelperFunction(\"french\");\n        }\n    }\n\n    var ArabicTranslator = {\n        update: function () {\n            //Call helper function to change text to Arabic\n            HelperFunction(\"arabic\");\n        }\n    }\n\n    //Observer function that contains the list of observer handlers\n    function Observer() {\n        this.observers = [];\n    }\n\n    //to add observer\n    Observer.prototype.addObserver = function (object) {\n        console.log('added observer: ' + object);\n        this.observers.push(object);\n    };\n\n    //to remove observer\n    Observer.prototype.removeObserver = function (object) {\n        console.log(\"removing observer\");\n        for (i = 0; i < this.observers.length; i++) {\n            if (this.observers[i] == object) {\n                this.observers.splice(object);\n                return true;\n            }\n        }\n        return false;\n    };\n\n    //To notify all observers and call their update method\n    Observer.prototype.notify = function () {\n        for (i = 0; i < this.observers.length; i++) {\n            this.observers[i].update();\n        }\n    }\n\n    //Adding objects as observers that implements the update method\n    var observer = new Observer();\n    observer.addObserver(EnglishTranslator);\n    observer.addObserver(FrenchTranslator);\n    observer.addObserver(ArabicTranslator);\n\n    //Execute will be called on button click to notify observers\n    var execute = function () {\n        observer.notify();\n    };\n\n</script>\n<body>\n    <div>\n        Specify some text: <input type=\"text\" id=\"txtEntered\" />\n        <input type=\"button\" onclick=\"execute()\" value=\"Notify\" />\n    </div>\n    <div>\n        <span id=\"englishText\"></span>\n        <span id=\"frenchText\"></span>\n        <span id=\"arabicText\"></span>\n    </div>\n</body>\n```", "```js\n implement the pub/sub pattern in JavaScript:\n```", "```js\nvar PubSub = function () {\n        this.events = [];\n        this.subscribe = function (eventName, func) {\n            this.events[eventName] = this.events[eventName] || [];\n            this.events[eventName].push(func);\n        };\n\n        this.unsubscribe = function (eventName, func) {\n            if (this.events[eventName]) {\n                for (i = 0; i < this.events[eventName].length; i++) {\n                    if (this.events[eventName][i] === func) {\n                        this.events[eventName].splice(i, 1);\n                        break;\n                    }\n                }\n            }\n        };\n\n        this.publish = function (eventName, data) {\n            console.log(data);\n            if (this.events[eventName]) {\n                this.events[eventName].forEach(function (event) {\n                    event(data);\n                })\n            }\n        };\n    };\n\n    var execute = (function () {\n        var pubSub = new PubSub();\n        pubSub.subscribe(\"myevent1\", function () {\n            console.log(\"event1 is occurred\");\n        });\n\n        pubSub.subscribe(\"myevent1\", function () {\n            console.log(\"event1 is occurred\");\n        });\n\n        pubSub.subscribe(\"myevent2\", function (value) {\n            console.log(\"event2 is occurred, value is \"+ value);\n        });\n\n        pubSub.publish(\"myevent1\", null);\n\n        pubSub.publish(\"myevent2\", \"my event two\");\n    })();\n```", "```js\n//Defining Promise that takes a function as a parameter.\n    var Promise = function (func) {\n        //Declared member variable \n        var callbackFn = null;\n\n        //Expose done function that can be invoked by the object returning promise\n        //done() function takes a callback function which can be define when using done method.\n        this.done = function (callback) {\n           callbackFn = callback;\n        };\n\n        function resolve(value) {\n            setTimeout(function () {\n                callbackFn(value)\n            },3000)\n        }\n\n        //Here we are actually executing the function defined when initializing the promise below.\n        func(resolve);\n    }\n\n    //Object that is used to order food and returns a promise\n    var orderFood = function (food) {\n        //returns the Promise instance and pass anonymous function that call resolve method which actually serve the request after delaying 3 seconds.\n        return new Promise(function (resolve) {\n            resolve(food);\n        });\n    }\n\n    //Initialized orderFood that returns promise\n    var order = new orderFood(\"Grilled Burger\");\n    //Calling done method which will be invoked once the order is ready\n    order.done(function (value) {\n        console.log(value);\n    });\n```", "```js\npromise pattern. However, there are other parts of the promise pattern that we can implement to make it robust. Promises have states and the following is the modified version that not only maintains the states for inprogress, done, and failed but also provides the failed handler to catch exceptions. The following is the description of the states:\n```", "```js\n    //Defining Promise that takes a function as a parameter.\n    var Promise = function (func) {\n\n        //Default status when the promise is created\n        var status = 'inprogress';\n        var error = null;\n\n        //Declared member variable \n        var doneCallbackFn = null;\n        var failedCallbackFn = null;\n\n        //Expose done function that can be invoked by the object returning promise\n        this.done  = function (callback) {\n            //Assign the argument value to local variable\n            doneCallbackFn = callback;\n            if (status === \"done\") {\n                doneCallbackFn(data);\n            } else {\n                doneCallbackFn(status);\n            }\n            //return promise to register done or failed methods in chain\n            return this;\n        };\n\n        //Expose failed function to catch errors\n        this.failed = function (callback) {\n            if (status === \"failed\") {\n                failedCallbackFn(error);\n            }\n            //return promise instance to register done or failed methods in chain\n            return this;\n        };\n\n        function prepareFood() {\n            setTimeout(function () {\n                status = \"done\";\n                console.log(\"food is prepared\");\n                if (doneCallbackFn) {\n                    doneCallbackFn(data);\n                }\n            }, 3000);\n\n        }\n\n        function resolve(value) {\n            try {\n                //set the value\n                data = value;\n\n                //check if doneCallbackFn is defined\n                if (doneCallbackFn) {\n                    doneCallbackFn(value);\n                }\n                prepareFood();\n\n            } catch (error) {\n                //set the status to failed\n                status = \"failed\";\n                //set the exception in error\n                error = error;\n                //check if failedCallbackFn is defined\n                if (failedCallbackFn) {\n                    failedCallbackFn(value);\n                }\n            }\n        }\n        //Here we are actually executing the function defined when initializing the promise below.\n        func(resolve);\n    }\n\n    //Object that is used to order food and returns a promise\n    var orderFood = function (food) {\n        //returns the Promise instance and pass anonymous function that call resolve method which \n        //actually serve the request after delaying 3 seconds.\n        return new Promise(function (resolve) {\n            resolve(food);\n        });\n    }\n\n    //Initialized orderFood that returns promise\n    var order = new orderFood(\"Grilled Burger\").done(function (value) { console.log(value); }).failed(function (error) { console.log(error);})\n```"]