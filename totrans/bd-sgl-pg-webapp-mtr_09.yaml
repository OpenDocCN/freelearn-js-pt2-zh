- en: Chapter 9. Advanced Reactivity
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章。高级响应式
- en: Now our blog is basically complete, as we can create and edit entries. In this
    chapter, we will make use of Meteor's reactive templates to make our interface
    timestamps update itself. We will build a reactive object that will rerun the
    template helper, which displays the time when the blog entries were created. This
    way, they will always display the correct relative time.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的博客基本上已经完成了，因为我们能够创建和编辑文章。在本章中，我们将利用Meteor的响应式模板来使我们的界面时间戳自动更新。我们将构建一个响应式对象，该对象将重新运行模板助手，显示博客文章创建的时间。这样，它们总是显示正确的相对时间。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下内容：
- en: Reactive programming
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 响应式编程
- en: Rerunning functions manually
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 手动重新运行函数
- en: Building a reactive object using the `Tracker` package
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`Tracker`包构建响应式对象
- en: Stopping reactive functions
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 停止响应式函数
- en: Note
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you've jumped right into the chapter and want to follow the examples, download
    the previous chapter's code examples from either the book's web page at [https://www.packtpub.com/books/content/support/17713](https://www.packtpub.com/books/content/support/17713)
    or from the GitHub repository at [https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter8](https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter8).
  id: totrans-8
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你直接跳到这一章并想跟随示例，请从以下网址下载上一章的代码示例：[https://www.packtpub.com/books/content/support/17713](https://www.packtpub.com/books/content/support/17713)
    或从GitHub仓库：[https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter8](https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter8)。
- en: These code examples will also contain all the style files, so we don't have
    to worry about adding CSS code along the way.
  id: totrans-9
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些代码示例还将包含所有的样式文件，所以我们不需要担心在过程中添加CSS代码。
- en: Reactive programming
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 响应式编程
- en: As we already saw throughout the book, Meteor uses something called **reactivity**.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们已经在全书中看到的，Meteor使用某种称为**响应性**的东西。
- en: One problem that a developer has to solve when building a software application
    is the consistency of the data represented in the interface. Most modern applications
    use something called **Model-View-Controller** (**MVC**), where the controller
    of a view makes sure that it always represents the current state of the model.
    The model is mostly a server API or a JSON object in the browser memory.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者在构建软件应用程序时必须解决的一个问题是指界面中表示数据的的一致性。大多数现代应用程序使用某种称为**模型-视图-控制器**（**MVC**）的东西，其中视图的控制器确保它始终表示模型的当前状态。模型通常是服务器API或浏览器内存中的JSON对象。
- en: 'The most common ways of keeping consistent interfaces are as follows (courtesy:
    [http://manual.meteor.com](http://manual.meteor.com)):'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 保持界面一致的最常见方法如下（来源：[http://manual.meteor.com](http://manual.meteor.com)）：
- en: '**Poll and diff**: Periodically (for example, every second), fetch the current
    value of the thing, see whether it''s changed, and if so, perform the update.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**轮询和差异**：定期（例如，每秒一次）获取事物的当前值，看看它是否发生变化，如果是，执行更新。'
- en: '**Events**: The thing that can change emits an event when it changes. Another
    part of the program (often called a controller) arranges to listen for this event,
    gets the current value, and performs the update when the event fires.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**事件**：可以变化的事物在变化时发出事件。程序的另一部分（通常称为控制器）安排监听这个事件，获取当前值，并在事件触发时执行更新。'
- en: '**Bindings**: Values are represented by objects that implement some interface,
    such as `BindableValue`. Then, a "bind" method is used to tie two `BindableValues`
    together so that when one value changes, the other is updated automatically. Sometimes,
    as a part of setting up the binding, a transformation function can be specified.
    For example, `Foo` can be bound to `Bar` with the `toUpperCase` transformation
    function.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**绑定**：值由实现某些接口的对象表示，例如`BindableValue`。然后，使用“绑定”方法将两个`BindableValues`连接在一起，这样当一个值发生变化时，另一个值会自动更新。有时，作为设置绑定的一部分，可以指定一个转换函数。例如，可以将`Foo`与`Bar`绑定，并使用`toUpperCase`转换函数。'
- en: These patterns are good, but they still need a lot of code to maintain the consistency
    of the data represented.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这些模式很好，但它们仍然需要大量的代码来维护所表示数据的的一致性。
- en: Another pattern, although not yet as commonly used, is **reactive programming**.
    This pattern is a declarative way of binding data. It means when we use a reactive
    data source such as a `Session` variable or `Mongo.Collection`, we can be sure
    that reactive functions or template helpers that use these will rerun as soon
    as its value changes, always keeping the interface or calculations based on these
    values updated.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种模式，尽管还不是那么常用，那就是**响应式编程**。这种模式是一种声明式的数据绑定方式。这意味着当我们使用一个响应式数据源，如一个`Session`变量或`Mongo.Collection`时，我们可以确信，一旦其值发生变化，使用这些值的响应式函数或模板助手将重新运行，总是保持基于这些值的用户界面或计算更新。
- en: 'The Meteor manual gives us an example use case where reactive programming comes
    in handy:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 米托尔手册为我们提供了一个响应式编程用法的实例：
- en: '*Reactive programming is perfect for building user interfaces, because instead
    of attempting to model all interactions in a single piece of cohesive code, the
    programmer can express what should happen upon specific changes. The paradigm
    of responding to a change is simpler to understand than modeling which changes
    affect the state of the program explicitly.*'
  id: totrans-20
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 响应式编程非常适合构建用户界面，因为它不是试图用一段统一的代码来模拟所有的交互，而是让程序员表达在特定变化发生时应该发生的事情。响应变化的范式比显式地建模哪些变化会影响程序状态更容易理解。
- en: ''
  id: totrans-21
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*For example, suppose that we are writing an HTML5 app with a table of items,
    and the user can click on an item to select it or ctrl-click to select multiple
    items. We might have an <h1> tag and want the contents of the tag to be equal
    to the name of the currently selected item, capitalized, or else "Multiple selection"
    if multiple items are selected. And we might have a set of <tr> tags and want
    the CSS class on each <tr> tag to be "selected" if the items corresponding to
    that row is in the set of selected items, or the empty string otherwise.*'
  id: totrans-22
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 例如，假设我们正在编写一个HTML5应用程序，有一个项目表，用户可以点击一个项目来选择它，或者按Ctrl点击来选择多个项目。我们可能有一个`<h1>`标签，并希望该标签的内容等于当前选定项目的大写名称，如果有多个项目被选中，则为“Multiple
    selection”。而且，我们可能有一组`<tr>`标签，并希望每个`<tr>`标签的CSS类为“selected”，如果该项目对应的行在选定项目的集合中，否则为空字符串。
- en: 'To make this example happen in the aforementioned patterns, we can quickly
    see how complex it gets compared to reactive programming (courtesy: [http://manual.meteor.com](http://manual.meteor.com)):'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这个例子在上述模式中实现，我们可以很快地看到，与响应式编程相比，它变得多么复杂（来源：[http://manual.meteor.com](http://manual.meteor.com)）：
- en: If we use poll and diff, the UI will be unacceptably laggy. After the user clicks,
    the screen won't actually update until the next polling cycle. Also, we have to
    store the old selection set and diff it against the new selection set, which is
    a bit of a hassle.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们使用轮询和差分，UI将会变得不可接受地卡顿。用户点击后，屏幕实际上直到下一次轮询周期才会更新。此外，我们必须存储旧的选定集合，并与新的选定集合进行差分，这有点麻烦。
- en: If we use events, we have to write some fairly tangled controller code to manually
    map changes to the selection or to the name of the selected item, onto updates
    to the UI. For example, when the selection changes, we have to remember to update
    both the `<h1>` tag and (typically) two affected `<tr>` tags. What's more, when
    the selection changes, we have to automatically register an event handler on the
    newly selected item so that we can remember to update `<h1>`. It is difficult
    to structure clean code and maintain it, especially as the UI is extended and
    redesigned.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们使用事件，我们就必须编写一些相当复杂的控制器代码，手动将选择的变化或选定项目的名称映射到UI的更新。例如，当选择发生变化时，我们必须记住更新`<h1>`标签和（通常）两个受影响的`<tr>`标签。更重要的是，当选择发生变化时，我们必须自动在新生成的选定项目上注册一个事件处理程序，以便我们记住要更新`<h1>`。尤其是当UI被扩展和重新设计时，很难构建干净的代码并维护它。
- en: If we use bindings, we will have to use a complex **domain-specific language**
    (**DSL**) to express the complex relationships between the variables. The DSL
    will have to include indirection (bind the contents of `<h1>` not to the name
    of any fixed item, but to the item indicated by the current selection), transformation
    (capitalize the name), and conditionals (if more than one item is selected, show
    a placeholder string).
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们使用绑定，我们就必须使用一个复杂的**领域特定语言**（**DSL**）来表达变量之间复杂的 relationships。这个DSL必须包括间接性（将`<h1>`的内容绑定到当前选择的任何固定项目的名称，而是绑定到由当前选择指示的项目）、转换（将名称首字母大写）和条件（如果有多个项目被选择，显示一个占位符字符串）。
- en: With Meteor's reactive template engine, Blaze, we can simply use the `{{#each}}`
    block helper to iterate over a list of elements and add some conditions for each
    element based on user interaction or on an item's property to add a selected class.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 使用米托尔的反应式模板引擎Blaze，我们可以简单地使用`{{#each}}`块助手来遍历一个元素列表，并根据用户交互或根据项目的属性添加一些条件以添加一个选中类。
- en: If the user now changes the data or the data coming in from the server changes,
    the interface will update itself to represent the data accordingly, saving us
    a lot of time and avoiding unnecessary complex code.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户现在更改数据或从服务器接收的数据发生变化，界面将自动更新以表示相应的数据，节省我们大量时间并避免不必要的复杂代码。
- en: The invalidating cycle
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 无效化周期
- en: One key part of understanding the reactive dependencies is the invalidate cycle.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 理解反应式依赖的关键部分是无效化周期。
- en: When we use a reactive data source inside a reactive function, such as `Tracker.autorun(function(){…})`,
    the reactive data source itself sees that it is inside a reactive function and
    adds the current function as a dependency to its dependency store.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在一个反应式函数中使用反应式数据源，例如`Tracker.autorun(function(){…})`，反应式数据源本身看到它在一个反应式函数中，并将当前函数作为依赖项添加到其依赖存储中。
- en: Then, when the value of the data source changes, it invalidates (reruns) all
    its dependent functions and removes them from its dependency store.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，当数据源的值发生变化时，它会无效化（重新运行）所有依赖的函数，并将它们从其依赖存储中移除。
- en: In the rerun of the reactive function, it adds the reactive function back to
    its dependency store so that they will rerun on its next invalidation (value change)
    again.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在反应式函数的重新运行中，它会将反应式函数重新添加到其依赖存储中，这样在下次无效化（值变化）时它们会再次运行。
- en: This is the key to understand the reactive concept, as we will see in the following
    example.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这是理解反应性的关键，正如我们在以下示例中所看到的。
- en: 'Imagine that we have two `Session` variables set to `false`:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 想象我们有三个`Session`变量设置为`false`：
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Moreover, We have the `Tracker.autorun()` function, which uses both these variables:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还有`Tracker.autorun()`函数，它使用了这两个变量：
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We can now call `Session.set('second', true)`, but the reactive function will
    not rerun, because it was never called in the first run, as the `first` session
    variable was set to `false`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以调用`Session.set('second', true)`，但是反应式函数不会重新运行，因为在第一次运行中它从未被调用，因为`first`会话变量被设置为`false`。
- en: If we now call `Session.set(first, true)`, the function will rerun.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在调用`Session.set(first, true)`，该函数将重新运行。
- en: Additionally, if we now set `Session.set('second', false)`, it will rerun as
    well, as in the second rerun, `Session.get('second')` can add this reactive function
    as a dependency.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果我们现在设置`Session.set('second', false)`，它也会重新运行，因为在第二次重新运行中，`Session.get('second')`可以添加这个反应式函数作为依赖项。
- en: Because the reactive data sources source will always remove all dependencies
    from its store on every invalidation and add them back in the rerun of the reactive
    function, we can set `Session.set(first, false)` and try to switch it to `Session.set('second',
    true)`. The function will *not* rerun again, as `Session.get('second')` was never
    called in this run!
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 由于反应式数据源在每次无效化时都会从其存储中移除所有依赖项，并在反应式函数的重新运行中重新添加它们，因此我们可以设置`Session.set(first,
    false)`并尝试将其更改为`Session.set('second', true)`。函数将不再重新运行，因为在这个运行中从未调用过`Session.get('second')`！
- en: 'Once we understand this, we can make more fine-grained reactivity, keeping
    reactive updates to a minimum. The console output of the explanation looks similar
    to the following screenshot:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们理解了这一点，我们就可以实现更细粒度的反应性，将反应式更新保持在最小。解释的控制台输出与以下屏幕截图类似：
- en: '![The invalidating cycle](img/00024.jpeg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![无效化周期](img/00024.jpeg)'
- en: Building a simple reactive object
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建一个简单的反应式对象
- en: As we saw, a **reactive object** is an object that when used inside a reactive
    function, will rerun the function when its value changes. The Meteor's `Session`
    object is one example of a reactive object.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，**反应式对象**是一个在反应式函数中使用的对象，当它的值发生变化时，它会重新运行函数。米托尔的`Session`对象是反应式对象的一个例子。
- en: In this chapter, we will build a simple reactive object that will rerun our
    `{{formatTime}}` template helper at time intervals so that all the relative times
    are updated correctly.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将构建一个简单的反应式对象，它将在时间间隔内重新运行我们的`{{formatTime}}`模板助手，以便所有相对时间都能正确更新。
- en: Meteor's reactivity is made possible through the `Tracker` package. This package
    is the core of all reactivity and allows us to track dependencies and rerun these
    whenever we want.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 米托尔的反应性是通过`Tracker`包实现的。这个包是所有反应性的核心，允许我们跟踪依赖项并在需要时重新运行它们。
- en: 'Perform the following steps to build a simple reactive object:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以构建简单的反应式对象：
- en: 'To get started, let''s add the following code to the `my-meteor-blog/main.js`
    file:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们开始吧，让我们将以下代码添加到`my-meteor-blog/main.js`文件中：
- en: '[PRE2]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This will create a variable named `ReactiveTimer` on the client with a new instance
    of `Tracker.Dependency`.
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将在客户端创建一个名为`ReactiveTimer`的变量，带有`Tracker.Dependency`的新实例。
- en: 'Below the `ReactiveTimer` variable, but still inside the `if(Meteor.isClient)`
    condition, we will add the following code to rerun all dependencies of our `ReactiveTimer`
    object every 10 seconds:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`ReactiveTimer`变量下方，但仍在`if(Meteor.isClient)`条件下，我们将添加以下代码，每10秒重新运行一次我们`ReactiveTimer`对象的的所有依赖项：
- en: '[PRE3]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `Meteor.setInterval` will run the function every 10 seconds.
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Meteor.setInterval`将每10秒运行一次函数。'
- en: Note
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Meteor comes with its own implementation of `setInterval` and `setTimeout`.
    Even though they work exactly as their native JavaScript equivalents, Meteor needs
    these to reference the right timeout/interval for a specific user on the server
    side.
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Meteor自带了`setInterval`和`setTimeout`的实现。尽管它们与原生JavaScript等效，但Meteor需要这些来引用服务器端特定用户的确切超时/间隔。
- en: Meteor comes with its own implementation of `setInterval` and `setTimeout`.
    Even though they work exactly as their native JavaScript equivalents, Meteor needs
    these to reference the right timeout/interval for a specific user on the server
    side.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Meteor自带了`setInterval`和`setTimeout`的实现。尽管它们与原生JavaScript等效，但Meteor需要这些来引用服务器端特定用户的确切超时/间隔。
- en: Inside the interval, we call `ReactiveTimer.changed()`. This will invalidate
    every dependent function, causing it to rerun.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个区间内，我们调用`ReactiveTimer.changed()`。这将使每个依赖函数失效，并重新运行。
- en: Rerunning functions
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重新运行函数
- en: 'So far, we have no dependency created, so let''s do that. Add the following
    code below `Meteor.setInterval`:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们还没有创建依赖项，所以让我们这样做。在`Meteor.setInterval`下方添加以下代码：
- en: '[PRE4]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If we now get back to our browser console, we should see **Function re-run**
    every 10 seconds, as our reactive object reruns the function.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在回到浏览器控制台，我们应该会看到每10秒**函数重新运行**一次，因为我们的反应式对象重新运行了函数。
- en: We can even call `ReactiveTimer.changed()` in our browser console and the function
    will rerun as well.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们甚至可以在浏览器控制台中调用`ReactiveTimer.changed()`，函数也会重新运行。
- en: These are good examples, but don't make our timestamps update automatically.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这些例子很好，但不会自动更新我们的时间戳。
- en: 'To do this, we need to open up `my-meteor-blog/client/template-helpers.js`
    and add the following line at the top of our `formatTime` helper function:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们需要打开`my-meteor-blog/client/template-helpers.js`并在我们的`formatTime`助手函数顶部添加以下行：
- en: '[PRE5]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This will make every `{{formatTime}}` helper in our app rerun every 10 seconds,
    updating the relative time while it passes. To see this, go to your browser and
    create a new blog entry. If you save the blog entry now and watch the time created
    text, you will see that it changes after a while:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们应用中的每个`{{formatTime}}`助手每10秒就会重新运行一次，更新流逝时的相对时间。要看到这一点，请打开浏览器，创建一篇新博客文章。现在保存博客文章，并观察创建时间文本，你会发现过了一会儿它会发生变化：
- en: '![Rerunning functions](img/00025.jpeg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![重新运行函数](img/00025.jpeg)'
- en: Creating an advanced timer object
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建高级计时器对象
- en: The previous example was a simple demonstration of a custom reactive object.
    To make it more useful, it is better to create a separate object that hides the
    `Tracker.Dependency` functions and adds additional functionality.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的示例是一个自定义反应式对象的简单演示。为了使其更有用，最好创建一个单独的对象，隐藏`Tracker.Dependency`函数并添加其他功能。
- en: Meteor's reactivity and dependency tracking allows us to create dependencies
    even when the `depend()` function is called from inside another function. This
    dependency chain allows more complex reactive objects.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Meteor的反应性和依赖跟踪允许我们从另一个函数内部调用`depend()`函数时创建依赖项。这种依赖链允许更复杂的反应式对象。
- en: 'In the next example, we will take our `timer` object and add a `start` and
    `stop` function to it. Additionally, we will also make it possible to choose a
    time interval at which the timer will rerun:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个示例中，我们将取我们的`timer`对象并为其添加`start`和`stop`函数。此外，我们还将使其能够选择一个时间间隔，在该时间间隔内计时器将重新运行：
- en: 'First, let''s remove the previous code examples from the `main.js` and `template-helpers.js`
    files, which we added before, and create a new file named `ReactiveTimer.js` inside
    `my-meteor-blog/client` with the following content:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们从`main.js`和`template-helpers.js`文件中删除之前添加的代码示例，并在`my-meteor-blog/client`内创建一个名为`ReactiveTimer.js`的新文件，内容如下：
- en: '[PRE6]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This creates a classic prototype class in JavaScript, which we can instantiate
    using `new ReactiveTimer()`. In its constructor function, we instantiate a `new
    Tracker.Dependency` and attach it to the function.
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这创建了一个经典的JavaScript原型类，我们可以使用`new ReactiveTimer()`来实例化它。在其构造函数中，我们实例化了一个`new
    Tracker.Dependency`并将其附加到该函数。
- en: 'Now, we will create a `start()` function, which will start a self-chosen interval:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将创建一个`start()`函数，它将启动一个自选的间隔：
- en: '[PRE7]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This is the same code as we used before with the difference that we store the
    interval ID in `this._intervalId` so that we can stop it later in our `stop()`
    function. The interval passed to the `start()` function must be in seconds;
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是我们之前使用的相同代码，不同之处在于我们将间隔ID存储在`this._intervalId`中，这样我们可以在`stop()`函数中稍后停止它。传递给`start()`函数的间隔必须是秒；
- en: 'Next, we add the `stop()` function to the class, which will simply clear the
    interval:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们在类中添加了`stop()`函数，它将简单地清除间隔：
- en: '[PRE8]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now we only need a function that creates the dependencies:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们只需要一个函数来创建依赖关系：
- en: '[PRE9]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Our reactive timer is ready!
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们的反应式定时器准备好了！
- en: 'Now, to instantiate the `timer` and start it with whatever interval we like,
    add the following code after the `ReactiveTimer` class at the end of the file:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，要实例化`timer`并使用我们喜欢的间隔启动它，请在文件末尾的`ReactiveTimer`类后添加以下代码：
- en: '[PRE10]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: At last, we need to go back to our `{{formatTime}}` helper in the `template-helper.js`
    file, and `add` the `time.tick()` function, and every relative time in the interface
    will update as time goes by.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们需要回到`template-helper.js`文件中的`{{formatTime}}`助手，并`添加``time.tick()`函数，界面上所有的相对时间都会随着时间流逝而更新。
- en: 'To see the reactive timer in action, run the following code snippet in our
    browser''s console:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要看到反应式定时器的动作，可以在浏览器的控制台中运行以下代码片段：
- en: '[PRE11]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We should now see **Timer ticked!** logged every 10 seconds. If we now run `time.stop()`,
    the timer will stop running its dependent functions. If we call `time.start(2)`
    again, we will see Timer ticked! now appearing every two seconds, as we set the
    interval to `2`:![Creating an advanced timer object](img/00026.jpeg)
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们应该现在每10秒看到一次**Timer ticked!**的日志。如果我们现在运行`time.stop()`，定时器将停止运行其依赖函数。如果我们再次调用`time.start(2)`，我们将看到`Timer
    ticked!`现在每两秒出现一次，因为我们设置了间隔为`2`：![创建一个高级定时器对象](img/00026.jpeg)
- en: As we can see, our `timer` object is now rather flexible, and we can create
    any number of time intervals to be used throughout the app.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，我们的`timer`对象现在相当灵活，我们可以在整个应用程序中创建任意数量的时间间隔。
- en: Reactive computations
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 反应式计算
- en: Meteor's reactivity and the `Tracker` package is a very powerful feature, as
    it allows event-like behavior to be attached to every function and every template
    helper. This reactivity is what keeps our interface consistent.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Meteor的反应性和`Tracker`包是一个非常强大的特性，因为它允许将事件行为附加到每个函数和每个模板助手。这种反应性正是保持我们界面一致性的原因。
- en: Although we only touched the `Tracker` package until now, it has a few more
    properties that we should take a look at.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然到目前为止我们只接触了`Tracker`包，但它还有几个我们应该查看的属性。
- en: We already learned how to instantiate a reactive object. We can call `new Tracker.Dependency`,
    which can create and rerun dependencies using `depend()` and `changed()`.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学习了如何实例化一个反应式对象。我们可以调用`new Tracker.Dependency`，它可以通过`depend()`和`changed()`创建和重新运行依赖关系。
- en: Stopping reactive functions
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 停止反应式函数
- en: When we are inside a reactive function, we also have access to the current computational
    object, which we can use to stop further reactive behavior.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在一个反应式函数内部时，我们也能够访问到当前的计算对象，我们可以用它来停止进一步的反应式行为。
- en: 'To see this in action, we can use our already running `timer` and create the
    following reactive function using `Tracker.autorun()` in our browser''s console:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 为了看到这个效果，我们可以在浏览器的控制台中使用我们已经在运行的`timer`，并使用`Tracker.autorun()`创建以下反应式函数：
- en: '[PRE12]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Here, we create `someInnerFunction()` to show how we can access the current
    computation as well from nested functions. In this inner function, we get the
    computation using `Tracker.currentComputation`, which gives us the current `Tracker.Computation`
    object.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们创建了`someInnerFunction()`来展示我们如何从嵌套函数中访问当前计算。在这个内部函数中，我们使用`Tracker.currentComputation`获取计算，它给了我们当前的`Tracker.Computation`对象。
- en: We use the `count` variable, we created before the `Tracker.autorun()` function,
    to count up. When we reach 10, we call `Tracker.currentComputation.stop()`, which
    will stop the dependency of the inner and the `Tracker.autorun()` functions, making
    them nonreactive.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用之前在`Tracker.autorun()`函数中创建的`count`变量进行计数。当我们达到10时，我们调用`Tracker.currentComputation.stop()`，这将停止内部依赖和`Tracker.autorun()`函数的依赖，使它们失去反应性。
- en: To see the results quicker, we stop and start the `timer` object with an interval
    of two seconds at the end of the example.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更快地看到结果，我们在示例的末尾以两秒的间隔停止和开始`timer`对象。
- en: 'If we copy and paste the previous code snippet into our browser''s console
    and run it, we should see **Running for the xx time** appearing 10 times:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们把前面的代码片段复制并粘贴到浏览器的控制台并运行它，我们应该看到**Running for the xx time**出现10次：
- en: '![Stopping reactive functions](img/00027.jpeg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![停止响应式函数](img/00027.jpeg)'
- en: The current computational object is useful to give us control over reactive
    dependencies from inside the dependent functions.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 当前计算对象对于从依赖函数内部控制响应式依赖项很有用。
- en: Preventing run at start
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 防止在启动时运行
- en: The `Tracker` `.Computation` object also comes with the `firstRun` property,
    which we have used in an earlier chapter.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`Tracker``.Computation`对象还带有`firstRun`属性，我们在前一章中使用过。'
- en: 'Reactive functions, for example, when created using `Tracker.autorun()` also
    run when they are parsed by JavaScript for the first time. If we want to prevent
    this, we can simply stop the function before any code is executed when checking
    whether `firstRun` is `true`:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，当使用`Tracker.autorun()`创建响应式函数时，它们在首次被JavaScript解析时也会运行。如果我们想要防止这种情况，我们可以在检查`firstRun`是否为`true`时简单地停止函数，在执行任何代码之前：
- en: '[PRE13]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Note
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We don't need to get the current computation here using `Tracker.currentComputation`,
    as `Tracker.autorun()` gets it already as its first argument.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里不需要使用`Tracker.currentComputation`来获取当前计算，因为`Tracker.autorun()`已经将其作为第一个参数。
- en: 'Also, when we stop a `Tracker.autorun()` function, as described in the following
    code, it will never create the dependency for the session variable, as `Session.get()`
    was never called in the first run:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，当我们停止`Tracker.autorun()`函数时，如以下代码所述，它将永远不会为会话变量创建依赖关系，因为第一次运行时从未调用`Session.get()`：
- en: '[PRE14]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: To make sure that we make the function depending on the `myValue` session variable,
    we need to put it before the `return` statement.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保我们使函数依赖于`myValue`会话变量，我们需要将它放在`return`语句之前。
- en: Advanced reactive objects
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 高级响应式对象
- en: The `Tracker` package has a few more advanced properties and functions that
    allow you to control when dependencies are invalidated (`Tracker.flush()` and
    `Tracker.Computation.invalidate()`) and allow you to register additional callbacks
    on it (`Tracker.onInvalidate()`).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`Tracker`包还有一些更高级的属性和函数，允许您控制何时无效化依赖项（`Tracker.flush()`和`Tracker.Computation.invalidate()`）以及允许您在它上面注册额外的回调（`Tracker.onInvalidate()`）。'
- en: These properties allow you to build complex reactive objects, which are out
    of the scope of this book. If you want to get a deeper understanding of the `Tracker`
    package, I recommend that you take a look at the Meteor manual at [http://manual.meteor.com/#tracker](http://manual.meteor.com/#tracker).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这些属性允许您构建复杂的响应式对象，这超出了本书的范围。如果您想要更深入地了解`Tracker`包，我建议您查看Meteor手册中的[http://manual.meteor.com/#tracker](http://manual.meteor.com/#tracker)。
- en: Summary
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned how to build our own custom reactive object. We
    learned about `Tracker.Dependency.depend()` and `Tracker.Dependency.changed()`
    and saw how reactive dependencies have their own computational objects, which
    can be used to stop its reactive behavior and prevent running at start.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何构建我们自己的自定义响应式对象。我们了解了`Tracker.Dependency.depend()`和`Tracker.Dependency.changed()`，并看到了响应式依赖项具有自己的计算对象，可以用来停止其响应式行为并防止在启动时运行。
- en: 'To dig deeper, take a look at the documentation for the `Tracker` package and
    see detailed property descriptions for the `Tracker.Computation` object at the
    following resources:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更深入地了解，请查看`Tracker`包的文档，并查看以下资源的`Tracker.Computation`对象的详细属性描述：
- en: '[https://www.meteor.com/tracker](https://www.meteor.com/tracker)'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.meteor.com/tracker](https://www.meteor.com/tracker)'
- en: '[https://docs.meteor.com/#/full/tracker](https://docs.meteor.com/#/full/tracker)'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.meteor.com/#/full/tracker](https://docs.meteor.com/#/full/tracker)'
- en: '[https://docs.meteor.com/#/full/tracker_computation](https://docs.meteor.com/#/full/tracker_computation)'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.meteor.com/#/full/tracker_computation](https://docs.meteor.com/#/full/tracker_computation)'
- en: '[https://docs.meteor.com/#/full/tracker_dependency](https://docs.meteor.com/#/full/tracker_dependency)'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.meteor.com/#/full/tracker_dependency](https://docs.meteor.com/#/full/tracker_dependency)'
- en: You can find this chapter's code examples at [https://www.packtpub.com/books/content/support/17713](https://www.packtpub.com/books/content/support/17713)
    or on GitHub at [https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter9](https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter9).
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在本章的代码示例在[https://www.packtpub.com/books/content/support/17713](https://www.packtpub.com/books/content/support/17713)或者在GitHub上找到[https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter9](https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter9)。
- en: Now that we have finalized our blog, we will take a look at how to deploy our
    app on servers in the next chapter.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了我们的博客，我们将在下一章看看如何将我们的应用程序部署到服务器上。
