- en: Chapter 5. Asynchronous JavaScript
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。异步JavaScript
- en: Nowadays Internet users are impatient, a lag of 2-3 seconds during page loading
    or navigation and they lose their interest and will likely leave the service for
    something else. Our highest priority is to reduce user response time. The main
    approach here is known as *Cutting the mustard* ([http://www.creativebloq.com/web-design/responsive-web-design-tips-bbc-news-9134667](http://www.creativebloq.com/web-design/responsive-web-design-tips-bbc-news-9134667)).
    We extract the components of an application required for core experience and load
    them first. Then, progressively we add an enhanced experience. As for JavaScript,
    what we have to care the most about are nonblocking flows. Thus, we have to avoid
    loading scripts synchronously prior to HTML rendering, and we have to wrap all
    long-running tasks into asynchronous callbacks. This is something that you most
    probably already know. But do you do it efficiently?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，互联网用户变得没有耐心，页面加载或导航过程中的2-3秒延迟，他们就会失去兴趣，并且可能会离开服务，转而使用其他东西。我们最高优先级的是减少用户响应时间。这里的主要方法被称为*芥末切割*（[http://www.creativebloq.com/web-design/responsive-web-design-tips-bbc-news-9134667](http://www.creativebloq.com/web-design/responsive-web-design-tips-bbc-news-9134667)）。我们提取应用程序的核心体验所需的组件并首先加载它们。然后，我们逐步添加增强的体验。至于JavaScript，我们需要最关心的是非阻塞流程。因此，我们必须避免在HTML渲染之前同步加载脚本，并将所有长时间运行的任务包装到异步回调中。这可能是你已经知道的事情。但你是高效地这样做吗？
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下主题：
- en: Nonblocking JavaScript
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 非阻塞JavaScript
- en: Error-first callback
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误优先回调
- en: The continuation-passing style
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 延续传递风格
- en: Handling asynchronous functions in the ES7 way
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用ES7方式处理异步函数
- en: Parallel tasks and task series with the Async.js library
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Async.js库进行并行任务和任务系列
- en: Event handling optimization
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件处理优化
- en: Nonblocking JavaScript
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 非阻塞JavaScript
- en: 'First of all, let''s look at what really happens when we do things asynchronously.
    Whenever we invoke a function in JavaScript, it creates a new stack frame (execution
    object). Every inner call gets into this frame. Here the frames are pushed and
    popped from the top of the call stack in the **LIFO** (**last in, first out**)
    manner. In other words, in the code, we call the `foo` function and then the `bar`
    function; however, during execution, `foo` calls the `baz` function. In this case,
    in the `call` stack, we have the following sequence: `foo`, `baz`, and only then
    `bar`. So `bar` is called after the stack frame of `foo` is empty. If any of the
    functions perform a CPU-intensive task, all the successive calls wait for it to
    finish. However, JavaScript engines have **Event Queues** (or task queues).'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看看当我们异步做事情时实际发生的情况。无论何时在JavaScript中调用一个函数，它都会创建一个新的栈帧（执行对象）。每个内部调用都会进入这个帧。这里帧是从调用堆栈的顶部以**LIFO**（**后进先出**）的方式推入和弹出。换句话说，在代码中，我们调用`foo`函数，然后调用`bar`函数；然而，在执行过程中，`foo`调用`baz`函数。在这种情况下，在`call`堆栈中，我们有以下顺序：`foo`、`baz`，然后才是`bar`。所以`bar`是在`foo`的栈帧清空后才被调用。如果任何一个函数执行一个CPU密集型任务，所有后续的调用都会等待它完成。然而，JavaScript引擎具有**事件队列**（或任务队列）。
- en: '![Nonblocking JavaScript](img/00012.jpeg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![非阻塞JavaScript](img/00012.jpeg)'
- en: 'If we subscribe a function to a DOM event or pass a callback to a timer (`setTimeout`
    or `setInterval`) or through any Web I/O APIs (XHR, IndexedDB, and FileSystem),
    it ends up in a corresponding queue. Then, the browser''s event loop decides when
    and which callback to push in the callback stack. Here is an example:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们为DOM事件订阅一个函数，或者将一个回调传递给定时器（`setTimeout`或`setInterval`）或任何Web I/O API（XHR、IndexedDB和FileSystem），它最终都会进入相应的队列。然后，浏览器的事件循环决定何时将哪个回调推入回调堆栈。以下是一个例子：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Using `setTimeout( foo, 0 )`, we state that `foo` shall be called immediately,
    and then we call `bar`. However, `foo` lands in a queue and the event loop puts
    it deeper in the call stack:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`setTimeout( foo, 0 )`，我们声明`foo`应立即被调用，然后我们调用`bar`。然而，`foo`进入一个队列，事件循环将其推入调用堆栈的更深位置：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This also means that if the `foo` callback performs a CPU-intensive task, it
    doesn''t block the main execution flow. Similarly, an asynchronously-made XHR/Fetch
    request doesn''t lock up the interaction while waiting for the server''s response:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这也意味着如果`foo`回调执行一个CPU密集型任务，它不会阻塞主线程的执行流程。同样，异步发起的XHR/Fetch请求在等待服务器响应时不会锁定交互：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'How does this apply to real-world applications? Here is a common flow:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这如何适用于实际应用？以下是一个常见的流程：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The loading of JavaScript dependencies is queued, so the browser can render
    and deliver the UI to the user without waiting for that. As soon as the scripts
    are fully loaded, the application pushes two new tasks to the queue: *load news*
    and *authorize user*. Again, none of them blocks the main thread. Only when any
    of these requests complete and the main thread gets involved, it enhances the
    UI according to the newly received data. As soon as a user is authorized and the
    session token is retrieved, we can load user data. After the task is completed,
    we queue new ones.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript依赖的加载是排队进行的，所以浏览器可以在不等待加载完成的情况下渲染并把UI交付给用户。一旦脚本完全加载，应用程序就会把两个新任务推入队列：*加载新闻*和*认证用户*。再次强调，它们都不会阻塞主线程。只有在这些请求之一完成并涉及到主线程时，它才会根据新接收的数据增强UI。一旦用户被认证并且会话令牌被检索到，我们可以加载用户数据。任务完成后，我们又会排队新的任务。
- en: 'As you can see, asynchronous code is harder to read compared to synchronous
    one. The execution sequences can be quite complex. Besides, we have to take extra
    care for error control. When going for synchronous code, we can wrap a block of
    the program with `try`/`catch` and intercept any errors thrown during execution:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，与同步代码相比，异步代码更难阅读。执行序列可能会相当复杂。此外，我们还需要特别注意错误控制。当处理同步代码时，我们可以用`try`/`catch`包围程序的一块，拦截执行期间抛出的任何错误：
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'However, if the call is queued, it slips out of the `try`/`catch` scope:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果调用被排队，它就会滑出`try`/`catch`的作用域：
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Yeah, asynchronous programming has its quirks. To get a grip on this, we will
    examine the existing practices of writing asynchronous code.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，异步编程有其怪癖。为了掌握这一点，我们将检查编写异步代码的现有实践。
- en: 'So to make the code asynchronous, we queue a task and subscribe for an event
    that is fired when the task is complete. Actually, we go for *Event-Driven Programming*,
    and in particular, we apply a *PubSub* pattern. For example, the `EventTarget`
    interface, which we touched upon in [Chapter 3](part0027_split_000.html#PNV62-f4ff6b81796e4f78aa983a623fb95daf
    "Chapter 3. DOM Scripting and AJAX"), *DOM Scripting and AJAX*, in a nutshell,
    is about subscribing listeners to events on DOM elements and firing these events
    either from UI or programmatically:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，为了使代码异步，我们排队一个任务并订阅一个事件，当任务完成时触发该事件。实际上，我们采用的是*事件驱动编程*，特别是，我们应用了一个*发布/订阅*模式。例如，我们在[第3章](part0027_split_000.html#PNV62-f4ff6b81796e4f78aa983a623fb95daf
    "Chapter 3. DOM Scripting and AJAX")中提到的`EventTarget`接口，*DOM脚本和AJAX*，简而言之，就是关于为DOM元素的事件订阅监听器，并从UI或以编程方式触发这些事件：
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Behind the DOM, we use a similar principle, but implementations may differ.
    Probably the most popular interface is based on two main methods, `obj.on` (to
    subscribe a handler) and `obj.trigger` (to fire an event):'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在DOM背后，我们使用了一个类似的原理，但实现可能会有所不同。最流行的接口可能是基于两个主要方法`obj.on`（用于订阅处理程序）和`obj.trigger`（用于触发事件）：
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This is how PubSub is implemented in abstraction frameworks, for example, Backbone.
    jQuery uses this interface on DOM events also. The interface gained its momentum
    through simplicity, but it doesn't really help with spaghetti code and doesn't
    cover error handling.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在抽象框架中实现发布/订阅的方式，例如，Backbone。jQuery在DOM事件上也使用这个接口。这个接口因其简单性而获得了势头，但它实际上并不能帮助处理意大利面条代码，也没有涵盖错误处理。
- en: Error-first Callback
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 错误优先的回调
- en: 'The pattern used across all the asynchronous methods in Node.js is called **Error-first
    Callback**. Here is an example:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在Node.js中所有异步方法使用的模式被称为**错误优先的回调**。以下是一个例子：
- en: '[PRE8]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Any asynchronous method expects one of the arguments to be a callback. The full
    callback argument list depends on the caller method, but the first argument is
    always an error object or null. When we go for the asynchronous method, an exception
    thrown during function execution cannot be detected in a `try`/`catch` statement.
    The event happens after the JavaScript engine leaves the `try` block. In the preceding
    example, if any exception is thrown during the reading of the file, it lands on
    the callback function as the first and mandatory parameter. Regardless of its
    widespread use, this approach has its flaws. While writing real code with deep
    callback sequences, it is easy to run into a so-called **Callback Hell** ([http://callbackhell.com/](http://callbackhell.com/)).
    The code becomes pretty hard to follow.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 任何异步方法都期望有一个回调函数作为参数。完整的回调参数列表取决于调用方法，但第一个参数总是错误对象或null。当我们使用异步方法时，函数执行期间抛出的异常不能在`try`/`catch`语句中检测到。事件发生在JavaScript引擎离开`try`块之后。在前面的例子中，如果在读取文件时抛出任何异常，它作为第一个和必需的参数落在回调函数上。尽管它的使用很普遍，但这种方法有其缺陷。在编写具有深层回调序列的实际代码时，很容易遇到所谓的**回调地狱**（[http://callbackhell.com/](http://callbackhell.com/)）。代码变得相当难以跟踪。
- en: Continuation-passing style
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 继续传递风格
- en: 'We often need a chain of asynchronous calls, that is, a sequence of tasks where
    one task is started after another is completed. We are interested in an eventual
    result of asynchronous calls chain. In this case, we can benefit from **Continuation-passing
    style** (**CPS**). JavaScript has already a built-in `Promise` object. We use
    it to create a new `Promise` object. We put our asynchronous task in the `Promise`
    callback and invoke the `resolve` function of the argument list to notify the
    `Promise` callback that the task is resolved:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们经常需要一个异步调用的链，即一个任务在另一个任务完成后开始的任务序列。我们感兴趣的是异步调用链的最终结果。在这种情况下，我们可以从**继续传递风格**（**CPS**）中受益。JavaScript已经有了内置的`Promise`对象。我们用它来创建一个新的`Promise`对象。我们把异步任务放在`Promise`回调中，并调用参数列表的`resolve`函数，以通知`Promise`回调任务已解决：
- en: '[PRE9]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In the preceding example, we called `foo`, that returns `Promise`. Using this
    method, we set a handler that invokes when `Promise` is fulfilled.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们调用`foo`，它返回`Promise`。使用这种方法，我们设置了一个处理器，当`Promise`被满足时调用。
- en: 'What about error control? When creating `Promise`, we can use the function
    given in the second argument (`reject`) to report a failure:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 那么关于错误控制呢？在创建`Promise`时，我们可以使用第二个参数（`reject`）中的函数来报告失败：
- en: '[PRE10]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The most exciting part about `Promises` is that they can be chained. We can
    pipe the callbacks to queue asynchronous tasks or transform values:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 关于`Promises`最令人兴奋的部分是它们可以被链式调用。我们可以把回调函数排队作为异步任务，或者进行值转换：
- en: '[PRE11]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Note that if we pass `0` to the `foo` function, the entry condition throws an
    exception and we will end up in a callback of the `catch` method. If an exception
    is thrown in one of the callbacks, it appears in the `catch` callback as well.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，如果我们把`0`传给`foo`函数，入口条件会抛出一个异常，我们最终会进入`catch`方法的回调。如果在回调中抛出异常，它也会在`catch`回调中出现。
- en: 'A `Promise` chain is resolved in a manner similar to that of a waterfall model—the
    tasks are invoked one after another. We can also cause `Promise` to resolve after
    several parallel processing tasks are completed:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`Promise`链以类似于瀑布模型的方式解决——任务一个接一个地调用。我们也可以让`Promise`在几个并行处理任务完成后解决：'
- en: '[PRE12]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `Promise.all` static method is not yet supported in all the latest browsers,
    but you can get this via a polyfill at [https://github.com/jakearchibald/es6-promise](https://github.com/jakearchibald/es6-promise).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`Promise.all`静态方法在所有最新浏览器中还得不到支持，但你可以通过[https://github.com/jakearchibald/es6-promise](https://github.com/jakearchibald/es6-promise)的polyfill来获得。'
- en: 'Another probability is to cause `Promise` to resolve or reject whenever any
    of the concurrently running tasks are completed:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种可能性是让`Promise`在任何一个并发运行的任务完成时解决或拒绝：
- en: '[PRE13]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Handling asynchronous functions in the ES7 way
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用ES7的方式处理异步函数
- en: 'We already have the Promise API in JavaScript. The upcoming technology is Async/Await
    API and is presented in a proposal ([https://tc39.github.io/ecmascript-asyncawait/](https://tc39.github.io/ecmascript-asyncawait/))
    for EcmaScript 7th edition. This describes how we can declare asynchronous functions
    that can halt without blocking anything and wait for the result of `Promise`:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在JavaScript中有了Promise API。即将到来的技术是Async/Await API，它出现在EcmaScript第七版的提案中（[https://tc39.github.io/ecmascript-asyncawait/](https://tc39.github.io/ecmascript-asyncawait/)）。这描述了我们如何可以声明非阻塞的异步函数并等待`Promise`的结果：
- en: '[PRE14]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: At the moment, the API isn't supported in any browser; however, you can run
    it using the Babel.js transpiler on runtime. You can also fiddle with this example
    online at [http://codepen.io/dsheiko/pen/gaeqRO](http://codepen.io/dsheiko/pen/gaeqRO).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，API在任何一个浏览器中都不受支持；然而，你可以在运行时使用Babel.js转换器来运行它。你也可以在线尝试这个例子：[http://codepen.io/dsheiko/pen/gaeqRO](http://codepen.io/dsheiko/pen/gaeqRO)。
- en: This new syntax allows us to write a code that runs asynchronously while appearing
    to be synchronous. Thus, we can use common constructions such as `try`/`catch`
    for asynchronous calls, which makes the code much more readable and easier to
    maintain.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这种新语法允许我们编写看起来是同步运行的异步代码。因此，我们可以使用诸如`try`/`catch`之类的常见构造来进行异步调用，这使得代码更加可读，更容易维护。
- en: Parallel tasks and task series with the Async.js library
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Async.js库的并行任务和任务系列
- en: Another approach to deal with asynchronous calls is a library called **Async.js**
    ([https://github.com/caolan/async](https://github.com/caolan/async)). When using
    this library, we can explicitly specify how we want the batch of tasks to be resolved—as
    a waterfall (chain) or in parallel.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 处理异步调用的另一种方法是一个名为**Async.js**的库（[https://github.com/caolan/async](https://github.com/caolan/async)）。使用这个库时，我们可以明确指定我们想要任务批次如何解析—作为瀑布（链）或并行。
- en: 'In the first case, we can supply an array of callbacks to `async.waterfall`,
    assuming when one is completed, the next one is invoked. We can also pass the
    resolved value from one callback to another and receive the aggregate value or
    the thrown exception in a method''s `on-done` callback:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一种情况下，我们可以向`async.waterfall`提供回调数组，假设当一个完成后，下一个会被调用。我们还可以将一个回调中解析的值传递给另一个，并在方法的`on-done`回调中接收累积值或抛出的异常：
- en: '[PRE15]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Similarly, we pass an array of callbacks to `async.parallel`. This time, all
    of them run in parallel, but when all are resolved, we receive the results or
    the thrown exception in the method''s `on-done` callback:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们将回调数组传递给`async.parallel`。这次，它们全部并行运行，但当它们都解决时，我们在方法的`on-done`回调中接收结果或抛出的异常：
- en: '[PRE16]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Surely, we can combine the flows. Besides, the library provides iteration methods,
    such as `map`, `filter`, and `each`, that applies to the array of asynchronous
    tasks.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们可以组合这些流程。此外，该库还提供了迭代方法，如`map`、`filter`和`each`，适用于异步任务的数组。
- en: Async.js was the first project of this kind. Today, there are many libraries
    inspired by this. If you want a lightweight and robust solution similar to Async.js,
    I would recommend that you check Contra ([https://github.com/bevacqua/contra](https://github.com/bevacqua/contra)).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Async.js是这种类型的第一个项目。今天，有许多受此启发的库。如果你想要一个轻量级且健壮的与Async.js类似的解决方案，我建议你查看一下Contra
    ([https://github.com/bevacqua/contra](https://github.com/bevacqua/contra))。
- en: Event handling optimization
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件处理优化
- en: It must have happened to you while writing a form inline validator that you
    run into a problem. As you type it, the `user-agent` keeps sending validation
    requests to the server. This way you might quickly pollute the network with spawning
    XHRs. Another sort of problem that you may be familiar with, is that some UI events
    ( `touchmove`, `mousemove`, `scroll`, and `resize` ) are fired intensively and
    subscribed handlers may overload the main thread. These problems can be solved
    using one of two approaches known as *debouncing* and *throttling*. Both functions
    are available in third-party libraries such as Underscore and Lodash (`_.debounce`
    and `_.throttle`). However, they can be implemented with a little `o` code and
    one doesn't need to depend on extra libraries for this functionality.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 编写内联表单验证器时，你可能会遇到一个问题。当你输入时，`user-agent`会不断向服务器发送验证请求。这样你可能会很快就会通过产生XHR来污染网络。另一个你可能熟悉的问题是一些UI事件（`touchmove`、`mousemove`、`scroll`和`resize`）会频繁触发，订阅的事件处理程序可能会使主线程过载。这些问题可以通过两种已知的方法来解决，称为*去抖*和*节流*。这两个函数都可以在第三方库（如Underscore和Lodash）中找到（`_.debounce`和`_.throttle`）。然而，它们可以用一点`o`代码实现，不需要依赖额外的库来实现这个功能。
- en: Debouncing
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 去抖
- en: 'By debouncing, we ensure that a handler function is called once for a repeatedly
    emitted event:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 通过去抖，我们确保在重复触发的事件中，处理函数只被调用一次：
- en: '[PRE17]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Let''s say we want a widget to lazy load only when it comes into view, which
    in our case requires a user to scroll the page at least by 200 pixels downwards:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们希望只有在组件进入视图时才进行延迟加载，在我们的案例中，这需要用户至少向下滚动200像素：
- en: '[PRE18]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: If we simply subscribe a listener to the scroll event, it will be called quite
    a number of times between the time interval when the user starts and stops scrolling.
    Thanks to the debounce proxy, the handler that checks whether it's the time to
    load the widget or not is called only once, when the user stops scrolling.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们简单地为滚动事件订阅一个监听器，它在用户开始和停止滚动的时间间隔内会被调用很多次。多亏了去抖代理，检查是否是加载小部件的时候的处理程序只调用一次，即当用户停止滚动时。
- en: Throttling
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 节流
- en: 'By throttling, we set how often the handler is allowed to be called while the
    event is fired:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 通过节流，我们设置在事件触发时允许处理程序被调用的频率：
- en: '[PRE19]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'So if we subscribe a handler to the `mousemove` event on a container via throttle,
    the `handler` function once a time (second here) until the mouse cursors leaves
    the container boundaries:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 所以如果我们通过节流在容器的`mousemove`事件上订阅一个处理程序，`handler`函数一次（在这里是每秒一次）直到鼠标光标离开容器边界：
- en: '[PRE20]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Writing callbacks that don't impact latency-critical events
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写不会影响延迟关键事件的回调
- en: Some of the tasks that we have do not belong to a core functionality and may
    run in the background. For example, we want to dispatch analytics data while scrolling.
    We do this without debouncing or throttling that would overload the UI thread
    and would likely make the app unresponsive. Debouncing isn't relevant here and
    throttling won't give precise data. However, we can use the `requestIdleCallback`
    native method ([https://w3c.github.io/requestidlecallback/](https://w3c.github.io/requestidlecallback/))
    to schedule the task at the time when `user-agent` is idle.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有些任务不属于核心功能，可能是在后台运行。例如，我们希望在不滚动页面时派发分析数据。我们不使用去抖或节流，以免加重UI线程的负担，可能导致应用无响应。在这里去抖不相关，节流也不会提供精确数据。然而，我们可以使用`requestIdleCallback`原生方法（[https://w3c.github.io/requestidlecallback/](https://w3c.github.io/requestidlecallback/)）在`user-agent`空闲时安排任务。
- en: Summary
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: One of our most prioritized goals is to reduce user-response time, that is,
    the application architecture must ensure the user flow is never blocked. This
    can be achieved by queuing any long-running tasks for asynchronous invocation.
    However, if you have a number of asynchronous calls among which some are intended
    to run in parallel and some sequentially, without taking special care, it's easy
    to run into a so-called Callback Hell. A proper use of such approaches as *Continuation-passing
    style* (*Promise API*), the Async/Await API, or an external library such as Async.js
    may significantly improve your asynchronous code. We also have to remember that
    some events such as `scroll`/`touch`/`mousemove`, while being intensively fired,
    may cause unnecessary CPU load by calling subscribed listeners frequently. We
    can avoid these problems using debouncing and throttling techniques.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最优先的目标之一是减少用户响应时间，即，应用程序架构必须确保用户流程永远不会被阻塞。这可以通过将任何长时间运行的任务排队异步调用来实现。然而，如果您有许多异步调用，其中一些并行运行，一些顺序运行，不特别注意，很容易陷入所谓的回调地狱。恰当地使用诸如*继续传递风格*（*Promise
    API*）、Async/Await API或外部库如Async.js等方法可以显著改进您的异步代码。我们还需要记住，像`scroll`/`touch`/`mousemove`这样的某些事件，虽然被频繁触发，但频繁调用订阅的监听器可能会造成不必要的CPU负载。我们可以使用去抖和节流技术来避免这些问题。
- en: By learning the basis of asynchronous programming, we can write nonblocking
    applications. In [Chapter 6](part0042_split_000.html#181NK2-f4ff6b81796e4f78aa983a623fb95daf
    "Chapter 6. A Large-Scale JavaScript Application Architecture"), *A Large-Scale
    JavaScript Application Architecture*, we will talk about how to make our applications
    scalable and improve the maintainability in general.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 通过学习异步编程的基础，我们可以编写非阻塞应用程序。在[第6章](part0042_split_000.html#181NK2-f4ff6b81796e4f78aa983a623fb95daf
    "第6章 大规模JavaScript应用程序架构")，大规模JavaScript应用程序架构，我们将讨论如何使我们的应用程序可扩展，并总体上提高可维护性。
