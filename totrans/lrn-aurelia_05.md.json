["```js\n//Omitted snippet... \nexport class ContactEdition { \n  //Omitted snippet... \n\n  activate(params, config) { \n    return this.contactGateway.getById(params.id).then(contact => { \n      this.contact = contact; \n      config.navModel.setTitle(this.contact.fullName); \n    }); \n  } \n\n  save() { \n    return this.validationController.validate().then(errors => { \n      if (errors.length > 0) { \n        return; \n      } \n\n      return this.contactGateway.update(this.contact.id, this.contact) \n        .then(() => this.router.navigateToRoute('contact-details', { id: this.contact.id })); \n    }); \n  } \n} \n\n```", "```js\n<template> \n  <section class=\"container\"> \n    <h1>Contact #${contact.id}</h1> \n    <!-- Omitted snippet --> \n    <div class=\"form-group\"> \n        <div class=\"col-sm-9 col-sm-offset-3\"> \n          <button type=\"submit\" class=\"btn btn-success\">Save</button> \n          <a class=\"btn btn-danger\" route-href=\"route: contact-details;\nparams.bind: { id: contact.id }\">Cancel</a> \n        </div> \n      </div> \n    </form> \n  </section> \n</template> \n\n```", "```js\nimport {inject, NewInstance} from 'aurelia-framework'; \nimport {ValidationController} from 'aurelia-validation'; \nimport {Router} from 'aurelia-router'; \nimport {ContactGateway} from './contact-gateway'; \nimport {Contact} from './models'; \n\n@inject(ContactGateway, NewInstance.of(ValidationController), Router) \nexport class ContactCreation { \n\n  contact = new Contact(); \n\n  constructor(contactGateway, validationController, router) { \n    this.contactGateway = contactGateway; \n    this.validationController = validationController; \n    this.router = router; \n  } \n\n  save() { \n    return this.validationController.validate().then(errors => { \n      if (errors.length > 0) { \n        return; \n      } \n\n      return this.contactGateway.create(this.contact) \n        .then(() => this.router.navigateToRoute('contacts')); \n    }); \n  } \n} \n\n```", "```js\n<template> \n  <section class=\"container\"> \n    <h1>New contact</h1> \n\n    <form class=\"form-horizontal\" validation-renderer=\"bootstrap-form\"  \n          submit.delegate=\"save()\"> \n      <!-- The form will go here --> \n\n      <div class=\"form-group\"> \n        <div class=\"col-sm-9 col-sm-offset-3\"> \n          <button type=\"submit\" class=\"btn btn-success\">Save</button> \n          <a class=\"btn btn-danger\" route-href=\"route: contacts\">Cancel</a> \n        </div> \n      </div> \n    </form> \n  </section> \n</template> \n\n```", "```js\n<template> \n  <div class=\"form-group\"> \n    <label class=\"col-sm-3 control-label\">First name</label> \n    <div class=\"col-sm-9\"> \n      <input type=\"text\" class=\"form-control\" value.bind=\"contact.firstName & validate\"> \n    </div> \n  </div> \n\n  <div class=\"form-group\"> \n    <label class=\"col-sm-3 control-label\">Last name</label> \n    <div class=\"col-sm-9\"> \n      <input type=\"text\" class=\"form-control\" value.bind=\"contact.lastName & validate\"> \n    </div> \n  </div> \n\n  <!-- Omitted company, birthday and note fields --> \n\n  <hr> \n  <div class=\"form-group\" repeat.for=\"phoneNumber of contact.phoneNumbers\"> \n    <div class=\"col-sm-2 col-sm-offset-1\"> \n      <select value.bind=\"phoneNumber.type & validate\" class=\"form-control\"> \n        <option value=\"Home\">Home</option> \n        <option value=\"Office\">Office</option> \n        <option value=\"Mobile\">Mobile</option> \n        <option value=\"Other\">Other</option> \n      </select> \n    </div> \n    <div class=\"col-sm-8\"> \n      <input type=\"tel\" class=\"form-control\" placeholder=\"Phone number\"  \n             value.bind=\"phoneNumber.number & validate\"> \n    </div> \n    <div class=\"col-sm-1\"> \n      <button type=\"button\" class=\"btn btn-danger\"  \n              click.delegate=\"contact.phoneNumbers.splice($index, 1)\"> \n        <i class=\"fa fa-times\"></i> Remove \n      </button> \n    </div> \n  </div> \n  <div class=\"form-group\"> \n    <div class=\"col-sm-9 col-sm-offset-3\"> \n      <button type=\"button\" class=\"btn btn-primary\"  \n              click.delegate=\"contact.addPhoneNumber()\"> \n        <i class=\"fa fa-plus-square-o\"></i> Add a phone number \n      </button> \n    </div> \n  </div> \n\n  <!-- Omitted emailAddresses, addresses and socialProfiles list editors --> \n</template> \n\n```", "```js\n<template> \n  <section class=\"container\"> \n    <h1>Contact #${contact.id}</h1> \n\n    <form class=\"form-horizontal\" validation-renderer=\"bootstrap-form\" submit.delegate=\"save()\"> \n      <compose view=\"contact-form.html\"></compose> \n\n      <!-- Omitted buttons snippet... --> \n    </form> \n  </section> \n</template> \n\n```", "```js\n<compose view=\"contact-form.html\" view-model.bind=\"{ contact: contact }\"></compose> \n\n```", "```js\nexport class ContactForm { \n} \n\n```", "```js\n<compose view-model=\"contact-form\"></compose> \n\n```", "```js\n<compose view-model=\"contact-form\" model.bind=\"contact\"></compose> \n\n```", "```js\nexport class ContactForm { \n  activate(contact) { \n    this.contact = contact; \n  } \n} \n\n```", "```js\n<template bindable=\"contact\"> \n  <!-- Omitted snippet... --> \n</template> \n\n```", "```js\n<template> \n  <require from=\"contact-form.html\"></require> \n  <!-- Omitted snippet... --> \n</template> \n\n```", "```js\n<contact-form contact.bind=\"contact\"></contact-form> \n\n```", "```js\n<text-block text.bind=\"someText \"></text-block> \n\n```", "```js\nimport {bindable} from 'aurelia-framework'; \n\nexport class TextBlockCustomElement { \n  @bindable text = 'Some default text'; \n} \n\n```", "```js\nimport {bindable, bindingMode} from 'aurelia-framework'; \n\nexport class TextBlockCustomElement { \n  @bindable({  \n    defaultBindingMode: bindingMode.twoWay, \n    changeHandler: 'onTextChanged' \n  }) text = 'Some default text'; \n} \n\n```", "```js\nimport {bindable, bindingMode} from 'aurelia-framework'; \n\n@bindable({ \n  name: 'text', \n  defaultValue: 'Some default text', \n  defaultBindingMode: bindingMode.twoWay, \n  changeHandler: 'onTextChanged' \n}) \nexport class TextBlockCustomElement { \n} \n\n```", "```js\nexport class TextBlockCustomElement { \n  @bindable text; \n\n  textChanged(newValue, oldValue) { \n    //Here, newValue is equal to this.text \n  } \n} \n\n```", "```js\nimport {customAttribute} from 'aurelia-framework'; \n\n@customAttribute('file-drop-target') \nexport class WhateverNameYouWant { \n  //Omitted snippet...  \n} \n\n```", "```js\n<div my-attribute></div> \n\n```", "```js\nimport {customAttribute, bindingMode} from 'aurelia-framework'; \n\n@customAttribute('file-drop-target', bindingMode.twoWay) \nexport class FileDropTarget { \n  //Omitted snippet...  \n} \n\n```", "```js\nimport {inject, PLATFORM, DOM} from 'aurelia-framework'; \n\nconst URL = PLATFORM.global.URL; \nconst Blob = PLATFORM.global.Blob; \n\n@inject(DOM.Element) \nexport class BlobSrcCustomAttribute { \n\n  constructor(element) { \n    this.element = element; \n  } \n\n  disposeObjectUrl() { \n    if (this.objectUrl && URL) { \n      this.element.src = ''; \n      URL.revokeObjectURL(this.objectUrl); \n      this.objectUrl = null; \n    } \n  } \n\n  valueChanged(value) { \n    this.disposeObjectUrl(); \n\n    if (Blob && URL && value instanceof Blob) { \n      this.objectUrl = URL.createObjectURL(value); \n      this.element.src = this.objectUrl; \n    } \n  } \n\n  unbind() { \n    this.disposeObjectUrl(); \n  } \n} \n\n```", "```js\n<template> \n  <!-- Omitted snippet... --> \n  <input type=\"file\" id=\"photo\" accept=\"image/*\" files.bind=\"photo & validate\"  \n    validation-errors.bind=\"photoErrors\"> \n  <!-- Omitted snippet... --> \n</template> \n\n```", "```js\nimport {inject, NewInstance} from 'aurelia-framework'; \n\n//Omitted snippet... \nexport class ContactPhoto { \n  //Omitted snippet... \n\n  get areFilesValid() { \n    return !this.errors || this.errors.length === 0; \n  }\nget preview() { \n    return this.photo && this.photo.length > 0 && this.areFilesValid \n      ? this.photo.item(0) : null; \n  } \n  //Omitted snippet... \n} \n\n```", "```js\n<template> \n  <!-- Omitted snippet... --> \n  <div class=\"col-sm-9\"> \n    <input type=\"file\" id=\"photo\" accept=\"image/*\"  \n           files.bind=\"photo & validate\"> \n    <div class=\"thumbnail\" show.bind=\"preview\"> \n      <img blob-src.bind=\"preview\" alt=\"Preview\"> \n    </div> \n  </div> \n  <!-- Omitted snippet... --> \n</template> \n\n```", "```js\nimport {customAttribute, bindingMode, inject, DOM} from 'aurelia-framework'; \n\n@customAttribute('file-drop-target', bindingMode.twoWay) \n@inject(DOM.Element) \nexport class FileDropTarget { \n  constructor(element) { \n    this.element = element; \n    this._onDragOver = this.onDragOver.bind(this); \n    this._onDrop = this.onDrop.bind(this); \n    this._onDragEnd = this.onDragEnd.bind(this); \n  } \n\n  attached() { \n    this.element.addEventListener('dragover', this._onDragOver); \n    this.element.addEventListener('drop', this._onDrop); \n    this.element.addEventListener('dragend', this._onDragEnd); \n  } \n\n  onDragOver(e) { \n    e.preventDefault(); \n  } \n\n  onDrop(e) { \n    e.preventDefault(); \n    this.value = e.dataTransfer.files; \n  } \n\n  onDragEnd(e) { \n    e.dataTransfer.clearData(); \n  } \n\n  detached() { \n    this.element.removeEventListener('dragend', this._onDragEnd); \n    this.element.removeEventListener('drop', this._onDrop); \n    this.element.removeEventListener('dragover', this._onDragOver); \n  } \n} \n\n```", "```js\nimport {bindable} from 'aurelia-framework'; \n\nexport class RouteHrefCustomAttribute { \n  @bindable route; \n  @bindable params; \n} \n\n```", "```js\n<a route-href=\"route: my-route; params.bind: { id: 1 }\">Link</a> \n\n```", "```js\nimport {dynamicOptions} from 'aurelia-framework'; \n\n@dynamicOptions \nexport class BookCustomAttribute { \n  propertyChanged(name, newValue, oldValue) { \n    //React to the property change \n  } \n} \n\n```", "```js\n<div book=\"title: Learning Aurelia; last-updated.bind: now\"></div> \n\n```", "```js\nimport {customElement} from 'aurelia-framework'; \n\n@customElement('text-block') \nexport class WhateverNameYouWant { \n  //Omitted snippet...  \n} \n\n```", "```js\nfile-picker > label { \n  width: 100%; \n  height: 100%; \n  cursor: pointer; \n} \n\nfile-picker > input[type=file] { \n  visibility: hidden; \n  width: 0; \n  height: 0; \n}  \n\n```", "```js\nimport {bindable, bindingMode} from 'aurelia-framework'; \n\nexport class FilePickerCustomElement { \n\n  @bindable inputId = ''; \n  @bindable accept = ''; \n  @bindable multiple = false; \n  @bindable({ defaultBindingMode: bindingMode.twoWay }) files; \n} \n\n```", "```js\n<template> \n  <require from=\"./file-picker.css\"></require> \n\n  <input type=\"file\" id=\"${inputId}\" accept=\"${accept}\" multiple.bind=\"multiple\" files.bind=\"files\"> \n  <label for=\"${inputId}\" file-drop-target.bind=\"files\"> \n    <slot></slot> \n  </label> \n</template> \n\n```", "```js\n<template> \n  <!-- Omitted snippet... --> \n  <div class=\"form-group\"> \n    <label class=\"col-sm-3 control-label\" for=\"photo\">Photo</label> \n    <div class=\"col-sm-6\"> \n      <file-picker input-id=\"photo\" accept=\"image/*\" files.bind=\"photo & validate\" class=\"thumbnail\"> \n        <strong hide.bind=\"preview\"> \n          Click to select a file or drag and drop one here \n        </strong> \n        <img show.bind=\"preview\" blob-src.bind=\"preview\" alt=\"Preview\"> \n      </file-picker> \n    </div> \n  </div> \n  <!-- Omitted snippet... --> \n</template> \n\n```", "```js\n<template> \n  <input value.bind=\"value\"> \n</template> \n\n```", "```js\nimport {bindable} from 'aurelia-framework'; \n\nexport class MyWidgetCustomElement { \n  @bindable value; \n} \n\n```", "```js\n<template> \n  <input value.bind=\"value\" ref=\"input\" blur.delegate=\"blur()\"> \n</template> \n\n```", "```js\nimport {inject, DOM, bindable} from 'aurelia-framework'; \n\n@inject(DOM.Element) \nexport class MyWidgetCustomElement { \n  @bindable value; \n\n  constructor(element) { \n    this.element = element; \n    element.focus = () => this.input.focus(); \n  }\nblur() { \n    this.element.dispatchEvent(DOM.createCustomEvent('blur')); \n  } \n} \n\n```", "```js\n<template role=\"tree\"> \n  <!-- Omitted snippet... --> \n</template> \n\n```", "```js\n<tree-view></tree-view> \n\n```", "```js\n<tree-view role=\"tree\"></tree-view> \n\n```", "```js\n<template role=\"tree\" click.delegate=\"click()\"> \n  <!-- Omitted snippet... --> \n</template> \n\n```", "```js\n<template role=\"${role}\" click.delegate=\"click()\"> \n  <!-- Omitted snippet... --> \n</template> \n\n```", "```js\n<template> \n  <require from=\"./file-picker.css\"></require> \n\n  <input type=\"file\" id=\"${inputId}\" accept=\"${accept}\" multiple.bind=\"multiple\" files.bind=\"files\"> \n  <label for=\"${inputId}\" file-drop-target.bind=\"files\"> \n    <slot></slot> \n  </label> \n</template> \n\n```", "```js\n<file-picker input-id=\"photo\" accept=\"image/*\" files.bind=\"photo & validate\" class=\"thumbnail\"> \n  <strong hide.bind=\"preview\"> \n    Click to select a file or drag and drop one here \n  </strong> \n  <img show.bind=\"preview\" blob-src.bind=\"preview\" alt=\"Preview\"> \n</file-picker> \n\n```", "```js\n<file-picker input-id=\"photo\" accept=\"image/*\" files.bind=\"photo & validate\" class=\"thumbnail\"> \n  <input type=\"file\" id=\"${inputId}\" accept=\"${accept}\" multiple.bind=\"multiple\" files.bind=\"files\"> \n  <label for=\"${inputId}\" file-drop-target.bind=\"files\"> \n    <strong hide.bind=\"preview\"> \n      Click to select a file or drag and drop one here \n    </strong> \n    <img show.bind=\"preview\" blob-src.bind=\"preview\" alt=\"Preview\"> \n  </label> \n</file-picker> \n\n```", "```js\n<template> \n  <button type=\"submit\" class=\"btn btn-primary\"> \n    <slot name=\"icon\"></slot> \n    <slot name=\"label\"></slot> \n  </button> \n</template> \n\n```", "```js\n<submit-button> \n  <i slot=\"icon\" class=\"fa fa-floppy-o\" aria-hidden=\"true\"></i> \n  <span slot=\"label\">Update ${contact.fullName}</span> \n</submit-button> \n\n```", "```js\n<submit-button> \n  <i slot=\"icon\" class=\"fa fa-floppy-o\" aria-hidden=\"true\"></i> \n  <span slot=\"label\">Update</span> \n  <span slot=\"label\">${contact.fullName}</span> \n</submit-button> \n\n```", "```js\n<template> \n  <button type=\"submit\" class=\"btn btn-primary\"> \n    <slot name=\"icon\"> \n      <i class=\"fa fa-check-circle-o\" aria-hidden=\"true\"></i> \n    </slot> \n    <slot name=\"label\">Submit</slot> \n  </button> \n</template> \n\n```", "```js\n<submit-button> \n  <span slot=\"icon\"></span> \n</submit-button> \n\n```", "```js\n<template> \n  <button type=\"submit\" class=\"btn btn-primary\"> \n    <slot name=\"content\"> \n      <slot name=\"icon\"> \n        <i class=\"fa fa-check-circle-o\" aria-hidden=\"true\"></i> \n      </slot> \n      <slot name=\"label\">Submit</slot> \n    </slot> \n  </button> \n</template> \n\n```", "```js\n<submit-button> \n  <span slot=\"content\">Save</span> \n</submit-button> \n\n```", "```js\n<template> \n  <button type=\"submit\" class=\"btn btn-primary\"> \n    <slot name=\"content\"> \n      <slot name=\"icon\"> \n        <i class=\"fa fa-check-circle-o\" aria-hidden=\"true\"></i> \n      </slot> \n      <slot>Submit</slot> \n    </slot> \n  </button> \n</template> \n\n```", "```js\n<submit-button>Save</submit-button> \n\n```", "```js\n<submit-button> \n  <i slot=\"icon\" class=\"fa fa-check-square-o\" aria-hidden=\"true\"></i> \n  Save \n</submit-button> \n\n```", "```js\n<template bindable=\"cancelUrl\"> \n  <div class=\"form-group\"> \n    <div class=\"col-sm-9 col-sm-offset-3\"> \n      <submit-button> \n        <slot name=\"submit-label\" slot=\"label\">Save</slot> \n      </submit-button> \n      <a class=\"btn btn-danger\" href.bind=\"cancelUrl\"> \n        <slot name=\"cancel-label\">Cancel</slot> \n      </a> \n    </div> \n  </div> \n</template> \n\n```", "```js\n<template bindable=\"items, groupBy, orderBy\"> \n  <div repeat.for=\"group of items | groupBy:groupBy | orderBy:'key'\" class=\"panel panel-default\"> \n    <div class=\"panel-heading\">${group.key}</div> \n    <ul class=\"list-group\"> \n      <li repeat.for=\"item of group.items | orderBy:orderBy\" class=\"list-group-item\"> \n        <template replaceable part=\"item\"></template> \n      </li> \n    </ul> \n  </div> \n</template> \n\n```", "```js\n<template> \n  <!-- Omitted snippet... --> \n  <group-list items.bind=\"contacts | filterBy:filter:'firstName':'lastName':'company'\" \n              group-by=\"firstLetter\" order-by=\"fullName\"> \n    <template replace-part=\"item\"> \n      <a route-href=\"route: contact-details; params.bind: { id: item.id }\"> \n        <span if.bind=\"item.isPerson\"> \n          ${item.firstName} <strong>${item.lastName}</strong> \n        </span> \n        <span if.bind=\"!item.isPerson\"> \n          <strong>${item.company}</strong> \n        </span> \n      </a> \n    </template> \n  </group-list> \n</template> \n\n```", "```js\n<template bindable=\"items, groupBy, orderBy\"> \n  <!-- Omitted snippet... --> \n  <template replaceable part=\"item\">${item}</template> \n  <!-- Omitted snippet... --> \n</template> \n\n```", "```js\n<template bindable=\"items, groupBy, orderBy\"> \n  <!-- Omitted snippet... --> \n  <li repeat.for=\"item of group.items | orderBy:orderBy\" class=\"list-group-item\"> \n    <template with.bind=\"item\"> \n      <template replaceable part=\"item\">${$this}</template> \n    </template> \n  </li> \n  <!-- Omitted snippet... --> \n</template> \n\n```", "```js\n<template> \n  <!-- Omitted snippet... --> \n  <template replace-part=\"item\"> \n    <a route-href=\"route: contact-details; params.bind: { id: id }\"> \n      <span if.bind=\"isPerson\"> \n        ${firstName} <strong>${lastName}</strong> \n      </span> \n      <span if.bind=\"!isPerson\"> \n        <strong>${company}</strong> \n      </span> \n    </a> \n  </template> \n  <!-- Omitted snippet... --> \n</template> \n\n```", "```js\nimport {bindable} from 'aurelia-framework'; \n\nexport class ListEditorCustomElement { \n\n  @bindable items = []; \n  @bindable addItem; \n} \n\n```", "```js\n<template> \n  <div class=\"form-group\" repeat.for=\"item of items\" > \n    <template with.bind=\"item\"> \n      <template replaceable part=\"item\"> \n        <div class=\"col-sm-2 col-sm-offset-1\"> \n          <template replaceable part=\"label\"></template> \n        </div> \n        <div class=\"col-sm-8\"> \n          <template replaceable part=\"value\">${$this}</template> \n        </div> \n        <div class=\"col-sm-1\"> \n          <template replaceable part=\"remove-btn\"> \n            <button type=\"button\" class=\"btn btn-danger\"  click.delegate=\"items.splice($index, 1)\"> \n              <i class=\"fa fa-times\"></i> \n            </button> \n          </template> \n        </div> \n      </template> \n    </template> \n  </div> \n  <div class=\"form-group\" show.bind=\"addItem\"> \n    <div class=\"col-sm-9 col-sm-offset-3\"> \n      <button type=\"button\" class=\"btn btn-primary\" click.delegate=\"addItem()\"> \n        <slot name=\"add-button-content\"> \n          <i class=\"fa fa-plus-square-o\"></i> \n          <slot name=\"add-button-label\">Add</slot> \n        </slot> \n      </button> \n    </div> \n  </div> \n</template> \n\n```", "```js\n<template> \n  <!-- Omitted snippet... --> \n  <hr> \n  <list-editor items.bind=\"contact.phoneNumbers\" add-item.call=\"contact.addPhoneNumber()\"> \n    <template replace-part=\"label\"> \n      <select value.bind=\"type & validate\" class=\"form-control\"> \n        <option value=\"Home\">Home</option> \n        <option value=\"Office\">Office</option> \n        <option value=\"Mobile\">Mobile</option> \n        <option value=\"Other\">Other</option> \n      </select> \n    </template> \n    <template replace-part=\"value\"> \n      <input type=\"tel\" class=\"form-control\" placeholder=\"Phone number\" value.bind=\"number & validate\"> \n    </template> \n    <span slot=\"add-button-label\">Add a phone number</span> \n  </list-editor> \n  <!-- Omitted snippet... --> \n</template> \n\n```", "```js\n<template> \n  <!-- Comment out the require statement --> \n  <!-- <require from=\"contact-form.html\"></require> --> \n  <!-- Omitted snippet... --> \n</template> \n\n```", "```js\nimport {inject, NewInstance, viewResources} from 'aurelia-framework'; \n\n//Omitted snippet... \n@viewResources(['contact-form.html']) \nexport class ContactEdition { \n  //Omitted snippet... \n} \n\n```", "```js\nimport {bindable, bindingMode, inject, DOM, useView} from 'aurelia-framework'; \n\n@inject(DOM.Element) \n@useView('./file-picker.html') \nexport class FilePickerCustomElement { \n  //Omitted snippet... \n} \n\n```", "```js\nimport {inlineView} from 'aurelia-framework'; \n\n@inlineView('<template><button type=\"submit\">Submit</button></template>') \nexport class SubmitButtonCustomElement { \n} \n\n```", "```js\nimport {customElement, inlineView} from 'aurelia-templating'; \n\n@customElement('ai-dialog') \n@inlineView('<template><slot></slot></template>') \nexport class AiDialog { \n} \n\n```", "```js\nimport {noView, inject, DOM} from 'aurelia-framework'; \n\n@noView \n@inject(DOM.Element) \nexport class MyWidget { \n  constructor(element) { \n    this.element = element; \n  } \n\n  attached() { \n    SomeWidgetApi.create(this.element); \n  } \n} \n\n```", "```js\nimport {processAttributes} from 'aurelia-framework'; \n\n@processAttributes((compiler, resources, node, attributes, instruction) => { \n  //Omitted snippet... \n}) \nexport class MyCustomElementCustomElement { \n  //Omitted snippet... \n} \n\n```", "```js\nimport {noView, processContent} from 'aurelia-framework'; \n\n@noView \n@processContent(false) \nexport class ProcessNoContentSampleCustomElement { \n  //Omitted snippet... \n} \n\n```", "```js\n<template> \n  <process-no-content-sample>${someProperty}</process-no-content-sample> \n</template> \n\n```", "```js\nimport {noView, processContent} from 'aurelia-framework'; \n\n@noView \n@processContent((compiler, resources, node, instruction) => { \n  //Omitted snippet... \n}) \nexport class ProcessContentSampleCustomElement { \n  //Omitted snippet... \n} \n\n```", "```js\nimport {containerless} from 'aurelia-framework'; \n\n@containerless \nexport class ContainerlessSample { \n  //Omitted snippet... \n} \n\n```", "```js\n<template> \n  <p>This is a containerless element example.</p> \n</template> \n\n```", "```js\n<div class=\"example\"> \n  <containerless-sample></containerless-sample> \n</div> \n\n```", "```js\n<div class=\"example\"> \n  <containerless-sample> \n    <p>This is a containerless element example.</p> \n  </containerless-sample> \n</div> \n\n```", "```js\n<div class=\"example\"> \n  <p>This is a containerless element example.</p> \n</div> \n\n```", "```js\nimport {bindable, bindingMode, inject, DOM, useView, useShadowDOM} from 'aurelia-framework'; \n\n@inject(DOM.Element) \n@useView('./file-picker.html') \n@useShadowDOM \nexport class FilePickerCustomElement { \n  //Omitted snippet... \n} \n\n```", "```js\n<template> \n  <require from=\"./file-picker.css\" as=\"scoped\"></require> \n  <!-- Omitted snippet... --> \n</template> \n\n```", "```js\nlabel { \n  width: 100%; \n  height: 100%; \n  cursor: pointer; \n} \n\ninput[type=file] { \n  visibility: hidden; \n  width: 0; \n  height: 0; \n}  \n\n```", "```js\nimport {inlineView, children} from 'aurelia-framework'; \n\n@inlineView('<template><slot></slot></template>') \nexport class ChildChildrenSampleCustomElement { \n  @children('item') items; \n} \n\n```", "```js\n<child-children-sample> \n  <item repeat.for=\"value of values\">${value}</item> \n</child-children-sample> \n\n```", "```js\nimport {inlineView, child} from 'aurelia-framework'; \n\n@inlineView('<template><slot></slot></template>') \nexport class ChildChildrenSampleCustomElement { \n  @child('header') header; \n} \n\n```", "```js\n<child-children-sample> \n  <header>Some title</header> \n</child-children-sample> \n\n```", "```js\nimport {inject, DOM} from 'aurelia-framework'; \n\n@inject(DOM.Element) \nexport class SubmitTaskCustomAttribute { \n\n  constructor(element) { \n    this.element = element; \n    this.onSubmit = this.trySubmit.bind(this); \n  } \n\n  attached() { \n    this.element.addEventListener('submit', this.onSubmit); \n    this.element.isSubmitTaskExecuting = false; \n  } \n\n  trySubmit(e) { \n    e.preventDefault(); \n    if (this.task) { \n      return; \n    } \n\n    this.element.isSubmitTaskExecuting = true; \n    this.task = Promise.resolve(this.value()).then( \n      () => this.completeTask(), \n      () => this.completeTask()); \n  } \n\n  completeTask() { \n    this.task = null; \n    this.element.isSubmitTaskExecuting = false; \n  } \n\n  detached() { \n    this.element.removeEventListener('submit', this.onSubmit); \n  } \n} \n\n```", "```js\n<template> \n  <!-- Omitted snippet... --> \n  <form class=\"form-horizontal\" validation-renderer=\"bootstrap-form\" submit-task.call=\"save()\"> \n    <!-- Omitted snippet... --> \n  </form> \n  <!-- Omitted snippet... --> \n</template> \n\n```", "```js\n//Omitted snippet... \nsave() { \n  //Omitted snippet... \n\n  return this.contactGateway.create(this.contact) \n    .then(() => this.router.navigateToRoute('contacts')); \n} \n//Omitted snippet... \n\n```", "```js\n<template bindable=\"disabled\"> \n  <button type=\"submit\" ref=\"button\" disabled.bind=\"disabled\" class=\"btn btn-success\"> \n    <span hide.bind=\"button.form.isSubmitTaskExecuting\"> \n      <slot name=\"icon\"> \n        <i class=\"fa fa-check-circle-o\" aria-hidden=\"true\"></i> \n      </slot> \n    </span> \n    <i class=\"fa fa-spinner fa-spin\" aria-hidden=\"true\" show.bind=\"button.form.isSubmitTaskExecuting\"></i> \n    <slot>Submit</slot> \n  </button> \n</template> \n\n```", "```js\n<template> \n  <!-- Omitted snippet... --> \n  <submit-button>Save</submit-button> \n  <!-- Omitted snippet... --> \n</template> \n\n```", "```js\nimport {ViewLocator} from 'aurelia-framework'; \n//Omitted snippet... \n\nexport function configure(aurelia) { \n  //Omitted snippet... \n  ViewLocator.prototype.convertOriginToViewUrl = origin => { \n    let moduleId = origin.moduleId; \n    let id = (moduleId.endsWith('.js') || moduleId.endsWith('.ts')) \n      ? moduleId.substring(0, moduleId.length - 3) \n      : moduleId; \n    return id + '.html'; \n  }; \n  //Omitted snippet... \n} \n\n```", "```js\nimport {bindable, bindingMode, inject, DOM, useShadowDOM} from 'aurelia-framework'; \n\n@inject(DOM.Element) \n@useShadowDOM \nexport class FilePickerCustomElement { \n  //Omitted snippet... \n\n  getViewStrategy() { \n    return './file-picker.html'; \n  } \n} \n\n```"]