["```js\nfunction stub( foo ) {\n return foo || \"Default value\";\n}\n\nconsole.log( stub( \"My value\" ) ); // My value\nconsole.log( stub() ); // Default value\n```", "```js\nfunction stub( foo = \"Default value\" ) {\n return foo;\n}\n```", "```js\nvar age = 20;\nage >= 18 && console.log( \"You are allowed to play this game\" );\nage >= 18 || console.log( \"The game is restricted to 18 and over\" );\n```", "```js\n/**\n* @param {Function} [cb] - callback\n*/\nfunction fn( cb ) {\n cb && cb();\n};\n```", "```js\n/**\n* @class AbstractFoo\n*/\nAbstractFoo = function(){\n // call this.init if the subclass has init method\n this.init && this.init();\n};\n```", "```js\nfunction( param1, param2 ){ /* function body */ }\n```", "```js\n( param1, param2 ) => { /* function body */ }\n```", "```js\nfunction( param1, param2 ){ return expression; }\n```", "```js\n( param1, param2 ) => expression\n```", "```js\n// filter all the array elements greater than 2\nvar res = [ 1, 2, 3, 4 ].filter(function( v ){\n return v > 2;\n})\nconsole.log( res ); // [3,4]\n```", "```js\nvar res  = [ 1, 2, 3, 4 ].filter( v => v > 2 );\nconsole.log( res ); // [3,4]\n```", "```js\n\"use strict\";\n/**\n* @class View\n*/   \nlet View = function(){\n let button = document.querySelector( \"[data-bind=\\\"btn\\\"]\" );\n /**\n  * Handle button clicked event\n  * @private \n  */\n this.onClick = function(){\n   console.log( \"Button clicked\" );\n };\n button.addEventListener( \"click\", () => {\n   // we can safely refer surrounding object members\n   this.onClick(); \n }, false );\n}\n```", "```js\nvar that = this;\nbutton.addEventListener( \"click\", function(){\n  // cross-cutting concerns\n  that.onClick(); \n}, false );\n```", "```js\nvar foo = {\n bar: function( param1, param2 ) {\n }\n}\n```", "```js\nlet foo = {\n bar ( param1, param2 ) {\n }\n}\n```", "```js\n\"use strict\";\nvar cb = function() {\n // all available parameters into an array\n var args = [].slice.call( arguments ),\n     // the first array element to foo and shift\n     foo = args.shift(),\n     // the new first array element to bar and shift\n     bar = args.shift();\n console.log( foo, bar, args );\n};\ncb( \"foo\", \"bar\", 1, 2, 3 ); // foo bar [1, 2, 3]\n```", "```js\nlet cb = function( foo, bar, ...args ) {\n console.log( foo, bar, args );\n}\ncb( \"foo\", \"bar\", 1, 2, 3 ); // foo bar [1, 2, 3]\n```", "```js\nlet [ bar, ...others ] = [ \"bar\", \"foo\", \"baz\", \"qux\" ];\nconsole.log([ bar, others ]); // [\"bar\",[\"foo\",\"baz\",\"qux\"]]\n```", "```js\nlet args = [ 2015, 6, 17 ],\n   relDate = new Date( ...args );\nconsole.log( relDate.toString() );  // Fri Jul 17 2015 00:00:00 GMT+0200 (CEST)\n```", "```js\nvar str = \"Lorem ipsum dolor sit amet, \\n\\\nconsectetur adipiscing elit. Nunc ornare, \\n\\\ndiam ultricies vehicula aliquam, mauris \\n\\\nipsum dapibus dolor, quis fringilla leo ligula non neque\";\n```", "```js\nvar str = <>Lorem ipsum dolor sit amet, \nconsectetur adipiscing \nelit. Nunc ornare </>.toString();\n```", "```js\nvar str = \"Lorem ipsum dolor sit amet, \\n\" +\n \"consectetur adipiscing elit. Nunc ornare,\\n\" +\n \"diam ultricies vehicula aliquam, mauris \\n\" +\n \"ipsum dapibus dolor, quis fringilla leo ligula non neque\";\n```", "```js\nvar str = [ \"Lorem ipsum dolor sit amet, \\n\",\n \"consectetur adipiscing elit. Nunc ornare,\\n\",\n \"diam ultricies vehicula aliquam, mauris \\n\",\n \"ipsum dapibus dolor, quis fringilla leo ligula non neque\"].join( \"\" );\n```", "```js\nvar str = `Lorem ipsum dolor sit amet, \\n\nconsectetur adipiscing elit. Nunc ornare, \\n\ndiam ultricies vehicula aliquam, mauris \\n\nipsum dapibus dolor, quis fringilla leo ligula non neque`;\n```", "```js\n\"use strict\";\nvar title = \"Some title\",\n   text = \"Some text\",\n   str = `<div class=\"message\">\n<h2>${title}</h2>\n<article>${text}</article>\n</div>`;\nconsole.log( str );\n```", "```js\n<div class=\"message\">\n<h2>Some title</h2>\n<article>Some text</article>\n</div>\n```", "```js\n\"use strict\";\nvar Hello = React.createClass({\n render: function() {\n return <div class=\"message\">\n<h2>{this.props.title}</h2>\n<article>{this.props.text}</article>\n</div>;\n }\n});\n\nReact.render(<Hello title=\"Some title\" text=\"Some text\" />, node);\n```", "```js\nLorem ipsum dolor sit amet,\nconsectetur adipiscing elit. Nunc ornare,\ndiam ultricies vehicula aliquam, mauris\nipsum dapibus dolor, quis fringilla leo ligula non neque\n```", "```js\nvar str = require( \"./foo.txt\" );\nconsole.log( str );\n```", "```js\n\"use strict\";\nvar data = [ \"bar\", \"foo\", \"baz\", \"qux\" ];\ndata.forEach(function( val, inx ){\n  console.log( val, inx ); \n});\n```", "```js\n\"use strict\";\nvar data = { bar: \"bar bar\", foo: \"foo foo\" },\n   // convert key-value array into url-encoded string\n   urlEncStr = Object.keys( data ).map(function( key ){\n     return key + \"=\" + window.encodeURIComponent( data[ key ] );\n   }).join( \"&\" );\n\nconsole.log( urlEncStr ); // bar=bar%20bar&foo=foo%20foo\n```", "```js\n\"use strict\";\nvar data = [ \"bar\", \"foo\", \"\", 0 ],\n   // remove all falsy elements\n   filtered = data.filter(function( item ){\n     return !!item;\n   });\n\nconsole.log( filtered ); // [\"bar\", \"foo\"]\n```", "```js\n\"use strict\";\nvar data = [[ 0, 1 ], [ 2, 3 ], [ 4, 5 ]],\n   arr = data.reduce(function( prev, cur ) {\n     return prev.concat( cur );\n   }),\n   arrReverse = data.reduceRight(function( prev, cur ) {\n     return prev.concat( cur );\n   });\n\nconsole.log( arr ); //  [0, 1, 2, 3, 4, 5]\nconsole.log( arrReverse ); // [4, 5, 2, 3, 0, 1]\n```", "```js\n\"use strict\";\nvar bar = [ \"bar\", \"baz\", \"qux\" ],\n   foo = [ \"foo\", \"baz\", \"qux\" ],\n   /**\n    * Check if a given context (this) contains the value\n    * @param {*} val\n    * @return {Boolean}\n    */\n   compare = function( val ){\n     return this.indexOf( val ) !== -1; \n   };\n\nconsole.log( bar.some( compare, foo ) ); // true\n```", "```js\n\"use strict\";\nvar bar = [ \"bar\", \"baz\" ],\n   foo = [ \"bar\", \"baz\", \"qux\" ],\n   /**\n    * Check if a given context (this) contains the value\n    * @param {*} val\n    * @return {Boolean}\n    */\n   compare = function( val ){\n     return this.indexOf( val ) !== -1; \n   };\n\nconsole.log( bar.every( compare, foo ) ); // true\n```", "```js\n\"use strict\";\nvar data = Array( 5 );\nconsole.log( data.fill( \"bar\" ) ); // [\"bar\", \"bar\", \"bar\", \"bar\", \"bar\"]\n```", "```js\n\"use strict\";\nvar data = [ \"bar\", \"foo\", \"baz\", \"qux\" ];\nconsole.log( data.includes( \"foo\" ) );\n```", "```js\n\"use strict\";\nvar data = [ \"bar\", \"fo\", \"baz\", \"qux\" ],\n   match = function( val ){\n     return val.length < 3;\n   };\nconsole.log( data.find( match ) ); // fo\n```", "```js\n\"use strict\";\nvar options = {\n    bar: \"bar\",\n    foo: \"foo\"\n   },\n   key;\nfor( key in options ) {\n console.log( key, options[ key] );\n}\n```", "```js\nbar bar\nfoo foo\n```", "```js\nObject.prototype.baz = \"baz\";\n```", "```js\nbar bar\nfoo foo\nbaz baz\n```", "```js\n//â€¦\nfor( key in options ) {\n if ( options.hasOwnProperty( key ) ) {\n   console.log( key, options[ key] );\n }\n}\n```", "```js\n\"use strict\";\nvar options = {\n    bar: \"bar\",\n    foo: \"foo\"\n   };\nObject.keys( options ).forEach(function( key ){\n console.log( key, options[ key] );\n});\n```", "```js\n\"use strict\";\nvar nodes = document.querySelectorAll( \"div\" ),\n   arr = Array.prototype.slice.call( nodes );\n\narr.forEach(function(i){\n console.log(i);\n});\n```", "```js\narr = [].slice.call( nodes )\n```", "```js\narr = Array.from( nodes );\n```", "```js\n\"use strict\";\nlet foo = new Set();\nfoo.add( 1 );\nfoo.add( 1 );\nfoo.add( 2 );\nconsole.log( Array.from( foo ) ); // [ 1, 2 ]\n\nlet foo = new Set(), \n   bar = function(){ return \"bar\"; };\nfoo.add( bar );\nconsole.log( foo.has( bar ) ); // true\n```", "```js\n\"use strict\";\n/**\n* @class\n* @param {Node} el\n*/\nlet El = function( el ){\n this.el = el;\n this.map = new Map();\n};\n/**\n* Subscribe a handler on event\n* @param {String} event\n* @param {Function} cb\n* @param {Object} context\n*/\nEl.prototype.on = function( event, cb, context ){\n let handler = cb.bind( context || this );\n this.map.set( [ event, cb ], handler );\n this.el.addEventListener( event, handler, false );\n};\n/**\n* Unsubscribe a handler on event\n* @param {String} event\n* @param {Function} cb\n*/\n\nEl.prototype.off = function( event, cb ){\n let handler = cb.bind( context ),\n     key = [ event, handler ];\n if ( this.map.has( key ) ) {\n this.el.removeEventListener( event, this.map.get( key ) );\n this.map.delete( key );\n }\n};\n```", "```js\n\"use strict\";\nlet map = new Map()\n .set( \"bar\", \"bar\" )\n .set( \"foo\", \"foo\" ),\n   pair;\nfor ( pair of map ) {\n console.log( pair );\n}\n\n// OR \nlet map = new Map([\n   [ \"bar\", \"bar\" ],\n   [ \"foo\", \"foo\" ],\n]);\nmap.forEach(function( value, key ){\n console.log( key, value );\n});\n```", "```js\n\"use strict\"; \n/**\n * @class\n */\nvar Constructor = function(){\n   /**\n   * @type {String}\n   * @public\n   */\n   this.bar = \"bar\";\n   /**\n   * @public\n   * @returns {String}\n   */\n   this.foo = function() {\n    return this.bar;\n   };\n },\n /** @type Constructor */\n instance = new Constructor();\n\nconsole.log( instance.foo() ); // bar\nconsole.log( instance instanceof Constructor ); // true\n```", "```js\n\"use strict\";\n/**\n* @class\n*/\nvar Constructor = function(){},\n   instance;\n/**\n* @type {String}\n* @public\n*/\nConstructor.prototype.bar = \"bar\";\n/**\n* @public\n* @returns {String}\n*/\nConstructor.prototype.foo = function() {\n return this.bar;\n};\n/** @type Constructor */\ninstance = new Constructor();\n\nconsole.log( instance.foo() ); // bar\nconsole.log( instance instanceof Constructor ); // true\n```", "```js\n\"use strict\";\n/**\n * @class\n */\nvar Constructor = function(){\n     /**\n     * @type {String}\n     * @private\n     */\n     var baz = \"baz\";\n     return {\n       /**\n       * @type {String}\n       * @public\n       */\n       bar: \"bar\",\n       /**\n       * @public\n       * @returns {String}\n       */\n       foo: function() {\n        return this.bar + \" \" + baz;\n       }\n     };\n   },\n   /** @type Constructor */\n   instance = new Constructor();\n\nconsole.log( instance.foo() ); // bar baz\nconsole.log( instance.hasOwnProperty( \"baz\") ); // false\nconsole.log( Constructor.prototype.hasOwnProperty( \"baz\") ); // false\nconsole.log( instance instanceof Constructor ); // false\n```", "```js\n\"use strict\";\n /**\n * @class\n */\nvar SuperType = function(){\n       /**\n       * @type {String}\n       * @public\n       */\n       this.foo = \"foo\";\n     },\n     /**\n      * @class\n      */\n     Constructor = function(){\n       /**\n       * @type {String}\n       * @public\n       */\n       this.bar = \"bar\";\n     },\n     /** @type Constructor */\n     instance;\n\n Constructor.prototype = new SuperType();\n Constructor.prototype.constructor = Constructor;\n\n instance = new Constructor();\n console.log( instance.bar ); // bar\n console.log( instance.foo ); // foo\n console.log( instance instanceof Constructor ); // true\n console.log( instance instanceof SuperType ); // true  \n```", "```js\n\"use strict\";\nvar proto = {\n bar: \"bar\",\n foo: \"foo\"\n}, \ninstance = Object.create( proto );\nproto.bar = \"qux\",\ninstance.foo = \"baz\";\nconsole.log( instance ); // { foo=\"baz\",  bar=\"qux\"}\nconsole.log( proto ); // { bar=\"qux\",  foo=\"foo\"}\n```", "```js\n// ...\nSuperType.prototype.baz = \"baz\";\nConstructor.prototype = Object.create( SuperType.prototype );\nConstructor.prototype.constructor = Constructor;\n\ninstance = new Constructor();\n\nconsole.log( instance.bar ); // bar\nconsole.log( instance.baz ); // baz\nconsole.log( instance.hasOwnProperty( \"foo\" ) ); // false\nconsole.log( instance instanceof Constructor ); // true\nconsole.log( instance instanceof SuperType ); // true\n```", "```js\n\"use strict\";\n   /**\n    * @class\n    */\nvar SuperType = function(){\n     /**\n     * @type {String}\n     * @public\n     */\n     this.foo = \"foo\";\n   },\n   /**\n    * @class\n    */\n   Constructor = function(){\n     /**\n     * @type {String}\n     * @public\n     */\n     this.bar = \"bar\";\n   },\n   /** @type Constructor */\n   instance;\n\nObject.assign( Constructor.prototype = new SuperType(), {\n baz: \"baz\"\n});\ninstance = new Constructor();\nconsole.log( instance.bar ); // bar\nconsole.log( instance.foo ); // foo\nconsole.log( instance.baz ); // baz\nconsole.log( instance instanceof Constructor ); // true\nconsole.log( instance instanceof SuperType ); // true\n```", "```js\n\"use strict\";\n   /**\n    * @class\n    */\nvar SuperType = Base.extend({\n     /**\n      * @pulic\n      * @returns {String}\n      */\n     foo: function(){ return \"foo public\"; },\n     /**\n      * @constructs SuperType\n      */\n     constructor: function () {}\n   }),\n   /**\n    * @class\n    */\n   Constructor = SuperType.extend({\n     /**\n      * @pulic\n      * @returns {String}\n      */      \n     bar: function(){ return \"bar public\"; }\n   }, {\n     /**\n      * @static\n      * @returns {String}\n      */      \n     bar: function(){ return \"bar static\"; }\n   }),\n   /** @type Constructor */\n   instance = new Constructor();\n\nconsole.log( instance.foo() ); // foo public\nconsole.log( instance.bar() ); // bar public\nconsole.log( Constructor.bar() ); // bar static\nconsole.log( instance instanceof Constructor ); // true\nconsole.log( instance instanceof SuperType ); // true\n```", "```js\n\"use strict\";\nclass AbstractClass {\n constructor() {\n   this.foo = \"foo\";\n }\n}\nclass ConcreteClass extends AbstractClass {\n constructor() {\n   super();\n   this.bar = \"bar\";\n }\n baz() {\n   return \"baz\";\n }\n}\n\nlet instance = new ConcreteClass();\nconsole.log( instance.bar ); // bar\nconsole.log( instance.foo ); // foo\nconsole.log( instance.baz() ); // baz\nconsole.log( instance instanceof ConcreteClass ); // true\nconsole.log( instance instanceof AbstractClass ); // true\n```", "```js\nclass Bar {\n static foo() {\n   return \"static method\";\n }\n baz() {\n   return \"prototype method\";\n }\n}\nlet instance = new Bar();\nconsole.log( instance.baz() ); // prototype method\nconsole.log( Bar.foo()) ); // static method\n```", "```js\n\"use strict\";\nvar bar = {\n /** @type {[Number]} */\n arr: [ 1, 2 ],\n /**\n  * Getter\n  * @returns {Number}\n  */\n get length () {\n   return this.arr.length;\n },\n /**\n  * Setter\n  * @param {*} val\n  */\n set length ( val ) {\n   throw new SyntaxError( \"Cannot assign to read only property 'length'\" );\n }\n};\nconsole.log ( bar.length ); // 2\nbar.arr.push( 3 );\nconsole.log ( bar.length ); // 3\nbar.length = 10; // SyntaxError: Cannot assign to read only property 'length'\n```", "```js\nObject.defineProperty:\n\"use strict\";\nvar bar = {\n /** @type {[Number]} */\n arr: [ 1, 2 ]\n};\n\nObject.defineProperty( bar, \"length\", {\n /**\n  * Getter\n  * @returns {Number}\n  */\n get: function() {\n   return this.arr.length;\n },\n /**\n  * Setter\n  */\n set: function() {\n   throw new SyntaxError( \"Cannot assign to read only property 'length'\" );\n }\n});\n\nconsole.log ( bar.length ); // 2\nbar.arr.push( 3 );\nconsole.log ( bar.length ); // 3\nbar.length = 10; // SyntaxError: Cannot assign to read only property 'length'\n```", "```js\n\"use strict\";\nvar bar = {};\n\nObject.defineProperty( bar, \"length\", {\n /**\n  * Data descriptor\n  * @type {*}\n  */\n value: 0,\n /**\n  * Data descriptor\n  * @type {Boolean}\n  */\n writable: false\n});\n\nbar.length = 10; // TypeError: \"length\" is read-only\n```", "```js\ndelete bar.length;\n```", "```js\n\"use strict\";\n/** @class */\nclass Bar {\n /** @constructs Bar */\n constructor() {\n   /** @type {[Number]} */\n   this.arr = [ 1, 2 ];\n }\n /**\n  * Getter\n  * @returns {Number}\n  */\n get length() {\n   return this.arr.length;\n }\n /**\n  * Setter\n  * @param {Number} val\n  */\n set length( val ) {\n    throw new SyntaxError( \"Cannot assign to read only property 'length'\" );\n }\n}\n\nlet bar = new Bar();\nconsole.log ( bar.length ); // 2\nbar.arr.push( 3 );\nconsole.log ( bar.length ); // 3\nbar.length = 10; // SyntaxError: Cannot assign to read only property 'length'\n```", "```js\n\"use strict\";\n\nclass Bar {\n   /**\n    * @static\n    * @returns {String}\n    */\n   static get baz() {\n       return \"baz\";\n   }\n}\n\nconsole.log( Bar.baz ); // baz\n```", "```js\n\"use strict\";\n/**\n* Custom storage\n*/\nvar myStorage = {\n     /** @type {Object} key-value object */\n     data: {},\n     /**\n      * Getter\n      * @param {String} key\n      * @returns {*}\n      */\n     getItem: function( key ){\n       return this.data[ key ];\n     },\n     /**\n      * Setter\n      * @param {String} key\n      * @param {*} val\n      */\n     setItem: function( key, val ){\n       this.data[ key ] = val;\n     }\n   },\n   /**\n    * Storage proxy\n    * @type {Proxy}\n    */\n   storage = new Proxy( myStorage, {\n     /**\n      * Proxy getter\n      * @param {myStorage} storage\n      * @param {String} key\n      * @returns {*}\n      */\n     get: function ( storage, key ) {\n       return storage.getItem( key );\n     },\n     /**\n      * Proxy setter\n      * @param {myStorage} storage\n      * @param {String} key\n      * @param {*} val\n      * @returns {void}\n      */\n     set: function ( storage, key, val ) {\n       return storage.setItem( key, val );\n   }});\n\nstorage.bar = \"bar\";\nconsole.log( myStorage.getItem( \"bar\" ) ); // bar\nmyStorage.setItem( \"bar\", \"baz\" );\nconsole.log( storage.bar ); // baz\n```"]