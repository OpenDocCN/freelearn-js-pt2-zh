["```js\nimport {PersonService} from 'app-services'; \nimport {inject} from 'aurelia-framework'; \n\n@inject(PersonService) \nexport class PersonListView { \n\n  constructor(personService) { \n    this.personService = personService; \n  } \n\n  getPeople() { \n    return this.personService.getAll(); \n  } \n} \n\n```", "```js\nimport {PersonService, AnotherService} from 'app-services'; \nimport {inject} from 'aurelia-framework'; \n\n@inject(PersonService, AnotherService) \nexport class PersonListView { \n\n  constructor(personService, anotherService) { \n    this.personService = personService; \n    this.anotherService = anotherService; \n  } \n\n  getPeople() { \n    return this.personService.getAll(); \n  } \n} \n\n```", "```js\nimport {PersonService} from 'app-services'; \nimport {Person} from 'models'; \nimport {autoinject} from 'aurelia-framework'; \n\n@autoinject \nexport class PersonListView { \n\n  constructor(private personService: PersonService) { \n  } \n\n  getPeople(){ \n    return this.personService.getAll(); \n  } \n} \n\n```", "```js\nimport {PersonService} from 'app-services'; \n\nexport class PersonListView { \n  static inject() { return [PersonService]; } \n\n  constructor(personService) { \n    this.personService = personService; \n  } \n\n  getPeople() { \n    return this.personService.getAll(); \n  } \n} \n\n```", "```js\nlet childContainer = container.createChild(); \n\n```", "```js\nlet personService = container.get(PersonService); \n\n```", "```js\ncontainer.registerSingleton(key: any, fn?: Function): void \n\n```", "```js\ncontainer.registerTransient(key: any, fn?: Function): void \n\n```", "```js\ncontainer.registerInstance(key: any, instance?: any): void \n\n```", "```js\ncontainer.registerHandler(key: any, \n  (container?: Container, key?: any, resolver?: Resolver) => any): void \n\n```", "```js\ncontainer.registerResolver(key: any, resolver: Resolver): void \n\n```", "```js\ncontainer.autoRegister(key: any, fn?: Function): Resolver \n\n```", "```js\nimport {transient} from 'aurelia-framework'; \n\n@transient() \nexport class MyModel {} \n\n```", "```js\nimport {singleton} from 'aurelia-framework'; \n\n@singleton(true) \nexport class MyModel {} \n\n```", "```js\nregisterResolver(container: Container, key: any, fn: Function): Resolver \n\n```", "```js\nregisterResolver(container, key, fn) { \n  return container.registerTransient(key, fn); \n} \n\n```", "```js\nimport {Lazy, inject} from 'aurelia-dependency-injection'; \nimport {PersonService} from 'person-service'; \n\n@inject(Lazy.of(PersonService)) \nExport class PersonListView { \n  constructor(personServiceAccessor) { \n    this.personServiceAccessor = personServiceAccessor; \n  } \n\n  getPeople() { \n    return this.personServiceAccessor().getAll(); \n  } \n} \n\n```", "```js\nimport {All, inject} from 'aurelia-dependency-injection'; \nimport {PersonValidator} from 'person-validator'; \n\n@inject(All.of(PersonValidator)) \nExport class PersonForm { \n  constructor(validators) { \n    this.validators = validators; \n  } \n\n  validate() { \n    for (let i = 0; i < this.validators.length; ++i) { \n      this.validators[i].validate(); \n    } \n  } \n} \n\n```", "```js\nimport {Optional, inject} from 'aurelia-dependency-injection'; \nimport {PersonService} from 'person-service'; \n\n@inject(Optional.of(PersonService, false)) \nExport class PersonListView { \n  constructor(personService) { \n    this.personService = personService; \n  } \n\n  getPeople() { \n    return this.personService ? this.personService.getAll() : []; \n  } \n} \n\n```", "```js\nimport {Parent, inject} from 'aurelia-dependency-injection'; \nimport {PersonService} from 'person-service'; \n\n@inject(Parent.of(PersonService)) \nExport class PersonListView { \n  constructor(personService) { \n    this.personService = personService; \n  } \n} \n\n```", "```js\nimport {Factory, inject} from 'aurelia-dependency-injection'; \nimport {AddressService} from 'address-service'; \n\n@inject(AddressService) \nclass Person { \n  constructor(addressService, address) { \n    this.addressService = addressService; \n    this.address = address; \n  } \n} \n\n@inject(Factory.of(Person)) \nexport class PersonListView { \n  constructor(personFactory) { \n    this.personFactory = personFactory; \n  } \n\n  createPerson(address) { \n    return this.personFactory(address); \n  } \n} \n\n```", "```js\nimport {NewInstance, inject} from 'aurelia-dependency-injection'; \nimport {PersonService} from 'person-service'; \n\n@inject(NewInstance.of(PersonService)) \nExport class PersonListView { \n  constructor(personService) { \n    this.personService = personService; \n  } \n} \n\n```", "```js\nexport function configure(aurelia) { \n  aurelia.use \n    .standardConfiguration() \n    .developmentLogging() \n    .plugin('our-plugin', config => { config.debug = true; }); \n  aurelia.start().then(() => aurelia.setRoot()); \n} \n\n```", "```js\nexport function configure(aurelia, callback) { \n  let config = { debug: false }; \n  if (typeof callback === 'function') { \n    callback(config); \n  } \n  aurelia.container.registerInstance(OurPluginConfig, config); \n} \n\n```", "```js\nexport function configure(aurelia) { \n  aurelia.globalResources('./my-component'); \n} \n\n```", "```js\nexport function configure(aurelia) { \n  // register some services or resources used by this feature \n} \n\n```", "```js\nexport function configure(aurelia) { \n  aurelia.use \n    .standardConfiguration() \n    .developmentLogging() \n    .feature('my-feature'); \n  aurelia.start().then(() => aurelia.setRoot()); \n} \n\n```", "```js\nimport * as LogManager from 'aurelia-logging'; \nimport {ConsoleAppender} from 'aurelia-logging-console'; \n\nexport function configure(aurelia) { \n  aurelia.use.standardConfiguration(); \n\n  LogManager.addAppender(new ConsoleAppender()); \n  LogManager.setLevel(LogManager.logLevel.info); \n\n  aurelia.start().then(() => aurelia.setRoot()); \n}; \n\n```", "```js\nexport function configure(aurelia) { \n  aurelia.use \n    .standardConfiguration() \n    .developmentLogging(); \n\n  aurelia.start().then(() => aurelia.setRoot()); \n}; \n\n```", "```js\nexport class ConsoleAppender { \n  debug(logger, ...rest) { \n    console.debug(`DEBUG [${logger.id}]`, ...rest); \n  } \n\n  info(logger, ...rest) { \n    console.info(`INFO [${logger.id}]`, ...rest); \n  } \n\n  warn(logger, ...rest) { \n    console.warn(`WARN [${logger.id}]`, ...rest); \n  } \n\n  error(logger, ...rest) { \n    console.error(`ERROR [${logger.id}]`, ...rest); \n  } \n} \n\n```", "```js\nimport {LogManager} from 'aurelia-framework'; \nconst logger = LogManager.getLogger('my-logger'); \n\n```", "```js\nlogger.setLevel(LogManager.logLevel.warn); \n\n```", "```js\nexport class App { \n  configureRouter(config, router) { \n    this.router = router; \n    config.title = 'Learning Aurelia'; \n    config.map([ \n      { route: ['', 'contacts'], name: 'contacts', moduleId: 'contact-list', nav: true, title: 'Contacts' }, \n      { route: 'contacts/:id', name: 'contact-details', moduleId: 'contact-details' }, \n    ]); \n  } \n} \n\n```", "```js\nconfig.map([ \n  { route: '', redirect: 'contacts' }, \n  { route: 'contacts', name: 'contacts', moduleId: 'contact-list', nav: true, title: 'Contacts' }, \n  { route: 'contacts/:id', name: 'contact-details', moduleId: 'contact-details' }, \n]); \n\n```", "```js\n{ \n  route: 'contacts/:id', name: 'contact-details',  \n  navigationStrategy: instruction => { \n    instruction.config.moduleId = 'contact-details'; \n  } \n} \n\n```", "```js\n<template> \n  <require from=\"app.css\"></require> \n  <nav class=\"navbar navbar-default navbar-fixed-top\" role=\"navigation\"> \n    <div class=\"navbar-header\"> \n      <button type=\"button\" class=\"navbar-toggle\" data-toggle=\"collapse\" \n              data-target=\"#skeleton-navigation-navbar-collapse\"> \n        <span class=\"sr-only\">Toggle Navigation</span> \n      </button> \n      <a class=\"navbar-brand\" href=\"#\"> \n        <i class=\"fa fa-home\"></i> \n        <span>${router.title}</span> \n      </a> \n    </div> \n\n    <div class=\"collapse navbar-collapse\" id=\"skeleton-navigation-navbar-collapse\"> \n      <ul class=\"nav navbar-nav\"> \n        <li repeat.for=\"row of router.navigation\" class=\"${row.isActive ? 'active' : ''}\"> \n          <a data-toggle=\"collapse\" data-target=\"#skeleton-navigation-navbar-collapse.in\" href.bind=\"row.href\"> \n            ${row.title} \n          </a> \n        </li> \n      </ul> \n\n      <ul class=\"nav navbar-nav navbar-right\"> \n        <li class=\"loader\" if.bind=\"router.isNavigating\"> \n          <i class=\"fa fa-spinner fa-spin fa-2x\"></i> \n        </li> \n      </ul> \n    </div> \n  </nav> \n  <div class=\"page-host\"> \n    <router-view></router-view> \n  </div> \n</template> \n\n```", "```js\n> npm install bootstrap --save\n\n```", "```js\n<!DOCTYPE html> \n<html> \n  <head> \n    <title>Learning Aurelia</title> \n    <link href=\"node_modules/bootstrap/dist/css/bootstrap.min.css\" rel=\"stylesheet\"> \n  </head> \n  <!-- Omitted snippet... --> \n</html> \n\n```", "```js\n.page-host { \n  position: absolute; \n  left: 0; \n  right: 0; \n  top: 50px; \n  bottom: 0; \n  overflow-x: hidden; \n  overflow-y: auto; \n} \n\n```", "```js\n<template> \n<h1>Contacts</h1> \n</template> \n\n```", "```js\nexport class ContactList {} \n\n```", "```js\nimport {inject} from 'aurelia-framework'; \nimport {Redirect} from 'aurelia-router'; \nimport {ContactService} from 'app-services'; \n\n@inject(ContactService) \nexport class ContactDetails { \n  constructor(contactService) { \n    this.contactService = contactService; \n  } \n\n  canActivate(params) { \n    return this.contactService.getById(params.id) \n      .then(contact => { this.contact = contact; }) \n      .catch(e => new Redirect('error')); \n  } \n} \n\n```", "```js\n<template> \n  <h1>Something is broken...</h1> \n  <p>The page cannot be found.</p> \n</template> \n\n```", "```js\nexport class NotFound {} \n\n```", "```js\nexport class App { \n  configureRouter(config, router) { \n    this.router = router; \n    config.title = 'Learning Aurelia';  \n    config.map([ /* omitted for brevity */ ]); \n    config.mapUnknownRoutes('not-found'); \n  } \n} \n\n```", "```js\nexport class App { \n  configureRouter(config, router) { \n    this.router = router; \n    config.title = 'Learning Aurelia'; \n    config.mapUnknownRoutes(instruction => getComponentForRoute(instruction.fragment)); \n  } \n} \n\n```", "```js\nimport {AuthenticatedStep} from 'authenticated-step'; \n\nexport class App { \n  configureRouter(config, router) { \n    config.title = 'Aurelia'; \n    config.addPipelineStep('authorize', AuthenticatedStep); \n    config.map([ \n      { route: 'login', name: 'login', moduleId: 'login', title: 'Login' }, \n      { route: 'management', name: 'management', moduleId: 'management',  \n        settings: { secured: true } }, \n    ]); \n    this.router = router; \n  } \n} \n\n```", "```js\nimport {inject} from 'aurelia-framework'; \nimport {Redirect} from 'aurelia-router'; \nimport {User} from 'user'; \n\n@inject(User) \nexport class AuthenticatedStep { \n  constructor(user) { \n    this.user = user; \n  } \n\n  run(instruction, next) { \n    let isRouteSecured = instruction.getAllInstructons().some(i => i.config.settings.secured); \n      if (isRouteSecured && !this.user.isAuthenticated) { \n      return next.cancel(new Redirect('login')); \n    } \n    return next(); \n  } \n} \n\n```", "```js\n<template> \n  <require from=\"nav-bar.html\"></require> \n  <require from=\"bootstrap/css/bootstrap.css\"></require> \n\n  <nav-bar router.bind=\"router\"></nav-bar> \n\n  <div class=\"page-host\"> \n    <router-view name=\"header\"></router-view> \n    <router-view name=\"content\"></router-view> \n  </div> \n</template> \n\n```", "```js\nexport class App { \n  configureRouter(config, router) { \n    config.title = 'Learning Aurelia'; \n    config.map([ \n      { \n        route: ['', 'page-1'], name: 'page-1', nav: true, title: 'Page 1',  \n        viewPorts: {  \n          header: { moduleId: 'header' },  \n          content: { moduleId: 'page-1' } \n        } \n      }, \n      { \n        route: 'page-2', name: 'page-2', nav: true, title: 'Page 2',  \n        viewPorts: {  \n          header: { moduleId: 'header' },  \n          content: { moduleId: 'page-2' } \n        } \n      }, \n    ]); \n\n    this.router = router; \n  } \n} \n\n```", "```js\n{ \n  route: 'page-2', name: 'page-2', nav: true, title: 'Page 2',  \n  navigationStrategy: instruction => { \n    instruction.config.viewPorts = { \n      header: { moduleId: 'header' },  \n      content: { moduleId: 'page-2' } \n    }; \n  } \n} \n\n```", "```js\nexport class App { \n  configureRouter(config, router) { \n    this.router = router; \n    config.title = 'Aurelia'; \n    config.options.pushState = true; \n    config.options.hashChange = false; \n    config.map([ /* omitted for brevity */ ]); \n  } \n} \n\n```", "```js\nrouter.generate(name: string, params?: any, options?: any): string \n\n```", "```js\nlet url = router.generate('contact-details', { id: 12 }); \n\n```", "```js\nlet url = router.generate('contact-details', { id: 12 }, { absolute: true }); \n\n```", "```js\n<a route-href=\"route: contact-details; params.bind: { id: 12 }\"> \n  Contact #12</a> \n\n```", "```js\n<a route-href=\"route: contact-details; params.bind: { id: contact.id }\"> \n  ${contact.name}</a> \n\n```", "```js\n<q route-href=\"route: quote; attribute: cite\">...</q> \n\n```"]