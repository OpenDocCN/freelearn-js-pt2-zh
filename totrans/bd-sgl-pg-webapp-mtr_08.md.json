["```js\n$ meteor add wizonesolutions:underscore-string\n\n```", "```js\nTemplate.editPost.events({\n  'submit form': function(e, template){\n    e.preventDefault();\n    console.log('Post saved');\n  }\n});\n```", "```js\nTemplate.editPost.events({\n  'submit form': function(e, tmpl){\n    e.preventDefault();\n    var form = e.target,\n        user = Meteor.user();\n```", "```js\n        var slug = _.slugify(form.title.value);\n```", "```js\nPosts.insert({\n            title:          form.title.value,\n            slug:           slug,\n            description:    form.description.value,\n            text:           form.text.value,\n            timeCreated:    moment().unix(),\n            author:         user.profile.name,\n            owner:          user._id\n\n        }, function(error) {\n            if(error) {\n                // display the error to the user\n                alert(error.reason);\n            } else {\n                // Redirect to the post\n                Router.go('Post', {slug: slug});\n            }\n        });\n    }\n});\n```", "```js\nTemplate.editPost.events({\n    'submit form': function(e, tmpl){\n        e.preventDefault();\n        var form = e.target,\n            user = Meteor.user(),\n            _this = this; // we need this to reference the slug in the callback\n\n        // Edit the post\n        if(this._id) {\n\n            Posts.update(this._id, {$set: {\n                title:          form.title.value,\n                description:    form.description.value,\n                text:           form.text.value\n\n            }}, function(error) {\n                if(error) {\n                    // display the error to the user\n                    alert(error.reason);\n                } else {\n                    // Redirect to the post\n                    Router.go('Post', {slug: _this.slug});\n                }\n            });\n\n        // SAVE\n        } else {\n\n            // The insertion process ...\n\n        }\n    }\n});\n```", "```js\n$ meteor remove insecure\n\n```", "```js\nif(Meteor.isServer) {\n\n    Posts.allow({\n        insert: function (userId, doc) {\n            // The user must be logged in, and the document must be owned by the user\n            return userId && doc.owner === userId && Meteor.user().roles.admin;\n        },\n```", "```js\n        update: function (userId, doc, fields, modifier) {\n            // User must be an admin\n            return Meteor.user().roles.admin;\n        },\n        // make sure we only get this field from the documents\n        fetch: ['owner']\n    });\n}\n```", "```js\nif(Meteor.isServer) {\n\n  // Allow rules\n\n  Posts.deny({\n    update: function (userId, docs, fields, modifier) {\n      // Can't change owners, timeCreated and slug\n      return _.contains(fields, 'owner') || _.contains(fields, 'timeCreated') || _.contains(fields, 'slug');\n    }\n  });\n}\n```", "```js\nPosts.update(Posts.findOne()._id, {$set: {'slug':'test'}}); \n\n```", "```js\n    <button type=\"submit\" class=\"save\">{{saveButtonText}}</button>\n    ```", "```js\n    Session.setDefault('saveButton', 'Save Post');\n    Template.editPost.helpers({\n      saveButtonText: function(){\n        return Session.get('saveButton');\n      }\n    });\n    ```", "```js\nMeteor.methods({\n    insertPost: function(postDocument) {\n\n        if(this.isSimulation) {\n            Session.set('saveButton', 'Saving...');\n        }\n    }\n});\n```", "```js\nMeteor.methods({\n  insertPost: function(postDocument) {\n\n    if(this.isSimulation) {\n\n      Session.set('saveButton', 'Saving...');\n\n    } else {\n```", "```js\n       var user = Meteor.user();\n\n       // ensure the user is logged in\n       if (!user)\n       throw new Meteor.Error(401, \"You need to login to write a post\");\n```", "```js\n      if(Posts.findOne({slug: postDocument.slug}))\n      postDocument.slug = postDocument.slug +'-'+ Math.random().toString(36).substring(3);\n```", "```js\n      // add properties on the serverside\n      postDocument.timeCreated = moment().unix();\n      postDocument.author      = user.profile.name;\n      postDocument.owner       = user._id;\n\n      Posts.insert(postDocument);\n```", "```js\n       // this will be received as the second argument of the method callback\n       return postDocument.slug;\n    }\n  }\n});\n```", "```js\nvar slug = _.slugify(form.title.value);\n\nMeteor.call('insertPost', {\n  title:          form.title.value\n  slug:           slug,\n  description:    form.description.value\n  text:           form.text.value,\n\n}, function(error, slug) {\n  Session.set('saveButton', 'Save Post');\n\n  if(error) {\n    return alert(error.reason);\n  }\n\n  // Here we use the (probably changed) slug from the server side method\n  Router.go('Post', {slug: slug});\n});\n```"]