["```js\n<script src=\"img/jasmine.js\"></script>\n<script src=\"img/jasmine-html.js\"></script>\n<script src=\"img/boot.js\"></script>    \n\n<!-- include source files here... -->   \n<script src=\"img/Player.js\"></script>   \n<script src=\"img/Song.js\"></script>    \n<!-- include spec files here... -->   \n<script src=\"img/SpecHelper.js\"></script>   \n<script src=\"img/PlayerSpec.js\"></script>\n```", "```js\nfunction capitalizeName(name){\n  return name.toUpperCase();\n}\n```", "```js\n<script src=\"img/bigfatjavascriptcode.js\"></script> \n<script src=\"img/test.spec.js\"></script> \n```", "```js\nit(\"can handle undefined\", function() {\n  var str= undefined;\n  expect(capitalizeName(str)).toEqual(undefined);\n});\n```", "```js\nfunction capitalizeName(name){\n  if(name){\n    return name.toUpperCase();\n  }\n}\n```", "```js\ndescribe(\"TestStringUtilities\", function() {\n  it(\"converts to capital\", function() {\n    var str = \"albert\";\n    expect(capitalizeName(str)).toEqual(\"ALBERT\");\n  });\n  it(\"can handle undefined\", function() {\n    var str= undefined;\n    expect(capitalizeName(str)).toEqual(undefined);\n  });\n});\n```", "```js\n    var a = { value: 1};\n    var b = { value: 1 };\n\n    expect(a).toEqual(b);  // success, same as == comparison\n    expect(b).toBe(b);     // failure, same as === comparison\n    expect(a).toBe(a);     // success, same as === comparison\n    ```", "```js\n    expect([1, 2, 3]).toContain(3);\n    expect(\"astronomy is a science\").toContain(\"science\");\n    ```", "```js\n    expect(2).toBeGreaterThan(1);\n    expect(1).toBeLessThan(2);\n    expect(\"a\").toBeLessThan(\"b\");\n    ```", "```js\ndescribe(\"mocking configurator\", function() {\n  var configurator = null;\n  var responseJSON = {};\n\n  beforeEach(function() {\n    configurator = {\n      submitPOSTRequest: function(payload) {\n        //This is a mock service that will eventually be replaced \n        //by a real service\n        console.log(payload);\n        return {\"status\": \"200\"};\n      }\n    };\n spyOn(configurator, 'submitPOSTRequest').and.returnValue({\"status\": \"200\"});\n    configurator.submitPOSTRequest({\n      \"port\":\"8000\",\n      \"client-encoding\":\"UTF-8\"\n    });\n  });\n\n  it(\"the spy was called\", function() {\n    expect(configurator.submitPOSTRequest).toHaveBeenCalled();\n  });\n\n  it(\"the arguments of the spy's call are tracked\", function() {\n    expect(configurator.submitPOSTRequest).toHaveBeenCalledWith({\"port\":\"8000\",\"client-encoding\":\"UTF-8\"});\n  });\n});\n```", "```js\ntemp git:(dev_branch) ✗ jshint test.js\ntest.js: line 1, col 1, Use the function form of \"use strict\".\ntest.js: line 4, col 1, 'destructuring expression' is available in ES6 (use esnext option) or Mozilla JS extensions (use moz).\ntest.js: line 44, col 70, 'arrow function syntax (=>)' is only available in ES6 (use esnext option).\ntest.js: line 61, col 33, 'arrow function syntax (=>)' is only available in ES6 (use esnext option).\ntest.js: line 200, col 29, Expected ')' to match '(' from line 200 and instead saw ':'.\ntest.js: line 200, col 29, 'function closure expressions' is only available in Mozilla JavaScript extensions (use moz option).\ntest.js: line 200, col 37, Expected '}' to match '{' from line 36 and instead saw ')'.\ntest.js: line 200, col 39, Expected ')' and instead saw '{'.\ntest.js: line 200, col 40, Missing semicolon.\n```", "```js\nfunction strictFn(){ \n// This line makes EVERYTHING under this strict mode\n'use strict'; \n…\nfunction nestedStrictFn() { \n//Everything in this function is also nested\n…\n} \n}\n```", "```js\ntry {\n  var a = doesnotexist; // throws a runtime exception\n} catch(e) { \n  console.log(e.message);  //handle the exception\n  //prints - \"doesnotexist is not defined\"\n}\n```", "```js\nfunction engageGear(gear){\n  if(gear===\"R\"){ console.log (\"Reversing\");}\n  if(gear===\"D\"){ console.log (\"Driving\");}\n  if(gear===\"N\"){ console.log (\"Neutral/Parking\");}\n throw new Error(\"Invalid Gear State\");\n}\ntry\n{\n  engageGear(\"R\");  //Reversing\n  engageGear(\"P\");  //Invalid Gear State\n}\ncatch(e){\n  console.log(e.message);\n}\n```", "```js\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <title>This test</title>\n  <script type=\"text/javascript\">\n  function engageGear(gear){\n    if(gear===\"R\"){ console.log (\"Reversing\");}\n    if(gear===\"D\"){ console.log (\"Driving\");}\n    if(gear===\"N\"){ console.log (\"Neutral/Parking\");}\n    throw new Error(\"Invalid Gear State\");\n  }\n  try\n  {\n    engageGear(\"R\");  //Reversing\n    engageGear(\"P\");  //Invalid Gear State\n  }\n  catch(e){\n    console.log(e.message);\n  }\n  </script>\n</head>\n<body>\n</body>\n</html>\n```"]