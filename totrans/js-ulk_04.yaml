- en: Chapter 4. HTML5 APIs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。HTML5 API
- en: While the language specification (**ECMA-262**) changes once in a few years,
    the new HTML5 APIs sneak in to the language almost with every browser update.
    The already available APIs are quite numerous. Yet in this chapter, we will focus
    on those that are used to reconsider the entire development process. We'll learn
    how we can benefit from multithreading using web workers, how to build an application
    from reusable independent web components, how to store and search considerably
    a large amount of data in the client side, and how to establish bidirectional
    communication with a server.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管语言规范（**ECMA-262**）每几年变化一次，但新的HTML5 API几乎在每次浏览器更新时都会潜入语言中。已经可用的API数量相当多。然而，在本章中，我们将重点关注那些重新考虑整个开发过程的API。我们将学习如何利用web
    workers进行多线程，如何从可重用的独立web组件构建应用程序，如何在客户端存储和搜索大量数据，以及如何与服务器建立双向通信。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下主题：
- en: Storing data in a web browser
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在web浏览器中存储数据
- en: Boosting performance with JavaScript workers
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用JavaScript workers提高性能
- en: Creating our first web component
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建我们的第一个web组件
- en: Learning to use server-to-browser communication channels
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习使用服务器到浏览器通信通道
- en: Storing data in web-browser
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在web浏览器中存储数据
- en: 'Among the HTML5 features, there are a few intended to store data on the client
    side: Web Storage, IndexedDB, and FileSystem API. We benefit from these technologies
    when the following happens:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在HTML5特性中，有几个是为了在客户端存储数据而设计的：Web存储、IndexedDB和FileSystem API。当以下情况发生时，我们才能从这些技术中受益：
- en: We want to cache client-side data to make them fetch-able without extra HTTP
    requests
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们希望缓存客户端数据，以便在没有额外HTTP请求的情况下进行检索。
- en: We have a significant amount of local data in the web application, and we want
    our application to work offline
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在web应用程序中，我们有大量的本地数据，我们希望我们的应用程序离线工作
- en: Let's take a look at these technologies.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看这些技术。
- en: Web Storage API
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Web存储API
- en: In the past, we only had the mechanism to keep the application state, and it
    was using **HTTP cookies**. Besides unfriendly API, cookies have a few flaws.
    They generally have a maximum size of about 4 KB. So we simply cannot store any
    decent amount of data. Cookies don't really fit when the application state is
    being changed in different tabs. Cookies are vulnerable to **Cross-Site Scripting**
    attacks.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 过去，我们只有保持应用程序状态的机制，而且它是使用**HTTP cookies**。除了不友好的API之外，cookie还有几个缺点。它们的最大大小通常约为4
    KB。所以我们根本不能存储任何像样的数据。当在不同标签页中更改应用程序状态时，cookie并不真正适用。cookie容易受到**跨站脚本攻击**。
- en: 'Now we have an advanced API called **Web Storage**. It provides greater storage
    capacity (5-25 MB depending on the browser) and doesn''t attach any data to the
    HTTP request headers. There two JavaScript built-in objects implementing this
    interface: **localStorage** and **sessionStorage**. The first is used as persistent
    data storage and the second to keep the data during a session.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个高级API，称为**Web存储**。它提供了更大的存储容量（取决于浏览器，5-25 MB）并且不会将任何数据附加到HTTP请求头中。实现此接口的两个JavaScript内置对象是：**localStorage**和**sessionStorage**。第一个用于持久数据存储，第二个用于会话期间保持数据。
- en: 'Storage API is very simple to use, as shown here:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 存储API非常易于使用，如下所示：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Alternatively, we can use getters/setters for convenience, as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，我们可以为了方便使用getters/setters，如下所示：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If we want to iterate through the storage, we can use `storage.length` and
    `storage.key()`:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要遍历存储，我们可以使用`storage.length`和`storage.key()`：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As you can see, the Web Storage API is much more developer-friendly compared
    to cookies. It's also more powerful. One of the most common real-life examples
    where we need storage is the shopping cart. While designing the application, we
    have to keep in mind that a user, while making their choices, often opens pages
    with product details in multiple tabs or windows. So we should take care of storage
    synchronization across all the open pages.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，与cookies相比，Web存储API对开发者更加友好，也更加强大。最常见的实际例子之一是我们需要存储的情况是购物车。在设计应用程序时，我们必须记住，用户在做出选择时通常会在多个标签页或窗口中打开产品详细页。因此，我们必须照顾到所有打开的页面之间的存储同步。
- en: 'Fortunately, whenever we update the localStorage, the `storage` event is fired
    on the window object. So we can subscribe a handler for this event to update the
    shopping cart with the actual data. A simple code illustrating this example may
    look like this:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，无论何时我们更新 localStorage，都会在 window 对象上触发 `storage` 事件。因此，我们可以为这个事件订阅一个处理程序来用实际数据更新购物车。这个例子简单的代码可能看起来像这样：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: To see this in action, we have to open the code HTML in two or more tabs. Now
    when we click the **Add to cart** button, we have a list of the ordered items
    updated in every tab. As you may have probably noticed, we can also clean up the
    cart by clicking the **Reset** button. This calls the `storage.clear` method and
    empties the list. If you want to use sessionStorage here instead of localStorage,
    I have to warn you that this won't work. The sessionStorage is isolated for every
    tab or window, so we cannot communicate across them this way.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 为了看到这个功能实际运行的情况，我们必须在两个或更多标签页中打开代码 HTML。现在，当我们点击**加入购物车**按钮时，每个标签页都会更新已订购商品的列表。正如您可能注意到的，我们还可以通过点击**重置**按钮来清理购物车。这会调用`storage.clear`方法，清空列表。如果您想在这里使用
    sessionStorage 而不是 localStorage，我必须警告您这样做是不行的。sessionStorage 对每个标签页或窗口都是隔离的，所以我们不能用这种方法跨它们进行通信。
- en: 'However, we could have ran this example with sessionStorage if we had the page
    loaded in a different frame, but on the same window though. Following screenshot
    is an example of Shopping cart app in action:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果我们能在不同的框架中加载同一窗口中的页面运行这个例子，那么我们本可以使用 sessionStorage 的。下方的截图是一个购物车应用实际运行的示例：
- en: '![Web Storage API](img/00008.jpeg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![Web Storage API](img/00008.jpeg)'
