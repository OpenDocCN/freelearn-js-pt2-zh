- en: Chapter 6. Testing and Debugging
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。测试与调试
- en: 'As you write JavaScript applications, you will soon realize that having a sound
    testing strategy is indispensable. In fact, not writing enough tests is almost
    always a bad idea. It is essential to cover all the non-trivial functionality
    of your code to make sure of the following points:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 随着你编写JavaScript应用程序，你很快就会意识到拥有一个健全的测试策略是不可或缺的。事实上，编写足够的测试用例几乎总是一个坏主意。确保以下几点非常重要：
- en: The existing code behaves as per the specifications
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现有的代码按照规范运行。
- en: Any new code does not break the behavior defined by the specifications
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何新代码都不会破坏规格定义的行为。
- en: Both these points are very important. Many engineers consider only the first
    point the sole reason to cover your code with enough tests. The most obvious advantage
    of test coverage is to really make sure that the code being pushed to the production
    system is mostly error-free. Writing test cases to smartly cover the maximum functional
    areas of the code generally gives you a good indication about the overall quality
    of the code. There should be no arguments or compromises around this point. It
    is unfortunate though that many production systems are still bereft of adequate
    code coverage. It is very important to build an engineering culture where developers
    think about writing tests as much as they think about writing code.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个点都非常重要。许多工程师认为只有第一个点是覆盖代码足够测试的唯一原因。测试覆盖的最明显优势是确保推送到生产系统的代码基本上是错误免费的。编写测试用例以智能地覆盖代码的最大功能区域通常会给你关于代码整体质量的一个很好的指示。在这个问题上不应该有任何争论或妥协。不幸的是，许多生产系统仍然缺乏足够的代码覆盖。建立一个工程师文化，让开发者在编写代码时思考编写测试用例，这一点非常重要。
- en: The second point is even more important. Legacy systems are usually very difficult
    to manage. When you are working on code written either by someone else or a large
    distributed team, it is fairly easy to introduce bugs and break things. Even the
    best engineers make mistakes. When you are working on a large code base that you
    are unfamiliar with and if there is no sound test coverage to help you, you will
    introduce bugs. As you won't have the confidence in the changes that you are making
    (because there are no test cases to confirm your changes), your code releases
    will be shaky, slow, and obviously full of hidden bugs.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个点甚至更重要。遗留系统通常非常难以管理。当你在别人写的代码或大型分布式团队写的代码上工作时，很容易引入错误和破坏事物。即使是最优秀的工程师也会犯错误。当你在一个你不太熟悉的大的代码库上工作时，如果没有健全的测试覆盖来帮助你，你会引入错误。由于没有测试用例来确认你的更改，你对所做的更改没有信心，你的代码发布将会是颤抖的、缓慢的，显然充满了隐藏的错误。
- en: You will refrain from refactoring or optimizing your code because you won't
    really be sure what changes to the code base would potentially break something
    (again, because there are no test cases to confirm your changes)—all this is a
    vicious circle. It's like a civil engineer saying, "though I have constructed
    this bridge, I have no confidence in the quality of the construction. It may collapse
    immediately or never." Though this may sound like an exaggeration, I have seen
    a lot of high impact production code being pushed with no test coverage. This
    is risky and should be avoided. When you are writing enough test cases to cover
    majority of your functional code and when you make a change to these pieces, you
    immediately realize if there is a problem with this new change. If your changes
    make the test case fail, you realize the problem. If your refactoring breaks the
    test scenario, you realize the problem—all this happens much before the code is
    pushed to production.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 你将避免重构或优化你的代码，因为你其实不确定代码库的哪些更改可能会潜在地破坏某些功能（再次，因为没有测试用例来确认你的更改）——所有这些都是一个恶性的循环。这就像一个土木工程师说，“虽然我已经建造了这座桥，但我对自己建造的质量没有信心。它可能会立即倒塌或永远不会倒塌。”尽管这听起来像是一种夸张，但我见过很多高影响的生产代码在没有测试覆盖的情况下被推送到生产环境中。这是危险的，应该避免。当你编写足够的测试用例来覆盖大部分功能性代码，并对这些代码进行更改时，你会立即意识到是否有新更改的问题。如果你的更改导致测试用例失败，你就会意识到问题。如果你的重构破坏了测试场景，你就会意识到问题——所有这些都发生在代码推送到生产环境之前。
- en: In recent years, ideas such as test-driven development and self-testing code
    are gaining prominence, especially in **agile methodology**. These are fundamentally
    sound ideas and will help you write robust code—code that you are confident of.
    We will discuss all these ideas in this chapter. You will understand how to write
    good test cases in modern JavaScript. We will also look at several tools and methods
    to debug your code. JavaScript has been traditionally a bit difficult to test
    and debug primarily due to lack of tools, but modern tools make both of these
    easy and natural.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 近年来，像测试驱动开发和自测试代码这样的想法越来越流行，尤其是在**敏捷方法论**中。这些从根本上来说是正确的想法，将帮助你编写健壮的代码——你自信的代码。我们将在本章讨论所有这些想法。你将了解如何在现代JavaScript中编写好的测试用例。我们还将查看几种调试代码的工具和方法。JavaScript传统上在测试和调试方面一直有点困难，主要是因为缺乏工具，但现代工具使这两者变得容易和自然。
- en: Unit testing
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单元测试
- en: When we talk about test cases, we mostly mean **unit tests**. It is incorrect
    to assume that the unit that we want to test is always a function. The unit (or
    unit of work) is a logical unit that constitutes a single behavior. This unit
    should be able to be invoked via a public interface and should be testable independently.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们谈论测试用例时，我们大部分时候是指**单元测试**。假设我们要测试的单元始终是一个函数是不正确的。单元（或工作单元）是一个构成单一行为的逻辑单位。这个单元应该能够通过公共接口调用，并且应该能够独立测试。
- en: 'Thus, a unit test performs the following functions:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，单元测试执行以下功能：
- en: It tests a single logical function
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它测试一个单一的逻辑函数
- en: It can be run without a specific order of execution
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以不按照特定的执行顺序运行
- en: It takes care of its own dependencies and mock data
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它处理自己的依赖项和模拟数据
- en: It always returns the same result for the same input
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它总是对相同的输入返回相同的结果
- en: It should be self-explanatory, maintainable, and readable
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它应该是自解释的，可维护的，可读的
- en: Note
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Martin Fowler advocates the **test pyramid** ([http://martinfowler.com/bliki/TestPyramid.html](http://martinfowler.com/bliki/TestPyramid.html))
    strategy to make sure that we have a high number of unit tests to ensure maximum
    code coverage. The test pyramid says that you should write many more low-level
    unit tests than higher level integration and UI tests.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 马丁·福勒提倡使用**测试金字塔**([http://martinfowler.com/bliki/TestPyramid.html](http://martinfowler.com/bliki/TestPyramid.html))策略，以确保我们有大量的单元测试，从而确保最大的代码覆盖率。测试金字塔指出，你应该编写比高级集成和UI测试更多的底层单元测试。
- en: There are two important testing strategies that we will discuss in this chapter.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种重要的测试策略我们将在此章节讨论。
- en: Test-driven development
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试驱动开发
- en: '**Test-driven** **development** (**TDD**) has gained a lot of prominence in
    the last few years. The concept was first proposed as part of the **Extreme Programming**
    methodology. The idea is to have short repetitive development cycles where the
    focus is on writing the test cases first. The cycle looks as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试驱动** **开发**（**TDD**）在过去几年中得到了很多重视。这个概念最初是在**极限编程**方法论中提出的。这个想法是有一个短暂重复的开发周期，重点是先编写测试用例。这个周期如下所示：'
- en: Add a test case as per the specifications for a specific unit of code.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据特定代码单元的规格添加测试用例。
- en: Run the existing suite of test cases to see if the new test case that you wrote
    fails—it should (because there is no code for this unit yet). This step ensures
    that the current test harness works well.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行现有的测试用例套，看看你写的新的测试用例是否会失败——它应该会（因为没有为此单元编写代码）。这一步确保当前的测试框架运行良好。
- en: Write the code that serves mainly to confirm the test case. This code is not
    optimized or refactored or even entirely correct. However, this is fine at the
    moment.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写主要用来确认测试用例的代码。这段代码没有优化或重构，甚至可能不完全正确。然而，此刻这是可以接受的。
- en: Rerun the tests and see if all the test cases pass. After this step, you will
    be confident that the new code is not breaking anything.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新运行测试，看看所有测试用例是否通过。在这个步骤之后，你会自信新代码没有破坏任何东西。
- en: Refactor the code to make sure that you are optimizing the unit and handling
    all corner cases.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重构代码，确保你在优化单元并处理所有边缘情况。
- en: These steps are repeated for all the new code that you add. This is an elegant
    strategy that works really well for the agile methodology. TDD will be successful
    only if the testable units of code are small and confirm only to the test case
    and nothing more. It is important to write small, modular, and precise code units
    that have input and output confirming the test case.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤会为新添加的所有代码重复执行。这是一种非常优雅的策略，非常适合敏捷方法论。TDD只有在可测试的代码单元小且只符合测试用例时才会成功。编写小型的、模块化的、精确的代码单元非常重要，这些单元的输入和输出符合测试用例。
- en: Behavior-driven development
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 行为驱动开发
- en: A very common problem while trying to follow TDD is vocabulary and the definition
    of *correctness*. BDD tries to introduce a *ubiquitous language* while writing
    the test cases when you are following TDD. This language makes sure that both
    the business and engineering teams are talking about the same thing.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在尝试遵循TDD时一个非常常见的问题就是词汇和正确性的定义。BDD试图在遵循TDD时引入一个*普遍的语言*。这种语言确保业务和工程团队都在谈论同一件事。
- en: We will use **Jasmine** as the primary BDD framework and explore various testing
    strategies.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用**Jasmine**作为主要的BDD框架，并探索各种测试策略。
- en: Note
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can install Jasmine by downloading the standalone package from [https://github.com/jasmine/jasmine/releases/download/v2.3.4/jasmine-standalone-2.3.4.zip](https://github.com/jasmine/jasmine/releases/download/v2.3.4/jasmine-standalone-2.3.4.zip).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从[https://github.com/jasmine/jasmine/releases/download/v2.3.4/jasmine-standalone-2.3.4.zip](https://github.com/jasmine/jasmine/releases/download/v2.3.4/jasmine-standalone-2.3.4.zip)下载独立包来安装Jasmine。
- en: 'When you unzip this package, you will have the following directory structure:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 解压此包后，您将拥有以下目录结构：
- en: '![Behavior-driven development](img/00011.jpeg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![行为驱动开发](img/00011.jpeg)'
- en: 'The `lib` directory contains the JavaScript files that you need in your project
    to start writing Jasmine test cases. If you open `SpecRunner.html`, you will find
    the following JavaScript files included in it:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`lib`目录包含了你在项目中开始编写Jasmine测试用例所需的JavaScript文件。如果你打开`SpecRunner.html`，你会发现以下JavaScript文件包含在其中：'
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The first three are Jasmine's own framework files. The next section includes
    the source files that we want to test and the actual test specifications.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 前三项是Jasmine自己的框架文件。下一部分包括我们要测试的源文件和实际的测试规格。
- en: 'Let''s experiment with Jasmine with a very ordinary example. Create a `bigfatjavascriptcode.js`
    file and place it in the `src/` directory. We will test the following function:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用一个非常普通的例子来实验Jasmine。创建一个`bigfatjavascriptcode.js`文件，并将其放在`src/`目录中。我们将测试以下函数：
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This is a simple function that does one single thing. It receives a string and
    returns a capitalized string. We will test various scenarios around this function.
    This is the unit of code that we discussed earlier.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个只做一件事情的简单函数。它接收一个字符串并返回一个首字母大写的字符串。我们将围绕这个函数测试各种场景。这是我们之前讨论过的代码单元。
- en: 'Next, create the test specifications. Create one JavaScript file, `test.spec.js`,
    and place it in the `spec/` directory. The file should contain the following.
    You will need to add the following two lines to `SpecRunner.html`:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建测试规格。创建一个JavaScript文件，`test.spec.js`，并将其放在`spec/`目录中。该文件应包含以下内容。您需要向`SpecRunner.html`中添加以下两行：
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The order of this inclusion does not matter. When we run `SpecRunner.html`,
    you will see something as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这个包含的顺序不影响。当我们运行`SpecRunner.html`时，你会看到如下内容：
- en: '![Behavior-driven development](img/00012.jpeg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![行为驱动开发](img/00012.jpeg)'
- en: 'This is the Jasmine report that shows the details about the number of tests
    that were executed and the count of failures and successes. Now, let''s make the
    test case fail. We want to test a case where an undefined variable is passed to
    the function. Add one more test case as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这是显示执行测试次数和失败和成功计数的Jasmine报告。现在，让我们让测试用例失败。我们想测试一个将未定义变量传递给函数的用例。再添加一个测试用例如下：
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, when you run `SpecRunner.html`, you will see the following result:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当你运行`SpecRunner.html`时，你会看到以下结果：
- en: '![Behavior-driven development](img/00013.jpeg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![行为驱动开发](img/00013.jpeg)'
- en: 'As you can see, the failure is displayed for this test case in a detailed error
    stack. Now, we go about fixing this. In your original JavaScript code, we can
    handle an undefined condition as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，这个测试用例的失败以详细的错误堆栈显示出来。现在，我们来解决这个问题。在你原始的JavaScript代码中，我们可以这样处理一个未定义的条件：
- en: '[PRE4]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'With this change, your test case will pass and you will see the following in
    the Jasmine report:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个改变，你的测试用例将通过，你将在Jasmine报告中看到以下内容：
- en: '![Behavior-driven development](img/00014.jpeg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![行为驱动开发](img/00014.jpeg)'
- en: This is very similar to what a test-driven development would look. You write
    test cases, you then fill in the necessary code to confirm to the specifications,
    and rerun the test suite. Let's understand the structure of the Jasmine tests.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这和测试驱动开发非常相似。你编写测试用例，然后填充必要的代码以符合规格，然后重新运行测试套件。让我们了解Jasmine测试的结构。
- en: 'Our test specification looks as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的测试规格如下：
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `describe("TestStringUtilities"` is a test suite. The name of the test
    suite should describe the unit of code that we are testing—this can be a function
    or group of related functionality. In the specifications, you call the global
    Jasmine `it` function to which you pass the title of the specification and test
    function used by the test case. This function is the actual test case. You can
    catch one or more assertions or the general expectations using the `expect` function.
    When all expectations are `true`, your specification is passed. You can write
    any valid JavaScript code in the `describe` and `it` functions. The values that
    you verify as part of the expectations are matched using a matcher. In our example,
    `toEqual()` is the matcher that matches two values for equality. Jasmine contains
    a rich set of matches to suit most of the common use cases. Some common matchers
    supported by Jasmine are as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`describe("TestStringUtilities"`是一个测试套件。测试套件的名称应该描述我们正在测试的代码单元——这可以是一个函数或一组相关功能。在规格说明中，你调用全局Jasmine
    `it`函数，并向其传递规格的标题和测试函数，该函数用于测试用例。这个函数是实际的测试用例。你可以使用`expect`函数捕获一个或多个断言或一般期望。当所有期望都是`true`时，你的规格说明通过。你可以在`describe`和`it`函数中编写任何有效的JavaScript代码。作为期望值的一部分，我们使用匹配器进行匹配。在我们示例中，`toEqual()`是匹配两个值相等的匹配器。Jasmine包含一组丰富的匹配器，以适应大多数常见用例。Jasmine支持的一些常见匹配器如下：'
- en: '`toBe()`: This matcher checks whether two objects being compared are equal.
    This is the same as the `===` comparison, as shown in the following code:'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`toBe()`：这个匹配器检查两个比较对象是否相等。这和`===`比较一样，如下面的代码所示：'
- en: '[PRE6]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`not`: You can negate a matcher with a `not` prefix. For example, `expect(1).not.toEqual(2);`
    will negate the match made by `toEqual()`.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`not`：你可以用`not`前缀来否定一个匹配器。例如，`expect(1).not.toEqual(2);`将否定`toEqual()`所建立的匹配。'
- en: '`toContain()`: This checks whether an element is part of an array. This is
    not an exact object match as `toBe()`. For example, look at the following code:'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`toContain()`：这检查一个元素是否是数组的一部分。这不同于`toBe()`的精确对象匹配。例如，看看以下代码：'
- en: '[PRE7]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`toBeDefined()` and `toBeUndefined()`: These two matches are handy to check
    whether a variable is undefined (or not).'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`toBeDefined()`和`toBeUndefined()`：这两个匹配器很方便，用于检查变量是否未定义（或不是）。'
- en: '`toBeNull()`: This checks whether a variable''s value is `null`.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`toBeNull()`：这检查变量的值是否为`null`。'
- en: '`toBeGreaterThan()` and `toBeLessThan()`: These matchers perform numeric comparisons
    (they work on strings too):'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`toBeGreaterThan()`和`toBeLessThan()`：这些匹配器执行数值比较（它们也可以用于字符串）：'
- en: '[PRE8]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'One interesting feature of Jasmine is the **spies**. When you are writing a
    large system, it is not possible to make sure that all systems are always available
    and correct. At the same time, you don''t want your unit tests to fail due to
    a dependency that may be broken or unavailable. To simulate a situation where
    all dependencies are available for a unit of code that we want to test, we mock
    these dependencies to always give the response that we expect. Mocking is an important
    aspect of testing and most testing frameworks provide support for the mocking.
    Jasmine allows mocking using a feature called a spy. Jasmine spies essentially
    stub the functions that we may not have ready; at the time of writing the test
    case but as part of the functionality, we need to track that we are executing
    these dependencies and not ignoring them. Consider the following example:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Jasmine的一个有趣特性是**间谍**功能。当你编写一个大型系统时，不可能确保所有系统始终可用且正确。同时，你不想因为一个可能已损坏或不可用的依赖而使单元测试失败。为了模拟一个所有依赖项对我们要测试的代码单元都可用的情况，我们模拟这些依赖项以总是给出我们期望的响应。模拟是测试的一个重要方面，大多数测试框架都提供对模拟的支持。Jasmine通过一个称为间谍的特征允许模拟。Jasmine间谍本质上是我们可能没有准备好的函数的桩；在编写测试用例时，我们需要跟踪我们正在执行这些依赖项，而不是忽略它们。请考虑以下示例：
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In this example, while we are writing this test case, we either don't have the
    real implementation of the `configurator.submitPOSTRequest()` dependency or someone
    is fixing this particular dependency. In any case, we don't have it available.
    For our test to work, we need to mock it. Jasmine spies allow us to replace a
    function with its mock and track its execution.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，当我们编写这个测试用例时，要么我们没有`configurator.submitPOSTRequest()`依赖的实际实现，要么有人正在修复这个特定的依赖。无论如何，我们目前没有可用。为了让我们的测试工作，我们需要模拟它。Jasmine间谍允许我们用模拟函数替换一个函数并追踪其执行。
- en: In this case, we need to ensure that we called the dependency. When the actual
    dependency is ready, we will revisit this test case to make sure that it fits
    the specifications, but at this time, all that we need to ensure is that the dependency
    is called. The Jasmine `tohaveBeenCalled()` function lets us track the execution
    of a function, which may be a mock. We can use `toHaveBeenCalledWith()` that allows
    us to determine if the stub function was called with the correct parameters. There
    are several other interesting scenarios that you can create using Jasmine spies.
    The scope of this chapter won't permit us to cover them all, but I would encourage
    you to discover these areas on your own.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们需要确保我们调用了依赖。当实际的依赖准备就绪时，我们将重新审视这个测试用例，以确保它符合规格，但此时，我们只需要确保依赖被调用即可。Jasmine的`toHaveBeenCalled()`函数让我们能够追踪函数的执行，该函数可能是一个模拟函数。我们可以使用`toHaveBeenCalledWith()`来确定stub函数是否用正确的参数被调用。使用Jasmine间谍，你可以创建几个其他有趣的场景。本章节的范围不允许我们涵盖它们所有，但我鼓励你自己去发现这些领域。
- en: Note
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can refer to the user manual for Jasmine for more information on Jasmine
    spies at [http://jasmine.github.io/2.0/introduction.html](http://jasmine.github.io/2.0/introduction.html).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以参考Jasmine用户手册，了解关于Jasmine间谍的更多信息，链接为：[http://jasmine.github.io/2.0/introduction.html](http://jasmine.github.io/2.0/introduction.html)。
- en: Tip
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Mocha, Chai, and Sinon**'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**Mocha，Chai和Sinon**'
- en: Though Jasmine is the most prominent JavaScript testing framework, **Mocha**
    and **Chai** are gaining prominence in the Node.js environment. Mocha is the testing
    framework used to describe and run test cases. Chai is the assertion library supported
    by Mocha. **Sinon.JS** comes in handy while creating mocks and stubs for your
    tests. We won't discuss these frameworks in this book, but experience on Jasmine
    will be handy if you want to experiment with these frameworks.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Jasmine是最著名的JavaScript测试框架，但在Node.js环境中，**Mocha**和**Chai**越来越受到重视。Mocha是用于描述和运行测试用例的测试框架。Chai是支持Mocha的断言库。**Sinon.JS**在创建测试的模拟和stub时非常有用。本书不会讨论这些框架，但如果你想尝试这些框架，对Jasmine的了解将会有帮助。
- en: JavaScript debugging
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript调试
- en: If you are not a completely new programmer, I am sure you must have spent some
    amount of time debugging your or someone else's code. Debugging is almost like
    an art form. Every language has different methods and challenges around debugging.
    JavaScript has traditionally been a difficult language to debug. I have personally
    spent days and nights of misery trying to debug badly-written JavaScript code
    using `alert()` functions. Fortunately, modern browsers such as Mozilla Firefox
    and Google Chrome have excellent developer tools to help debug JavaScript in the
    browser. There are IDEs like **IntelliJ WebStorm** with great debugging support
    for JavaScript and Node.js. In this chapter, we will focus primarily on Google
    Chrome's built-in developer tool. Firefox also supports the Firebug extension
    and has excellent built-in developer tools, but as they behave more or less the
    same as Google Chrome's **Developer Tools** (**DevTools**), we will discuss common
    debugging approaches that work in both of these tools.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不是一个完全的新程序员，我相信你一定花了一些时间来调试自己的代码或别人的代码。调试几乎像一种艺术形式。每种语言都有不同的调试方法和挑战。JavaScript传统上是一个难以调试的语言。我曾经为了使用`alert()`函数调试糟糕的JavaScript代码而痛苦不堪。幸运的是，现代浏览器如Mozilla
    Firefox和Google Chrome都有出色的开发者工具来帮助调试浏览器中的JavaScript。还有像**IntelliJ WebStorm**这样的IDE，为JavaScript和Node.js提供了出色的调试支持。在本章中，我们将重点介绍Google
    Chrome内置的开发者工具。Firefox也支持Firebug扩展，并具有出色的内置开发者工具，但它们的行为与Google Chrome的**开发者工具**（**DevTools**）大致相同，因此我们将讨论这两种工具都适用的常见调试方法。
- en: Before we talk about the specific debugging techniques, let's understand the
    type of errors that we would be interested in while we try to debug our code.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们讨论具体的调试技术之前，让我们先了解在尝试调试我们的代码时我们可能感兴趣的错误类型。
- en: Syntax errors
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 语法错误
- en: 'When your code has something that does not confirm to the JavaScript language
    grammar, the interpreter rejects this piece of code. These are easy to catch if
    your IDE is helping you with syntax checking. Most modern IDEs help with these
    errors. Earlier, we discussed the usefulness of the tools such as **JSLint** and
    **JSHint** around catching syntax issues with your code. They analyze the code
    and flag errors in the syntax. JSHint output can be very illuminating. For example,
    the following output shows up so many things that we can change in the code. This
    snippet is from one of my existing projects:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的代码有不符合JavaScript语言语法的内容时，解释器会拒绝这部分代码。如果你的IDE支持语法检查，这些错误很容易被捕捉到。大多数现代IDE都能帮助检测这些错误。之前，我们讨论了像**JSLint**和**JSHint**这样的工具有助于捕捉代码中的语法问题。它们分析代码并在语法上标出错误。JSHint的输出可能非常有启发性。例如，以下输出显示了代码中我们可以更改许多内容。以下片段来自我现有项目中的一个：
- en: '[PRE10]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Using strict
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用严格模式
- en: 'We briefly discussed the **strict** mode in earlier chapters. The strict mode
    in JavaScript flags or eliminates some of the JavaScript silent errors. Rather
    than silently failing, the strict mode makes these failures throw errors instead.
    The strict mode also helps in converting mistakes to actual errors. There are
    two ways of enforcing the strict mode. If you want the strict mode for the entire
    script, you can just add the `use strict` statement as the first line of your
    JavaScript program. If you want a specific function to conform with the strict
    mode, you can add the directive as the first line of a function:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在早前的章节中，我们简要讨论了**严格模式**。JavaScript中的严格模式可以标出或消除一些JavaScript的隐式错误。严格模式不会默默失败，而是让这些错误抛出异常。严格模式还能帮助将错误转化为实际的错误。强制严格模式有两种方法。如果你想让整个脚本都使用严格模式，你只需在JavaScript程序的第一行添加`use
    strict`声明。如果你想让某个特定函数遵循严格模式，你可以在函数的第一行添加指令：
- en: '[PRE11]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Runtime exceptions
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行时异常
- en: 'These errors appear when you execute the code and try to refer to an undefined
    variable or process a null. When a runtime exception occurs, any code after that
    particular line (which caused the exception) does not get executed. It is essential
    to handle such exceptional scenarios correctly in the code. While exception handling
    can help prevent crashes, they also aid in debugging. You can wrap the code that
    *may* encounter a runtime exception in a `try{ }` block. When any code in this
    block generates a runtime exception, a corresponding handler captures it. The
    handler is defined by a `catch(exception){}` block. Let''s clarify this using
    an example:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这些错误出现在执行代码时，尝试引用一个未定义的变量或处理一个null。当运行时异常发生时，导致异常的那一行之后的任何代码都不会被执行。在代码中正确处理这种异常情况至关重要。虽然异常处理可以帮助防止程序崩溃，但它也助于调试。你可以将可能遇到运行时异常的代码包裹在一个`try{
    }`块中。当这个块中的任何代码引发运行时异常时，相应的处理程序会捕获它。这个处理程序由一个`catch(exception){}`块定义。让我们通过一个例子来澄清这一点：
- en: '[PRE12]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In this example, the `var a = doesnotexist;` line tries to assign an undefined
    variable, `doesnotexist`, to another variable, `a`. This causes a runtime exception.
    When we wrap this problematic code in the `try{} catch(){}` block and when the
    exception occurs (or is thrown), the execution stops in the `try{}` block and
    goes directly to the `catch() {}` handler. The `catch` handler is responsible
    for handling the exceptional scenario. In this case, we are displaying the error
    message on the console for debugging purposes. You can explicitly throw an exception
    to trigger an unhandled scenario in the code. Consider the following example:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`var a = doesnotexist;`行试图将一个未定义的变量`doesnotexist`赋值给另一个变量`a`。这会导致运行时异常。当我们把这段有问题的代码包裹在`try{}
    catch(){}`块中，当异常发生（或被抛出）时，执行会在`try{}`块中停止，并直接跳到`catch() {}`处理程序。`catch`处理程序负责处理异常情况。在这个例子中，我们在控制台上显示错误消息以供调试。你可以显式地抛出一个异常来触发代码中的一个未处理场景。考虑以下例子：
- en: '[PRE13]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In this example, we are handling valid states of a gear shift (`R`, `N`, and
    `D`), but when we receive an invalid state, we are explicitly throwing an exception
    clearly stating the reason. When we call the function that we think may throw
    an exception, we wrap the code in the `try{}` block and attach a `catch(){}` handler
    with it. When the exception is caught by the `catch()` block, we handle the exceptional
    condition appropriately.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们处理了齿轮换挡的有效状态（`R`、`N`和`D`），但当我们收到一个无效状态时，我们明确地抛出一个异常，清楚地说明原因。当我们调用我们认为是可能抛出异常的函数时，我们将代码包裹在`try{}`块中，并附上一个`catch(){}`处理程序。当异常被`catch()`块捕获时，我们适当地处理异常条件。
- en: Console.log and asserts
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 控制台打印和断言
- en: Displaying the state of execution on the console can be very useful while debugging.
    However, modern developer tools allow you to put breakpoints and halt execution
    to inspect a particular value during runtime. You can quickly detect small issues
    by logging some variable state on the console.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制台上显示执行状态在调试时非常有用。然而，现代开发者工具允许你在运行时设置断点并暂停执行以检查特定值。你可以在控制台上记录一些变量的状态，快速检测小问题。
- en: With these concepts, let's see how we can use Chrome Developer Tools to debug
    JavaScript code.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些概念，让我们看看如何使用Chrome开发者工具来调试JavaScript代码。
- en: Chrome DevTools
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Chrome DevTools
- en: 'You can start Chrome DevTools by navigating to menu | **More tools** | **Developer
    Tools**:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过导航到菜单 | **更多工具** | **开发者工具**来启动Chrome DevTools：
- en: '![Chrome DevTools](img/00015.jpeg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![Chrome DevTools](img/00015.jpeg)'
- en: 'Chrome DevTools opens up on the lower pane of your browser and has a bunch
    of very useful sections:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Chrome DevTools在浏览器的下部面板中打开，并有一组非常有用的部分：
- en: '![Chrome DevTools](img/00016.jpeg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![Chrome DevTools](img/00016.jpeg)'
- en: The **Elements** panel helps you inspect and monitor the DOM tree and associated
    style sheet for each of these components.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**元素**面板帮助你检查和监视每个组件的DOM树和相关样式表。'
- en: The **Network** panel is useful to understand network activity. For example,
    you can monitor the resources being downloaded over the network in real time.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '**网络**面板有助于了解网络活动。例如，你可以实时监视网络上下载的资源。'
- en: 'The most important pane for us is the **Sources** pane. This pane is where
    the JavaScript source and debugger are displayed. Let''s create a sample HTML
    with the following content:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 对我们来说最重要的面板是**源代码**面板。这个面板是显示JavaScript源代码和调试器的部分。让我们创建一个带有以下内容的示例HTML：
- en: '[PRE14]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Save this HTML file and open it in Google Chrome. Open DevTools in the browser
    and you will see the following screen:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 保存这个HTML文件并在Google Chrome中打开它。在浏览器中打开DevTools，你会看到以下屏幕：
- en: '![Chrome DevTools](img/00017.jpeg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![Chrome DevTools](img/00017.jpeg)'
- en: This is the view of the **Sources** panel. You can see the HTML and embedded
    JavaScript source in this panel. You can see the **Console** window as well. You
    can see that the file is executed and output is displayed in the **Console**.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这是**源代码**面板的视图。你可以在这个面板中看到HTML和嵌入的JavaScript源代码。你也可以看到控制台窗口。你可以看到文件被执行并在**控制台**中显示输出。
- en: 'On the right-hand side, you will see the debugger window:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在右侧，你会看到调试器窗口：
- en: '![Chrome DevTools](img/00018.jpeg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![Chrome DevTools](img/00018.jpeg)'
- en: 'In the **Sources** panel, click on the line numbers **8** and **15** to add
    a breakpoint. The breakpoints allow you to stop the execution of the script at
    the specified point:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在**源代码**面板中，点击行号**8**和**15**来添加断点。断点允许你在指定的点停止脚本的执行：
- en: '![Chrome DevTools](img/00019.jpeg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![Chrome DevTools](img/00019.jpeg)'
- en: 'In the debugging pane, you can see all the existing breakpoints:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在调试面板中，你可以看到所有现有的断点：
- en: '![Chrome DevTools](img/00020.jpeg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![Chrome DevTools](img/00020.jpeg)'
- en: 'Now, when you rerun the same page, you will see that the execution stops at
    the debug point. One very useful technique is to inject code during the debugging
    phase. While the debugger is running, you can add code in order to help you understand
    the state of the code better:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当你再次运行同一页面时，你会看到执行停留在调试点。在调试阶段注入代码是一个非常实用的技术。当调试器正在运行时，你可以添加代码以帮助你更好地理解代码的状态：
- en: '![Chrome DevTools](img/00021.jpeg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![Chrome DevTools](img/00021.jpeg)'
- en: 'This window now has all the action. You can see that the execution is paused
    on line **15**. In the debug window, you can see which breakpoint is being triggered.
    You can see the **Call Stack** also. You can resume execution in several ways.
    The debug command window has a bunch of actions:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这个窗口现在有所有的动作。你可以看到执行停在**15**行。在调试窗口中，你可以看到哪个断点被触发。你也可以看到**调用栈**。你有几种方法可以继续执行。调试命令窗口有一组动作：
- en: '![Chrome DevTools](img/00022.jpeg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![Chrome DevTools](img/00022.jpeg)'
- en: 'You can resume execution (which will execute until the next breakpoint) by
    clicking on the ![Chrome DevTools](img/00023.jpeg) button. When you do this, the
    execution continues until the next breakpoint is encountered. In our case, we
    halt at line **8**:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过点击![Chrome DevTools](img/00023.jpeg)按钮来继续执行（这将执行到下一个断点），当你这样做时，执行会继续直到遇到下一个断点。在我们的案例中，我们在第**8**行暂停：
- en: '![Chrome DevTools](img/00024.jpeg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![Chrome DevTools](img/00024.jpeg)'
- en: You can observe that the **Call Stack** window shows you how we arrived at line
    **8**. The **Scope** panel shows the **Local** scope where you can see the variables
    in the scope when the breakpoint was arrived at. You can also step into or step
    over the next function.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以观察到**调用栈**窗口显示了我们如何到达第**8**行。**作用域**面板显示了**局部**作用域，你可以看到在到达断点时的作用域中的变量。你还可以步入或跳过下一个函数。
- en: There are other very useful mechanisms to debug and profile your code using
    Chrome DevTools. I would suggest you to go experiment with the tool and make it
    a part of your regular development flow.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Chrome DevTools还有其他非常实用的机制来调试和分析你的代码。我建议你去尝试这个工具，并使其成为你常规开发流程的一部分。
- en: Summary
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Both the testing and debugging phases are essential to developing robust JavaScript
    code. TDD and BDD are approaches closely associated with the agile methodology
    and are widely embraced by the JavaScript developer community. In this chapter,
    we reviewed the best practices around TDD and usage of Jasmine as the testing
    framework. We saw various methods of debugging JavaScript using Chrome DevTools.
    In the next chapter, we will explore the new and exciting world of ES6, DOM manipulation,
    and cross-browser strategies.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 测试和调试阶段对于开发健壮的JavaScript代码都至关重要。TDD和BDD是与敏捷方法论紧密相关的方法，并被JavaScript开发者社区广泛采用。在本章中，我们回顾了围绕TDD的最佳实践以及使用Jasmine作为测试框架的方法。我们看到了使用Chrome
    DevTools进行各种JavaScript调试的方法。在下一章中，我们将探索ES6、DOM操作和跨浏览器策略这个新奇的世界。
