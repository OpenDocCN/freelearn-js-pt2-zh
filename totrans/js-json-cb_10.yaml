- en: Chapter 10. JSON on Mobile Platforms
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章 JSON在移动平台上的应用
- en: 'Mobile applications today are all the rage—devices like tablets and smart phones
    are outselling PCs in many parts of the world. Powered by platforms such as iOS
    and Android, these devices include APIs for creating and parsing JSON as part
    of the platform, making your life as an application developer a little easier.
    In this chapter are recipes for:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 当今的移动应用程序非常流行——像平板电脑和智能手机这样的设备在世界许多地方都超过了PC的销量。这些设备由iOS和Android等平台提供支持，并包括用于创建和解析JSON的API，作为平台的一部分，使得作为应用程序开发者的你的生活变得稍微容易一些。在本章中，有你需要的食谱：
- en: Parsing JSON on Android
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Android上解析JSON
- en: Generating JSON on Android
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Android上生成JSON
- en: Parsing JSON on iOS in Objective-C
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Objective-C在iOS上解析JSON
- en: Generating JSON on iOS in Objective-C
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Objective-C在iOS上生成JSON
- en: Parsing JSON on iOS using Swift
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Swift在iOS上解析JSON
- en: Generating JSON on iOS using Swift
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Swift在iOS上生成JSON
- en: Parsing JSON using Qt
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Qt解析JSON
- en: Generating JSON using Qt
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Qt生成JSON
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: As we discussed in previous chapters, JSON is an excellent medium to communicate
    with web services and clients, whether the clients are web applications or traditional
    applications. This is especially true for mobile applications, many of which run
    over lower-bandwidth wide area networks, where JSON's brevity in comparison with
    XML makes overall data payloads smaller, and thereby ensuring faster response
    time for remote queries.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前一章中讨论的那样，JSON是一种出色的媒介，用于与Web服务和服务器通信，无论客户端是Web应用程序还是传统应用程序。这对于移动应用程序尤其正确，许多移动应用程序运行在低带宽广域网上，在这种情况下，JSON与XML相比的简洁性使得整体数据负载更小，从而确保远程查询的响应时间更快。
- en: Today's leading mobile platforms are Android and iOS. Android, running a variant
    of Linux, supports software development in Java and includes a JSON processor
    in the `org.json` namespace. iOS, loosely derived from Mach and BSD, supports
    software development using Objective-C, Swift, C, and C++, although for most application
    development, you use Objective-C or Swift, each of which contains a binding to
    the `NSJSONSerialization` class, which implements JSON parsing and JSON serialization.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 当今领先的移动平台是Android和iOS。Android运行Linux的一个变体，支持用Java进行软件开发，并在`org.json`命名空间中包括一个JSON处理器。iOS从Mach和BSD中衍生而来，支持使用Objective-C、Swift、C和C++进行软件开发，尽管对于大多数应用程序开发，你使用Objective-C或Swift，每种语言都包含对`NSJSONSerialization`类的绑定，该类实现JSON解析和JSON序列化。
- en: An additional option for mobile developers is to use a cross-platform toolkit,
    such as Qt, for application development. Qt runs on a variety of platforms, including
    Android, iOS, and BlackBerry. Qt defines the `QJsonDocument` and `QJsonObject`
    classes, which you can use to interconvert between maps and JSON. Qt is an open
    source framework that's been around for many years, and runs not just on mobile
    platforms, but on Mac OS X, Windows, and Linux, as well as many other platforms.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 移动开发者的另一个选择是使用跨平台工具包，如Qt，进行应用程序开发。Qt在多种平台上运行，包括Android、iOS和BlackBerry。Qt定义了`QJsonDocument`和`QJsonObject`类，你可以使用它们来实现映射和JSON之间的相互转换。Qt是一个存在已久的开源框架，不仅运行在移动平台上，还运行在Mac
    OS X、Windows和Linux上，以及其他许多平台。
- en: 'The JSON we''ll discuss in the following sections is similar to what we''ve
    been using in the past chapters and is a document that looks like this:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来要讨论的JSON与前几章使用的类似，并像这样看起来像一个文档：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In the discussions that follow, I assume that you''ve correctly set up the
    software development environment for the platform you''re targeting. Describing
    the process of setting up software environments for Android, iOS, and Qt would
    take more space than this book allows. If you''re interested in developing software
    for a specific mobile platform, you may want to consult the developer resources
    for Android or iOS:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的讨论中，我假设你已经正确地为目标平台设置了软件开发环境。描述为Android、iOS和Qt设置软件环境的流程会比这本书允许的空间要大。如果你对为特定的移动平台开发软件感兴趣，你可能想要查阅Android或iOS的开发者资源：
- en: You can find Apple's developer site for iOS developers at [https://developer.apple.com](https://developer.apple.com).
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以访问苹果公司为iOS开发者提供的开发者网站[https://developer.apple.com](https://developer.apple.com)。
- en: You can find Google's developer site for Android developers at [http://developer.android.com/index.html](http://developer.android.com/index.html).
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以访问谷歌公司为Android开发者提供的开发者网站[http://developer.android.com/index.html](http://developer.android.com/index.html)。
- en: You can find information about Qt at [http://www.qt.io](http://www.qt.io).
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以访问[http://www.qt.io](http://www.qt.io)获取关于Qt的信息。
- en: Parsing JSON on Android
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Android上解析JSON
- en: Android provides the `JSONObject` class, which lets you represent the name-value
    pairs of JSON documents through an interface that's conceptually similar to a
    map, and includes serialization and deserialization through getter and setter
    methods that access the named fields of a JSON object.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Android 提供了 `JSONObject` 类，该类让你通过一个与地图概念上相似的接口来表示 JSON 文档的键值对，并包括通过访问器方法进行序列化和反序列化，这些方法可以访问
    JSON 对象的命名字段。
- en: How to do it…
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到…
- en: 'You begin by initializing `JSONObject` with the JSON that you want to parse
    and then use its various `get` methods to obtain the values of the JSON fields:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你首先通过用你想要解析的 JSON 初始化 `JSONObject`，然后使用其各种 `get` 方法来获取 JSON 字段的值：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How it works…
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The `JSONObject` constructor takes the JSON to parse and provides accessor methods
    to access the fields of the JSON. Here, we use the `getString` and `getDouble`
    accessors to access the `call`, `lat`, and `lng` fields of the JSON respectively.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`JSONObject` 构造函数接收要解析的 JSON，并提供访问器方法来访问 JSON 字段。在这里，我们使用 `getString` 和 `getDouble`
    访问器分别访问 JSON 的 `call`、`lat` 和 `lng` 字段。'
- en: 'The `JSONObject` class defines the following accessors:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`JSONObject` 类定义了以下访问器：'
- en: The `get` method, which returns a subclass of `java.lang.Object` containing
    the value in the named slot.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get` 方法，返回一个子类 `java.lang.Object`，其中包含命名槽中的值。'
- en: The `getBoolean` method, which returns a `Boolean` if the slot contains a `Boolean`.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getBoolean` 方法，如果槽中包含 `Boolean` 类型数据，则返回一个 `Boolean` 类型数据。'
- en: The `getDouble` method, which returns a `double` if the slot contains a `double`.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getDouble` 方法，如果槽中包含 `double` 类型数据，则返回一个 `double` 类型数据。'
- en: The `getInt` method, which returns an `int` if the slot contains an `int`.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getInt` 方法，如果槽中包含 `int` 类型数据，则返回一个 `int` 类型数据。'
- en: The `getJSONArray` method, which returns an instance of `JSONArray`, the JSON
    parsing class that handles arrays, if the slot contains an array.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getJSONArray` 方法，如果槽中包含数组，则返回一个 `JSONArray` 实例，这是一个处理数组的 JSON 解析类。'
- en: The `getJSONObject` method, which returns an instance of `JSONObject` if the
    slot contains another map.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getJSONObject` 方法，如果槽中包含另一个映射，则返回一个 `JSONObject` 实例。'
- en: The `getLong` method, which returns a `long` if the slot contains a `long`.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getLong` 方法，如果槽中包含 `long` 类型数据，则返回一个 `long` 类型数据。'
- en: The `getString` method, which returns a `String` if the slot contains a `String`.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getString` 方法，如果槽中包含 `String` 类型数据，则返回一个 `String` 类型数据。'
- en: The class also defines `has` and `isNull`. These take the name of a slot and
    return `true` if there's a value in the field name, or if there's no field named
    or the value is `null` respectively.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 该类还定义了 `has` 和 `isNull` 方法。这些方法接收一个槽的名字，如果字段中有值，或者没有该字段名或者值为 `null`，则返回 `true`。
- en: '`JSONArray` is similar to `JSONObject`, except that it works with arrays and
    not maps. It has the same getter methods, which take integer indices in the collection,
    returning objects, Booleans, strings, numbers, and so forth.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`JSONArray` 与 `JSONObject` 类似，只不过它处理数组而不是映射。它有相同的访问器方法，这些方法采用集合中的整数索引，返回对象、布尔值、字符串、数字等等。'
- en: There's more…
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容…
- en: The `JSONObject` class also defines the `keys` method, which returns `Iterator<String>`
    of the keys in the JSON. You can also obtain `JSONArray` of the names in the JSON
    by invoking `names` or the number of key-value pairs in the JSON by invoking `length`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`JSONObject` 类还定义了 `keys` 方法，该方法返回 JSON 中的键的 `Iterator<String>`。你还可以通过调用 `names`
    获得 JSON 中的名称的 `JSONArray`，或者通过调用 `length` 获得 JSON 中的键值对的数量。'
- en: See also
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 也见
- en: For more information about `JSONObject`, see the Android documentation at [http://developer.android.com/reference/org/json/JSONObject.html](http://developer.android.com/reference/org/json/JSONObject.html).
    For more information about `JSONArray`, see [http://developer.android.com/reference/org/json/JSONArray.html](http://developer.android.com/reference/org/json/JSONArray.html).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 `JSONObject` 的更多信息，请参阅 Android 文档中的 [http://developer.android.com/reference/org/json/JSONObject.html](http://developer.android.com/reference/org/json/JSONObject.html)。关于
    `JSONArray` 的更多信息，请参阅 [http://developer.android.com/reference/org/json/JSONArray.html](http://developer.android.com/reference/org/json/JSONArray.html)。
- en: Generating JSON on Android
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Android 上生成 JSON
- en: '`JSONObject` also supports setter methods to initialize data in a JSON map.
    With these methods, you can assign data to a JSON object and then get the JSON
    representation by invoking its `toString` method.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`JSONObject` 类还支持设置器方法来初始化 JSON 映射中的数据。利用这些方法，你可以将数据分配给一个 JSON 对象，然后通过调用其 `toString`
    方法来获取 JSON 表示形式。'
- en: How to do it…
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到…
- en: 'Here''s a simple example:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个简单示例：
- en: '[PRE2]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How it works…
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The polymorphic put method can take an integer, long integer, object, Boolean,
    or double, assigning the slot you name the value you specify.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 多态的put方法可以接受整数、长整数、对象、布尔值或双精度浮点数，将你命名的槽分配给你指定的值。
- en: The `JSONObject` class defines the `toString` method, which takes an optional
    number of spaces to indent nested structures for pretty-printed JSON. If you don't
    pass this indent, or pass 0, the implementation encodes the JSON in as compact
    a manner as possible.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`JSONObject`类定义了`toString`方法，它接受一个可选的空格数来缩进嵌套结构以进行美观的JSON打印。如果你不传递这个缩进，或者传递0，实现尽可能地将JSON编码成最紧凑的形式。'
- en: There's more…
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: There's also the `putOpt` method, which takes any subclass of `Object`, and
    puts the value to the name if both the name and value are non-null.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个`putOpt`方法，它接受任何`Object`的子类，如果名称和非空值都不为空，则将值放入名称中。
- en: 'You can assign a slot an array of values by passing `JSONArray` or nest maps
    by passing another `JSONObject` as the value to be set. `JSONArray` defines a
    similar put method, which takes as a first argument the integer index into the
    array, rather than a slot name. For example, with the data object from the previous
    example, I could add an array of measured voltages at a station (maybe from the
    radio''s battery) with the following code:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过传递`JSONArray`或将另一个`JSONObject`作为要设置的值来将槽分配给值数组。`JSONArray`定义了一个类似的put方法，它以数组中的整数索引作为第一个参数，而不是槽名。例如，使用前面示例中的数据对象，我可以使用以下代码添加一个在站点的测量电压数组（也许来自无线电的电池）：
- en: '[PRE3]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You can also put `java.util.Collection` and `java.util.Map` instances directly,
    instead of passing `JSONArray` or `JSONObject` instances. The previous code might
    also be written as:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以直接传递`java.util.Collection`和`java.util.Map`实例，而不是传递`JSONArray`或`JSONObject`实例。之前的代码也可以写成：
- en: '[PRE4]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This makes life a little easier when constructing more complex JSON objects
    because you needn't wrap every Java collection or map in a corresponding JSON
    object.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得在构建更复杂的JSON对象时稍微容易一些，因为你不必将每个Java集合或映射包装在一个相应的JSON对象中。
- en: See also
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: For more information about `JSONObject`, see the Android documentation at [http://developer.android.com/reference/org/json/JSONObject.html](http://developer.android.com/reference/org/json/JSONObject.html).
    For more information about `JSONArray`, see [http://developer.android.com/reference/org/json/JSONArray.html](http://developer.android.com/reference/org/json/JSONArray.html).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 关于`JSONObject`的更多信息，请参阅Android文档中的[http://developer.android.com/reference/org/json/JSONObject.html](http://developer.android.com/reference/org/json/JSONObject.html)。关于`JSONArray`的更多信息，请参阅[http://developer.android.com/reference/org/json/JSONArray.html](http://developer.android.com/reference/org/json/JSONArray.html)。
- en: Parsing JSON on iOS in Objective-C
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在iOS上用Objective-C解析JSON
- en: Objective-C's class libraries define the `NSJSONSerialization` class, which
    can serialize to and from JSON. It converts JSON to `NSDictionary` objects of
    values, with the keys, the names of the slots in the JSON, and the values of their
    JSON. It's available in iOS 5.0 and later.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 对象C的类库定义了`NSJSONSerialization`类，它可以进行JSON的序列化和反序列化。它将JSON转换为`NSDictionary`对象的值，这些对象的键是JSON中的槽名，值是它们的JSON值。它在iOS
    5.0及以后的版本中可用。
- en: How to do it…
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到…
- en: 'Here''s a simple example:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的例子：
- en: '[PRE5]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How it works…
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The `NSJSONSerialization` class has a method, `JSONObjectWithData:options:error`,
    that takes an `NSString`, parsing options, and a place to record errors, and performs
    JSON parsing. It can accept JSON whose top level is an array or dictionary, returning
    an `NSArray` or `NSDictionary` result respectively. All values must be instances
    of `NSString`, `NSNumber`, `NSArray`, `NSDictionary`, or `NSNull` respectively.
    If the top-level object is an array, the method returns `NSArray`; otherwise,
    it returns `NSDictionary`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`NSJSONSerialization`类有一个方法`JSONObjectWithData:options:error`，它接受一个`NSString`、解析选项和一个记录错误的地方，并执行JSON解析。它可以接受顶层为数组或字典的JSON，分别返回`NSArray`或`NSDictionary`结果。所有值必须是`NSString`、`NSNumber`、`NSArray`、`NSDictionary`或`NSNull`的实例。如果顶层对象是数组，该方法返回`NSArray`；否则，它返回`NSDictionary`。'
- en: There's more…
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: By default, the data that this method returns is non-mutable. If you want mutable
    data structures, instead, you can pass the option `NSJSONReadingMutableContainers`.
    To parse top-level fields that are not arrays or dictionaries, pass the option
    `NSJSONReadingAllowFragments`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，此方法返回的数据是不可变的。如果你需要可变的数据结构，你可以传递选项`NSJSONReadingMutableContainers`。要解析不是数组或字典的顶层字段，请传递选项`NSJSONReadingAllowFragments`。
- en: See also
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: Apple's documentation for the class is at [https://developer.apple.com/library/ios/documentation/Foundation/Reference/NSJSONSerialization_Class/index.html](https://developer.apple.com/library/ios/documentation/Foundation/Reference/NSJSONSerialization_Class/index.html).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 关于类的Apple文档位于 [https://developer.apple.com/library/ios/documentation/Foundation/Reference/NSJSONSerialization_Class/index.html](https://developer.apple.com/library/ios/documentation/Foundation/Reference/NSJSONSerialization_Class/index.html)。
- en: Generating JSON on iOS in Objective-C
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Objective-C在iOS上生成JSON
- en: You can also use the `NSJSONSerializer` class to serialize `NSDictionary` or
    `NSArray`; simply use the `dataWithJSONObject` method.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用 `NSJSONSerializer` 类序列化 `NSDictionary` 或 `NSArray`；只需使用 `dataWithJSONObject`
    方法。
- en: How to do it…
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何进行…
- en: 'Here''s a simple example assuming that data is `NSDictionary` you want to convert
    to JSON:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的例子，假设数据是您想要转换为JSON的`NSDictionary`：
- en: '[PRE6]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How it works…
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The `dataWithJSONObject:options:error` method can take `NSArray` or `NSDictionary`
    and returns an `NSData` blob with the encoded JSON of the collection you passed.
    If you pass `kNilOptions`, the JSON will be encoded in a compact manner; for pretty-printed
    JSON, pass the option `NSJSONWritingPrettyPrinted` instead.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`dataWithJSONObject:options:error` 方法可以接受 `NSArray` 或 `NSDictionary` 并返回一个包含您传递的集合编码JSON的
    `NSData` 数据块。如果您传递 `kNilOptions`，JSON将以紧凑的方式编码；要获取格式化的JSON，请改为传递 `NSJSONWritingPrettyPrinted`
    选项。'
- en: See also
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: Apple's documentation for the `NSJSONSerialization` class is at [https://developer.apple.com/library/ios/documentation/Foundation/Reference/NSJSONSerialization_Class/index.html](https://developer.apple.com/library/ios/documentation/Foundation/Reference/NSJSONSerialization_Class/index.html).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 `NSJSONSerialization` 类的Apple文档位于 [https://developer.apple.com/library/ios/documentation/Foundation/Reference/NSJSONSerialization_Class/index.html](https://developer.apple.com/library/ios/documentation/Foundation/Reference/NSJSONSerialization_Class/index.html)。
- en: Parsing JSON on iOS using Swift
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Swift在iOS上解析JSON
- en: The same `NSJSONSerialization` class is available in Swift, Apple's new language
    for iOS development.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 相同的 `NSJSONSerialization` 类在Swift中可用，这是Apple为iOS开发推出的新语言。
- en: How to do it…
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何进行…
- en: 'Here''s an example of how to invoke the `JSONObjectWithData` method of `NSJSONSerialization`
    in Swift:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个如何调用 `NSJSONSerialization` 类的 `JSONObjectWithData` 方法的Swift示例：
- en: '[PRE7]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: How it works…
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Method invocations in Swift look like function invocations, with the arguments
    passed as (optionally named) comma-delimited arguments, similar to how they're
    invoked in C++ or Java. The arguments to `JSONObjectWithData` are identical to
    the method arguments in the Objective-C version.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Swift中的方法调用看起来像函数调用，参数以可选命名的逗号分隔的形式传递，这与C++或Java中的调用类似。`JSONObjectWithData`
    方法的参数与Objective-C版本中的方法参数相同。
- en: Generating JSON on iOS using Swift
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Swift在iOS上生成JSON
- en: Of course, you can invoke the `NSJSONSerialization.dataWithJSONObject` method
    from Swift, too, which returns an `NSData` object that you can then convert to
    a string.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，您也可以从Swift调用 `NSJSONSerialization.dataWithJSONObject` 方法，该方法返回一个 `NSData`
    对象，您可以将其转换为字符串。
- en: How to do it…
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何进行…
- en: 'Here''s a simple example:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的例子：
- en: '[PRE8]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: How it works…
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The method `dataWithJSONObject` operates just as its Objective-C counterpart
    does. Once we receive `NSData` containing the JSON-encoded version of the dictionary,
    we convert it to `NSString` using the `NSString` constructor.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`dataWithJSONObject` 方法的工作方式与其Objective-C对应方法相同。一旦我们收到包含字典JSON编码版本的 `NSData`，我们使用
    `NSString` 构造函数将其转换为 `NSString`。'
- en: Parsing JSON using Qt
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Qt解析JSON
- en: The Qt implementation of JSON parsing is actually quite similar in its interface
    to the Android version. Qt defines the `QJsonObject` and `QJsonArray` classes,
    which can contain JSON maps and JSON arrays respectively. The parsing itself is
    done by the `QJsonDocument` class, which has a static `fromJson` method that accepts
    JSON and performs the necessary parsing.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Qt实现的JSON解析在其接口上实际上与Android版本非常相似。Qt 定义了 `QJsonObject` 和 `QJsonArray` 类，分别可以包含JSON映射和JSON数组。解析本身是由
    `QJsonDocument` 类完成的，该类有一个静态的 `fromJson` 方法，接受JSON并执行必要的解析。
- en: How to do it…
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何进行…
- en: 'Here''s a simple example:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的例子：
- en: '[PRE9]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: How it works…
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'The parsing is two-step: first, the code parses the JSON using `QJsonDocument`
    and then uses the resulting `QJsonObject` to access the data.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 解析是两步操作：首先，代码使用 `QJsonDocument` 解析JSON，然后使用结果的 `QJsonObject` 访问数据。
- en: 'The `QJsonObject` class works as a map of `QJsonValue` objects, each of which
    can be converted to their fundamental types using one of the following methods:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`QJsonObject` 类作为 `QJsonValue` 对象的映射，每个对象都可以使用以下方法之一转换为其基本类型：'
- en: '`toArray`: This method converts to `QJsonArray`'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`toArray`: 这个方法转换为 `QJsonArray`。'
- en: '`toBool`: This method converts to a Boolean'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`toBool`：这个方法转换为布尔值'
- en: '`toDouble`: This method converts to a double'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`toDouble`：这个方法转换为双精度浮点数'
- en: '`toInt`: This method converts to an integer'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`toInt`：这个方法转换为整数'
- en: '`toObject`: This method converts to another `QJsonObject`, letting you nest
    maps of `QJsonObject`'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`toObject`：这个方法转换为另一个`QJsonObject`，让你嵌套`QJsonObject`的映射'
- en: '`toString`: This method converts to `QString`'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`toString`：这个方法转换为`QString`'
- en: There's more…
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容…
- en: You can also iterate over the keys in `QJsonObject` using either Qt's `foreach`
    macro or the `begin`, `constBegin`, and `end` iteration methods. There's also
    the contain method, which takes a name for a slot and returns true if the map
    contains the slot you're looking for.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用Qt的`foreach`宏或者`begin`、`constBegin`和`end`迭代方法遍历`QJsonObject`中的键。此外，还有一个`contain`方法，它接受一个槽的名字，如果映射中包含你寻找的槽，则返回true。
- en: See also
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: See Qt's documentation on JSON parsing at [http://doc.qt.io/qt-5/json.html](http://doc.qt.io/qt-5/json.html).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 参见Qt文档中关于JSON解析的部分：[http://doc.qt.io/qt-5/json.html](http://doc.qt.io/qt-5/json.html)。
- en: Generating JSON using Qt
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Qt生成JSON
- en: The `QJsonDocument` class also has the `toJson` method, which converts the object
    it's referencing to JSON.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`QJsonDocument`类还有一个`toJson`方法，该方法将引用的对象转换为JSON。'
- en: How to do it…
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到…
- en: 'Here''s an example that converts from JSON and back to JSON, pretty-printing
    the JSON along the way:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个示例，它将JSON转换为另一种JSON，并在转换过程中格式化JSON：
- en: '[PRE10]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: How it works…
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The `QJsonDocument` class has a method, `toJson`, which converts the document
    or array it's referencing to JSON. You can ask for a pretty-printed version of
    the JSON by passing `QJsonDocument::Indented`, or a compact version of the JSON
    by passing `QJsonDcoument::Compact`.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`QJsonDocument`类有一个`toJson`方法，该方法将引用的文档或数组转换为JSON。你可以通过传递`QJsonDocument::Indented`来请求格式化后的JSON版本，或者通过传递`QJsonDocument::Compact`来请求紧凑的JSON版本。'
- en: See also
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: For more information on `QJsonDocument`, see the Qt documentation at [http://doc.qt.io/qt-5/qjsondocument.html](http://doc.qt.io/qt-5/qjsondocument.html).
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 关于`QJsonDocument`的更多信息，请参阅Qt文档：[http://doc.qt.io/qt-5/qjsondocument.html](http://doc.qt.io/qt-5/qjsondocument.html)。
