- en: Chapter 4. Ajax Techniques
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章．Ajax技术
- en: One of the core characteristics of making responsive web applications is Ajax.
    Traditionally, in server-side postbacks, whenever a user performs any action,
    the information supplied in the form is sent back to the server and the same page
    loads again, containing all the images, CSS, and JavaScript files loaded again
    on the client side. This approach is quite heavy in terms of the size of the request
    and response being sent from the client and server. Thus, the application becomes
    less responsive and the user has to wait for the page to refresh every time any
    action is taken. In this chapter, we will discuss how to simplify the whole process
    and avoid heavy server-side postbacks through Ajax.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 使网页应用程序具有响应性的核心特征之一就是Ajax。在服务器端回发传统方式中，无论用户执行任何操作，表单中提供的信息都会发送回服务器，并且同一页面会再次加载，包含在客户端重新加载的所有图像、CSS和JavaScript文件。这种方法在客户端和服务器之间发送的请求和响应大小方面相当沉重。因此，应用程序变得不那么响应式，用户每次执行任何操作时都必须等待页面刷新。在本章中，我们将讨论如何通过Ajax简化整个过程，并避免沉重的服务器端回发。
- en: Introducing Ajax
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Ajax
- en: '**Ajax** stands for **Asynchronous JavaScript and XML**; it creates asynchronous
    requests on server without sending and rendering the whole page again on client
    side, whereas it only sends a bit of information that needs to be sent out to
    the server and receives response in a specific format to update a specific section
    or the elements of DOM through JavaScript. This allows developers to develop responsive
    web applications and dynamically update the content of the page without reloading
    it every time for a particular action. For example, in a master-child page relationship,
    the child content is dependent on the parent item selection; and with a classic
    approach, every time the parent item is selected, the page is being posted back
    to the server side, where the server does some backend job to fill the child section
    and returns the HTML code, which is then rendered on the client side. Through
    Ajax, this can be achieved by making an asynchronous request to send the selected
    information and update the selected parts of the page content.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**Ajax**代表**异步JavaScript和XML**；它能在不重新发送和渲染整个页面的情况下，在服务器端创建异步请求，而它只发送需要发送到服务器的少量信息，并以特定格式接收响应，通过JavaScript更新特定部分或DOM元素。这使得开发者能够开发响应式网页应用程序，并动态更新页面内容，而无需每次特定动作时重新加载页面。例如，在主从页面关系中，子内容依赖于父项的选择；而采用传统方法，每次选择父项时，页面都会被发送回服务器端，服务器端执行一些后端任务来填充子部分，并返回HTML代码，然后客户端对其进行渲染。通过Ajax，这可以通过异步请求发送所选信息并更新页面内容的指定部分来实现。'
- en: How Ajax works
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Ajax如何工作
- en: Ajax uses the **XMLHttpRequest** (**XHR**) object to invoke the server-side
    methods asynchronously. XHR is developed by Microsoft, and it was initially provided
    with Internet Explorer 5\. It was used initially by calling an `ActionXObject`
    instance to create an instance; however, with modern versions, every browser supports
    initializing the XHR object through the `XMLHttpRequest` object.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Ajax使用**XMLHttpRequest**（**XHR**）对象异步调用服务器端方法。XHR是由微软开发的，最初在Internet Explorer
    5中提供。最初通过调用`ActionXObject`实例来创建一个实例；然而，在现代版本中，每个浏览器都支持通过`XMLHttpRequest`对象初始化XHR对象。
- en: 'The following diagram shows the architectural view of how Ajax works:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表展示了Ajax工作的架构视图：
- en: '![How Ajax works](img/00030.jpeg)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![Ajax如何工作](img/00030.jpeg)'
- en: Traditionally, when any action is taken from the client side, the entire data
    is sent back to the server and is loaded again on the client side once the response
    is received. Instead of updating the data, which needs to be updated, including
    all the static files such as CSS, JavaScript, and images, it is loaded from the
    server again and rendered on the client side, unless some caching mechanism is
    implemented. With Ajax, we send the data in a JSON string or XML and get the response
    in a JSON, XML, HTML, or any other format, depending on the server. We can also
    use request header, such as `Accept`, when sending the request, so the server
    knows what the client is accepting; and based on the formatter, it can serialize
    the data into a particular format. In ASP.NET MVC 6, there are two formatters
    implemented by default for JSON and XML, which send the data, based on the request
    `Accept` header and serialize the object accordingly. Custom formatters can also
    be implemented on a server level to handle specific scenarios.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，当客户端执行任何操作时，整个数据都会发送回服务器，一旦收到响应，数据会在客户端重新加载。除非实现了某种缓存机制，否则需要更新的数据（包括所有静态文件，如CSS、JavaScript和图片）会从服务器重新加载并在客户端呈现，而不是更新实际需要更新的数据。使用Ajax，我们可以以JSON字符串或XML的形式发送数据，并根据服务器返回JSON、XML、HTML或其他格式的响应。我们还可以在发送请求时使用请求头，如`Accept`，因此服务器知道客户端接受什么；根据格式化器，它还可以将数据序列化为特定格式。在ASP.NET
    MVC 6中，默认实现了两个格式化器，分别为JSON和XML发送数据，根据请求的`Accept`头序列化对象。还可以在服务器级别实现自定义格式化器来处理特定场景。
- en: Ajax requests using the classic XHR object
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用经典的XHR对象进行Ajax请求
- en: All browsers, including Internet Explorer, Chrome, Firefox, and Safari, provide
    this object that can be used from JavaScript to execute the Ajax requests.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 所有浏览器，包括Internet Explorer、Chrome、Firefox和Safari，都提供这个对象，可以从JavaScript中使用它来执行Ajax请求。
- en: 'In JavaScript, we can initialize the `XMLHttpRequest` object as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，我们可以如下初始化`XMLHttpRequest`对象：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Every request could be a `GET` or `POST` request. Once the response is received
    from server, a few properties get populated and event handlers are invoked, which
    can be configured for the XHR object when making the Ajax request.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 每个请求都可能是`GET`或`POST`请求。一旦从服务器收到响应，一些属性会填充，事件处理程序会被调用，这些事件处理程序在执行Ajax请求时可以配置为XHR对象。
- en: Let's look into the details of what methods, properties, and events the XHR
    object provides.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解XHR对象提供的方法、属性和事件。
- en: XHR methods
  id: totrans-15
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: XHR方法
- en: 'The XHR object provides various methods as follows, but the two most important
    methods to initiate an Ajaxified request are `open()` and `send()`:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: XHR对象提供了各种方法，但启动Ajax化请求最重要的两个方法是`open()`和`send()`：
- en: '**Sending request**:'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**发送请求**：'
- en: Request can either be `GET` or `POST`. When making any request, will we first
    have to invoke the `open` method and specify the HTTP method, such as `GET` or
    `POST`, and the URL of the server. Rest of the parameters, such as `async` bit,
    `user`, and `password`, are optional.
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请求可以是`GET`或`POST`。在执行任何请求时，我们首先必须调用`open`方法并指定HTTP方法，如`GET`或`POST`，以及服务器的URL。其余参数，如`async`位、`user`和`password`，是可选的。
- en: 'The signature of the `open` method is as follows:'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`open`方法的字段如下：'
- en: '[PRE1]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `send` method is used to send the request to the server. This is the actual
    method, which sends the request to the server and it accepts the data in various
    formats.
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`send`方法用于将请求发送到服务器。这是实际的方法，它接受各种格式的数据并向服务器发送请求。'
- en: 'The following table shows the overloaded methods available for the `send` method:'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下表格展示了`send`方法的可重载方法：
- en: '| Methods | Description |'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 方法 | 描述 |'
- en: '| --- | --- |'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `void send()` | This method is used when making the `GET` requests |'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `void send()` | 此方法用于发送`GET`请求 |'
- en: '| `void send (DOMString? Data)` | This method is used when passing the data
    in string |'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `void send (DOMString? Data)` | 当以字符串形式传递数据时使用此方法 |'
- en: '| `void send(Document data)` | This method is used when passing the document
    data |'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `void send(Document data)` | 当传递文档数据时使用此方法 |'
- en: '| `void send(Blob data)` | This method is used to pass the blob data or data
    in binary |'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `void send(Blob data)` | 此方法用于传递blob数据或二进制数据 |'
- en: '| `void send(FormData data)` | This method is used to pass the whole form |'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `void send(FormData data)` | 此方法用于传递整个表单 |'
- en: '**Aborting request**:'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**取消请求**：'
- en: 'There are certain cases in which developers might need to abort the current
    request. This can be done by calling the `abort()` function of the XHR object:'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在某些情况下，开发者可能需要取消当前请求。这可以通过调用XHR对象的`abort()`函数来实现：
- en: '[PRE2]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Setting request headers**:'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设置请求头部**：'
- en: XHR provides several techniques of making an Ajax request. This means that there
    are cases when we need to send data in the JSON, XML, or some custom format, based
    on the server implementation. For example, when working with ASP.NET MVC 6, there
    are two default formatters implemented, JSON and XML, and if you want to implement
    your own custom formatter, this is also possible. When sending data in a specific
    format, we need to tell the format to the server through request headers. This
    helps the server in identifying the formatter that has to be loaded to serialize
    the response and process the request.
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: XHR提供了几种Ajax请求的方法。这意味着在根据服务器实现需要发送JSON、XML或某种自定义格式的数据时，存在一些情况。例如，当与ASP.NET MVC
    6一起工作时，有两种默认格式化器实现，分别是JSON和XML，如果你想要实现自己的自定义格式化器，这也是可能的。当发送特定格式的数据时，我们需要通过请求头部告诉服务器该格式。这有助于服务器识别必须加载以序列化响应和处理请求的格式化器。
- en: 'The following table shows the default headers that can be supplied with the
    Ajax request:'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下表格显示了可以与Ajax请求一起提供的默认头部：
- en: '| Headers | Description |'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 头部 | 描述 |'
- en: '| --- | --- |'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `Cookie` | This header specifies any cookie set in the client side |'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `Cookie` | 此头部指定客户端设置的任何cookie |'
- en: '| `Host` | This header specifies the domain name of the page |'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `Host` | 此头部指定页面的域名 |'
- en: '| `Connection` | This header specifies the type of connection |'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `Connection` | 此头部指定连接的类型 |'
- en: '| `Accept` | This header specifies the content type that the client can handle
    |'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `Accept` | 此头部指定客户端可以处理的内容类型 |'
- en: '| `Accept-charset` | This header specifies the character set that the client
    can display |'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `Accept-charset` | 此头部指定客户端可以显示的字符集 |'
- en: '| `Accept-encoding` | This header specifies the encodings that client can handle
    |'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `Accept-encoding` | 此头部指定客户端可以处理的编码 |'
- en: '| `Accept-language` | This header specifies the preferred natural languages
    accepted as a response |'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `Accept-language` | 此头部指定作为响应接受的首选自然语言 |'
- en: '| `User-Agent` | This header specifies a user agent string |'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `User-Agent` | 此头部指定一个用户代理字符串 |'
- en: '| `Referer` | This header specifies the URL of the page |'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `Referer` | 此头部指定页面的URL |'
- en: 'Through the XHR object, we can set the request headers through the `setRequestHeader()`
    function, as shown in the following code:'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过XHR对象，我们可以使用`setRequestHeader()`函数设置请求头部，如下面的代码所示：
- en: '[PRE3]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Getting response headers**:'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**获取响应头部**：'
- en: 'When the response is returned by the server, we can read the response headers
    by using the following two methods:'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当服务器返回响应时，我们可以使用以下两种方法来读取响应头部：
- en: '[PRE4]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `getAllResponseHeaders()` function returns the list of all the response
    headers, whereas the `getResponseHeader()` function accepts the header name and
    returns the value of the header name supplied.
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`getAllResponseHeaders()`函数返回所有响应头部的列表，而`getResponseHeader()`函数接受头部名称并返回提供的头部名称的值。'
- en: XHR events
  id: totrans-53
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: XHR事件
- en: 'The most useful event handler in the XHR object, which is invoked when the
    value of the `readystate` property is changed, is the `onreadystatechange` event.
    On initiating request, we can associate the function with this event handler and
    read the response:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在XHR对象中最有用的事件处理程序，当`readystate`属性的值发生变化时调用，是`onreadystatechange`事件。在初始化请求时，我们可以将函数与这个事件处理程序关联并读取响应：
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Another core event handler is `ontimeout`, which can be used in conditions
    to handle the request timed-out scenario. When initiating an XHR request, there
    is a `timeout` property through which the timeout can be set in milliseconds,
    and if the request exceeds the timed-out value, the `ontimeout` event handler
    will be invoked. The example, where timeout is set to 5,000 milliseconds, if it
    exceeds the `timeout` property, the `timeout` handler function will be invoked,
    as shown here:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个核心事件处理程序是`ontimeout`，可以在处理请求超时场景时使用。在初始化XHR请求时，有一个`timeout`属性，通过该属性可以将超时设置为毫秒，如果请求超过超时值，将调用`ontimeout`事件处理程序。例如，将超时设置为5,000毫秒，如果超过`timeout`属性，将调用`timeout`处理函数，如下所示：
- en: '[PRE6]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: XHR properties
  id: totrans-58
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: XHR属性
- en: 'The list of properties available for the `XMLHttpRequest` object is as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是为`XMLHttpRequest`对象可用的属性列表：
- en: '**GET request state**:'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GET请求状态**：'
- en: 'This property returns the status information about the response. It is normally
    used to take action based on the request status:'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个属性返回关于响应的状态信息。它通常用于根据请求状态采取行动：
- en: '[PRE7]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The list of statuses with their meaning available for the `readystate` property
    is given in the following table:'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下表格给出了可用于`readystate`属性的状态及其含义的列表：
- en: '| Status value | State | Description |'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 状态值 | 状态 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `0` | `UNSENT` | In this state, the `XMLHttpRequest` object is created, but
    the `open()` method is not called |'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `0` | `UNSENT` | 在此状态下，创建了`XMLHttpRequest`对象，但未调用`open()`方法 |'
- en: '| `1` | `OPENED` | In this state, the `open` method is called |'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `1` | `OPENED` | 在此状态下，调用`open`方法|'
- en: '| `2` | `HEADERS_RECEIVED` | This state occurs once `send()` is called and
    headers are received |'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `2` | `HEADERS_RECEIVED` | 在调用`send()`并接收到头部时发生此状态 |'
- en: '| `3` | `LOADING` | This state occurs when the response is downloading |'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `3` | `LOADING` | 当响应正在下载时发生此状态 |'
- en: '| `4` | `DONE` | This state occurs when the response is complete |'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `4` | `DONE` | 当响应完成时发生此状态|'
- en: '**Get response data**:'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**获取响应数据**：'
- en: 'Response can be retrieved by calling the `response` or `responseText` property.
    The difference between these properties is that the `responseText` property returns
    the response as a string, whereas the `response` property returns the response
    as a `response` object. The `response` object can be a document, blob, or JavaScript
    object:'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以通过调用`response`或`responseText`属性来检索响应。这两个属性的区别在于，`responseText`属性返回响应作为一个字符串，而`response`属性返回响应作为一个`response`对象。`response`对象可以是一个文档、blob或JavaScript对象：
- en: '[PRE8]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**Get response status**:'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**获取响应状态**：'
- en: 'Response status can be retrieved by calling the `status` or `statusText` property.
    The difference between these properties is that the `status` property returns
    the numerical value, for example, `200`, if the request is successfully processed
    by server, whereas the `statusText` property includes the complete text, such
    as `200 OK` and so on:'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以通过调用`status`或`statusText`属性来检索响应状态。这两个属性的区别在于，`status`属性返回数值值，例如，如果服务器成功处理了请求，则返回`200`；而`statusText`属性包括完整的文本，例如`200
    OK`等：
- en: '[PRE9]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Let''s take a look at the following example that makes the form `POST` request
    using the XHR object in ASP.NET MVC 6\. The following form has two fields, **Name**
    and **Description**:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个使用ASP.NET MVC 6中的XHR对象进行表单`POST`请求的例子。以下表单有两个字段，**Name**和**Description**：
- en: '![XHR properties](img/00031.jpeg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![XHR属性](img/00031.jpeg)'
- en: 'Here is the code snippet that sends the request to server side using the XHR
    object. This example sends the data in JSON:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段使用XHR对象将请求发送到服务器端。这个例子发送的是JSON数据：
- en: '[PRE10]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In ASP.NET Core, for JSON and XML, we have to explicitly annotate the complex
    type with the `[FromBody]` attribute. This is because MVC 6 first searches for
    the values in the query string irrespective of its type, whether a complex type
    or a primitive type. For the JSON and XML data, we need to explicitly annotate
    the method''s parameter with the `[FromBody]` attribute so that the data can be
    easily bound without any issue:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在ASP.NET Core中，对于JSON和XML，我们必须显式地为复杂类型添加`[FromBody]`属性。这是因为MVC 6首先在不管它是复杂类型还是基本类型的情况下搜索查询字符串中的值。对于JSON和XML数据，我们需要显式地将方法参数添加`[FromBody]`属性，以便数据可以没有任何问题地轻松绑定：
- en: '[PRE11]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The output will be as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '![XHR properties](img/00032.jpeg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![XHR属性](img/00032.jpeg)'
- en: 'However, there is a library provided by Google, which serializes the form data
    by calling the `serialize()` function. The only difference is setting the request
    header `''Content-Type''` to `''application/x-www-form-urlencoded''`, and adding
    the following script file:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，谷歌提供了一个库，通过调用`serialize()`函数来序列化表单数据。唯一的区别是设置请求头`'Content-Type'`为`'application/x-www-form-urlencoded'`，并添加以下脚本文件：
- en: '[PRE13]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The following code is the revised version of the `submit` function, which serializes
    the form data through the `serialize()` function and sends the data as form-encoded
    values:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码是`submit`函数的修订版，它通过`serialize()`函数序列化表单数据，并将数据作为表单编码值发送：
- en: '[PRE14]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'For the form-encoded values, we will remove the `[FromBody]` attribute. This
    is because the form-encoded values are sent as the name value pairs in the query
    string:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 对于表单编码的值，我们将删除`[FromBody]`属性。这是因为表单编码的值作为查询字符串中的名称值对发送：
- en: '[PRE15]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In the previous versions of ASP.NET Web API, if the `action` method of Web API
    controller contains a complex type, Web API framework automatically bound the
    values from the request body. Whereas with ASP.NET Core, the Web API and MVC have
    become one unified framework, and the model binding is not equivalent to what
    we has in the previous versions of Web API.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在ASP.NET Web API的前几个版本中，如果Web API控制器的`action`方法包含一个复杂类型，Web API框架会自动绑定请求体中的值。而随着ASP.NET
    Core的出现，Web API和MVC已经合并为一个统一的框架，模型绑定不再与我们在Web API前几个版本中的那样相等。
- en: In the preceding examples, we saw how easily we can make a `POST` request and
    send data in JSON and form-encoded values. Now, let's see another example in which
    we will load the partial view based on the JSON response sent from server.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们看到了如何轻松地发送一个`POST`请求并发送JSON和表单编码的值。现在，让我们看一个例子，在这个例子中，我们将根据从服务器发送的JSON响应加载部分视图。
- en: 'The following screenshot is of the ASP.NET page that contains a button to load
    the list of books in a table:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图是包含一个按钮以在表格中加载书籍列表的ASP.NET页面：
- en: '![XHR properties](img/00033.jpeg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![XHR属性](img/00033.jpeg)'
- en: 'Here is the code snippet for the main page:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是主页的代码片段：
- en: '[PRE16]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The following is the partial view that displays the list of books in a table:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个显示书籍列表的表格的部分视图：
- en: '[PRE17]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'So, with this in place, when the user clicks on the `Load` button, the request
    will be made to the server and the ASP.NET MVC controller `Books` action method
    will be invoked, which returns `View` that renders the partial view that will
    be rendered inside the `booksDiv` element on the main page:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，有了这个设置，当用户点击`加载`按钮时，请求将被发送到服务器，ASP.NET MVC控制器`Books`动作方法将被调用，它返回一个`视图`，该视图渲染部分视图，该视图将在主页上的`booksDiv`元素内渲染：
- en: '![XHR properties](img/00034.jpeg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![XHR属性](img/00034.jpeg)'
- en: Making an Ajax request using jQuery
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用jQuery发送Ajax请求
- en: In the previous sections, we discussed how to send an Ajax request using a plain
    `XMLHttpRequest` object, which is available in all browsers. In this section,
    we will see what jQuery offers in making the Ajax request and how to use the HTTP
    `GET` and `POST` requests through the jQuery object.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几节中，我们讨论了如何使用普通的`XMLHttpRequest`对象发送Ajax请求，这在所有浏览器中都是可用的。在本节中，我们将了解jQuery在发送Ajax请求方面提供了什么，以及如何通过jQuery对象使用HTTP
    `GET`和`POST`请求。
- en: jQuery.ajax()
  id: totrans-106
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: jQuery.ajax()
- en: 'This method is used to make both `GET` and `POST` asynchronous requests. The
    following code is the signature of this method, which takes two parameters: `URL`
    and `options`. The `URL` parameter is the actual server URL, whereas `options`
    takes the configure request headers and other properties in a JSON representation:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法用于发送`GET`和`POST`异步请求。以下代码是此方法的签名，它接受两个参数：`URL`和`options`。`URL`参数是实际的服务器URL，而`options`以JSON表示形式传递配置请求头和其他属性：
- en: '[PRE20]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The following example shows how to make an asynchronous request on the MVC
    controller and displays an alert on successful response being returned from server:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例显示了如何对MVC控制器进行异步请求，并在从服务器成功返回响应时显示一个警告框：
- en: '[PRE21]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The `Books` action method returns the ASP.NET MVC view, which passes the list
    of books that will be populated inside the `booksDiv` DOM element:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`Books`动作方法返回ASP.NET MVC视图，其中传递了将在`booksDiv` DOM元素内填充的书籍列表：'
- en: '![jQuery.ajax()](img/00035.jpeg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![jQuery.ajax()](img/00035.jpeg)'
- en: Ajax properties
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Ajax属性
- en: 'The following table shows some core properties that you can specify to configure
    the Ajax request:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格显示了您可以指定的一些核心属性，以配置Ajax请求：
- en: '| Name | Type | Description |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 类型 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `accepts` | `PlainObject` | This property tells the server about the type
    of response that the client will accept. |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| `accepts` | `PlainObject` | 此属性告诉服务器客户端将接受哪种类型的响应。 |'
- en: '| `async` | `Boolean` | By default, this property is `true` (for asynchronous
    request), but it can be set to `false` (synchronous). |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| `async` | `Boolean` | 默认情况下，此属性为`true`（用于异步请求），但它可以设置为`false`（同步）。 |'
- en: '| `cache` | `Boolean` | If this property is set to `false`, force requested
    pages will not be cached by the browser. |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| `cache` | `Boolean` | 如果将此属性设置为`false`，浏览器将不会缓存强制请求的页面。 |'
- en: '| `contents` | `PlainObject` | This property is used to specify regular expressions
    for parsing response. |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| `contents` | `PlainObject` | 此属性用于指定解析响应的正则表达式。 |'
- en: '| `contentType` | `String` or `Boolean` | This property tells the server about
    the type of data passed in the request. The default value is `application/x-www-form-urlencoded;
    charset=UTF-8`. |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '`contentType` | `String` 或 `Boolean` | 这个属性告诉服务器传入请求的数据类型。默认值是`application/x-www-form-urlencoded;
    charset=UTF-8`。|'
- en: '| `crossDomain` | `Boolean` | This property is set to `true` if you want to
    force the cross-domain request. |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '`crossDomain` | `Boolean` | 如果您想强制执行跨域请求，则将此属性设置为`true`。|'
- en: '| `data` | `PlainObject`, `String`, or `Array` | This property can be used
    to pass the data in JSON, XML, or any other format. |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '`data` | `PlainObject`、`String` 或 `Array` | 这个属性可以用来以JSON、XML或其他任何格式传递数据。|'
- en: '| `dataType` | `String` | This property specifies the type of data expecting
    from server. Some core datatypes are XML, JSON, script, and HTML. |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '`dataType` | `String` | 这个属性指定了期望从服务器返回的数据类型。一些核心数据类型包括XML、JSON、脚本和HTML。|'
- en: Pre-filtering Ajax requests
  id: totrans-125
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 预过滤Ajax请求
- en: 'This is a great feature to filter the existing request options and configuration
    attributes before they are sent out. It provides two overloaded methods: one that
    takes a function that injects the `options`, `originalOptions`, and `jqXHR` objects,
    and the other that takes a string where you can filter out the configuration attributes
    for specific requests followed with the function accepting parameters as `options`,
    `originalOptions`, and `jqXHR`. The following code is the signature of both overloaded
    methods:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个很好的功能，可以在发送之前过滤现有的请求选项和配置属性。它提供了两个重载方法：一个接收一个函数，该函数注入`options`、`originalOptions`和`jqXHR`对象，另一个接收一个字符串，您可以在此字符串中过滤出特定请求的配置属性，后面跟着接受`options`、`originalOptions`和`jqXHR`参数的函数。下面是这两个重载方法的签名：
- en: '[PRE22]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The objects in the preceding code are explained as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码中的对象如下解释：
- en: '`options`: These objects are the same as the request options supplied in the
    Ajax request, but they can be overridden and filtered accordingly.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`options`：这些对象与Ajax请求中提供的请求选项相同，但可以被覆盖和相应地过滤。'
- en: '`originalOptions`: These objects provide the actual options being supplied
    in the Ajax request. They can be used to refer and cannot be modified. Any change
    in the configuration can be done using the `options` object.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`originalOptions`：这些对象提供了Ajax请求中实际传递的选项。它们可以用来引用，但不能修改。任何配置的更改都可以通过使用`options`对象来实现。'
- en: '`jqXHR`: This object is equivalent to the `XMLHttpRequest` object in jQuery.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jqXHR`：这个对象与jQuery中的`XMLHttpRequest`对象相当。'
- en: 'Let''s take a look at the following example, which appends the `fromAjax` parameter
    to tell the MVC controller that the request is executed from JavaScript:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下以下示例，该示例通过添加`fromAjax`参数来告诉MVC控制器请求是从JavaScript执行的：
- en: '[PRE23]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The following code is the controller action method that returns the list of
    books if the request is an Ajax request:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码是控制器动作方法，如果请求是Ajax请求，则返回书籍列表：
- en: '[PRE24]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: There are various properties for options available, which you can refer at [http://api.jquery.com](http://api.jquery.com).
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 有关选项的各个属性，您可以在[http://api.jquery.com](http://api.jquery.com)上参考。
- en: Setting default values for all future Ajax requests
  id: totrans-137
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 为所有未来的Ajax请求设置默认值
- en: With the `$.ajax.setup` function, we can set the configuration values for all
    the future requests to be made through the `$.ajax()` or `$.get()` function. This
    can be used to set the default settings before calling the `$.ajax()` function,
    and the `ajax` function will pick the settings defined in the `$.ajaxSetup()`
    function.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`$.ajax.setup`函数，我们可以为通过`$.ajax()`或`$.get()`函数进行的所有未来请求设置配置值。这可以用来在调用`$.ajax()`函数之前设置默认设置，`ajax`函数将选择在`$.ajaxSetup()`函数中定义的设置。
- en: 'The following is the signature to call `$.ajax.setup`:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 调用`$.ajax.setup`的签名如下：
- en: '[PRE25]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The following example sets the default URL for the `ajax` request being made
    through the `$.ajax` function:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的示例设置了通过`$.ajax`函数进行的`ajax`请求的默认URL：
- en: '[PRE26]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Loading data through the get functions in jQuery
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过jQuery的get函数加载数据
- en: The jQuery library provides different functions for retrieving data from server.
    The function, such as `$.get()`, can be used to load the data by using the HTTP
    `GET` request, whereas `$.getJSON()` is specifically used to load the JSON-encoded
    data, and `$.getScript()` is used to load and execute a JavaScript from the server.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery库提供了不同的函数，用于从服务器检索数据。例如`$.get()`函数，可以用来通过HTTP `GET`请求加载数据，而`$.getJSON()`专门用来加载编码为JSON的数据，`$.getScript()`用来加载并执行来自服务器的JavaScript。
- en: Using jQuery.get()
  id: totrans-145
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用 jQuery.get()
- en: The `$.get()` function is a shorthand function of `$.ajax()` and only allows
    the `GET` request. It abstracts most of the configuration values to default values.
    Similar to the `$.ajax()` function, it returns the data to the `callback` function,
    but does not provide an error callback. So, if any error occurred during the request
    processing, it cannot be tracked.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '`$.get()` 函数是 `$.ajax()` 的简写函数，只允许 `GET` 请求。它将大多数配置值抽象为默认值。与 `$.ajax()` 函数类似，它将数据返回给
    `callback` 函数，但不提供错误回调。因此，如果在请求处理过程中发生任何错误，它无法被追踪。'
- en: It takes four parameters, `URL`, `data`, `callback`, and `type`. Where URL is
    the address to which the request is sent, data that takes a string that is sent
    to the server when the request is made, callback refers to the function which
    is executed when the request is succeeded and type denotes the type of data expected
    from the server like XML, JSON and so on.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 它接受四个参数，`URL`、`data`、`callback` 和 `type`。其中 URL 是请求发送到的地址，data 是一个在请求时发送到服务器的字符串，callback
    指的是当请求成功时执行的函数，type 指定了从服务器期望的数据类型，如 XML、JSON 等。
- en: 'The following is the signature of the `$.get()` function:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '`$.get()` 函数的以下是其签名：'
- en: '[PRE27]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Here is the example that loads the books, which contain a `net` string in its
    title:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例加载包含 `net` 字符串在其标题中的书籍：
- en: '[PRE28]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Using jQuery.getJSON()
  id: totrans-152
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用 jQuery.getJSON()
- en: 'The `jQuery.getJSON()` function is used to load JSON from the server. It can
    be used by calling the `$.getJSON()` function:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`jQuery.getJSON()` 函数用于从服务器加载 JSON。可以通过调用 `$.getJSON()` 函数来使用它：'
- en: '[PRE29]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The following is the example that loads the JSON by calling an `action` method,
    which returns the JSON response and displays the book title in the `booksDiv`
    element:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例通过调用一个 `action` 方法来加载 JSON，该方法返回 JSON 响应并在 `booksDiv` 元素中显示书名：
- en: '[PRE30]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The `Action` method returns the JSON response as follows:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '`Action` 方法如下返回 JSON 响应：'
- en: '[PRE31]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'On the page, the book titles will be rendered as shown in the following screenshot:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 页面上的书籍标题将按如下截图所示呈现：
- en: '![Using jQuery.getJSON()](img/00036.jpeg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![使用 jQuery.getJSON()](img/00036.jpeg)'
- en: Using jQuery.getScript()
  id: totrans-161
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用 jQuery.getScript()
- en: 'The `jQuery.getScript()` function is a shorthand of `$.ajax()`, and it is specifically
    designed to load the script from the server. The following is the signature of
    the `$.getScript()` function:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '`jQuery.getScript()` 函数是 `$.ajax()` 的简写，专门用于从服务器加载脚本。以下是 `$.getScript()` 函数的签名：'
- en: '[PRE32]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The following example loads the custom `.js` file once the document is loaded:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例在文档加载完成后加载自定义 `.js` 文件：
- en: '[PRE33]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Posting data to server using the post function
  id: totrans-166
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 post 函数 将数据发送到服务器
- en: Similar to the `$.get()` function, jQuery also provides a `$.post()` function,
    which is a shorthand of `$.ajax()`, and is specifically designed to only make
    the HTTP `POST` requests.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `$.get()` 函数类似，jQuery 还提供了一个 `$.post()` 函数，它是 `$.ajax()` 的简写，专门用于仅发送 HTTP
    `POST` 请求。
- en: 'Here is the signature of the `$.post()` function:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 `$.post()` 函数的签名：
- en: '[PRE34]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The following example submits the form data using the `$.post()` function:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例使用 `$.post()` 函数提交表单数据：
- en: '[PRE35]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Similarly, we can pass data in JSON by specifying the type as `json`:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们可以通过指定类型为 `json` 来传递 JSON 数据：
- en: '[PRE38]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Ajax events
  id: totrans-176
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Ajax 事件
- en: Ajax events are categorized into local and global events. Local events can be
    declared when making an Ajax request using the `$.ajax` function. Events such
    as `success` and `error` are termed as local events, whereas global events work
    with every Ajax request executed within the page.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: Ajax 事件分为本地事件和全局事件。当使用 `$.ajax` 函数进行 Ajax 请求时可以声明本地事件，如 `success` 和 `error`
    这样的事件被称为本地事件，而全局事件则与页面中执行的每个 Ajax 请求一起工作。
- en: Local events
  id: totrans-178
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 本地事件
- en: 'The following is the list of local events, and it is specifically related to
    the `$.ajax()` function. Other shorthand functions, such as `$.get()` and `$.post()`,
    do not have these methods available, as each of them have specific values to pass
    the parameters and configuration attributes:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本地事件列表，它与 `$.ajax()` 函数特别相关。其他简写函数，如 `$.get()` 和 `$.post()`，没有这些方法可用，因为每个函数都有特定的参数传递和配置属性值：
- en: '`beforeSend`: This event is triggered before the `ajax` request is being made.'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`beforeSend`：在 `ajax` 请求发送之前触发此事件。'
- en: '`success`: This event occurs when the successful response is being made from
    the server.'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`success`：当从服务器成功响应时发生此事件。'
- en: '`error`: This event occurs when an error is occurred during the `ajax` request.'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`error`：在 `ajax` 请求过程中发生错误时触发此事件。'
- en: '`complete`: This event occurs when the request is completed. It does not check
    whether an error has occurred or the response was successful and executed when
    the request is completed.'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`complete`：当请求完成时发生此事件。它不检查是否发生错误或者响应是否成功，而是在请求完成后执行。'
- en: Global events
  id: totrans-184
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 全局事件
- en: 'The following is the list of global events, and it works with all other shorthand
    functions as well, such as `$.post()`, `$.get()`, and `$.getJSON`:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是全局事件列表，它与其他缩写函数一起工作，例如`$.post()`、`$.get()`和`$.getJSON`：
- en: '`ajaxStart`: This event is used when there is no `ajax` request in the pipeline
    and the first `ajax` request is starting up'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ajaxStart`：当管道中没有`ajax`请求且第一个`ajax`请求正在启动时使用此事件。'
- en: '`ajaxSend`: This event is used when an `ajax` request is sent to the server'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ajaxSend`：当向服务器发送`ajax`请求时使用此事件。'
- en: '`ajaxSuccess`: This event is used when any of the successful response returns
    from the server'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ajaxSuccess`：当服务器返回的任何成功响应时使用此事件。'
- en: '`ajaxError`: When an error occurs for any `ajax` request, this event is fired'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ajaxError`：当任何`ajax`请求发生错误时，此事件将被触发。'
- en: '`ajaxComplete`: This event is used when any of the `ajax` request is completed'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ajaxComplete`：当任何`ajax`请求完成时使用此事件。'
- en: 'The following code is a simple example of ASP.NET that calls the action method,
    `Books`, of `BookController`, which returns the list of books and triggers global
    and local events:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个ASP.NET简单的示例代码，它调用`BookController`的`Books`动作方法，返回书籍列表并触发全局和局部事件：
- en: '[PRE39]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Cross-origin requests
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 跨源请求
- en: '[PRE40]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'On the other hand, with jQuery, cross-origin requests can be made by specifying
    the `dataType` attribute as `jsonp` and `crossDomain` as `true` in the `$.ajax`
    call:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，使用jQuery时，可以通过在`$.ajax`调用中指定`dataType`属性为`jsonp`和`crossDomain`为`true`来发起跨源请求：
- en: '[PRE42]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: CORS
  id: totrans-198
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: CORS
- en: Alternatively, CORS is a more preferred way when making cross-origin requests.
    It is a W3C standard and allows a server to send cross-origin requests from any
    domain. This needs to be enabled on the server side.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，当发起跨源请求时，CORS是更为推荐的方式。它是一个W3C标准，允许服务器从任何域发送跨源请求。这需要在服务器端启用。
- en: 'ASP.NET Core provides an easy way of enabling CORS on the server side, and
    this can be done by adding `Microsoft.AspNet.WebApi.Cors` through `NuGet`, or
    by modifying `project.json` and adding a dependency as follows:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core为在服务器端启用CORS提供了简单的方法，这可以通过通过`NuGet`添加`Microsoft.AspNet.WebApi.Cors`，或者通过修改`project.json`并添加以下依赖项来完成：
- en: '[PRE43]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Enable the CORS service using the `ConfigureServices` method in the `Startup`
    class:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`Startup`类中的`ConfigureServices`方法启用CORS服务：
- en: '[PRE44]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Add the CORS middleware by using the `UseCors()` method in the `Configure`
    method. The `UseCors` method provides two overloaded methods: one that takes the
    CORS policy and other that takes the delegate, which can be used as a builder
    to build policy.'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Configure`方法中使用`UseCors()`方法添加CORS中间件。`UseCors`方法提供两个重载方法：一个接受CORS策略，另一个接受委托，可以作为构建器来构建策略。
- en: Note
  id: totrans-205
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that `UseCors()` should be added before `UseMVC`.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在`UseMVC`之前应添加`UseCors()`。
- en: Through the CORS policy, we can define the allowed origins, headers, and methods.
    The CORS policy can either be defined at the `ConfigureServices` or `Configure`
    method when defining middleware.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 通过CORS策略，我们可以定义允许的源、头和方式。CORS策略可以在定义中间件时的`ConfigureServices`或`Configure`方法中定义。
- en: Specifying the CORS policy at services level
  id: totrans-208
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在服务级别指定CORS策略
- en: 'This section will cover the way of defining the policy at the `ConfigureServices`
    method and referring when adding middleware. The `AddPolicy` method takes two
    parameters: the name of the policy and a `CorsPolicy` object. The `CorsPolicy`
    object allows chaining methods and allows you to define origins, methods, and
    headers using the `WithOrigins`, `WithMethods`, and `WithHeaders` methods.'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将介绍在`ConfigureServices`方法中定义策略并在添加中间件时引用的方法。`AddPolicy`方法有两个参数：策略的名称和一个`CorsPolicy`对象。`CorsPolicy`对象允许链式调用方法，并允许您使用`WithOrigins`、`WithMethods`和`WithHeaders`方法定义源、方法和头。
- en: 'Here is the sample code snippet that allows all origins, methods, and headers.
    So, whatever the request origin (domain) and HTTP methods or request headers are
    passed, the request will be processed:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个允许所有源、方法和头的示例代码片段。所以无论请求的源（域）和HTTP方法或请求头是什么，请求都将被处理：
- en: '[PRE45]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'In the preceding code, `Origins` represents the domain names, `Method` represents
    the HTTP methods, and `Header` represents the HTTP request headers. It can be
    simply used in the `Configure` method as follows:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，`Origins`代表域名，`Method`代表HTTP方法，`Header`代表HTTP请求头。它可以在`Configure`方法中简单使用，如下所示：
- en: '[PRE46]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'We can also define multiple policies, as follows:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以定义多个策略，如下所示：
- en: '[PRE47]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Enable CORS at the Configure method
  id: totrans-216
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在Configure方法上启用CORS
- en: 'Alternatively, we can define the CORS policy on the `Configure` method itself.
    The `UseCors` method has two overloaded methods: one that takes the policy name
    that is already defined in the `ConfigureServices` method, and the other is `CorsPolicyBuilder`
    through which the policy can define directly on the `UseCors` method itself:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，我们可以在`Configure`方法本身定义CORS策略。`UseCors`方法有两个重载方法：一个接受已经在`ConfigureServices`方法中定义的策略名称，另一个是`CorsPolicyBuilder`，通过它可以在`UseCors`方法本身直接定义策略：
- en: '[PRE48]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Defining on the `ConfigureMethod` class enables the CORS policy throughout the
    application. Instead of using the `EnableCors` attribute, we can specifically
    define the policy name per controller, and action level as well, and use the policy
    defined in the `ConfigureServices` method.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在`ConfigureMethod`类上定义CORS策略可以使整个应用程序都应用CORS策略。 instead of using the `EnableCors`
    attribute, we can specifically define the policy name per controller, and action
    level as well, and use the policy defined in the `ConfigureServices` method.
- en: 'Defining through attribute is an alternative, which refers to the policy name
    from the `ConfigureServices` method and ignores the policy defined at the middleware
    level. Here are the ways of enabling CORS at controller, action, and global level:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 通过特性定义是一个替代方案，它从`ConfigureServices`方法中引用策略名称，并忽略中间件级别定义的策略。以下是在控制器、操作和全局级别启用CORS的方法：
- en: 'Enabling CORS at the controller level:'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在控制器级别启用CORS：
- en: 'The following code enables the CORS policy at the MVC-controller level:'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下面的代码在MVC控制器级别启用了CORS策略：
- en: '[PRE49]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Enabling CORS at the action level:'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在操作级别启用CORS：
- en: 'The following code enables the CORS policy at the MVC action method level:'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下面的代码在MVC操作方法级别启用了CORS策略：
- en: '[PRE50]'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Enabling CORS globally:'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 全局启用CORS：
- en: 'Globally, CORS can be enabled by defining at the middleware level, as we have
    seen through the `Configure` method. Otherwise, if it is defined at the `ConfigureServices`
    level, enabling it globally can be achieved by using the `CorsAuthorizationFilterFactory`
    object, as shown here:'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 全局来说，可以通过在中间件级别定义来启用CORS，正如我们在`Configure`方法中看到的那样。否则，如果它是在`ConfigureServices`级别定义的，可以通过使用`CorsAuthorizationFilterFactory`对象在全局启用它，如下所示：
- en: '[PRE51]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Calling WCF services from JavaScript
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从JavaScript调用WCF服务
- en: To consume the WCF service methods from JavaScript, we need to expose them as
    the RESTful service methods that accept and return the data in either JSON or
    XML formats. This helps developers to consume the WCF services as easily as the
    REST services, and use them with the jQuery `$.ajax` or `$.getJSON` (shorthand
    method of `$.ajax`) methods. To expose a WCF service as a REST service, we need
    to annotate the WCF service methods with the `WebGet` or `WebInvoke` attributes.
    The `WebGet` attribute is mostly used when making any HTTP `GET` request, whereas
    `WebInvoke` is used for all HTTP request methods.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 为了从JavaScript调用WCF服务方法，我们需要将它们作为接受和返回JSON或XML格式的RESTful服务方法公开。这有助于开发人员像使用REST服务一样轻松地使用WCF服务，并使用jQuery
    `$.ajax`或`$.getJSON`（`$.ajax`的简写方法）方法。为了将WCF服务公开为REST服务，我们需要使用`WebGet`或`WebInvoke`属性注解WCF服务方法。`WebGet`属性主要用于任何HTTP
    `GET`请求，而`WebInvoke`用于所有HTTP请求方法。
- en: 'The following code shows the representation of using the `WebGet` attribute
    on a WCF operation contract that returns the product based on `productCode` passed
    during the method call:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码展示了在WCF操作合同上使用`WebGet`属性，根据方法调用期间传递的`productCode`返回产品的表示：
- en: '[PRE53]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'We can also represent the same method using `WebInvoke`, as shown in the following
    code:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以使用`WebInvoke`来表示相同的方法，如下面的代码所示：
- en: '[PRE54]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'The following code shows the representation of using `WebInvoke` for the HTTP
    `POST` request:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码展示了使用`WebInvoke`对HTTP `POST`请求的表示：
- en: '[PRE55]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: If you notice, the `POST` method contains both `RequestFormat` and `ResponseFormat`
    attributes that tell the server the type of data provided when making any HTTP
    `POST` request and the response will be returned based on the `ResponseFormat`
    type defined.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你注意到了，`POST`方法包含`RequestFormat`和`ResponseFormat`属性，这两个属性告诉服务器在执行任何HTTP `POST`请求时提供数据的类型以及根据定义的`ResponseFormat`类型返回响应。
- en: 'When working with the RESTful services, make sure that the binding is set to
    `webHttpBinding`, as shown in the following screenshot. Also with the .NET framework
    4 and higher, Microsoft introduced another attribute known as `crossDomainScriptAccessEnabled`,
    which can be set to `true` to deal with cross-origin requests:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 当与RESTful服务一起工作时，请确保绑定设置为`webHttpBinding`，如下面的屏幕截图所示。此外，与.NET框架4及以上版本，微软引入了另一个属性，称为`crossDomainScriptAccessEnabled`，可以设置为`true`以处理跨源请求：
- en: '![Calling WCF services from JavaScript](img/00037.jpeg)'
  id: totrans-241
  prefs: []
  type: TYPE_IMG
  zh: '![从JavaScript调用WCF服务](img/00037.jpeg)'
- en: 'Moreover, in order to enable CORS, you can specify `standardEndpoints`, as
    shown in the following screenshot, under `system.serviceModel`:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，为了启用CORS，你可以在`system.serviceModel`下如下的屏幕截图中指定`standardEndpoints`：
- en: '![Calling WCF services from JavaScript](img/00038.jpeg)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
  zh: '![从JavaScript调用WCF服务](img/00038.jpeg)'
- en: 'Add custom headers as follows. Specifying asterisk (`*`) allows everything,
    whereas for security purpose, origin, headers, and methods can be defined explicitly
    to specific values that are separated by commas:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 如下添加自定义头。指定星号（`*`）允许一切，而出于安全目的，原点、头信息和请求方法可以被明确地定义为用逗号分隔的具体值：
- en: '![Calling WCF services from JavaScript](img/00039.jpeg)'
  id: totrans-245
  prefs: []
  type: TYPE_IMG
  zh: '![从JavaScript调用WCF服务](img/00039.jpeg)'
- en: 'The following table shows the description of each access control keys:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的表格显示了每个访问控制键的描述：
- en: '| Access control key | Description |'
  id: totrans-247
  prefs: []
  type: TYPE_TB
  zh: 访问控制键 | 描述 |
- en: '| --- | --- |'
  id: totrans-248
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `Access-Control-Allow-Origin` | This key is used to allow the client''s domain
    from where the service will be invoked |'
  id: totrans-249
  prefs: []
  type: TYPE_TB
  zh: '`Access-Control-Allow-Origin` | 此键用于允许从何处调用服务的客户端域 |'
- en: '| `Access-Control-Allow-Headers` | This key is used to specify the headers
    permitted when the client is making a request |'
  id: totrans-250
  prefs: []
  type: TYPE_TB
  zh: '`Access-Control-Allow-Headers` | 此键用于指定当客户端发起请求时允许的头信息 |'
- en: '| `Access-Control-Allow-Method` | Using this key, the HTTP methods allowed
    when the client is making a request |'
  id: totrans-251
  prefs: []
  type: TYPE_TB
  zh: '`Access-Control-Allow-Method` | 使用此键，当客户端发起请求时允许的HTTP方法 |'
- en: '| `Access-Control-Max-Age` | This key takes the value in seconds to see how
    long the response to the preflight request can be cached for without sending the
    another preflight request |'
  id: totrans-252
  prefs: []
  type: TYPE_TB
  zh: '`Access-Control-Max-Age` | 此键采用秒为单位值，以查看响应预检请求可以在不发送另一个预检请求的情况下缓存多久 |'
- en: 'To invoke the `SaveProduct` method, we can use the jQuery `$.ajax()` method
    and supply the following parameters, as shown in the following code. If you notice,
    we defined `contentType` as well as `dataType`. The difference is that `contentType`
    is used to tell the server about the type of data client is sending, whereas `dataType`
    is used to let the server know the type of data the client is expecting to receive
    in response. The `dataType` values can be `json`, `jsonp`, `xml`, `html`, or `script`:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 要调用`SaveProduct`方法，我们可以使用jQuery的`$.ajax()`方法，并提供以下参数，如以下代码所示。如果你注意到了，我们还定义了`contentType`以及`dataType`。区别在于`contentType`是用来告诉服务器客户端发送的数据类型的，而`dataType`是用来让服务器知道客户端期望在响应中接收的数据类型的。`dataType`的值可以是`json`、`jsonp`、`xml`、`html`或`script`：
- en: '[PRE56]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: In order to make a call to another domain, we can use `jsonp`, so the server
    wraps the JSON data in a JavaScript function, which is known as a `callback` function,
    and when the response comes back to the client, it will automatically call the
    `success` method. The modified version of the preceding method to handle cross-origin
    request is shown in the following code.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 为了调用另一个域，我们可以使用`jsonp`，所以服务器将JSON数据包裹在一个JavaScript函数中，这被称为一个`callback`函数，当响应返回给客户端时，它会自动调用`success`方法。处理跨源请求的前述方法的修改版本如下所示。
- en: 'In this code, we modified the URL and passed the `callback=?` query string
    as a parameter. Moreover, the `crossDomain` attribute is used to ensure that the
    request will be `crossDomain`. When the server responds, `?` specified in the
    `callback` query and the string will be replaced by the function name, such as
    `json43229182_22822992`, and will call the `success` method:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 在此代码中，我们修改了URL，并把`callback=?`查询字符串作为参数传递。此外，`crossDomain`属性用来确保请求是`crossDomain`。当服务器响应时，`?`在`callback`查询中指定，字符串将由函数名替换，例如`json43229182_22822992`，并将调用`success`方法：
- en: '[PRE57]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Similarly, we can invoke the `GetProduct` method as shown in the following
    code:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们也可以按照如下代码调用`GetProduct`方法：
- en: '[PRE58]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'For cross domain, it can be modified as follows:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 对于跨域，可以按照如下方式修改：
- en: '[PRE59]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Alternatively, for the preceding solution, we can also override the `callback`
    function name in a `jsonp` request, and the value specified in `jsonpCallback`
    will be used instead of `callback=?` passed in a URL. The following code snippet
    calls your local function whose name is specified in the `jsonpCallback` value:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 'Alternatively, for the preceding solution, we can also override the `callback`
    function name in a `jsonp` request, and the value specified in `jsonpCallback`
    will be used instead of `callback=?` passed in a URL. The following code snippet
    calls your local function whose name is specified in the `jsonpCallback` value:'
- en: '[PRE60]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Summary
  id: totrans-264
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we discussed Ajax techniques and concepts of using the `XMLHttpRequest`
    object. We have seen the basic architecture of how the Ajax request is processed
    and what events and methods it provides. Similarly, we also discussed what jQuery
    offers and the extensive library it has for performing different types of the
    HTTP `GET` and `POST` requests. In the next chapter, we will discuss the basics
    of `TypeScript`, and one of the most popular client-side framework, Angular 2\.
    We will also go through developing a simple application using ASP.NET Core MVC
    6 with Angular 2 as a frontend framework and Entity Framework 7 for backend operations.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了Ajax技术以及使用`XMLHttpRequest`对象的概念。我们已经了解了Ajax请求的基本处理架构以及它提供的事件和方法。同样，我们还讨论了jQuery提供了什么以及它拥有的广泛库，用于执行不同类型的HTTP
    `GET`和`POST`请求。在下一章中，我们将讨论`TypeScript`的基础知识，以及最受欢迎的客户端框架之一，Angular 2。我们还将通过使用ASP.NET
    Core MVC 6和Angular 2作为前端框架以及Entity Framework 7进行后端操作来开发一个简单的应用程序。
