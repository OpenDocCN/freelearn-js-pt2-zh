- en: Chapter 2. Ad Hoc Testing and Debugging in JavaScript
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章. JavaScript中的随兴测试和调试
- en: In this chapter, we'll formally move into testing the JavaScript programs that
    we actually create. But before I start, I'd like to brief you on what you can
    expect in this chapter. In this chapter, you will learn about two major ideas
    the first idea being how different browsers can affect JavaScript testing, and
    the second major idea being how you can test your JavaScript program by using
    the alert(). You will also learn how to access the values on a form, manipulate
    the values and finally output the values in a meaningful manner.
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在本章中，我们将正式进入测试我们实际创建的JavaScript程序。但在我开始之前，我想向你简要介绍一下你可以期待在本章中看到的内容。在本章中，你将学习到两个主要概念，第一个概念是不同的浏览器如何影响JavaScript测试，第二个主要概念是你如何通过使用alert()来测试你的JavaScript程序。你还将学习如何访问表单上的值，操作这些值，并最终以有意义的方式输出这些值。
- en: You will also see many of the techniques introduced in the previous chapter
    being used extensively.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 你还将看到前一章中介绍的许多技术被广泛使用。
- en: 'To be more specific, we shall learn about the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 更具体地说，我们将学习以下主题：
- en: The purpose of ad hoc testing
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随兴测试的目的
- en: What happens when your browser encounters an error in JavaScript
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当浏览器遇到JavaScript错误时会发生什么
- en: Browser differences and the need to test in multiple browsers
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浏览器差异及需要在多个浏览器中测试的需求
- en: Common browser messages and what they mean
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 常见的浏览器消息及其含义
- en: How to find out if you are getting the right output and putting the right values
    in the correct places in your code
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何找出你的代码是否得到了正确的输出，以及是否在代码中把正确的值放在了正确的位置
- en: How to access values on a form and how to access other parts of the web page
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何访问表单上的值以及如何访问网页的其他部分
- en: Tips on what to do when your JavaScript program does not give you the expected
    result
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你的JavaScript程序没有给你期望的结果时该怎么办的技巧
- en: What to do if the script does not run
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 脚本如果不运行该怎么办
- en: How to perform a visual inspection
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何进行视觉检查
- en: How to use the `alert()` to test your JavaScript program
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用`alert()`测试你的JavaScript程序
- en: Commenting out parts of your code in order to simplify testing
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了简化测试，注释掉代码的某些部分
- en: Why ad hoc testing isn't always enough
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么随兴测试并不总是足够
- en: So before I move on to the main topics of this chapter, I'll briefly mention
    the two basic ideas that you should understand before moving on to the rest of
    the chapter.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 所以在进入本章的主要内容之前，我会简要提到在继续本章其余内容之前你应该理解的两个基本概念。
- en: The purpose of ad hoc testing—getting the script to run
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 随兴测试的目的——让脚本运行
- en: The first basic idea concerns the purpose of ad hoc testing. The main purpose
    of ad hoc testing is to quickly get your code up and running and then see if there
    are any errors with your code. As mentioned previously, the three different types
    of JavaScript errors entail loading, runtime, and logic errors.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个基本概念涉及随兴测试的目的。随兴测试的主要目的是快速让你的代码运行起来，然后看看你的代码是否有任何错误。如前所述，JavaScript的三种不同错误类型包括加载、运行时和逻辑错误。
- en: The main advantage of ad hoc testing is that it allows you to test your JavaScript
    program without bogging you down. It is meant for those who want to save time,
    especially when testing small pieces of code.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 随兴测试的主要优点是它允许你测试你的JavaScript程序，而不会让你感到困惑。它适用于那些想要节省时间的人，尤其是测试小段代码时。
- en: What happens when the browser encounters an error in JavaScript
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 当浏览器遇到JavaScript错误时会发生什么
- en: Now it's time for the second basic idea. In the previous chapter, I have briefly
    described how a web page is loaded in to the browser and then rendered in the
    web browser, waiting for interaction with the user. I have also mentioned that,
    in general, JavaScript fails silently; it does not explicitly tell or show you
    what errors (if any) have occurred. This happens when your browser does not have
    any form of debugging turned on.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是第二个基本概念的时候了。在前一章中，我已经简要描述了一个网页是如何被加载到浏览器中，然后在网页浏览器中渲染，等待与用户交互。我还提到，通常来说，JavaScript是默默失败的；它不会明确告诉你或显示发生了什么错误（如果有的话）。这是因为你的浏览器没有开启任何形式的调试。
- en: However, modern web browsers feature built-in ways for the browser to tell the
    user that some form of errors have occurred on the web page. This happens when
    you explicitly turn on or install the debugging tools for the web browser. For
    some of the browsers, you will also need to explicitly turn on the error console
    in order to find out what error has occurred.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，现代网络浏览器具有内置的方式，让浏览器告诉用户网页上发生了某种错误。当你明确打开或安装网络浏览器的调试工具时，就会发生这种情况。对于某些浏览器，您还需要明确打开错误控制台，才能找出发生了什么错误。
- en: 'In case you are wondering what you need to do in order to make use of these
    built-in features, here are some simple instructions to help you to get started:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想知道如何利用这些内置功能，以下是一些简单的指导说明，帮助您开始使用：
- en: For Firefox—turn on your web browser and go to **Tools**. Click on **Error Console**.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于Firefox——打开你的网络浏览器，前往**工具**。点击**错误控制台**。
- en: For Internet Explorer—you need to go to **Tools | Internet Options | Advanced**.
    Scroll down to **Browsing** and check **Display a notification about every script
    error**.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于Internet Explorer——你需要前往**工具 | 互联网选项 | 高级**。滚动到底部**浏览**，并检查**显示关于每个脚本错误的通知**。
- en: You now understand the basic ideas about why we perform ad hoc testing. We will
    now move on to a more complex topic—how browser differences can affect your JavaScript
    program.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经理解了为什么我们要进行临时测试的基本概念。接下来，我们将进入一个更复杂的话题——浏览器差异如何影响你的JavaScript程序。
- en: Browser differences and the need to test in multiple browsers
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 浏览器差异及在多个浏览器中进行测试的需要
- en: In general, browsers have different features. The one difference that matters
    the most to us, at least in this book, is the JavaScript engine used by different
    browsers. Different JavaScript engines process JavaScript in different manners.
    This has important implications for us. Certain JavaScript functions or methods
    that are supported by one web browser may not be supported by another.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，浏览器具有不同的功能。对我们来说最重要的区别，至少在这本书中，是不同浏览器使用的JavaScript引擎。不同的JavaScript引擎以不同的方式处理JavaScript。这对我们有很大的影响。一个网络浏览器支持的某些JavaScript函数或方法可能在另一个浏览器上不受支持。
- en: The main essence of JavaScript is that it provides behavior to the web page
    through DOM manipulation; different browsers have different levels of support
    for DOM.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript的主要本质是它通过DOM操作提供网页的行为；不同的浏览器对DOM的支持有不同的级别。
- en: 'We will not attempt to go into a deep discussion about what is supported and
    what is not by various browsers. Instead, we''ll point you to this website: [http://www.quirksmode.org/compatibility.html](http://www.quirksmode.org/compatibility.html).'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会尝试深入讨论各种浏览器支持和不支持的内容。相反，我们会指向这个网站：[http://www.quirksmode.org/compatibility.html](http://www.quirksmode.org/compatibility.html)。
- en: This link provides a summary of the various incompatibilities of various web
    browsers according to different selectors. For our purpose here we should be more
    focused on the DOM selectors since we are concerned about JavaScript. Feel free
    to browse through the website for the details. But for now, the main idea that
    you need to understand is that browser differences result in incompatibilities
    and hence we need to test for browser compatibility.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这个链接提供了不同选择器下各种网络浏览器不兼容性的总结。对于我们这里的目的，我们应该更关注DOM选择器，因为我们关心的是JavaScript。可以随意浏览该网站以获取详细信息。但现在，你需要理解的主要观点是，浏览器差异导致了不兼容性，因此我们需要测试浏览器兼容性。
- en: Most beginner JavaScript programers would often want to know how they can find
    out the browser that their visitors are using. After all, if you can find out
    what browser your visitors are using, you'll be able to create compatible JavaScript
    code. That's true to a large extent; so now we'll start by learning how we can
    check the visitor's browser.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数初学者JavaScript程序员经常会想知道他们如何可以找出访问者使用的浏览器。毕竟，如果你能找出你的访问者使用什么浏览器，你就能创建出兼容的JavaScript代码。这在很大程度上是正确的；所以现在我们首先要学习如何检查访问者的浏览器。
- en: Time for action—checking for features and sniffing browsers
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 是时候行动了——检查功能和嗅探浏览器
- en: In this section, we would like to introduce you to the navigator object. The
    navigator object is a built-in object that provides you with information regarding
    the visitor's browser. What we are trying to do here is to show you how the navigator
    object works, and how you can make programing decisions based on the browser information.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们想向您介绍navigator对象。navigator对象是一个内置对象，为您提供有关访问者浏览器的信息。我们试图做的是向您展示navigator对象是如何工作的，以及您可以如何根据浏览器信息进行编程决策。
- en: Note
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The source code for this example can be found in the source code folder, `Chapter
    2`, with a file name of `browser-testing-sample-1.html` and `browser-testing-sample-2.html`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例的源代码可以在源代码文件夹`第2章`中找到，文件名为`browser-testing-sample-1.html`和`browser-testing-sample-2.html`。
- en: 'Start your text editor if you have not already done so, and then enter the
    following code in your text editor:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您还没有这样做，请启动您的文本编辑器，然后在您的文本编辑器中输入以下代码：
- en: '[PRE0]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here''s what''s happening in the previous code: we defined a variable `browserType`.
    After which we used a `for` loop and defined another variable, `propertyName`.'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下面是之前代码中发生的事情：我们定义了一个变量`browserType`。之后我们使用了一个`for`循环并定义了另一个变量`propertyName`。
- en: The line that says:`for( var propertyName in navigator )` means that we are
    trying to get all of the properties in the `navigator` object.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所说的`for( var propertyName in navigator )`意味着我们正在尝试获取`navigator`对象中的所有属性。
- en: After doing this, we append the `propertyName` and the information into the
    `browserType` variable. And finally, we output the information in an alert box.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这样做之后，我们将`propertyName`和信息添加到`browserType`变量中。最后，我们在一个警告框中输出这些信息。
- en: Now, load the file in to your web browser and you should see a pop-up window
    containing information about your web browser.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将文件加载到您的网页浏览器中，您应该会看到一个包含有关您网页浏览器信息的弹出窗口。
- en: Notice that the alert box contains various types of information about your web
    browser. You can also access specific property of the browser for your own use.
    This is what we are going to do next.
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，警告框包含了有关您网页浏览器各种类型的信息。您还可以访问浏览器的特定属性以供您自己使用。我们接下来要做的就是这件事。
- en: 'Now that you have learned how to use the navigator object, it''s time to see
    how we can make use of this information in order to perform programing decisions:'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您已经学会了如何使用navigator对象，现在该看看我们如何利用这些信息来执行编程决策了：
- en: 'Create another new document, and enter the following code into it:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个新文档，并在其中输入以下代码：
- en: '[PRE1]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the previous sample code, we have defined the variable `typeOfBrowser`, which
    is used to decide which to execute. An easy way would be to use the `if else`
    statement to choose the of code to execute, based on the browser name.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个示例代码中，我们已经定义了变量`typeOfBrowser`，用于决定执行哪个操作。一个简单的方法是使用`if else`语句根据浏览器名称选择执行的代码。
- en: What just happened?
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: In the preceding examples, you have seen how to use the navigator object to
    perform "browser sniffing", and based on the given information, perform appropriate
    actions.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，您已经看到了如何使用navigator对象执行“浏览器嗅探”，并根据给定信息执行适当的操作。
- en: Apart from using the navigator object, you can also test browser differences
    based on the browser's capabilities. This means that you can test whether the
    user's browser has a certain feature or not. This technique is also known as feature
    testing. Now, we'll briefly see how you can perform capability testing.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用navigator对象，您还可以基于浏览器的能力测试浏览器之间的差异。这意味着您可以测试用户浏览器是否具有某些功能。这种技术也被称为功能测试。现在，我们将简要看看您如何执行功能测试。
- en: Testing browser differences via capability testing
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过功能测试测试浏览器差异
- en: Capability testing is an important and powerful way to cope with browser incompatibilities.
    For instance, you might want to use a certain function that might not be supported
    on different browsers. You can include a test to see if this function is supported
    or not. Then, based on this information, you can execute the appropriate code
    for your visitor.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 功能测试是应对浏览器不兼容的重要且强大的方法。例如，您可能想使用某个可能在不同浏览器上不受支持的函数。您可以包含一个测试，以查看此功能是否受支持。然后，根据这些信息，您可以为您的访问者执行适当的代码。
- en: Time for action—capability testing for different browsers
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——针对不同浏览器的功能测试
- en: In this section, we'll briefly introduce a simple-to-use method that can help
    you to quickly test for a certain feature. The method that we are going to use
    is the `.hasFeature()` method. Now, we'll dive right in and see it in action.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将简要介绍一个简单易用的方法，可以帮助你快速测试某个特性。我们要使用的方法是`.hasFeature()`方法。现在，让我们深入了解并看看它在实际中的应用。
- en: Note
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The source code for this example can be found in the `source code` folder, `Chapter
    2`, with a file name of `browser-testing-by-feature-2.html` and `browser-testing-by-feature.html`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例的源代码可以在`source code`文件夹中的`第2章`找到，文件名为`browser-testing-by-feature-2.html`和`browser-testing-by-feature.html`。
- en: 'Start your text editor and then enter the following code in your text editor:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动你的文本编辑器，然后在文本编辑器中输入以下代码：
- en: '[PRE2]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To make things clearer, I''ve defined variables for each of the features and
    the version number. In general, the usage of `hasFeature` is as follows:'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了使事情更清晰，我为每个特性和版本号定义了变量。一般来说，`.hasFeature()`的使用如下所示：
- en: '[PRE3]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now load the file in to your web browser and you should see various types of
    text being created dynamically on the screen.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在将文件加载到你的网页浏览器中，你应该会看到屏幕上动态创建各种类型的文本。
- en: Similarly, you can use the information that you have derived from the user's
    browser to perform various decisions in a similar manner as to what you have seen
    in the previous example.
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 同样，你可以使用从用户浏览器中得到的信息以与之前示例中看到的方式类似地执行各种决策。
- en: So, for simplicity and explanation sake, here's how you can perform programing
    decisions using the `.hasFeature()`.
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 因此，为了简化和解释的目的，这里是你可以如何使用`.hasFeature()`进行程序决策的示例。
- en: 'Create another new document, and enter the following code into it:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个新文档，并将以下代码输入其中：
- en: '[PRE4]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The sample code above is self-explanatory as it is similar to the example seen
    in `browser-testing-sample-2.html`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的示例代码是自解释的，因为它与`browser-testing-sample-2.html`中的示例类似。
- en: What just happened?
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: The previous example is a simple extension of what you can do to test for browser
    differences. It is similar to the first example, which "sniffs" for the browser
    information explicitly, while the method using `.hasFeature()` is based on capabilities.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的示例是你测试浏览器差异可以做到的事情的一个简单扩展。它与第一个示例类似，后者明确“嗅探”浏览器信息，而使用`.hasFeature()`的方法是基于功能能力的。
- en: There is no right or wrong way to test for browser differences. However, a general
    practice is to use `.hasFeature()` to test for program functionality. That is
    to say that we often use `.hasFeature()` in order to ensure that our JavaScript
    functionality will be available in different browsers.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 测试浏览器差异没有对错之分。然而，一个普遍的做法是使用`.hasFeature()`来测试程序功能。也就是说，我们经常使用`.hasFeature()`以确保我们的JavaScript功能在不同浏览器中可用。
- en: The previous example shows some of the features that you can test for by using
    `.hasFeature()`. Following is a list of the remaining features that you can test
    for by using `.hasFeature():`
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的示例展示了你可以通过`.hasFeature()`测试的一些特性。以下是使用`.hasFeature()`可以测试的其他特性列表：
- en: Events
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件
- en: UI Events
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户界面事件
- en: Mouse Events
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 鼠标事件
- en: HTML Events
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网页事件
- en: Mutation Events
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变异事件
- en: Range
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 范围
- en: Traversal
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 遍历
- en: Views
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视图
- en: Now that you have some understanding of how you can test for browser differences,
    it is time for the next topic—getting the output and putting values in the right
    places.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 既然你已经对如何测试浏览器差异有了一些了解，是时候讨论下一个话题了——得到输出并将值放在正确的地方。
- en: Are you getting the correct output and putting values in the correct places?
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你得到正确的输出并将值放在正确的地方了吗？
- en: In this section, we'll learn how to make sure that we are getting the output
    and putting the correct values in the correct places. This means that we need
    to understand how to use JavaScript with a HTML form.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何确保我们得到输出并将正确的值放在正确的地方。这意味着我们需要了解如何使用JavaScript与HTML表单配合。
- en: Accessing the values on a form
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问表单中的值
- en: In general, "getting" values would generally mean that a user would input some
    values into a form (in a HTML document of course), and then our program "gets"
    the input from the web form. Also, these values may or may not be manipulated
    by other functions; the initial user input may be passed as arguments to other
    functions and then manipulated.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，“获取”值通常意味着用户会在HTML文档中输入一些值到表单中，然后我们的程序从网络表单中“获取”输入。此外，这些值可能被其他函数处理，也可能不被处理；初始用户输入可能作为参数传递给其他函数，然后被处理。
- en: This can be achieved by using JavaScript's built-in utilities; JavaScript provides
    a few ways for you to access the form values so that you can use these values
    later on. In general, JavaScript will **"get" the value from a form** `onsubmit`
    event.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过使用JavaScript的内置工具来实现；JavaScript为您提供了几种访问表单值的方式，这样您就可以稍后使用这些值。通常，JavaScript会在**"获取"表单的**
    `onsubmit` 事件中。
- en: Time for action—accessing values from a form
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——从表单中获取值
- en: In the following example, we'll start off with a simple HTML form. You will
    learn about various techniques for accessing different form elements. What happens
    here is that you'll see how we first submit a form by using the `onsubmit` event.
    The `onsubmit` event allows us to send the form to a JavaScript function, which
    then helps us to extract the values from various form element types. So for this
    example, I need you to relax and understand the techniques mentioned earlier.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们将从简单的HTML表单开始。你将学习到访问不同表单元素的各种技术。这里发生的是，我们首先通过使用`onsubmit`事件提交表单。`onsubmit`事件允许我们将表单通过一个JavaScript函数发送出去，该函数帮助我们从各种表单元素类型中提取值。所以在这个示例中，我需要你放松并理解前面提到的技术。
- en: Note
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The source code for this example is found in `Chapter 2` of the `source code`
    folder, with a name of `accessing-values-from-form.html`.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 本例的源代码可在`source code`文件夹的`Chapter 2`中找到，文件名为`accessing-values-from-form.html`。
- en: 'Once again, enter the following code into your newly-created document in your
    favorite editor:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次，将以下代码输入到您在新建文档中最喜欢的编辑器中：
- en: '[PRE5]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You should notice that there are various input types, such as `text`, `textarea`,
    `checkbox`, `select`, and `radio`.
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该注意到有各种输入类型，比如`text`、`textarea`、`checkbox`、`select`和`radio`。
- en: Save the form and then load it in to your web browser. You should see a simple
    HTML form on your screen.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存表单，然后将其加载到网页浏览器中。你应该在屏幕上看到一个简单的HTML表单。
- en: Go on and enter values for the fields, and then click on **Submit form**. You
    should see a series of alert windows, which repeat the values that you have entered.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续输入字段的值，然后点击**提交表单**。你应该看到一系列的警告窗口，重复你输入的值。
- en: What just happened?
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: In the simple form example described earlier, you submitted a form via a JavaScript
    event `onsubmit`. The `onsubmit` event calls a JavaScript function `checkValues()`
    which then helps us to access the values from different form elements.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前提到的简单示例中，你通过一个JavaScript事件`onsubmit`提交了一个表单。`onsubmit`事件调用了一个名为`checkValues()`的JavaScript函数，该函数帮助我们访问不同表单元素中的值。
- en: 'In general, the syntax for accessing form elements is as follows:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，访问表单元素的语法如下：
- en: '[PRE6]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: where `formName` is the name of the form, and `elementName` refers to the name
    of the element.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 其中`formName`是指表单的名称，`elementName`指的是元素的名称。
- en: 'As in the **previous example, the form name is** `testingForm`, as can be seen
    in`<form name="testingForm" onsubmit="return checkValues()">`, and the input text
    element has the name `enterText`, as can be seen in`<input type="text" name="enterText"
    />`. Therefore, based on this code snippet, we''ll access the form values by doing
    the following:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 正如**之前的示例中，表单名是** `testingForm`，正如在`<form name="testingForm" onsubmit="return
    checkValues()">`中所看到的，输入文本元素的名字是`enterText`，正如在`<input type="text" name="enterText"
    />`中所看到的。因此，基于这段代码片段，我们将通过以下方式访问表单值：
- en: '`document.testingForm.enterText.value`'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`document.testingForm.enterText.value`'
- en: We can then assign this to a variable that can be saved for later use, as shown
    in the code example.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将这个值赋给一个可以稍后保存的变量，如代码示例所示。
- en: 'The previous example should be simple to grasp. But in this short example,
    I''ve also introduced a few more useful methods. Consider the following code snippet
    which is found in the example:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的示例应该很容易理解。但在这个简短的示例中，我还介绍了一些其他有用的方法。考虑以下代码片段，它可以在示例中找到：
- en: '[PRE7]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Notice that in the highlighted line I've made use of the `length` property;
    `document.testingForm.radioType.length` means that I am calculating how many elements
    by the name of `radioType` do I have in the form named `testingForm`. This property
    returns an integer that can then be used in loops such as the `for` loop, as seen
    in the previous code snippet. You can then loop through form elements and check
    for their values by using the method mentioned earlier.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在突出显示的行中，我使用了`length`属性；`document.testingForm.radioType.length`意味着我在名为`testingForm`的表单中计算了名为`radioType`的元素的数量。这个属性返回一个整数，然后可以在这个整数上使用循环，如之前代码片段中的`for`循环。然后你可以遍历表单元素，并使用前面提到的方法检查它们的值。
- en: 'Another **important technique that you can use can be found in the following
    code snippet**:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个**重要的技术可以在下面的代码片段中找到**：
- en: '[PRE8]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: What happens in **the highlighted line is that** `document.testingForm.clickCheckBox.checked`
    returns a `true` or `false`. You can use this technique to check if the form element
    you are referring to has input or not. You can than make use of this information
    to perform decisions.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 突出显示的行中**发生的事情是**`document.testingForm.clickCheckBox.checked`返回一个`true`或`false`。你可以使用这个技术来检查你引用的表单元素是否有输入。然后你可以利用这个信息来执行决策。
- en: Another technique for accessing form values
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 访问表单值的另一种技术
- en: 'As you may have noticed, we are accessing the form elements by making use of
    the `name` attribute. We would most probably (and most likely) make use of the
    `name` attribute to access the form elements, as it is easier to refer to those
    elements. But nonetheless, here''s an alternate method that you can quickly look
    though:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能已经注意到的，我们通过使用`name`属性来访问表单元素。我们很可能会（很可能）使用`name`属性来访问表单元素，因为它更容易引用这些元素。但无论如何，这里有一个你可以快速查看的替代方法：
- en: Instead of writing
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是写
- en: '[PRE9]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You can write this:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以写这个：
- en: '[PRE10]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: where you are making use of the `forms` object, and `elementName` refers to
    the name of the input.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这里你正在使用`forms`对象，`elementName`指的是输入的名称。
- en: 'An example for the preceding code sample would be:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码样例的一个例子可能是：
- en: '`document.forms[0].enterText.value`'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`document.forms[0].enterText.value`'
- en: Notice that the `forms` object is appended with `[0]`. This means that the `forms`
    object are treated similarly to an array; `forms[0]` refers to the first form
    in the web page, and so on.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`forms`对象后面跟了`[0]`。这意味着`forms`对象被当作数组一样处理；`forms[0]`指的是网页上的第一个表单，依此类推。
- en: Now that you have understood the basics of accessing the values for a form,
    you will learn how to make sure that you are getting the correct values in the
    correct places in the next section.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 既然你已经理解了访问表单值的基础知识，你在下一节将学习如何确保你在正确的地方获取正确的值。
- en: Accessing other parts of the web page
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问网页的其他部分
- en: In this section, you will learn how to access other parts of the web page. In
    general, you have already learned the building block for accessing different parts
    of the webpage by making use of `getElementById, getElementsByTag`, and `getElementsByTagName`.
    Now you will make further use of these, along with the newly-learned techniques
    of accessing values from a form.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将学习如何访问网页的其他部分。通常，你已经学习了通过使用`getElementById`、`getElementsByTag`和`getElementsByTagName`来访问网页不同部分的构建块。现在你将进一步使用这些方法，以及新学到的从表单中访问值的技术。
- en: Time for action—getting the correct values in the correct places
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间—在正确的地方获取正确的值
- en: 'In this example, you will see a general integration of the techniques that
    you have learned so far. You will learn how to access form values, manipulate
    them, perform operations on them, and finally, put the new output on other parts
    of the webpage. To help you better visualize what I am about to describe, following
    is a screenshot of the completed example:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，你将看到到目前为止你所学习技术的综合应用。你将学习如何访问表单值、操纵它们、对它们执行操作，最后，把新的输出放置在网页的其他部分。为了帮助你更好地可视化我要描述的内容，以下是完成例子的截图：
- en: '![Time for action—getting the correct values in the correct places](img/0004_02_01.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![行动时间—在正确的地方获取正确的值](img/0004_02_01.jpg)'
- en: The example **that you are about to use is a simple JavaScript program that
    checks to see if** you can retire **at the age that you want to. It will request
    some basic information from you**. Based on the information provided, it will
    determine if you can retire at that time, **based on** the amount of money you
    would want to have at **the time of retirement**.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来要使用的例子**是一个简单的JavaScript程序，用于检查你是否能在你想要退休的年龄退休。它会要求你提供一些基本信息**。根据提供的信息，它将确定你能否在那个时间退休，**基于**你退休时想要拥有的**金额**。
- en: You will be building a form (2 forms in fact, loosely speaking), where the user
    will be required to enter basic information into the first form (on the left),
    and after entering the required information in each field, there will be another
    input field appearing dynamically on the right of the field ( in the **middle
    of the web page**), **if the input is correct**.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 你将构建一个表单（实际上有两个表单，泛泛而言），用户将被要求在第一个表单（在左边）输入基本信息，在输入每个字段所需的 information 后，将在字段右边动态出现另一个输入字段（在网页的**中间**），**如果输入正确**。
- en: As you enter the information, a JavaScript event will fire off a JavaScript
    function that checks for the correctness of the input. If it is correct, there
    will be a new field created on the right-hand side of the field that has just
    accepted the input, and the field on the left will be disabled.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 当你输入信息时，一个JavaScript事件将触发一个JavaScript函数来检查输入的正确性。如果输入正确，将在刚刚接受输入的字段右侧创建一个新的字段，并且左侧的字段将被禁用。
- en: After the **fields on the left are filled correctly, you will notice a complete
    form is being** filled out in the middle of the page. After you click on **Submit**,
    the code will perform the calculations and determine whether you can retire at
    the age you have specified, based on the amount of money that you require.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在左侧**字段正确填写后，你会注意到一个完整的表单正在页面中间**被填写。点击**提交**后，代码将进行计算，并根据你指定的年龄和你需要的金额，确定你是否可以退休。
- en: 'The basic requirements for this example are as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例的基本要求如下：
- en: Correct values must be entered. For instance, if the field requires you to enter
    your age, the field must only accept integers and no characters should be allowed.
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 必须输入正确的值。例如，如果字段要求你输入你的年龄，该字段只能接受整数，不允许字符。
- en: If the fields require a text input, such as your name, no integers will be allowed.
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果字段需要文本输入，例如你的名字，将不允许整数。
- en: Note
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The completed source code for this example can be found in the source code folder
    for `Chapter 2`, with a file name of `getting-values-in-right-places.html`.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例的完整源代码可以在`第2章`的源代码文件夹中找到，文件名为`getting-values-in-right-places.html`。
- en: 'So now, let us get started with this example:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 那么现在，让我们开始这个示例：
- en: Let us start by building the basic interface for this example. So, enter the
    following code (the HTML and style) in to your text editor.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们先从构建这个示例的基本界面开始。所以，请将以下代码（HTML和样式）输入到你的文本编辑器中。
- en: '[PRE11]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You might want to save this file and load it in your browser to see if you are
    getting the same output as the previous screenshot that you have seen.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可能想保存这个文件并在浏览器中加载它，看看你是否得到了与之前看到的前屏幕截图相同的输出。
- en: Notice that in the HTML form above, there is JavaScript event `onblur. onblur`
    is a JavaScript event that occurs whenever an element loses focus. So you should
    see that all input elements have an `onblur`, which fires off the `submitValues()`
    function.
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，在上面的HTML表单中，有一个JavaScript事件`onblur`。`onblur`是一个发生在一个元素失去焦点时的JavaScript事件。所以你应该看到所有输入元素都有一个`onblur`，它触发了`submitValues()`函数。
- en: You should also see that there is a `this` as an argument for `submitValues().this`
    is one of the most powerful JavaScript keywords, and refers to the corresponding
    element it is being referred to. An example would be `<input type="text" name="enterText"
    id="nameOfPerson" onblur="submitValues(this)" size="50" value="Enter your name"/>`.
    In this code snippet, `submitValues(this)` will submit the HTML form element object
    by the name of `enterText`.
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你也应该注意到`submitValues()`有一个`this`作为参数。`this`是JavaScript中最强大的关键词之一，指的是它所指向的相应元素。一个例子是`<input
    type="text" name="enterText" id="nameOfPerson" onblur="submitValues(this)" size="50"
    value="Enter your name"/>`。在这段代码中，`submitValues(this)`将通过名称`enterText`提交HTML表单元素对象。
- en: Now, it's time for the JavaScript programing. What happened, as explained previously,
    is that on the JavaScript event `onblur`, it will submit the HTML form element
    object to the function `submitValues()`. So, we'll start with this function first.
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，是时候进行JavaScript编程了。根据之前的解释，当发生JavaScript事件`onblur`时，它将提交HTML表单元素对象到`submitValues()`函数。因此，我们首先从这个函数开始。
- en: 'Now, enter the following code between the `<script type="javascript/text">`
    tags:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，请将以下代码插入`<script type="javascript/text">`标签之间：
- en: '[PRE12]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: I've commented on what the code is doing, but I'll focus on some of the techniques
    used in the previous function.
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我对代码正在做什么进行了注释，但我将重点介绍之前函数中使用的一些技术。
- en: 'What we are trying to do here is to check the correctness of the input. For
    this example, we only accept either pure numbers or pure characters (including
    spaces). This is what the following code snippet is doing:'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们在这里要做的就是检查输入的正确性。对于这个示例，我们只接受纯数字或纯字符（包括空格）。以下代码片段就是这样做：
- en: '[PRE13]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Here we are making use of regular expressions to check for the correctness of
    the input. `/^\d+$/` and `/^[a-zA-Z\s]*$/` are regular expressions, where both
    are appended with the `test` method. The `test` method tests for the value of
    the HTML form object's value. For instance, `var digits = /^\d+$/.test(elementObj.value)`
    will return `true` if the value is indeed digits, and `false` if it is not. Similarly,
    `var characters = /^[a-zA-Z\s]*$/.test(elementObj.value)` will return `true` if
    it is characters (which includes spaces) and `false` if it is otherwise.
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们利用正则表达式来检查输入的正确性。`/^\d+$/`和`/^[a-zA-Z\s]*$/`都是正则表达式，它们都附加上`test`方法。`test`方法测试HTML表单对象的值。例如，如果`var
    digits = /^\d+$/.test(elementObj.value)`的确是数字，它将返回`true`，否则返回`false`。同样，`var characters
    = /^[a-zA-Z\s]*$/.test(elementObj.value)`如果是字符（包括空格）将返回`true`，否则返回`false`。
- en: In case you wish to learn more about using regular expressions, you can refer
    to [http://www.w3schools.com/jsref/jsref_obj_regexp.asp](http://www.w3schools.com/jsref/jsref_obj_regexp.asp)
    and see how it works.
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您想了解更多关于使用正则表达式的信息，可以参考[http://www.w3schools.com/jsref/jsref_obj_regexp.asp](http://www.w3schools.com/jsref/jsref_obj_regexp.asp)并了解其工作原理。
- en: The previous information will be used during the decision-making process in
    `if-else` statements. The `if-else` statements check for the name of the HTML
    object; `enterNumber` expects an integer input. If it is not `enterNumber`, it
    is expecting a character input.
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些信息将在`if-else`语句的决策过程中使用。`if-else`语句检查HTML对象的名称；`enterNumber`期望一个整数输入。如果不是`enterNumber`，它期望一个字符输入。
- en: You should notice that if there are no problems with the input, we will disable
    the input element and pass the `value` and `id` of the HTML form object to a function
    `addResponseElement()`, after which we will `return true`, which signifies the
    successful execution of the code and the submission of the form values.
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您应该注意到，如果输入没有问题，我们将禁用输入元素，并将HTML表单对象的`value`和`id`传递给一个函数`addResponseElement()`，之后我们将`return
    true`，表示代码成功执行并提交了表单值。
- en: 'So now, we''ll move on to the `addResponseElement()`function:'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，我们将进入`addResponseElement()`函数：
- en: 'Continuing with the current document, append the following code below `submitValues()`
    function:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续当前文档，在`submitValues()`函数下方添加以下代码：
- en: '[PRE14]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: What `addResponseElement()` does is that it attempts to dynamically add the
    input element on the form to the right of original input form. Here, you should
    find `var container = document.getElementById('formSubmit')` familiar. It looks
    for an HTML element with ID of formSubmit. After this, we will append HTML into
    this form, through the `innerHTML` method. `container.innerHTML += "<input type=\"text\"
    value=\"" +messageValue+ "\"name=\""+idName+"\" /><br>";` attempts to append the
    input that is wrapped between the outermost inverted commas into `<form>` tags.
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`addResponseElement()`所做的就是尝试动态地将输入元素添加到表单的原始输入表单右侧。在这里，您应该发现`var container
    = document.getElementById(''formSubmit'')`很熟悉。它寻找一个ID为formSubmit的HTML元素。之后，我们通过`innerHTML`方法向这个表单添加HTML。`container.innerHTML
    += "<input type=\"text\" value=\"" +messageValue+ "\"name=\""+idName+"\" /><br>";`尝试将输入添加到`<form>`标签之间。'
- en: You should also notice `var totalInputElements = document.testForm.length`;.
    What this line of code does is determine the total number of input elements that
    `testForm` has, by using the `length` property. We are making use of this information
    to determine if we are on the last input field of the form, so that we can append
    a Submit button on the other form.
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您还应该注意到`var totalInputElements = document.testForm.length`;。这段代码通过使用`length`属性确定`testForm`中的输入元素总数。我们利用这个信息来确定是否处于表单的最后一个输入字段，以便在另一个表单上添加一个提交按钮。
- en: Next, we will create the function, which is called after the second form, which
    has a name of `testFormResponse`, is submitted.
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个函数，它在第二个名为`testFormResponse`的表单提交后调用。
- en: 'Continuing with the **current document, append the following code below** `addResponseElement()`
    function:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续在**当前文档中，在** `addResponseElement()`函数下方添加以下代码：
- en: '[PRE15]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: What happens in this function is pretty straightforward. The various form values
    are assigned to the various variables. Then we begin some simple calculations
    to see if the user will have enough money for retirement. You may refer to the
    comments in the function to understand the logic of the calculations.
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个函数中发生的事情相当直接。各种表单值被分配给各种变量。然后我们开始进行一些简单的计算，以查看用户是否有足够的钱退休。您可以通过查看函数中的注释来了解计算的逻辑。
- en: In general, we'll call the function `buildFinalResponse()`, irrespective of
    whether the user can retire on time, and with the required amount of money. So
    here's the `buildFinalResponse()`.
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通常，我们会调用函数`buildFinalResponse()`，无论用户能否按时退休，以及是否有足够的钱。所以这是`buildFinalResponse()`。
- en: 'Continuing with the current document, append the following code below `checkForm
    ()` function:'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 继续当前文档，在`checkForm ()`函数下方添加以下代码：
- en: '[PRE16]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The function `buildFinalResponse()` is similar to the `addResponseElement()`
    function. **It simply looks for the required HTML element, and appends the required**
    HTML to the element.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 函数`buildFinalResponse()`与`addResponseElement()`函数类似。**它只是寻找所需的HTML元素，并将所需的**
    HTML添加到该元素中。
- en: Here, **you can clearly see the JavaScript functions, methods, and techniques
    that you have** learnt so **far in this book**.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，**你可以清楚地看到在这本书中学到的JavaScript函数、方法和技巧**。
- en: Save the file. **You can try playing with the example and see how it works for
    you**.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 保存文件。**你可以尝试玩弄这个例子，看看它对你来说是如何工作的**。
- en: What just happened?
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: In the previous example, you saw how to access the values of the form, perform
    operations on the input, and then place the output on various parts of the web
    page. You may have noticed that we made extensive use of `getElementById`. We
    have also made use of the `form` object and the `value` method in order to access
    the value of various elements in the form. Then, by making use of `getElementById`,
    we looked for the required HTML element and appended the output into the HTML
    element.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一个例子中，你看到了如何访问表单的值，对输入进行操作，然后将输出放置在网页的不同部分。你可能会注意到我们广泛使用了`getElementById`。我们还使用了`form`对象和`value`方法来访问表单中各个元素的值。然后，通过使用`getElementById`，我们寻找所需的HTML元素，并将输出添加到HTML元素中。
- en: But, at this point of time, you may be wondering what you should do if you happen
    to make mistakes in the program. This is what we'll be focusing on in the next
    section.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，在这个时候，你可能会想知道如果你在程序中犯错误，你应该做什么。这就是我们下一节将重点关注的内容。
- en: Does the script give the expected result?
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 脚本给出了预期的结果吗？
- en: My opinion is that before we can begin any meaningful discussion, we must understand
    what is meant by "**expected result**".
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 我的观点是，在我们开始任何有意义的讨论之前，我们必须理解“**预期结果**”的含义。
- en: '"Expected result(s)" **can have several meanings, at least for the purpose
    of this book. For** instance, as mentioned in the **previous chapter, the output
    should be correct for each input**; as this refers to the eventual output. There
    is another output, which takes the form of "**visual output**". For instance,
    for every user interaction or event, our web applications would often provide
    a form of visual cue to allow the user to know that something is happening. In
    this case, our visual clues helping in the way that we intended would be deemed
    as an "**expected result**".'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: “预期结果（s）”**可以有几种含义，至少对于这本书的目的来说是这样。例如，如前所述，每个输入的输出都应该是正确的；这里指的是最终的输出。还有一种输出，它以“**视觉输出**”的形式出现。例如，对于每个用户交互或事件，我们的网络应用程序通常会提供一种视觉提示，让用户知道正在发生的事情。在这种情况下，我们的视觉提示按照我们的意图行事，将被认为是“**预期结果**”。
- en: A simple tip, to check if the script gives you the expected results, is to use
    simple input and perform the calculations yourself. Make sure that your calculations
    are correct and test your program.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的提示，为了检查脚本是否给你预期的结果，就是使用简单的输入并进行自己的计算。确保你的计算是正确的，并测试你的程序。
- en: In the later part of this chapter, we'll discuss two relevant techniques in
    detail. But first, let us see what actions we can take if our script does not
    run.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的后半部分，我们将详细讨论两种相关技术。但首先，让我们看看如果我们的脚本没有运行，我们可以采取哪些行动。
- en: What to do if the script doesn't run
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 脚本不运行时怎么办
- en: If the script doesn't run, it is very likely that loading or runtime errors
    have occurred, depending on the way that your program is coded. For example, in
    the previous program that you have just created, you know that the program is
    not running if there is no response after you have entered the first input field
    and the focus is no longer on the first input field.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 如果脚本运行不了，很可能是因为加载或运行时出现了错误，这取决于你的程序是如何编写的。例如，在你刚刚创建的前一个程序中，如果你在输入第一个输入字段后没有回应，并且焦点不再在第一个输入字段上，那么你就知道程序没有在运行。
- en: In this case, there are a few possibilities (all of which fall under the three
    basic forms of JavaScript errors as mentioned in the previous chapter). Firstly,
    there might be an error in the syntax of your input field for the JavaScript event,
    or, there could be a serious error in the function that is called by the JavaScript
    event. If not, it could be a logic error.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，有几种可能性（这些都归结于前面章节中提到的 JavaScript 错误的三个基本形式）。首先，可能在 JavaScript 事件的输入字段中存在语法错误，或者在由
    JavaScript 事件调用的函数中存在严重的错误。如果不是，可能是逻辑错误。
- en: Whatever the errors may be, it is often difficult to guess what and where the
    errors are. Therefore, I'll introduce three important techniques for testing out
    your code, if your code does not run.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 无论错误可能是什么，通常很难猜测错误是什么以及在哪里。因此，如果您的代码没有运行，我将介绍三种重要的测试代码的技术。
- en: Visually inspecting the code
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: visually inspecting the code（视觉检查代码）
- en: 'Visually inspecting the code means that you will be a human compiler, and visually
    check for errors in your code. My opinion is that there are certain pre-conditions
    and tips for visual inspection:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 视觉检查代码意味着你将扮演一个人类编译器，并 visually check for errors in your code（视觉检查代码中的错误）。我的看法是，对于视觉检查有一些预设条件和小贴士：
- en: There must be a good code block structure. This means that code should be properly
    spaced and indented for visual clarity. At one glance, you should be able to see
    which code is nested under which `if-else` statements, or which functions it belongs
    to.
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 必须有良好的代码块结构。这意味着代码应该适当地隔开并缩进，以提高视觉清晰度。一眼看上去，你应该能够看出哪段代码嵌套在哪个`if-else`语句下，或者它属于哪个函数。
- en: The code editor that you use makes a huge difference. A common error is the
    mismatching of brackets or inverted commas. Therefore, a code editor that allows
    for the highlighting of matching brackets will help you to spot such errors.
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你使用的代码编辑器有很大的不同。一个常见的错误是括号或反引号的不匹配。因此，一个允许高亮显示匹配括号的代码编辑器将帮助你发现这类错误。
- en: Check for semicolons after each statement(s).
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查每个语句(statement)后面的分号。
- en: Check to see if variables are initialized. If variables are used in later parts
    of the program but are not initialized, it will create serious errors.
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查变量是否已初始化。如果变量在程序的后部分使用但未初始化，将会造成严重的错误。
- en: The previous actions are some of the things I will do if my script doesn't run
    or if it doesn't run in the way that I intend it to. However, despite our best
    intentions, visual inspection of code can only be useful for small programs, such
    as programs that have less than 30 to 50 lines of code. If the programs get any
    larger, or if they contain various functions that are invoked during events, it
    might be better (and more efficient) to check our code by using the `alert` function.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的操作是我如果脚本没有运行或者没有按照我预期的运行方式来运行时会做的一些事情。然而，尽管我们有意愿，但对代码的视觉检查只能对小于30到50行代码的小程序有用。如果程序再大一些，或者如果它们包含在事件中调用的各种函数，使用
    `alert` 函数来检查我们的代码可能更好（也更有效率）。
- en: Using alert[] to see what code is running
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 alert[] 来查看正在运行的代码
- en: 'The `alert` method can be used to check that what code is running is being
    used appropriately. We have not formally introduced the alert method yet. But
    just in case, you can use the alert function to create pop-up windows just about
    anywhere in a JavaScript program. The syntax is as follows:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '`alert` 方法可以用来检查正在运行的代码是否被适当地使用。我们还没有正式介绍 alert 方法。但是以防万一，您可以在 JavaScript 程序中的几乎任何地方使用
    alert 函数来创建弹出窗口。语法如下：'
- en: '`alert(message)`'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '`alert(message)`'
- en: where `message` can take almost any number of values (or variables if it has
    been defined or initialized). Due to this flexible nature of the `alert` method,
    it can also be used to show values, strings, and object types as well.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 `message` 可以接受几乎任意数量的值（或者如果它已经被定义或初始化，可以是变量）。由于 `alert` 方法的灵活性，它也可以用来显示值、字符串和对象类型。
- en: The issue in using `alert` stems from the location where the `alert` should
    be placed in the code. This will be demonstrated in the next hands-on example.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `alert` 的问题源于在代码中放置 `alert` 的位置。这将在下一个动手示例中展示。
- en: Using alert() to see what values are being used
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 alert() 来查看正在使用哪些值
- en: As mentioned earlier, the `alert` method can be used to show almost any type
    of value. Therefore, a common usage would be to pass a variable into the `alert`
    method and see if the value is what we need or intended.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面提到的，`alert` 方法可以用来显示几乎任何类型的值。因此，常见的用法是将一个变量传递给 `alert` 方法，看看值是否是我们需要的或预期的。
- en: Similarly, we need to know where we should be applying the `alert` method to
    in order to ensure that our code inspection is correct.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们需要知道在哪里应用`alert`方法，以确保我们的代码检查是正确的。
- en: At this point of time, an example would be the most appropriate way to see how
    we can make use of the `alert` method to inspect the code for errors. So, let
    us see how this works.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，示例将是查看我们如何使用`alert`方法检查代码错误的最合适方式。那么，让我们来看看这个是如何工作的。
- en: Time for action—using alert to inspect your code
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——使用alert检查你的代码
- en: This example is similar to what you have done in the previous example. In this
    example, you will be required to insert `alert` in the appropriate places in order
    to check which part of the code is running. In some cases, you will need to pass
    values to the `alert` method and see if the value is the one that you want.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例与你之前所做的类似。在这个示例中，你需要将`alert`插入到适当的位置，以检查哪部分代码正在运行。在某些情况下，你需要向`alert`方法传递值，并看看这个值是否是你想要的。
- en: To be honest, it would be tedious to tell you step-by-step where you should
    place the `alert` method, especially as the bulk of the code in this example is
    similar to the previous one. However, to make things easier for you to follow,
    we'll start immediately with the entire program, after which we'll explain to
    you the rationale behind the location of the `alert` methods and the values that
    are passed into the `alert` method.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 坦白说，告诉你一步一步应该放置`alert`方法会很繁琐，尤其是因为本例中大部分代码与上一个类似。然而，为了让你更容易跟随，我们将从整个程序开始，然后向你解释`alert`方法的位置和传递给`alert`方法的价值背后的原因。
- en: Note
  id: totrans-195
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The source code of the following example can be found in `Chapter 2` of the
    source code folder, named `getting-values-in-right-places-using-alert.html`.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例的源代码可以在源代码文件夹的`第2章`中找到，文件名为`getting-values-in-right-places-using-alert.html`。
- en: 'This example is similar to the previous one, except that the JavaScript has
    been changed slightly. Replace the JavaScript code from the previous example with
    the following code:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个示例与上一个类似，不同之处在于JavaScript代码略有改动。用以下代码替换上一个示例中的JavaScript代码：
- en: '[PRE17]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Save the document and load it in to your web browser. Play around with the example
    and see how the alert boxes notify you of which part of the code is being executed,
    and also the values being entered.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文档并在网页浏览器中加载它。玩转示例，看看警告框是如何通知你哪部分代码正在执行，以及输入了哪些值。
- en: What just happened?
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: If you go through the previous example, you will notice that the `alert()` is
    most often placed at the beginning of functions, and when variables are being
    initialized. To check the functions, we often manually type in the name of the
    function and pass it as arguments to the `alert` method, to inform us of what
    is happening as we interact with the program. Similarly, we pass the variables
    that are defined (the values from the form elements) as arguments to the alert
    method to inform us of what values are being entered by the user.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你浏览了之前的示例，你会注意到`alert()`通常放在函数的开始处，以及在变量被初始化时。为了检查函数，我们通常会手动输入函数的名称，并将其作为参数传递给`alert`方法，以通知我们程序的互动过程中发生了什么。同样，我们将定义的变量（表单元素的值）作为参数传递给`alert`方法，以通知我们用户输入了哪些值。
- en: Therefore, by using a single `alert()` method, we are able to find out what
    code is running and what values are being used. However, this method may be slightly
    too tedious or frustrating, because the alert boxes keep on popping up on your
    window. Here's a simple alternative for checking what code is running, and also
    to inspect the input elements.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，通过使用一个`alert()`方法，我们能够找出正在运行的代码和正在使用的值。然而，这个方法可能有些过于繁琐或令人沮丧，因为警告框会不断地在你的窗口上弹出。这里有一个简单的替代方法，用于检查正在运行的代码，以及检查输入元素。
- en: A less obtrusive way to check what code is running and the values used
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查代码正在运行以及使用哪些值的一种不那么侵扰性的方法
- en: To test our code in a less obtrusive manner we would write a simple debugging
    function. This debugging function should print out the names of the functions,
    and some other variables. For simplicity's sake, we'll demonstrate a simple debugging
    function that prints the name of the function, and the HTML element being used.
    So, let us get started.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 为了以一种不那么侵扰的方式测试我们的代码，我们会写一个简单的调试函数。这个调试函数应该打印出函数的名称和其他一些变量。为了简单起见，我们将展示一个简单的调试函数，它打印出函数的名称和正在使用的HTML元素。那么，让我们开始吧。
- en: Time for action—unobtrusively checking what values are used
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间—检查值的使用是否突兀
- en: As mentioned above, we'll be demonstrating a very simple debugging function
    that helps you to identify which code is running and also which HTML element is
    in use. Here, you'll get a basic idea of some of the actions that you can perform
    in order to have a less obtrusive way of testing your code.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所述，我们将演示一个非常简单的调试函数，帮助你识别正在运行的代码以及正在使用的HTML元素。在这里，你会对如何以一种不那么突兀的方式测试你的代码有一些基本了解。
- en: Again, this example is similar to the previous one, but there are some important
    elements that which we will be adding to the previous example. In essence, we
    will be adding a function, some HTML, and CSS to it.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，这个例子与上一个例子相似，但有一些重要的元素我们将添加到上一个例子中。本质上，我们将在其中添加一个函数、一些HTML和CSS。
- en: However, you might find it tedious to refer back to the previous example and
    add the new elements to the previous example. Therefore, it is recommended that
    you stay with me on this example.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，你可能会发现回头参考上一个例子并给上一个例子添加新元素很繁琐。因此，建议你跟随这个例子。
- en: Note
  id: totrans-209
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Alternatively, you can view the source code in the source code folder, `Chapter
    2`, with a file name of `getting-value-in-right-places-complete.html`.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，你可以在源代码文件夹`第2章`中查看源代码，文件名为`getting-value-in-right-places-complete.html`。
- en: 'So, without further ado, let us start right now:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，不再赘述，让我们马上开始：
- en: 'Insert the following CSS code in between the`<style>` tags:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<style>`标签之间插入以下CSS代码：
- en: '[PRE18]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now, for the HTML container which will contain the debugging messages, enter
    the following code snippet before`</body>` tag:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，对于将包含调试信息的HTML容器，请在`</body>`标签前输入以下代码片段：
- en: '[PRE19]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'What happens here is that the preceding HTML element will be used to provide
    a visual separation between the debugging messages and the simple application
    itself. Save the file now , load it to your web browser and you will see an example
    similar to the one shown in the next screenshot:'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里发生的情况是，之前的HTML元素将被用来在调试信息与简单应用程序本身之间提供视觉分隔。现在保存文件，然后用网页浏览器打开它，你会看到一个类似于下一张截图中的示例：
- en: '![Time for action—unobtrusively checking what values are used](img/0004_02_02.jpg)'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间—检查值的使用是否突兀](img/0004_02_02.jpg)'
- en: 'Next, you will need to append the following code to your JavaScript code:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，你需要将以下代码添加到你的JavaScript代码中：
- en: '[PRE20]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The previously-mentioned function is used to capture the name of the function
    used right now; this is equivalent to what code is in use right now, because our
    program is event driven and the functions are, in general, triggered by the user.
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前面提到的函数用于捕获当前使用的函数名称；这相当于当前正在使用什么代码，因为我们的程序是事件驱动的，函数通常是由用户触发的。
- en: 'The three arguments are as follows:'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这三个参数如下：
- en: '`functionName` refers to the functionName of the function used right now. In
    the next step, you shall see the method used to derive this value dynamically.'
  id: totrans-222
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`functionName`指的是当前使用的函数的functionName。在下一步，你将看到动态获取这个值的方法。'
- en: '`objectCalled` refers to the HTML object being used.'
  id: totrans-223
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`objectCalled`指的是正在使用的HTML对象。'
- en: '`Message` refers to a string. This can be any message that you want; it is
    meant to provide some form of flexibility to the kind of debugging messages that
    you can write to the screen.'
  id: totrans-224
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Message`指的是一个字符串。这可以是任何你想要的消息；它的目的是为你提供在屏幕上编写调试消息的灵活性。'
- en: Also, we are making use of the `.innerHTML` method to append the messages into
    the HTML `div` element for the `id` "debugging".
  id: totrans-225
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此外，我们使用了`.innerHTML`方法将消息追加到ID为"debugging"的HTML`div`元素中。
- en: 'Now finally, it''s time to see how we can use this function. In general, we
    use the function as follows:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在最后，是时候看看我们如何使用这个函数了。通常，我们按照以下方式使用函数：
- en: '[PRE21]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'If you refer to the source code, you will see that the previously-mentioned
    function is being used sparingly in the program. Consider the following code snippet:'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你查看源代码，你会看到前面提到的函数在程序中谨慎使用。考虑以下代码片段：
- en: '[PRE22]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: In the previous case, the value of "`submitValues`" will be passed because `submitValues`
    is the name of the function. Notice that we also passed the function argument,
    `elementObj` into `debuggingMessages()` in order to notify us what is being used
    in the current function.
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前一个案例中，"`submitValues`"的值将被传递，因为`submitValues`是函数的名称。注意我们也把函数参数`elementObj`传递给`debuggingMessages()`，以便通知我们当前函数中使用了什么。
- en: Finally, you might want to add the `debuggingMessages("name of function", elementObj,"empty")`
    to each function in your JavaScript program. If you are not sure where you should
    use this function, refer to the source code given.
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，你可能想要在JavaScript程序中的每个函数中添加`debuggingMessages("function name", elementObj,"empty")`。如果你不确定应该在哪个地方使用这个函数，请参考给出的源代码。
- en: If you are typing in the function yourself, then do take note that you might
    have to change the argument names in order to accommodate each of the functions.
    In general, `debuggingMessages()` can be used in place of the `alert()` method.
    So, if you are unsure of where you should use `debuggingMessages()`, you can use
    `debuggingMessages()` for every `alert()` used for inspecting the code in the
    previous example.
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你自己正在输入函数，那么请注意你可能需要更改参数名称以适应每个函数。通常，`debuggingMessages()`可以替代`alert()`方法。所以，如果你不确定应该在哪个地方使用`debuggingMessages()`，你可以将`debuggingMessages()`用于前一个示例中用于检查代码的每个`alert()`。
- en: If you have executed the entire program, you will see something similar to the
    next screenshot:![Time for action—unobtrusively checking what values are used](img/0004_02_03.jpg)
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你已经执行了整个程序，你会看到类似于下一张截图的东西：![行动时间—不侵扰地检查使用哪些值](img/0004_02_03.jpg)
- en: What just happened?
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: You have just created a function that allows you to inspect your code in a less
    obtrusive manner, by making use of some built-in methods of JavaScript, which
    includes the `.innerHTML` method. What happens here is another example of how
    you can access values, manipulate them, and then output these values to the required
    HTML element, in order to make inspection less obtrusive.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 你刚刚创建了一个函数，它允许你以一种不那么侵扰的方式检查你的代码，这是通过利用JavaScript的一些内置方法实现的，包括`.innerHTML`方法。这里发生的事情是另一个例子，展示了你如何访问值、操纵它们，然后将这些值输出到所需的HTML元素，以使检查变得更不侵扰。
- en: If you look through the source code, you may have noticed that I used different
    messages during different situations; this will bring more flexibility to your
    debugging functions, if you use one.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看源代码，你可能会注意到我在不同的情况下使用了不同的消息；如果你使用的话，这将为你的调试函数带来更多的灵活性。
- en: Commenting out parts of the script to simplify testing
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注释掉脚本的一部分以简化测试
- en: Commenting out parts of the script is another important and simple-to-use ad
    hoc technique for testing your JavaScript code. Essentially, you comment out the
    code that will not be used immediately.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 注释掉脚本的一部分是测试你的JavaScript代码的另一种重要且简单易用的权宜之计。本质上，你注释掉那些立即不会使用的代码。
- en: 'Because we have not introduced how to do multiple line commenting, I''ll take
    this chance to show you how to use it. The syntax is as follows:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们还没有介绍如何进行多行注释，所以我借此机会向你展示如何使用它。语法如下：
- en: '[PRE23]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Here''s how commenting out parts of the script can be used to simplify testing:
    we would often comment out all other code that we would not use at first. For
    instance, the first function used in `getting-values-right-places-complete.html`
    is the `submitValues()` function.'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 注释掉脚本的一部分可以用来简化测试的方法如下：我们通常会注释掉所有我们一开始不会使用的其他代码。例如，`getting-values-right-places-complete.html`中使用的第一个函数是`submitValues()`函数。
- en: We would make sure that the `submitValues()` function is correct before uncommenting
    the second function that is used, which is the `addResponseElement()` function.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 我们会在取消注释用于的第二个函数之前，确保`submitValues()`函数是正确的，这个第二个函数是`addResponseElement()`函数。
- en: The process goes on until all functions are uncommented, which means that the
    code is correct.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程一直持续到所有函数都被取消注释，这意味着代码是正确的。
- en: With all of these points in mind, we'll now move on to a simple workout based
    on the previous example.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到所有这些点，我们现在将转到基于前一个示例的简单练习。
- en: Time for action—simplifying the checking process
  id: totrans-245
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——简化检查过程
- en: 'In this example, there will not be any source code for you to copy. Instead,
    you can use the previous example found in `getting-values-right-places-complete.html`
    and try out the following steps:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，不会有源代码供你复制。相反，你可以使用在`getting-values-right-places-complete.html`中找到的前一个示例，并尝试以下步骤：
- en: Scroll to the JavaScript section of the source code. Comment out all functions
    except for `submitValues()` and `addResponseElement()`.
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 滚动到源代码的JavaScript部分。注释掉所有除了`submitValues()`和`addResponseElement()`之外的函数。
- en: Save the file and load it to your web browser. Now test out the program.
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件并加载到你的网页浏览器中。现在测试一下这个程序。
- en: You should notice that your program can still work, except that after all the
    input fields are filled correctly, you will not be able to submit the form successfully.
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您应该注意到，您的程序仍然可以运行，但是当所有输入字段都正确填写后，您将无法成功提交表单。
- en: This is because you have commented out the function `checkForm()`, which is
    needed for the second form submission.
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是因为您注释掉了`checkForm()`函数，这个函数对于第二次表单提交是必需的。
- en: What does this mean? This means to say that the functions `submitValues()`and
    `addResponseElement()` work correctly, and now it is safe to move on.
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这意味着什么？这意味着`submitValues()`和`addResponseElement()`函数运行正常，现在可以安全地进行下一步。
- en: Now, uncomment the `checkForm(), buildFinalResponse()`, and `debuggingMessages()`
    function, save the file and reload in your browser. Continue to test out your
    program until you submit the form.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，取消注释`checkForm()`、`buildFinalResponse()`和`debuggingMessages()`函数，保存文件并在浏览器中重新加载。继续测试您的程序，直到您提交表单。
- en: You should have noticed that all things go well before the submission of the
    second form. This is, because expected as you have tested it in the previous step.
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您应该注意到，在提交第二份表单之前，所有事情都进行得很顺利。这是因为您在上一个步骤中已经测试过，所以预料到了这种情况。
- en: Now, after you have completed all of the input fields, submit the form. Because
    you have uncommented the `checkForm()` and `buildFinalResponse()` functions, you
    should now expect a response after submitting the form.
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，在您完成所有输入字段后，提交表单。因为您已经取消注释了`checkForm()`和`buildFinalResponse()`函数，现在提交表单后您应该期待有一个回应。
- en: Finally, uncomment the `debuggingMessages()` function. Save the file and load
    it in to your browser
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，取消注释`debuggingMessages()`函数。保存文件并在浏览器中加载它
- en: Now, similarly, use the program as usual, and you should see that all of the
    required functionalities are working as before.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，同样地，像往常一样使用程序，您应该看到所有必要的功能都像以前一样正常工作。
- en: What just happened?
  id: totrans-257
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: You have just executed a useful way of testing your code by uncommenting different
    parts of the code. You may have noticed that we started from the first function
    that will be used, and then proceeded to the next one. This process will help
    us to spot the block of code that contains the error.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 您刚刚通过取消注释代码的不同部分，以一种有用的方法测试了您的代码。您可能注意到我们从第一个将要使用的函数开始，然后继续到下一个。这个过程将帮助我们找到包含错误的代码块。
- en: This technique can also be applied to code statements. We commented out the
    code in functions, because it is easier to follow based on the example.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 这种技术也可以应用于代码语句。我们注释掉了函数中的代码，因为根据示例，这样更容易跟踪。
- en: Timing differences—making sure that the HTML is there before interacting with
    it
  id: totrans-260
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 时机差异——确保在交互之前HTML已经准备好了
- en: Remember that the essence of JavaScript is to provide behavior to web pages
    by manipulating DOM elements? Here's the catch—if the HTML is not available when,
    for instance, a JavaScript function that changes the color of a form is executed,
    then the JavaScript function will not work.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 记住JavaScript的本质是通过操作DOM元素为网页提供行为吗？这是一个关键点——如果HTML在例如执行改变表单颜色的JavaScript函数时不可用，那么JavaScript函数将无法工作。
- en: In this case, it is not due to JavaScript errors such as logic, runtime, and
    loading errors, but rather, due to timing problems.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，问题不是由于JavaScript错误，比如逻辑、运行时和加载错误，而是由于时机问题。
- en: As mentioned in the previous chapter, the web browser (client) downloads a web
    page from a server, and in general, reads the web page (document) from top to
    bottom. So, for instance, if you have a large HTML document (for instance an HTML
    document with large images within the body), your JavaScript might not be able
    to interact with the HTML DOM because there is no HTML to interact with.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 如前章所述，网络浏览器（客户端）从服务器下载一个网页，通常是从上到下读取网页（文档）。因此，例如，如果您有一个大型的HTML文档（例如一个在主体中有大图像的HTML文档），您的JavaScript可能无法与HTML
    DOM交互，因为没有HTML可以与之交互。
- en: 'There are two solutions that allow us to deal with this problem:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 有两条解决方法可以让我们解决这个问题：
- en: 'Using the JavaScript event `onload` with the`<body>` tag. This can be done
    as follows:'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`<body>`标签的JavaScript事件`onload`。这可以按照以下方式进行：
- en: '[PRE24]'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The highlighted line means that `aSimpleFunction()` is executed only when the
    contents in the `<body>` tag have finished loading. You can make use of this technique
    to ensure that your HTML contents have finished loading before you execute your
    JavaScript functions.
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 高亮的行意味着`aSimpleFunction()`仅在`<body>`标签中的内容加载完成后执行。您可以利用这个技术确保在执行您的JavaScript函数之前，您的HTML内容已经加载完成。
- en: 'Here''s another (and possibly preferred method):'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里有一个（可能是更受欢迎的方法）：
- en: Placing your JavaScript function before the`</body>` tag.
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你的JavaScript函数放在`</body>`标签之前。
- en: This method is commonly used; you can see companies providing analytics service
    often requesting its users to place the tracking code (often in JavaScript, such
    as Google Analytics) just before the`</body>` tag. This means that the JavaScript
    snippet will be loaded after all contents in the`<body>` tag are loaded, ensuring
    that the HTML DOM will interact with the JavaScript.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法通常被使用；你可以看到提供分析服务的公司通常要求其用户在`</body>`标签之前放置跟踪代码（通常是JavaScript，如Google分析）。这意味着JavaScript代码片段将在`<body>`标签中的所有内容加载完成后加载，确保HTML
    DOM将与JavaScript交互。
- en: Why ad hoc testing is never enough
  id: totrans-271
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么临时测试永远不够
- en: Up to this point, you may have noticed that the methods introduced for ad hoc
    testing can get repetitive when applied to your code. For instance, the `alert`
    method requires you to manually type in the `alert` function in different parts
    of the code, containing different values in order for you to inspect the code.
    This can get tedious and inefficient, especially when the program begins to get
    larger. Simply put, it will not be able to scale when the program gets too large.
    At the same time, the `alert` method can be quite obtrusive. For this reason,
    we created a simple debugging function.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你可能已经注意到，为临时测试介绍的方法在应用到你的代码时可能会变得重复。例如，`alert`方法需要你手动在不同代码部分输入`alert`函数，包含不同的值，以便你检查代码。这可能会变得繁琐且低效，尤其是当程序开始变得更大时。简单地说，当程序变得太大时，它将无法扩展。同时，`alert`方法可能会相当显眼。因此，我们创建了一个简单的调试功能。
- en: The simple debugging function that we have created is less obtrusive; you can
    interact with the program and receive an almost instant feedback on your screen.
    Although it has the advantage of being less obtrusive, it suffers from two major
    disadvantages. The first is the fact that it can be tedious and inefficient, which
    is similar to the `alert` method. The second disadvantage is that how well the
    debugging function can work relies largely on the skills of the JavaScript program.
    However, being beginners in JavaScript, we may or may not have the skills to create
    a robust debugging function.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建的简单调试功能较为不显眼；你可以与程序互动，并在屏幕上获得几乎即时的反馈。尽管它具有不太显眼的优点，但它有两个主要的缺点。第一个缺点是它可能既繁琐又低效，这与`alert`方法相似。第二个缺点是调试功能的优劣在很大程度上取决于JavaScript程序员的技能。然而，作为JavaScript的初学者，我们可能有没有创建健壮调试功能的技能。
- en: Therefore, there are other, more powerful, tools to help us get the job done
    when the need arises, and we will be discussing these in the later chapters.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当需要时，还有其他更强大的工具可以帮助我们完成工作，我们将在后面的章节中讨论这些工具。
- en: Summary
  id: totrans-275
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we built upon the basics learnt in the previous chapter, and
    expanded our knowledge of how we can perform ad hoc testing by using various techniques
    covered in the chapter.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们在前一章学到的基础知识上进行了构建，并扩展了我们可以使用本章介绍的各种技术进行临时测试的知识。
- en: In general, we have combined the various methods and techniques from the previous
    chapter and this chapter in order to help us perform ad hoc testing. We often
    look for the required element through `getElementById`, and then by accessing
    form values through the `form` object. We also used the `alert()` method to perform
    some form of ad hoc testing.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，我们将前一章和本章介绍的各种方法和技巧结合起来，以帮助我们进行临时测试。我们经常通过`getElementById`查找所需的元素，然后通过`form`对象访问表单值。我们还使用了`alert()`方法进行某种形式的临时测试。
- en: 'Specifically, we have covered the following topics:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，我们已经介绍了以下主题：
- en: We have learnt how to access values on forms by using the `form` object and
    its methods, manipulating the values, and outputting the values in to other parts
    of the web page by using the techniques learnt in the previous chapter, such as
    `getElementById`. We appended HTML content to specific HTML elements by using
    `.innerHTML`.
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们学习了如何使用`form`对象及其方法访问表单上的值，操纵值，并使用前一章学到的技术将值输出到网页的其他部分，例如`getElementById`。我们通过`.innerHTML`将HTML内容附加到特定的HTML元素上。
- en: Actions that we can take if the script does not provide the expected output,
    namely by testing the script by using the `alert()` method and commenting out
    the code. This leads us to ad hoc testing.
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果脚本没有提供预期的输出，我们可以采取的行动，即使用`alert()`方法测试脚本并注释掉代码。这引导我们进行临时测试。
- en: Various techniques to perform ad hoc testing, most notably, by using the `alert()`
    method. Due to its apparent obtrusiveness, we created a simple debugging function
    that provides a less obtrusive way of performing testing.
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行临时性测试的各种技术，最值得注意的是，通过使用`alert()`方法。由于它明显的干扰性，我们创建了一个简单的调试函数，提供了一种不那么干扰的测试方式。
- en: 'Timing differences: We must always make sure that the HTML DOM is available
    before JavaScript can interact with it.'
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 时间差异：我们必须始终确保HTML DOM在JavaScript可以与其交互之前是可用的。
- en: Ad hoc testing is never enough due to scalability and efficiency problems
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于可扩展性和效率问题，临时性测试永远不够。
- en: Now that we have understood and have tried ad hoc testing, it is time to learn
    some slightly more advanced stuff about JavaScript testing. As mentioned earlier,
    although ad hoc testing is quick and simple, it does not necessarily lead to better
    JavaScript code (on top of its other weaknesses). In the next chapter, we'll learn
    about validating JavaScript. Although it sounds like a simple concept, you'll
    learn more JavaScript concepts in terms of the actual coding and design process,
    and other factors that can help you to validate your JavaScript program.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经理解并尝试了临时性测试，现在是时候学习一些关于JavaScript测试的更高级内容了。如前所述，尽管临时性测试快速简单，但它并不一定能带来更好的JavaScript代码（除了它其他缺点之外）。在下一章，我们将学习如何验证JavaScript。尽管这个概念听起来简单，但你在实际编码和设计过程中，以及可以帮助你验证你的JavaScript程序的其他因素方面，你会学到更多关于JavaScript的概念。
