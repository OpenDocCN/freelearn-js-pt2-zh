- en: Chapter 3. Storing Data and Handling Collections
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。存储数据和处理集合
- en: In the previous chapter, we learned how to build templates and display data
    in them. We built the basic layout of our app and listed some post examples on
    the front page.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了如何构建模板并在其中显示数据。我们建立了我们应用程序的基本布局并在首页列出了一些后续示例。
- en: In this chapter, we will add post examples persistently to our database on the
    server. We will learn how we can access this data later on the client and how
    Meteor syncs data between clients and the server.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将持续向服务器上的数据库添加后续示例。我们将学习如何稍后在客户端访问这些数据，以及Meteor如何在客户端和服务器之间同步数据。
- en: 'In this chapter, we''ll cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Storing of data in Meteor
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Meteor中存储数据
- en: Cresting collections
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建集合
- en: Adding data to a collection
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向集合中添加数据
- en: Querying data from a collection
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从集合中查询数据
- en: Updating data in a collection
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在集合中更新数据
- en: What "database everywhere" means
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “无处不在的数据库”意味着什么
- en: The difference between the server's and the client's databases
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器数据库与客户端数据库的区别
- en: Note
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you've jumped right into the chapter and want to follow the examples, download
    the previous chapter's code examples from either the book's web page at [https://www.packtpub.com/books/content/support/17713](https://www.packtpub.com/books/content/support/17713)
    or from the GitHub repository at [https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter2](https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter2).
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你直接跳到这一章并想跟随示例，请从以下任一位置下载上一章的代码示例：[https://www.packtpub.com/books/content/support/17713](https://www.packtpub.com/books/content/support/17713)
    或 [https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter2](https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter2)。
- en: These code examples will also contain all the style files, so we don't have
    to worry about adding CSS code along the way.
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些代码示例还将包含所有样式文件，因此我们无需担心在过程中添加CSS代码。
- en: Meteor and databases
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Meteor和数据库
- en: Meteor currently uses MongoDB by default to store data on the server, although
    there are drivers planned for use with relational databases too.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Meteor目前默认使用MongoDB在服务器上存储数据，尽管还计划有用于关系型数据库的驱动程序。
- en: Note
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you are adventurous, you can try one of the community-built SQL drivers,
    such as the `numtel:mysql` package from [https://atmospherejs.com/numtel/mysql](https://atmospherejs.com/numtel/mysql).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有冒险精神，可以尝试一下社区构建的SQL驱动程序，例如来自 [https://atmospherejs.com/numtel/mysql](https://atmospherejs.com/numtel/mysql)
    的 `numtel:mysql` 包。
- en: MongoDB is a NoSQL database. This means it is based on a flat document structure
    instead of a relational table structure. Its document approach makes it ideal
    for JavaScript as documents are written in BJSON, which is very similar to the
    JSON format.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: MongoDB是一个**NoSQL** 数据库。这意味着它基于平面文档结构，而不是关系表结构。它对文档的处理方式使它成为JavaScript的理想选择，因为文档是用BJSON编写的，这与JSON格式非常相似。
- en: Meteor has a *database everywhere* approach, which means that we have the same
    API to query the database on the client as well as on the server. Yet, when we
    query the database on the client, we are only able to access the data that we
    *published* to a client.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Meteor采用了一种*无处不在的数据库*的方法，这意味着我们有一个相同的API来在客户端和服务器上查询数据库。然而，当我们在客户端查询数据库时，我们只能访问我们*发布*给客户端的数据。
- en: 'MongoDB uses a data structure called **collection**, which is the equivalent
    of a table in a SQL database. Collections contain documents, where each document
    has its own unique ID. These documents are JSON-like structures and can contain
    properties with values, even with multiple dimensions, as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**MongoDB** 使用一种称为**集合**的数据结构，这在SQL数据库中相当于一个表。集合包含文档，每个文档都有自己的唯一ID。这些文档是类似JSON的结构，可以包含具有值的属性，甚至是多维属性，如下所示：'
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: These collections are used to store data in the server's MongoDB as well as
    the client-side `minimongo` collection, which is an in-memory database mimicking
    the behavior of the real MongoDB.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这些集合用于在服务器上的MongoDB以及客户端的`minimongo`集合中存储数据，后者是一个模仿真实MongoDB行为的内存数据库。
- en: Note
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We'll discuss more about `minimongo` at the end of this chapter.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章末尾更多地讨论`minimongo`。
- en: The MongoDB API allows us to use a simple JSON-based query language to get documents
    from a collection. We can pass additional options to only ask for *specific fields*
    or *sort* the returned documents. These are very powerful features, especially
    on the client side, to display data in various ways.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: MongoDB API允许我们使用简单的基于JSON的查询语言从集合中获取文档。我们可以传递其他选项，只询问*特定字段*或*对返回的文档进行排序*。这些功能在客户端尤其强大，可以以各种方式显示数据。
- en: Setting up a collection
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置集合
- en: To see all this in action, let's get right on it by creating our first collection.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 为了亲眼看到这一切，让我们通过创建我们的第一个集合来开始。
- en: 'We create a file called `collections.js` inside our `my-meteor-blog` folder.
    We need to create it in the root folder so that it will be available on both the
    client and the server. Now let''s add the following line of code to the `collections.js`
    file:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`my-meteor-blog`文件夹内创建一个名为`collections.js`的文件。我们需要在根目录中创建它，这样它才能在客户端和服务器上都可用。现在让我们将以下代码行添加到`collections.js`文件中：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This will make the `Posts` variable globally available, as we haven't used the
    `var` keyword, which would restrict it to the scope of this file.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使`Posts`变量在全球范围内可用，因为我们没有使用`var`关键字，这会将它们限制为该文件的范围。
- en: '`Mongo.Collection` is the API used to query the database and it comes with
    the following basic methods:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`Mongo.Collection`是查询数据库的API，它带有以下基本方法：'
- en: '`insert`: This method is used to insert documents into the database'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`insert`：此方法用于将文档插入数据库'
- en: '`update`: This method is used to update documents or parts of them'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`update`：此方法用于更新文档或它们的部分内容'
- en: '`upsert`: This method is used to insert or update documents or parts of them'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`upsert`：此方法用于插入或更新文档或它们的部分内容'
- en: '`remove`: This method is used to delete documents from the database'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`remove`：此方法用于从数据库中删除文档'
- en: '`find`: This method is used to query the database for documents'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`find`：此方法用于查询数据库中的文档'
- en: '`findOne`: This method is used to return only the first matched document'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`findOne`：此方法用于只返回第一个匹配的文档'
- en: Adding post examples
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加帖子示例
- en: 'To query the database for posts, we need to add some post examples. This has
    to be done on the server, as we want to add them persistently. To add an example
    post, perform the following steps:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 要查询数据库中的帖子，我们需要添加一些帖子示例。这必须在服务器上完成，因为我们希望它们持久存在。要添加一个示例帖子，请执行以下步骤：
- en: We create a file called `main.js` inside our `my-meteor-blog/server` folder.
    Inside this file, we will use the `Meteor.startup()` function to execute the code
    on the start of the server.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在`my-meteor-blog/server`文件夹内创建一个名为`main.js`的文件。在这个文件中，我们将使用`Meteor.startup()`函数在服务器启动时执行代码。
- en: 'We then add the post example, but only when the collection is empty. So to
    prevent this, we add them every time we restart the server, as follows:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们然后添加帖子示例，但只有在集合为空时。为了防止这种情况，我们每次重启服务器时都添加它们，如下所示：
- en: '[PRE2]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, when check out the terminal, we should see something similar to the following
    screenshot:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们检查终端时，我们应该看到与以下屏幕截图类似的某些内容：
- en: '![Adding post examples](img/00007.jpeg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![添加帖子示例](img/00007.jpeg)'
- en: Note
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We can also add dummy data using the Mongo console instead of writing it in
    our code.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用Mongo控制台添加虚拟数据，而不是在代码中编写它们。
- en: To use the Mongo console, we start the Meteor server using `$ meteor`, and then
    in a second terminal we run `$ meteor mongo`, which brings us to a Mongo shell.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Mongo控制台，我们首先使用`$ meteor`启动Meteor服务器，然后在第二个终端运行`$ meteor mongo`，这将我们带到Mongo
    shell。
- en: 'Here, we can simply add documents using MongoDB''s syntax:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以简单地使用MongoDB的语法添加文档：
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Querying a collection
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查询集合
- en: The server did restart when we saved our changes. At this point, Meteor added
    five post examples to our database.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们保存我们的更改时，服务器确实重新启动了。在此阶段，Meteor在我们的数据库中添加了五个帖子示例。
- en: Note
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If the server didn't restart, it means that we made a mistake in the syntax
    somewhere in our code. When we manually reload our browser or check out the terminal,
    we will see the error that Meteor gives us and we can fix it.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果服务器没有重新启动，这意味着我们在代码中的某个地方犯了语法错误。当我们手动重新加载浏览器或检查终端时，我们会看到Meteor给出的错误，然后我们可以进行修复。
- en: In case we messed up something in the database, we can always reset it using
    the `$ meteor reset` command in the terminal.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们数据库中出了什么问题，我们总是可以使用终端中的`$ meteor reset`命令来重置它。
- en: 'We can see these posts by simply opening up the console in our browser and
    typing the following command:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需在浏览器中打开控制台并输入以下命令即可查看这些帖子：
- en: '[PRE4]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This will return an array with five items, each of them being one of our example
    posts.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回一个包含五个项目的数组，每个项目都是我们的示例帖子之一。
- en: 'To list these newly inserted posts in our front page, we need to replace the
    content of our `postsList` helper in the `home.js` file with the following lines
    of code:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在我们前端页面上列出这些新插入的帖子，我们需要在 `home.js` 文件中替换我们 `postsList` 帮助器的內容，如下面的代码行所示：
- en: '[PRE5]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As we can see, we returned the collections cursor directly in the helper. This
    return value then gets passed to the `{{#each}}` block helper in our `home` template,
    which will then iterate over each post while rendering the `postInList` template.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，我们直接在帮助器中返回了集合游标。这个返回值然后传递到我们的 `home` 模板中的 `{{#each}}` 块帮助器，该帮助器将在渲染
    `postInList` 模板时遍历每个帖子。
- en: Note
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that `Posts.find()` returns a cursor, which is more efficient when used
    in an `{{#each}}` block helper, whereas `Posts.find().fetch()` will return an
    array with the document objects. Using `fetch()`, we can manipulate the documents
    before returning them.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`Posts.find()` 返回一个游标，在 `{{#each}}` 块帮助器中使用时效率更高，而 `Posts.find().fetch()`
    将返回一个包含文档对象的数组。使用 `fetch()`，我们可以在返回之前操纵文档。
- en: We pass an options object as the second parameter to the `find()` function.
    The option we are passing will sort the result based on `timeCreated` and `-1`.
    The `-1` value means it will be sorted in descending order (`1` means ascending
    order).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将一个选项对象作为 `find()` 函数的第二个参数。我们传递的选项将根据 `timeCreated` 进行排序，并使用 `-1`。`-1` 的值意味着它将按降序排序（`1`
    表示升序）。
- en: 'Now, when we check out our browser, we will see that all of our five posts
    are listed, as shown in the following screenshot:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们查看我们的浏览器时，我们会看到我们的五篇帖子全部列出，如下面的截图所示：
- en: '![Querying a collection](img/00008.jpeg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![查询集合](img/00008.jpeg)'
- en: Updating a collection
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新集合
- en: Now that we know how to insert and fetch data, let's take a look at how to update
    data in our database.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经知道如何插入和获取数据，让我们来看看如何在我们的数据库中更新数据。
- en: As we've already seen before, we can use the console of our browser to play
    with the database. For our next examples, we will use only the console to see
    how Meteor reactively changes the templates when we change data.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前所见，我们可以使用浏览器的光标来玩转数据库。对于我们接下来的例子，我们将只使用控制台来了解当我们在数据更改时，Meteor 如何反应性地改变模板。
- en: 'To be able to edit a post in our database, we first need to know the `_id`
    field of its entry. To find this out, we need to type the following command:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够在我们的数据库中编辑一篇帖子，我们首先需要知道其条目的 `_id` 字段。为了找出这个，我们需要输入以下命令：
- en: '[PRE6]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This will return us all the documents in the `Posts` collection, as we are not
    passing any specific query object.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回 `Posts` 集合中的所有文档，因为我们没有传递任何特定的查询对象。
- en: In the returned array, we need to take a look at the last item, with the **My
    Fifth entry** title, and copy the `_id` field to the clipboard using *Cmd* + *C*
    (or *Ctrl* + *C* if we're on Windows or Linux).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在返回的数组中，我们需要查看最后一个项目，标题为 **My Fifth entry** 的项目，并使用 *Cmd* + *C*（或者如果我们在 Windows
    或 Linux 上，使用 *Ctrl* + *C*）将 `_id` 字段复制到剪贴板。
- en: Note
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We can also simply use `Posts.findOne()`, which will give us the first document
    it finds.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以简单地使用 `Posts.findOne()`，这将给我们找到的第一个文档。
- en: 'Now that we have `_id`, we can simply update the title of our fifth post by
    typing the following command:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了 `_id`，我们可以通过输入以下命令简单地更新我们第五篇帖子的标题：
- en: '[PRE7]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As soon as we execute this command, we will notice that the title of the fifth
    post has changed to our new title, and if we now reload the page we will see that
    the title stays the same. This means the change was persistently made to the database.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们执行这个命令，我们就会注意到第五篇帖子的标题已经变成了我们新的标题，如果我们现在重新加载页面，我们会看到标题保持不变。这意味着更改已经持久地保存到了数据库中。
- en: 'To see Meteor''s reactivity across clients, open up another browser window
    and navigate to `http://localhost:3000`. When we now change our title again by
    executing the following command, we will see that all the clients get updated
    in real time:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 为了看到 Meteor 的响应性跨客户端，打开另一个浏览器窗口，导航到 `http://localhost:3000`。现在我们再次通过执行以下命令更改我们的标题，我们会看到所有客户端实时更新：
- en: '[PRE8]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Database everywhere
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据库无处不在
- en: In Meteor, we can use the browser console to update data, which means that we
    can update the database from the client. This works because Meteor automatically
    syncs these changes to the server and updates the database accordingly.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Meteor 中，我们可以使用浏览器的控制台来更新数据，这意味着我们可以从客户端更新数据库。这之所以有效，是因为 Meteor 会自动将这些更改同步到服务器，并相应地更新数据库。
- en: This happens because we have the `autopublish` and `insecure` core packages
    added to our project by default. The `autopublish` package automatically publishes
    all documents to every client, whereas the `insecure` package allows every client
    to update database records by its `_id` field. Obviously, this works well for
    prototyping but is infeasible for production, as every client can manipulate our
    database.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这之所以发生，是因为我们的项目默认添加了 `autopublish` 和 `insecure` 核心包。`autopublish` 包会自动将所有文档发布给每个客户端，而
    `insecure` 包允许每个客户端通过其 `_id` 字段更新数据库记录。显然，这对于原型设计来说很好，但对于生产环境来说是不切实际的，因为每个客户端都可以操作我们的数据库。
- en: If we remove the `insecure` package, we will need to add "allow and deny" rules
    to determine what a client is allowed to update and what they are not; otherwise,
    all updates will get denied. We will take a look at setting these rules in a later
    chapter, but for now this package serves us well, as we can immediately manipulate
    the database.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们移除了 `insecure` 包，我们将需要添加“允许和拒绝”规则来确定客户端可以更新哪些内容以及不可以更新哪些内容；否则，所有更新都将被拒绝。我们将在后面的章节中查看这些规则的设置，但现在这个包对我们很有用，因为我们可以立即操作数据库。
- en: In the next chapter, we will see how to manually publish only certain documents
    to a client. We will start that by removing the `autopublish` package.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将了解如何手动将某些文档发布给客户端。我们将从移除 `autopublish` 包开始。
- en: Differences between client and server collections
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 客户端与服务器集合之间的差异
- en: Meteor has a *database everywhere* approach. This means it provides the same
    API on the client as well as on the server. The data flow is controlled using
    a publication subscription model.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Meteor 采用了一种*无处不在的数据库*方法。这意味着它为客户端和服务器端提供了相同的 API。数据流动是通过发布订阅模型来控制的。
- en: On the server sits the real MongoDB database, which stores data persistently.
    On the client, Meteor has a package called `minimongo`, which is a pure in-memory
    database mimicking most of MongoDB's query and update functions.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器上运行着真正的 MongoDB 数据库，它负责持久化存储数据。在客户端，Meteor 包含一个名为 `minimongo` 的包，它是一个纯内存数据库，模仿了
    MongoDB 的大部分查询和更新功能。
- en: Every time a client connects to its Meteor server, Meteor downloads the documents
    that the client has subscribed to and stores them in its local `minimongo` database.
    From here, they can be displayed in a template or processed by functions.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 每次客户端连接到其 Meteor 服务器时，Meteor 都会下载客户端订阅的文档并将它们存储在其本地的 `minimongo` 数据库中。从这里，它们可以在模板中显示，或者由函数处理。
- en: When the client updates a document, Meteor syncs it back to the server, where
    it is passed through any allow/deny functions before being persistently stored
    in the database. This also works the other way; when a document in the server-side
    database changes, it will automatically sync to every client that is subscribed
    to it, keeping every connected client up to date.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 当客户端更新一个文档时，Meteor 会将其同步回服务器，在那里它将穿过任何允许/拒绝函数，然后被永久存储在数据库中。这也适用于反向操作；当服务器端数据库中的文档发生变化时，它将自动同步到所有订阅它的客户端，使每个连接的客户端保持最新。
- en: Summary
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概要
- en: In this chapter, we learned how to store data persistently in Meteor's MongoDB
    database. We also saw how we can query collections and update documents. We understood
    what the "database everywhere" approach means and how Meteor keeps every client
    up to date.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何在 Meteor 的 MongoDB 数据库中持久化存储数据。我们还看到了如何查询集合和更新文档。我们理解了“无处不在的数据库”方法意味着什么，以及
    Meteor 如何使每个客户端保持最新。
- en: 'To dig deeper into MongoDB and to query and update collections, take a look
    at the following resources:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更深入地了解 MongoDB 以及如何查询和更新集合，请查看以下资源：
- en: '[https://www.meteor.com/full-stack-db-drivers](https://www.meteor.com/full-stack-db-drivers)'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Meteor 完整栈数据库驱动](https://www.meteor.com/full-stack-db-drivers)'
- en: '[https://www.meteor.com/mini-databases](https://www.meteor.com/mini-databases)'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Meteor 迷你数据库](https://www.meteor.com/mini-databases)'
- en: '[https://docs.meteor.com/#/full/collections](https://docs.meteor.com/#/full/collections)'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Meteor 文档：集合](https://docs.meteor.com/#/full/collections)'
- en: '[http://docs.mongodb.org/manual/core/crud-introduction/](http://docs.mongodb.org/manual/core/crud-introduction/)'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[MongoDB 手册：CRUD 简介](http://docs.mongodb.org/manual/core/crud-introduction/)'
- en: '[http://docs.mongodb.org/manual/reference/operator/query/](http://docs.mongodb.org/manual/reference/operator/query/)'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[MongoDB 手册：查询操作符](http://docs.mongodb.org/manual/reference/operator/query/)'
- en: You can find this chapter's code examples either at [https://www.packtpub.com/books/content/support/17713](https://www.packtpub.com/books/content/support/17713)
    or on GitHub at [https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter3](https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter3).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这个章节找到代码示例，网址为[https://www.packtpub.com/books/content/support/17713](https://www.packtpub.com/books/content/support/17713)，或者在GitHub上查看[https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter3](https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter3)。
- en: In the next chapter, we will see how to control the data flow using publications
    and subscriptions so that we send only the necessary documents to the clients.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将了解如何使用发布和订阅控制数据流，从而只将必要的文档发送给客户端。
