- en: Chapter 9. JavaScript – The Future Is Now
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章。JavaScript - 未来已来
- en: So far in the previous chapters, we focused on how to become indispensably good
    at applying the concept of promises in different JavaScript libraries and how
    we can get maximum advantages in our future projects. However, this is not all
    about JavaScript.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我们重点关注了如何精通地将承诺的概念应用于不同的JavaScript库，以及如何在未来的项目中取得最大的优势。然而，这不仅仅是关于JavaScript。
- en: Although promises are huge and their implementations can bring a number of benefits,
    that's not the end of JavaScript. In fact, JavaScript has more to offer in the
    coming years than we can have even thought of. It is the progressive language
    of the modern age and it's gaining popularity day by day. What else can JavaScript
    offer us? We will try to find out in this chapter.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管承诺很大，它们的实现可以带来许多好处，但这不是JavaScript的终点。实际上，JavaScript在未来几年里能给我们带来比我们能想到的更多的东西。它是现代时代的进步语言，并且其受欢迎程度日益增加。JavaScript还能给我们提供什么？我们将在本章中尝试找出答案。
- en: Let's start with ECMAScript 6.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从ECMAScript 6开始。
- en: ECMAScript 6 (ECMA 262)
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ECMAScript 6（ECMA 262）
- en: ECMAScript Language Specification is in its sixth version. Since the time its
    first version was published in 1997, ECMAScript has become one of the world's
    most vastly adopted general purpose programming languages. It is known for its
    ability to embed itself in web browsers along with its ability to use server-side
    and embedded applications.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: ECMAScript语言规范已进入第六版。自从其第一个版本于1997年发布以来，ECMAScript已成为世界上广泛采用的一般目的编程语言之一。它以其能够嵌入自身到网络浏览器中以及其能够使用服务器端和嵌入式应用程序的能力而闻名。
- en: Many consider the sixth edition to be the most detailed and most widely covered
    update of ECMAScript since its inception in 1997.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 许多人认为第六版是自1997年ECMAScript成立以来最详细、最广泛涵盖的更新。
- en: We will consider the sixth edition of ECMA 262 for our discussion in this chapter;
    it's a draft version with the aims to include better support for large applications,
    library creation, and for the use of ECMAScript as a compilation target for other
    languages.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将讨论ECMA 262的第六版；这是一个草案版本，旨在更好地支持大型应用、库的创建，以及将ECMAScript作为其他语言的编译目标。
- en: harmony:generators
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: harmony:generators
- en: '`harmony:generators` are first class croutons that will be represented as objects,
    which will be encapsulating suspended execution contexts (that is, function activations).
    Till date, these are under review and can be changed, so we will just take these
    under consideration to gain knowledge about them.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`harmony:generators`是一等公民面包丁，将作为对象表示，这将封装悬挂的执行上下文（即，函数激活）。到目前为止，这些仍在审查中，可能会发生变化，所以我们只是考虑这些以获得关于它们的知识。'
- en: A few high-level examples would be helpful in better understanding of what the
    shape of harmony will be after it gets approved.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 几个高级示例将有助于更好地理解一旦获得批准后和谐形状会是什么样子。
- en: Since these are unapproved drafts, we will use examples from the ECMAScript
    parent website.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些是未经批准的草案，我们将使用来自ECMAScript母网站的示例。
- en: The reference code to be used in this section can be found at [http://wiki.ecmascript.org/doku.php?id=harmony:generators](http://wiki.ecmascript.org/doku.php?id=harmony:generators).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中将使用的参考代码可以在[http://wiki.ecmascript.org/doku.php?id=harmony:generators](http://wiki.ecmascript.org/doku.php?id=harmony:generators)找到。
- en: The Fibonacci series
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 斐波那契数列
- en: 'The "infinite" sequence of Fibonacci numbers is:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 斐波那契数的“无限”序列是：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Generators can be iterated over in loops:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 生成器可以在循环中迭代：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Generators are iterators as shown in the following code:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 生成器如以下代码所示是迭代器：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The preceding snippets are very high-level syntax, and there is a fair chance
    that they will be modified. Generators will be a key element and a remarkable
    addition to harmony but will take time to fully implement it.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的片段是非常高级的语法，它们很可能会被修改。生成器将是和谐的关键元素和显著添加，但完全实现它们需要时间。
- en: The MEAN stack
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MEAN 栈
- en: Although the MEAN stack is not a new concept, this has provided us the base
    of everything in JavaScript. It provides you with a JavaScript-based web server
    in the form of Node.js, a database in the form of MongoDB, which also has JavaScript
    as the core language, Express.js as a Node.js web application framework, and Angular.js
    as the frontend element that can let you extend HTML in a more advanced and modern
    way.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管MEAN堆栈不是一个新概念，但它为我们提供了JavaScript的一切基础。它提供了基于Node.js的JavaScript基础网络服务器，基于MongoDB的数据库，其中也使用JavaScript作为核心语言，Express.js作为Node.js网络应用程序框架，以及Angular.js作为可以让你以更先进、更现代的方式扩展HTML的前端元素。
- en: The concepts have been around for a while, but they have the potential to grow
    beyond imagination. Imagine a full-scale financial application or an entire banking
    system based on the MEAN stack or controlling industries. The hardware will be
    utilizing services from this stack, but this will happen in the near future, which
    is not so late, but still it needs time to fully implement the stack.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这些概念已经存在一段时间，但它们有超越想象的潜力。想象一个全面规模的金融应用程序，或者一个基于MEAN堆栈的整个银行系统，或者控制工业。硬件将利用这个堆栈的服务，但这种情况将在不久的将来发生，现在还不晚，但仍需要时间来完全实施这个堆栈。
- en: The reason I am saying this is because the corporate sector is still reluctant
    in adopting the MEAN standard or moving towards it and the reason is the level
    of maturity and financial backup of these open source products. Also, they have
    to upgrade their existing infrastructure. Whatever the reason, modern day web
    apps are heavily using this stack for writing lightweight and scalable apps. Let's
    mark the MEAN stack as our item number one for the future of JavaScript.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我之所以这样说，是因为企业界仍然不愿意采用MEAN标准或向其过渡，原因是这些开源产品的成熟度和财务支持水平。此外，他们还需要升级现有的基础设施。无论出于什么原因，当今的网络应用程序都大量使用这个堆栈来编写轻量级和可扩展的应用程序。让我们把MEAN堆栈作为JavaScript未来的第一个项目。
- en: Real-time communication in JavaScript
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实时通信在JavaScript中
- en: Another powerful feature that has been called the future of JavaScript is real-time
    communication between two sockets. Before JavaScript, socket programming had been
    around for so long that every major programming language had its version of reading
    and writing data using sockets, but with JavaScript, this is kind of a new concept
    that needs a lot of work at this stage. There are certain ways in which you can
    implement real-time socket programming in JavaScript, but the most mature way
    at the moment is by using Socket.IO.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个被认为将是JavaScript未来的强大功能是两个套接字之间的实时通信。在JavaScript之前，套接字编程已经存在很长时间，以至于每种主要编程语言都有其使用套接字读写数据的版本，但与JavaScript相比，这还是一个需要在这个阶段做大量工作的新概念。有几种方法可以在JavaScript中实现实时套接字编程，但目前最成熟的方法是使用Socket.IO。
- en: It basically enables a two-way event-based communication in real time that will,
    in turn, make the communication between two entities possible. It supports a variety
    of platforms, which includes web browsers, handheld devices, mobile devices, and
    any other device that has the communication feature enabled. Its implementation
    is fairly easy and reliable with high quality and speed.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 它基本上实现了一种双向基于事件的实时通信，从而使两个实体之间的通信成为可能。它支持各种平台，包括网络浏览器、便携式设备、移动设备以及具有通信功能的其他任何设备。它的实施相当容易且可靠，具有高质量和高速度。
- en: What can we achieve with this? Well, there are a number of possibilities, and
    it depends on how you can give them a try based on the support Socket.IO has to
    offer. At this point in time, you can write real-time analytics for your business
    intelligence or market predictions or trend identification, or you can use it
    for real-time media streaming from one part of the planet to other using its binary
    stream functions, or you can use it to monitor you premises from a remote location.
    All these implementations are available right now and such ideas can be brought
    to reality by using the functions smartly.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们能用这个实现什么？嗯，可能性很多，这取决于你如何尝试基于Socket.IO提供的支持。在这一点上，你可以为企业智能或市场预测或趋势识别编写实时分析，或者你可以使用它的二进制流功能，从地球的一部分实时流媒体传输到另一部分，或者你可以用它来远程监控你的场所。所有这些实施方法现在已经可用，通过聪明地使用这些功能，这些想法可以变为现实。
- en: The conclusion is that Socket.IO is one of the most robust real-time communication
    libraries that you can rely on. Looking at the current trend, we can safely say
    that real-time communication between devices can be one of the greatest strengths
    of JavaScript in future. This doesn't really have to happen via Socket.IO; any
    library that has potential will dominate. It's about the concept of how JavaScript
    will impress us in the near future.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 结论是Socket.IO是您可以依赖的最健壮的实时通信库之一。从当前趋势来看，我们可以有把握地说，设备之间的实时通信可能是JavaScript在未来最大的优势之一。这并不一定必须通过Socket.IO实现；任何有潜力的库都将占据主导地位。这是关于JavaScript在未来几年将如何给我们留下深刻印象的概念。
- en: Internet of Things
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 物联网
- en: Not too long ago, hardware interfacing with devices and machines was only limited
    to certain mature and developed programming languages, and no one gave any thought
    to whether JavaScript would be able to stand in the same line as these mature
    languages. It was a status quo limited to C++ or Java or some other high-level
    languages, but this is not the case anymore.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 不久前，硬件与设备和机器的接口还只限于某些成熟和发达的编程语言，没有人会考虑JavaScript能否与这些成熟语言站在同一条线上。这种现状局限于C++或Java或其他高级语言，但这种情况已经不再存在了。
- en: With more focus on JavaScript, developers and engineers are now trying to use
    the power of JavaScript in hardware interfacing. They are overcoming the problems
    of JavaScript by writing down intelligent code and by utilizing libraries that
    are already using communication to a device to some extent.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 随着对JavaScript的关注，开发者和工程师们现在正试图在硬件接口中使用JavaScript的力量。他们通过编写智能代码和使用已经使用某种程度通信的库来克服JavaScript的问题。
- en: One such effort is called Raspberry Pi. Let's talk about Raspberry Pi and its
    purpose, then we will take a look at how JavaScript is using it.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这样一个努力叫做树莓派。我们来谈谈树莓派及其目的，然后我们再看看JavaScript是如何使用它的。
- en: Raspberry Pi is a simple credit card-type computer design to learn programming
    in a very simple and effective manner. It comes with a board that you can call
    a computer without any peripherals attached. You have to attach the mouse, keyboard,
    and a screen to bring it to life. It has an operating system mounted on an SD
    card and is open for experiments. This is portable and you can attach any device
    to it or program another device using it. It has all the basic elements that a
    computer must have, but in a very simple, portable, and easy-to-handle manner.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 树莓派是一种设计简单的信用卡式计算机，用于以非常简单和有效的方式学习编程。它带有一个你可以称之为没有外设连接的计算机的主板。你必须连接鼠标、键盘和屏幕才能使其运行。它有一个安装在SD卡上的操作系统，可供实验使用。这是一种便携式设备，你可以连接任何设备，或者使用它编程其他设备。它拥有计算机必须具备的所有基本元素，但以非常简单、便携和易于处理的方式实现。
- en: Now, what does it have to do with JavaScript? Well, JavaScript is now everywhere,
    so its implementation has also started for Raspberry Pi with Pijs.io.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，JavaScript与树莓派有什么关系呢？嗯，JavaScript现在无处不在，所以它的实现也已经开始了，使用Pijs.io为树莓派提供支持。
- en: Like you can write in any other language for Raspberry Pi, you can also use
    JavaScript to write applications of your handheld computer. This JavaScript library
    will allow you to interact with hardware using JavaScript and program devices
    for your needs. You can see the library at [http://pijs.io/](http://pijs.io/).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 就像你可以用其他任何语言为树莓派编写代码一样，你也可以使用JavaScript为你的手持计算机编写应用程序。这个JavaScript库将允许你使用JavaScript与硬件交互并为你的需求编程设备。你可以查看该库在[http://pijs.io/](http://pijs.io/)。
- en: As discussed earlier, hardware interfacing is not limited to Raspberry Pi; any
    other implementations that are out there must be doing the same thing. The core
    of these lines is to show how powerful JavaScript is becoming and how widely it
    is accepted. Now, people are considering it for programming their devices, regardless
    of whether these devices belong to their daily use or commercial use. The future
    of JavaScript in computer hardware interfacing is very bright and it's growing
    rapidly.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，硬件接口不仅限于树莓派；其他任何实施方法都必须做同样的事情。这些线路的核心是展示JavaScript变得多么强大以及它被广泛接受的程度。现在，人们正在考虑用它来编程他们的设备，无论这些设备属于他们的日常使用还是商业使用。JavaScript在计算机硬件接口方面的未来非常光明，并且正在快速增长。
- en: Computer animation and in 3D graphics
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 计算机动画和3D图形
- en: In 1996, a whole new concept of **computer generated images** (**CGI**) was
    introduced in the revolutionary movie, *Toy Story*. This movie had set new standards
    in animation and computer graphics. The success of the movie was not just due
    to its screenplay but also due to the technology used to build it.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 1996年，在一部革命性的电影《玩具总动员》中，引入了一个全新的概念**计算机生成的图像**（**CGI**）。这部电影在动画和计算机图形方面树立了新的标准。这部电影的成功不仅仅是因为它的剧本，还得益于用来建造它的技术。
- en: In the current time, the field of computer animation has developed from many
    aspects and is still growing at a rapid speed. So, what does JavaScript have to
    do with all these advancements? Well, JavaScript is getting readier than ever
    before to play its role in computer animated and 3D graphics via the Web.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在当前时代，计算机动画领域从许多方面得到了发展，并且仍在以快速的速度增长。那么JavaScript与所有这些进展有什么关系呢？嗯，JavaScript前所未有的准备好通过Web在计算机动画和3D图形中发挥作用。
- en: WebGL is an open source JavaScript API for rendering 2D and 3D images and objects.
    The power of WebGL lies in its extension to nearly every browser by adopting the
    standards of browsers and their engines. It's highly adaptable and can be used
    in any modern day web browser to render images as required.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: WebGL是一个开源的JavaScript API，用于渲染2D和3D图像和对象。WebGL的力量在于它通过采用浏览器及其引擎的标准，扩展到几乎每一个浏览器。它非常适应性强，可以用于任何现代网络浏览器渲染所需的图像。
- en: By the virtue of WebGL, it's now possible to write interactive and cutting edge
    games that require no additional plug-in to run. It will also help in the future
    to see animated computer modeling with a browser rather than using heavy, costly,
    and bulky software. It will also help in visualizing information on the go. So,
    you can see the visual impact of stock prices when they go up and down to other
    stocks where you have invested.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 凭借WebGL，现在可以编写无需额外插件即可运行的互动性和尖端游戏。它还将在未来帮助我们在浏览器中看到动画计算机建模，而不是使用沉重、昂贵且庞大的软件。它还将帮助我们在移动中可视化信息。所以，你可以看到股价上涨和下跌对其他你投资过的股票的影响。
- en: So far, WebGL has gained support from all the key players of the industry that
    includes Apple for its Safari; Microsoft for its IE 11 and its later release,
    the Edge browser; Google for its Chrome browser; and Mozilla for its Firefox.
    Also, note here that WebGL is the brainchild of Vladimir Vukićević of Mozilla,
    who released its initial version in 2011.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，WebGL已经得到了包括苹果的Safari、微软的IE 11及其后续版本Edge浏览器、谷歌的Chrome浏览器以及Mozilla的Firefox在内的所有行业关键角色的支持。另外，请注意，WebGL是Mozilla的Vladimir
    Vukićević的创意，他在2011年发布了其初始版本。
- en: We can conclude with the fact that JavaScript has planted seeds in animated
    and 3D graphics as well, and in the near future, this will not only help JavaScript
    to gain credibility to, but will also bring ease to many developers and engineers
    who have to learn new languages every time they face a limitation in their current
    language pack. With a unified language, the output apps will be more interesting.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以得出结论，JavaScript已经在动画和3D图形领域播下了种子，在不久的将来，这不仅有助于JavaScript获得信任，还将使许多开发者和工程师在面对当前语言包的限制时，能够更容易地学习新的语言。有了统一的语言，输出的应用程序将更有趣。
- en: NoSQL databases
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NoSQL数据库
- en: There was a time when knowing RDBMS was a must for all developers, especially
    for those who were working on database-driven applications. The expectation was
    that you must know what primary keys were, what joins were, how to normalize databases,
    and what entity-relationship diagrams were. However, slowly this scenario is fading
    and a new concept of NoSQL is emerging in today's world, where vast data-driven
    applications are still in play.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 曾经有一段时间，了解关系数据库管理系统（RDBMS）是所有开发者的必备知识，特别是那些从事数据库驱动应用程序开发的人。人们期望你了解主键是什么，连接是什么，如何规范化数据库，以及实体-关系图是什么。然而，这种情况正在逐渐消失，在今天的世界中，一个新的概念NoSQL正在兴起，其中大量数据驱动的应用程序仍在使用。
- en: Before we move forward, let's talk about why engineers are focusing on non-RDBMS
    technologies. The reason is simple. Data-driven applications have grown in a tremendous
    way and they're generating terabytes of data around the world in every hour of
    the day. To process such data and get the desired result is not an easy task.
    **Database Administrators** (**DBAs**) write a query and execute it to fetch the
    data from distributed repositories of databases, they have to wait for several
    hours to know whether the results are printed on their screen or a slight error
    in placing the operator has destroyed all their efforts. This is because of the
    way RDBMS was designed, but in today's modern world, such delays and computing
    times cost you a fortune and your reputation.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在前进之前，让我们谈谈为什么工程师们正在关注非关系型数据库（RDBMS）技术。原因很简单。数据驱动的应用程序以惊人的方式增长，它们在每天的每个小时都在全球产生数以
    terabytes 的数据。处理这些数据并获得所需的结果并非易事。**数据库管理员**（**DBAs**）编写一个查询并执行它，从分布式的数据库存储库中获取数据，他们必须等待几小时才能知道结果是否显示在他们的屏幕上，或者由于操作符放置不当而使所有努力付之东流。这是由于RDBMS的设计方式，但在当今的现代世界中，这种延迟和计算时间会让你付出巨大的代价和声誉。
- en: What is the alternative then? NoSQL databases! In an earlier section of this
    chapter, we already saw that MongoDB played a key role in the MEAN stack. However,
    it's worth giving MongoDB a few more lines here as it's our candidate for the
    future growth of JavaScript.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 那么还有其他选择吗？非关系型数据库！在本章的前一部分，我们已经看到MongoDB在MEAN堆栈中发挥了关键作用。然而，在这里再给MongoDB多写几行是值得的，因为它是我们在JavaScript未来增长方面的候选人。
- en: What is MongoDB? It's a document-oriented NoSQL database with cross-platform
    adaptability with JSON such as documents. Till February 2015, it was the fourth
    most popular DBMS in the world and is considered to be the most popular data store
    in the world.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 那么MongoDB是什么呢？它是一个面向文档的非关系型数据库，具有跨平台的适应性，支持类似于JSON的文档。截至2015年2月，它是世界上第四受欢迎的数据库管理系统，被认为是世界上最受欢迎的数据存储。
- en: Why have we listed MongoDB in our candidates for future JavaScript growth? Simply
    because it's JavaScript-based and you can write scripts within its console in
    pure JavaScript. This makes it a highly adaptable DB technology based in JavaScript.
    The way it's progressing, it will not only obsolete current scenario of RDBMS
    but also will do wonders when combined with the rest of the MEAN stack or hardware
    interfacing or the Web or with Socket.IO.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为什么把MongoDB列入我们未来JavaScript增长的候选人名单中呢？仅仅因为它基于JavaScript，你可以在其控制台中用纯JavaScript编写脚本。这使得它成为一种基于JavaScript的高度可适应的数据库技术。它的发展方式不仅会取代当前的RDBMS场景，而且与MEAN堆栈的其他部分或硬件接口或网络或与Socket.IO结合时，也会产生奇妙的效果。
- en: In any shape, MongoDB will help the rest of the applications to grow in the
    future and also transform the existing RDBMS to more accessible and quick responder
    engines.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 无论以何种形式，MongoDB都将帮助其余的应用程序在未来增长，并将现有的RDBMS转变为更易于访问和快速响应的引擎。
- en: Summary
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned that JavaScript is a game changer and that it has
    a bright future ahead. JavaScript has a great tendency and adaptability, which
    will lead it to the next level of usage in almost every domain of computer science.
    The possibilities are limitless, and the sky is the limit for JavaScript. In the
    near future, JavaScript will dominate every other programming language due to
    its adaptability, acceptability, and contributions of thousands of developers
    and committed software giants.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解到JavaScript是一个改变游戏规则的语言，它有着光明的未来。JavaScript具有巨大的潜力和适应性，这将成为计算机科学几乎所有领域下一个级别的使用。可能性是无限的，天空是JavaScript的极限。在不久的将来，由于其适应性、接受度以及成千上万的开发者和坚定承诺的大型软件公司的贡献，JavaScript将主导其他编程语言。
- en: With this, we come to the end of this book.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 至此，我们结束了这本书。
- en: Let's recap what we learned in this book. At the beginning, we took a deep dive
    into what JavaScript is and from where it began, what the structure of JavaScript
    is and how different browsers are using it. We also saw different programming
    models and the one that is being used by JavaScript.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下在这本书中学到的内容。在开始时，我们深入探讨了JavaScript是什么以及它的起源，JavaScript的结构以及不同浏览器是如何使用它的。我们还看到了不同的编程模型以及JavaScript正在使用的模型。
- en: Then, our journey took a bend towards the core of this book, Promises.js. We
    learned a great deal about the basics of promises that has taken us towards the
    advanced usages of this concept. We then saw it with respect to different technologies
    and also samples the code to clear out any ambiguities.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们的旅程转向了本书的核心——Promises.js。我们学到了很多关于承诺基本知识，这使我们走向了这个概念的高级用法。我们接着从不同的技术角度了解了它，并展示了代码以消除任何模糊之处。
- en: So, all in all, this book is not only about promises in JavaScript, but it has
    a solid overview of the history, implementation, and usages of JavaScript and
    promises. With this book, you can not only become a master in promises, but also
    retain a unique level of understanding, thus implementing this concept in much
    brighter and numerous ways.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，总的来说，这本书不仅关于JavaScript中的承诺，而且涵盖了JavaScript和承诺的历史、实现和用法。有了这本书，你不仅可以成为承诺的大师，还可以保持独特的理解水平，从而以更多、更亮的方式实现这个概念。
- en: Happy learning!
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 学习愉快！
