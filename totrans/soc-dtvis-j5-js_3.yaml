- en: Chapter 3. OAuth
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。OAuth
- en: Creating visualizations is really only half the battle; the other half is getting
    high quality data to drive the visualization. There are a lot of potential data
    sources that you may wish to exploit. Almost every country has a national statistics
    organization tasked with gathering and analyzing economic and social statistics.
    In the past few years, many governments have begun adopting Open Data initiatives.
    Many businesses are also centered on providing usable data; think about the amount
    of data provided by various stock exchanges. You may even have access to internal
    company data you're using to drive your visualization, or your visualization may
    be part of a larger application that will provide you with data.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 创建可视化只是战斗的一半；另一半是获取高质量的数据来驱动可视化。你可能希望利用许多潜在的数据来源。几乎每个国家都有一个负责收集和分析经济和社会统计的国家统计组织。在过去的几年里，许多政府开始采用开放数据计划。许多企业也以提供可用数据为中心；想想各个股票交易所提供的数据量。你可能甚至可以访问公司内部数据来推动你的可视化，或者你的可视化可能是更大应用程序的一部分，该应用程序将为你提供数据。
- en: Another source, and the source we're interested in for this book, is social
    media. Social media sites have a plethora of data available to their users. The
    vast majority of social media sites provide APIs for accessing data in a programmatic
    fashion. Frequently, this data is personalized for your user account. For instance,
    Twitter filters the tweets you see by the users you're following, and Facebook
    similarly shows you updates from your friends. Some data is restricted, such that
    only certain groups of people can see it. You may not want the whole world seeing
    your Facebook updates, so you set permissions to only allow friends to see it.
    In order to personalize the data, most social networking sites require authentication
    and authorization for their APIs.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个来源，也是本书关注的来源，是社交媒体。社交媒体网站为其用户提供大量数据。绝大多数社交媒体网站提供API以编程方式访问数据。通常，这些数据是为你的用户账户定制的。例如，Twitter根据你关注的用户过滤你看到的推文，Facebook
    similarly shows you updates from your friends. 有些数据是受限的，只有特定的人群可以看到它。你可能不希望全世界都看到你的Facebook更新，所以你设置了权限，只允许朋友看到它。为了定制数据，大多数社交网络网站要求对其API进行身份验证和授权。
- en: 'Typically, the data you want to show users is related to their own social media
    account. In most cases, your visualization will not be hosted on the same system
    as the data you''re looking to use, as shown in the following figure. What''s
    more important is that the consumer of your visualization, the end user, is likely
    to be on yet another system:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，你想展示给用户的数据与他们自己的社交媒体账户有关。在大多数情况下，你的可视化不会托管在与你要使用的数据相同的系统上，如下面的图所示。更重要的是，你的可视化的消费者，即最终用户，可能还在另一个系统上：
- en: '![OAuth](img/6542OS_03_01.jpg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![OAuth](img/6542OS_03_01.jpg)'
- en: 'This means that there needs to be some way to get the social media data from
    the social media site to your visualization, and then on to the end user. On the
    surface, there seems to be the following two options:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着需要有一种方法将从社交媒体网站获取社交媒体数据，然后发送给最终用户。从表面上看，似乎有以下两个选项：
- en: Ask the user for their social media password and use that to authenticate and
    check authentication against the social media API
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要求用户提供他们的社交媒体密码，并使用该密码进行身份验证，并向社交媒体API检查认证。
- en: Ask the user to retrieve the data required for the visualization and send that
    on to your visualization
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要求用户获取用于可视化的数据，并将这些数据发送到你的可视化系统中。
- en: Neither option is particularly desirable. Users are likely to be resistant to
    giving out their passwords, especially to something as important as their social
    media sites. You probably don't want to take ownership of their password either,
    as that is an extra security headache for you. Most users are insufficiently tech-savvy
    to extract the data needed from their social media sites and send it onto your
    application. Even those who have the technical skills are not going to be impressed
    with the amount of work that will entail. Certainly, standard export mechanisms
    could be established and refined to make it easier for users, but before we develop
    a system for this, perhaps is there a third way?
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个选项都不是特别理想。用户可能不愿意将密码告诉别人，尤其是像他们的社交网站这样重要的事情。你也不太想掌握他们的密码，因为这会给你带来额外的安全问题。大多数用户技术水平不足，无法从他们的社交网站提取所需数据并发送到你的应用程序。即使那些有技术技能的人也不会对这涉及的工作量印象深刻。当然，可以建立和优化标准导出机制，以使用户更容易操作，但在我们开发这个系统之前，也许还有第三种方法？
- en: The trick seems to be in finding a way to get credential information from the
    end user to the social media site without telling the intervening visualization
    site too many details. As with many computer problems, a parallel problem and
    solution may be found outside of the world of computing.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这个技巧似乎在于找到一种方法，从终端用户那里获取凭证信息，而不必向中介可视化网站透露太多细节。正如许多计算机问题一样，可能需要在计算世界之外找到一个平行的问题和解决方案。
- en: 'Many electronic garage door openers and home security systems offer guest codes.
    These codes may have restrictions on them, such as they only operate on certain
    days of the week or a certain number of times. The purpose of these accounts is
    to provide limited access to your house for, say, cleaning people or trade people.
    A similar concept is purported to exist in high-end automobiles: a valet key causes
    the car to operate in a restricted mode. A similar mechanism could be used to
    grant your visualization access to a restricted portion of the social media site.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 许多电子车库门开启器和家庭安全系统提供访客代码。这些代码可能有一定的限制，比如只在工作日的某些时间或者一定次数内有效。这些账户的目的是为了提供有限访问你家中的权限，比如清洁工或工匠。一种类似的概念据称存在于高端汽车中：一种行李箱钥匙使汽车
    operate in a restricted mode。可以使用类似的机制，向你可视化应用授予访问社交网站受限部分的权限。
- en: The OAuth protocol provides a mechanism for authenticating applications to make
    use of your social media data and functionality without needing to know your password.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: OAuth协议提供了一种机制，通过这种机制，应用程序可以在不知道你的密码的情况下，使用你的社交媒体数据和功能进行身份验证。
- en: In this chapter we're going to look at, on a high level, how OAuth works and
    then try authenticating with a few social networks using our existing credentials.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将从高层次上了解OAuth是如何工作的，然后尝试使用我们现有的凭证对几个社交网络进行身份验证。
- en: Authentication versus authorization
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 认证与授权
- en: Frequently, there is confusion between the concepts of authentication and authorization.
    **Authentication** is the act of ensuring that somebody is who they say they are,
    while **authorization** is the act of ensuring that the person has the rights
    to perform an action. The concepts are related and have frequently been part of
    the same step. OAuth breaks the relationship between the two. Although there is
    typically an authentication step where logging into the server is required, the
    way that authentication is performed is not prescribed. If the user is already
    logged into the server site, the authorization step may be transparent to the
    user. The server can use any method it wishes to perform authentication. This
    opens the door to allowing for multi-factor authentication or even additional
    delegation of authentication. For instance, your visualization could request information
    from Stack Overflow that uses OpenID to delegate authentication. Thus, when a
    user requests access to Stack Overflow data, the user might actually need to log
    in with their Google account that would pass authentication details to Stack Overflow,
    which in turn would pass authorization credentials to your visualization.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 经常有人对认证和授权的概念感到困惑。**认证**是确保某人是他们所说的本人的行为，而**授权**是确保该人员有执行某动作的权利。这两个概念是相关的，并且经常是同一个步骤的一部分。OAuth打破了两者之间的关系。尽管通常有一个认证步骤，需要登录到服务器，但认证的方式并没有规定。如果用户已经登录到服务器网站，授权步骤可能对用户是透明的。服务器可以使用任何方法进行认证。这为允许多因素认证甚至额外的认证委托打开了大门。例如，您的可视化可能需要从使用OpenID进行认证的Stack
    Overflow获取信息。因此，当用户请求访问Stack Overflow数据时，用户可能实际上需要使用他们的Google账户登录，该账户会将认证细节传递给Stack
    Overflow，Stack Overflow再将授权凭据传递给您的可视化。
- en: It is important to keep in mind the differences between authentication and authorization
    when acquiring data for your visualization.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在获取用于可视化的数据时，记住认证与授权之间的区别是很重要的。
- en: The OAuth protocol
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OAuth协议
- en: Before the introduction and extensive update of OAuth, each service with which
    you needed to interact provided their own authorization protocol. These methods
    diverged significantly. Every time you wanted to make use of a new API, a new
    authorization scheme had to be learned and implemented. This made interacting
    with a significant number of services very difficult.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在OAuth的引入和广泛更新之前，每个你需要与之交互的服务都提供了自己的授权协议。这些方法有很大的不同。每次你想利用一个新的API时，都必须学习并实现一个新的授权方案。这使得与大量服务的交互变得非常困难。
- en: OAuth was created to solve the problem of a lack of standardization around authorization
    with different sites. The creation of Version 1.0 took about two years and was
    contributed to by a number of major industry players, as well as smaller interested
    parties.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: OAuth的创建是为了解决与不同站点围绕授权缺乏标准化的问题。1.0版本的创建花了大约两年时间，由多家主要行业参与者和一些较小感兴趣的方贡献而成。
- en: OAuth versions
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OAuth版本
- en: 'There are currently two major versions of OAuth in the wild: 1.0a and 2.0\.
    Version 1.0a is a security update to the 1.0 specification which corrected a session
    fixation attack. The 2.0 specification diverged significantly from 1.0a and, unfortunately,
    there remains a mixture of services that use different protocols in the wild.
    There is some political debate about the security of the 2.0 specification, which
    has resulted in a number of companies remaining on the 1.0a version. The biggest
    difference is that OAuth 1.0 was designed to be usable over an unencrypted connection.
    When OAuth 1.0 was created, SSL certificates were prohibitively expensive for
    many small providers. Thus, a complicated series of signed requests were specified
    which allows even unsecure connections to act as if they were secure.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 目前OAuth在野生的两个主要版本：1.0a和2.0。版本1.0a是对1.0规范的安全更新，它修正了会话固定攻击。2.0规范与1.0a有显著的不同，不幸的是，野生的服务中仍然混合使用了不同的协议。关于2.0规范的安全性存在一些政治辩论，这导致一些公司仍然停留在1.0a版本。最大的区别是OAuth
    1.0旨在通过未加密的连接使用。当OAuth 1.0被创建时，SSL证书对许多小提供商来说是非常昂贵的。因此，指定了一系列复杂的签名请求，即使是不安全的连接也可以表现得像安全的连接一样。
- en: Now SSL certificates have become cheaper, and hardware fast enough, that acquiring
    an SSL certificate is well within the means of even the smallest startup. Thus,
    Version 2.0 of OAuth relies on SSL to provide much of its security. It is not
    safe to use OAuth 2.0 over an unencrypted link. For our purposes, we can remain
    largely ignorant of the other differences between OAuth versions. However, you
    should be aware that the authorization and authentication tools you write for
    one social media site may not work on others. It is even possible that due to
    implementation differences, your authorization methods will not work between two
    different sites that both fully support OAuth 2.0.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在SSL证书已经变得便宜，硬件也足够快，以至于即使是最小的初创公司也负担得起SSL证书。因此，OAuth 2.0版本依赖于SSL为其提供大部分安全性。在未加密的链接上使用OAuth
    2.0是不安全的。对我们来说，我们可以 largely 忽略OAuth版本之间的其他差异。然而，你应该意识到，你为一家社交网站编写的授权和身份验证工具可能不会在其他的网站上工作。由于实现差异，你的授权方法甚至可能不会在两个完全支持OAuth
    2.0的不同网站上工作。
- en: 'OAuth defines some different names for the players we saw earlier in the chapter,
    so let''s make use of these terms. An updated view of the previous figure looks
    like the following:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: OAuth为我们在本章中看到的玩家定义了一些不同的名称，让我们使用这些术语。前一个图的更新视图如下：
- en: '![OAuth versions](img/6542OS_03_02.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![OAuth版本](img/6542OS_03_02.jpg)'
- en: '**Resource Owner** is the person who "owns" the data. For example, you "own"
    your updates on Facebook. **Client** is the site requesting access to data and
    **Server** is the one that has both the data and the credential information for
    the resource owner. The data that is owned is typically called the **protected**
    **resource,** as it is what the OAuth layer is protecting. I''ve left the icons
    in place from earlier for clarity, but the client doesn''t have to be a visualization,
    neither does the server have to be a social media site.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**资源所有者**是拥有数据的人。例如，你在Facebook上的更新“属于”你。**客户端**是请求访问数据的网站，**服务器**拥有资源所有者的数据和凭证信息。拥有的数据通常被称为**受保护的资源**，因为这是OAuth层所保护的。为了清晰起见，我保留了之前的位置中的图标，但客户端不必是可视化，服务器也不必是社交网站。'
- en: 'You''ve likely already made use of the OAuth protocol, even if you didn''t
    know it. If you''ve ever granted an application permission to use your Twitter
    account, you''ve used OAuth. The official Twitter applications such as **TweetDeck,**
    make use of OAuth for authorization. Each application requests access to specific
    functionality from Twitter. If you''re a Twitter user, you can see the applications
    you''ve authorized to use your Twitter account from the **Settings** panel. Each
    one of these applications has been granted permission to interact with Twitter
    as if it was you, as shown in the following screenshot:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经使用了OAuth协议，即使你不知道它。如果你曾经授予一个应用程序使用你的Twitter账户的权限，你就使用了OAuth。官方的Twitter应用程序，如**TweetDeck**，使用OAuth进行授权。每个应用程序请求从Twitter获取特定功能。如果你是Twitter用户，你可以在**设置**面板中查看你已经授权使用你的Twitter账户的应用程序。每一个这样的应用程序都被授权以你的身份与Twitter互动，如下面的截图所示：
- en: '![OAuth versions](img/6542OS_03_03.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![OAuth版本](img/6542OS_03_03.jpg)'
- en: In the preceding screenshot, you'll notice that there is a button next to each
    application that allows revoking that application's access. This is one of the
    great features of OAuth—applications never know your password, so you can remove
    their ability to act as you without having to change your password. If you do
    wish to change your Twitter password, you only need to do it with Twitter and
    not with all of the services to which you have granted permission to act on your
    behalf.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的截图中，你会注意到每个应用程序旁边都有一个按钮，允许撤销该应用程序的访问权限。这是OAuth的一大优点——应用程序永远不会知道你的密码，因此你可以移除它们代表你行动的能力，而无需更改你的密码。如果你确实希望更改你的Twitter密码，你只需要通过Twitter更改，而不需要更改所有你已经授权代表你行动的服务。
- en: If Twitter were to become aware that, say, [www.wordpress.com](http://www.wordpress.com)
    had been compromised, they could revoke the application's access for all their
    users at once. Keeping credentials is a difficult problem and not one which many
    developers wish to take on. If credentials can be retained by a reliable company
    such as Twitter, that removes a common point of failure.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果Twitter意识到，比如说[www.wordpress.com](http://www.wordpress.com)已经被攻陷，他们可以一次性为所有用户撤销该应用程序的访问权限。保管凭证是一个困难的问题，并不是许多开发者愿意承担的问题。如果凭证可以被像Twitter这样的可靠公司保留，那么这就移除了一个常见的失败点。
- en: Let's dig a bit more into how OAuth actually works. In order to understand what's
    happening, it is useful to walk through an example. In this example, our visualization
    will request some information from Facebook using its Graph API. The **Graph**
    API is the interface that Facebook have provided developers with to access the
    social graph, which is really just a collection of properties about a user. Facebook
    is an OAuth 2.0 site, so this example will use the workflow as described in OAuth
    2.0.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更深入地了解一下OAuth实际是如何工作的。为了理解正在发生的事情，走一遍示例是有用的。在这个示例中，我们的可视化将使用其Graph API从Facebook请求一些信息。**Graph**
    API是Facebook提供给开发者的接口，用于访问社交图谱，这其实只是一个关于用户的属性集合。Facebook是一个OAuth 2.0网站，所以这个示例将使用OAuth
    2.0描述的工作流程。
- en: 'Our visualization would like to access information from Facebook. The first
    time we load the visualization, we''re presented with a screen that allows users
    to click on a button to get access to the Facebook information, as shown in the
    following screenshot:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的可视化希望访问Facebook的信息。我们第一次加载可视化时，会看到一个屏幕，用户可以通过点击按钮来获取Facebook的信息，如下面的屏幕截图所示：
- en: '![OAuth versions](img/6542OS_03_04.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![OAuth版本](img/6542OS_03_04.jpg)'
- en: When we first set up our visualization site, we will have requested an authentication
    token from Facebook. This token is granted by Facebook to our site alone. As part
    of registering the application with Facebook, we will have entered a domain from
    which the token can be used. This grants some security over preventing others
    from using our tokens. Servers may have extensive checks in play to qualify an
    application to access their protected data.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们第一次设置可视化网站时，我们将从Facebook请求一个认证令牌。这个令牌是Facebook唯一授权给我们的网站的。在向Facebook注册应用程序的过程中，我们将输入一个域名，该域名可以用来使用令牌。这为防止其他人使用我们的令牌提供了一定的安全性。服务器可能执行广泛的检查，以验证应用程序是否有权访问其保护的数据。
- en: 'Our site will generate a request to the Facebook OAuth endpoint which would
    include the generated token. A typical URL will look like the following:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的网站将向Facebook OAuth端点生成一个请求，该请求将包括生成的令牌。一个典型的URL可能如下所示：
- en: '[PRE0]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Tip
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: A more detailed example of authenticating against Facebook can be found in [Chapter
    7](ch07.html "Chapter 7. Facebook"), *Facebook*.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 关于如何通过Facebook认证的更详细示例可以在[第7章](ch07.html "第7章 Facebook")*Facebook*中找到。
- en: 'The visualization now redirects directly to the Facebook login page, which
    will ask for your login information, as shown in the following screenshot:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 可视化现在直接重定向到Facebook登录页面，该页面会要求你输入登录信息，如下面的屏幕截图所示：
- en: '![OAuth versions](img/6542OS_03_05.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![OAuth版本](img/6542OS_03_05.jpg)'
- en: 'Once you''ve entered that information and correctly authenticated with Facebook,
    you''ll be redirected back to the page you specified in the `redirect_uri` parameter.
    This will typically be your original page. Appended to the URI will be a very
    lengthy token generated by Facebook and used in subsequent communications with
    their API:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你输入了相关信息并通过Facebook正确认证，你将被重定向到你 在`redirect_uri`参数中指定的页面。这通常会是你的原始页面。URL后面将附加一个由Facebook生成的非常长的令牌，用于与他们的API进行后续通信：
- en: '[PRE1]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Depending on the permissions your visualization has requested, Facebook may
    prompt you to grant these permissions explicitly to the visualization. The granting
    of permissions to applications is they key function of OAuth. Facebook has about
    50 different permissions that your application can request. This includes the
    following:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你的可视化请求的权限，Facebook可能会提示你明确地为可视化授予这些权限。向应用程序授予权限是OAuth的核心功能。Facebook有大约50种不同的权限，你的应用程序可以请求。这包括以下内容：
- en: '`email`'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`email`'
- en: '`user_likes`'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`user_likes`'
- en: '`user_location`'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`user_location`'
- en: 'The prompt to grant the application access to your Facebook information looks
    like the following screenshot:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 授予应用程序访问你Facebook信息的提示如下面的屏幕截图所示：
- en: '![OAuth versions](img/6542OS_03_06.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![OAuth版本](img/6542OS_03_06.jpg)'
- en: In this example, **Example Visualization** has requested access to my location,
    which is protected by the `user_location` permission. In Facebook's case, the
    granted permissions are encoded in the token to be used, but this is not explicitly
    laid out in the OAuth protocol.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，**示例可视化**请求访问我的位置，该位置受到`user_location`权限的保护。在Facebook的情况下，授予的权限被编码在要使用的令牌中，但这在OAuth协议中并没有明确说明。
- en: 'Once permissions are assigned, Facebook will redirect the user back to your
    `redirect_uri,` allowing you to leverage the token to query the Facebook API,
    as shown in the following screenshot:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦分配了权限，Facebook会将用户重定向回你的`redirect_uri,`，让你利用令牌查询Facebook API，如下面的屏幕截图所示：
- en: '![OAuth versions](img/6542OS_03_07.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![OAuth版本](img/6542OS_03_07.jpg)'
- en: For some OAuth sites, it is recommended that an additional call be performed
    at this stage to ensure that the returned token matches the current application.
    By sending our application's ID and the returned token from the authentication
    step, we are provided with some validation details that can be used to confirm
    the login has not been hijacked. Not every site requires this step; it is simply
    an added security suggested by Facebook. With the credentials, we can make calls
    to the Graph API. In this case, the visualization makes a very simple request
    to retrieve the authenticated user's first and last name. You can see how the
    request is formulated in the [Chapter 7](ch07.html "Chapter 7. Facebook"), *Facebook*.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 对于某些OAuth网站，在此阶段建议执行额外的调用，以确保返回的令牌与当前应用程序匹配。通过发送我们应用程序的ID和认证步骤返回的令牌，我们可以获得一些用于确认登录是否被劫持的验证详细信息。并非每个网站都需要这一步；这只是Facebook建议增加的一个安全措施。有了凭据，我们可以调用Graph
    API。在此例中，可视化非常简单地向获取认证用户的姓和名的请求。您可以在[第7章](ch07.html "第7章 Facebook") *Facebook*
    中看到请求是如何构成的。
- en: 'That''s it! So OAuth delegates the authorization and authentication steps to
    a third party without the need for complex tools. OAuth uses nothing but normal
    HTTP and SSL. The workflow for OAuth is almost entirely represented in the following
    figure:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！所以OAuth将授权和认证步骤委托给第三方，无需复杂工具。OAuth只使用正常的HTTP和SSL。OAuth的工作流程在以下图中几乎完全表示出来：
- en: '![OAuth versions](img/6542OS_03_08.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![OAuth版本](img/6542OS_03_08.jpg)'
- en: The variety of OAuth dialects and requirements can be difficult to understand.
    Finding just the right combination of tokens to receive proper authentication
    with different sites is almost as difficult as the mishmash of techniques used
    prior to OAuth. OAuth has a reputation for being difficult to understand and inconsistent
    . This can be attributed to the OAuth standard not being a standard in the same
    way that HTTP is a standard. With HTTP, if you comply with the standard, you can
    be assured that your service will be able to interact with all others. OAuth does
    not offer that same level of interactivity guarantee.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: OAuth的各种方言和要求可能难以理解。找到与不同网站正确认证的令牌的正确组合几乎和OAuth之前的混乱技术一样困难。OAuth以其难以理解和不一致而闻名。这可以归因于OAuth标准并非像HTTP那样的标准。通过HTTP，如果你遵守标准，你可以确信你的服务能够与其他所有服务进行交互。OAuth不提供那种级别的互动保证。
- en: If you're going to be using a lot of different data sources, perhaps if you're
    creating a mashup, it may be advisable to use a third-party service to communicate
    with the OAuth servers. Even if you're only using a single data source, you may
    not wish to complicate your development process with figuring out OAuth. Companies
    such as DailyCred and OAuth.io provide a service that abstracts away the difficulties
    of dealing with OAuth. They allow for authentication with numerous different OAuth
    providers through a consistent API. The hard work of fitting into the various
    OAuth APIs is handled by them leaving you free to concentrate on building your
    visualization.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您要使用很多不同的数据源，也许您正在创建一个mashup，那么建议您使用第三方服务与OAuth服务器通信。即使您只使用一个数据源，您可能也不希望将OAuth的复杂性引入您的开发过程。DailyCred和OAuth.io等公司提供了一个服务，消除了处理OAuth的困难。他们通过一致的API允许与多个不同的OAuth提供者进行认证。适应各种OAuth
    API的艰苦工作由他们完成，让您能够专注于构建可视化。
- en: 'Authenticating against Facebook with OAuth.io is as simple as running the following
    lines of code:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 使用OAuth.io对Facebook进行认证只需运行以下几行代码那么简单。
- en: '[PRE2]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The example visualization used in this chapter is closer to 70 lines of code.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中使用的示例可视化代码接近70行。
- en: Of course, these services have a monetary cost to them and also provide an additional
    failure point. As with all things, care must be taken to ensure that a good solution
    for OAuth is selected.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这些服务具有一定的货币成本，并且还提供了一个额外的失败点。和所有事情一样，要确保选择一个适合OAuth的好解决方案。
- en: Summary
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: While not every social media site makes use of OAuth, knowledge of how OAuth
    works and how it can be used to facilitate API usage will most likely improve
    your experience in developing visualizations. You should now be able to explain
    how OAuth works. In the next chapter we'll take a look at libraries for visualization.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然并非每个社交媒体网站都使用OAuth，但了解OAuth的工作原理以及如何用它来简化API使用，很可能会提升你在开发可视化过程中的体验。你现在应该能够解释OAuth是如何工作的。在下一章，我们将探讨可视化的库。
