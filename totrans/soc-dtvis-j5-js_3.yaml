- en: Chapter 3. OAuth
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating visualizations is really only half the battle; the other half is getting
    high quality data to drive the visualization. There are a lot of potential data
    sources that you may wish to exploit. Almost every country has a national statistics
    organization tasked with gathering and analyzing economic and social statistics.
    In the past few years, many governments have begun adopting Open Data initiatives.
    Many businesses are also centered on providing usable data; think about the amount
    of data provided by various stock exchanges. You may even have access to internal
    company data you're using to drive your visualization, or your visualization may
    be part of a larger application that will provide you with data.
  prefs: []
  type: TYPE_NORMAL
- en: Another source, and the source we're interested in for this book, is social
    media. Social media sites have a plethora of data available to their users. The
    vast majority of social media sites provide APIs for accessing data in a programmatic
    fashion. Frequently, this data is personalized for your user account. For instance,
    Twitter filters the tweets you see by the users you're following, and Facebook
    similarly shows you updates from your friends. Some data is restricted, such that
    only certain groups of people can see it. You may not want the whole world seeing
    your Facebook updates, so you set permissions to only allow friends to see it.
    In order to personalize the data, most social networking sites require authentication
    and authorization for their APIs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Typically, the data you want to show users is related to their own social media
    account. In most cases, your visualization will not be hosted on the same system
    as the data you''re looking to use, as shown in the following figure. What''s
    more important is that the consumer of your visualization, the end user, is likely
    to be on yet another system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![OAuth](img/6542OS_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This means that there needs to be some way to get the social media data from
    the social media site to your visualization, and then on to the end user. On the
    surface, there seems to be the following two options:'
  prefs: []
  type: TYPE_NORMAL
- en: Ask the user for their social media password and use that to authenticate and
    check authentication against the social media API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ask the user to retrieve the data required for the visualization and send that
    on to your visualization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Neither option is particularly desirable. Users are likely to be resistant to
    giving out their passwords, especially to something as important as their social
    media sites. You probably don't want to take ownership of their password either,
    as that is an extra security headache for you. Most users are insufficiently tech-savvy
    to extract the data needed from their social media sites and send it onto your
    application. Even those who have the technical skills are not going to be impressed
    with the amount of work that will entail. Certainly, standard export mechanisms
    could be established and refined to make it easier for users, but before we develop
    a system for this, perhaps is there a third way?
  prefs: []
  type: TYPE_NORMAL
- en: The trick seems to be in finding a way to get credential information from the
    end user to the social media site without telling the intervening visualization
    site too many details. As with many computer problems, a parallel problem and
    solution may be found outside of the world of computing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Many electronic garage door openers and home security systems offer guest codes.
    These codes may have restrictions on them, such as they only operate on certain
    days of the week or a certain number of times. The purpose of these accounts is
    to provide limited access to your house for, say, cleaning people or trade people.
    A similar concept is purported to exist in high-end automobiles: a valet key causes
    the car to operate in a restricted mode. A similar mechanism could be used to
    grant your visualization access to a restricted portion of the social media site.'
  prefs: []
  type: TYPE_NORMAL
- en: The OAuth protocol provides a mechanism for authenticating applications to make
    use of your social media data and functionality without needing to know your password.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter we're going to look at, on a high level, how OAuth works and
    then try authenticating with a few social networks using our existing credentials.
  prefs: []
  type: TYPE_NORMAL
- en: Authentication versus authorization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Frequently, there is confusion between the concepts of authentication and authorization.
    **Authentication** is the act of ensuring that somebody is who they say they are,
    while **authorization** is the act of ensuring that the person has the rights
    to perform an action. The concepts are related and have frequently been part of
    the same step. OAuth breaks the relationship between the two. Although there is
    typically an authentication step where logging into the server is required, the
    way that authentication is performed is not prescribed. If the user is already
    logged into the server site, the authorization step may be transparent to the
    user. The server can use any method it wishes to perform authentication. This
    opens the door to allowing for multi-factor authentication or even additional
    delegation of authentication. For instance, your visualization could request information
    from Stack Overflow that uses OpenID to delegate authentication. Thus, when a
    user requests access to Stack Overflow data, the user might actually need to log
    in with their Google account that would pass authentication details to Stack Overflow,
    which in turn would pass authorization credentials to your visualization.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to keep in mind the differences between authentication and authorization
    when acquiring data for your visualization.
  prefs: []
  type: TYPE_NORMAL
- en: The OAuth protocol
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before the introduction and extensive update of OAuth, each service with which
    you needed to interact provided their own authorization protocol. These methods
    diverged significantly. Every time you wanted to make use of a new API, a new
    authorization scheme had to be learned and implemented. This made interacting
    with a significant number of services very difficult.
  prefs: []
  type: TYPE_NORMAL
- en: OAuth was created to solve the problem of a lack of standardization around authorization
    with different sites. The creation of Version 1.0 took about two years and was
    contributed to by a number of major industry players, as well as smaller interested
    parties.
  prefs: []
  type: TYPE_NORMAL
- en: OAuth versions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are currently two major versions of OAuth in the wild: 1.0a and 2.0\.
    Version 1.0a is a security update to the 1.0 specification which corrected a session
    fixation attack. The 2.0 specification diverged significantly from 1.0a and, unfortunately,
    there remains a mixture of services that use different protocols in the wild.
    There is some political debate about the security of the 2.0 specification, which
    has resulted in a number of companies remaining on the 1.0a version. The biggest
    difference is that OAuth 1.0 was designed to be usable over an unencrypted connection.
    When OAuth 1.0 was created, SSL certificates were prohibitively expensive for
    many small providers. Thus, a complicated series of signed requests were specified
    which allows even unsecure connections to act as if they were secure.'
  prefs: []
  type: TYPE_NORMAL
- en: Now SSL certificates have become cheaper, and hardware fast enough, that acquiring
    an SSL certificate is well within the means of even the smallest startup. Thus,
    Version 2.0 of OAuth relies on SSL to provide much of its security. It is not
    safe to use OAuth 2.0 over an unencrypted link. For our purposes, we can remain
    largely ignorant of the other differences between OAuth versions. However, you
    should be aware that the authorization and authentication tools you write for
    one social media site may not work on others. It is even possible that due to
    implementation differences, your authorization methods will not work between two
    different sites that both fully support OAuth 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'OAuth defines some different names for the players we saw earlier in the chapter,
    so let''s make use of these terms. An updated view of the previous figure looks
    like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![OAuth versions](img/6542OS_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Resource Owner** is the person who "owns" the data. For example, you "own"
    your updates on Facebook. **Client** is the site requesting access to data and
    **Server** is the one that has both the data and the credential information for
    the resource owner. The data that is owned is typically called the **protected**
    **resource,** as it is what the OAuth layer is protecting. I''ve left the icons
    in place from earlier for clarity, but the client doesn''t have to be a visualization,
    neither does the server have to be a social media site.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You''ve likely already made use of the OAuth protocol, even if you didn''t
    know it. If you''ve ever granted an application permission to use your Twitter
    account, you''ve used OAuth. The official Twitter applications such as **TweetDeck,**
    make use of OAuth for authorization. Each application requests access to specific
    functionality from Twitter. If you''re a Twitter user, you can see the applications
    you''ve authorized to use your Twitter account from the **Settings** panel. Each
    one of these applications has been granted permission to interact with Twitter
    as if it was you, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![OAuth versions](img/6542OS_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot, you'll notice that there is a button next to each
    application that allows revoking that application's access. This is one of the
    great features of OAuth—applications never know your password, so you can remove
    their ability to act as you without having to change your password. If you do
    wish to change your Twitter password, you only need to do it with Twitter and
    not with all of the services to which you have granted permission to act on your
    behalf.
  prefs: []
  type: TYPE_NORMAL
- en: If Twitter were to become aware that, say, [www.wordpress.com](http://www.wordpress.com)
    had been compromised, they could revoke the application's access for all their
    users at once. Keeping credentials is a difficult problem and not one which many
    developers wish to take on. If credentials can be retained by a reliable company
    such as Twitter, that removes a common point of failure.
  prefs: []
  type: TYPE_NORMAL
- en: Let's dig a bit more into how OAuth actually works. In order to understand what's
    happening, it is useful to walk through an example. In this example, our visualization
    will request some information from Facebook using its Graph API. The **Graph**
    API is the interface that Facebook have provided developers with to access the
    social graph, which is really just a collection of properties about a user. Facebook
    is an OAuth 2.0 site, so this example will use the workflow as described in OAuth
    2.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our visualization would like to access information from Facebook. The first
    time we load the visualization, we''re presented with a screen that allows users
    to click on a button to get access to the Facebook information, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![OAuth versions](img/6542OS_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When we first set up our visualization site, we will have requested an authentication
    token from Facebook. This token is granted by Facebook to our site alone. As part
    of registering the application with Facebook, we will have entered a domain from
    which the token can be used. This grants some security over preventing others
    from using our tokens. Servers may have extensive checks in play to qualify an
    application to access their protected data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our site will generate a request to the Facebook OAuth endpoint which would
    include the generated token. A typical URL will look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A more detailed example of authenticating against Facebook can be found in [Chapter
    7](ch07.html "Chapter 7. Facebook"), *Facebook*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The visualization now redirects directly to the Facebook login page, which
    will ask for your login information, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![OAuth versions](img/6542OS_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you''ve entered that information and correctly authenticated with Facebook,
    you''ll be redirected back to the page you specified in the `redirect_uri` parameter.
    This will typically be your original page. Appended to the URI will be a very
    lengthy token generated by Facebook and used in subsequent communications with
    their API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Depending on the permissions your visualization has requested, Facebook may
    prompt you to grant these permissions explicitly to the visualization. The granting
    of permissions to applications is they key function of OAuth. Facebook has about
    50 different permissions that your application can request. This includes the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`email`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`user_likes`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`user_location`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The prompt to grant the application access to your Facebook information looks
    like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![OAuth versions](img/6542OS_03_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In this example, **Example Visualization** has requested access to my location,
    which is protected by the `user_location` permission. In Facebook's case, the
    granted permissions are encoded in the token to be used, but this is not explicitly
    laid out in the OAuth protocol.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once permissions are assigned, Facebook will redirect the user back to your
    `redirect_uri,` allowing you to leverage the token to query the Facebook API,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![OAuth versions](img/6542OS_03_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: For some OAuth sites, it is recommended that an additional call be performed
    at this stage to ensure that the returned token matches the current application.
    By sending our application's ID and the returned token from the authentication
    step, we are provided with some validation details that can be used to confirm
    the login has not been hijacked. Not every site requires this step; it is simply
    an added security suggested by Facebook. With the credentials, we can make calls
    to the Graph API. In this case, the visualization makes a very simple request
    to retrieve the authenticated user's first and last name. You can see how the
    request is formulated in the [Chapter 7](ch07.html "Chapter 7. Facebook"), *Facebook*.
  prefs: []
  type: TYPE_NORMAL
- en: 'That''s it! So OAuth delegates the authorization and authentication steps to
    a third party without the need for complex tools. OAuth uses nothing but normal
    HTTP and SSL. The workflow for OAuth is almost entirely represented in the following
    figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![OAuth versions](img/6542OS_03_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The variety of OAuth dialects and requirements can be difficult to understand.
    Finding just the right combination of tokens to receive proper authentication
    with different sites is almost as difficult as the mishmash of techniques used
    prior to OAuth. OAuth has a reputation for being difficult to understand and inconsistent
    . This can be attributed to the OAuth standard not being a standard in the same
    way that HTTP is a standard. With HTTP, if you comply with the standard, you can
    be assured that your service will be able to interact with all others. OAuth does
    not offer that same level of interactivity guarantee.
  prefs: []
  type: TYPE_NORMAL
- en: If you're going to be using a lot of different data sources, perhaps if you're
    creating a mashup, it may be advisable to use a third-party service to communicate
    with the OAuth servers. Even if you're only using a single data source, you may
    not wish to complicate your development process with figuring out OAuth. Companies
    such as DailyCred and OAuth.io provide a service that abstracts away the difficulties
    of dealing with OAuth. They allow for authentication with numerous different OAuth
    providers through a consistent API. The hard work of fitting into the various
    OAuth APIs is handled by them leaving you free to concentrate on building your
    visualization.
  prefs: []
  type: TYPE_NORMAL
- en: 'Authenticating against Facebook with OAuth.io is as simple as running the following
    lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The example visualization used in this chapter is closer to 70 lines of code.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, these services have a monetary cost to them and also provide an additional
    failure point. As with all things, care must be taken to ensure that a good solution
    for OAuth is selected.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While not every social media site makes use of OAuth, knowledge of how OAuth
    works and how it can be used to facilitate API usage will most likely improve
    your experience in developing visualizations. You should now be able to explain
    how OAuth works. In the next chapter we'll take a look at libraries for visualization.
  prefs: []
  type: TYPE_NORMAL
