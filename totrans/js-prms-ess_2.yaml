- en: Chapter 2. The Promise API and Its Compatibility
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 2 章。Promise API 及其兼容性
- en: Promises are fairly new to the JavaScript world, but workarounds have been around
    for some time now. As we have seen in the previous chapter, there are ways to
    address asynchronous programming in JavaScript, be it through events or callbacks.
    You also learned why promises differ from the traditional techniques for that
    purpose.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Promises 对于 JavaScript 世界来说是相当新的，但绕过方法已经存在一段时间了。正如我们在上一章所看到的，有方法可以解决 JavaScript
    中的异步编程问题，无论是通过事件还是回调。你还了解到为什么 promise 与传统技术不同。
- en: 'Next, we will go into more details of the Promise API. You will also learn
    about the current browser support for the promises standard and take a look at
    the JavaScript libraries out there that implement promises and promise-like features.
    In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将详细介绍 Promise API。你还将了解 promises 标准的当前浏览器支持，并查看实现 promises 和 promise-like
    特性的 JavaScript 库。在本章中，我们将涵盖以下主题：
- en: The Promise API and its details
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Promise API 及其详细内容
- en: Browser compatibility
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浏览器兼容性
- en: Promise implementations
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Promise 实施情况
- en: Libraries with promise-like features
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有 promise 类似特性的库
- en: Getting to know the API
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解 API
- en: 'Throughout this book, we will be mostly addressing and using promises as defined
    in the specification of Promises/A+ ([http://promisesaplus.com/](http://promisesaplus.com/)).
    The Promises/A+ organization produced the Promises/A+ specification with the aim
    of expounding the initial Promises/A specification into one that is clearer and
    better tested. The following is a quote from their website:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在整本书中，我们将主要讨论并使用在 Promises/A+ 规范中定义的 promise。（*[http://promisesaplus.com/](http://promisesaplus.com/)*）Promises/A+
    组织制定了 Promises/A+ 规范，目的是将初始的 Promises/A 规范阐述得更为清晰、测试更为充分。以下是从他们网站引用的一段话：
- en: '|   | *Promises/A+ is based on the concepts and `then` API presented in the
    CommonJS Promises/A proposal.* |   |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '|   | *Promises/A+ 是基于 CommonJS Promises/A 提案中提出的概念和 `then` API 构建的.* |   |'
- en: '|   | --*[http://promisesaplus.com/differences-from-promises-a](http://promisesaplus.com/differences-from-promises-a)*
    |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '|   | --*[http://promisesaplus.com/differences-from-promises-a](http://promisesaplus.com/differences-from-promises-a)*
    |'
- en: 'These differences are seen at three levels: omissions, additions, and clarifications.
    At the level of omissions, Promises/A+ has removed the following features from
    the original one:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这些差异体现在三个层面：省略、添加和澄清。在省略层面，Promises/A+ 从原始版本中移除了以下功能：
- en: '**Progress handling**: This feature includes a callback function that handles
    the operation/promise while still in progress, as in not fulfilled nor rejected.
    It was removed because implementers have concluded that, in practice, these functionalities
    have proven to be underspecified and currently there is no total agreement on
    their behaviors within the promise implementer community.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**进度处理**：此功能包括一个在操作/promise 仍在进行中时处理的回调函数，即尚未完成或拒绝。它被移除是因为实施者认为，在实践中，这些功能证明是规格不足的，目前在
    promise 实施者社区中对其行为没有达成完全一致。'
- en: '**Interactive promises**: This feature was an extended promise in the previous
    Promises/A proposal and it basically supported two additional functions for the
    promise methods; `get(propertyName)`, which requests the given property from the
    target of this promise, and `call(functionName, arg1, arg2, ...)`, which calls
    the given method/function in its parameter on the target of the promise. In the
    new A+ specification, this feature, along with the two functions, `call` and `get`,
    is considered out of scope when implementing a basic API required for interoperable
    promises.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**交互式承诺**：这个特性在之前的 Promises/A 提案中是一个扩展的承诺，它基本上为承诺方法支持了两个额外的函数；`get(propertyName)`，从
    promise 的目标请求给定的属性，和 `call(functionName, arg1, arg2, ...)`，在 promise 的目标的参数上调用给定的方法/函数。在新的
    A+ 规范中，这个特性以及两个函数 `call` 和 `get`，在实现 interoperable promises 所需的基本 API 时被认为是超出范围的。'
- en: '`promise!== resultPromise`: This feature was a requirement in the old proposal,
    which states that the result of a promise should not equal the promise, for example,
    `var resultPromise = promise.then(onFulfilled, onRejected)`. In fact, any implementation
    may allow for `resultPromise === promise`, provided that the implementation meets
    all the requirements.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`promise!== resultPromise`：这个特性在旧提案中是一个要求，它指出 promise 的结果不应该等于 promise，例如，`var
    resultPromise = promise.then(onFulfilled, onRejected)`。实际上，任何实现都可能允许 `resultPromise
    === promise`，只要实现满足所有要求。'
- en: 'At the level of additions, the Promises/A+ specification adds the following
    features and requirements to the existing Promises/A proposal:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在添加层面上，Promises/A+ 规格书在现有的 Promises/A 提案中增加了以下特性和要求：
- en: The behavior specifications in the scenario where `onFulfilled` or `onRejected`
    returns a thenable, including the details of the resolution procedure.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `onFulfilled` 或 `onRejected` 返回一个 thenable 的情况下，包括解决过程的详细规格。
- en: The reason passed to the `onRejected` handler, which must be the exception that
    is thrown back in that case.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 传递给 `onRejected` 处理程序的原因，必须是那种情况下抛出的异常。
- en: Both handlers `onFulfilled` and `onRejected` that must be called asynchronously.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 必须异步调用两个处理程序 `onFulfilled` 和 `onRejected`。
- en: Both handlers `onFulfilled` and `onRejected` that must be called functions.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 必须调用两个处理程序 `onFulfilled` 和 `onRejected`。
- en: 'Implementations must abide by the exact ordering of calls to the handlers `onFulfilled`
    and `onRejected` in case of consequent calls to the `then` method on the same
    promise. In a more spoken language, this means that, if the `then` method is called
    more than once on the same promise as in `promise.then().then()`, all the `onFulfilled`
    handlers used in these `then` calls must execute in the order of the originating
    calls to `then`. Hence, the `onFulfilled` callback in the first `then` function
    will execute first, followed by the `onFulfilled` callback in the second `then`,
    and so on. The same thing applies to the execution of the `onRejected` callbacks
    in such a scenario. Was it very complex? Maybe the following example can explain
    it better:'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现必须遵守在相同承诺上连续调用 `then` 方法时处理程序 `onFulfilled` 和 `onRejected` 的确切调用顺序。用更通俗的话来说，这意味着如果像
    `promise.then().then()` 这样在同一个承诺上多次调用 `then` 方法，所有这些 `then` 调用中使用的 `onFulfilled`
    处理程序必须按照原始调用 `then` 的顺序执行。因此，第一个 `then` 函数中的 `onFulfilled` 回调将首先执行，接着是第二个 `then`
    中的 `onFulfilled` 回调，依此类推。在這種情況下，`onRejected` 回调的执行也是如此。是否非常复杂？也许下面的例子可以解释得更好：
- en: '[PRE0]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The preceding code is not the same as the following line of code:'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前面的代码不同于下面的代码行：
- en: '[PRE1]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The difference is that `promise.then()` might return a different promise.
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 区别在于 `promise.then()` 可能返回一个不同的承诺。
- en: 'Lastly, at the level of clarifications, the Promises/A+ proposal applies different
    naming from Promises/A, because the authors of the new specifications wanted to
    reflect the vocabulary that has spread among promise implementations. These changes
    include the following:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在澄清的层面上，Promises/A+ 提案对 Promises/A 使用了不同的命名，因为新规格的作者希望反映在承诺实现中已经传播的词汇。这些变化包括以下内容：
- en: The promise states are referred to as pending, fulfilled, and rejected, replacing
    unfulfilled, fulfilled, and failed
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 承诺状态被称为挂起、满足和拒绝，代替未满足、满足和失败。
- en: When a promise is fulfilled, the promise has a *value*; similarly, when a promise
    is rejected, it has a *reason*
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当一个承诺被满足时，承诺有一个 *值*；同样，当一个承诺被拒绝时，它有一个 *原因*。
- en: 'The `then` method is the main player in the API. An object is not considered
    a promise if it does not have the `then` method specified to retrieve and access
    its current or eventual value or reason, as we saw in the previous chapter. This
    method takes two arguments that need to be a function, as the following example
    shows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`then` 方法是 API 中的主要角色。如果一个对象没有指定 `then` 方法来检索和访问其当前或最终值或原因，那么它就不被视为一个承诺，正如我们在上一章所看到的。这个方法需要两个参数，都必须是函数，如下面的例子所示：'
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Let''s dive deep into the details of `then` and the specs of its arguments,
    taking into consideration the previous code sample of a simple `then` method:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入探讨 `then` 的细节和其参数的规格，考虑到之前代码示例中的简单 `then` 方法：
- en: Both the arguments, `onFulfilled` and `onRejected`, are optional.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onFulfilled` 和 `onRejected` 两个参数都是可选的。'
- en: Both the arguments must be a function; otherwise, it must be ignored.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个参数都必须是函数；否则，它必须被忽略。
- en: Both the arguments must not be called more than once within the same `then`
    call.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在同一个 `then` 调用中，两个参数不得调用超过一次。
- en: The `onFulfilled` argument must be called only after a promise is fulfilled,
    with the value of the promise as its first argument.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onFulfilled` 参数必须在承诺被满足后调用，以承诺的值为第一个参数。'
- en: The `onRejected` argument must be called after the promise is rejected, with
    the reason of promise rejection as its first argument.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onRejected` 参数必须在承诺被拒绝后调用，以拒绝的原因作为其第一个参数。'
- en: The `onFulfilled` and `onRejected` arguments must not be passed as a `this`
    value because, if we apply the strict mode to the JavaScript code, this will be
    treated as undefined inside the handlers; in the quirks mode, it will be treated
    as the global object in that JavaScript code.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onFulfilled` 和 `onRejected` 参数不能作为 `this` 值传递，因为如果我们对 JavaScript 代码应用严格模式，这将在处理程序内部被当作未定义处理；在怪异模式中，它将被当作那个
    JavaScript 代码的全球对象处理。'
- en: The `then` method can be called more than once on the same promise.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`then` 方法可以在同一个承诺上被调用多次。'
- en: When a promise is fulfilled, all the respective `onFulfilled` handlers must
    be executed in the same order as their originating calls to `then`. The same rule
    applies for the `onRejected` callbacks.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当一个承诺被满足时，所有相应的 `onFulfilled` 处理程序必须按照它们发起的 `then` 调用的顺序执行。同样的规则适用于 `onRejected`
    回调。
- en: 'The `then` method must return a promise as follows:'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`then` 方法必须返回一个承诺，如下所示：'
- en: '[PRE3]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If either `onFulfilled` or `onRejected` returns a value *x*, the promise resolution
    procedure must be called to resolve the value *x*, as the following code shows:'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 `onFulfilled` 或 `onRejected` 返回一个值 `x`，承诺解决程序必须被调用以解决值 `x`，如下面的代码所示：
- en: '[PRE4]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If either the `onFulfilled` or `onRejected` handler throws an exception `e`,
    `promiseReturned` must be rejected with `e` as the reason of rejection or failure.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 `onFulfilled` 或 `onRejected` 处理程序抛出异常 `e`，`promiseReturned` 必须以 `e` 为拒绝或失败的原因被拒绝。
- en: If `onFulfilled` is not a function and the promise is fulfilled, `promiseReturned`
    must be fulfilled with the same value.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 `onFulfilled` 不是一个函数且承诺被满足，`promiseReturned` 必须以相同的值被满足。
- en: If `onRejected` is not a function and `promise1` is rejected, `promiseReturned`
    must be rejected with the same reason.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 `onRejected` 不是一个函数且 `promise1` 被拒绝，`promiseReturned` 必须用相同的原因拒绝。
- en: 'The previous list was a detailed specification of the promise and `then` method
    as defined and specified in the Promises/A+ open standard. We talked about the
    promise resolution procedure in the previous list, but we don''t know what it
    is yet. Well, the promise resolution procedure is basically an abstract operation
    that takes a promise and a value as arguments, and is indicated as follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 前面列表是对在 Promises/A+ 开放标准中定义和指定的承诺和 `then` 方法的详细规范。我们之前谈到了承诺解决程序，但我们还不知道它是什么。好吧，承诺解决程序基本上是一个抽象操作，它接受一个承诺和一个值作为参数，如下所示：
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If *x* is a thenable, meaning that it is an object or a function that defines
    a `then` method, the `resolve` method will try to force a promise to assume the
    state of *x*, under the assumption that *x* behaves at least somewhat like a promise.
    Otherwise, it will fulfill the promise with the value *x*.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `x` 是一个 thenable，意味着它是一个定义了 `then` 方法的的对象或函数，`resolve` 方法将尝试强制一个承诺假设 `x`
    的状态，假设 `x` 至少有点像一个承诺。否则，它将以值 `x` 满足承诺。
- en: The technique that promise resolution procedure uses to handle thenables allows
    promise implementations to work reliably with one another, as long as that promise
    exposes a `then` method that is Promises/A+-compliant. Additionally, it also allows
    implementations to *integrate* non-standard implementations with reasonable `then`
    methods.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 承诺解决程序使用的处理 thenables 的技术使得只要承诺暴露出一个符合 Promises/A+ 标准的 `then` 方法，承诺实现就可以可靠地相互工作。此外，它还允许实现*整合*具有合理
    `then` 方法的的非标准实现。
- en: '|   | *The Promise Resolution Procedure (PRP) is not a public API. It is intended
    to describe an important, yet abstract and internal/private procedure, where "procedure"
    here simply means "algorithm" rather than a concrete JavaScript function. A particular
    promise implementation may implement it however they feel is best.* |   |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '```'
- en: '|   | --*Brian Cavalier, co-editor at Promises/A+ explains* |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '```'
- en: The promise resolution procedure allows us to have a correct implementation
    of `promise.resolve`. It is also necessary to guarantee a correct implementation
    of `then`. You might notice that there is no return value for the promise resolution
    procedure because it is an abstract procedure that may be implemented in any way
    the author of that particular promise implementation sees fit. Hence, the return
    value is left up to the implementer as long as it achieves the end goal, which
    is to put the promise into the same state as *x*. So, conceptually, it affects
    a state transition on the promise.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 承诺解决过程允许我们有一个正确的`promise.resolve`实现。它也是保证`then`正确实现所必需的。你可能会注意到承诺解决过程中没有返回值，因为它是一个抽象过程，可以以任何作者认为合适的方式实现。因此，只要能达到最终目标，即把承诺置于与*x*相同的状态，返回值就留给实现者来决定。所以，从概念上讲，它影响承诺的状态转换。
- en: 'Although the implementation of the promise resolution procedure algorithm is
    left to the implementers, it has some rules of its own that we should abide by
    if we want to be compliant to the proposal when we need to run it. These rules
    are as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管承诺解决过程的实现留给实现者，但它有一些我们想要遵守的规则，如果我们想要在需要运行它时符合该提案。这些规则如下：
- en: If a promise and *x* refer to the same object, the promise should be rejected
    with a `TypeError` as the reason for the `onRejected` handler.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果一个承诺和*x*引用同一个对象，那么在`onRejected`处理程序中，承诺应该以一个`TypeError`作为拒绝的原因。
- en: 'If *x* is a promise, we should take on its current state. This rule allows
    the use of implementation-specific behaviors to actually adopt the state of known-conformant
    promises. The following are the conditions:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果*x*是一个承诺，我们应该采用其当前状态。这个规则允许使用特定于实现的的行为来实际采用已知符合规范的承诺的状态。以下是一些条件：
- en: If *x* is in the pending state, the promise must remain in the pending state
    until *x* is fulfilled or rejected
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果*x*处于待定状态，承诺必须保持待定状态，直到*x*被满足或被拒绝。
- en: If/when *x* is fulfilled, the promise should be fulfilled with the same value
    that *x* has
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果/当*x*被满足时，承诺应该用*x*具有的相同值被满足。
- en: If/when *x* is rejected, the promise should be rejected with the same reason
    that *x* was rejected with
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果/当*x*被拒绝时，承诺应该用*x*被拒绝的相同原因被拒绝。
- en: 'If *x* is an object or a function, and not a promise, then the following is
    done:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果*x*是一个对象或函数，且不是承诺，则执行以下操作：
- en: When we want to call `then`, the method should be `x.then`. This is a defensive
    measure that is imperative to ensure consistency in the face of an `accessor`
    property. This has a value that could change whenever we retrieve it.
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我们想要调用`then`时，方法应该是`x.then`。这是一个必要的防御措施，可以确保在`accessor`属性面前的一致性。这个属性值在我们每次获取它时都可能发生变化。
- en: If retrieving the `x.then` property ends up with throwing an exception `e`,
    the promise should be rejected with `e` as the reason.
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果获取`x.then`属性最终抛出了异常`e`，那么该承诺应该用`e`作为原因被拒绝。
- en: If `then` is a function, call it with *x* taking the value of `this`. The first
    argument should be `resolvePromise` and the second argument should be `rejectPromise`.
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果`then`是一个函数，用*x*调用它，`this`的值为值。第一个参数应该是`resolvePromise`，第二个参数应该是`rejectPromise`。
- en: If `then` does not qualify as a function, directly fulfill the promise with
    *x*.
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果`then`不符合函数的要求，直接用*x*满足承诺。
- en: If *x* is neither an object nor a function, the promise should be fulfilled
    with *x*.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果*x*既不是对象也不是函数，承诺应该用*x*来满足。
- en: 'Let''s have a look at the third rule. We saw that, if `then` is the function,
    the first argument should be `resolvePromise` and the second argument should be
    `rejectPromise` where the following rules apply:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看第三条规则。我们发现，如果`then`是函数，第一个参数应该是`resolvePromise`，第二个参数应该是`rejectPromise`，其中以下规则适用：
- en: If/when `resolvePromise` is called with a value *z*, the implementation must
    run `[[Resolve]](promise, z)`.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果/当用值*z*调用`resolvePromise`时，实现必须运行`[[Resolve]](promise, z)`。
- en: If/when `rejectPromise` is called with a reason *j*, the implementation must
    reject the promise with reason j.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果/当`rejectPromise`用理由*j*被调用时，实现必须用理由j拒绝该承诺。
- en: If both the handlers `resolvePromise` and `rejectPromise` are called, or in
    the case of multiple calls to the same argument, the first call should take precedence,
    and any other subsequent calls are ignored.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果同时调用了处理程序`resolvePromise`和`rejectPromise`，或者在同一参数上多次调用，第一次调用应优先考虑，其他后续调用均忽略。
- en: 'If calling then results in throwing an exception e, we have two conditions:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果调用`then`导致抛出异常e，我们有两个条件：
- en: If the `resolvePromise` or `rejectPromise` handlers have already been called,
    we should ignore `then`
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果`resolvePromise`或`rejectPromise`处理程序已经被调用，我们应该忽略`then`
- en: If not, the implementation should reject the promise with `e` as the reason
    returned
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果不然，实现应当拒绝该承诺，并以`e`作为返回的原因。
- en: 'The previous long list of rules acts as guidance for implementers. So, if you
    are implementing `then` in your Public API, these rules should apply to your algorithm
    to be complaint with the Promises/A+ standard specifications. I have asked Brian
    Cavalier about the need of PRP and he added the following:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 之前那长长的规则列表作为实现者的指导。所以，如果你在自己的公共API中实现`then`，这些规则应当适用于你的算法，以符合Promises/A+标准规范。我向Brian
    Cavalier询问了关于PRP的需求，他添加了以下内容：
- en: '*One of the most important aspects of the PRP is that it has been carefully
    designed to allow different promise implementations to interoperate in a reliable
    way.*'
  id: totrans-73
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**PRP最重要的方面之一是，它被精心设计，以允许不同的承诺实现以可靠的方式互操作。**'
- en: 'Furthermore, the promise resolution procedure even allows correctness in the
    face of a non-compliant (and slightly dangerous) thenables. An example would be
    the use of a `resolve` function to convert jQuery''s version of a promise, which
    doesn''t comply with the A+ standard, to a really simple standard-conforming promise.
    The following code illustrates that implementation:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，承诺解决程序甚至允许在非符合（略微危险）的thenables面前保持正确性。一个例子就是使用`resolve`函数将jQuery的承诺版本（不符合A+标准）转换为非常简单的符合标准的承诺。以下代码说明了这种实现：
- en: '[PRE6]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: At the end of the day, the core goal of Promises/A+ is to provide the minimum,
    most simple specification possible that will allow a reliable interoperation of
    different promise implementations, even in the face of hazards.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 归根结底，Promises/A+的核心目标是提供尽可能简单、最小的规范，以允许不同承诺实现之间的可靠互操作，即使面临危险。
- en: Note
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Just to erase any confusion that might come out, the promise resolution procedure
    is not exactly the same as the `promise.resolve` method that some implementations
    provide in their public API.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 为了消除可能产生的任何混淆，承诺解决程序并不完全等同于某些实现在其公共API中提供的`promise.resolve`方法。
- en: In alignment with the core goal of the Promises/A+ standard, the Promises/A+
    organization created a compliance test suite to test the compliance of a promise
    library or API implementation against the Promises/A+ specification. The compliance
    tests, which can be found at [https://github.com/promises-aplus/promises-tests](https://github.com/promises-aplus/promises-tests),
    check the correctness of the promise resolution procedure by testing `then`. These
    tests are also intended to provide more concrete guidance and evidence for whether
    the implementations meet the requirements and conform to standards.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 与Promises/A+标准的核心目标保持一致，Promises/A+组织创建了一个符合性测试套件，以测试承诺库或API实现是否符合Promises/A+规范。这些测试，可以在[https://github.com/promises-aplus/promises-tests](https://github.com/promises-aplus/promises-tests)找到，通过测试`then`来检查承诺解决程序的正确性。这些测试也旨在为实现是否满足要求并提供更具体的指导和证据，符合标准。
- en: Browser support and compatibility
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 浏览器支持和兼容性
- en: JavaScript is tightly coupled with browsers and the same applies to promises
    because promises are not a standard in the previous version of ECMAScript and
    will be part of the new ECMAScript 6 release; they won't be supported across all
    the browsers. Moreover, promises can be implemented and we will witness several
    libraries offering promise-like features or exposing promise capabilities. In
    the remaining portion of this chapter, we will cover these two points that are
    essential when it comes to working with promises.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript与浏览器紧密耦合，承诺也是如此，因为承诺在之前的ECMAScript版本中不是一个标准，并且将成为新的ECMAScript 6版本的组成部分；它们不会在所有浏览器上得到支持。此外，承诺可以被实现，我们将看到几个库提供类似承诺的功能或暴露承诺能力。在本章剩余的部分，我们将涵盖这两个对于使用承诺至关重要的要点。
- en: Checking the browser compatibility
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查浏览器兼容性
- en: As with any client-side technology, JavaScript has expressly been developed
    for use in a web browser in conjunction with HTML pages. It uses the browser to
    do the job, which is why it is a scripting language. Once the script is sent to
    the browser, it is then up to the latter to do something with it. There is a heavy
    dependency there; thus, browser compatibility is vital.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 与任何客户端技术一样，JavaScript 是为了与 HTML 页面一起在网页浏览器中使用而专门开发的。它利用浏览器来完成工作，这就是为什么它是一种脚本语言。一旦脚本发送到浏览器，接下来如何处理就取决于浏览器了。这里有很大的依赖性；因此，浏览器兼容性至关重要。
- en: 'There are already implementations of promises in some browsers; at the time
    of writing this book, there is a small selection of browsers that support promises,
    as the following ECMAScript 6 compatibility table by Kangax shows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 一些浏览器已经有了承诺的实现；在撰写本书时，支持承诺的浏览器选择很少，正如 Kangax 所示的以下 ECMAScript 6 兼容性表所示：
- en: '![Checking the browser compatibility](img/00002.jpeg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![检查浏览器兼容性](img/00002.jpeg)'
- en: 'Source: [http://kangax.github.io/compat-table/es6/#Promise](http://kangax.github.io/compat-table/es6/#Promise)'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 来源：[http://kangax.github.io/compat-table/es6/#Promise](http://kangax.github.io/compat-table/es6/#Promise)
- en: Note
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**The abbreviations used in the compatibility table**'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**兼容性表格中使用的缩写**'
- en: IE stands for Internet Explorer, FF for Firefox, CH for Chrome, SF for Safari,
    WK for Webkit, and OP for Opera.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: IE 代表 Internet Explorer，FF 代表 Firefox，CH 代表 Chrome，SF 代表 Safari，WK 代表 Webkit，OP
    代表 Opera。
- en: As we can see in the previous table, only the latest three versions of Firefox,
    as of version 29, and Chrome, as of 32, enable promises by default. Worry not,
    for there is a polyfill to add the promises functionalities to browsers that do
    not support it yet.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前表所示，只有最新三个版本的 Firefox（截至版本 29）和 Chrome（截至 32 版本）默认启用承诺。不必担心，因为有一个 polyfill
    可以将承诺功能添加到尚不支持它的浏览器中。
- en: Note
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A polyfill is a fairly new term coined by Remy Sharp and grew popular in the
    community of web developers. It represents a piece of code that delivers the technology
    and the behavior that we expect the browser to provide natively. We can think
    of it as a patch in terms of computing.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 补丁是一个相对较新的术语，由 Remy Sharp 提出，并在网页开发者社区中流行起来。它代表了一段代码，提供了我们期望浏览器原生提供的技术和行为。我们可以把它当作计算机领域的补丁来思考。
- en: 'This polyfill that does the magic and provides us with the support for promises
    can be downloaded from this link: [https://www.promisejs.org/polyfills/promise-4.0.0.js](https://www.promisejs.org/polyfills/promise-4.0.0.js).
    It basically adds support for promises to browsers that don''t yet implement it
    natively. It can also be used to provide support for promises in Node.js. The
    following code sample shows how to include it in our code files:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这个施展魔法的 polyfill 并为我们提供承诺支持的功能可以从这个链接下载：[https://www.promisejs.org/polyfills/promise-4.0.0.js](https://www.promisejs.org/polyfills/promise-4.0.0.js)。它基本上为尚未原生实现承诺的浏览器添加了承诺支持。它还可以用于为
    Node.js 提供承诺支持。以下代码示例展示了如何在我们的代码文件中包含它：
- en: '[PRE7]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We are showing the ECMAScript 6 compatibility table because promises are part
    of the ECMAScript 6 specification, which provides promises as a first-class language
    feature, and the implementation is based on the Promises/A+ proposal.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们展示 ECMAScript 6 兼容性表是因为承诺是 ECMAScript 6 规范的一部分，该规范将承诺作为一等语言特性提供，并且实现基于 Promises/A+
    提案。
- en: Libraries with promise-like features
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 具有 promise-like 功能的库
- en: The notion of promises is not very new to the world of web development and JavaScript.
    Developers may have met or used promises in JavaScript in a non-standardized manner
    through libraries. These libraries are implementations of the promise concept;
    some of them are spec-adhering implementations and are starting to take on the
    promise pattern, while many are not. Moreover, some of these libraries do not
    conform to the Promises/A+ standard, which is a very important requirement when
    choosing what JavaScript libraries to use in our projects.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 承诺的概念在网页开发和 JavaScript 的世界中并不新鲜。开发者可能已经在通过库以非标准化方式在 JavaScript 中遇到或使用过承诺。这些库是承诺概念的实现；其中一些是符合规范的实现，并开始采用承诺模式，而许多则不是。此外，其中一些库不符合
    Promises/A+ 标准，这在选择在我们的项目中使用哪些 JavaScript 库时是一个非常重要的要求。
- en: Tip
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Developers can test whether their libraries and APIs implementing promises are
    conforming to the Promises/A+ standard by using the Compliance Test Suite.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者可以通过使用合规性测试套件来测试他们实现的库和API是否符合Promises/A+标准。
- en: 'The following is a list of some libraries that are fully compliant with Promises/A+
    specs, and that I can thus unreservedly recommend:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是完全符合Promises/A+规范的一些库，因此我毫不犹豫地推荐它们：
- en: '**Q.js**: Developed by Kris Kowal and Domenic Denicola, it encompasses a full-featured
    promise library that includes adapters for Node.js and support for progress handlers.
    It can be downloaded from [https://github.com/kriskowal/q](https://github.com/kriskowal/q).'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Q.js**：由Kris Kowal和Domenic Denicola开发，它是一个功能完备的承诺库，包括适用于Node.js的适配器和支持进度处理器的支持。您可以从[https://github.com/kriskowal/q](https://github.com/kriskowal/q)下载。'
- en: '**RSVP.js**: Developed by Yehuda Katz, it features a very small and lightweight
    promise library. It can be downloaded from [https://github.com/tildeio/rsvp.js](https://github.com/tildeio/rsvp.js).'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**RSVP.js**：由Yehuda Katz开发，它具有非常小巧轻量的承诺库。您可以从[https://github.com/tildeio/rsvp.js](https://github.com/tildeio/rsvp.js)下载。'
- en: '**when.js**: Developed by Brian Cavalier, it offers an intermediary library
    and includes functions to manage collections of eventual operations. It also features
    functions that expose the progress and cancellation handlers of a promise. It
    can be downloaded from [https://github.com/cujojs/when](https://github.com/cujojs/when).'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**when.js**：由Brian Cavalier开发，它是一个中介库，包括管理预期操作集合的功能。它还具有暴露承诺的进度和取消处理器的功能。您可以从[https://github.com/cujojs/when](https://github.com/cujojs/when)下载。'
- en: In addition, we have `then` ([https://github.com/then](https://github.com/then))
    that is a collection of libraries that are simple Promises/A+ implementations
    that meet the specification and extend it with some functionalities such as progress
    while a promise is fulfilled or rejected.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还有`then`([https://github.com/then](https://github.com/then))，这是一组简单的Promises/A+实现库，符合规范并扩展了一些功能，例如在承诺被满足或拒绝时进行进度处理。
- en: 'Also, the famous jQuery has an API they called Deferred— available at [http://api.jquery.com/jquery.deferred/](http://api.jquery.com/jquery.deferred/),
    which claims to be similar to a promise. jQuery''s deferred didn''t return a new
    promise from `then` as the specification necessitates until version 1.8; hence,
    developers relying on jQuery were not getting the full capability and power of
    the promises pattern. Furthermore, a lot of code written using this implementation
    doesn''t piece perfectly with other promise implementations that did actually
    adhere to the specification. Deferreds are not Promise/A+-compliant, at least
    with the second part of the specification, which states that `then` doesn''t return
    a new promise object when executing one of the handlers. Hence, we cannot have
    function composition and chaining of the `then` function and ultimately, error
    bubbling due to a broken chain, which are the two most important points in the
    specification. This makes jQuery different and somewhat less useful. Nevertheless,
    if we need to use the `promise` object exposed by jQuery or any other library
    that does not conform to the specification for that matter, we can use one of
    the libraries listed earlier to convert that non-conforming promise to a real
    promise that is complaint with the A+ proposal. For example, using Q, we can have
    the following code that converts a jQuery promise to a standard one:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，著名的jQuery有一个称为Deferred的API——位于[http://api.jquery.com/jquery.deferred/](http://api.jquery.com/jquery.deferred/)，声称与承诺相似。直到版本1.8，jQuery的Deferred没有从`then`返回新的承诺对象，如规范所要求；因此，依赖jQuery的开发人员没有得到承诺模式的全功率和能力。此外，使用此实现编写的许多代码与其他确实符合规范的承诺实现不完全兼容。Deferred不符合Promise/A+规范，至少不符合规范的第二部分，该部分指出在执行处理器之一时`then`不会返回新的承诺对象。因此，我们无法实现`then`函数的组合和链式调用，以及由于链断裂而导致的错误冒泡，这两个规范中最重要的点。这使得jQuery与众不同且某种程度上不那么有用。尽管如此，如果我们需要使用jQuery或其他不遵循规范的库暴露的`promise`对象，我们可以使用前面提到的库之一将非符合规范的承诺转换为符合A+提案的真实承诺。例如，使用Q，我们可以有以下代码将jQuery承诺转换为标准承诺：
- en: '[PRE8]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Another example would be using the Promise polyfill library ([https://www.promisejs.org/polyfills/promise-4.0.0.js](https://www.promisejs.org/polyfills/promise-4.0.0.js))
    as the following code shows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个例子是使用承诺多填充库（[https://www.promisejs.org/polyfills/promise-4.0.0.js](https://www.promisejs.org/polyfills/promise-4.0.0.js)），如下代码所示：
- en: '[PRE9]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Although these promise implementations follow a standardized behavior, their
    overall APIs differ.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这些承诺实现遵循标准化的行为，但它们的整体API存在差异。
- en: Summary
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: As we have seen, the concept of promises is not very new and has been around
    in JavaScript with different implementations through libraries, be it standard-complaint
    or others. However, now, all these efforts have concluded in the Promises/A+ community
    specification that most libraries conform to. Thus, we now have native support
    for promises in JavaScript via a standard `Promise` class that is included in
    the next version of ECMAScript ECMAScript 6, allowing web platform APIs to return
    promises for their asynchronous operations. Also, we covered the promise API and
    the `then` method in depth and learned about the current browser compatibility
    for the new standard. Finally, we briefly went over some of the libraries that
    implement promises and are compliant with the Promises/A+ specification
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，承诺（promises）的概念并不非常新，并且在JavaScript中已经存在，通过不同的库实现了不同的实现方式，无论是符合标准的还是其他方式。然而，现在，所有这些努力都在Promises/A+社区规范中得到了总结，大多数库都符合这个规范。因此，我们现在可以通过包含在ECMAScript
    6下一个版本中的标准`Promise`类，在JavaScript中得到对承诺的内置支持，使得网络平台API能够为其异步操作返回承诺。此外，我们深入讲解了承诺API和`then`方法，并了解了新标准在当前浏览器中的兼容性。最后，我们简要介绍了几个实现承诺并符合Promises/A+规范的库。
- en: In the next chapter, we will go over chaining of promises and how to achieve
    it using the `then` method to enable multiple asynchronous actions.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讲解承诺的链式调用以及如何使用`then`方法来实现它，以启用多个异步操作。
