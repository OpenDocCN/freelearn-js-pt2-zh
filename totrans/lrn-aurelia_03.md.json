["```js\n<template> \n  <table> \n    <compose view=\"table-head.html\"></compose>  \n  </table> \n</template> \n\n```", "```js\n<template> \n  <table> \n    <thead as-element=\"compose \" view=\"table-head.html\"></thead> \n  </table> \n</template> \n\n```", "```js\n<template> \n  <require from=\"some-resource\"></require> \n  <!-- at this point, some-resource is available to the template --> \n</template> \n\n```", "```js\n<template> \n  <require from=\"./some-resource\"></require> \n</template> \n\n```", "```js\n<template> \n  <require from=\"some-resource\" as=\"another-resource\"></require> \n</template> \n\n```", "```js\n<template> \n  <require from=\"./my-component.css\"></require> \n</template> \n\n```", "```js\n<template> \n  <require from=\"./my-component.css\" as=\"scoped\"></require> \n</template> \n\n```", "```js\n<template> \n  <h1>Welcome ${user.name}!</h1> \n</template> \n\n```", "```js\n<template> \n  <h1>Welcome ${user ? user.name : 'anonymous user'}!</h1> \n</template> \n\n```", "```js\n<template> \n  <h1 class=\"${isFirstTime ? ' emphasis' : ''}\">Welcome!</h1> \n</template> \n\n```", "```js\n<template> \n  <a href.bind=\"url\">Go</a> \n</template> \n\n```", "```js\n<template> \n  <button click.trigger=\"open($event)\">Open</button> \n</template> \n\n```", "```js\n<template> \n  <person-form save.call=\"createPerson(person)\"></person-form> \n</template> \n\n```", "```js\nthis.save({ person: this.somePersonData }); \n\n```", "```js\n<template> \n  <input type=\"text\" ref=\"nameInput\"> \n  <p>Is your name really ${nameInput.value}?</p> \n</template> \n\n```", "```js\n<template> \n  <div innerhtml.bind=\"htmlContent\"></div> \n</template> \n\n```", "```js\n<template> \n  <div textcontent.bind=\"text\"></div> \n</template> \n\n```", "```js\n<template> \n  <div textcontent.bind=\"text\" contenteditable=\"true\"></div> \n</template> \n\n```", "```js\nsome-component.js \nexport class ViewModel { \n  styleAsString = 'font-weight: bold; font-size: 20em;'; \n  styleAsObject = { \n    'font-weight': 'bold', \n    'font-size': '20em' \n  }; \n} \nsome-component.html \n<template> \n  <div style.bind=\"styleAsString\"></div> \n  <div style.bind=\"styleAsObject\"></div> \n</template> \n\n```", "```js\n<template> \n  <div css=\"color: ${color}; background-color: ${bgColor};\"></div> \n</template> \n\n```", "```js\n<template> \n  <p show.bind=\"hasError\">An error occurred.</p> \n</template> \n\n```", "```js\n<template> \n  <p hide.bind=\"isValid\">Form is invalid.</p> \n</template> \n\n```", "```js\n<template> \n  <p if.bind=\"hasError\">An error occurred.</p> \n</template> \n\n```", "```js\n<template> \n  <h1>Some title</h1> \n  <template if.bind=\"hasError\"> \n    <i class=\"fa fa-exclamation-triangle\"></i> \n    An error occurred. \n  </template> \n</template> \n\n```", "```js\n<template> \n  <some-component if.bind=\"isVisible\"></some-component> \n</template> \n\n```", "```js\n<template> \n  <ul> \n    <li repeat.for=\"item of items\">${item.title}</li> \n  </ul> \n</template> \n\n```", "```js\n<template> \n  <ul> \n    <li repeat.for=\"person of people\"  \n        class=\"${person.isImportant ? 'important' : ''}\"> \n      ${person.fullName} \n    </li> \n  </ul> \n</template> \n\n```", "```js\n<template> \n  <ul> \n    <li repeat.for=\"person of people\"  \n        class=\"${person === selectedPerson ? 'active' : ''}\"> \n      ${person.fullName} \n    </li> \n  </ul> \n</template> \n\n```", "```js\n<template> \n  <ul> \n    <li repeat.for=\"[key, value] of map\">${key}: ${value}</li> \n  </ul> \n</template> \n\n```", "```js\n<template> \n  <ul class=\"pager\"> \n    <li repeat.for=\"i of pageCount\">${i + 1}</li> \n  </ul> \n</template> \n\n```", "```js\n<template> \n  <div> \n    <template repeat.for=\"item of items\"> \n      <i class=\"icon\"></i> \n      <p>${item}</p> \n    </template> \n  </div> \n</template> \n\n```", "```js\n<template> \n  <div> \n    <h1>${person.firstName} ${person.lastName}</h1> \n    <h3>${person.company}</h3> \n  </div> \n</template> \n\n```", "```js\n<template> \n  <div with.bind=\"person\"> \n    <h1>${firstName} ${lastName}</h1> \n    <h3>${company}</h3> \n  </div> \n</template> \n\n```", "```js\n<template> \n  <input type=\"text\" focus.bind=\"hasFocus\"> \n</template> \n\n```", "```js\n<template> \n  <compose view-model=\"some-component\"></compose> \n</template> \n\n```", "```js\n<template> \n  <compose view-model=\"widgets/${currentWidgetType}\"></compose> \n</template> \n\n```", "```js\nimport {AnotherComponent} from 'another-component'; \n\nexport class SomeComponent { \n  constructor() { \n    this.anotherComponent = new AnotherComponent(); \n  } \n} \n\n```", "```js\n<template> \n  <compose view-model.bind=\"anotherComponent\"></compose> \n</template> \n\n```", "```js\nexport class SomeComponent { \n  activate(data) { \n    this.activationData = data || 'none'; \n  } \n} \nsrc/some-component.html \n<template> \n  <p>Activation data: ${activationData}</p> \n</template> \n\n```", "```js\n<template> \n  <compose view-model=\"some-component\" model=\"Some parameter\"></compose> \n</template> \n\n```", "```js\n<template> \n  <compose view=\"some-template.html\"></compose> \n</template> \n\n```", "```js\n<template> \n  <div innerhtml.bind=\"htmlContent | sanitizeHTML\"></div> \n</template> \n\n```", "```js\n<template> \n  <h1>${title | truncate:20}</h1> \n</template> \n\n```", "```js\n${title | truncate:20:'...'} \n\n```", "```js\nexport class ViewModel { \n  title = 'Some title'; \n  maxTitleLength = 2; \n} \nsome-component.html \n<template> \n  <h1>${title | truncate:maxTitleLength}</h1> \n</template> \n\n```", "```js\n<template> \n  <h1>${title | truncate:20:'...' | capitalize}</h1> \n</template> \n\n```", "```js\n${text | truncate:20:'...'} \n\n```", "```js\nexport TruncateValueConverter { \n  toView(value, length, ellipsis = '...') { \n    value = value || ''; \n    return value.length > length ? value.substring(0, length) + ellipsis : value; \n  } \n} \n\n```", "```js\nimport {valueConverter} from 'aurelia-framework'; \n\n@valueConverter('truncate') \nexport Truncate { \n  // Omitted snippet... \n} \n\n```", "```js\n${title & oneTime} \n\n```", "```js\n${title & oneWay & throttle} \n\n```", "```js\n${title | toLower | capitalize & oneWay & throttle} \n\n```", "```js\n${title & throttle:500} \n\n```", "```js\n${title & someBehavior:p1:p2} \n\n```", "```js\n<template> \n  <em>${quote & oneTime}</em> \n</template> \n\n```", "```js\n<template> \n  ${title & throttle} \n  <input value.bind=\"value & throttle\"> \n</template> \n\n```", "```js\n<template> \n  ${title & throttle:800} \n  <input value.bind=\"value & throttle:800\"> \n</template> \n\n```", "```js\n<template> \n  <div mousemove.delegate=\"position = $event & throttle:800\"> \n    The mouse was last moved to (${position.clientX}, ${position.clientY}). \n  </div> \n</template> \n\n```", "```js\n<template> \n  <input value.bind=\"searchTerms & debounce\"> \n</template> \n\n```", "```js\n<template> \n  <input value.bind=\"text\"> \n  ${text & debounce:500} \n</template> \n\n```", "```js\n<template> \n  <div mousemove.delegate=\"position = $event & debounce:800\"> \n    The mouse was last moved to (${position.clientX}, ${position.clientY}). \n  </div> \n</template> \n\n```", "```js\n<template> \n  <input value.bind=\"title & updateTrigger:'change':'input' \"> \n</template> \n\n```", "```js\n<template> \n  Last updated ${lastUpdatedAt | timeInterval & signal:'now'} \n</template> \n\n```", "```js\nimport {inject} from 'aurelia-framework'; \nimport {BindingSignaler} from 'aurelia-templating-resources'; \n\n@inject(BindingSignaler) \nexport class SomeComponent { \n  constructor(signaler) { \n    this.signaler = signaler; \n  } \n\n  activate() { \n    this.handle = setInterval(() => this.signaler.signal('now'), 5000); \n  } \n\n  deactivate() { \n    clearInterval(this.handle); \n  } \n} \n\n```", "```js\n<template> \n  <a href.bind=\"url & signal:'signal-1':'signal-2' \">Go</a> \n</template> \n\n```", "```js\nexport class ViewModel { \n  get fullName() { \n    return `${this.firstName} ${this.lastName}`;\n  } \n} \n\n```", "```js\nimport {computedFrom} from 'aurelia-binding'; \n\nconst items = [/* a static, huge list of items */]; \nexport class ViewModel { \n  @computedFrom('searchTerm') \n  get matchCount() { \n    return items.filter(i => i.value.includes(this.searchTerm)).size; \n  } \n} \n\n```", "```js\nimport {computedFrom} from 'aurelia-binding'; \n\nconst items = [/* a static, huge list of items */]; \nexport class ViewModel { \n  model = { \n    searchTerm: '...' \n  }; \n\n  @computedFrom('model.searchTerm') \n  get matchCount() { \n    return items.filter(i => i.value.includes(this.searchTerm)).size; \n  } \n} \n\n```", "```js\nimport {computedFrom} from 'aurelia-binding'; \n\nexport class ViewModel { \n  items = [/* a huge list of items, that can change during the lifetime of the component */]; \n  searchTerms = '...'; \n\n  @computedFrom('items', 'searchTerms') \n  get matchCount() { \n    return this.items.filter(i => i.value.includes(this.searchTerm)).size; \n  } \n} \n\n```", "```js\nclient.configure(defaultProperties); \nclient.configure(config => { config.withDefaults(defaultProperties); }); \n\n```", "```js\nimport {inject} from 'aurelia-framework'; \nimport {HttpClient} from 'aurelia-fetch-client'; \n\n@inject(HttpClient) \nexport class ContactService { \n  constructor(http) { \n    this.http = http.configure(c => c.withBaseUrl('api/contacts')); \n  } \n} \n\n@inject(HttpClient) \nexport class AddressService { \n  constructor(http) { \n    this.http = http.configure(c => c.withBaseUrl('api/addresses')); \n  } \n} \n\n```", "```js\nimport {inject, NewInstance} from 'aurelia-framework'; \nimport {HttpClient} from 'aurelia-fetch-client'; \n\n@inject(NewInstance.of(HttpClient)) \nexport class ContactService { \n  constructor(http) { \n    this.http = http.configure(c => c.withBaseUrl('api/contacts')); \n  } \n} \n\n@inject(NewInstance.of(HttpClient)) \nexport class AddressService { \n  constructor(http) { \n    this.http = http.configure(c => c.withBaseUrl('api/addresses')); \n  } \n} \n\n```", "```js\nimport {HttpClient} from 'aurelia-fetch-client'; \n\nexport function configure(config) { \n  config.container.registerTransient(HttpClient); \n  //Omitted snippet... \n} \n\n```", "```js\nexport class BearerAuthorizationInterceptor { \n  constructor(token) { \n    this.token = token; \n  } \n\n  request(request) { \n    request.headers.set('Authorization', `Bearer ${this.token}`); \n  } \n} \n\n```", "```js\n> npm install font-awesome --save\n\n```", "```js\n<head>  \n  <!-- Omitted snippet --> \n  <link href=\"node_modules/font-awesome/css/font-awesome.min.css\" rel=\"stylesheet\"> \n</head> \n\n```", "```js\nimport {inject} from 'aurelia-framework'; \nimport {HttpClient} from 'aurelia-fetch-client'; \nimport {Contact} from './models'; \nimport environment from './environment'; \n\n@inject(HttpClient) \nexport class ContactGateway { \n\n  constructor(httpClient) { \n    this.httpClient = httpClient.configure(config => { \n      config \n        .useStandardConfiguration() \n        .withBaseUrl(environment.contactsUrl); \n    }); \n  } \n\n  getAll() {    \n    return this.httpClient.fetch('contacts') \n      .then(response => response.json()) \n      .then(dto => dto.map(Contact.fromObject)); \n  } \n\n  getById(id) { \n    return this.httpClient.fetch(`contacts/${id}`) \n      .then(response => response.json()) \n      .then(Contact.fromObject); \n  } \n} \n\n```", "```js\nnpm install aurelia-fetch-client --save\n\n```", "```js\n{ \n  //Omitted snippet... \n  \"build\": { \n    //Omitted snippet ... \n    \"bundles\": { \n      //Omitted snippet ... \n      { \n        \"name\": \"vendor-bundle.js\", \n        //Omitted snippet ... \n        \"dependencies\": [ \n          \"aurelia-fetch-client\", \n          //Omitted snippet ... \n        ] \n      } \n    } \n  } \n} \n\n```", "```js\nexport default { \n  debug: true, \n  testing: true, \n  contactsUrl: 'http://127.0.0.1:8000/', \n}; \n\n```", "```js\nimport {inject} from 'aurelia-framework'; \nimport {ContactGateway} from './contact-gateway'; \n\n@inject(ContactGateway) \nexport class ContactList { \n\n  contacts = []; \n\n  constructor(contactGateway) { \n    this.contactGateway = contactGateway; \n  } \n\n  activate() { \n    return this.contactGateway.getAll() \n      .then(contacts => { \n        this.contacts.splice(0); \n        this.contacts.push.apply(this.contacts, contacts); \n      }); \n  } \n} \n\n```", "```js\nexport class Contact { \n  static fromObject(src) { \n    return Object.assign(new Contact(), src); \n  } \n\n  get isPerson() { \n    return this.firstName || this.lastName; \n  } \n\n  get fullName() { \n    const fullName = this.isPerson  \n      ? `${this.firstName} ${this.lastName}`  \n      : this.company; \n    return fullName || ''; \n  } \n} \n\n```", "```js\n<template> \n  <section class=\"container\"> \n    <h1>Contacts</h1> \n    <ul> \n      <li repeat.for=\"contact of contacts\">${contact.fullName}</li> \n    </ul> \n  </section> \n</template> \n\n```", "```js\n> au run --watch\n\n```", "```js\nexport class OrderByValueConverter { \n  toView(array, property, direction = 'asc') { \n    array = array.slice(0); \n    const directionFactor = direction == 'desc' ? -1 : 1;  \n    array.sort((item1, item2) => { \n      const value1 = item1[property]; \n      const value2 = item2[property]; \n      if (value1 > value2) { \n        return directionFactor; \n      } else if (value1 < value2) { \n        return -directionFactor; \n      } else { \n        return 0; \n      } \n    }); \n    return array; \n  } \n} \n\n```", "```js\nexport function configure(config) { \n  config.globalResources([ \n    './value-converters/order-by', \n  ]); \n} \n\n```", "```js\nexport class GroupByValueConverter { \n  toView(array, property) { \n    const groups = new Map(); \n    for (let item of array) { \n      let key = item[property]; \n      let group = groups.get(key); \n      if (!group) { \n        group = { key, items: [] }; \n        groups.set(key, group); \n      } \n      group.items.push(item); \n    } \n    return Array.from(groups.values()); \n  } \n} \n\n```", "```js\n//Omitted snippet... \nexport class Contact { \n  //Omitted snippet... \n  get firstLetter() { \n    const name = this.lastName || this.firstName || this.company; \n    return name ? name[0].toUpperCase() : '?'; \n  } \n} \n\n```", "```js\n<template> \n  <section class=\"container\"> \n    <h1>Contacts</h1> \n    <div repeat.for=\"group of contacts|groupBy:'firstLetter'|orderBy:'key'\" \n         class=\"panel panel-default\"> \n      <div class=\"panel-heading\">${group.key}</div> \n      <ul class=\"list-group\"> \n        <li repeat.for=\"contact of group.items|orderBy:'fullName'\"    \n            class=\"list-group-item\"> \n          <a route-href=\"route: contact-details;  \n                         params.bind: { id: contact.id }\"> \n            <span if.bind=\"contact.isPerson\"> \n              ${contact.firstName} <strong>${contact.lastName}</strong> \n            </span> \n            <span if.bind=\"!contact.isPerson\"> \n              <strong>${contact.company}</strong> \n            </span> \n          </a> \n        </li> \n      </ul> \n    </div> \n  </section> \n</template> \n\n```", "```js\nexport class FilterByValueConverter { \n  toView(array, value, ...properties) { \n    value = (value || '').trim().toLowerCase(); \n    if (!value) { \n      return array; \n    } \n    return array.filter(item =>  \n      properties.some(property =>  \n        (item[property] || '').toLowerCase().includes(value))); \n  } \n} \n\n```", "```js\n<template> \n  <section class=\"container\"> \n    <h1>Contacts</h1> \n\n    <div class=\"row\"> \n      <div class=\"col-sm-2\"> \n        <div class=\"input-group\"> \n          <input type=\"text\" class=\"form-control\" placeholder=\"Filter\"  \n                 value.bind=\"filter & debounce\"> \n          <span class=\"input-group-btn\" if.bind=\"filter\"> \n            <button class=\"btn btn-default\" type=\"button\"  \n                    click.delegate=\"filter = ''\"> \n              <i class=\"fa fa-times\"></i> \n              <span class=\"sr-only\">Clear</span> \n            </button> \n          </span> \n        </div> \n      </div> \n    </div> \n\n    <div repeat.for=\"group of contacts \n                     | filterBy:filter:'firstName':'lastName':'company' \n                     | groupBy:'firstLetter'  \n                     | orderBy:'key'\" \n         class=\"panel panel-default\"> \n      <!-- Omitted snippet... --> \n    </div> \n  </section> \n</template> \n\n```", "```js\nimport {inject} from 'aurelia-framework'; \nimport {ContactGateway} from './contact-gateway'; \n\n@inject(ContactGateway) \nexport class ContactDetails { \n  constructor(contactGateway) { \n    this.contactGateway = contactGateway; \n  } \n\n  activate(params, config) { \n    return this.contactGateway.getById(params.id) \n      .then(contact => { \n        this.contact = contact; \n        config.navModel.setTitle(contact.fullName); \n      }); \n  } \n} \n\n```", "```js\n<template> \n  <section class=\"container\"> \n    <div class=\"row\"> \n      <div class=\"col-sm-2\"> \n        <img src.bind=\"contact.photoUrl\" class=\"img-responsive\" alt=\"Picture\"> \n      </div> \n      <template if.bind=\"contact.isPerson\"> \n        <h1 class=\"col-sm-10\">${contact.fullName}</h1> \n        <h2 class=\"col-sm-10\">${contact.company}</h2> \n      </template>  \n      <template if.bind=\"!contact.isPerson\"> \n        <h1 class=\"col-sm-10\">${contact.company}</h1> \n      </template> \n    </div> \n  </section> \n</template> \n\n```", "```js\n<div class=\"form-horizontal\"> \n  <!-- the rest of the template goes here. --> \n</div> \n\n```", "```js\n<div class=\"form-group\"> \n  <label class=\"col-sm-2 control-label\">Created on</label> \n  <div class=\"col-sm-10\"> \n    <p class=\"form-control-static\">${contact.createdAt}</p> \n  </div> \n</div> \n\n<div class=\"form-group\"> \n  <label class=\"col-sm-2 control-label\">Modified on</label> \n  <div class=\"col-sm-10\"> \n    <p class=\"form-control-static\">${contact.modifiedAt}</p> \n  </div> \n</div> \n\n```", "```js\n<div class=\"form-group\" if.bind=\"contact.birthday\"> \n  <label class=\"col-sm-2 control-label\">Birthday</label> \n  <div class=\"col-sm-10\"> \n    <p class=\"form-control-static\">${contact.birthday}</p> \n  </div> \n</div> \n\n```", "```js\n<template if.bind=\"contact.phoneNumbers.length > 0\"> \n  <hr> \n  <div class=\"form-group\"> \n    <h4 class=\"col-sm-2 control-label\">Phone numbers</h4> \n  </div> \n  <div class=\"form-group\" repeat.for=\"phoneNumber of contact.phoneNumbers\"> \n    <label class=\"col-sm-2 control-label\">${phoneNumber.type}</label> \n    <div class=\"col-sm-10\"> \n      <p class=\"form-control-static\"> \n        <a href=\"tel:${phoneNumber.number}\">${phoneNumber.number}</a> \n      </p> \n    </div> \n  </div> \n</template> \n\n```", "```js\n<template if.bind=\"contact.emailAddresses.length > 0\"> \n  <hr> \n  <div class=\"form-group\"> \n    <h4 class=\"col-sm-2 control-label\">Email addresses</h4> \n  </div> \n  <div class=\"form-group\"  \n       repeat.for=\"emailAddress of contact.emailAddresses\"> \n    <label class=\"col-sm-2 control-label\">${emailAddress.type}</label> \n    <div class=\"col-sm-10\"> \n      <p class=\"form-control-static\"> \n        <a href=\"mailto:${emailAddress.address}\"  \n           target=\"_blank\">${emailAddress.address}</a> \n      </p> \n    </div> \n  </div> \n</template> \n\n<template if.bind=\"contact.addresses.length > 0\"> \n  <hr> \n  <div class=\"form-group\"> \n    <h4 class=\"col-sm-2 control-label\">Addresses</h4> \n  </div> \n  <div class=\"form-group\" repeat.for=\"address of contact.addresses\"> \n    <label class=\"col-sm-2 control-label\">${address.type}</label> \n    <div class=\"col-sm-10\"> \n      <p class=\"form-control-static\">${address.number} ${address.street}</p> \n      <p class=\"form-control-static\">${address.postalCode} ${address.city}</p> \n      <p class=\"form-control-static\">${address.state} ${address.country}</p> \n    </div> \n  </div> \n</template> \n\n<template if.bind=\"contact.socialProfiles.length > 0\"> \n  <hr> \n  <div class=\"form-group\"> \n    <h4 class=\"col-sm-2 control-label\">Social Profiles</h4> \n  </div> \n  <div class=\"form-group\" repeat.for=\"profile of contact.socialProfiles\"> \n    <label class=\"col-sm-2 control-label\">${profile.type}</label> \n    <div class=\"col-sm-10\"> \n      <p class=\"form-control-static\"> \n        <a if.bind=\"profile.type === 'GitHub'\"  \n           href=\"https://github.com/${profile.username}\"  \n           target=\"_blank\">${profile.username}</a> \n        <a if.bind=\"profile.type === 'Twitter'\"  \n           href=\"https://twitter.com/${profile.username}\"  \n           target=\"_blank\">${profile.username}</a> \n      </p> \n    </div> \n  </div> \n</template> \n\n```", "```js\n<template if.bind=\"contact.note\"> \n  <hr> \n  <div class=\"form-group\"> \n    <label class=\"col-sm-2 control-label\">Note</label> \n    <div class=\"col-sm-10\"> \n      <p class=\"form-control-static\">${contact.note}</p> \n    </div> \n  </div> \n</template> \n\n```"]