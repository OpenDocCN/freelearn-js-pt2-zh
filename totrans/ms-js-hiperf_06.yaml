- en: Chapter 6. Constructors, Prototypes, and Arrays
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。构造函数、原型和数组
- en: Now that we are getting comfortable with optimizing JavaScript without a linter
    or an IDE testing our code for us, it's time to dive into more complex optimization,
    specifically when it comes to memory and object creation. In this chapter, we're
    going to take a look at optimizing larger JavaScript code bases using constructors,
    prototypes, and arrays.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经熟悉了在没有linter或IDE测试代码的情况下优化JavaScript，是时候深入研究更复杂的优化了，特别是当涉及到内存和对象创建时。在本章中，我们将探讨使用构造函数、原型和数组来优化大型JavaScript代码库。
- en: 'We are planning to cover the following topics in the chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们计划在本书中覆盖以下主题：
- en: Building with constructors and instance functions
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用构造函数和实例函数构建
- en: Alternate constructor functions using prototypes
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用原型实现替代构造函数
- en: Array performance
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数组性能
- en: Building with constructors and instance functions
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用构造函数和实例函数构建
- en: 'Here, we will learn about building with constructors and instance functions
    in the following ways:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将通过以下方式学习使用构造函数和实例函数：
- en: A quick word
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 闲言碎语
- en: Depending on skill level, some of us following this book may or may not know
    exactly what prototypes are in JavaScript. If you're one of the readers who've
    heard of prototypes in JavaScript but don't use them on a daily basis, you need
    not worry as we will quickly cover the basic concepts and how to apply them to
    JavaScript performance.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 根据技能水平，跟随本书的我们中的一些人可能知道JavaScript中的原型，也可能不知道。如果你是那些听说过JavaScript中的原型但不是每天都在使用它们的读者，你不必担心，因为我们很快就会覆盖基本概念以及如何将它们应用于JavaScript性能。
- en: If you're one of those who know what closures, inheritance, parent and child
    relations, and so on are, feel you fall into the latter category and so want to
    skip this chapter, I would encourage you to keep reading, at least to skim through
    the chapter, because, we as JavaScript developers tend to forget common concepts
    while working with JavaScript for many years and continuously focusing on just
    the factors that affect our performance.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是那些知道闭包、继承、父子关系等概念的人，觉得自己属于后一种情况，因此想跳过这一章，我会鼓励你继续阅读，至少要浏览一下这一章，因为，作为JavaScript开发者，我们在使用JavaScript多年的时间里，往往会忘记一些常见的概念，而只是专注于影响我们性能的因素。
- en: The care and feeding of function names
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 函数名称的维护
- en: Take a close look at this simple function shown below and see if you spot anything
    unusual about this function.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细观察下面这个简单的函数，看看你是否发现了这个函数的什么异常之处。
- en: '![The care and feeding of function names](img/7296OS_06_01.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![函数名称的维护](img/7296OS_06_01.jpg)'
- en: Now, when we look at the code, what we can see is a simple function named `AuthorName`
    holding the `author` parameter. The function uses a `use strict` statement discussed
    in [Chapter 2](ch02.html "Chapter 2. Increasing Code Performance with JSLint"),
    *Increasing Code Performance with JSLint*, which forces **Developer tools** or
    other similar inspectors to treat any kind of warnings in that scope as errors.
    We then return the `author` parameter using the `return` keyword.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们查看代码时，我们可以看到一个名为`AuthorName`的简单函数，它包含`author`参数。该函数使用了一个在[第2章](ch02.html
    "第2章。使用JSLint提高代码性能")，*使用JSLint提高代码性能*中讨论的`use strict`语句，该语句强制**开发者工具**或其他类似检查器将该作用域中的任何警告视为错误。然后我们使用`return`关键字返回`author`参数。
- en: This looks fairly normal; however something that trips up many JavaScript developers
    is how the function name is structured. Notice that `AuthorName` starts with a
    capital *A*. In JavaScript, when we declare a function name with a capital letter,
    we are actually telling the JavaScript interpreter that we are declaring a constructor.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来相当正常；然而，让许多JavaScript开发者困惑的是函数名称的结构。注意`AuthorName`以大写字母*A*开头。在JavaScript中，当我们用大写字母声明一个函数名时，我们实际上是在告诉JavaScript解释器我们正在声明一个构造函数。
- en: 'A constructor is simply a JavaScript function, and it works the same way as
    any other function. We can even print an author''s name to the console using a
    simple `console.log` function as shown in the following screenshot using **Developer
    tools**:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '构造函数就是一个JavaScript函数，它的工作方式与其他任何函数都一样。我们甚至可以使用简单的`console.log`函数将作者的姓名打印到控制台，如下所示，使用**开发者工具**:'
- en: '![The care and feeding of function names](img/7296OS_06_02.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![函数名称的维护](img/7296OS_06_02.jpg)'
- en: If we run this in an `about:blank` **Developer tools** console or dummy HTML
    page with this code, we will see the console output as the name just as we would
    expect. The problem is that, in order to efficiently use constructors, we need
    to use them with the `new` keyword.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在这个`about:blank` **开发者工具**控制台或者带有以下代码的空白HTML页面中运行这个，我们会看到与预期一样的控制台输出，正如我们期望的那样。问题是，为了有效地使用构造函数，我们需要使用`new`关键字。
- en: Now you may ask how we can possibly know if any of our existing JavaScript code
    uses constructors. Imagine a very large code base with functions everywhere; how
    can we check this if even the **Developer tools** option doesn't inform us that
    we need to use an instance using `new` rather than a `static` function call?
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可能会问，我们如何确定我们现有的JavaScript代码是否使用了构造函数。想象一个非常大的代码库，到处都是函数；如果连**开发者工具**选项都没有告诉我们需要使用`new`关键字而不是`static`函数调用的实例，我们如何检查这一点呢？
- en: 'Luckily, there is a way. If we remember in [Chapter 2](ch02.html "Chapter 2. Increasing
    Code Performance with JSLint"), *Increasing Code Performance with JSLint*, JSLint
    can show us if we need to use a `new` keyword. I''ve added the preceding code
    sample and enabled the **console** and **browser** objects in JSLint. Check out
    the error presented by JSLint in the following screenshot:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，有一个方法。如果我们回忆在[第二章](ch02.html "第2章 使用JSLint提高代码性能")*使用JSLint提高代码性能*中，JSLint可以告诉我们是否需要使用`new`关键字。我已经添加了前面的代码示例，并在JSLint中启用了`console`和`browser`对象。查看JSLint在下述屏幕快照中呈现的错误：
- en: '![The care and feeding of function names](img/7296OS_06_03.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![函数名称的维护](img/7296OS_06_03.jpg)'
- en: As we can see from JSLint, on line 11 we're given an error, `Missing 'new'`
    as our only error, indicating that we have a constructor and we need to use it
    as such.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们从JSLint看到的，在第11行我们得到了一个错误，`Missing 'new'`作为唯一的错误，这表明我们有一个构造函数，我们需要像这样使用它。
- en: Understanding instances
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解实例
- en: Now the easy way to fix this issue is to change the name of the `AuthorName`
    function to camel case; that is, we change `A` to lowercase (`a`). But here we're
    going to indicate this as an instance, and you may ask why? Well in JavaScript,
    every time we write an object, a variable, a function, an array, and so on, we
    are creating objects.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在解决这个问题的简单方法是将`AuthorName`函数的名称更改为驼峰命名法；也就是说，我们将`A`更改为小写（`a`）。但在这里我们要将其表示为一个实例，你可能要问为什么？嗯，在JavaScript中，每当我们编写一个对象、变量、函数、数组等时，我们都在创建对象。
- en: By using instances, we keep our object usage down. In JavaScript, an instance
    is only counted once in memory. For example, let's say we use a `document.getElementById()`
    method. Every variable saved with that object is given a memory count of one but,
    if it's in an object we declare with the `new` keyword, that count is only counted
    once rather than reused for every occurrence of `getElementById()`. By using the
    `new` keyword, we create an instance of our constructor (in this case `AuthorName`)
    that allows us to reuse that function in the same manner that we typically use
    it.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用实例，我们可以降低对象的使用。在JavaScript中，实例在内存中只计算一次。例如，假设我们使用一个`document.getElementById()`方法。每个用该对象保存的变量都只有一次内存计数，但如果它在用`new`关键字声明的对象中，这个计数只计算一次，而不是为每次`getElementById()`的出现重复使用。使用`new`关键字，我们可以创建我们构造函数（在这个例子中是`AuthorName`）的一个实例，允许我们以通常的方式重用那个函数。
- en: Creating instances with 'new'
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用'new'创建实例
- en: 'Creating a new instance is pretty easy; we can simply call a new instance to
    run a function, as shown in the following screenshot, using the `new` keyword
    in our `console.log` function on line number 11:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的实例相当简单；我们只需调用一个新的实例来运行一个函数，如以下屏幕快照所示，在我们的`console.log`函数第11行使用`new`关键字：
- en: '![Creating instances with ''new''](img/7296OS_06_04.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![使用''new''创建实例](img/7296OS_06_04.jpg)'
- en: If we run this code inside a blank page or a simple HTML page, we will see that
    our log doesn't output the way we expect. But we can see an object return `AuthorName
    {}` in the **Console** panel of the **Development tools** in Chrome. What this
    shows us is that we are actually logging a new instance of an object, but not
    the author's name.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在一个空白页面或一个简单的HTML页面中运行这段代码，我们会发现我们的日志输出方式并不如我们所期望。但在**开发者工具**的**控制台**面板中，我们可以看到一个对象返回`AuthorName
    {}`。这告诉我们，我们实际上是在记录一个新对象实例，而不是作者的名字。
- en: In order to properly display this name, we will need a keyword to declare a
    reference to the instance of this constructor. To do that, we will use the `this`
    keyword; in JavaScript, `this` is a reference to the exact point in execution
    in a scope.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 为了正确显示这个名字，我们需要一个关键字来声明对构造函数实例的引用。为此，我们将使用`this`关键字；在JavaScript中，`this`是对执行作用域中确切点的引用。
- en: The `this` keyword in JavaScript refers to the scope and variable that exists
    at that point of script execution when it is used. For example, when you use a
    `this` keyword in a function, it can reference a variable that is also in the
    same scope (or inside a function). By using a `this` keyword, we can point to
    variables and objects at a certain point in a code's execution.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，`this`关键字指的是在脚本执行时使用时的作用域和变量。例如，当在函数中使用`this`关键字时，它可以引用与它处于同一作用域（或嵌套在函数中）的变量。通过使用`this`关键字，我们可以指向代码执行中某个点的变量和对象。
- en: A **scope** is simply a block of JavaScript code with its own variables and
    properties. Scopes can include a global-level scope of a single JavaScript object,
    meaning an entire JavaScript file, a function-level scope where variables and
    properties are set inside a function, or, as discussed earlier, a constructor
    since a constructor is a function.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 一个**作用域**就是一个拥有它自己变量和属性的JavaScript代码块。作用域可以包括单个JavaScript对象的全球化作用域，也就是说，一个完整的JavaScript文件，一个函数级作用域，其中变量和属性是在函数内部设置的，或者，如前面讨论的，一个构造函数，因为构造函数是一个函数。
- en: Let's rewrite our `AuthorName` constructor with `this` keyword so that we can
    reference our scope and print our value to the **Console** panel. We will need
    to create an initializer inside our constructor in order to get our scoped variables
    returned. An initializer (sometimes called an `init` function) specifies certain
    variables inside our constructor and assigns properties on creation.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用`this`关键字重写我们的`AuthorName`构造函数，以便我们可以引用我们的作用域并在**控制台**面板中打印我们的值。我们需要在构造函数内部创建一个初始化器，以便返回我们的作用域变量。初始化器（有时称为`init`函数）在我们的构造函数内部指定某些变量并在创建时分配属性。
- en: 'Here, we create a variable with a `this` keyword prefixed to indicate that
    we are referencing our instance inside our constructor followed by our function
    called `init`, which equals a function, just as we would use a variable to declare
    a function. Let''s take a look at this in the code shown in the next screenshot:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用`this`关键字前缀来创建一个变量，以表示我们正在引用我们构造函数内的实例，后跟我们称为`init`的函数，这等于一个函数，就像我们使用变量来声明一个函数一样。让我们在下一张截图中看看这段代码：
- en: '![Creating instances with ''new''](img/7296OS_06_05.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![使用 ''new'' 创建实例](img/7296OS_06_05.jpg)'
- en: Take a look at line numbers 13 and 15; on 13 we declare a variable `author1`,
    with a `new` `AuthorName` constructor having `Chad Adams` as the string parameter.
    In this example `author1` is an instance of the `AuthorName` constructor with
    `Chad Adams` as the only parameter.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 看看第13行和第15行；在第13行，我们声明了一个名为`author1`的变量，它使用`new AuthorName`构造函数并带有`Chad Adams`字符串参数。在这个例子中，`author1`是`AuthorName`构造函数的一个实例，其唯一参数是`Chad
    Adams`。
- en: 'Also notice that, on line number 15 in our `console.log`, we have an `init()`
    function that is an inner function of our constructor. We can create other functions
    in our constructor as well, for instance printing a custom log message like this
    as shown in the next screenshot:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 还请注意，在第15行我们的`console.log`中，有一个名为`init()`的函数，它是我们的构造函数的一个内部函数。我们也可以在我们的构造函数中创建其他函数，例如像下面所示打印自定义日志消息：
- en: '![Creating instances with ''new''](img/7296OS_06_06.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![使用 ''new'' 创建实例](img/7296OS_06_06.jpg)'
- en: As we can see on line number 11, we have now added a `helloInfo()` function,
    scoped to our `AuthorName` constructor, that prints out a custom message using
    the `author` parameter. Then, on line number 20, we call this outside a `console.log`
    by simply calling the function of the constructor, which has its own `console.info`
    function wrapped inside.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在第11行所看到的，我们现在添加了一个`helloInfo()`函数，它属于我们的`AuthorName`构造函数，该函数使用`author`参数打印出一条自定义消息。然后，在第20行，我们通过简单地调用构造函数来调用这个函数，而没有使用`console.log`，这个构造函数有自己的`console.info`函数。
- en: 'This is helpful in keeping our logic confined to a single object inside our
    code base and keeps our code nicely organized. This is called object orientation;
    it''s great for reusing code but might cause issues with performance in JavaScript.
    Let''s try an example. Here, we have two examples of the same code, each wrapped
    in a `console.time` and `console.timeEnd` function. The following screenshot shows
    our reviewed code and the resulting time to render the code:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这有助于我们将逻辑局限于我们代码库中的一个单一对象，并使我们的代码井然有序。这称为面向对象；它在代码复用方面非常出色，但可能会在JavaScript的性能方面引起问题。让我们试一个例子。在这里，我们有两个相同的代码示例，每个都包裹在一个`console.time`和`console.timeEnd`函数中。下面的截图显示了我们的审查代码和渲染代码的结果时间：
- en: '![Creating instances with ''new''](img/7296OS_06_07.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![使用 ''new'' 创建实例](img/7296OS_06_07.jpg)'
- en: So our total time here is roughly 2.5 milliseconds. This isn't too bad, but
    now let's see what happens if we use simple non-constructor functions and what
    the speed of rendering the same output would be. As shown in the following screenshot,
    I've pulled apart our constructor and created two separate functions.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们在这里的总时间大约是2.5毫秒。这还不算太坏，但现在让我们看看如果我们使用简单的非构造函数会发生什么，以及渲染相同输出的速度会是怎样的。如图所示，我把我们的构造函数拆分开来，创建了两个独立的函数。
- en: I've also called the main `authorName` function within the secondary function
    in the exact same manner as on our `console.log` function to print an author's
    name. Let's run the code shown updated in the next screenshot, and see if this
    runs faster or slower than our constructor methods. However, do keep in mind that,
    depending on our system's speed and browser, the results may vary.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我还以与我们的`console.log`函数完全相同的方式在次要函数中调用主要的`authorName`函数来打印作者的姓名。让我们运行下面截图中显示的更新后的代码，看看这比我们的构造函数方法是运行得更快还是更慢。然而，要记住，根据我们的系统速度和浏览器，结果可能会有所不同。
- en: '![Creating instances with ''new''](img/7296OS_06_08.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![使用 ''new'' 创建实例](img/7296OS_06_08.jpg)'
- en: So, with static functions our results hover right around 4 milliseconds, which
    is longer than our instance-built object. So, that's a great use of static functions
    over prototype functions in JavaScript!
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，使用静态函数我们的结果一直在4毫秒左右，这比我们用实例构建的对象要长。所以，在JavaScript中使用静态函数而不是原型函数是一个很好的用法！
- en: Alternate constructor functions using prototypes
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用原型实现替代构造函数
- en: Here, we will learn about the concept of alternate constructor functions using
    prototypes.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将学习关于使用原型实现替代构造函数的概念。
- en: Understanding prototypes in terms of memory
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从内存的角度理解原型
- en: 'We''ve covered how to create instance functions inside a constructor, and we''ve
    also learned about scope inside one as well using the `this` keyword. But, there
    is one more thing to cover: the ability to append a constructor with another instance
    method outside the constructor, which is helpful in many ways. First, it allows
    us, as developers, to create functions outside the pre-written constructor if
    needed. Next, it also keeps our memory usage small. Before diving into this, let''s
    rework our constructor code to use prototypes, as shown in the next screenshot:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们介绍了如何在构造函数内部创建实例函数，也学习了使用`this`关键字在内部使用作用域。但是，还有一件事要介绍：在构造函数外部为构造函数添加另一个实例方法的能力，这在很多方面都有帮助。首先，它允许我们作为开发者，在需要时在预写的构造函数外部创建函数。接下来，它还保持了我们的内存使用量小。在深入这个话题之前，让我们重新调整我们的构造函数代码以使用原型，如图所示：
- en: '![Understanding prototypes in terms of memory](img/7296OS_06_09.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![从内存的角度理解原型](img/7296OS_06_09.jpg)'
- en: 'Now looking at this code updated, we can see that the constructor functions
    have been removed but pulled outside the constructor: they were then moved to
    prototypes of the `AuthorName` function using the same function names used earlier.
    Now, you can notice that, on lines 10 and 13, we can use this in our prototype
    function because we are referring our constructor''s instance to print that instance''s
    specific variables.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在看看这个更新后的代码，我们可以看到构造函数已经被移除，但被拉出构造函数：它们然后被移动到`AuthorName`函数的原型中，使用的是之前用过的同一个函数名。现在，您可以看到，在10行和13行，我们可以在我们的原型函数中使用`this`，因为我们正在引用我们构造函数的实例来打印那个实例的特定变量。
- en: Which is faster, a prototype or a constructor function?
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 原型和构造函数哪个更快？
- en: 'You may also notice that I''ve again added `console.time` and `console.timeEnd`
    functions to our function calls on lines 16 through 22\. So do you think that
    prototypes will be faster or slower when compared to standard constructor functions?
    Well, here in the next screenshot we can take a look at the results:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会再次注意到，我在第16行到第22行再次添加了`console.time`和`console.timeEnd`函数到我们的函数调用中。那么你觉得原型相比于标准的构造函数会更快还是更慢呢？嗯，接下来我们可以在下一个屏幕截图中查看结果：
- en: '![Which is faster, a prototype or a constructor function?](img/7296OS_06_10.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![哪个更快，原型还是构造函数？](img/7296OS_06_10.jpg)'
- en: Wow, 4.2 milliseconds to fire the prototypes when compared with 2.1 milliseconds
    using constructor method; what happened here? We essentially created functions
    after the constructor. The output is slow, but this is to be expected with prototypes,
    as the intention is to append a constructor with a prototype.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 哇，与使用构造方法的2.1毫秒相比，原型在触发时需要4.2毫秒；这里发生了什么？我们本质上是在构造器之后创建了函数。输出很慢，但这是可以预料到的，因为原型的意图是与构造器一起使用。
- en: At this point, we may think "Oh wow I never knew that, I should never code a
    prototype again!" Now, before we start deleting prototypes from our project files,
    I want to explain scalability with prototypes. It is true that prototypes, when
    called for a constructor function, can be slower… "*in the small*. What do I mean
    by in the small?" Well, for small uses of prototypes such as this particular example,
    we can see prototypes run slower than a traditional constructor method.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个时候，我们可能会想：“哇，我从来不知道这些，我再也不会编写原型了！”现在，在我们开始从项目文件中删除原型之前，我想解释一下原型的可扩展性。确实，当为构造函数调用原型时，它们可能会更慢……“在小规模上”。我说的“在小规模上”是什么意思？嗯，像这个特定例子这样的小规模原型使用，我们可以看到原型的运行速度比传统的构造方法慢。
- en: Now here's the rub; for larger projects, a constructor in a large-scale application
    may have 50 functions, 200 functions, and so on. When we call those larger constructors
    over and over, it gets pretty expensive in terms of memory just by calling the
    instance of a constructor since it has to ready all the functions contained inside.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在这里有个问题；对于更大的项目，大规模应用中的构造器可能有50个函数、200个函数等等。当我们一次又一次地调用这些大的构造器时，仅调用构造器的实例在内存方面就会变得相当昂贵，因为它必须准备包含在内的所有函数。
- en: By using prototype methods, those initial constructor calls are stored in memory
    once. For small uses of prototypes the performance benefits aren't visible since
    we use the memory in-place as if we had a simple static function but, once it's
    set up, it's in memory and doesn't have to be recalled or reprocessed like a static
    JavaScript function.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用原型方法，最初的构造器调用只会在内存中存储一次。对于小规模的原型使用，由于我们像使用简单的静态函数一样原地使用内存，所以性能提升并不明显，但是一旦设置好，它就会保存在内存中，不需要像静态JavaScript函数那样被重新召回或重新处理。
- en: One more thing about prototypical inheritance, though performance issues can
    arise from its use over static functions, it can be very helpful for large codebases.
    If a project has scope concerns or uses libraries that may cause conflicts, consider
    using a namespace. This works similar to prototype classes but function like simple
    static functions that prepend with a namespace to prevent conflict.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 关于原型继承还有一点，虽然其使用可能会导致性能问题，但对于大型代码库来说，它可能非常有帮助。如果一个项目有范围担忧或使用可能引起冲突的库，可以考虑使用命名空间。这与原型类类似，但函数像简单的静态函数一样，以命名空间前缀来防止冲突。
- en: Array performance
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数组性能
- en: 'We typically don''t think about arrays when dealing with performance, but it''s
    worth mentioning a few things here. First, large arrays can be messy and performance
    hogs when you''re trying to work with a large amount of data. Typically with arrays,
    we only need to worry about two things: searching and array size.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通常在处理性能问题时不会考虑数组，但在这里值得一提。首先，大型数组在处理大量数据时可能会很乱，并且是性能的消耗者。通常在数组方面，我们只需要担心两件事：搜索和数组大小。
- en: Optimizing array searches
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 优化数组搜索
- en: 'Let''s create an array that has a lot of values in it; here I''ve created an
    array called `myArray` which has 1001 values within, with a string value of key
    and the index of the array. You can grab the full version in the `06_09.js` file
    inside the `Chapter_6` folder of the example code on the Packt Publishing''s website.
    Here''s a part of the code sample of the total array:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个包含很多值的数组；在这里，我创建了一个名为`myArray`的数组，其中包含1001个值，以及数组的键和索引的字符串值。你可以在上面的网站的`Chapter_6`文件夹中的`06_09.js`文件中找到完整的版本。以下是整个数组的代码样本的一部分：
- en: '![Optimizing array searches](img/7296OS_06_11.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![优化数组搜索](img/7296OS_06_11.jpg)'
- en: There are two ways to look up a value in an array; the first uses the `indexOf()`
    function, which is an array-specific function that looks up each value and returns
    the index of that searched value. The other way is to specify the index value
    directly, which returns the value (assuming we know the index of the value we
    need).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在数组中查找值有两种方法；第一种使用`indexOf()`函数，这是一个数组特定的函数，查找每个值并返回搜索到的值的索引。另一种方法是直接指定索引值，返回该值（假设我们知道需要值的索引）。
- en: 'Let''s try an experiment where we are going to use a pre-made `myArray` of
    1001 values and iterate through them with the `indexOf()` function, and then again
    with just an array. We have appended the code after our `myArray`, and we''ve
    wrapped this code block in `console.time` and `console.timeEnd` functions, as
    shown here with the time rendered in Chrome **Developer tools**:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试一个实验，我们将使用一个预制的`myArray`，包含1001个值，并使用`indexOf()`函数遍历它们，然后再用一个数组遍历。我们在`myArray`后面附上了代码，并用`console.time`和`console.timeEnd`函数包围了此代码块，如下所示，在Chrome
    **开发者工具**中呈现时间：
- en: '![Optimizing array searches](img/7296OS_06_12.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![优化数组搜索](img/7296OS_06_12.jpg)'
- en: 'This shows that our result for searching that large array was roughly 5.9 milliseconds.
    Now, for our comparison, I''m going to keep our `indexFound` variable even though
    we can simply specify the index of the array value we want. We will also search
    using the same index value, which is `541`. Let''s update our code as shown here
    and view our results in Chrome **Developer tools**:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这表明我们搜索这个大型数组的结果大约是5.9毫秒。现在，为了我们的比较，我将保留我们的`indexFound`变量，尽管我们可以简单地指定我们需要的数组值的索引。我们还将使用相同的索引值搜索，即`541`。让我们像这样更新我们的代码，并在Chrome
    **开发者工具**中查看我们的结果：
- en: '![Optimizing array searches](img/7296OS_06_13.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![优化数组搜索](img/7296OS_06_13.jpg)'
- en: It looks like our results trim our index searching performance time by quite
    a bit. So, when you're structuring arrays in JavaScript, only use `indexOf` if
    you need to and try to directly call the index if possible. So why was the time
    output so different? It's simple; in this second example, we indicated the position
    of the array manually rather than having JavaScript look up the key on its own.
    This sped up the JavaScript interpreter as it iterated through our array and provided
    a value.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来我们的结果大大缩短了我们的索引搜索性能时间。所以，当你在JavaScript中构建数组时，只有在你需要的时候才使用`indexOf`，并且尽可能直接调用索引。那么时间输出为什么会有这么大的差异呢？很简单；在第二个例子中，我们手动指定了数组的位置，而不是让JavaScript自己查找键。这加快了JavaScript解释器遍历我们的数组并提供值的速度。
- en: Summary
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned about the proper use of constructors. We learned
    about instances in JavaScript using the `new` keyword, and found that we can speed
    up static code with constructors while scoping our code at the same time.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了构造函数的正确使用方法。我们学习了使用`new`关键字在JavaScript中创建实例，并发现我们可以在同时作用域我们的代码时通过构造函数加速静态代码。
- en: We learned about prototypes and how they scale well for large applications while
    adding little value for smaller projects. Finally, we also learned about searching
    arrays and about performance loss with arrays by using the `indexOf` function.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了原型以及它们在大应用程序中扩展得很好，而在小项目中添加的价值很少。最后，我们还学习了数组搜索以及使用`indexOf`函数时的性能损失。
- en: In the next chapter, we are going to look at how to write our JavaScript to
    optimize our Document Object Model for our projects.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何编写我们的JavaScript代码来优化我们的文档对象模型（DOM）以适应我们的项目。
