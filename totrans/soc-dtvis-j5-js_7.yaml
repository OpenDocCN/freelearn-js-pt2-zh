- en: Chapter 7. Facebook
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。Facebook
- en: Facebook is the 900 lbs (408.233 kg) gorilla of the social media world. Literally
    created in a university dorm, Facebook has grown to have 1.1 billion active users.
    That's one out of every seven people on the planet. It has impressive sway to
    say the least. No book about using social media APIs could be complete without
    an investigation of how to use Facebook's API.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Facebook是社交媒体世界的“重量级”选手，字面上是在大学宿舍里创建的，如今已经增长到拥有11亿活跃用户。地球上每七个人中就有一个。其影响力不言而喻。关于使用社交媒体API的任何书籍，如果没有调查如何使用Facebook的API，那就称不上完整。
- en: Creating an app
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建应用程序
- en: As you might expect for such a large site, there are numerous APIs available
    for building applications related to Facebook. The simplest involve integrating
    "post to Facebook" buttons in websites or mobile apps, and the most complicated
    allow you to actually run the code on Facebook's servers as an app. We're going
    to make use of the Graph API.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能预料到的，对于这样一个大型的网站，有许多API可供构建与Facebook相关的应用程序使用。最简单的涉及到在网站或移动应用中集成“发布到Facebook”按钮，而最复杂的则允许你实际上在Facebook的服务器上运行代码作为应用程序。我们将使用Graph
    API。
- en: The Graph API provides an HTTP-based method of accessing information, what Facebook
    calls the social graph. The graph is really just the relationship between various
    users and their data. It is a graph and a collection of nodes and edges as opposed
    to the bar graph-style of chart.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Graph API提供了一种基于HTTP的方法来访问信息，Facebook称之为社交图谱。这个图谱实际上就是各种用户及其数据之间的关系。它是一个图，也是一系列节点和边的集合，而不是条形图式的图表。
- en: 'To get started, we''ll register an application with Facebook, much as we did
    with Twitter and would have to do with Stack Overflow if we wanted to make use
    of authentication. To do this we''ll head over to [http://developers.facebook.com](http://developers.facebook.com)
    and click on the **Apps** link in the top menu bar. From there, click on **Create
    New App**. You''ll be presented with the **Create New App** dialog box as shown
    in the following screenshot:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始，我们将向Facebook注册一个应用程序，就像我们之前用Twitter做的那样，如果我们想使用认证，还必须与Stack Overflow这样做。为此，我们将前往[http://developers.facebook.com](http://developers.facebook.com)，并在顶部菜单栏中点击**Apps**链接。从那里，点击**创建新应用**。接下来，你会看到**创建新应用**对话框，如下面的截图所示：
- en: '![Creating an app](img/6542OS_07_01.jpg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![创建应用程序](img/6542OS_07_01.jpg)'
- en: The app name can be anything you like, the app namespace is used to give your
    app a location on Facebook such as [apps.facebook.com/NiftyVisualization](http://apps.facebook.com/NiftyVisualization).
    It is largely unnecessary for our purposes. The app category is wholly up to you
    and should be determined based on what it is that you're visualizing. **Heroku**
    is a cloud-based hosting provider partnered with Facebook to provide hosting space
    for Facebook applications. If you don't have hosting already, Heroku is a reasonable
    alternative and does support node.js; however, using it is outside the scope of
    this book.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序名称可以是任何你喜欢的东西，应用程序命名空间用于在Facebook上为你的应用程序提供一个位置，比如[apps.facebook.com/NiftyVisualization](http://apps.facebook.com/NiftyVisualization)。对于我们来说，这基本上是不必要的。应用程序类别完全由你决定，应该根据你要可视化的是什么来确定。**Heroku**是与Facebook合作的基于云的主机提供商，为Facebook应用程序提供主机空间。如果你还没有主机，Heroku是一个合理的替代品，并且支持node.js；然而，使用它超出了本书的范围。
- en: 'Once you''ve filled out the details of your application, you''ll be asked to
    confirm that you''re a human by solving a CAPTCHA puzzle. You''ll now be taken
    to the edit page where you can fill in the last few details before testing out
    your access to the API. It looks like the following screenshot:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你填写了应用程序的详细信息，你将被要求通过解决一个CAPTCHA谜题来确认你是一个人。然后你会被带到编辑页面，在那里你可以填写最后几个细节然后再测试一下你对API的访问。它看起来如下面的截图所示：
- en: '![Creating an app](img/6542OS_07_02.jpg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![创建应用程序](img/6542OS_07_02.jpg)'
- en: Here, you'll need to fill in at least one app domain. This value is checked
    by the API when you sign in to ensure that your app is being used from an authorized
    domain. Unfortunately, you can't access Facebook's Graph API from a file that
    isn't served from a domain. This means that just going to `file://c:/code/visualization.html`
    won't allow you to access Facebook's API. Fortunately not all is lost, using `localhost`
    is permitted, but that does mean we have to run an HTTP server. We can make use
    of the same `Node.js` installation which we used in previous chapters.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在此处，你需要至少填写一个应用域名。这个值在你登录时由API检查，以确保你的应用是从一个授权的域名中使用的。不幸的是，你不能从不是从域名中服务的文件访问Facebook的Graph
    API。这意味着仅仅访问`file://c:/code/visualization.html`并不能让你访问Facebook的API。幸运的是，并非一切都失去了，使用`localhost`是被允许的，但这意味着我们必须运行一个HTTP服务器。我们可以利用在前几章中使用过的相同的`Node.js`安装。
- en: The site URL in the website with the Facebook login should be set to be the
    return URL for your OAuth key exchange. We can actually set this to anything because
    we're going to use AJAX to do the authentication, and our users won't ever actually
    move away from our initial page.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 带有Facebook登录的网站URL应设置为你的OAuth密钥交换的返回URL。实际上我们可以将其设置为任何内容，因为我们打算使用AJAX进行身份验证，我们的用户实际上永远不会离开我们的初始页面。
- en: Using the API
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用API
- en: 'It is perfectly possible to manually perform OAuth to authenticate and authorize
    your visualization with Facebook. However, Facebook has been kind enough to provide
    a very usable JavaScript SDK. The API abstracts away the process of logging into
    a function call. To make use of the API, we first need to include it in our visualization.
    To do this, simply include the following script inside one of your `script` tags:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 完全可以通过手动执行OAuth来与Facebook认证和授权你的可视化。然而，Facebook慷慨地提供了一个非常易用的JavaScript SDK。API将登录过程抽象为函数调用。为了使用API，我们首先需要在我们的可视化中包含它。为此，只需在你的一个`script`标签内包含以下脚本：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This code will create a new `script` tag in your document and set its source
    to a file on the Facebook site. Adding a `script` tag like this will cause the
    browser to load the contents of that script file and execute it. Because we''re
    loading the script in an asynchronous fashion, we''ll need to wait for it to be
    loaded before we make use of it. The SDK calls a hook, `fbAsyncInit`, once it
    is initialized. We just need to tie a function to that hook, as shown in the following
    code:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将在你的文档中创建一个新的`script`标签，并将其源设置为Facebook网站上的一文件。添加这样的`script`标签将导致浏览器加载该脚本文件的内容并执行它。因为我们以异步方式加载脚本，我们需要等待它加载完毕才能使用它。SDK在初始化后调用一个钩子，`fbAsyncInit`。我们只需要将一个函数与该钩子相关联，如下面的代码所示：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This will provide the SDK with the App ID available from the developer's webpage.
    Also, here I've provided `channelUrl` that is used to solve some cross-domain
    issues that appear on some browsers. Setting the status will have the `init` method
    fetch the value of `status`. `cookie` will enable cookie support. Finally `xfbml`
    enables Facebook markup language. What's that? It is a collection of specially
    formatted HTML elements that are controlled by the Facebook SDK.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这将为SDK提供从开发者网页上可用的App ID。另外，在这里我提供了`channelUrl`，它用于解决某些浏览器上出现的跨域问题。设置状态将使`init`方法获取`status`的值。`cookie`将启用cookie支持。最后，`xfbml`启用了Facebook标记语言。那是什么？它是由Facebook
    SDK控制的特殊格式的HTML元素的集合。
- en: 'For instance, if we would like to show a login button (how convenient that
    we do want to show a login button) then we can simply add the following code:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们想要显示一个登录按钮（多么方便，我们确实想要显示一个登录按钮）那么我们可以简单地添加以下代码：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: When an unauthenticated user opens the page, then a login button will show.
    When an authenticated user reaches the page, they will be shown their own login
    information. You'll note the `scope` attribute; this is used to give Facebook
    a list of permissions you're requesting. Here we've asked for the logged in user's
    birthday, e-mail ID, and their friends' birthdays. When signing in, the user will
    be prompted by Facebook to allow your visualization access to that permission.
    There are about three dozen different permissions which can be requested from
    Facebook that govern everything from retrieving information about the logged in
    user, to their friends, events, and RSVPs. It is well worth poking around in here
    to discover interesting aspects to visualize.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当未认证的用户打开页面时，会显示一个登录按钮。当认证用户访问页面时，会显示他们自己的登录信息。你会注意到`scope`属性；这个属性用于向Facebook提供一个权限列表，你请求这些权限。在这里，我们请求了登录用户的生日、电子邮件ID以及他们朋友的生日。在登录时，用户会被Facebook提示允许你的可视化访问这些权限。大约有三十多种不同的权限可以从Facebook请求，这些权限涵盖了从获取登录用户的信息，到他们的朋友、事件和回复确认单的一切。在这里仔细查看以发现有趣的可视化方面是非常值得的。
- en: 'The final piece in the authentication puzzle is to provide a function for the
    login button to call once it has logged the user in:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 认证拼图的最后一步是提供一个函数，让登录按钮在登录用户后调用：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This event is triggered whenever there is a change in the authorization response,
    such as when we get authentication back from the login button.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件在授权响应发生更改时触发，例如当我们从登录按钮获得认证时。
- en: Retrieving data
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取数据
- en: 'Before we go about retrieving data we should probably decide what data we wish
    to visualize. The amount of data which is available about the logged in user is
    not all that great (at least it isn''t for me but I hardly use Facebook). That
    leaves us with looking at our friends. I found devices my friends use to access
    Facebook to be quite interesting. Are they more Android users or iOS? This information
    is available as part of the friends'' collection. To retrieve this information
    we can use the `FB.api()` method:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们获取数据之前，我们可能应该决定我们想可视化哪些数据。关于登录用户的数据并不多（至少对我来说是这样，但我几乎不使用Facebook）。这让我们转向了查看我们的朋友。我发现我的朋友们使用来访问Facebook的设备非常有趣。他们是更多的安卓用户还是iOS用户？这些信息作为朋友集合的一部分是可用的。为了获取这些信息，我们可以使用`FB.api()`方法：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Into the `api()` method we pass a URL to be retrieved. In this case, we request
    the special URL `/me` which refers to the currently logged in users. We also provide
    a filter so that only the friends'' collection is retrieved and, in fact, only
    the device''s collections are retrieved for each friend. In the callback, we''re
    just counting up the number of Android versus iOS devices. iPads and iPhones are
    separate devices to Facebook, but we don''t want to count iOS as an access method
    twice, so we ignore any iPads. Once this code executes, we end up with a collection
    of device counts. For my friends I got the following:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将一个要检索的URL传递给`api()`方法。在这个例子中，我们请求特殊的URL`/me`，它指的是当前登录的用户。我们还提供一个过滤器，以便只检索朋友集合，实际上，只为每个朋友检索设备的集合。在回调中，我们只是在计算安卓和iOS设备的数量。Facebook将iPad和iPhone视为不同的设备，但我们不想将iOS作为一种访问方法重复计算，所以忽略任何iPad。一旦执行此代码，我们最终会得到一个设备计数集合。对于我的朋友们，我得到了以下结果：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Visualizing
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可视化
- en: One of the more effective visualization techniques is to show the relative strengths
    of different categories by showing a scaled image. We saw this technique applied
    in the Twitter chapter using bubbles. We can take that to the next step by using
    images instead of just circles.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 一种有效的可视化技术是通过显示不同类别的相对强度来显示一个缩放图像。我们在使用气泡的Twitter章节中看到了这种技术的应用。我们可以通过使用图像而不是仅仅使用圆形来进一步发挥这种技术。
- en: 'The first step is to locate logos for Android and iOS that are already SVGs.
    As it turns out, Wikipedia is a great source for this and their images are all
    licensed under creative commons, meaning we can use them in our visualizations.
    One of the really great features of SVG is that you can easily merge two images
    together through the use of definitions. If you open up an SVG like the Android
    logo at [http://upload.wikimedia.org/wikipedia/commons/e/e1/Android_dance.svg](http://upload.wikimedia.org/wikipedia/commons/e/e1/Android_dance.svg),
    you can copy all the markup under a `<defs>` tag in another image. I took the
    Android and Apple logos and moved them into my raw markup. If I wanted to display
    them, I could use the `<use>` tag and reference the definitions by ID. It looks
    like the following code:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是找到已经是SVG的Android和iOS标志。结果证明，维基百科是这一的好来源，他们的图片都根据创意共享许可发布，这意味着我们可以在我们的可视化中使用它们。SVG的一个非常出色的功能是，你可以很容易地通过使用定义将两张图片合并在一起。如果你打开一个像[http://upload.wikimedia.org/wikipedia/commons/e/e1/Android_dance.svg](http://upload.wikimedia.org/wikipedia/commons/e/e1/Android_dance.svg)这样的安卓标志的SVG，你可以复制另一个图片下的`<defs>`标签下的所有标记。我将安卓和苹果标志移动到我的源标记中。如果我想要显示它们，我可以使用`<use>`标签并参考通过ID定义的引用。代码如下：
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This will create an Apple logo next to an Android logo in our SVG. Knowing
    that we can leverage `d3` to build and scale the logos as appropriate, we''re
    lucky, in that both of the SVGs we have are 256 px square, so they look to be
    approximately the same size before we''ve translated them. The `d3` is relatively
    simple, as shown in the following code:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在我们的SVG中创建一个苹果标志旁边的一个安卓标志。我们知道我们可以利用`d3`来构建和缩放标志，运气好的是，我们有的两个SVG都是256px正方形，所以在我们将它们翻译之前，它们看起来大小大致相同。`d3`相对简单，如下面的代码所示：
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We start by selecting the SVG then instead of appending shapes, we append using
    statements. The `xlink:href` attribute takes the value of the definition to include.
    Next, we scale and translate the logos so they are next to each other and the
    appropriate size. We set the first logo to be the baseline size, and every subsequent
    logo is drawn as a percentage of that. This only works because our numbers are
    quite close. With highly divergent numbers, a more robust strategy would be needed.
    With some additional text elements appended, the result is the following figure:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先选择SVG，然后不是附加形状，而是使用声明进行附加。`xlink:href`属性取定义的值以包括在内。接下来，我们将标志缩放和移动，使它们紧挨在一起并具有适当的尺寸。我们将第一个标志设置为基线尺寸，此后每个标志都以该尺寸的百分比绘制。这之所以有效，是因为我们的数字相当接近。如果数字差异很大，就需要更健壮的策略。添加一些额外的文本元素后，结果是以下图表：
- en: '![Visualizing](img/6542OS_07_03.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![可视化](img/6542OS_07_03.jpg)'
- en: Summary
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: You should now have a grasp of how to make use of the Facebook API to retrieve
    data. This data can then be visualized using any technique. In the next chapter
    we'll take a look at the upstart Google+ social network and see how we can leverage
    the data present there for visualizations.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在应该已经掌握了如何使用Facebook API检索数据的方法。此数据然后可以使用任何技术进行可视化。在下一章中，我们将查看新兴的Google+社交网络，并了解我们如何可以利用那里存在的数据进行可视化。
