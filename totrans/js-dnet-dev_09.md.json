["```js\n<script>\n  var Logger= (function () {\n\n    //private method\n    var formatMessage = function (message) {\n      return message + \" logged at: \" + new Date();\n    }\n\n    return {\n      //public method\n      logMessage: function (message) {\n        console.log(formatMessage(message));\n      }\n    };\n\n  })();\n\n  Logger.logMessage(\"hello world\");\n</script>\n```", "```js\n<script> \n  var Logger= (function () {\n    //private variable\n    var loggerName = \"AppLogger\";\n\n    //private method\n    var formatMessage = function (message) {\n      return message + \" logged at: \" + new Date();\n    }\n\n    //private method\n    var logMessage= function (message){\n      console.log(formatMessage(message));\n    }\n\n    //private method\n    var showAlert = function(message){\n      alert(formatMessage(message));\n    }\n\n    return {\n\n      //public methods and variable\n      logConsoleMessage: logMessage,\n      showAlertMessage: showAlert,\n      loggerName: loggerName\n    };\n\n  })();\n\n  Logger.logConsoleMessage(\"Hello World\");\n  Logger.showAlertMessage(\"Hello World\");\n  console.log(Logger.loggerName);\n</script>\n```", "```js\n    define(function (require, exports, module) {\n      //require to use any existing module\n      var utility = require('utility');\n\n      //exports to export values\n      exports.example =\"Common JS\";\n\n      //module to export values \n      module.exports.name = \"Large scale applications\";\n\n      module.exports.showMessage = function (message) {\n        alert(utility.formatMessage(message));\n      }\n    });\n    ```", "```js\n    define(['utility'], function (utility) {\n      return {\n        example: \"AMD\",\n        name: \"Large scale applications\",\n        showMessage: function () {\n          alert(utility.formatMessage(message));\n        }\n      }\n\n    });\n    ```", "```js\ndefine(function () {\n  return {\n    showMessage: function (message) {\n      alert(message);\n    },\n    writeToConsole: function (message) {\n      console.log(message);\n    },\n    writeToServer: function (message) {\n      //write to server by doing some Ajax request\n      var xhr = new XMLHttpRequest();\n      xhttp.open(\"POST\", \"http://localhost:8081/Logging?message=\"+message, true);\n      xhttp.send();\n    }\n  }\n});\n```", "```js\n<script src=\"img/require.js\"></script>\n<script>\n  (function () {\n    require([\"js/common/logging\"], function(logging){\n      logging.showMessage(\"demo\");\n    });\n  })();\n</script>\n```", "```js\n//Main.js\nrequire([\"common/logging\"], function(logging){\n  logging.showMessage(\"demo\");\n});\n```", "```js\n<script data-main=\"~/js/main.js\" src=\"img/require.js\"></script>\n```", "```js\n<div id=\"myCarousel\" class=\"carousel slide\" data-ride=\"carousel\" data-interval=\"6000\">\n  <input type=\"text\" id=\"txtMessage\" />\n  <button id=\"btnSendMessage\" >Send Message</button>\n</div>\n```", "```js\ndefine(['common/logging'], function(logging) {\n  $('#btnSendMessage').on('click', function(e) {\n    sendMessage();\n    e.preventDefault();\n  });\n  function sendMessage(){\n    var message= document.getElementById('txtMessage').value;\n    logging.showMessage(message);\n  }\n  return {\n    sendMessage: sendMessage\n  };\n});\n```", "```js\n//MediatorCore.js\ndefine(function () {\n  return {\n\n    mediator: function () {\n      this.modules = [];\n\n      //To subscribe module\n      this.subscribe = function (module) {\n        //Check if module exist or initialize array\n        this.modules[module.moduleName] = this.modules[module.moduleName] || [];\n\n        //Add the module object based on its module name\n        this.modules[module.moduleName].push(module);\n        module.mediator = this;\n      },\n\n      this.unsubscribe = function (module) {\n        //Loop through the array and remove the module\n        if (this.modules[module.moduleName]) {\n          for (i = 0; i < this.modules[module.moduleName].length; i++) {\n            if (this.modules[module.moduleName][i] === module) {\n              this.modules[module.moduleName].splice(i, 1);\n              break;\n            }\n          }\n        }\n      },\n\n      /* To call the getRecords method of specific module based on module name */\n      this.getRecords = function (moduleName) {\n        if (this.modules[moduleName]) {\n          //get the module based on module name\n          var fromModule = this.modules[moduleName][0];\n          return fromModule.getRecords();\n        }\n      },\n\n      /* To call the insertRecord method of specific module based on module name */\n      this.insertRecord = function (record, moduleName) {\n        if (this.modules[moduleName]) {\n          //get the module based on module name\n          var fromModule = this.modules[moduleName][0];\n          fromModule.insertRecord(record);\n        }\n      },\n\n      /* To call the deleteRecord method of specific module based on module name */\n      this.deleteRecord = function (record, moduleName) {\n        if (this.modules[moduleName]) {\n          //get the module based on module name\n          var fromModule = this.modules[moduleName][0];\n          fromModule.deleteRecord(record);\n\n        }\n      },\n\n      /* To call the updateRecord method of specific module based on module name */\n      this.updateRecord = function (record, moduleName) {\n        if (this.modules[moduleName]) {\n          //get the module based on module name\n          var fromModule = this.modules[moduleName][0];\n          fromModule.updateRecord(record);\n\n        }\n      }\n\n    }\n  }\n});\n```", "```js\nEmployeeRepository that contains the concrete implementation of the abstract methods defined in the mediator:\n```", "```js\n//EmployeeRepository.js\ndefine(function () {\n  return {\n\n    //Concrete Implementation of Mediator Interface\n    EmployeeRepository: function (uniqueName) {\n      this.moduleName = uniqueName;\n      //this reference will be used just in case to call some other module methods\n      this.mediator = null;\n\n      //Concrete Implementation of getRecords method\n      this.getRecords = function () {\n        //Call some service to get records\n\n        //Sample text to return data when getRecords method will be invoked\n        return \"This are test records\";\n\n      },\n      //Concrete Implementation of insertRecord method\n      this.insertRecord = function (record) {\n        console.log(\"saving record\");\n        //Call some service to save record.\n      },\n\n      //Concrete Implementation of deleteRecord method\n      this.deleteRecord = function (record) {\n        console.log(\"deleting record\");\n        //Call some service to delete record\n      }\n\n      //Concrete Implementation of updateRecord method\n      this.updateRecord = function (record) {\n        console.log(\"updating record\");\n        //Call some service to delete record\n      }\n\n    }\n  }\n});\n```", "```js\n//HRModule.js\ndefine(function () {\n  return {\n    HRModule: function (uniqueName) {\n      this.moduleName = uniqueName;\n      this.mediator = null;\n      this.repository = \"EmployeeRepository\";\n\n      this.getRecords = function () {\n        return this.mediator.getRecords(this.repository);\n      },\n\n      this.insertRecord = function (record) {\n        this.mediator.insertRecord(record, this.repository);\n      },\n\n      this.deleteRecord = function (record) {\n        this.mediator.deleteRecord(record, this.repository);\n      }\n\n      this.updateRecord = function (record) {\n        this.mediator.updateRecord(record, this.repository);\n      }\n\n    }\n  }\n});\n```", "```js\n//HRView.js\ndefine(['hr/mediatorcore','hr/employeerepository','hr/hrmodule'], function (mediatorCore, employeeRepository, hrModule) {\n  $('#btnGetRecords').on('click', function (e) {\n    getRecords();\n    e.preventDefault();\n  });\n  function getRecords() {\n    var mediator = new mediatorCore.mediator();\n    var empModule = new hrModule.HRModule(\"EmployeeModule\");\n    mediator.subscribe(empModule);\n\n    var empRepo = new employeeRepository.EmployeeRepository(\"EmployeeRepository\");\n    mediator.subscribe(empRepo);\n\n    alert(\"Records: \"+ empModule.getRecords());\n  }\n  return {\n    getRecords: getRecords\n  };\n});\n```", "```js\n//main.js\nrequire([\"./hrview\"], function(hr){\n});\n```", "```js\n//Index.cshtml\n\n@{\n  ViewData[\"Title\"] = \"Home Page\";\n}\n<script data-main=\"js/main.js\"  src=\"img/require.js\"></script>\n\n<div id=\"myCarousel\" class=\"carousel slide\" data-ride=\"carousel\" data-interval=\"6000\">\n  <input type=\"text\" id=\"txtMessage\" />\n  <button id=\"btnGetRecords\" >Send Message</button>\n</div>\n```", "```js\n/// <binding Clean='clean' />\n\"use strict\";\n\nvar gulp = require(\"gulp\"),\njsdoc = require(\"gulp-jsdoc3\");\n\nvar paths = {\n  webroot: \"./wwwroot/\"\n};\n\npaths.appJs = paths.webroot + \"app/**/*.js\";\n\ngulp.task(\"generatedoc\", function (cb) {\n  gulp.src(['Readme.md', paths.appJs], { read: false })\n  .pipe(jsdoc(cb));\n});\n```", "```js\ngeneratedoc, in which we are reading the files placed at wwwroot/app/**/*.js and generating documentation. The jsdoc object takes the configuration defaults to generate documentation. To pass the default configuration attributes, we can just specify the cb parameter injected in the function level by Gulp. When you run this generatedoc task from the task runner in Visual Studio, it will add a docs folder at the root path of your web application project. As in ASP.NET Core, we already know that all static content should reside in the wwwroot folder, and to access it from browser, simply drag and drop this folder in the wwwroot folder and access it by running your website.\n```", "```js\n/** This method is used to send HTTP Get Request **/\nfunction GetData(path) {\n  $.get(path, function (data) {\n    return data;\n  })\n}\n```", "```js\n/** This method is used to send HTTP Get Request\n   @constructor\n*/\nfunction GetData(path) {\n  $.get(path, function (data) {\n    return data;\n  })\n}\n```", "```js\n/** This method is used to send HTTP Get Request \n  @constructor\n  @param path – Specify URI of the resource that returns data\n*/\nfunction GetData(path) {\n  $.get(path, function (data) {\n    return data;\n  })\n}\n```", "```js\ngulp, gulp-concat, gulp-cssmin, and gulp-uglify. The following is the description of each module:\n```", "```js\n/// <binding Clean='clean' />\n\"use strict\";\n\n//Adding references of gulp modules\nvar gulp = require(\"gulp\"),\nrimraf = require(\"rimraf\"),\nconcat = require(\"gulp-concat\"),\ncssmin = require(\"gulp-cssmin\"),\nuglify = require(\"gulp-uglify\");\n\n//define root path where all JavaScript and CSS files reside\nvar paths = {\n  webroot: \"./wwwroot/\"\n};\n\n/* Path where all the non-minified JavaScript file resides. JS is the folder and ** is used to handle for sub folders */\npaths.js = paths.webroot + \"js/**/*.js\";\n\n/* Path where all the minified JavaScript file resides. JS is the folder and ** is used to handle for sub folders */\npaths.minJs = paths.webroot + \"js/**/*.min.js\";\n\n/* Path where all the non-minified CSS file resides. Css is the main folder and ** is used to handle for sub folder */\npaths.css = paths.webroot + \"css/**/*.css\";\n\n/* Path where all the minified CSS file resides. Css is the main folder and ** is used to handle for sub folder */\npaths.minCss = paths.webroot + \"css/**/*.min.css\";\n\n/* New JavaScript file site.min.js that contains all the compressed and merged JavaScript files*/\npaths.concatJsDest = paths.webroot + \"js/site.min.js\";\n\n/* New CSS file site.min.css that will contain all the compressed and merged CSS files */\npaths.concatCssDest = paths.webroot + \"css/site.min.css\";\n\n//to delete site.min.js file\ngulp.task(\"clean:js\", function (cb) {\n  rimraf(paths.concatJsDest, cb);\n});\n\n//to delete site.min.css file\ngulp.task(\"clean:css\", function (cb) {\n  rimraf(paths.concatCssDest, cb);\n});\n\n/* To merge, compress and place the JavaScript files into one single file site.min.js */\ngulp.task(\"min:js\", function () {\n  return gulp.src([paths.js, \"!\" + paths.minJs], { base: \".\" })\n  .pipe(concat(paths.concatJsDest))\n  .pipe(uglify())\n  .pipe(gulp.dest(\".\"));\n});\n\n/* to merge, compress and place the CSS files into one single file site.min.css */\ngulp.task(\"min:css\", function () {\n  return gulp.src([paths.css, \"!\" + paths.minCss])\n  .pipe(concat(paths.concatCssDest))\n  .pipe(cssmin())\n  .pipe(gulp.dest(\".\"));\n});\n```", "```js\n`clean:js`: This removes the `site.min.js` file`clean:css`: This removes the `site.min.css` file`min:js`: This merges all the files specified in `paths.js` and `paths.minJs`, minifies them using `uglify()`, and finally creates the `site.main.js` file`min:css`: This merges all the files specified in `paths.css` and `paths.minCss`, minifies them using `cssmin()`, and finally creates the `site.main.css` file\n```"]