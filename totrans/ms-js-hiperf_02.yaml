- en: Chapter 2. Increasing Code Performance with JSLint
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章. 使用JSLint提高代码性能
- en: In this chapter, we will learn about confirming performance fixes in JavaScript,
    and we will also learn about JSLint. There are two very good JavaScript validation
    and optimization tools, and we will learn how to use both and how to set the options
    to get the best code performance optimization results.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何确认JavaScript中的性能修复，并将学习JSLint。有两个非常好的JavaScript验证和优化工具，我们将学习如何使用这两个工具以及如何设置选项以获得最佳代码性能优化结果。
- en: 'So, we are going to cover the following topics in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在本章中，我们将涵盖以下主题：
- en: Checking the JavaScript code performance
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查JavaScript代码性能
- en: What is JavaScript linting?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是JavaScript代码检查？
- en: Using JSLint
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用JSLint
- en: Checking the JavaScript code performance
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查JavaScript代码性能
- en: Before we can start talking about how to improve our JavaScript performance,
    we have to ask ourselves a hard question about what code improvements actually
    improve the JavaScript application speed. In the earlier days of JavaScript development,
    many performance improvements were mainly implemented based on known JavaScript
    coding standards, watching for global variables without the variable being declared,
    keeping the variable scope in line, and so on without much verification beyond
    anything visual inside a website.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们谈论如何提高JavaScript性能之前，我们必须问自己一个关于代码改进实际上如何提高JavaScript应用程序速度的难题。在JavaScript开发的早期阶段，许多性能改进主要是基于已知的JavaScript编码标准实现的，关注未声明变量的全局变量，保持变量范围一致，等等，而没有太多的验证超出网站内部可见性的任何东西。
- en: Today, we have new APIs to take advantage of this problem and scope solutions
    for small parts of our code.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，我们有新的API可以利用这个问题，为代码的小部分提供解决方案。
- en: About the console time API
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于console time API
- en: To solve this issue, modern browsers implemented new console functions called
    `console.time` and `console.timeEnd`. What these two functions do is allow a developer
    to specify a label for the `console.time` and `console.timeEnd` functions, measure
    the amount of time a code block between the `time` and `timeEnd` instances would
    need to function, and finally, show the result in a console.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，现代浏览器实现了新的控制台函数，称为`console.time`和`console.timeEnd`。这两个函数的作用是允许开发人员为`console.time`和`console.timeEnd`函数指定一个标签，测量`time`和`timeEnd`实例之间的代码块所需的时间，最后，在控制台中显示结果。
- en: 'Let''s take a look at how to use `console.time()` and `console.timeEnd()` in
    a working example. Here, in our `02_01.js` example file, we have a simple code
    block creating 100 simple JavaScript objects using the `new` keyword inside a
    `for` loop, as shown in the following screenshot:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何在实际例子中使用`console.time()`和`console.timeEnd()`。在这里，在我们的`02_01.js`示例文件中，我们有一个简单的代码块，使用`new`关键字在`for`循环内部创建100个简单的JavaScript对象，如下面的屏幕截图所示：
- en: '![About the console time API](img/7296OS_02_01.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![关于console time API](img/7296OS_02_01.jpg)'
- en: Tip
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您购买的所有Packt书籍的账户中下载这些示例代码文件[http://www.packtpub.com](http://www.packtpub.com)。如果您在其他地方购买了这本书，您可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，以便将文件直接通过电子邮件发送给您。
- en: As we can see on line 5, we call the `console.time` function and, inside as
    its parameters, we have the `100 objects in For Loop` string label for our code
    block. We then add a `NewObj` object constructor on line 7\. Following that, we
    have a simple JavaScript `for` loop on line 11 that creates `100` instances of
    the `NewObj` constructor, passing in the value from each instance from the `for`
    loop on line 13\. Finally, on line 16, we end the time block with the `console.timeEnd`
    function, using the same label we declared at the start of the `time` instance.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在第5行所看到的，我们调用了`console.time`函数，在其内部作为参数，我们有代码块的`100 objects in For Loop`字符串标签。然后在第7行，我们添加了一个`NewObj`对象构造函数。接着，在第11行，我们有一个简单的JavaScript`for`循环，创建了`100`个`NewObj`构造函数的实例，从第13行的`for`循环中的每个实例传递值。最后，在第16行，我们使用与`time`实例开始时声明的相同标签结束时间块，调用`console.timeEnd`函数。
- en: 'Let''s try this code out in a browser; I''ll be using Google Chrome for this,
    but any modern browser, such as the latest version of Firefox, Internet Explorer,
    or Safari, should be fine. We''ll open `about:blank` in our browser''s URL so
    that we can have a simple test environment to work in, and then we will open our
    Web Inspectors or browser debuggers, paste the code snippet into our console,
    and press *Enter*. Here are the results that are displayed in my browser:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在浏览器中尝试这个代码；我将使用Google Chrome，但任何现代浏览器，如最新版本的Firefox、Internet Explorer或Safari，都应该可以。我们将打开浏览器URL中的`about:blank`，以便我们可以有一个简单的工作环境，然后我们将打开我们的网络检查器或浏览器调试器，将代码片段粘贴到我们的控制台中，并按下*Enter*。以下是在我的浏览器中显示的结果：
- en: '![About the console time API](img/7296OS_02_02.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![关于控制台时间API](img/7296OS_02_02.jpg)'
- en: 'If we take a look just before the `undefined` line in the output, we can see
    the label defined in the `console.time` function output: `100 objects in For loop:
    0.274ms`. So, with some hard data, we can visually see that the block of code
    we wrote takes the `0.274ms` JavaScript interpreter to process that bit of code.
    Great, but what happens if we tweak our code and make it more efficient, say,
    by changing our `for` loop to stop at `10` rather than `100`. Well, here''s an
    updated code sample for the `02_02.js` file in our example files:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '如果我们看输出中`undefined`行之前的部分，我们可以看到在`console.time`函数中定义的标签输出：`100 objects in For
    loop: 0.274ms`。所以，有了这些确切的数据，我们可以直观地看到我们编写的代码块需要`0.274ms`的JavaScript解释器来处理这部分代码。很好，但如果我们调整我们的代码使其更有效率，比如说，将我们的`for`循环改为停止在`10`而不是`100`。那么，这是我们示例文件中`02_02.js`文件的更新代码样本：'
- en: '![About the console time API](img/7296OS_02_03.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![关于控制台时间API](img/7296OS_02_03.jpg)'
- en: 'Here, we changed the amount the `for` loop iterates on lines 5, 11, 12, and
    16; let''s run this code and see what happens as shown in the following screenshot:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们在第5、11、12和16行改变了`for`循环的迭代次数；让我们运行这段代码，看看会出现什么情况，如下面的屏幕截图所示：
- en: '![About the console time API](img/7296OS_02_04.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![关于控制台时间API](img/7296OS_02_04.jpg)'
- en: We can now see that dropping our `for` loop to `10` iterations versus `100`
    iterations drops our processing time from `0.274ms` to `0.099ms`. We can visualize
    scaling this up to much larger applications knowing that this performance-testing
    API can be very helpful in evaluating performance in our JavaScript code.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以看出，将`for`循环的迭代次数从`100`次减少到`10`次，我们的处理时间从`0.274ms`降低到了`0.099ms`。我们知道这个性能测试API在评估我们的JavaScript代码性能时非常有帮助，因此我们可以想象将这个方法应用到更大型的应用中。
- en: When to use console.time
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 何时使用console.time
- en: The `console.time()` method allows developers to have an understanding of what
    code affects performance and what doesn't. The `console.time()` method delivers
    results based on not only what browser you're using, but also what operating system
    and system hardware you're using. If you ran the preceding code snippets, they
    should be near the values given in this book but more than likely not the same
    by a small variation.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`console.time()`方法允许开发者了解哪些代码会影响性能，哪些不会。`console.time()`方法基于你使用的浏览器、操作系统和系统硬件来提供结果。如果你运行了前面代码片段，它们应该接近于本书中给出的值，但很可能由于小的偏差而不是完全相同。'
- en: So, when using `console.time()`, think of them as a guide but not as a hard
    result. As we work through the book using the `console.time()` method, there may
    be some variation between the results listed here and what you experience depending
    on your work environment. What should be consistent is that you will be seeing
    performance improvements in general when using the `console.time()` method.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，在使用`console.time()`时，把它当作一个指南而不是一个确切的结果。当我们通过书籍使用`console.time()`方法时，这里列出的结果和你根据你的工作环境得到的结果可能会有所不同。然而，你应该能保持一致地看到使用`console.time()`方法后性能的总体提升。
- en: Now with our performance-testing knowledge in hand, we will start learning about
    common performance bottlenecks in JavaScript but, before we dig deep into these
    concepts, we are going to look at tools that help with the evaluation process.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经掌握了性能测试的知识，我们将开始学习JavaScript中常见的性能瓶颈，但在深入这些概念之前，我们将先了解有助于评估过程的工具。
- en: What is JavaScript linting?
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是JavaScript代码格式化？
- en: Before we talk about JSLint, we need to discuss linters in general, what they
    are, and how they influence JavaScript performance. A lint is, simply put, a code-validation
    checker. It allows a developer to point to a code file and check for errors or
    potential issues ranging from spacing issues to pure code errors.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在讨论 JSLint 之前，我们需要讨论一下代码检查器（linters）的一般概念，它们是什么以及它们如何影响 JavaScript 的性能。简单地说，lint
    就是一个代码验证检查器。它允许开发者指向一个代码文件，并检查从空格问题到纯粹的代码错误等错误或潜在问题。
- en: Linters typically receive the contents of a file and build a source tree. In
    the case of JavaScript, this can be objects such as global variables, functions,
    prototypes, arrays, and so forth. After the tree is created, analyzers will take
    parts of the source tree and report anything an analyzer that was written would
    flag. Lastly, any rule readers or parameters flagged before running the linter
    will look for any options to ignore and generate a final report.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 代码检查器通常会接收文件的正文并构建一个源树。在 JavaScript 的情况下，这可以是全局变量、函数、原型、数组等对象。创建树后，分析器会取源树的某些部分并报告任何分析器会标记的内容。最后，任何在运行
    linter 之前标记的规则读者或参数将寻找任何忽略的选项并生成最终报告。
- en: Common rule readers for JavaScript options would be settings such as checking
    for EcmaScript 3, allowing white space, allowing the `continue` keyword, allowing
    non-strict conditionals for the `if` statements, and so on.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 常见的 JavaScript 选项规则读者可能包括检查 EcmaScript 3、允许空格、允许 `continue` 关键字、允许 `if` 语句的非严格条件等设置。
- en: About JSLint
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于 JSLint
- en: JSLint is a JavaScript code analysis tool that was written in JavaScript by
    Douglas Crockford, who also helped in popularizing JSON in software development.
    JSLint can be used in many ways, as mentioned in [Chapter 1](ch01.html "Chapter 1. The
    Need for Speed"), *The Need for Speed*. Many IDEs have features beyond just editing
    code; some of these features include things such as error checking and, in some
    cases, the IDEs use a version of JSLint.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: JSLint 是一个由 JavaScript 编写的 JavaScript 代码分析工具，由 Douglas Crockford 编写，他还帮助在软件开发中普及了
    JSON。正如[第 1 章](ch01.html "第 1 章．速度的必要性")《速度的必要性》所提到的，JSLint 可以用多种方式使用。许多集成开发环境（IDE）的功能不仅仅是编辑代码，其中一些功能包括错误检查等，在某些情况下，IDE
    会使用 JSLint 的一个版本。
- en: 'For this chapter we will discuss how to use JSLint using the official JSLint
    online site at [http://www.jslint.com/](http://www.jslint.com/), as shown in the
    following screenshot:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论如何使用官方 JSLint 在线网站 [http://www.jslint.com/](http://www.jslint.com/)，如下面的屏幕截图所示：
- en: '![About JSLint](img/7296OS_02_05.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![关于 JSLint](img/7296OS_02_05.jpg)'
- en: Using JSLint
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 JSLint
- en: 'JSLint is very easy to use with a site; all you need is some JavaScript and
    to paste your code file into JSLint. Let''s try a small code sample, as shown
    in the following screenshot and that you can reference in the example file as
    the `02_03.js` file:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 JSLint 非常简单，你只需要一些 JavaScript 并将你的代码文件粘贴到 JSLint 中。让我们尝试一个小的代码样本，如下面的屏幕截图所示，你可以在示例文件中参考它作为
    `02_03.js` 文件：
- en: '![Using JSLint](img/7296OS_02_06.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![使用 JSLint](img/7296OS_02_06.jpg)'
- en: 'Now, let''s paste our code into the input box present at [http://www.JSLint.com](http://www.JSLint.com)
    and click on the **JSLint** button. Immediately, we should see a list of errors
    showing up on the site below the **JSLint** button, as shown in the following
    screenshot:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将我们的代码粘贴到 [http://www.JSLint.com](http://www.JSLint.com) 输入框中，并点击**JSLint**
    按钮。立即，我们应该在网站上看到底部的**JSLint** 按钮下出现一个错误列表，如下面的屏幕截图所示：
- en: '![Using JSLint](img/7296OS_02_07.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![使用 JSLint](img/7296OS_02_07.jpg)'
- en: 'See also these remaining errors:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅以下剩余错误：
- en: '![Using JSLint](img/7296OS_02_08.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![使用 JSLint](img/7296OS_02_08.jpg)'
- en: Reviewing errors
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 审查错误
- en: 'Before looking at these errors, let''s look at the bottom of the error list;
    we will see an error: `Stopping. (52% scanned)`. This is a warning that JSLint
    found so many errors that the analyzer tools in JSLint simply gave up reviewing
    errors. It''s important to keep this error in mind when reviewing JSLint messages;
    as only 52 percent of the code was reviewed, additional errors may appear once
    we fix them.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在查看这些错误之前，让我们看看错误列表的底部；我们会看到一个错误：`Stopping. (52% scanned)`。这是一个警告，JSLint 找到了如此多的错误，以至于
    JSLint 的分析工具 simply gave up 审查错误。在审查 JSLint 消息时，记住这个错误很重要；因为只有 52% 的代码被审查，在我们修复它们之后，可能还会出现额外的错误。
- en: Okay, now that we've understood JSLint's limitation, let's fix these errors.
    When working with JSlint, work through the error list top down, so error 1 is
    `Unexpected character '(space)'.`. Well, what does that mean? To explain, JSLint
    is *very* picky about the way spacing should be in JavaScript files. A JavaScript
    interpreter assumes a specific spacing within certain JavaScript objects and variables.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在我们已经理解了JSLint的限制，让我们来修正这些错误。在处理JSLint时，从上往下处理错误列表，所以错误1是`意外字符'(空格)'。`那么这是什么意思呢？为了说明，JSLint对JavaScript文件中的空格方式非常挑剔。JavaScript解释器假设在某些JavaScript对象和变量中具有特定的空格。
- en: This empty space is displayed before any other errors in the code appear, so
    we can assume that this error comes before any code appears and, in fact, that
    is the case. If we look at the `02_03.js` file, actually line 4 is causing the
    issue, which is the space between the comment header and our `my_count` global
    variable.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这段空白空间出现在代码中的其他错误之前，所以我们可以假设这个错误出现在任何代码出现之前，实际上确实如此。如果我们查看`02_03.js`文件，实际上第4行是导致问题的地方，这是注释头和我们的`my_count`全局变量之间的空格。
- en: Configuring messy white space
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置杂乱的空格
- en: 'We can address our spacing errors in two ways: we can review each space and
    correct it line by line or, if we are using a minifier, we can tell JSLint to
    ignore empty and unnecessary lines. To do this, we will navigate to **Options**
    on the bottom of the page, and we will set the **messy white space** option to
    **true** *.* This will tell JSLint to ignore any spacing issues that aren''t directly
    associated with code interpretation, as indicated in the following screenshot:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过两种方式解决我们的空格错误：我们可以逐行审查并更正，或者如果我们使用压缩工具，我们可以告诉JSLint忽略空行和不必要的行。为此，我们将导航到页面底部的**选项**，并将**杂乱空格**选项设置为**true**
    *.*这将告诉JSLint忽略与代码解释直接关联的任何空格问题，如下面的截图所示：
- en: '![Configuring messy white space](img/7296OS_02_09.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![配置杂乱的空格](img/7296OS_02_09.jpg)'
- en: Once this is set to **true**, we will see a new panel appear under options,
    called **JSLint Directives**. The **JSLint Directives** panel provides a quick
    list of the parameters JSLint will pass in when reviewing code, before executing
    the validator. Seeing directives here is very helpful if we're trying to copy-and-paste
    this configuration in another instance of JSLint, say a build system… but more
    on this soon.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦设置为**true**，我们将在选项下面看到一个新的面板出现，叫做**JSLint指令**。**JSLint指令**面板提供了一个JSLint在审查代码之前将传递的参数的快速列表，在执行验证器之前。在这里看到指令非常有帮助，如果我们试图在其他JSLint实例中复制粘贴这个配置，比如说在一个构建系统中……关于这一点稍后会详细说明。
- en: 'With messy white space ignored, we can rerun JSLint on our code and see an
    updated list of errors, shown as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在忽略杂乱空格后，我们可以重新运行JSLint并看到错误列表的更新，如下所示：
- en: '![Configuring messy white space](img/7296OS_02_10.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![配置杂乱的空格](img/7296OS_02_10.jpg)'
- en: Now, we check how much of the code JSLint detected. This time, if we look at
    the last error, we can see that JSLint stopped at `84%`, which is much better
    than before, but we can do better here. Let's take a look at the first new error.
    At the top of the error list, we can see the error stating `'my_count' was used
    before it was defined.` This is line 5, character 1 in the **Errors** panel.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们检查一下JSLint检测到的代码量。这次，如果我们看看最后一个错误，可以看到JSLint在`84%`的地方停了下来，这比以前好多了，但我们还有提升的空间。让我们看看第一个新的错误。在错误列表的顶部，我们可以看到错误提示`'my_count'在定义之前就被使用了。`这是在**错误**面板的第5行，第1个字符。
- en: 'This indicates that we forgot to declare `var` before our `my_count` variable,
    so let''s update it as shown in the following screenshot, adding `var` to `my_count`
    on line 5, and then let''s rerun JSLint. You can reference the update in the exercise
    files as `02_03_01` `.js`:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这表明我们忘记在`my_count`变量之前声明`var`，所以让我们按照下面的截图进行更新，在第5行给`my_count`添加`var`，然后让我们重新运行JSLint。您可以在练习文件中参考更新，文件名为`02_03_01`.js`：
- en: '![Configuring messy white space](img/7296OS_02_11.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![配置杂乱的空格](img/7296OS_02_11.jpg)'
- en: 'Next, after rerunning JSLint with our updated code, let''s look at the next
    two lines. The first line states `Unexpected TODO comment`. This is pretty straightforward;
    in JSLint, we can specify allowing **TODO comments** in our JavaScript code, which
    is pretty handy! Let''s allow this as we are just improving our code in JSLint
    and are not completing the file for now. Take a look at the options I''ve highlighted,
    where you can set TODO to be allowed or not:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在我们更新后的代码中重新运行JSLint后，让我们看看接下来的两行。第一行显示`Unexpected TODO comment`。这相当直接；在JSLint中，我们可以指定允许**TODO
    comments**在我们的JavaScript代码中，这非常方便！让我们允许这个，因为我们现在只是在JSLint中改进我们的代码，现在不是完成文件的时候。请查看我突出显示的选项，您可以在其中设置是否允许TODO：
- en: '![Configuring messy white space](img/7296OS_02_12.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![配置杂乱的空格](img/7296OS_02_12.jpg)'
- en: We will now set **TODO comments** in the **Options** panel to **true**; next,
    let's take a look at the remaining errors.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们在**选项**面板中设置**TODO注释**为**true**；接下来，让我们看看剩下的错误。
- en: Understanding the use strict statement
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 了解use strict语句
- en: 'So, here''s what''s now left in our JSLint error list, shown in the following
    screenshot. The next error we see is `Missing ''use strict'' statement.`. Now,
    if you haven''t seen the `use strict` statement in JavaScript previously, I''ll
    explain:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，现在留在我们JSLint错误列表中的是以下截图所示。接下来我们看到的是`Missing 'use strict' statement.`。现在，如果你之前没有在JavaScript中看到过`use
    strict`语句，我会解释：
- en: '![Understanding the use strict statement](img/7296OS_02_13.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![了解use strict语句](img/7296OS_02_13.jpg)'
- en: The `use strict` statement is a hint to a browser to enable *strict mode* when
    reading JavaScript at runtime. This allows errors typically displayed as warnings
    to return as errors in our browser. One other advantage to using the `use strict`
    statement in our code is that it allows the JavaScript interpreter to run faster
    as it assumes the code has been optimized and bug-tested properly. This tells
    the JavaScript interpreter that code here has been written properly and the interpreter
    doesn't have to run as many checks on the code at runtime.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`use strict`语句是提示浏览器在运行时读取JavaScript时启用*严格模式*的提示。这允许通常作为警告显示的错误在我们的浏览器中作为错误返回。在代码中使用`use
    strict`语句的另一个优点是，它允许JavaScript解释器运行得更快，因为它假设代码已经过优化和彻底测试。这告诉JavaScript解释器这里的代码已经正确编写，解释器在运行时不必对代码进行那么多检查。'
- en: 'Using the `use strict` statement isn''t hard to implement, and we can add it
    before any code inside every function like this:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`use strict`语句并不难实现，我们可以在每个函数内的任何代码前添加它，像这样：
- en: '![Understanding the use strict statement](img/7296OS_02_14.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![了解use strict语句](img/7296OS_02_14.jpg)'
- en: 'We can also include it globally in the full JavaScript file by adding it above
    the first line of the code, as shown in the following screenshot:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以在全球范围内在完整的JavaScript文件中包含它，通过在代码的第一行上方添加它，如下面的截图所示：
- en: '![Understanding the use strict statement](img/7296OS_02_15.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![了解use strict语句](img/7296OS_02_15.jpg)'
- en: One thing to know about the `use strict` statement with regard to JSLint is
    that JSLint *prefers* to set the `use strict` statement at the function level
    (shown previously in the first `use strict` example). The idea is that it properly
    sets the scope for the `use strict` statement as per the function for better code
    testing and analyzing, but both are correct in terms of JavaScript.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 关于`use strict`语句，有一点需要了解的是，JSLint*更倾向于*在函数级别设置`use strict`语句（如第一个`use strict`示例中所示）。这样做的想法是，它正确地为`use
    strict`语句设置了作用域，以便根据函数更好地进行代码测试和分析，但两种方式在JavaScript中都是正确的。
- en: 'Let''s finish up these remaining issues under our `TODO` comment; on line 9,
    we will add `"use strict"` followed by adding a semicolon to what would now be
    line 10 after our `console.log` statement. With that finished, it should resemble
    the following screenshot:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们结束这些剩余的问题，在我们的`TODO`注释下；在第9行，我们将添加`"use strict"`，然后在我们`console.log`语句之后的第10行添加一个分号。完成后，它应该类似于以下截图：
- en: '![Understanding the use strict statement](img/7296OS_02_16.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![了解use strict语句](img/7296OS_02_16.jpg)'
- en: Using console in JSLint
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在JSLint中使用控制台
- en: 'We are nearly finished with this code. However, on executing it we get a list
    of errors in which the first line, which may seem odd, states: `''console'' was
    used before it was defined.` in the **Errors** panel. JSLint can validate JavaScript
    that may not be designed for a browser; this could be a Node.js script, for example.
    To enable browser objects, we need to enable the **console, alert, …** and **a
    browser** options in our JSLint **Options** panel; we can set these to **true**,
    as shown in the following screenshot:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们几乎完成了这段代码。然而，在执行它时，我们会得到一个错误列表，其中第一行可能看起来很奇怪，它指出：`'console'在定义之前就被使用了。`在**错误**面板中。JSLint可以验证可能不为浏览器设计的JavaScript；这可能是Node.js脚本，例如。为了启用浏览器对象，我们需要在我们的JSLint**选项**面板中启用**控制台，警告，...**和**浏览器**选项；我们可以将这些设置为**真**，如下面的截图所示：
- en: '![Using console in JSLint](img/7296OS_02_17.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![在JSLint中使用控制台](img/7296OS_02_17.jpg)'
- en: With these enabled, lets rerun the script; the remaining errors should be straightforward.
    The first error complains that we should `Combine this with the previous 'var'
    statement.`. We can remove the `number1` and `number2` variables and simply assign
    `my_count = 42;`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 启用这些功能后，让我们重新运行脚本；剩下的错误应该很简单。第一个错误抱怨说我们应该`将这个与之前的'var'语句结合起来。`。我们可以删除`number1`和`number2`变量，简单地赋值`my_count
    = 42;`。
- en: 'Lastly, our `if` statement could use some work. First, JSLint complains that
    we are using a loose conditional (a double equals for comparison) in our `if`
    statement. If we use triple equals for comparison, we compare the type as well.
    By doing this, our code will run the comparison faster than before. Also, the
    `if` statement doesn''t include brackets around the conditional code, and this
    can slow the interpreter down, so let''s add them. Our final code should resemble
    the following screenshot:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们的`if`语句需要做一些工作。首先，JSLint抱怨我们在`if`语句中使用了一个松散的条件（比较时使用双等号）。如果我们使用三元等号进行比较，我们会同时比较类型。这样做，我们的代码将比以前更快地进行比较。另外，`if`语句没有在条件代码周围包含括号，这可能会减慢解释器的速度，所以让我们添加它们。我们的最终代码应该类似于以下截图：
- en: '![Using console in JSLint](img/7296OS_02_18.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![在JSLint中使用控制台](img/7296OS_02_18.jpg)'
- en: 'Now let''s re-run our finalized code thru JSLint and we should see a screen
    like this:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们通过JSLint重新运行我们的最终代码，我们应该看到一个这样的屏幕：
- en: '![Using console in JSLint](img/7296OS_02_19.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![在JSLint中使用控制台](img/7296OS_02_19.jpg)'
- en: We can see that we now have no errors in JSLint, and we can also see a **Function
    Report** panel, indicating a variable scope as a note of what variables are global
    to the file and what variables and functions exist inside a function, including
    our anonymous function example.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，现在在JSLint中没有错误，我们还可以看到一个**函数报告**面板，指示变量作用域作为一个注解，说明哪些变量对文件是全局的，以及哪些变量和函数存在于函数内部，包括我们的匿名函数示例。
- en: Before we wrap up this chapter, let's try the `console.time` method on both
    our `2_03_01.js` and `02_03_03.js` code files with the `console.time` function
    wrapped around. The time I get on my end for the former is `0.441ms`, and the
    optimized code with JSLint is `0.211ms`! Not bad; *double* the performance!
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在结束本章之前，让我们尝试在`2_03_01.js`和`02_03_03.js`代码文件上使用`console.time`方法，将`console.time`函数包裹起来。我这边前者的时间是`0.441ms`，而使用JSLint优化的代码是`0.211ms`!
    还不错；*性能翻倍*！
- en: Summary
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned the basics of the `console.time` and `console.timeEnd`
    methods, and we also learned about JSLint and how it can improve our JavaScript
    performance. In the next chapter, we will take a quick look at JSLint and get
    our hands dirty by integrating it into a build system!
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了`console.time`和`console.timeEnd`方法的基本知识，我们还了解了JSLint以及它如何提高我们的JavaScript性能。在下一章中，我们将快速查看JSLint，并通过将其集成到构建系统中来亲自动手！
