- en: Chapter 7. Using JSON in a Type-safe Manner
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章．以类型安全的方式使用JSON
- en: 'In this chapter, we build on the recipes from [Chapter 1](ch01.html "Chapter 1. Reading
    and Writing JSON on the Client"), *Reading and Writing JSON on the Client*, showing
    you how you can use strong typing in your applications with JSON using C#, Java,
    and TypeScript. You''ll find the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将在[第1章](ch01.html "第1章．在客户端读写JSON")，*在客户端读写JSON*的食谱基础上，向您展示如何使用C#、Java和TypeScript在您的应用程序中使用强类型。您将找到以下食谱：
- en: How to deserialize an object using Json.NET
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用Json.NET反序列化对象
- en: How to handle date and time objects using Json.NET
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用Json.NET处理日期和时间对象
- en: How to deserialize an object using gson for Java
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用gson为Java反序列化对象
- en: How to use TypeScript with Node.js
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用Node.js与TypeScript
- en: How to annotate simple types using TypeScript
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用TypeScript注解简单类型
- en: How to declare interfaces using TypeScript
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用TypeScript声明接口
- en: How to declare classes with interfaces using TypeScript
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用TypeScript声明带有接口的类
- en: Using json2ts to generate TypeScript interfaces from your JSON
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用json2ts从您的JSON生成TypeScript接口
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: While some say that strong types are for weak minds, the truth is that strong
    typing in programming languages can help you avoid whole classes of errors in
    which you mistakenly assume that an object of one type is really of a different
    type. Languages such as C# and Java provide strong types for exactly this reason.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 有些人说强类型是弱智的标志，但事实是，编程语言中的强类型可以帮助你避免一整类错误，其中你错误地假设一个对象实际上属于另一种类型。像C#和Java这样的语言提供强类型正是出于这个原因。
- en: Fortunately, the JSON serializers for C# and Java support strong typing, which
    is especially handy once you've figured out your object representation and simply
    want to map JSON to instances of classes you've already defined. In [Chapter 1](ch01.html
    "Chapter 1. Reading and Writing JSON on the Client"), *Reading and Writing JSON
    on the Client*, you saw how to convert from a C# or Java class to JSON, as well
    as how to convert the JSON back to an untyped object; in this chapter, we use
    Json.NET for C# and gson for Java to convert from JSON to instances of classes
    you define in your application.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，C#和Java的JSON序列化器支持强类型，一旦您弄清楚了对象表示，只想将JSON映射到您已经定义的类的实例时，这尤其方便。在第1章中，*在客户端读写JSON*，您看到了如何将C#或Java类转换为JSON，以及如何将JSON转换为未命名的对象；在本章中，我们使用Json.NET对C#和gson对Java将JSON转换为您应用程序中定义的类的实例。
- en: Finally, we take a look at TypeScript, an extension of JavaScript that provides
    compile-time checking of types, compiling to plain JavaScript for use with Node.js
    and browsers. We'll look at how to install the TypeScript compiler for Node.js,
    how to use TypeScript to annotate types and interfaces, and how to use a web page
    by Timmy Kokke to automatically generate TypeScript interfaces from JSON objects.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们来看看TypeScript，这是JavaScript的一个扩展，提供了类型在编译时的检查，编译成普通的JavaScript以供与Node.js和浏览器一起使用。我们将查看如何为Node.js安装TypeScript编译器，如何使用TypeScript注解类型和接口，以及如何使用Timmy
    Kokke的网页自动从JSON对象生成TypeScript接口。
- en: How to deserialize an object using Json.NET
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何使用Json.NET反序列化对象
- en: In this recipe, we show you how to use Newtonsoft's Json.NET to deserialize
    JSON to an object that's an instance of a class. We'll use Json.NET, which we
    mentioned in [Chapter 1](ch01.html "Chapter 1. Reading and Writing JSON on the
    Client"), *Reading and Writing JSON on the Client*, because although this works
    with the existing .NET JSON serializer, there are other things that I want you
    to know about Json.NET, which we'll discuss in the next two recipes.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将向您展示如何使用Newtonsoft的Json.NET将JSON反序列化为类的实例。我们将使用Json.NET，这是我们在[第1章](ch01.html
    "第1章．在客户端读写JSON")，*在客户端读写JSON*中提到的，因为尽管这适用于现有的.NET JSON序列化器，但我还想要您了解关于Json.NET的其他内容，我们将在接下来的两个食谱中讨论。
- en: Getting ready
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备阶段
- en: 'To begin, you need to be sure you have a reference to Json.NET in your project.
    The easiest way to do this is to use NuGet; launch NuGet, search for Json.NET,
    and click on **Install**, as shown in the following screenshot:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您需要确保您的项目中有一个对Json.NET的引用。最简单的方法是使用NuGet；启动NuGet，搜索Json.NET，然后点击**安装**，如下面的屏幕截图所示：
- en: '![Getting ready](img/B04206_07_01.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![准备阶段](img/B04206_07_01.jpg)'
- en: 'You''ll also need a reference to the `Newonsoft.Json` namespace in any file
    that needs those classes with a `using` directive at the top of your file:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要在需要这些类的任何文件中，在文件的顶部使用`using`指令引用`Newonsoft.Json`命名空间：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How to do it…
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到…
- en: 'Here''s an example that provides the implementation of a simple class, converts
    a JSON string to an instance of that class, and then converts the instance back
    into JSON:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个示例，提供了简单类的实现，将JSON字符串转换为此类的实例，然后将实例转换回JSON：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How it works…
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作…
- en: In order to deserialize the JSON in a type-safe manner, we need to have a class
    that has the same fields as our JSON. The `Record` class, defined in the first
    few lines does this, defining fields for `call`, `lat`, and `lng`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 为了以类型安全的方式反序列化JSON，我们需要有一个与我们的JSON具有相同字段的类。在第一行定义的`Record`类这样做，定义了`call`、`lat`和`lng`字段。
- en: The `Newtonsoft.Json` namespace provides the `JsonConvert` class with static
    methods `SerializeObject` and `DeserializeObject`. `DeserializeObject` is a generic
    method, taking the type of the object that should be returned as a type argument,
    and as arguments the JSON to parse, and an optional argument indicating options
    for the JSON parsing. We pass the `MissingMemberHandling` property as a setting,
    indicating with the value of the enumeration `Error` that in the event that a
    field is missing, the parser should throw an exception. After parsing the class,
    we convert it again to JSON and write the resulting JSON to the console.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`Newtonsoft.Json`命名空间提供了`JsonConvert`类，带有静态方法`SerializeObject`和`DeserializeObject`。`DeserializeObject`是一个泛型方法，接受应返回的对象的类型作为类型参数，以及JSON解析的JSON和可选参数指示JSON解析的选项。我们传递`MissingMemberHandling`属性作为设置，用枚举值`Error`表示，如果字段缺失，解析器应抛出异常。在解析类之后，我们再次将其转换为JSON，并将结果JSON写入控制台。'
- en: There's more…
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: If you skip passing the `MissingMember` option or pass `Ignore` (the default),
    you can have mismatches between field names in your JSON and your class, which
    probably isn't what you want for type-safe conversion. You can also pass the `NullValueHandling`
    field with a value of `Include` or `Ignore`. If `Include`, fields with null values
    are included; if `Ignore`, fields with Null values are ignored.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你跳过传递`MissingMember`选项或传递`Ignore`（默认值），你可以在JSON中的字段名与你的类之间存在不匹配，这可能不是你进行类型安全转换所想要的。你还可以传递`NullValueHandling`字段，其值为`Include`或`Ignore`。如果为`Include`，包含具有空值的字段；如果为`Ignore`，则忽略具有空值的字段。
- en: See also
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 请参阅
- en: The full documentation for Json.NET is at [http://www.newtonsoft.com/json/help/html/Introduction.htm](http://www.newtonsoft.com/json/help/html/Introduction.htm).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Json.NET的完整文档在[http://www.newtonsoft.com/json/help/html/Introduction.htm](http://www.newtonsoft.com/json/help/html/Introduction.htm)。
- en: Type-safe deserialization is also possible with JSON support using the .NET
    serializer; the syntax is similar. For an example, see the documentation for the
    JavaScriptSerializer class at [https://msdn.microsoft.com/en-us/library/system.web.script.serialization.javascriptserializer(v=vs.110).aspx](https://msdn.microsoft.com/en-us/library/system.web.script.serialization.javascriptserializer(v=vs.110).aspx).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 使用.NET序列化器也可以进行类型安全的JSON支持；语法相似。有关示例，请参阅[JavaScriptSerializer类](https://msdn.microsoft.com/en-us/library/system.web.script.serialization.javascriptserializer(v=vs.110).aspx)的文档。
- en: How to handle date and time objects using Json.NET
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Json.NET处理日期和时间对象
- en: Dates in JSON are problematic for people because JavaScript's dates are in milliseconds
    from the epoch, which are generally unreadable to people. Different JSON parsers
    handle this differently; Json.NET has a nice `IsoDateTimeConverter` that formats
    the date and time in ISO format, making it human-readable for debugging or parsing
    on platforms other than JavaScript. You can extend this method to converting any
    kind of formatted data in JSON attributes, too, by creating new converter objects
    and using the converter object to convert from one value type to another.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: JSON中的日期对人们来说是个问题，因为JavaScript的日期是从纪元开始以来的毫秒数，这通常对人们来说是难以阅读的。不同的JSON解析器处理方式不同；Json.NET有一个很好的`IsoDateTimeConverter`，它将日期和时间格式化为ISO格式，使得在其他平台（除了JavaScript）上进行调试或解析时人类可读。你也可以通过创建新的转换器对象并使用转换器对象将一个值类型转换为另一个值类型，将此方法扩展到转换JSON属性中的任何格式化数据。
- en: How to do it…
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到…
- en: 'Simply include a new `IsoDateTimeConverter` object when you call `JsonConvert.Serialize`,
    like this:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 只需在调用`JsonConvert.Serialize`时包含一个新的`IsoDateTimeConverter`对象，像这样：
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How it works…
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作…
- en: 'This causes the serializer to invoke the `IsoDateTimeConverter` instance with
    any instance of date and time objects, returning ISO strings like this in your
    JSON:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这导致序列器调用`IsoDateTimeConverter`实例，以任何日期和时间对象实例化，返回如下的ISO字符串：
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: There's more…
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: 'Note that this can be parsed by Json.NET, but not JavaScript; in JavaScript,
    you''ll want to use a function like this:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这可以被Json.NET解析，但不是JavaScript；在JavaScript中，您希望使用像这样的函数：
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The rather hairy regular expression on the third line matches dates in the ISO
    format, extracting each of the fields. If the regular expression finds a match,
    it extracts each of the date fields, which are then used by the `Date` class's
    UTC method to create a new date.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 第三行的相当复杂的正则表达式匹配ISO格式的日期，提取每个字段。如果正则表达式找到匹配项，它将提取每个日期字段，然后使用`Date`类的UTC方法创建新的日期。
- en: Tip
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Note that the entire regular expression—everything between the`/`characters—should
    be on one line with no whitespace. It's a little long for this page, however!
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，整个正则表达式——`/`字符之间的所有内容——应该位于同一行，且没有空格。然而，这个页面有点长！
- en: See also
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: For more information on how Json.NET handles dates and times, see the documentation
    and example at [http://www.newtonsoft.com/json/help/html/SerializeDateFormatHandling.htm](http://www.newtonsoft.com/json/help/html/SerializeDateFormatHandling.htm).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 关于Json.NET如何处理日期和时间的更多信息，请参阅[http://www.newtonsoft.com/json/help/html/SerializeDateFormatHandling.htm](http://www.newtonsoft.com/json/help/html/SerializeDateFormatHandling.htm)上的文档和示例。
- en: How to deserialize an object using gson for Java
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用gson为Java反序列化对象
- en: Like Json.NET, gson provides a way to specify the destination class to which
    you're deserializing a JSON object. In fact, it's the same method you used in
    the recipe *Reading and writing JSON in Java*, in [Chapter 1](ch01.html "Chapter 1. Reading
    and Writing JSON on the Client"), *Reading and Writing JSON on the Client*.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 与Json.NET一样，gson提供了一种指定您要反序列化的JSON对象目标类的方法。实际上，这正是您在[第1章](ch01.html "第1章. 客户端的JSON读写")*客户端的JSON读写*中使用的食谱*读写JSON*中使用的相同方法。
- en: Getting ready
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备中
- en: You'll need to include the gson JAR file in your application, just as you would
    for any other external API.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要将gson JAR文件包含在您的应用程序中，就像任何其他外部API一样。
- en: How to do it…
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到…
- en: 'You use the same method as you use for type-unsafe JSON parsing using gson
    using `fromJson`, except you pass the class object to gson as the second argument,
    like this:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 您使用的方法与使用gson进行类型不安全的JSON解析时使用的`fromJson`方法相同，只是您将类对象作为第二个参数传递给gson，像这样：
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How it works…
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作…
- en: The `fromGson` method always takes a Java class; in [Chapter 1](ch01.html "Chapter 1. Reading
    and Writing JSON on the Client"), *Reading and Writing JSON on the Client*, the
    class we were deserializing to was `JsonElement`, which handles the general dynamic
    nature of JSON. In the example in this recipe, we convert directly to a plain
    old Java object that our application can use without needing to use the dereferencing
    and type conversion interface of `JsonElement` that gson provides.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`fromGson`方法总是接受一个Java类；在第1章*客户端的JSON读写*中，我们要反序列化的类是`JsonElement`，它处理JSON的一般动态性。在本食谱的示例中，我们直接转换为一个简单的Java对象，我们的应用程序可以使用，而无需使用gson提供的`JsonElement`的反引用和类型转换接口。'
- en: There's more…
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: The gson library can also deal with nested types and arrays as well. You can
    also hide fields from being serialized or deserialized by declaring them `transient`,
    which makes sense because transient fields aren't serialized.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: gson库也可以处理嵌套类型和数组。您还可以通过将字段声明为`transient`来隐藏字段，使其不被序列化或反序列化，这是有意义的，因为瞬态字段不会被序列化。
- en: See also
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The documentation for gson and its support for deserializing instances of classes
    is at [https://sites.google.com/site/gson/gson-user-guide#TOC-Object-Examples](https://sites.google.com/site/gson/gson-user-guide#TOC-Object-Examples).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: gson及其支持反序列化类实例的文档在[https://sites.google.com/site/gson/gson-user-guide#TOC-Object-Examples](https://sites.google.com/site/gson/gson-user-guide#TOC-Object-Examples)。
- en: How to use TypeScript with Node.js
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何使用TypeScript与Node.js
- en: Using TypeScript with Visual Studio is easy; it's just part of the installation
    of Visual Studio for any version after Visual Studio 2013 Update 2\. Getting the
    TypeScript compiler for Node.js is almost as easy—it's an `npm install` away.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 使用TypeScript与Visual Studio配合使用很容易；它是Visual Studio 2013 Update 2之后的任何版本的Visual
    Studio安装的一部分。为Node.js获取TypeScript编译器同样简单——只需一个`npm install`。
- en: How to do it…
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到…
- en: 'On a command line with npm in your path, run the following command:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在带有`npm`的命令行中，运行以下命令：
- en: '[PRE6]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The npm option `–g` tells npm to install the TypeScript compiler globally, so
    it's available to every Node.js application you write. Once you run it, npm downloads
    and installs the TypeScript compiler binary for your platform.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`npm`选项`–g`告诉`npm`将TypeScript编译器全局安装，这样它就可以供你写的每一个Node.js应用程序使用了。一旦你运行这个命令，`npm`就会下载并为你所在的平台安装TypeScript编译器的二进制文件。'
- en: There's more…
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容…
- en: 'Once you run this command to install the compiler, you''ll have the TypeScript
    compiler tsc available on the command line. Compiling a file with tsc is as easy
    as writing the source code and saving in a file that ends in `.ts` extension,
    and running tsc on it. For example, given the following TypeScript saved in the
    file `hello.ts`:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你运行这个命令来安装编译器，你就可以在命令行上使用TypeScript编译器`tsc`了。用`tsc`编译一个文件和写源代码并保存为一个以`.ts`结尾的文件一样简单，然后在该文件上运行`tsc`。例如，假设以下TypeScript代码保存在名为`hello.ts`的文件中：
- en: '[PRE7]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Running `tschello.ts` at the command line creates the following JavaScript:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令行运行`tschello.ts`会生成以下的JavaScript代码：
- en: '[PRE8]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Try it!
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 试试看！
- en: 'As we''ll see in the next section, the function declaration for `greeter` contains
    a single TypeScript annotation; it declares the argument person to be `string`.
    Add the following line to the bottom of `hello.ts`:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在下一节所看到的，`greeter`的函数声明包含了一个TypeScript注解；它声明参数`person`为`string`。在`hello.ts`的底部添加以下一行：
- en: '[PRE9]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, run the `tschello.ts` command again; you''ll get an error like this one:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，再次运行`tschello.ts`命令；你会得到一个错误，像这样的一个：
- en: '[PRE10]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This error indicates that I'm attempting to call `greeter` with a value of the
    wrong type, passing a number where `greeter` expects a string. In the next recipe,
    we'll look at the kinds of type annotations TypeScript supports for simple types.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这个错误表明我试图用错误类型的值调用`greeter`，传了一个数字给期望字符串的`greeter`。在下一个菜谱中，我们将查看TypeScript支持为简单类型提供的哪些类型注解。
- en: See also
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见 also
- en: The TypeScript home page, with tutorials and reference documentation, is at
    [http://www.typescriptlang.org/](http://www.typescriptlang.org/).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript的官方网站，包括教程和参考文档，位于[http://www.typescriptlang.org/](http://www.typescriptlang.org/)。
- en: How to annotate simple types using TypeScript
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何使用TypeScript注解简单类型
- en: Type annotations with TypeScript are simple decorators appended to the variable
    or function after a colon. There's support for the same primitive types as in
    JavaScript, and to declare interfaces and classes, which we will discuss next.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript中的类型注解是简单地附加在变量或函数后面的冒号和装饰器。支持与JavaScript相同的原始类型，以及我们接下来要讨论的声明接口和类。
- en: How to do it…
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到…
- en: 'Here''s a simple example of some variable declarations and two function declarations:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个简单的变量声明和两个函数声明的例子：
- en: '[PRE11]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This example shows how to annotate functions and variables.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子展示了如何注解函数和变量。
- en: How it works…
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Variables—either standalone or as arguments to a function—are decorated using
    a colon and then the type. For example, the first function, `greeter`, takes a
    single argument, person, which must be a string. The second function, `circumference`,
    takes a radius, which must be a number, and declares a single variable in its
    scope, `pi`, which must be a number and has the value `3.141592654`.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 变量——作为独立变量或函数参数——使用冒号后跟类型进行装饰。例如，第一个函数`greeter`接受一个参数`person`，必须是字符串。第二个函数`circumference`接受一个半径，必须是数字，并在其作用域中声明了一个变量`pi`，必须是数字并且有值`3.141592654`。
- en: You declare functions in the normal way as in JavaScript, and then add the type
    annotation after the function name, again using a colon and the type. So, `greeter`
    returns a string, and `circumference` returns a number.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 你像在JavaScript中一样以正常方式声明函数，然后在函数名后面加上类型注解，再次使用冒号和类型。所以，`greeter`返回一个字符串，`circumference`返回一个数字。
- en: There's more…
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容…
- en: 'TypeScript defines the following fundamental type decorators, which map to
    their underlying JavaScript types:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript定义了以下基本类型装饰器，它们映射到其底层的JavaScript类型：
- en: '`array`: This is a composite type. For example, you can write a list of strings
    as follows:'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`array`：这是一个复合类型。例如，你可以像下面这样写一个字符串列表：'
- en: '[PRE12]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '`boolean`: This type decorator can contain the values `true` and `false`.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boolean`：这个类型装饰器可以包含`true`和`false`这两个值。'
- en: '`number`: This type decorator is like JavaScript itself, can be any floating-point
    number.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`number`：这个类型装饰器类似于JavaScript本身，可以是任何浮点数。'
- en: '`string`: This type decorator is a character string.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string`：这个类型装饰器是字符串。'
- en: '`enum`: An enumeration, written with the `enum` keyword, like this:'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`enum`：枚举，使用`enum`关键字编写，像这样：'
- en: '[PRE13]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '`any`: This type indicates that the variable may be of any type.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`any`：这个类型表示变量可以是任何类型。'
- en: '`void`: This type indicates that the value has no type. You''ll use `void`
    to indicate a function that returns nothing.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`void`：这个类型表示值没有类型。你将使用`void`来表示一个不返回任何内容的函数。'
- en: See also
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: For a list of the TypeScript types, see the TypeScript handbook at [http://www.typescriptlang.org/Handbook](http://www.typescriptlang.org/Handbook).
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看TypeScript类型的列表，请参阅TypeScript手册中的[TypeScript类型](http://www.typescriptlang.org/Handbook)。
- en: How to declare interfaces using TypeScript
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何使用TypeScript声明接口
- en: An *interface* defines how something behaves, without defining the implementation.
    In TypeScript, an interface names a complex type by describing the fields it has.
    This is known as structural subtyping.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 接口*定义了事物的行为，而没有定义实现*。在TypeScript中，接口通过描述它所拥有的字段来命名一个复杂类型。这被称为结构子类型化。
- en: How to do it…
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到…
- en: 'Declaring an interface is a little like declaring a structure or class; you
    define the fields in the interface, each with its own type, like this:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 声明接口有点像声明一个结构或类；你在接口中定义字段，每个字段都有自己的类型，像这样：
- en: '[PRE14]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: How it works…
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The `interface` keyword in TypeScript defines an interface; as I already noted,
    an interface consists of the fields it declares with their types. In this listing,
    I defined a plain JavaScript object, `myObj` and then called the function `printLocation`,
    that I previously defined, which takes a `Record`. When calling `printLocation`
    with `myObj`, the TypeScript compiler checks the fields and types each field and
    only permits a call to `printLocation` if the object matches the interface.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在TypeScript中，`interface`关键字定义了一个接口；如我前面所提到的，接口包含它声明的字段和它们的类型。在这个列表中，我定义了一个普通的JavaScript对象`myObj`，然后调用了我之前定义的接受一个`Record`的函数`printLocation`。当用`myObj`调用`printLocation`时，TypeScript编译器检查字段和类型，只有当对象符合接口时，才允许调用`printLocation`。
- en: There's more…
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: Beware! TypeScript can only provide compile-type checking. What do you think
    the following code does?
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 小心！TypeScript只能提供编译时类型检查。你认为下面的代码会做什么呢？
- en: '[PRE15]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'First, this compiles with `tsc` just fine. When you run it with node, you''ll
    see the following:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，这个代码用`tsc`编译是没有问题的。当你用node运行它时，你会看到以下内容：
- en: '[PRE16]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: What happened? The TypeScript compiler does not add run-time type checking to
    your code, so you can't impose an interface on a run-time created object that's
    not a literal. In this example, because the `lng` field is missing from the JSON,
    the function can't print it, and prints the value `undefined` instead.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 发生了什么？TypeScript编译器不会为你的代码添加运行时类型检查，所以你不能对一个非字面创建的运行时对象强加一个接口。在这个例子中，因为JSON中缺少了`lng`字段，函数无法打印它，而是打印了`undefined`的值。
- en: This doesn't mean that you shouldn't use TypeScript with JSON, however. Type
    annotations serve a purpose for all readers of the code, be they compilers or
    people. You can use type annotations to indicate your intent as a developer, and
    readers of the code can better understand the design and limitation of the code
    you write.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不意味着你不应该使用TypeScript与JSON一起使用，然而。类型注解对所有代码的读者都有用，无论是编译器还是人。你可以使用类型注解来表明你作为开发者的意图，并且代码的读者可以更好地理解你所写的代码的设计和限制。
- en: See also
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: For more information about interfaces, see the TypeScript documentation at [http://www.typescriptlang.org/Handbook#interfaces](http://www.typescriptlang.org/Handbook#interfaces).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 关于接口的更多信息，请参阅TypeScript文档中的[接口](http://www.typescriptlang.org/Handbook#interfaces)部分。
- en: How to declare classes with interfaces using TypeScript
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何使用TypeScript声明带有接口的类
- en: Interfaces let you specify behavior without specifying implementation; classes
    let you encapsulate implementation details behind an interface. TypeScript classes
    can encapsulate fields or methods, just as classes in other languages.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 接口让你可以指定行为而不指定实现；类让你可以将实现细节封装在一个接口后面。TypeScript类可以封装字段或方法，就像其他语言中的类一样。
- en: How to do it…
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到…
- en: 'Here''s an example of our Record structure, this time as a class with an interface:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个我们的记录结构示例，这次作为一个带有接口的类：
- en: '[PRE17]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: How it works…
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The `interface` keyword, again, defines an interface just as the previous section
    shows. The `class` keyword, which you haven't seen before, implements a class;
    the optional `implements` keyword indicates that this class implements the interface
    `RecordInterface`.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，`interface`关键字定义了一个接口，正如前一部分所展示的。你之前没见过的`class`关键字实现了一个类；可选的`implements`关键字表明这个类实现了接口`RecordInterface`。
- en: Note that the class implementing the interface must have all of the same fields
    and methods that the interface prescribes; otherwise, it doesn't meet the requirements
    of the interface. As a result, our `Record` class includes fields for `call`,
    `lat`, and `lng`, with the same types as in the interface, as well as the methods
    constructor and `printLocation`.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，实现接口的类必须具有与接口规定的相同的所有字段和方法；否则，它不符合接口的要求。因此，我们的`Record`类包括了`call`、`lat`和`lng`字段，类型与接口中的相同，以及构造方法和`printLocation`方法。
- en: The constructor method is a special method called when you create a new instance
    of the class using `new`. Note that with classes, unlike regular objects, the
    correct way to create them is by using a constructor, rather than just building
    them up as a collection of fields and values. We do that on the second to the
    last line of the listing, passing the constructor arguments as function arguments
    to the class constructor.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 构造方法是一种特殊的方法，当你使用`new`创建类的新实例时会被调用。请注意，与常规对象不同，创建类的正确方式是使用构造函数，而不是仅仅将它们构建为字段和值的集合。我们在列表的倒数第二行这样做，将构造函数参数作为函数参数传递给类构造函数。
- en: See also
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: There's a lot more you can do with classes, including defining inheritance and
    creating public and private fields and methods. For more information about classes
    in TypeScript, see the documentation at [http://www.typescriptlang.org/Handbook#classes](http://www.typescriptlang.org/Handbook#classes).
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以用类做很多事情，包括定义继承和创建公有和私有的字段和方法。关于TypeScript中类的更多信息，请参阅[http://www.typescriptlang.org/Handbook#classes](http://www.typescriptlang.org/Handbook#classes)的文档。
- en: Using json2ts to generate TypeScript interfaces from your JSON
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用json2ts从你的JSON生成TypeScript接口
- en: This last recipe is more of a tip than a recipe; if you've got some JSON you
    developed using another programming language or by hand, you can easily create
    a TypeScript interface for objects to contain the JSON by using Timmy Kokke's
    json2ts website.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这个最后的食谱更像是一个提示而不是一个食谱；如果你有一些使用其他编程语言开发或手工编写的JSON，你可以通过使用Timmy Kokke的json2ts网站轻松地为包含JSON的对象创建一个TypeScript接口。
- en: How to do it…
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到…
- en: Simply go to [http://json2ts.com](http://json2ts.com) and paste your JSON in
    the box that appears, and click on the generate TypeScript button. You'll be rewarded
    with a second text-box that appears and shows you the definition of the TypeScript
    interface, which you can save as its own file and include in your TypeScript applications.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 只需访问[http://json2ts.com](http://json2ts.com)，将你的JSON代码粘贴到出现的文本框中，然后点击生成TypeScript按钮。你会看到一个新文本框出现，展示了TypeScript接口的定义，你可以将这个定义保存为一个文件，并在你的TypeScript应用程序中包含它。
- en: How it works…
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'The following figure shows a simple example:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的图表展示了一个简单的例子：
- en: '![How it works…](img/B04206_07_02.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的…](img/B04206_07_02.jpg)'
- en: 'You can save this typescript as its own file, a `definition` file, with the
    suffix `.d.ts`, and then include the module with your TypeScript using the `import`
    keyword, like this:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将这个TypeScript保存为一个自己的文件，一个`definition`文件，后缀为`.d.ts`，然后使用`import`关键字包含模块，像这样：
- en: '[PRE18]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
