- en: Chapter 5. Promises in WinJS
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章．WinJS中的承诺
- en: 'Promises have various implementations from a variety of frameworks, all of
    which share a common base; this is the concept of promises. Practically all of
    the promise libraries out there deliver a common feature in different forms to
    make asynchronous programming using JavaScript easier and better. WinJS, the Windows
    library for JavaScript, is one of the libraries that have their own implementation
    of promises, which we will explore throughout this chapter. In the previous chapter,
    we learned about handling exceptions that arise during promise operations. We
    also saw how JavaScript promises are equipped with a powerful error handling mechanism.
    Moreover, we learned how to handle errors with `then` and `catch` methods. In
    this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 承诺有各种框架的各种实现，所有这些都共享一个共同的基底；这就是承诺的概念。实际上，所有承诺库都以不同的形式提供了一个共同特性，以使使用JavaScript进行异步编程更容易、更好。WinJS，Windows的JavaScript库，是具有自己承诺实现的库之一，我们将在本章中探讨。在前一章中，我们学习了在承诺操作期间处理的异常。我们还看到了JavaScript承诺配备的强大错误处理机制。此外，我们还学习了如何使用`then`和`catch`方法处理错误。在本章中，我们将涵盖以下主题：
- en: An introduction to the WinJS namespace
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍WinJS命名空间
- en: The promise object of WinJS in full detail
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WinJS中的承诺对象详细说明
- en: A basic example of using WinJS.Promise in Windows app development
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Windows应用程序开发中使用WinJS.Promise的基本示例
- en: Introducing WinJS
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍WinJS
- en: 'WinJS, which stands for the Windows library for JavaScript, is a JavaScript
    library developed by Microsoft, which was recently made open source. This library
    has been designed with the purpose of allowing developers to build Windows Store
    apps for Windows 8 (with HTML5 and JavaScript) that are first-class and native-quality
    experience, such as Skype and Music apps. It prevailed as the second option to
    programming the native apps with XAML and C#, VB.Net, or C++. This alternative
    allowed web developers to leverage their knowledge and skills to build store apps.
    WinJS library is more of a comprehensive toolkit. Not only does it provide a rich
    namespace, but it also includes the following features:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: WinJS代表Windows库for JavaScript，是由微软开发的JavaScript库，最近被开源。这个库旨在允许开发者为Windows 8（使用HTML5和JavaScript）构建一等和本地质量的Windows
    Store应用程序，如Skype和音乐应用程序。它是用XAML和C#，VB.Net或C++编程本地应用程序的第二选择。这种选择允许网页开发者利用他们的知识和技能构建商店应用程序。WinJS库更像是一个综合工具包。它不仅提供了一个丰富的命名空间，而且还包括以下功能：
- en: Access to the device hardware via the Windows Runtime (WinRT)
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过Windows运行时（WinRT）访问设备硬件
- en: Delivers polished UI controls, such as ListView, FlipView, and Semantic Zoom
    alongside page controls
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供经过精心设计的UI控件，如ListView、FlipView和语义缩放，与页面控件一同使用
- en: Provides a solid infrastructure, such as promises and data-binding
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供了一个坚实的基础，如承诺和数据绑定
- en: Moreover, WinJS can be used in standalone solutions alongside other libraries
    and frameworks.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，WinJS可以与其他库和框架一起使用在独立的解决方案中。
- en: WinJS has evolved much since its initiation. What started as a platform specific
    to Windows Store apps now supports web browsers and other devices in an attempt
    to become cross-platform. That attempt is crystalizing with the latest version
    of WinJS 2.1, which supports Windows Phone 8.1, and now WinJS is being used in
    the Xbox One apps. Moreover, it is now prepared to cover websites and web apps
    on other non-Microsoft browsers and devices.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: WinJS自其创建以来已经发展了很多。最初是专为Windows Store应用程序设计的平台，现在支持网页浏览器和其他设备，试图成为跨平台。这一尝试在最新的WinJS
    2.1版本中得到了巩固，该版本支持Windows Phone 8.1，现在WinJS也用于Xbox One应用程序。此外，它现在准备覆盖其他非微软浏览器和设备上的网站和网络应用程序。
- en: Note
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The open source WinJS is now hosted on GitHub via [https://github.com/winjs/winjs/](https://github.com/winjs/winjs/),
    where community members can have a look at the library and contribute to its source
    code.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 开源的WinJS现在托管在GitHub上，通过[https://github.com/winjs/winjs/](https://github.com/winjs/winjs/)，社区成员可以查看库并为其源代码做出贡献。
- en: 'All WinJS library functions are defined under a namespace called WinJS. The
    WinJS namespace provides for special functionalities in the Windows Library for
    JavaScript that includes the promise object and `xhr` function. It includes three
    types of member objects: properties, and functions'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 所有WinJS库函数都定义在一个名为WinJS的命名空间下。WinJS命名空间为JavaScript提供了特殊功能，包括承诺对象和`xhr`函数。它包括三种成员对象：属性、函数
- en: 'Objects include the following two members:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 对象包括以下两个成员：
- en: '`ErrorFromName`: This is simply an error object.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ErrorFromName`：这只是一个错误对象。'
- en: 'A promise object: This is our talk of the town in this chapter. Similar to
    the promise object, we have been discussing throughout this book, it basically
    provides a technique to assign work to be executed against a value that does not
    yet exist. It presents an abstract mechanism for handling interactions with APIs
    that are exposed asynchronously.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 承诺对象：这是我们本章讨论的重点。与本书中一直在讨论的承诺对象类似，它基本上提供了一种将工作分配给尚未存在的值的技巧。它为与作为异步暴露的API的交互提供了一个抽象机制。
- en: 'Properties include the following:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 属性包括以下内容：
- en: '`validation`: This property contains a setter to display the outcomes of a
    validation process'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`validation`：这个属性包含一个设置器，用于显示验证过程的结果'
- en: 'Functions include the following three members:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 函数包括以下三个成员：
- en: '`log`: This function logs output and writes it to the JavaScript console within
    Visual Studio. This function can be extended with a custom implementation or use
    `WinJS.Utilities.startLog` to log on to the JavaScript console.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log`：这个函数记录输出，并将其写入Visual Studio中的JavaScript控制台。这个函数可以通过自定义实现扩展，或者使用`WinJS.Utilities.startLog`将其记录到JavaScript控制台。'
- en: '`strictProcessing`: This function is no longer needed, as strict processing
    is by default always turned on. With the function no longer needed, it has been
    declared deprecated.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`strictProcessing`：这个函数不再需要，因为严格处理默认总是开启的。由于不再需要这个函数，它已被宣布为过时。'
- en: '`xhr`: This function simply wraps the call to `XMLHttpRequest` in a promise.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xhr`：这个函数只是将`XMLHttpRequest`的调用包装在一个承诺中。'
- en: This sums up the WinJS namespace from a high-level view; the code for WinJS
    is found in the `base.js` file.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这就总结了WinJS命名空间从高层次的视图；WinJS的代码在`base.js`文件中找到。
- en: Explaining the WinJS.Promise object
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解释WinJS.Promise对象
- en: This object is one of the most important aspects of the WinJS library, and instances
    of promise are involved with anything we do with asynchronous APIs. Let us dive
    into the details of this object. In terms of anatomy, the promise object includes
    the following three types of members.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这个对象是WinJS库最重要的方面之一，promise实例与我们对异步API所做的任何事情都有关联。让我们深入了解这个对象的具体细节。就解剖学而言，promise对象包括以下三种成员类型。
- en: Constructors
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构造函数
- en: 'At the level of constructors in WinJS, a class is created using the `WinJS.Class.define`
    function. In this first parameter is a function that acts as the constructor.
    Now, in the case of the `Promise` class, it is derived from a base class called
    `PromiseStateMachine` using the `WinJS.Class.derive` function, whose second parameter
    is the constructor function. In both cases, constructor functions can be named
    anything; alternatively, they can be anonymous as well. The description of this
    `WinJS.Promise` constructor, however, is the same as the object description itself.
    The `WinJS.Promise` constructor takes two function parameters: `init` and `onCancel`.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在WinJS的构造函数级别，使用`WinJS.Class.define`函数创建一个类。在这个第一个参数是一个充当构造函数的函数。现在，在`Promise`类的案例中，它使用`WinJS.Class.derive`函数从名为`PromiseStateMachine`的基本类派生，第二个参数是构造函数。在这两种情况下，构造函数可以被命名为任何东西；另外，它们也可以是匿名的。然而，`WinJS.Promise`构造函数的描述与对象描述本身相同。`WinJS.Promise`构造函数接受两个函数参数：`init`和`onCancel`。
- en: 'When declaring a new promise object, we need two parameters: `init` and `onCancel`.
    These two parameters are both functions. The syntax will look like the following:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们声明一个新的承诺对象时，我们需要两个参数：`init`和`onCancel`。这两个参数都是函数。语法如下：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `init` parameter is optional. The `init` function is called during the initialization
    or construction of the promise object, which comprises the actual implementation
    of the work that promise, in this case `promiseObj`, will represent. This implementation
    can be either asynchronous or synchronous, depending on the scope and nature of
    the work needed.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`init`参数是可选的。`init`函数在初始化或构建承诺对象时调用，这包括承诺对象实际要表示的工作的实质性实现。这个实现可以是异步的或同步的，这取决于所需工作的范围和性质。'
- en: Tip
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: One important thing to note here is that the code written within the `init`
    function does not render it by default to be asynchronous. In order to ensure
    the code runs asynchronously, we must use asynchronous APIs, such as the Windows
    Runtime asynchronous APIs, `setTimeout`, `setImmediate`, and `requestAnimationFrame`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里需要注意的是，`init`函数中编写的代码默认并不会使其成为异步。为了确保代码异步运行，我们必须使用异步API，如Windows运行时的异步API、`setTimeout`、`setImmediate`和`requestAnimationFrame`。
- en: 'The `init` function used in this parameter takes the following three arguments:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`init`函数在此参数中使用，接受以下三个参数：'
- en: '`completeDispatch`: This parameter will be invoked when the operation within
    `init` has been completed, thus passing the result of that operation The `init`
    code should invoke this when the operation is complete, passing the result of
    the operation as an argument.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`completeDispatch`: 当`init`内部的操作已完成时，将调用此参数，从而传递该操作的结果。`init`代码应在操作完成后调用此参数，将操作的结果作为一个参数传递。'
- en: '`errorDispatch`: This parameter will be invoked when an error occurs in that
    operation and, hence, the promise acquires an error state. Since it is an error,
    the argument to `errorDispatch` should be an instance of `WinJS.Promise.ErrorFromName`.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`errorDispatch`: 当该操作中发生错误时，会调用这个参数，因此，承诺获得错误状态。由于这是一个错误，`errorDispatch`的参数应该是`WinJS.Promise.ErrorFromName`的一个实例。'
- en: '`progressDispatch`: This parameter will be invoked, but periodically, while
    the operation is being processed. The argument to this function will contain an
    intermediate result. This parameter is used if the operation within the promise
    needs to support progress.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`progressDispatch`: 在操作进行期间，此参数将定期调用。这个函数的参数将包含中间结果。如果承诺中的操作需要支持进度，则使用此参数。'
- en: The `onCancel` parameter is the second parameter to the Promise constructor.
    This function can be used by the consumer of the promise to cancel any of its
    uncompleted work. However, promises are not obliged to provide or support cancellation
    in WinJS.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`onCancel`参数是承诺构造函数的第二个参数。这个函数可以被承诺的消费者用来取消任何未完成的工作。然而，在WinJS中，承诺并没有义务提供或支持取消。'
- en: Events
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 事件
- en: 'Next on the list of promise object member types, we have `Events`. Currently,
    the Promise object has a single event called `onerror`. As the name shows, this
    event happens when an error occurs during the processing of a promise. Furthermore,
    this `onerror` event is fired whenever a runtime error is raised in any promise
    regardless of whether this event is handled somewhere else or not. The error handler
    can aid in debugging, where it can be used to set breakpoints and provide error
    logging. However, it will only provide insight and details on the code or input
    that caused the error at the end of the day. This `onerror` event delivers a general
    error-handling mechanism. In code, adding a generic error handler will look like
    the following:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在承诺对象成员类型的列表中，接下来是`Events`。目前，承诺对象有一个名为`onerror`的事件。正如这个名字所示，这个事件发生在承诺处理过程中发生错误时。此外，无论是否在其他地方处理此事件，`onerror`事件都会在任何一个承诺中引发运行时错误。错误处理程序有助于调试，可以用来设置断点和提供错误日志。然而，它最终只能提供关于导致错误的代码或输入的见解和详细信息。这个`onerror`事件提供了一个通用的错误处理机制。在代码中，添加一个通用错误处理程序看起来像如下：
- en: '[PRE1]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The first line of the code sample is simply attaching the `errorHandler` function
    to the `onerror` event of the promise object. Next, we define the `errorHandler`
    function, which takes an argument `event`; what the function does is simply retrieve
    information from the event in this example, such as the `exception` and the `promise`.
    Then, we assign the values to variables. The parameter `event` is an event handler
    argument of the type `CustomEvent`; usually it's an object that contains information
    about the event.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 代码示例的第一行仅仅是将`errorHandler`函数附加到承诺对象的`onerror`事件。接下来，我们定义了`errorHandler`函数，它接受一个参数`event`；函数所做的就是在这个示例中从事件中检索信息，例如`exception`和`promise`。然后，我们将这些值赋给变量。参数`event`是事件处理程序的`CustomEvent`类型参数；通常它是一个包含有关事件信息的对象。
- en: Methods
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 方法
- en: 'The last member type of the promise object is `Methods`, and currently `WinJS.Promise`
    has the following six methods:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 承诺对象的最后一种成员类型是`Methods`，目前`WinJS.Promise`有以下六个方法：
- en: '`addEventListener`: This method simply attaches and adds an event listener
    to the promise. It takes three parameters: `eventType`, which is the string type
    name of the event; `listener`, which is a function to be invoked when the event
    is triggered; and `capture` which is a Boolean value to enable or disable capture.
    This method has no return value and its basic syntax looks like the following:'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`addEventListener`: 这个方法简单地将事件监听器附加到promise上。它有三个参数：`eventType`，这是事件的字符串类型名称；`listener`，当事件触发时要调用的函数；`capture`是一个布尔值，用于启用或禁用捕获。这个方法没有返回值，其基本语法如下所示：'
- en: '[PRE2]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`removeEventListener`: This method takes out an event listener from the control.
    In syntax, it is similar to the `addEventListener` method and looks like the following
    line of code:'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`removeEventListener`: 这个方法从控件中取出事件监听器。在语法上，它与`addEventListener`方法相似，如下面的代码行所示：'
- en: '[PRE3]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`Cancel`: This method tries to cancel the promise. In cases where a promise
    supports cancellation and hasn''t been fulfilled yet, this method will cause the
    promise to enter the error state, with the value Error("Canceled"). It has no
    parameters and no return values. Its basic syntax is like the following:'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Cancel`: 这个方法尝试取消promise。在promise支持取消并且尚未完成的情况下，这将导致promise进入错误状态，值为Error("Canceled")。它没有参数和返回值。其基本语法如下所示：'
- en: '[PRE4]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`dispatchEvent`: This method simply dispatches and raises an event with the
    specified type and properties. It takes two parameters and returns a Boolean value
    depending on whether `preventDefault` was called on the event or not. The parameters
    of this method are of a string value type, containing the name of the event and
    `eventDetails`, an object which includes the set of additional properties to be
    attached to the event object. The basic syntax of this method looks like the following:'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dispatchEvent`: 这个方法简单地分发和触发一个具有指定类型和属性的事件。它有两个参数，并根据是否在事件上调用`preventDefault`返回一个布尔值。这个方法的参数是字符串值类型，包含事件的名称和`eventDetails`，这是一个包含要附加到事件对象的一组额外属性的对象。这个方法的基本语法如下所示：'
- en: '[PRE5]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`Then`: This is the most important method of the promise object. This takes
    three parameters of the type function, which allows us to specify the work to
    be done on the completion of the promise: the promise value has been fulfilled;
    the error handling that will be performed when the promise raises an error, and
    it has failed to fulfill a value; and lastly the handling of the work progress
    within the promise along the way. The return value of `then` is a promise that
    contains the result of executing the `onComplete` function in its value. In its
    basic form, the `then` method will have the following syntax:'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Then`: 这是promise对象最重要的方法。它接受三个函数类型的参数，允许我们在promise完成时指定要执行的工作：promise值已经完成；当promise触发错误时将要执行的错误处理，并且未能完成一个值；最后，在promise过程中处理工作进度的最后工作。`then`的返回值是一个包含执行`onComplete`函数结果的promise。在其基本形式中，`then`方法将具有以下语法：'
- en: '[PRE6]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The three arguments of the `then` method are of the type function. These are
    as follows:'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`then`方法的三个参数是函数类型。这些如下所示：'
- en: '`onComplete`: This handler will be called when the promise is completed successfully
    and fulfilled with a value. The value will be passed as a single argument. The
    value returned from `onComplete` becomes the fulfilled value of the promise returned
    by `then`. In the case of an error or exception during the execution of this function,
    the promise returned by `then` will enter the error state.'
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onComplete`: 当promise成功完成并带有值完成时，将调用此处理器。值将作为单个参数传递。`onComplete`返回的值成为`then`方法返回的promise的完成值。在执行此函数期间出现错误或异常的情况下，`then`返回的promise将进入错误状态。'
- en: '`onError`: This handler will be called when the promise breaks and it is fulfilled
    with an error; the value returned from `onError` will become the value of the
    promise returned by the `then` method. Instead of passing a value as in the `onComplete`
    function, here the error will be passed as an argument.'
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onError`: 当promise失败并带有错误完成时，将调用此处理器；`onError`返回的值将成为`then`方法返回的promise的值。在这里，错误将作为参数传递，而不是像在`onComplete`函数中那样传递值。'
- en: '`onProgress`: This handler is used if we need to report the progress of a promises
    operation. It has a single argument, which is the progress data. Note that promises
    are not obliged to support progress in WinJS.'
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onProgress`: 如果我们需要报告promise操作的进度，就使用这个处理器。它有一个参数，是进度数据。请注意，WinJS中的promise不必支持进度。'
- en: 'The `Done` method, like `Then`, also allows us to specify what needs to be
    executed when a promise has been fulfilled, the error handling when a promise
    fails, and the reporting of progress along the way. In addition, this function
    will throw any error that would have been returned from `then` as a value for
    the promise in the error state. Unlike `then` which returns a promise, `Done`
    does not return a value. The basic syntax of this method looks like the following
    line of code:'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Done`方法，类似于`Then`，也允许我们在promise被解决时指定需要执行的操作，在promise失败时的错误处理，以及过程中的进度报告。此外，这个函数将抛出任何本应从`then`返回的错误，作为promise在错误状态下的值。与返回一个promise的`then`不同，`Done`不返回一个值。这个方法的基本语法如下面的代码行所示：'
- en: '[PRE7]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'As we can see in the previous code syntax, `promise.done` is similar to `promise.then`
    in terms of parameters as it has the function parameters: `onComplete`, `onError`,
    and `onProgress` that practically behave and do the same thing as their counterparts
    in the `Then` method.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们从前面的代码语法中看到的，`promise.done`在参数上与`promise.then`相似，因为它有函数参数：`onComplete`、`onError`和`onProgress`，实际上它们的行为和作用与`Then`方法中的对应部分是一样的。
- en: 'There are some differences between `then` and `done`; the most obvious one
    is the return value. As stated earlier, the `then` method returns the promise
    while `done` has no return value, which has a direct effect on the chaining of
    WinJS promises. The following list summarizes those differences:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`then`和`done`之间有一些区别；最明显的区别是返回值。如前所述，`then`方法返回promise，而`done`没有返回值，这对WinJS承诺的链式调用有直接影响。以下列表总结了这些区别：'
- en: '**In chaining**: `Then` allows for chaining multiple `then` functions, because
    it returns a promise. While with `done` we cannot chain more than one `done` method
    because it does not return a value; more specifically, it returns `undefined`.
    Hence, `done` must be the final call. For example, we can have `.then().then().then().then()`,
    and so on, while with `done` it ends at `.then().then().done()`.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在链式调用中**：`Then`允许链式调用多个`then`函数，因为它返回一个promise。而与`done`相比，我们不能链式调用多个`done`方法，因为它不返回一个值；更具体地说，它返回`undefined`。因此，`done`必须是最终的调用。例如，我们可以有`.then().then().then().then()`等等，而与`done`一起则是`.then().then().done()`。'
- en: '**In error handling**: If there was no error handler provided to `done` and
    an error occurs (in other words, an unhandled exception), an exception will be
    thrown to the event loop allowing us to catch it in the `window.onerror` event,
    but not within a `try`/`catch` block. Thus, the `done` function guarantees to
    the caller method to throw any error that is not handled inside the method. While,
    with `then`, those unhandled exceptions that arise are silently caught and traversed
    as part of the promise state, `then` does not throw an exception but instead returns
    a promise that is in the error state.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在错误处理中**：如果没有为`done`提供错误处理程序并且发生了错误（换句话说，就是一个未处理的异常），将抛出一个异常到事件循环中，允许我们在`window.onerror`事件中捕获它，但不在`try`/`catch`块内。因此，`done`函数向调用方法保证抛出任何在该方法内未处理的错误。而与`then`相比，那些产生的未处理异常被默默地捕获并作为promise状态的一部分进行遍历，`then`不抛出异常，而是返回一个处于错误状态的promise。'
- en: 'Knowing the difference between these two methods is critical to using them.
    Nevertheless, for both methods, it is recommended to adopt flat promise chains
    in favor of nested ones, as the formatting of promise chains makes them easier
    to read and easier to handle errors. For example, the following sample code is
    preferable:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 了解这两个方法之间的区别对于使用它们是至关重要的。然而，对于这两种方法，建议采用扁平化的promise链而不是嵌套的链，因为promise链的格式使它们更容易阅读，也更容易处理错误。例如，以下样本代码是更可取的：
- en: '[PRE8]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'And the following is labeled as one of the *don''ts*:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 以下被标记为*不要*之一：
- en: '[PRE9]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We chain Windows Runtime (WinRT) methods that return promises, which is the
    same as chaining WinJS promises.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们链式调用Windows运行时（WinRT）返回promise的方法，这与链式调用WinJS承诺是一样的。
- en: Bear in mind that the promises in WinJS are compliant to the promises defined
    in the CommonJS Promises/A proposal, and till the time of this writing, WinJS
    promises have not been tested against the new Promises/A+ specifications. This
    has no effect on Windows app development, as the apps are running in a store.
    In the browser, the main difference that can arise between WinJS promises and
    A+-complaint promises is that WinJS promises do not guarantee that the callback
    function of the promise will be asynchronous. For example, if we call `promise.then(a)`
    with `a` being the callback function, we won't be certain whether `a` will be
    called in an asynchronous or synchronous manner. While in Promises/A+ specifications,
    the callback function `a` will always be called asynchronously. It is a must.
    The authors of the specifications explain that not ensuring an asynchronous callback
    will make promises much harder to reason about and debug. Nevertheless, as I mentioned
    earlier in the chapter that WinJS itself is now open source and hosted on GitHub,
    the community members, and anyone interested for that matter, can download WinJS,
    build, and test it against the Promises/A+ Compliance Test Suite.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，WinJS中的承诺符合CommonJS Promises/A提案中定义的承诺，并且在本稿撰写之时，WinJS承诺尚未针对新的Promises/A+规范进行测试。这对Windows应用开发没有影响，因为应用在商店中运行。在浏览器中，WinJS承诺与A+承诺之间可能产生的主要区别是，WinJS承诺不保证承诺的回调函数将异步执行。例如，如果我们用回调函数`a`调用`promise.then(a)`，我们无法确定`a`将以异步还是同步方式调用。而在Promises/A+规范中，回调函数`a`总是异步调用。这是必须的。规范的作者解释说，不确保异步回调会使承诺更难以推理和调试。尽管如此，正如我之前在章节中提到的，WinJS本身现在是一个开源项目，托管在GitHub上，社区成员和任何感兴趣的人都可以下载WinJS，构建并将其与Promises/A+兼容性测试套件进行测试。
- en: Up next, let us have a look at how to use these WinJS promises in Windows apps
    development.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看如何在Windows应用开发中使用WinJS的承诺。
- en: Using WinJS promises
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用WinJS承诺
- en: We leverage promises on the Web to make the UI more responsive and avoid blocking
    the UI thread by executing the work asynchronously. Likewise, we use WinJS promises
    to handle the work asynchronously and thus keep the UI thread of the Windows app
    available to respond to user input. We also allow the app layout and static items
    to load properly and promptly while fetching what needs to be fetched from servers
    and databases asynchronously in the background. For that purpose, the asynchronous
    APIs in WinJS and Windows Runtime are exposed in JavaScript as promises.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在Web上利用承诺来使UI更具响应性，并避免通过异步执行工作来阻塞UI线程。同样，我们使用WinJS承诺以异步处理工作，从而使Windows应用的UI线程可用于响应用户输入。我们还允许在从服务器和数据库异步获取所需内容的同时，应用程序布局和静态项目正确并及时地加载。为此，WinJS和Windows运行时中的异步API以承诺的形式在JavaScript中暴露。
- en: 'Let us have a look at a basic example of promises. In order to follow with
    and replicate the following example, we will need Visual Studio (the Express Version
    would do). We need to start by creating a basic Windows app of the type JavaScript.
    In order to do so, from the Visual Studio top menu, we need to go to **File**
    | **New** | **Project**, which will pop up a small window containing the project
    type. There, we need to go to **JavaScript** | **Store Apps** | **Windows Apps**,
    which will list for us the different JavaScript Windows App templates available.
    For this example, we can select **Blank App**, which is a project for a single-page
    Windows app that has no predefined controls or layout. Name the app as you please,
    and click on **Ok**. The following screenshot illustrates the steps taken:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个承诺的基本示例。为了跟随并复制以下示例，我们将需要Visual Studio（ express版本即可）。我们需要首先创建一个基本的Windows应用，类型为JavaScript。为此，我们需要从Visual
    Studio顶部菜单中选择**文件** | **新建** | **项目**，这将弹出一个包含项目类型的窗口。在那里，我们需要选择**JavaScript**
    | **商店应用** | **Windows应用**，这将为我们列出可用的不同JavaScript Windows应用模板。对于这个例子，我们可以选择**空白应用**，这是一个单页Windows应用的项目，没有预定义的控制或布局。随意命名应用程序，然后单击**确定**。以下屏幕截图说明了所采取的步骤：
- en: '![Using WinJS promises](img/00005.jpeg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![使用WinJS承诺](img/00005.jpeg)'
- en: 'Now, we have a blank Windows app that we can add some code to. For that, we
    need to navigate to the `default.html` page and modify it. Open that page, and
    insert an `input` element and a `div` element to display some result in the `body`
    element, as per the following syntax:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有一个空的 Windows 应用，可以向其中添加一些代码。为此，我们需要导航到`default.html`页面并对其进行修改。打开该页面，并在`body`元素中插入一个`input`元素和一个`div`元素以显示一些结果，按照以下语法进行操作：
- en: '[PRE10]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Next, we need to attach some code to the change handler for the `input` element
    so that we can do some work whenever the value of the `input` element changes.
    We can achieve this with the `addEventListener` method and request this as part
    of the `WinJS.Utilities.ready` function. Adding the event listener inside this
    function will allow the change handler that we are attaching to be called directly
    after the DOM has been loaded via the `DOMContentLoaded` event, which will in
    turn, fire after the page code has been parsed and before all the resources have
    been loaded.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要在`input`元素的更改处理程序上附加一些代码，以便在`input`元素的值发生变化时我们可以做一些工作。我们可以通过使用`addEventListener`方法并将其作为`WinJS.Utilities.ready`函数的一部分来实现这一点。在这个函数内部添加事件监听器将允许我们附加的更改处理程序在
    DOM 通过`DOMContentLoaded`事件加载后直接调用，这将在页面代码被解析后且所有资源尚未加载之前发生。
- en: 'Navigate to the `default.js` file, located inside the `js` folder. There, we
    need to add the following code to the end of the `app.onactivated` event handler:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到位于`js`文件夹内的`default.js`文件。在那里，我们需要在`app.onactivated`事件处理器的末尾添加以下代码：
- en: '[PRE11]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In the previous code, we are adding an anonymous function code to `WinJS.Utilities.ready`.
    In that anonymous function, we first get that `input` element from the DOM, assign
    it to a variable named `inpt`, and then call the method `addEventListener` on
    that `inpt` variable, which adds the function named `onChangeHandler` to the change
    event.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们在`WinJS.Utilities.ready`中添加了一个匿名函数代码。在那个匿名函数中，我们首先从 DOM 中获取那个`input`元素，将其分配给一个名为`inpt`的变量，然后在该`inpt`变量上调用`addEventListener`方法，将名为`onChangeHandler`的函数添加到变化事件中。
- en: The last step would be to write the code for the `onChangeHandler` function.
    In that function, we will call the `WinJS.xhr` method, which basically wraps calls
    to `XMLHttpRequest` and exposes it as a promise. We can use this method for cross-domain
    requests and intranet requests. We will pass the URL that the user enters in the
    `input` element to the parameter of `xhr` and accordingly update the `resultDiv`
    element with the result. `Xhr` is an asynchronous function that returns a promise;
    hence, we can call the `then` or `done` methods of the promise object on this
    function to update the UI. For this example, we will call the `then` method that
    is invoked as soon as the `xhr` function has either successfully completed the
    `XmlHttpRequest` or has raised an error. `Then` can take up to three parameters
    for success, error, and progress, as we have seen in the definition earlier. However,
    for this basic example, we will just see how to add the `onCompleted` function.
    This success handler will apply some changes to the `resultDiv` element by setting
    its background color to blue and the inner text to `Hooray!`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步将是编写`onChangeHandler`函数的代码。在该函数中，我们将调用`WinJS.xhr`方法，该方法基本上将`XMLHttpRequest`的调用包装起来并暴露为一个承诺。我们可以使用这个方法进行跨域请求和内部网络请求。我们将用户在`input`元素中输入的
    URL 传递给`xhr`参数，并相应地更新`resultDiv`元素的结果。`Xhr`是一个异步函数，返回一个承诺；因此，我们可以在这个函数上调用承诺对象的`then`或`done`方法来更新
    UI。对于这个例子，我们将调用`then`方法，该方法在`xhr`函数成功完成`XmlHttpRequest`或引发一个错误时被调用。`Then`可以接受三个参数，分别为成功、错误或进度，正如我们在定义中看到的那样。然而，对于这个基本例子，我们将看到如何添加`onCompleted`函数。这个成功处理程序将通过将`resultDiv`元素的背景颜色设置为蓝色并将内部文本设置为`Hooray!`来对`resultDiv`元素应用一些更改。
- en: 'The syntax for the `onChangeHandler` function will look like the following
    code:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`onChangeHandler`函数的语法将如下所示：'
- en: '[PRE12]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Let's analyze the previous code sample. We first retrieve the `input` element
    from the `e` argument, we get the `resultDiv` element to a variable `resDiv`,
    and then we call `WinJS.xhr` and pass it the value of the `input` element we got
    from the target. This value holds the URL that we enter in the textbox. Next,
    we call `then` on the `xhr` function, and pass to `then` the success handler `onCompleted`
    that contains the result as an argument. The result here represents the HTTP request.
    If the request holds the status 200, which is the status of success in HTTP requests,
    we will apply the changes on the `resultDiv`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分析一下之前的代码示例。我们首先从`e`参数中获取`input`元素，我们将`resultDiv`元素赋值给变量`resDiv`，然后我们调用`WinJS.xhr`，并传递给它从目标中获取的`input`元素的值。这个值包含了我们在文本框中输入的URL。接下来，我们在`xhr`函数上调用`then`，并将成功处理程序`onCompleted`传递给`then`，其中包含结果作为参数。这里的成果代表了HTTP请求。如果请求的状态是200，这是HTTP请求中的成功状态，我们将对`resultDiv`应用更改。
- en: 'If we run the app now, we will have the following outcome after we enter a
    URL into the textbox:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在如果我们运行该应用程序，在文本框中输入URL后，我们将得到以下结果：
- en: '![Using WinJS promises](img/00006.jpeg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![使用WinJS promises](img/00006.jpeg)'
- en: 'How about reporting the progress while the result is retrieved? In order to
    do so, we will need to write the handler for progress in the `then` call on the
    `xhr` function. We will change the background color to green until the request
    is completed and the `onCompleted` handler is invoked, which will change the background
    color to blue. We will modify the code to include the progress handler as per
    the following code:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如何在获取结果时报告进度？为了这样做，我们需要在`xhr`函数的`then`调用中编写进度处理程序。我们将把背景颜色改为绿色，直到请求完成并调用`onCompleted`处理程序，这将把背景颜色改为蓝色。我们将修改代码，包括以下代码的进度处理程序：
- en: '[PRE13]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In the previous code sample, we added an empty error handler and a progress
    handler as an anonymous function `function progress(result)`, which will check
    whether the request status is different from 200, which means it is not a success
    yet and sets the background color to green. If we run the app now and enter a
    URL into the textbox, we will notice that the background color of the `div` element
    is green for a second or so, and then it changes to blue and the text is updated
    to Hooray!.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的代码示例中，我们添加了一个空的错误处理程序和一个进度处理程序，作为匿名函数`function progress(result)`，它将检查请求状态是否不是200，这意味着它还不是成功状态，并把背景颜色设置为绿色。现在我们运行应用程序，并在文本框中输入URL，我们会注意到`div`元素的背景颜色在一秒左右变为绿色，然后变为蓝色，并更新文本为Hooray!。
- en: WinJS promises can now also be used in the browser as the product team has enabled
    some WinJS features to run on the Web. You can see WinJS in live action using
    the new online editor via [http://try.buildwinjs.com/](http://try.buildwinjs.com/).
    In any browser, we can view and edit the code, play around with WinJS, and check
    the results live.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，WinJS promises也可以在浏览器中使用，因为产品团队已经使一些WinJS功能能够在Web上运行。您可以通过[http://try.buildwinjs.com/](http://try.buildwinjs.com/)上的新在线编辑器查看WinJS的实际效果。在任何浏览器中，我们都可以查看和编辑代码，玩转WinJS，并实时查看结果。
- en: Summary
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: WinJS provides a strong implementation of promises that we can use to wrap any
    kind of operation and leverage asynchronous programming for Windows apps using
    JavaScript in an efficient and effective manner.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: WinJS提供了一个强大的promises实现，我们可以用它来包装任何操作，并有效地利用异步编程为使用JavaScript的Windows应用提供支持。
- en: In the next and last chapter, we will summarize what we have learned throughout
    the previous chapters on JavaScript promises and put into action more mature code
    samples than the ones we have seen so far.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，也是最后一章中，我们将总结前几章中学到的JavaScript promises知识，并付诸实践比迄今为止所看到的更成熟的代码示例。
