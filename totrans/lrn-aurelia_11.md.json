["```js\n> npm install jquery --save\n\n```", "```js\n{ \n  //Omitted snippet... \n  { \n    \"name\": \"vendor-bundle.js\", \n    \"prepend\": [ \n      \"node_modules/bluebird/js/browser/bluebird.core.js\", \n      \"scripts/require.js\" \n    ], \n    \"dependencies\": [ \n      //Omitted snippet... \n      \"jquery\", \n      { \n        \"name\": \"bootstrap\", \n        \"path\": \"../node_modules/bootstrap/dist\", \n        \"main\": \"js/bootstrap.min\", \n        \"deps\": [\"jquery\"], \n        \"exports\": \"$\", \n        \"resources\": [ \n          \"css/bootstrap.min.css\" \n        ] \n      }, \n      //Omitted snippet... \n    ] \n    //Omitted snippet... \n  } \n  //Omitted snippet... \n} \n\n```", "```js\nimport {inject, DOM, dynamicOptions} from 'aurelia-framework'; \nimport $ from 'bootstrap'; \n\nconst properties = [ \n  'animation', 'container', 'delay', 'html',  \n  'placement', 'title', 'trigger', 'viewport' \n]; \n\n@dynamicOptions \n@inject(DOM.Element) \nexport class BsTooltipCustomAttribute { \n\n  isAttached = false; \n\n  constructor(element) { \n    this.element = element; \n  } \n\n  attached() { \n    const init = {}; \n    for (let property of properties) { \n      init[property] = this[property]; \n    } \n    $(this.element).tooltip(init); \n    this.isAttached = true; \n  } \n\n  detached() { \n    this.isAttached = false; \n    $(this.element).tooltip('destroy'); \n  } \n} \n\n```", "```js\n//Omitted snippet... \nexport class BsTooltipCustomAttribute { \n  //Omitted snippet... \n\n  propertyChanged(name) { \n    if (this.isAttached && properties.indexOf(name) >= 0) { \n      $(this.element).data('bs.tooltip').options[name] = this[name]; \n    } \n  } \n} \n\n```", "```js\n<!-- Omitted snippet... --> \n<button type=\"button\" class=\"btn btn-danger le-remove-btn\"  \n        click.delegate=\"removeItem($index)\"  \n        bs-tooltip=\"title.bind: 'resources.actions.remove' & t;  \n                    placement: right\"> \n    <i class=\"fa fa-times\"></i> \n  </button> \n  <!-- Omitted snippet... --> \n\n```", "```js\n> npm install bootstrap-datepicker --save\n\n```", "```js\n{ \n  //Omitted snippet... \n  { \n    \"name\": \"vendor-bundle.js\", \n    \"prepend\": [ \n      \"node_modules/bluebird/js/browser/bluebird.core.js\", \n      \"scripts/require.js\" \n    ], \n    \"dependencies\": [ \n      //Omitted snippet... \n      { \n        \"name\": \"bootstrap-datepicker\", \n        \"path\": \"../node_modules/bootstrap-datepicker/dist\", \n        \"main\": \"js/bootstrap-datepicker.min\", \n        \"deps\": [\"jquery\"], \n        \"resources\": [ \n          \"css/bootstrap-datepicker3.standalone.css\" \n        ] \n      }, \n      //Omitted snippet... \n    ] \n  } \n  //Omitted snippet... \n} \n\n```", "```js\n<template> \n  <require from=\"bootstrap-datepicker/css/ \n                 bootstrap-datepicker3.standalone.css\"></require> \n  <input ref=\"input\" class=\"form-control\" /> \n</template> \n\n```", "```js\nimport {bindable, bindingMode} from 'aurelia-framework'; \nimport $ from 'bootstrap'; \nimport 'bootstrap-datepicker'; \n\nexport class BsDatepickerCustomElement { \n\n  static defaultOptions = { autoclose: true, zIndexOffset: 1050 }; \n\n  @bindable({ defaultBindingMode: bindingMode.twoWay }) date; \n  @bindable options; \n\n  isAttached = false; \n  isUpdating = false; \n\n  createDatepicker() { \n    const options = Object.assign({},  \n      BsDatepickerCustomElement.defaultOptions,  \n      this.options); \n    $(this.input).datepicker(options) \n      .on('clearDate', this.updateDate) \n      .on('changeDate', this.updateDate); \n    if (this.date) { \n      this.updateDatepickerDate(); \n    } \n  } \n\n  destroyDatepicker() { \n    $(this.input) \n      .datepicker() \n      .off('clearDate', this.updateDate) \n      .off('changeDate', this.updateDate) \n      .datepicker('destroy'); \n  } \n\n  updateDate = function() { \n    if (!this.isUpdating) { \n      this.date = $(this.input).datepicker('getUTCDate'); \n    } \n  }.bind(this); \n\n  updateDatepickerDate() { \n    $(this.input).datepicker('setUTCDate', this.date); \n  } \n\n  optionsChanged() { \n    if (this.isAttached) { \n      this.destroyDatepicker(); \n      this.createDatepicker(); \n    } \n  } \n\n  dateChanged() { \n    if (this.isAttached) { \n      this.isUpdating = true; \n      this.updateDatepickerDate(); \n      this.isUpdating = false; \n    } \n  } \n\n  attached() { \n    this.createDatepicker(); \n    this.isAttached = true; \n  } \n\n  detached() { \n    this.isAttached = false; \n    this.destroyDatepicker(); \n  } \n} \n\n```", "```js\n<!-- Omitted snippet... --> \n<div class=\"form-group\"> \n  <label class=\"col-sm-3 control-label\"  \n         t=\"contacts.birthday\"></label> \n  <div class=\"col-sm-9\"> \n    <bs-datepicker date.bind=\"contact.birthday & validate\"> \n    </bs-datepicker> \n  </div> \n</div> \n<!-- Omitted snippet... --> \n\n```", "```js\n//Omitted snippet... \nexport class Contact { \n\n  static fromObject(src) { \n    const contact = Object.assign(new Contact(), src); \n    if (contact.birthday) { \n      contact.birthday = new Date(contact.birthday); \n    } \n    //Omitted snippet... \n  } \n\n  //Omitted snippet... \n  birthday = null; \n  //Omitted snippet... \n} \n\n```", "```js\n//Omitted snippet... \n{ \n  \"name\": \"vendor-bundle.js\", \n  \"prepend\": [ \n    \"node_modules/bluebird/js/browser/bluebird.core.js\", \n    \"node_modules/jquery/dist/jquery.min.js\", \n    \"node_modules/bootstrap/dist/js/bootstrap.min.js\", \n    \"node_modules/bootstrap-datepicker/dist/js/bootstrap-datepicker.min.js\", \n    \"node_modules/bootstrap-datepicker/dist/locales/ \n       bootstrap-datepicker.fr.min.js\", \n    \"scripts/require.js\" \n  ], \n  \"dependencies\": [ \n    //Omitted snippet... \n  ] \n} \n//Omitted snippet... \n\n```", "```js\n<!-- Omitted snippet... --> \n<head> \n    <title>Learning Aurelia</title> \n    <link href=\"node_modules/bootstrap/dist/css/bootstrap.min.css\"  \n          rel=\"stylesheet\"> \n    <link href=\"node_modules/bootstrap-datepicker/dist/css/ \n                bootstrap-datepicker3.standalone.css\"  \n          rel=\"stylesheet\"> \n  <!-- Omitted snippet... --> \n<head> \n<!-- Omitted snippet... --> \n\n```", "```js\n<!-- Omitted snippet... --> \n<bs-datepicker date.bind=\"contact.birthday & validate\" \n               options.bind=\"{ language: locale }\"> \n</bs-datepicker> \n<!-- Omitted snippet... --> \n\n```", "```js\n//Omitted snippet... \nimport {I18N} from 'aurelia-i18n'; \nimport {EventAggregator} from 'aurelia-event-aggregator'; \n\n@inject(DOM.Element, Animator, I18N, EventAggregator) \nexport class ContactForm { \n\n@bindable contact; \n\nconstructor(element, animator, i18n, eventAggregator) { \n    this.element = element; \n    this.animator = animator; \n    this.i18n = i18n; \n    this.eventAggregator = eventAggregator; \n  } \n\n  bind() { \n    this.locale = this.i18n.getLocale(); \n    this._localeChangedSubscription = this.eventAggregator \n      .subscribe('i18n:locale:changed', () => { \n        this.locale = this.i18n.getLocale(); \n      }); \n  } \n\n  unbind() { \n    this._localeChangedSubscription.dispose(); \n    this._localeChangedSubscription = null; \n  } \n\n  //Omitted snippet... \n} \n\n```", "```js\n> npm install jquery --save\n> npm install github:components/jqueryui#1.12.1 --save\n\n```", "```js\n//Omitted snippet... \n{ \n  \"name\": \"vendor-bundle.js\", \n  \"prepend\": [ \n    \"node_modules/bluebird/js/browser/bluebird.core.js\", \n    \"node_modules/jquery/dist/jquery.min.js\", \n    \"node_modules/components-jqueryui/jquery-ui.min.js\", \n    \"scripts/require.js\" \n  ], \n  \"dependencies\": [ \n    //Omitted snippet... \n  ] \n} \n//Omitted snippet... \n\n```", "```js\n<!-- Omitted snippet... --> \n<head> \n<title>Aurelia</title> \n  <link href=\"node_modules/bootstrap/dist/css/bootstrap.min.css\"  \n        rel=\"stylesheet\"> \n  <link href=\"node_modules/components-jqueryui/themes/base/all.css\"  \n        rel=\"stylesheet\"> \n  <!-- Omitted snippet... --> \n</head> \n<!-- Omitted snippet... --> \n\n```", "```js\nimport {inject, DOM, dynamicOptions} from 'aurelia-framework'; \n\nconst properties = [ \n  'classes', 'content', 'disabled', 'hide', 'position', \n  'show', 'track',  \n]; \n\n@dynamicOptions \n@inject(DOM.Element) \nexport class JqTooltipCustomAttribute { \n\n  isAttached = false; \n\n  constructor(element) { \n    this.element = element; \n  } \n\n  attached() { \n    const options = {}; \n    for (let property of properties) { \n      options[property] = this[property]; \n    } \n    $(this.element).tooltip(options); \n    this.isAttached = true; \n  }   \n\n  detached() { \n    this.isAttached = false; \n    $(this.element).tooltip('destroy'); \n  } \n} \n\n```", "```js\n//Omitted snippet... \npropertyChanged(name) { \n  if (this.isAttached && properties.indexOf(name) >= 0) { \n    $(this.element).tooltip('option', name, this[name]); \n  } \n} \n//Omitted snippet... \n\n```", "```js\n<!-- Omitted snippet.. --> \n<button type=\"button\" class=\"btn btn-danger le-remove-btn\"  \n        click.delegate=\"removeItem($index)\" \n        jq-tooltip=\"content.bind: 'resources.actions.remove' & t\"> \n  <i class=\"fa fa-times\"></i> \n</button> \n<!-- Omitted snippet.. --> \n\n```", "```js\n//Omitted snippet... \nattached() { \n  if (!this.element.hasAttribute('title')) { \n    this.element.setAttribute('title', ''); \n  } \n  //Omitted snippet... \n} \n//Omitted snippet... \n\n```", "```js\nlist-editor .animated .le-item { \n  &.au-enter-active { \n    animation: blindDown 0.2s; \n    overflow: hidden; \n  } \n\n  &.au-leave-active { \n    animation: blindUp 0.2s; \n    overflow: hidden; \n  } \n} \n\n@keyframes blindDown { \n  0% { max-height: 0px; } \n  100% { max-height: 80px; } \n} \n\n@keyframes blindUp { \n  0% { max-height: 80px; } \n  100% { max-height: 0px; } \n} \n\n```", "```js\n<template> \n  <require from=\"./list-editor.css\"></require> \n  <!-- Omitted snippet... --> \n</template> \n\n```", "```js\n> npm install sortablejs --save\n\n```", "```js\n//Omitted snippet... \n{ \n  \"name\": \"vendor-bundle.js\", \n  \"prepend\": [ \n    //Omitted snippet... \n  ], \n  \"dependencies\": [ \n    \"sortablejs\", \n    //Omitted snippet... \n  ] \n}, \n//Omitted snippet... \n\n```", "```js\n<!-- Omitted snippet... --> \n<div ref=\"container\"> \n  <div class=\"form-group le-item ${animated ? 'au-animate' : ''}\"  \n       repeat.for=\"item of items\"> \n    <template with.bind=\"item\"> \n      <div class=\"col-sm-1\"> \n        <i class=\"fa fa-bars fa-2x sort-handle pull-right\"></i> \n      </div> \n      <template replaceable part=\"item\"> \n        <div class=\"col-sm-2\"> \n          <template replaceable part=\"label\"></template> \n        </div> \n        <!-- Omitted snippet... --> \n      </template> \n      <!-- Omitted snippet... --> \n    </template> \n  </div> \n</div> \n<!-- Omitted snippet... --> \n\n```", "```js\n/* Omitted snippet... */ \nlist-editor .sort-handle { \n cursor: move; \n} \n\n```", "```js\n//Omitted snippet... \nimport sortable from 'sortablejs'; \n\nexport class ListEditor { \n  //Omitted snippet... \n moveItem(oldIndex, newIndex) { \n    const item = this.items[oldIndex]; \n    this.items.splice(oldIndex, 1); \n    this.items.splice(newIndex, 0, item); \n  } \n\n attached() { \n    this.sortable = sortable.create(this.container, { \n      sort: true, \n      draggable: '.le-item', \n      handle: '.sort-handle',  \n      animation: 150, \n      onUpdate: (e) => { \n        if (e.newIndex != e.oldIndex) { \n          this.animated = false; \n          this.moveItem(e.oldIndex, e.newIndex);  \n          setTimeout(() => { this.animated = true; }); \n        } \n      } \n    }); \n    setTimeout(() => { this.animated = true; }); \n  } \n\n detached() { \n    this.sortable.destroy(); \n    this.sortable = null; \n  } \n  //Omitted snippet... \n} \n\n```", "```js\n> npm install d3 --save\n\n```", "```js\n//Omitted snippet... \n{ \n  \"name\": \"vendor-bundle.js\", \n  \"prepend\": [ \n    //Omitted snippet... \n  ], \n  \"dependencies\": [ \n    { \n      \"name\": \"d3\", \n      \"path\": \"../node_modules/d3/build\", \n      \"main\": \"d3.min\" \n    }, \n    //Omitted snippet... \n  ] \n} \n//Omitted snippet... \n\n```", "```js\n//Omitted snippet... \nconfig.map([ \n  { route: '', name: 'contacts', moduleId: './components/list',  \n    title: 'contacts.contacts' }, \n  { route: 'by-address', name: 'contacts-by-address',  \n    moduleId: './components/by-address',  \n    title: 'contacts.byAddress' }, \n  { route: 'new', name: 'contact-creation',  \n    moduleId: './components/creation',  \n    title: 'contacts.newContact' }, \n  { route: ':id', name: 'contact-details',  \n    moduleId: './components/details' }, \n  { route: ':id/edit', name: 'contact-edition',  \n    moduleId: './components/edition' }, \n  { route: ':id/photo', name: 'contact-photo',  \n    moduleId: './components/photo' }, \n]); \n//Omitted snippet... \n\n```", "```js\n<template> \n  <section class=\"container au-animate\"> \n    <h1 t=\"contacts.contacts\"></h1> \n    <p> \n      <a route-href=\"route: contacts-by-address\"  \n         t=\"contacts.viewByAddress\"></a> \n    </p> \n    <!-- Omitted snippet... --> \n  </section> \n</template> \n\n```", "```js\nimport {inject} from 'aurelia-framework'; \nimport {Router} from 'aurelia-router'; \nimport {ContactGateway} from '../services/gateway'; \n\n@inject(ContactGateway, Router) \nexport class ContactsByAddress { \n\n  contacts = []; \n\n  constructor(contactGateway, router) { \n    this.contactGateway = contactGateway; \n    this.router = router; \n  } \n\n  activate() { \n    return this.contactGateway.getAll().then(contacts => { \n      this.contacts.splice(0); \n      this.contacts.push.apply(this.contacts, contacts);  \n    }); \n  } \n\n  navigateToDetails(contact) { \n    this.router \n      .navigateToRoute('contact-details', { id: contact.id }); \n  } \n} \n\n```", "```js\n<template>  \n  <require from=\"./by-address.css\"></require> \n  <require from=\"../elements/address-tree\"></require> \n\n  <section class=\"container au-animate\"> \n    <h1 t=\"contacts.byAddress\"></h1> \n\n    <p> \n      <a route-href=\"route: contacts\" t=\"contacts.viewByName\"></a> \n    </p> \n\n    <contact-address-tree contacts.bind=\"contacts\"  \n                          click.call=\"navigateToDetails(contact)\"> \n    </contact-address-tree> \n  </section> \n</template> \n\n```", "```js\ncontact-address-tree { \n  display: block; \n  width: 100%; \n  min-height: 400px; \n} \n\n```", "```js\ncontact-address-tree .node circle { \n  fill: #d9edf7; \n  stroke: #337ab7; \n  stroke-width: 1.5px; \n} \n\ncontact-address-tree .node text { \n  font: 15px; \n} \n\ncontact-address-tree .node text { \n  text-shadow: 0 1px 0 #fff, 0 -1px 0 #fff, 1px 0 0 #fff, -1px 0 0 #fff; \n} \n\ncontact-address-tree .leaf { \n  cursor: pointer; \n} \n\ncontact-address-tree .leaf circle { \n  fill: #337ab7; \n} \n\ncontact-address-tree .leaf text { \n  font-weight: bold; \n} \n\ncontact-address-tree .link { \n  fill: none; \n  stroke: #777; \n  stroke-width: 1.5px; \n} \n\n```", "```js\nimport {inject, DOM, noView, bindable} from 'aurelia-framework'; \nimport * as d3 from 'd3'; \n\n@inject(DOM.Element) \n@noView(['./address-tree.css']) \nexport class ContactAddressTreeCustomElement {      \n\n  @bindable contacts; \n  @bindable click; \n\n  constructor(element) { \n    this.element = element; \n  } \n} \n\n```", "```js\n//Omitted snippet... \nexport class ContactAddressTreeCustomElement { \n  //Omitted snippet... \n\n attached() { \n    // Calculate the size of the viewport \n    const margin = { top: 20, right: 200, bottom: 20, left: 12 }; \n    const height = this.element.clientHeight  \n      - margin.top - margin.bottom; \n    const width = this.element.clientWidth  \n      - margin.right - margin.left; \n\n    // Create the host elements and the tree factory \n    const tree = d3.tree().size([height, width]); \n    const svg = d3.select(this.element).append('svg') \n        .attr('width', width + margin.right + margin.left) \n        .attr('height', height + margin.top + margin.bottom); \n    const g = svg.append('g') \n        .attr('transform',  \n              `translate(${margin.left}, ${margin.top})`); \n\n    // Create the hierarchy, then initialize the tree from it \n    const rootNode = this.createAddressTree(this.contacts); \n    const hierarchy = d3.hierarchy(rootNode); \n    tree(hierarchy); \n\n    // Render the nodes and links \n    const link = g.selectAll('.link') \n      .data(hierarchy.descendants().slice(1)) \n      .enter().append('path') \n      .attr('class', 'link') \n      .attr('d', d => `M${d.y},${d.x}C${(d.y + d.parent.y) / 2}, \n                       ${d.x} ${(d.y + d.parent.y) / 2}, \n                       ${d.parent.x} ${d.parent.y}, \n                       ${d.parent.x}`); \n\n    const node = g.selectAll('.node') \n      .data(hierarchy.descendants()) \n      .enter().append('g') \n      .attr('class', d => 'node ' + (d.children ? 'branch' : 'leaf')) \n      .attr('transform', d => `translate(${d.y}, ${d.x})`) \n      .on('click', e => { this.onNodeClicked(e); }); \n\n    node.append('title') \n      .text(d => d.data.name); \n\n    node.append('circle') \n      .attr('r', 10); \n\n    node.append('text') \n      .attr('dy', 5) \n      .attr('x', d => d.children ? -15 : 15) \n      .style('text-anchor', d => d.children ? 'end' : 'start') \n      .text(d => d.data.name); \n  } \n} \n\n```", "```js\n//Omitted snippet... \nexport class ContactAddressTreeCustomElement { \n  //Omitted snippet... \n\n onNodeClicked(node) { \n    if (node.data.contact && this.click) { \n      this.click({ contact: node.data.contact }); \n    } \n  } \n} \n\n```", "```js\n//Omitted snippet... \nexport class ContactAddressTreeCustomElement { \n  //Omitted snippet... \n\n createAddressTree(contacts) { \n    const rootNode = { name: '', children: [] }; \n    for (let contact of contacts) { \n      for (let address of contact.addresses) { \n        const path = this.getOrCreateAddressPath( \n          rootNode, address); \n        const pathTail = path[path.length - 1]; \n        pathTail.children.push({ \n          name: contact.fullName,  \n          contact \n        }); \n      } \n    } \n    return rootNode; \n  } \n\n  getOrCreateAddressPath(rootNode, address) { \n    const countryNode = this.getOrCreateNode( \n      rootNode, address.country); \n    const stateNode = this.getOrCreateNode( \n      countryNode, address.state); \n    const cityNode = this.getOrCreateNode( \n      stateNode, address.city); \n    const streetNode = this.getOrCreateNode( \n      cityNode, address.street); \n    const numberNode = this.getOrCreateNode( \n      streetNode, address.number); \n    return [countryNode, stateNode, cityNode,  \n      streetNode, numberNode]; \n  } \n\n  getOrCreateNode(parentNode, name) { \n    name = name || '?'; \n\n    const normalizedName = this.normalizeNodeName(name); \n    let node = parentNode.children \n      .find(n => n.normalizedName === normalizedName); \n    if (!node) { \n      node = { name, normalizedName, children: [] }; \n      parentNode.children.push(node); \n    } \n    return node; \n  } \n\n  normalizeNodeName(name) { \n    return name.toLowerCase().trim().replace(/\\s+/, ' '); \n  } \n} \n\n```", "```js\n> npm install -g bower\n\n```", "```js\n{ \n  \"name\": \"learning-aurelia\", \n  \"private\": true, \n  \"dependencies\": { \n    \"polymer\": \"Polymer/polymer#^1.2.0\", \n    \"google-map\": \"GoogleWebComponents/google-map#^1.1.13\", \n    \"webcomponentsjs\": \"webcomponents/webcomponentsjs#^0.7.20\" \n  } \n} \n\n```", "```js\n> bower install\n\n```", "```js\n> npm install aurelia-polymer --save\n\n```", "```js\n//Omitted snippet... \n{ \n  \"name\": \"vendor-bundle.js\", \n  \"prepend\": [ \n    //Omitted snippet... \n  ], \n  \"dependencies\": [ \n    { \n      \"name\": \"aurelia-polymer\", \n      \"path\": \"../node_modules/aurelia-polymer/dist/amd\", \n      \"main\": \"index\" \n    }, \n    //Omitted snippet... \n  ] \n} \n//Omitted snippet... \n\n```", "```js\n//Omitted snippet... \nexport function configure(aurelia) { \n  aurelia.use \n    .standardConfiguration() \n    .plugin('aurelia-polymer')  \n    .plugin('aurelia-animator-css') \n  //Omitted snippet... \n} \n\n```", "```js\n<!-- Omitted snippet... --> \n<head> \n  <!-- Omitted snippet... --> \n  <script src=\"bower_components/webcomponentsjs/ \n               webcomponents-lite.js\"></script> \n  <link rel=\"import\" href=\"bower_components/polymer/polymer.html\"> \n  <link rel=\"import\"  \n        href=\"bower_components/google-map/google-map.html\"> \n</head> \n<!-- Omitted snippet... --> \n\n```", "```js\n<template> \n  <button class=\"btn btn-default\"  \n          click.delegate=\"isMapVisible = !isMapVisible\"> \n    ${isMapVisible ? 'contacts.hideMap' : 'contacts.showMap' & t} \n  </button> \n  <google-map if.bind=\"isMapVisible\"  \n              style=\"display: block; height: 400px;\"  \n              api-key=\"your_key\"> \n  </google-map> \n</template> \n\n```", "```js\nexport class AddressMapCustomElement {  \n  isMapVisible = false; \n} \n\n```", "```js\n<!-- Omitted snippet... --> \n<div class=\"form-group\" repeat.for=\"address of contact.addresses\"> \n  <label class=\"col-sm-2 control-label\"> \n    ${'contacts.types.' + address.type & t} \n  </label> \n  <div class=\"col-sm-10\"> \n    <p class=\"form-control-static\"> \n      ${address.number} ${address.street}</p> \n    <p class=\"form-control-static\"> \n      ${address.postalCode} ${address.city}</p> \n    <p class=\"form-control-static\"> \n      ${address.state} ${address.country}</p> \n    <address-map address.bind=\"address\"></address-map> \n  </div> \n</div> \n<!-- Omitted snippet... --> \n\n```", "```js\nimport {HttpClient} from 'aurelia-fetch-client'; \n\nexport class Geocoder { \n\n  http = new HttpClient().configure(config => { \n    config \n      .useStandardConfiguration() \n      .withBaseUrl('http://nominatim.openstreetmap.org/'); \n  }); \n\n  search(address) { \n    const query = { \n      format: 'json', \n      street: `${address.number} ${address.street}`, \n      city: address.city, \n      state: address.state, \n      country: address.country, \n      postalcode: address.postalCode, \n      limit: 1, \n    }; \n    return this.http.fetch(`search?${toQueryString(query)}`) \n      .then(response => response.json()) \n      .then(dto => dto.length === 0 ? null : dtoToResult(dto[0])); \n  } \n} \n\nfunction toQueryString(query) { \n  return Object.getOwnPropertyNames(query) \n    .map(name => { \n      const key = encodeURIComponent(name); \n      const value = encodeURIComponent(query[name]); \n      return `${key}=${value}`; \n    }) \n    .join('&'); \n} \n\nfunction dtoToResult(dto) { \n  return { \n    latitude: parseFloat(dto.lat), \n    longitude: parseFloat(dto.lon) \n  }; \n} \n\n```", "```js\nimport {inject, bindable} from 'aurelia-framework'; \nimport {Geocoder} from '../services/geocoder'; \n\n@inject(Geocoder) \nexport class AddressMapCustomElement { \n\n  @bindable address; \n\n  isAttached = false; \n  isMapVisible = false; \n  isGeocoded = false; \n  latitude = null; \n  longitude = null; \n\n  constructor(geocoder) { \n    this.geocoder = geocoder; \n  } \n\n  addressChanged() { \n    if (this.isAttached) { \n      this.geocode(); \n    } \n  } \n\n  attached() { \n    this.isAttached = true; \n    this.geocode(); \n  } \n\n  detached() { \n    this.isAttached = false; \n  } \n\n  geocode() { \n    if (this.address) { \n      this.geocoder.search(this.address).then(position => { \n        if (position) { \n          this.latitude = position.latitude; \n          this.longitude = position.longitude; \n          this.isGeocoded = true; \n        } else { \n          this.isMapVisible = false; \n          this.isGeocoded = false;  \n          this.latitude = null; \n          this.longitude = null; \n        } \n      }); \n    } \n  } \n} \n\n```", "```js\n<template> \n  <button class=\"btn btn-default\"  \n          click.delegate=\"isMapVisible = !isMapVisible\"  \n          disabled.bind=\"!isGeocoded\"> \n    ${isMapVisible ? 'contacts.hideMap' : 'contacts.showMap' & t} \n  </button> \n  <google-map if.bind=\"isMapVisible\"  \n              latitude.bind=\"latitude\"  \n              longitude.bind=\"longitude\"  \n              zoom=\"15\"  \n              style=\"display: block; height: 400px;\" \n             api-key=\"your_key\"> \n    <google-map-marker latitude.bind=\"latitude\"  \n                       longitude.bind=\"longitude\"  \n                       open=\"true\"> \n      ${address.number} ${address.street}  \n      ${address.postalCode} ${address.city}  \n      ${address.state} ${address.country} \n    </google-map-marker> \n  </google-map> \n</template> \n\n```"]