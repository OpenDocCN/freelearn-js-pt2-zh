["```js\n    export { serve } from\n      \"https://deno.land/std@0.83.0/http/server.ts\"\n    ```", "```js\n    export { serve } from\n      \"https://deno.land/std@0.83.0/http/server.ts\"\n    ```", "```js\n    import { serve } from \"../deps.ts\";\n    ```", "```js\n$ deno cache --lock=lock.json --lock-write src/deps.ts\n```", "```js\n$ deno cache --lock=lock.json src/deps.ts\n```", "```js\n    export { Application } from\n      \"https://deno.land/x/oak@v6.3.1/mod.ts\"\n    ```", "```js\n    $ deno cache --lock=lock.json --reload --lock-write src/deps.ts\n    Download https://deno.land/std@0.83.0/http/server.ts\n    Download https://deno.land/x/oak@v6.3.1/mod.ts\n    Download https://deno.land/std@0.83.0/encoding/utf8.ts\n    …\n    ```", "```js\n    import { Application } from \"../deps.ts\";\n    …\n    export async function createServer({\n      configuration: {\n        port\n      },\n      museum\n    }: CreateServerDependencies) {\n      const app = new Application ();\n      app.use((ctx) => {\n        ctx.response.body = \"Hello World!\";\n      });\n      await app.listen({ port });\n    }\n    ```", "```js\n$ deno run --allow-net src/index.ts  \n```", "```js\napp.addEventListener(\"listen\", e => {\n  console.log(`Application running at \n    http://${e.hostname || 'localhost'}:${port}`)\n})\n…\nawait app.listen({ port });\n```", "```js\napp.addEventListener(\"error\", e => {\n  console.log('An error occurred', e.message);\n})\n```", "```js\nimport { Application, Router } from \"../deps.ts\";\n…\nconst apiRouter = new Router ({ prefix: \"/api\" })\n```", "```js\napiRouter.get(\"/museums\", async (ctx) => {\n  ctx.response.body = {\n    museums: await museum.getAll()\n  }\n});\n```", "```js\nconst apiRouter = new Router({ prefix: \"/api\" })\napiRouter.get(\"/museums\", async (ctx) => {\n  ctx.response.body = {\n    museums: await museum.getAll()\n  }\n});\napp.use(apiRouter.routes());\napp.use(apiRouter.allowedMethods());\napp.use((ctx) => {\n  ctx.response.body = \"Hello World!\";\n});\n```", "```js\n$ deno run --allow-net src/index.ts\nApplication running at http://localhost:8080\n```", "```js\n$ curl http://localhost:8080/api/museums\n{\"museums\":[{\"id\":\"1fbdd2a9-1b97-46e0-b450-62819e5772ff\",\"name\":\"The Louvre\",\"description\":\"The world's largest art museum and a historic monument in Paris, France.\",\"location\":{\"lat\":\"48.860294\",\"lng\":\"2.33862\"}}]}\n```", "```js\n    export type User = {\n      username: string,\n      hash: string,\n      salt: string,\n      createdAt: Date\n    } \n    ```", "```js\n    type RegisterPayload = \n      { username: string, password: string };\n    export class Controller {\n      public async register(payload: RegisterPayload) {\n        // Logic to register users\n      }\n    }\n    ```", "```js\n    // src/users/types\n    export type RegisterPayload = \n      { username: string; password: string };\n    ```", "```js\n    export type {\n      RegisterPayload,\n    } from \"./types.ts\";\n    ```", "```js\n    export type CreateUser = \n      Pick<User, \"username\" | \"hash\" | \"salt\">;\n    …\n    export interface UserRepository {\n      create: (user: CreateUser) => Promise<User>\n      exists: (username: string) => Promise<boolean>\n    }\n    ```", "```js\n    userRepository, we can start writing the logic for the register method.\n    ```", "```js\n    async register(payload: RegisterPayload) {\n    create method of userRepository to make sure it follows the CreateUser type we defined previously. These will have to be automatically generated, but don't worry about that for now.And with this, we've pretty much finished looking at what will happen whenever someone tries to register with our application. We're still missing one thing, though. As you may have noticed, we're returning the `User` object directly from the repository, which might contain sensitive information, namely the `hash` and `salt` properties.\n    ```", "```js\n    export type User = {\n      username: string,\n      hash: string,\n      salt: string,\n      createdAt: Date\n    }\n    Pick to choose two properties from the User object; that is, createdAt and username.With `UserDto` ([https://en.wikipedia.org/wiki/Data_transfer_object](https://en.wikipedia.org/wiki/Data_transfer_object)) defined, we can now make sure our register is returning it. \n    ```", "```js\n    import type { User, UserDto } from \"./types.ts\";\n    export const userToUserDto = (user: User): UserDto => {\n      return {\n        username: user.username,\n        createdAt: user.createdAt\n      }\n    }\n    ```", "```js\n    import { userToUserDto } from \"./adapter.ts\";\n    …\n    public async register(payload: RegisterPayload) {\n      …\n      const createdUser = await\n        this.userRepository.create(\n        payload.username,\n        payload.password\n      );\n      return userToUserDto(createdUser);\n    }\n    ```", "```js\n    import { createHash } from\n      \"https://deno.land/std@0.83.0/hash/mod.ts\";\n    export const hashWithSalt = \n      (password: string, salt: string) => {\n        const hash = createHash(\"sha512\")\n          .update(`${password}${salt}`)\n            .toString();\n      return hash;\n    };\n    ```", "```js\n    import { encodeToString } from\n      \"https://deno.land/std@0.83.0/encoding/hex.ts\"\n    …\n    export const generateSalt = () => {\n      const arr = new Uint8Array(64);\n      crypto.getRandomValues(arr)\n      return encodeToString(arr);\n    }\n    ```", "```js\n    import { generateSalt, hashWithSalt } from\n      \"./util.ts\";\n    …\n    export class Controller implements UserController {\n    … \n      private async getHashedUser\n        (username: string, password: string) {\n        const salt = generateSalt();\n        const user = {\n          username,\n          hash: hashWithSalt(password, salt),\n          salt\n        }\n        return user;\n      }\n    …\n    ```", "```js\n    public async register(payload: RegisterPayload) {\n      if (await\n        this.userRepository.exists(payload.username)) {\n        return Promise.reject(\"Username already exists\");\n      }\n      const createdUser = await\n        this.userRepository.create(\n        await this.getHashedUser\n          (payload.username, payload.password)\n      );\n      return userToDto(createdUser);\n    }\n    ```", "```js\n    import type { CreateUser, User, UserRepository } from\n      \"./types.ts\";\n    export class Repository implements UserRepository {\n      async create(user: CreateUser) {\n      }\n      async exists(username: string) {\n      }\n    }\n    ```", "```js\n    import { User, UserRepository } from \"./types.ts\";\n    export class Repository implements UserRepository {\n      private storage = new Map<User[\"username\"], User>();\n    …\n    ```", "```js\n    async exists(username: string) {\n      return Boolean(this.storage.get(username));\n    }\n    ```", "```js\n    async create(user: CreateUser) {\n      const userWithCreatedAt = \n        { ...user, createdAt: new Date() }\n      this.storage.set\n       (user.username, { ...userWithCreatedAt });\n      return userWithCreatedAt;\n    } \n    ```", "```js\n    export { Repository } from './repository.ts';\n    export { Controller } from './controller.ts';\n\n    export type {\n      CreateUser,\n      RegisterPayload,\n      User,\n      UserController,\n      UserRepository,\n    } from \"./types.ts\"; \n    ```", "```js\n    RegisterPayload from src/users/controller.ts previously.\n    ```", "```js\n    import { RegisterPayload, UserController,\n      UserRepository } from \"./types.ts\";\n    export class Controller implements UserController\n    ```", "```js\n    import { UserController } from \"../users/index.ts\";\n    interface CreateServerDependencies {\n      configuration: {\n        port: number\n      },\n      museum: MuseumController,\n      user: UserController\n    }\n    export async function createServer({\n      configuration: {\n        port\n      },\n      museum,\n      user\n    }: CreateServerDependencies) {\n    …\n    ```", "```js\n    apiRouter.post method to define a route that accepts a POST request. Then, we're using the body method from the request (https://doc.deno.land/https/deno.land/x/oak@v6.3.1/mod.ts#ServerRequest) to get its output in JSON. We then do a simple validation to check if the username and password are present in the request body, and at the bottom, we use the injected register method from the controller. We're wrapping it in a try catch so that we can return HTTP status code 400 if an error happens.\n    ```", "```js\n    import {\n      Controller as UserController,\n      Repository as UserRepository,\n       } from './users/index.ts';\n    …\n    const userRepository = new UserRepository();\n    const userController = new UserController({\n      userRepository });\n    ```", "```js\n    createServer({\n      configuration: { port: 8080 },\n      museum: museumController,\n      user: userController\n    })\n    ```", "```js\n$ deno run --allow-net src/index.ts\nApplication running at http://localhost:8080\n```", "```js\n$ curl -X POST -d '{\"username\": \"alexandrempsantos\", \"password\": \"testpw\" }' -H 'Content-Type: application/json' http://localhost:8080/api/users/register\n{\"user\":{\"username\":\"alexandrempsantos\",\"createdAt\":\"2020-10-06T21:56:54.718Z\"}}\n```"]