- en: Chapter 5. Promises in WinRT
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。WinRT中的承诺
- en: In last four chapters, we spent time making our concept strong and our foundation
    of thoughts aligned to promise. From this chapter onwards, we will explore promise
    in different technologies. We will see how these technologies adopted the concept,
    the reasons why thy adopted it, and how long promise has been associated with
    these technologies. We will sample some of the code bases of related technologies
    in order to get firsthand knowledge on how to actually implement promise in real
    time.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的四章中，我们花费时间加强我们的概念并确保我们的思维基础与承诺保持一致。从这一章开始，我们将探索在不同技术中的承诺。我们将了解这些技术是如何采用该概念的，它们为何采用它，以及承诺与这些技术有何关联。我们将查看一些相关技术的代码库，以便获得第一手知识，了解如何在实际环境中实现承诺。
- en: An introduction to WinRT
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WinRT简介
- en: Our first lookout for the technology is WinRT. What is WinRT? It is the short
    form for Windows Runtime. This is a platform provided by Microsoft to build applications
    for Windows 8+ operating system. It supports application development in C++/ICX,
    C# (C sharp), VB.NET, TypeScript, and JavaScript.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对技术的第一次关注是WinRT。WinRT是什么？它是Windows Runtime的简称。这是由微软提供的一个平台，用于构建适用于Windows
    8+操作系统的应用程序。它支持在C++/ICX、C#（C#）、VB.NET、TypeScript和JavaScript中进行应用程序开发。
- en: Microsoft adopted JavaScript as one of its prime and first-class tools to develop
    cross-browser apps and for the development on other related devices. We are now
    fully aware of what the pros and cons of using JavaScript are, which has brought
    us here to implement the use of promise.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 微软将JavaScript作为其主要的、一等公民工具之一，用于开发跨浏览器应用程序以及开发相关设备。我们现在完全了解使用JavaScript的利弊，这使我们来到了实现承诺使用的地方。
- en: You guessed it right! In this chapter, we will focus on how promise is implemented
    on WinRT, which was the need of implementation, and how it's implemented. We will
    also sample some code wherever needed to see how well promise is helping in this
    platform, and how one can actually use it.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 您猜对了！在本章中，我们将重点介绍如何在WinRT上实现承诺，这是实现的需要，以及如何实现。我们还将根据需要查看一些代码，以了解承诺在这些平台上表现如何，以及如何实际使用它。
- en: The evolution of WinRT
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WinRT的演变
- en: With the announcement of Windows 8, Microsoft has released a complete new architecture
    of its famous and most used operating system, Windows. This architecture is for
    all the devices and platforms, including mobile phones, tablets, wearable, and
    so on. Due to this singleton approach, a unified approach for application development
    was very much needed, so Microsoft included a few more tools and languages in
    its platform, and from there JavaScript for Windows, or Win, came on to the scene.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 随着Windows 8的发布，微软发布了其著名且最常使用的操作系统Windows的全新架构。这个架构适用于所有设备和平台，包括手机、平板电脑、可穿戴设备等。由于这种单例方法，应用程序开发需要一个统一的方法，因此微软在其平台上添加了更多的工具和语言，从这个角度来看，JavaScript
    for Windows，或者Win，就出现在了舞台上。
- en: You may ask why have they adopted JavaScript and why not some other language
    for their expanding arsenal of web programming? The answer lies in the architecture
    of JavaScript. In the previous chapters, we learned how JavaScript is considered
    to be the best tool for web-based programming and how it's useful in many scenarios.
    Microsoft has adopted this power and embedded it into its WinRT platform. By adding
    this, Microsoft has an edge over many of its competitors, as it now has access
    to a wider range of programmers who know that JavaScript can also program for
    Microsoft and show their work to a large number of users.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会问，为什么它们采用了JavaScript，而不是其他语言来扩展其网络编程的武器库？答案在于JavaScript的结构。在前几章中，我们了解到JavaScript被认为是基于网络编程的最佳工具，并且在许多场景中非常有用。微软已经利用了这种力量，并将其嵌入到WinRT平台中。通过添加这个平台，微软在其竞争对手中占据了优势，因为它现在可以接触到更多知道可以使用JavaScript为微软编程并且可以将作品展示给大量用户的程序员。
- en: A little detail about WinJS
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于WinJS的一些细节
- en: WinJS was released as an open source JavaScript library, which was released
    by Microsoft under the Apache License. It was initially aimed to be used for building
    the software for Windows app store, but later, it became widely accepted to port
    on all browsers. Now, it is used in combination with HTML5 to build apps for both
    brewers-based and for windows app store.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: WinJS作为一款开源的JavaScript库发布，由微软根据Apache许可证发布。最初，它旨在用于构建Windows应用商店的软件，但后来，它被广泛接受用于所有浏览器上。现在，它与HTML5结合使用，为基于Brewers的以及Windows应用商店的应用程序构建。
- en: It was first announced on April 4, 2014, at the Microsoft Build conference 2014,
    and since then it has seen an evolution from version 1.0 to 3.0 with loads of
    functions and implementations within its SDK.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 它最初是在2014年4月4日的2014年微软Build开发者大会上宣布的，自那时以来，它经历了从1.0到3.0版本的演变，其SDK内部功能和实现满满。
- en: WinJS – its purpose and a distribution history
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WinJS – 它的目的和发行历史
- en: 'WinJS 1.0 was first released with Windows 8.0\. Here are its notable distributions
    up until now. The distribution history is as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: WinJS 1.0最初与Windows 8.0一起发布。以下是到目前为止值得注意的发行版本。发行历史如下：
- en: '| The distribution name | Purpose/focused area |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| 发行名称 | 目的/重点领域 |'
- en: '| --- | --- |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| WinJS 1.0 | This was released as the JavaScript library for Windows 8.0.
    |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| WinJS 1.0 | 这是作为Windows 8.0的JavaScript库发布的。 |'
- en: '| WinJS 2.0 for Windows 8.1 | This is an updated version and released under
    Apache License at GitHub. |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| WinJS 2.0 for Windows 8.1 | 这是更新版本，在GitHub上发布为Apache License。 |'
- en: '| WinJS Xbox 1.0 for Windows | This was an exclusive release for Xbox one for
    Windows. |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| 为Windows的WinJS Xbox 1.0 | 这是专门为Xbox one for Windows发布的。 |'
- en: '| WinJS Phone 2.1 for Windows Phone 8.1 | This was released for Windows phone
    development platform. |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| WinJS Phone 2.1 for Windows Phone 8.1 | 这是为Windows phone开发平台发布的。 |'
- en: '| WinJS 3.0 | This was released in September 2014 for improved cross-platform
    functionality, JavaScript modularization, and improvements in a universal control
    design. |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| WinJS 3.0 | 这是于2014年9月发布的，用于改进跨平台功能、JavaScript模块化和通用控件设计。 |'
- en: WinJS on GitHub
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: WinJS on GitHub
- en: Since WinJS is an open source software, it's hosted on GitHub as MSTF, Microsoft
    Open Technologies. I presume that you are aware of what GitHub is and what it's
    used for; if not, check out [https://github.com/](https://github.com/).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 由于WinJS是一个开源软件，它托管在GitHub上，作为MSTF，微软开放技术。我假设你知道GitHub是什么以及它的用途；如果不知道，请查看[https://github.com/](https://github.com/)。
- en: 'The online repository of WinJS has three basic divisions:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: WinJS的在线仓库分为三个基本部分：
- en: WinJS, which is written in TypeScript and can be found at [https://github.com/winjs/winjs](https://github.com/winjs/winjs)
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WinJS是用TypeScript编写的，可以在[https://github.com/winjs/winjs](https://github.com/winjs/winjs)找到。
- en: WinJS modules that are written in JS and can be seen at [https://github.com/winjs/winjs-modules](https://github.com/winjs/winjs-modules)
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用JS编写的WinJS模块，可以在[https://github.com/winjs/winjs-modules](https://github.com/winjs/winjs-modules)看到。
- en: The WinJS bower, which is also written in JS and be found at [https://github.com/winjs/winjs-bower](https://github.com/winjs/winjs-bower)
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WinJS bower是用JS编写的，可以在[https://github.com/winjs/winjs-bower](https://github.com/winjs/winjs-bower)找到。
- en: Code in these repository is constantly updated and bug fixes are committed by
    programmers around the globe 24 x 7, which is the sole beauty of open source projects.
    The base repository is located at [https://github.com/winjs](https://github.com/winjs).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这些仓库中的代码不断更新，全球程序员24/7提交错误修复，这是开源项目的唯一魅力。基础仓库位于[https://github.com/winjs](https://github.com/winjs)。
- en: With online emulators, you can try WinJS at [http://try.buildwinjs.com](http://try.buildwinjs.com).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 使用在线模拟器，你可以在[http://try.buildwinjs.com](http://try.buildwinjs.com)尝试WinJS。
- en: HTML5, CSS3, and JavaScript
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTML5，CSS3和JavaScript
- en: 'HTML5, CSS3, and JS are a de facto model for web app development, for one strong
    reason. They all are more than technologies: they are standards. There were times
    when companies were in the habit of introducing their own platform, and with many
    bounties, they offered to programmers to use their platforms. Back in those days,
    keeping a standard for the application on all browsers was a nightmare for developers,
    and hence a lot of time was consumed on projects for their compatibility rather
    than their actual feature development. This frustration was addressed by W3C and
    other standard maintaining bodies and started to work on standardsthat would be
    acceptable for all the major game players of the industry. They will use these
    as their base, rather than developing their own standard for every tiny need.
    This caused the evolution of HTML5 and CSS3\. Since JavaScript was around already
    and was considered to be the language of the browser, it was combined with the
    remaining two to become a default technology bundle for both proprietary and open
    source projects.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: HTML5、CSS3和JS是Web应用程序开发的默认模型，原因之一非常强大。它们都不仅仅是技术；它们是标准。曾经有过这样的时代，公司习惯于推出自己的平台，并为程序员使用他们的平台提供许多赏金。在那个时代，对于开发者来说，在所有浏览器上保持应用程序的标准是一场噩梦，因此，很多时间都花在了项目的兼容性上，而不是实际特性的开发上。W3C和其他标准维护机构解决了这一挫折，并开始研究行业主要玩家都能接受的标准。他们将使用这些作为基础，而不是为每个微小需求开发自己的标准。这导致了HTML5和CSS3的演变。由于JavaScript已经存在，并且被认为是浏览器的语言，因此它与剩下的两种技术结合，成为专有和开源项目的默认技术包。
- en: Now, with every platform, these can be used but with a very little difference
    in syntax. This came as a relief to the programmers and engineers as they could
    now focus on solving business problems rather than compatibility.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，每个平台都可以使用这些，但语法上有一些微小的区别。这对程序员和工程师来说是一个福音，因为他们现在可以专注于解决业务问题，而不是兼容性。
- en: WT with HTML5, CSS3, and JavaScript
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTML5、CSS3和JavaScript的WT
- en: JavaScript in WT allows programmers to build apps using HTML and CSS. A lot
    of WT apps using JavaScript are as same as writing markups for the website. In
    addition to this, JavaScript on WT provides some additional features and introduces
    some different ways that you can use it under this platform. Since the implementation
    of JavaScript varies from platform to platform in WT, it's more or less in the
    Microsoft style where, with default JS properties available, WT adds some extra
    features for JavaScript. This provides the enhanced support of touch, more control
    over the look and feel of the UI (user interface). This also provides controls
    such as `DatePicker`, `TimePicker`, and `ListView`, and an exclusive access to
    WinJS.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: WT平台上的JavaScript允许程序员使用HTML和CSS构建应用程序。许多使用JavaScript的WT应用程序类似于为网站编写标记。除此之外，WT上的JavaScript提供了一些附加功能，并引入了在这个平台上可以使用的一些不同方式。由于WT上JavaScript的实现平台之间有所不同，它在很大程度上采用了微软的风格，其中，利用默认的JS属性，WT为JavaScript增加了一些额外功能。这提供了对触摸的增强支持，以及对UI（用户界面）的外观和感觉更多的控制。这也提供了诸如`DatePicker`、`TimePicker`和`ListView`的控制器，以及对WinJS的专有访问。
- en: The need for integrating promise with WT
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 需要将承诺与WT集成
- en: JS is one of the primary languages on the WT platform. Besides the benefits
    of JS, there are some drawbacks too. We all know from our discussion in the previous
    chapter that callback hell was the core reason why there was a need to add promise
    into it, and the same goes here. WT also faced the same problem, but was quick
    enough to solve it by implementing promise into it. Promise in JS for WT is the
    game changer when it comes to writing robust, scalable, and maintainable apps
    for the Windows platform. Although WT was not the first one that implemented promise,
    but it is one of the quicker adopters of the concept and implementer.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: JS是WT平台上的主要语言之一。除了JS的好处，还有一些缺点。正如我们在上一章的讨论中所知，回调地狱是添加承诺的核心原因，这里也是如此。WT也面临了同样的问题，但它通过将其实现为承诺来解决得足够快。对于WT的JS，承诺是游戏规则的改变者，因为它使得编写健壮、可扩展、可维护的Windows平台应用程序变得容易。虽然WT不是第一个实现承诺的，但它是最快采用该概念并实现它的之一。
- en: In fact, JavaScript programmers started using WT JS for Windows, and due to
    the fact that it's highly adoptable, many more professionals are joining that
    community.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，JavaScript程序员开始使用WT JS for Windows，由于它的高度可采用性，许多专业人士加入了这个社区。
- en: Problems when using asynchronous programming
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用异步编程时遇到的问题
- en: Just to refresh your memory, in [Chapter 2](ch02.html "Chapter 2. The JavaScript
    Asynchronous Model"), *The JavaScript Asynchronous Model*, we learned a great
    deal on asynchronous programming, what it is, and how JS implements it. We all
    know that the problem in using JS is the level of complexity it has developed,
    as it's heavily dependent on the callbacks for most of its operations. In the
    *Handling callback hell* section of [Chapter 2](ch02.html "Chapter 2. The JavaScript
    Asynchronous Model"), *The JavaScript Asynchronous Model*, we saw that it's nearly
    impossible to debug the code if callbacks were getting out of control. The promise
    paradigm was then called in to solve this problem. The same occurrences are with
    JS when applied at WT.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 只是为了刷新你的记忆，在[第2章](ch02.html "第2章．JavaScript异步模型")，*JavaScript异步模型*中，我们学习了关于异步编程的大量知识，它是什么，以及JS是如何实现它的。我们都知道使用JS的问题在于它已经发展出了很高的复杂性，因为它在大多数操作中严重依赖于回调。在[第2章](ch02.html
    "第2章．JavaScript异步模型")，*JavaScript异步模型*的*处理回调地狱*部分，我们看到如果回调变得无法控制，几乎不可能调试代码。那时提出了承诺范式来解决这个问题。当应用于WT时，JS也有同样的情况。
- en: Jumpstarting promises
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动承诺
- en: Asynchronous APIs in the Windows library for JS are represented as promises,
    as defined by common JS promises/proposals. One can make his/her code more robust
    by including an error handler, and this is considered to be the most important
    aspect of debugging, and because of this many more JavaScript developers are preferring
    to use promises.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Windows库中为JS提供的异步API表示为承诺，如 common JS 承诺/提案所定义。一个人可以通过包括一个错误处理程序使他的代码更加健壮，这被认为是调试最重要的方面，正因为如此，许多JavaScript开发者更愿意使用承诺。
- en: There is a prerequisite for this jumpstart.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 启动此快速入门的先决条件。
- en: Writing a function that returns a promise
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写一个返回承诺的函数
- en: 'The following is a sample code using which you can develop a good understanding
    on how to implement the promises in WT effectively. Follow these steps:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用该示例代码，你可以有效地理解如何在WT中实现承诺。按照以下步骤操作：
- en: Create a blank Windows Runtime app named `IamPromise`.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`IamPromise`的空白Windows运行时应用。
- en: Add an `input` element.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个`input`元素。
- en: Add a `div` element that displays the result for the URL.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个显示URL结果的`div`元素。
- en: Add styling instructions to `default.css` to add some presentation in the app.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`default.css`中添加样式说明，为应用程序添加一些呈现。
- en: Add a change handler for the `input` element.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`input`元素添加一个更改处理程序。
- en: In the change handler, call `xhr`.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在更改处理程序中调用`xhr`。
- en: Build and debug the app, and then enter a URL.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建和调试应用程序，然后输入一个网址。
- en: Create a WT app in JS in VS2013.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在VS2013中用JS创建一个WT应用。
- en: Add an `input` element.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个`input`元素。
- en: 'Within HTML, create an `input` element using the following code:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在HTML中，使用以下代码创建一个`input`元素：
- en: '[PRE0]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Adding a change handler for input elements
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为输入元素添加一个更改处理程序。
- en: 'Use the following code to understand the `WinJS.Utilitties.Ready` function,
    which is called immediately after the event of DOM content being loaded. This
    is initiated after the page has been parsed, but before all the resources are
    loaded:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下代码了解`WinJS.Utilities.Ready`函数，该函数在DOM内容加载后的立即事件被调用。这是在页面解析后，但在所有资源都被加载之前的：
- en: '[PRE1]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the change handler, call `xhr`.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在更改处理程序中调用`xhr`。
- en: 'Call `xhr` in the change handler by passing it in the URL that the user entered.
    Afterwards, update the `div` element with the result. The `xhr` function is the
    function that returns a promise. We can also use the `then` or `done` function
    of the promise to update the UI (user interface), but there is a difference between
    the usage of `then()` and `done()` within WT specification. The `then()` function
    is executed as soon as the `xhr` function has either returned as a success or
    an error has been made by `XmlHttpRequest`. On the contrary, the `done()` function
    is the same except that it is guaranteed to throw any error that is not handled
    inside the function:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在更改处理程序中通过传递用户输入的URL来调用`xhr`。之后，用结果更新`div`元素。`xhr`函数是返回承诺的函数。我们还可以使用承诺的`then`或`done`函数来更新UI（用户界面），但在WT规范中`then()`和`done()`的使用之间有一个区别。`then()`函数在`xhr`函数成功返回或通过`XmlHttpRequest`产生错误时立即执行。相反，`done()`函数除了保证抛出未在函数内部处理的任何错误外，与`then()`函数相同：
- en: '[PRE2]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: And finally, it is time to test your code. Build and debug the app and then
    enter a URL. If the URL is valid, the resultant `div` element, in our case `ResultDiv`,
    should turn green and display the **Success** message. The code won't do anything
    if a wrong URL is entered.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，是时候测试你的代码了。构建和调试应用程序，然后输入一个URL。如果URL有效，那么在我们这个例子中名为`ResultDiv`的`div`元素应该变绿并显示**成功**消息。如果输入了错误的URL，代码将不会做任何事情。
- en: Tip
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: One thing to keep in mind here is that after you enter the URL, a click may
    be needed outside the input control for the change event to happen. This mostly
    is not the case, but just for a tip, it is a simpler way to get the future value
    of promise.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里要记住的一点是，在输入URL后，可能需要在输入控件外部进行点击，以便发生更改事件。这通常不是情况，但作为一个提示，这是获取promise未来值的一个更简单的方法。
- en: Now, the second best part comes in—handling errors.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，第二好的部分来了——处理错误。
- en: Error handling
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 错误处理
- en: The best part of using promise is that the error handling and debugging becomes
    simpler. By simply adding a few functions, you can not only pin point the location
    of an error in your code, but also get the relevant error log either on the console
    or on the browser. You don't have to add `alert()` all the time to investigate
    the nature and location of the error.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 使用promise的最佳部分是，错误处理和调试变得更加简单。仅仅通过添加几个函数，你不仅可以精确定位代码中的错误位置，还可以在控制台或浏览器上获取相关的错误日志。你不必总是添加`alert()`来调查错误的性质和位置。
- en: 'The same goes for our previous code, in which we can add an error function
    inside `then()`. Remember in the previous code where when an error occurred, no
    error was shown? However, not this time. We will add an error handler, which will
    change the background color of success to red if any error was found:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 同样的规则适用于我们之前的代码，我们可以在`then()`内部添加一个错误函数。记得在之前的代码中，当发生错误时，并没有显示错误吗？但是这次不同了。我们将添加一个错误处理程序，如果发现任何错误，它将把成功的背景颜色改为红色：
- en: '[PRE3]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Build and debug the app and enter the URL. If the URL was correct, success will
    be displayed, otherwise the button will turn red and display an error message.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 构建和调试应用程序，并输入URL。如果URL正确，将显示成功，否则按钮将变红并显示错误消息。
- en: Tip
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Note that in the preceding function, `error(e)`, we concatenated the `e` parameter
    with a message. Use this practice to convert the error into a string, as it will
    show more understandable messages that will help you to debug and remove errors.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在前面的函数中，`error(e)`，我们将`e`参数与一个消息连接起来。采用这种做法将错误转换为字符串，因为它将显示更易理解的消息，这将帮助你调试和排除错误。
- en: Chaining promises using the then() and done() functions
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用then()和done()函数链式调用promise
- en: As with the specifications, you can not only use `then` and `done` functions
    to achieve a single task, but also for making a chain out of it. In such a way,
    you can also create your own conditions within the code that will make your code
    more powerful, optimized, and logical. There are certain limitations though and
    these are also logical. You can add multiple `then()` such as `then().then().then()`,
    but you cannot do something like `then().done().then()`. You may be wondering
    about the logic behind this. With every `then()`, it returns a promise, which
    you can input to the next `then()` function, but when you add `done()`, it returns
    `undefined`, which breaks the logic of a promise, yet you will get nothing out
    of such a chain.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 就像规格一样，你不仅可以使用`then`和`done`函数来完成一个任务，还可以将它作为链式调用。这样，你也可以在代码内部创建自己的条件，使你的代码更加强大、优化和逻辑性。尽管如此，还是有一些限制，这也是逻辑上的限制。你可以添加多个`then()`，比如`then().then().then()`，但你不能这样做：`then().done().then()`。你可能会想知道背后的逻辑。每次`then()`都会返回一个promise，你可以输入到下一个`then()`函数中，但当你添加`done()`时，它返回`undefined`，这打破了promise的逻辑，然而你从这样的链中得不到任何东西。
- en: 'So, in a nutshell, you can do this: `then().then().done()`.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，简而言之，你可以这样做：`then().then().done()`。
- en: 'However, you cannot do this: `then().done().then()`.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，你不能这样做：`then().done().then()`。
- en: 'A generic example of doing such operations can look like this:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这样的操作的通用示例可能如下所示：
- en: '[PRE4]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Also, keep in mind that if you didn't add an error handler to `done()` and the
    operation has an error, it will throw an exception, which will cost the entire
    event loop. You won't be able to catch such an exception in a `try catch` block,
    even if it's written inside the block, and the only way to get it is via `window.onerror()`.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，要记住的是，如果你没有在`done()`中添加错误处理程序，而且操作出现错误，它会抛出异常，这将消耗整个事件循环。即使写在`try catch`块中，你也无法捕获这样的异常，而唯一能获取它的方式是通过`window.onerror()`。
- en: However, this won't be the case when you don't add an error handler with `then()`.
    It won't throw an exception as it's not designed in this way, instead it will
    only return a promise in an error state, which can do more harm for the next inline
    chain or processed output. So add error handlers, whether it's `then()` or `done()`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果你不使用`then()`添加错误处理程序，情况就不会这样。它不会抛出异常，因为它不是这样设计的，相反，它只会返回一个处于错误状态的承诺，这可能会对后续的链式操作或处理输出造成更大的损害。所以，无论是使用`then()`还是`done()`，都要添加错误处理程序。
- en: Example 1A – downloading a web page to a file using two asynchronous functions
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例 1A —— 使用两个异步函数将网页下载到文件中
- en: Using this example, we will be able to download a web page to a file. There
    are several ways to do this. The simplest one is to ask the browser to save the
    file for you, but that will be the browser's ability to act upon our instructions
    and not our code's ability to do so. Also, you can imagine how this simple operation
    can easily explain how to do it by using two asynchronous methods.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个示例，我们将能够将网页下载到文件中。有几种方法可以做到这一点。最简单的方法是让浏览器为您保存文件，但这将是浏览器根据我们的指令行事的能力，而不是我们代码的能力。此外，您可以想象这个简单的操作如何很容易地解释如何使用两个异步方法来完成。
- en: 'Now, have a look at the following code:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，来看看下面的代码：
- en: '[PRE5]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Again, we will now explain which line is doing what.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们现在将解释每一行代码的作用。
- en: 'There are three main methods to emphasize on: `createFileAsync`, `startAsync`,
    and `then`.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 有三个主要方法需要强调：`createFileAsync`、`startAsync`和`then`。
- en: The first `then` function gets the result. This then passes the result to the
    handler function. A `BackgroundDownloader` method creates the download operation
    and `startAsync` creates the routine to initiate the downloads. You can see here
    that `startAsync` is the one that returns a promise, and we chain it with the
    second `then()` by returning the value of `startAsync()` in the first completion.
    The second `then()` is responsible for a completion handler whose parameter contains
    the download operation.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个`then`函数获取结果。然后将结果传递给处理函数。`BackgroundDownloader`方法创建下载操作，`startAsync`创建启动下载的例程。在这里，你可以看到`startAsync`是返回承诺的那个，我们将通过在第一个完成中返回`startAsync()`的值来将其与第二个`then()`链接起来。第二个`then()`负责完成处理程序，其参数包含下载操作。
- en: Example 1B – downloading a web page to a file using startAsync
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例 1B —— 使用 startAsync 将网页下载到文件中
- en: Another ability to chain the `then()` and `done()` functions is to track the
    progress of an asynchronous operation by writing a progress function. Due to this,
    we can not only track the progress but can also obtain a great deal about the
    error conditions by adding an error function.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种链式调用`then()`和`done()`函数的方法是，通过编写进度函数来跟踪异步操作的进度。由于这一点，我们不仅可以跟踪进度，还可以通过添加错误函数来获得很多关于错误条件的信息。
- en: 'In our next example, we will see how to download a web page asynchronously
    to a file, using the `startAsync` function and with the error handler. The output
    of this example will be the same as the previous one, but the mechanism will be
    a bit different:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个示例中，我们将看到如何使用`startAsync`函数和错误处理程序异步地将网页下载到文件中。这个示例的输出将与前一个相同，但机制稍有不同：
- en: '[PRE6]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The only difference in this code is the proper error handler addition, which
    makes the error handling easy and readable.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码的唯一区别是正确添加了错误处理程序，这使得错误处理变得简单且易于阅读。
- en: Summary
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned how promises can be implemented in WinRT. We saw
    how promises evolved in the Windows platform and how it's contributing to different
    Windows-based devices. We also saw how it helps Windows-based gaming consoles
    and in the creation of Windows-based apps for Windows Store.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了承诺如何在WinRT中实现。我们看到了承诺在Windows平台上的演变以及它如何为不同的Windows设备做出贡献。我们还看到了它如何帮助Windows游戏机以及为Windows商店创建基于Windows的应用程序。
- en: It's the adaptability of promises that has led to it finding its place in all
    the major leading technologies. Even technology giants such as Microsoft couldn't
    neglect its existence and are able to give full attention and scope in its present
    and upcoming technologies.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 正是承诺的适应性使其在所有主要的前沿技术中找到了一席之地。即使是像微软这样的技术巨头也无法忽视它的存在，并且能够在当前和未来的技术中给予充分的关注和范围。
- en: In the next chapter, we will learn how promises are being implemented in one
    of the fastest growing server-side JavaScript, the Node.js.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习承诺是如何在增长最快的服务器端JavaScript之一——Node.js中实现的。
