["```js\n(function () {\n  var addTwoNumbers = function (x, y) {\n    return x+y;\n  };\n\n})();\n```", "```js\ndescribe('Calculator', function () {\n  it('Results will be 20 for 10 + 10', function () {\n    expect(addTwoNumbers(10,10)).toBe(20);\n  });\n});\n```", "```js\ngrunt.initConfig({\n  karma: {\n    unit: {\n      options: {\n        frameworks: ['jasmine'],\n        singleRun: true,\n        browsers: ['PhantomJS'],\n        files: [\n          './wwwroot/js/**/*.js',\n          './wwwroot/tests/**/*.test.js'\n\n        ]\n      }\n    }\n  }\n});\n```", "```js\ngrunt.loadNpmTasks('grunt-karma');\n```", "```js\ngrunt.registerTask('test', ['karma']);\n```", "```js\nwindow.product = window.product || {};\n\n(function () {\n  var saveProduct = function () {\n    var prodCode = document.getElementById('txtProdCode').value;\n    var prodUnitPrice = document.getElementById('txtProdUnitPrice').value;\n    var prodExpiry = document.getElementById('txtProdExpiry').value;\n    var prodQuantity = document.getElementById('txtProdQuantity').value;\n    var totalPrice = prodUnitPrice * prodQuantity;\n    document.getElementById('totalAmount').innerHTML = totalPrice;\n  };\n\n  window.product.init = function () {\n    document.getElementById('save').addEventListener('click', saveProduct);\n  };\n\n})();\n```", "```js\nsaveProduct() method that reads the HTML elements and calculates the total price based on the quantity and unit price entered. On the page initialization, we will register the Save button's click event handler that calls the saveProduct() method and calculate the total price.\n```", "```js\ndescribe('Product', function () {\n\n  // inject the HTML fixture for the tests\n  beforeEach(function () {\n    var fixture = '<div id=\"fixture\">'+\n      '<input id=\"txtProdCode\" type=\"text\">' +\n      '<input id=\"txtProdExpiry\" type=\"text\">' +\n      '<input id=\"txtProdUnitPrice\" type=\"text\">' +\n      '<input id=\"txtProdQuantity\" type=\"text\">' +\n      '<input id=\"save\" type=\"button\" value=\"Save\">' +\n      'Total Amount: <span id=\"totalAmount\" /></div>';\n\n    document.body.insertAdjacentHTML(\n      'afterbegin',\n      fixture);\n  });\n\n  // remove the html fixture from the DOM\n  afterEach(function () {\n    document.body.removeChild(document.getElementById('fixture'));\n  });\n\n  // call the init function of calculator to register DOM elements\n  beforeEach(function () {\n    window.product.init();\n  });\n\n  it('Expected result should be 0 if the Unit price is not valid', function () {\n    document.getElementById('txtProdUnitPrice').value = 'a';\n    document.getElementById('txtProdQuantity').value = 2;\n    document.getElementById('save').click();\n    expect(document.getElementById('totalAmount').innerHTML).toBe('0');\n  });\n\n  it('Expected result should be 0 if the Product Quantity is not valid', function () {\n    document.getElementById('txtProdUnitPrice').value = 30;\n    document.getElementById('txtProdQuantity').value = 'zero';\n    document.getElementById('save').click();\n    expect(document.getElementById('totalAmount').innerHTML).toBe('0');\n  });\n\n});\n```", "```js\nprodUnitPrice = isNaN(prodUnitPrice) ? 0 : prodUnitPrice;\nprodQuantity = isNaN(prodQuantity) ? 0 : prodQuantity;\n```", "```js\n\"knockout\": \"3.4.0\",\n```", "```js\nvar ProductViewModel = function () {\n\n  this.prodCode = ko.observable('');\n  this.prodUnitPrice = ko.observable(0);\n  this.prodQuantity = ko.observable(0);\n  this.prodExpiry = ko.observable('');\n  this.prodTotalAmount =0;\n\n  ko.applyBindings(this);\n\n  this.saveProduct=function(){\n    var unitPrice = this.prodUnitPrice();\n    var quantity = this.prodQuantity();\n    var total = unitPrice * quantity;\n    this.prodTotalAmount = total;\n\n    //call some service to save product\n  }\n\n};\n```", "```js\nProductViewModel class that contains a few properties, each property is assigned to ko.observable().\n```", "```js\n0 in the following statement will set the control value 0 when the control binding is done:\n```", "```js\nthis.prodUnitPrice = ko.observable(0)\n```", "```js\nProduct code is: <span data-bind=\"text: prodCode\"></span>\n```", "```js\n<body>\n  <div>\n    <label> Product Code: </label>\n    <input type=\"text\" data-bind=\"value: prodCode\" />\n  </div>\n  <div>\n    <label> Product Unit Price: </label>\n    <input type=\"text\" data-bind=\"value: prodUnitPrice\" />\n  </div>\n  <div>\n    <label> Product Expiry: </label>\n    <input type=\"text\" data-bind=\"value: prodExpiry\" />\n  </div>\n  <div>\n    <label> Product Quantity: </label>\n    <input type=\"text\" data-bind=\"value: prodQuantity\" />\n  </div>\n  <div>\n    <input id=\"btnSaveProduct\" type=\"button\" value=\"Save Product\" />\n  </div>\n  <script src=\"img/knockout.js\"></script>\n  <script src=\"img/ProductViewModel.js\"></script>\n  <script>\n    (function () {\n      var prod = new ProductViewModel();\n      document.getElementById(\"btnSaveProduct\").onclick = function () { prod.saveProduct(); };\n    })();\n  </script>\n</body>\n```", "```js\n/*\nThis file in the main entry point for defining grunt tasks and using grunt plugins.\n*/\nmodule.exports = function (grunt) {\n  grunt.initConfig({\n    karma: {\n      unit: {\n        options: {\n          frameworks: ['jasmine'],\n          singleRun: true,\n          browsers: ['PhantomJS'],\n          files: [\n            './wwwroot/lib/knockout/dist/knockout.js',\n            './wwwroot/js/ProductViewModel.js',\n            './wwwroot/test/**/product.test.js'\n          ]\n        }\n      }\n    }\n  });\n\n  grunt.loadNpmTasks('grunt-karma');\n  grunt.registerTask('test', ['karma']);\n};\n```", "```js\ndescribe('Product', function () {\n\n  it('Expected Total Amount should be 600', function () {\n    var product = new ProductViewModel();\n    product.prodQuantity(3);\n    product.prodUnitPrice(200);\n    product.saveProduct();\n    expect(product.prodTotalAmount).toBe(600);\n  });\n});\n```", "```js\nchrome.exe â€“ remote-debugging-port=9222\n\n```", "```js\nThe fourth pane is the Call stack and Breakpoints. Call stack shows the chain of function calls that are executed and it is helpful to understand the code-execution flow. For example, if an A() method calls a B() method, and the B() method calls a C() method, it shows the complete flow of execution from the A() method to the C() method.\n```", "```js\n//# sourceMappingURL=http://localhost:12144/todosapp/apps/createTodo.component.js.map\n```"]