- en: Chapter 4. JavaScript for Visualization
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章．用于可视化的JavaScript
- en: In [Chapter 2](ch02.html "Chapter 2. JavaScript and HTML5 for Visualizations"),
    *JavaScript and HTML5 for Visualizations*, we looked at the advantages offered
    by building our visualizations using scalable vector graphics. It should, however,
    have been clear that building SVGs by manipulating the underlying XML is a frustrating
    and time consuming exercise. Although there are countless XML manipulation tools,
    it would be nice to take advantage of the power of an API which is specifically
    designed for building SVGs instead of a more general language.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第2章](ch02.html "第2章．用于可视化的JavaScript和HTML5")《JavaScript和HTML5用于可视化》中，我们探讨了使用可缩放矢量图形构建我们可视化所带来的优势。然而，构建SVG通过操作底层的XML是一个令人沮丧且耗时的练习，尽管有许多XML操作工具，但利用专门为构建SVG设计的API而不是更一般的语言会更好。
- en: There are a number of JavaScript libraries that have been created for the manipulation
    of SVGs. svg.js ([http://www.svgjs.com/](http://www.svgjs.com/)) and Raphaël ([http://raphaeljs.com/](http://raphaeljs.com/)),
    both deserve mentions as being excellent tools for drawing. The demos on the Raphaël
    website are particularly impressive. d3.js offers functionality designed specifically
    for visualizations and we'll look at that too.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多JavaScript库是为了操作SVG而创建的。svg.js（[http://www.svgjs.com/](http://www.svgjs.com/)）和Raphaël（[http://raphaeljs.com/](http://raphaeljs.com/)），都值得提及，因为它们是绘制svg图形的优秀工具。Raphaël网站上的演示特别令人印象深刻。d3.js提供了专门为可视化设计的功能，我们也会看看那个。
- en: Raphaël
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Raphaël
- en: 'To draw a simple rectangle making use of**Raphaël** is much more comfortable
    than building the same rectangle in XML. The library can be included either from
    the disc or from a CDN such as CloudFlare, as shown in the following code:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 利用**Raphaël**绘制简单的矩形比用XML构建相同的矩形要方便得多。这个库可以从硬盘或者像CloudFlare这样的CDN中包含，如下面的代码所示：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We can draw any shape in the following manner:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以用以下方法绘制任何形状：
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This code finds the element with an ID of `visualization` and appends an SVG
    to it with a dimension of 320 x 200 pixels. It then inserts a new rectangle at
    `(50, 20),` with width `50` and height `150`.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码找到ID为`visualization`的元素，并向其添加一个320x200像素的SVG。然后，它在`(50, 20)`处插入一个新的矩形，宽度为`50`，高度为`150`。
- en: 'If we wanted to create a simple column graph with Raphaël, it would not be
    difficult. Let''s give it a shot. The first thing we''ll need is some data. We
    can use a JavaScript array for now, but in the real world this information could
    be retrieved from a web service in either JSON or XML form. In this example, we''ll
    pick some months and the associated value, as shown in the following code:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想用Raphaël创建一个简单的柱状图，那将不会很难。让我们试一试。我们现在需要的第一件事是些数据。我们可以先用JavaScript数组，但在现实世界中，这些信息可以从Web服务中以JSON或XML的形式获取。在这个例子中，我们将选择一些月份及其相关值，如下面的代码所示：
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, let''s update the function we used above to draw rectangles to deal with
    data values. First, we''ll change the method signature, as shown in the following
    code:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们更新上面使用的用于绘制矩形的函数来处理数据值。首先，我们将更改方法签名，如下面的代码所示：
- en: '[PRE3]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This function takes in SVG on which to draw, the current item, and a maximum
    value that is used to calculate the appropriate height. In the body of the function,
    we''ll start by calculating the bar height, as shown in the following code:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数接收要绘制的SVG、当前项目和一个用于计算适当高度的最大值。在函数体中，我们将首先计算条形图的高度，如下面的代码所示：
- en: '[PRE4]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We''ve hard coded the maximum height at 500 px, and each bar is simply a percentage
    of that height equal to the item''s value as a percentage of the maximum. We''ll
    use that value to draw the bar, as shown in the following code:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们硬编码了最大高度为500像素，每个条形图仅仅是该高度的百分比，等于项目的值占最大值的百分比。我们将使用这个值来绘制条形图，如下面的代码所示：
- en: '[PRE5]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The rectangle is offset based on which column it is avoiding overlapping rectangles.
    We set the color to be a function of the item value so that the color varies by
    height.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 矩形根据它所在的列来偏移，以避免重叠的矩形。我们将颜色设置为项目值的函数，以便颜色随高度变化。
- en: 'The function is called by passing each one of our data elements into it sequentially:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数通过将我们每一个数据元素依次传递给它来调用：
- en: '[PRE6]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here, we first calculate the maximum value from the array. Then, call the `drawGraphColumn()`
    function we defined above for each element. Looping over the data array is done
    using jQuery''s `each` operator which applies the given function to each element
    in the array. The resulting graph looks like the following:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们首先从数组中计算最大值。然后，为数组中的每个元素调用我们上面定义的`drawGraphColumn()`函数。通过jQuery的`each`操作符遍历数据数组，该操作符将给定的函数应用于数组中的每个元素。生成的图表如下所示：
- en: '![Raphaël](img/6542OS_04_01.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![Raphaël](img/6542OS_04_01.jpg)'
- en: Raphaël is a general purpose SVG library. This means that apart from being suited
    to building visualizations, it can be used to create more generic drawings. In
    the same way that we were looking for an API for manipulating SVGs, which was
    better suited than manipulating XML by hand, it would be nice to have a library
    which is targeted at building visualizations. d3.js is a library which is specifically
    designed to make building visualizations using SVG easier.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Raphaël是一个通用SVG库。这意味着除了适合构建可视化，它还可以用来创建更通用的绘图。正如我们寻找一个比手动操作XML更合适的SVG操作API一样，拥有一个针对构建可视化而设计的库会很好。d3.js是一个专门设计用来简化SVG构建可视化的库。
- en: d3.js
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: d3.js
- en: '**d3.js** brings a number of functions and a coding style that makes creating
    even simple graphs like the one above simpler. Let''s recreate the above graph
    using d3 and see how it differs. The first thing to do is introduce an SVG element
    to the page. With Raphaël, we did this using the constructor; in d3, we''ll append
    an SVG element explicitly, as shown in the following code:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**d3.js**带来了一系列函数和编程风格，使得即使是上面的那种简单图表的创建也变得更简单。让我们用d3重新创建上面的图表，看看它们的区别。首先需要做的是在页面中引入一个SVG元素。在Raphaël中，我们使用构造函数来完成这个操作；在d3中，我们将显式地添加一个SVG元素，如下面的代码所示：'
- en: '[PRE7]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Immediately, you'll see that the style of the JavaScript used differs greatly
    from Raphaël. d3 relies heavily on the use of method chaining. If you're new to
    this concept, it is quick to pick up. Each call to a method performs some action,
    then returns an object, and the next method call operates on this object. So,
    in this case, the `select` method returns the `div` with the `ID` of `visualization`.
    Calling `append` on the selected `div` adds an SVG element and then returns it.
    Finally, the `attr` methods set a property inside the object and then return the
    object.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 立即，你会发现使用的JavaScript风格与Raphaël有很大的不同。d3非常依赖方法链的使用。如果你对这个概念还比较陌生，很快就能掌握。每个方法调用执行一些操作，然后返回一个对象，下一个方法调用在这个对象上执行。所以，在这个例子中，`select`方法返回了ID为`visualization`的`div`。在选定的`div`上调用`append`方法添加一个SVG元素，然后返回它。最后，`attr`方法在对象内部设置一个属性，然后返回该对象。
- en: At first, method chaining may seem odd, but as we move on you'll see that it
    is a very powerful technique, and cleans up the code considerably. Without method
    chaining, we end up with a lot of temporary variables.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 起初，方法链可能看起来很奇怪，但随着我们的进展，你会发现它是一个非常强大的技术，能显著清理代码。如果没有方法链，我们将产生很多临时变量。
- en: 'Next, we need to find the maximum element in the data array. In the previous
    example, we used a jQuery `each` loop to find that element. d3 has built in array
    functions which make this much cleaner, as shown in the following code:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要在数据数组中找到最大的元素。在之前的示例中，我们使用了jQuery的`each`循环来找到这个元素。d3拥有内置的数组函数，使得这个过程变得更为简洁，如下面的代码所示：
- en: '[PRE8]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: There are similar functions for finding minimums and means. None of the functions
    are anything you couldn't get by using a JavaScript utility library, such as underscore.js
    or lodash. However, it is convenient to make use of the built-in versions.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 寻找最小值和平均值也有类似的功能。这些函数没有任何是你在使用JavaScript工具库，如underscore.js或lodash时得不到的。然而，使用内置版本是很方便的。
- en: 'The next pieces we make use of are d3''s scaling functions, as shown in the
    following code:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来要使用的是d3的缩放函数，如下面的代码所示：
- en: '[PRE9]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Scaling functions serve to map from one dataset to another. In our case, we''re
    mapping from the values in our data array to the coordinates in our SVG. We use
    two different scales here: linear and ordinal. The linear scale is used to map
    a continuous domain to a continuous range. The mapping will be done linearly,
    so if our domain contained values between `0` and `10`, and our range value ranges
    between `0` and `100`, then a value of `6` would map to `60`, `3` to `30,` and
    so forth. It seems trivial, but with more complicated domains and ranges, scales
    are very helpful. As well as linear scales, there are power and logarithmic scales
    which may fit your data better.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 缩放函数用于将一个数据集映射到另一个数据集。在我们的案例中，我们将从我们数据数组中的值映射到我们的SVG中的坐标。我们在这里使用了两种不同的比例尺：线性和序数。线性比例尺用于将连续域映射到连续范围。映射将线性完成，所以如果我们的域包含`0`到`10`之间的值，而我们的范围值在`0`到`100`之间，那么值`6`将映射到`60`，值`3`将映射到`30`，依此类推。这看起来很简单，但是在更复杂的域和范围中，比例尺非常有帮助。除了线性比例尺之外，还有幂和对数比例尺，这些可能更适合您的数据。
- en: 'In our example data, our `y` values are not continuous; they''re not even numeric.
    For this case, we can make use of an ordinal scale, as shown in the following
    code:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们示例数据中，我们的`y`值不是连续的，甚至不是数字。在这种情况下，我们可以使用序数比例尺，如下面的代码所示：
- en: '[PRE10]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Ordinal scales map a discrete domain into a continuous range. Here, `domain`
    is the list of months and the range the width of our SVG. You'll note that instead
    of using `range` we use `rangeBands`. Range bands split the range up into chunks,
    each to which each range item is assigned. So, if our domain was `{May, June}`
    and the range `0` to `100`, then May onwards we would receive a band from `0`
    to `49,` and June from `50` to `100` would be `june`. You'll also note that `rangeBands`
    takes an additional parameter; in our case `0.1`. This is a padding value that
    generates a sort of no man's land between each band. This is ideal for creating
    a bar or column graph, as we may not want the columns touching. The padding parameter
    can take a value between `0` and `1` as a decimal representation of how much of
    the range should be reserved for padding. A value of `0.25` would reserve 25 percent
    of the range for padding.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 序数比例尺将离散域映射到连续范围。在这里，`domain`是月份列表，范围是我们SVG的宽度。你会注意到我们没有使用`range`，而是使用了`rangeBands`。范围带将范围分成块，每个块分配一个范围项目。所以，如果我们的域是`{五月，六月}`，范围是`0`到`100`，那么五月起我们将收到从`0`到`49`的带，六月从`50`到`100`的带将是`june`。你还会注意到`rangeBands`有一个额外的参数；在我们的例子中是`0.1`。这是一个填充值，生成每块之间的某种无人区。这对于创建柱状图或柱状图来说很理想，因为可能不希望柱子接触。填充参数可以取`0`到`1`之间的值，作为十进制表示保留多少范围用于填充。值为`0.25`将保留25％的范围用于填充。
- en: 'There are also a family of built-in scales that deal with providing colors.
    Selecting colors for your visualization can be challenging, as the colors have
    to be far enough apart to be discernible. If you''re color challenged like me,
    then the scales `category10`, `category20`, `category20b`, and `category20c` may
    be for you. You can declare a color scale, as shown in the following code:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些内置的比例尺用于提供颜色。为您的可视化选择颜色可能具有挑战性，因为颜色必须相隔足够远以被人辨认。如果你像我一样对颜色有挑战，那么比例尺`category10`、`category20`、`category20b`和`category20c`可能适合你。您可以声明一个颜色比例尺，如下面的代码所示：
- en: '[PRE11]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The previous code will assign a different color to each month out of a set of
    10 pre-calculated possible colors.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码将为10种预计算的可能颜色中的每一个月分配一个不同的颜色。
- en: 'Finally, we need to actually draw our graph, as shown in the following code:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们实际上需要绘制我们的图表，如下面的代码所示：
- en: '[PRE12]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We select all of the `.bar` elements inside the graph using `selectAll`. Hang
    on! There aren't any elements inside the graph that match the `.bar` selector.
    Typically, `selectAll` will return a collection of elements matching the selector
    just as the `$` function does in jQuery. In this case, we're using `selectAll`
    as a short hand method of creating an empty d3 collection which has a `data` method
    and can be chained.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`selectAll`选择图表内的所有`.bar`元素。等等！图表内没有与`.bar`选择器匹配的元素。通常，`selectAll`将返回与选择器匹配的元素集合，就像jQuery中的`$`函数一样。在这种情况下，我们使用`selectAll`作为创建一个空的d3集合的简写方法，该集合有一个`data`方法并且可以被链式调用。
- en: We next specify a set of data to union with the data from the existing selection
    of elements. d3 operates on collection objects without using looping techniques.
    This allows for a more declarative style of programming, but can be difficult
    to grasp immediately. In effect, we're creating a union of two sets of data, the
    currently existing data (found using `selectAll`), and the new data (provided
    by the `data` function). This method of dealing with data allows for easy updates
    to the data elements, should further elements be added or removed later.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要指定一组数据与现有元素的数据集合进行联合。d3操作集合对象，不使用循环技术。这使得编程风格更加声明式，但可能一下子不容易掌握。实际上，我们正在创建两个数据集的并集，现有数据（通过`selectAll`找到）和新数据（由`data`函数提供）。这种处理数据的方法使得数据元素的更新变得容易，如果后来又增加了或移除了元素。
- en: 'When new data elements are added you can select just those elements by using
    `enter`(). This prevents repeating actions on existing data. You don''t need to
    redraw the entire image, just the portions that have been updated with new data.
    Equally, if there are elements in the new dataset which didn''t appear in the
    old one, then they can be selected with `exit()`. Typically, you want to just
    remove those elements which can be done by the following code:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当新的数据元素被添加时，你可以通过使用`enter`()只选择那些元素。这可以防止对现有数据执行重复操作。你不需要重新绘制整个图像，只需要绘制用新数据更新过的部分。同样，如果新数据集中有在旧数据集中没有出现的元素，它们可以通过`exit()`被选择。通常，你只需要移除那些元素，如下面的代码所示：
- en: '[PRE13]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'When we create elements using the newly generated dataset, the data elements
    will actually be attached to the newly created DOM elements. Creating the elements
    involves calling `append`, as shown in the following code:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用新生成的数据集创建元素时，数据元素实际上会被附加到新创建的DOM元素上。创建元素的过程涉及到调用`append`，如下面的代码所示：
- en: '[PRE14]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The following diagram shows how `data()` works with new and existing dataset:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的图表展示了`data()`如何与新旧数据集一起工作：
- en: '![d3.js](img/6542OS_04_02.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![d3.js](img/6542OS_04_02.jpg)'
- en: You can see in the previous code how useful method chaining has become. It makes
    the code much shorter and more readable than assigning a series of temporary variables,
    or passing the results into standalone methods. The scales also come into their
    own here. The x coordinate is found simply by scaling the month we have using
    the ordinal scale. Because that scale takes into account the number of elements
    as well as the padding, nothing more complicated is needed.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在之前的代码中看到方法链变得多么有用。它使得代码变得更短，比分配一系列临时变量或把结果传给独立方法更易读。比例在这里也显示出了其独特之处。x坐标简单地通过使用序数比例缩放我们拥有的月份来找到。因为这种比例考虑了元素的个数以及填充，所以不需要更复杂的东西。
- en: 'They coordinate is similarly found using previously defined `yScale`. Because
    the origin in an SVG is in the top left, we have to take the inverse of the scale
    to calculate the height. Again this is a place where we wouldn''t generally be
    using a constant except for the brevity of our example. The width of the column
    is found by asking the `xScale` for the width of the bands. Finally, we set the
    color based on the color scale so it appears like the following graph:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 它们的坐标同样是通过之前定义的`yScale`找到的。因为SVG的原点在左上角，我们必须取比例的逆来计算高度。再次强调，这个地方我们通常不会使用常数，除非是为了我们例子的简洁。柱状图的宽度是通过询问`xScale`带宽得到的。最后，我们根据颜色比例设置颜色，使其看起来像下面的图表：
- en: '![d3.js](img/6542OS_04_03.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![d3.js](img/6542OS_04_03.jpg)'
- en: This d3 version of the graph is actually far more capable than the Raphaël version.
    We eliminated a lot of the magic numbers that were present in the Raphaël through
    the use of scales.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这个d3版本的图表实际上比Raphaël版本的功能要强大得多。我们通过使用比例消除了Raphaël中存在的大量魔法数字。
- en: Let's continue to enhance our graph and explore some of the other features of
    d3.js.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续增强我们的图表，并探索d3.js的其他一些功能。
- en: Custom color scales
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义颜色比例
- en: The d3 graph we generated above is very colorful, since we made made use of
    one of the built in color scales. However, most of the time you must have least
    some thematic consistency in visualizations. You can achieve this consistency
    across visualizations by leveraging custom scales.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们上面生成的d3图表颜色非常丰富，因为我们利用了内置的颜色比例之一。然而，大多数时候你的视觉化图表必须有一定的主题连贯性。你可以通过利用自定义比例来实现这种连贯性。
- en: 'Let''s start with a simple example: alternating color scales. In order to make
    our new color scale, a drop in replacement for the existing `category10` scale
    we need to use a little bit of JavaScript fun to inject a new scale function into
    d3\. We start with attaching the function to d3''s scale namespace, as shown in
    the following code:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从一个简单的例子开始：交替颜色刻度。为了创建我们新的颜色刻度，作为现有`category10`刻度的替换，我们需要使用一点JavaScript乐趣来向d3中注入一个新的刻度函数。我们首先将函数附加到d3的刻度命名空间，如下面的代码所示：
- en: '[PRE15]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'JavaScript allows for monkey patching of objects so this function will actually
    show up as being part of d3\. We''ll start implementing the function by setting
    up the domain and range. We define the `domain` and `range` functions which serve
    as getters and setters for the domain and range:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript允许对对象进行猴子补丁（monkey patching），所以这个函数实际上会显示为是d3的一部分。我们将通过设置域和范围开始实现函数。我们定义了`domain`和`range`函数，它们作为域和范围的获取器和设置器：
- en: '[PRE16]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Finally, we''ll set up the mapping function which is called when using the
    scale, as shown in the following code:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将设置一个映射函数，该函数在使用刻度时被调用，如下面的代码所示：
- en: '[PRE17]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This scale is applied by the following code:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这个刻度是通过以下代码应用的：
- en: '[PRE18]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This results in a graph which appears more consistent and is shown in the following
    graph:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这导致了一个看起来更一致的图表，如下面的图表所示：
- en: '![Custom color scales](img/6542OS_04_04.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![自定义颜色刻度](img/6542OS_04_04.jpg)'
- en: 'I picked the simplest condition on which to customize our scale, but more complicated
    and informative scales can be used. A scale which uses a threshold is shown in
    the following graph:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我选择了最简单的条件来定制我们的刻度，但可以使用更复杂和信息量更大的刻度。一个使用阈值的刻度在以下图表中显示：
- en: '![Custom color scales](img/6542OS_04_05.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![自定义颜色刻度](img/6542OS_04_05.jpg)'
- en: This is easily done by altering the `scale` function and passing the value instead
    of the key (month) into the function.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过更改`scale`函数，并将值（而不是键（月份））传递给函数来轻松完成。
- en: Labels and axes
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标签和坐标轴
- en: Up until now, we've build the graphs without much attention to what we're graphing.
    It would be great to put some labels on the graph, so people can decode our data
    with ease. Fortunately d3 provides an `axis()` function which makes adding the
    axis a snap.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们构建图表时并没有太关注我们正在绘制的数据。如果在图表上加上一些标签，人们就可以轻松地解读我们的数据，那就太好了。幸运的是，d3提供了一个`axis()`函数，使得添加坐标轴变得非常简单。
- en: 'We''ll start with the x axis, as shown in the following code:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从x轴开始，如下面的代码所示：
- en: '[PRE19]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: We start here by using the `axis` function to create an axis. We pass in our
    `xScale` to give it a hint about where the ticks on the scale should be placed.
    We next append a `g` element to our graph. `g` is an SVG element which acts as
    a container to hold other elements. You can place any other shape inside the element
    `g`, and then perform transformations on them as a whole. We do just that in the
    next step. The axis is, by default, at the top of the graph, so we shift it down
    and slightly to the right to better line up. The `text-anchor` property sets where
    the x coordinate of the text should be anchored. By default it is left, but as
    we have the middle of each bar we set `text-align:middle`. Finally, we pass in
    the `xAxis`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先使用`axis`函数创建一个坐标轴。我们将`xScale`传递给它，给它一个提示，关于刻度上的刻度应该放置在哪里。接下来，我们在图表中添加一个`g`元素。`g`是一个SVG元素，它作为一个容器来持有其他元素。你可以在`g`元素内放置任何其他形状，然后作为一个整体对它们进行变换。我们接下来就是这样做。默认情况下，坐标轴位于图表的顶部，所以我们把它向下和稍微向右移动，以更好地对齐。`text-anchor`属性设置了文本的x坐标应该固定的位置。默认情况下它是左边的，但由于我们每个条形的中间位置，我们设置`text-align:middle`。最后，我们传递了`xAxis`。
- en: 'The `yAxis` is added just as easily with the following code:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`yAxis`通过以下代码添加起来也同样简单：'
- en: '[PRE20]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The translation here is a bit more complex, and we''re just accounting for
    the fact that we gave the scale the left orientation, which causes it to be drawn
    left of the minimum scale value. As our minimum scale value is `0`, it is drawn
    off screen, as shown in the following graph:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的翻译要复杂一些，我们只是说明了我们给刻度提供了左方向，这使得它被绘制在最小刻度值的左侧。因为我们的最小刻度值是`0`，所以它被绘制在屏幕外，如下面的图表所示：
- en: '![Labels and axes](img/6542OS_04_06.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![标签和坐标轴](img/6542OS_04_06.jpg)'
- en: We've managed to add axis and labels in a matter of a few lines of code. With
    a more general SVG library, this would take a significant amount of work. There
    are a lot of configuration options for the axis function too. You can set the
    number of ticks, the labels, and the format of the ticks.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们设法在几行代码内添加了坐标轴和标签。使用更通用的SVG库，这将需要大量的工作。坐标轴函数也有许多配置选项。您可以设置刻度的数量、标签以及刻度的格式。
- en: Summary
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: While we've looked at a great deal of d3, we've only just scratched the surface
    of what d3.js can do. It is a large and powerful library. There are many books
    written on the subject of d3, so we can't cover it all. A great resource for d3
    is Swizec Teller's book *Data Visualization with d3.js, Packt Publishing*. There
    are tons of additional functions that we'll uncover, as we develop some of the
    visualizations in the rest of the book. We'll also visit some further applications
    of the functions presented in this chapter.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们已经接触了不少d3的内容，但我们对d3.js能做的很多事情还只是略知一二。它是一个庞大而强大的库。关于d3的主题有很多书，所以我们不可能全部覆盖。关于d3的一个很好的资源是Swizec
    Teller的书籍《*使用d3.js进行数据可视化，Packt出版社*》。在我们开发书中剩余部分的一些可视化时，我们会发现许多额外的功能。我们还将访问本章中介绍的一些函数的进一步应用。
