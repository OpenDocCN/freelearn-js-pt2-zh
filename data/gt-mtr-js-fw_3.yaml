- en: Chapter 3. Why Meteor Rocks!
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。为什么Meteor如此出色！
- en: Meteor is a disruptive (in a good way!) technology. It enables a new type of
    web application, using the **Model View View-Model** (**MVVM**) design pattern.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Meteor是一种具有颠覆性（以一种好的方式！）的技术。它使一种新类型的网络应用程序成为可能，这种应用程序采用了**模型-视图-视图模型**（**MVVM**）设计模式。
- en: This chapter explains how web applications have changed, why it matters, and
    how Meteor specifically enables modern web apps through MVVM.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这一章解释了网络应用程序是如何改变的，为什么这很重要，以及Meteor是如何通过MVVM特别地使现代网络应用程序成为可能的。
- en: 'By the end of this chapter, you will have learned:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章末尾，你将学到：
- en: What a modern web application is
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现代网络应用程序是什么样的
- en: What MVVM means, and how it's different
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MVVM 意味着什么，以及它有何不同
- en: How Meteor uses MVVM to create modern web applications
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用Meteor的MVVM创建现代网络应用程序
- en: Templating inside of Meteor – starting to use MVVM
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Meteor中使用模板——开始使用MVVM
- en: Modern web applications
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 现代网络应用程序
- en: Our world is changing.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的世界正在改变。
- en: With continual advancements in display, computing, and storage capacities, what
    wasn't possible just a few years ago is now not only possible, but critical to
    the success of a good application. The Web in particular has undergone significant
    change.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 随着显示、计算和存储能力的不断进步，几年前还不可能实现的事情现在不仅成为可能，而且对于优秀的应用程序的成功至关重要。特别是网络领域经历了显著的变化。
- en: The origin of the web app (client/server)
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络应用程序的起源（客户端/服务器）
- en: From the beginning, web servers and clients have mimicked the **dumb terminal**
    approach to computing, where a server with significantly more processing power
    than a client will perform operations on data (writing records to a database,
    math calculations, text searches, and so on), transform the data into a readable
    format (turn a database record into HTML, and so on), and then serve the result
    to the client, where it's displayed for the user.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 从一开始，网络服务器和客户端就模仿了**傻瓜终端**的计算方式，其中服务器具有比客户端多得多的处理能力，对数据执行操作（例如将记录写入数据库、进行数学计算、文本搜索等），将数据转换为可读格式（例如将数据库记录转换为HTML等），然后将结果服务于客户端，由用户显示使用。
- en: 'In other words, the server does all the work, and the client acts as more of
    a display, or dumb terminal. The design pattern for this is called…wait for it…the
    **client/server** design pattern:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，服务器做所有的工作，而客户端更多的是作为一个显示器，或者说是傻瓜终端。这种设计模式的名称是……等一下……叫做**客户端/服务器**设计模式：
- en: '![The origin of the web app (client/server)](img/0823OS_03_01.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![网络应用程序的起源（客户端/服务器）](img/0823OS_03_01.jpg)'
- en: This design pattern, borrowed from the dumb terminals and mainframes of the
    60s and 70s, was the beginning of the Web as we know it, and has continued to
    be *the* design pattern we think of, when we think of the Internet.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这种设计模式源自20世纪60年代和70年代的傻瓜终端和大中型计算机，正是它促成了我们所知的网络的诞生，并且一直是我们思考互联网时所想到的设计模式。
- en: The rise of the machines (MVC)
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 机器的崛起（MVC）
- en: Before the Web (and ever since), desktops were able to run a program such as
    a spreadsheet or a word processor without needing to talk to a server. This type
    of application could do everything it needed to, right there on the big and beefy
    desktop machine.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在网络出现之前（以及自那以后），桌面能够运行如电子表格或文字处理程序等应用程序，而无需与服务器进行通信。这类应用程序能够在其强大的桌面环境中完成所需的一切。
- en: During the early 90s, desktop computers got faster and better. Even more and
    more beefy. At the same time, the Web was coming alive. People started having
    the idea that a hybrid between the beefy desktop application (a **fat app**) and
    the connected client/server application (a **thin app**) would produce the best
    of both worlds. This kind of hybrid app – quite the opposite of a dumb terminal
    – was called a **smart app**.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在20世纪90年代初，桌面计算机变得更快更好。越来越多地配置了高性能的计算机。同时，网络也开始兴起。人们开始认为将高性能桌面应用程序（也就是**胖应用**）与网络客户端/服务器应用程序（也就是**瘦应用**）相结合，可以产生最好的效果。这种类型的应用程序——与傻瓜终端相反——被称为**智能应用**。
- en: There were many business-oriented smart apps created, but the easiest examples
    are found in computer games. **Massively Multiplayer Online games** (**MMOs**),
    first-person shooters, and real-time strategies are smart apps where information
    (the data **model**) is passed between machines through a server. The client in
    this case does a *lot* more than just display the information. It performs most
    of the processing (or **controls**) and transforms the data into something to
    be displayed (the **view**).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了许多面向商业的智能应用，但最简单的例子可以在计算机游戏中找到。**大型多人在线游戏**（**MMOs**）、第一人称射击游戏和实时战略游戏都是智能应用，在这些应用中，信息（数据**模型**）通过服务器在机器之间传递。在这种情况下，客户端做的不仅仅是显示信息。它执行大部分处理（或**控制**）并将数据转换为需要显示的内容（**视图**）。
- en: This design pattern is simple, but very effective. It's called the **Model View
    Controller** (**MVC**) pattern.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这种设计模式很简单，但非常有效。它被称为**模型-视图-控制器**（**MVC**）模式。
- en: '![The rise of the machines (MVC)](img/0823OS_03_02.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![机器的崛起（MVC）](img/0823OS_03_02.jpg)'
- en: The model is all the data. In the context of a smart app, the model is provided
    by a server. The client makes requests for the model from the server. Once the
    client gets the model, it performs actions/logic on this data, and then prepares
    it to be displayed on the screen. This part of the application (talk to the server,
    modify the data model, and prep data for display) is called the **controller**.
    The controller sends commands to the view, which displays the information, and
    reports back to the controller when something happens on the screen (a button
    click, for example). The controller receives that feedback, performs logic, and
    updates the model. Lather, rinse, repeat.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 模型拥有所有的数据。在智能应用的上下文中，模型是由服务器提供的。客户端从服务器请求模型。一旦客户端获得模型，它就在这些数据上执行操作/逻辑，然后准备将其显示在屏幕上。这个应用程序的部分（与服务器通信、修改数据模型以及准备数据显示的数据）被称为**控制器**。控制器向视图发送命令，视图显示信息，并在屏幕上发生某些事件（例如按钮点击）时向控制器报告。控制器接收那些反馈，执行逻辑，并更新模型。如此循环。
- en: Because web browsers were built to be "dumb clients" the idea of using a browser
    as a smart app was out of the question. Instead, smart apps were built on frameworks
    such as Microsoft .NET, Java, or Macromedia (now Adobe) Flash. As long as you
    had the framework installed, you could visit a web page to download/run a smart
    app.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 由于网络浏览器被设计成“愚蠢的客户端”，使用浏览器作为智能应用的想法是不可能的。相反，智能应用是建立在诸如微软.NET、Java或Macromedia（现
    Adobe）Flash之类的框架上。只要安装了框架，你就可以访问网页来下载/运行智能应用。
- en: Sometimes you could run the app inside the browser, sometimes you could download
    it first, but either way, you were running a new type of web app, where the application
    could talk to the server and share the processing workload.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 有时你可以在浏览器内运行应用程序，有时你可以在下载之前运行它，但无论如何，你都在运行一种新类型的网络应用程序，在这种应用程序中，应用程序可以与服务器通信并共享处理工作负载。
- en: The browser grows up (MVVM)
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 浏览器成长了（MVVM）
- en: Beginning in the early 2000s, a new twist on the MVC pattern started to emerge.
    Developers started to realize that, for connected/enterprise "smart apps", there
    was actually a nested MVC pattern.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 从2000年代初开始，MVC模式出现了一个新的变化。开发者开始意识到，对于连接/企业级的“智能应用”，实际上有一个嵌套的MVC模式。
- en: The server (controller) was performing business logic on the database information
    (model) through the use of business objects, and then passing that information
    on to a client application (a "view").
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器（控制器）通过使用业务对象对数据库信息（模型）执行业务逻辑，然后将该信息传递给客户端应用程序（一个“视图”）。
- en: The client was receiving this information from the server, and treating it as
    its own personal "model." The client would then act as a proper controller, perform
    logic, and send the information to the view to be displayed on the screen.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端从服务器接收这些信息，并将其视为自己的个人“模型”。然后客户端将作为一个适当的控制器，执行逻辑，并将信息发送给视图以在屏幕上显示。
- en: So, the "view" for the server MVC was the "model" for the second MVC.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，对于服务器MVC的“视图”是第二个MVC的“模型”。
- en: '![The browser grows up (MVVM)](img/0823OS_03_03.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![浏览器成长了（MVVM）](img/0823OS_03_03.jpg)'
- en: Then came the thought, "why stop at two?" There was no reason an application
    couldn't have *multiple* nested MVCs, with each view becoming the model for the
    next MVC. In fact, on the client side, there's actually a good reason to do so.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我想到，“为什么要止步于两个？” 没有理由说一个应用不能有*多个*嵌套的MVC，每个视图都成为下一个MVC的模型。实际上，在客户端方面，这样做的确有一个很好的理由。
- en: 'Separating actual display logic (such as "this submit button goes here" and
    "the text area changed value") from the client-side object logic (such as "user
    can submit this record" and "the phone # has changed") allows a large majority
    of the code to be reused. The object logic can be ported to another application,
    and all you have to do is change out the display logic to extend the same model
    and controller code to a different application or device.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 将实际显示逻辑（如“这个提交按钮放在这里”和“文本区域值已更改”）与客户端对象逻辑（如“用户可以提交这个记录”和“电话号码已更改”）分离，使得大部分代码可以被重用。对象逻辑可以移植到另一个应用程序中，您所做的只是更改显示逻辑，以将相同的模型和控制器代码扩展到不同的应用程序或设备。
- en: From 2004-2005, this idea was refined and modified for smart apps (called the
    **presentation model**) by Martin Fowler and Microsoft (called the **Model View
    View-Model**). While not strictly the same thing as a nested MVC, the MVVM design
    pattern applied the concept of a nested MVC to the frontend application.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 从 2004-2005 年起，这个想法被马丁·福勒（Martin Fowler）和微软（Microsoft）针对智能应用进行了改进和修改（称为**展示模型**），称为**模型-视图-视图模型**（Model
    View View-Model）。虽然严格来说并不是嵌套 MVC 的同一件事，但 MVVM 设计模式将嵌套 MVC 的概念应用于前端应用程序。
- en: '![The browser grows up (MVVM)](img/0823OS_03_04.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![浏览器成长（MVVM）](img/0823OS_03_04.jpg)'
- en: As browser technologies (HTML and JavaScript) matured, it became possible to
    create smart apps that use the MVVM design pattern directly inside an HTML web
    page. This pattern makes it possible to run a full-sized application directly
    from a browser. No more downloading multiple frameworks or separate apps. You
    can now get the same functionality from visiting a URL as you previously could
    from buying a packaged product.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 随着浏览器技术（HTML 和 JavaScript）的成熟，创建直接在 HTML 网页内使用 MVVM 设计模式的智能应用变得可能。这种模式使得直接从浏览器运行完整尺寸的应用程序成为可能。不再需要下载多个框架或单独的应用程序。现在，您可以从访问一个
    URL 获得与以前从购买包装产品获得相同的功能。
- en: A giant Meteor appears!
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个大型的 Meteor 出现了！
- en: Meteor takes the MVVM pattern to the next level. By applying templating through
    `handlebars.js` (or other template libraries) and using instant updates, it truly
    enables a web application to act and perform like a complete, robust smart application.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Meteor 将 MVVM 模式推向了新的高度。通过应用 `handlebars.js`（或其他模板库）的模板化，并利用即时更新，它真正使得网页应用程序能够像一个完整的、健壮的智能应用程序一样行动和表现。
- en: Let's walk through some concepts of how Meteor does this, and then we'll begin
    to apply this to our Lending Library application.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一些概念来了解 Meteor 是如何做到这一点的，然后我们开始将这个应用到我们的 Lending Library 应用程序中。
- en: Cached and synchronized data (the model)
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缓存和同步数据（模型）
- en: Meteor supports a cached-and-synchronized data model that is the same on the
    client and the server.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Meteor 支持一种在客户端和服务器上相同的缓存和同步数据模型。
- en: '![Cached and synchronized data (the model)](img/0823OS_03_05.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![缓存和同步数据（模型）](img/0823OS_03_05.jpg)'
- en: When the client notices a change to the data model, it first caches the change
    locally, and then tries to sync with the server. At the same time, it is listening
    to changes coming from the server. This allows the client to have a local copy
    of the data model, so it can send the results of any changes to the screen quickly,
    without having to wait for the server to respond.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当客户端注意到数据模型的更改时，它首先在本地缓存这些更改，然后尝试与服务器同步。同时，它正在监听来自服务器的更改。这使得客户端能够拥有数据模型的本地副本，因此它可以快速地将任何更改的结果发送到屏幕，而无需等待服务器响应。
- en: In addition, you'll notice that this is the beginning of the MVVM design pattern,
    within a nested MVC. In other words, the server publishes data changes, and treats
    those data changes as the "view" in its own MVC pattern. The client subscribes
    to those changes, and treats the changes as the "model" in its MVVM pattern.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您会注意到这是 MVVM 设计模式的开始，嵌套在一个 nested MVC 中。换句话说，服务器发布数据更改，并将其数据更改视为自身 MVC 模式中的“视图”。客户端订阅这些更改，并将其更改视为
    MVVM 模式中的“模型”。
- en: '![Cached and synchronized data (the model)](img/0823OS_03_06.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![缓存和同步数据（模型）](img/0823OS_03_06.jpg)'
- en: 'A code example of this is very simple inside of Meteor (although you can make
    it more complex and therefore more controlled if you''d like):'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这个的一个代码示例在 Meteor 中非常简单（尽管如果您愿意，您可以使其更复杂，从而使其更具控制性）：
- en: '[PRE0]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: What this one line does is declare that there is a `lists` data model. Both
    the client and server will have a version of it, but they treat their versions
    differently. The client will subscribe to changes announced by the server, and
    update its model accordingly. The server will publish changes, and listen to change
    requests from the client, and update *its* model (its master copy) based on those
    change requests.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行代码的作用是声明存在一个`lists`数据模型。客户端和服务器都会有它的版本，但它们对待自己的版本方式不同。客户端将订阅服务器宣布的变化，并相应地更新其模型。服务器将发布变化，并监听来自客户端的变化请求，并根据这些请求更新*它的*模型（它的主副本）。
- en: Wow. One line of code that does all that! Of course there is more to it, but
    that's beyond the scope of this chapter, so we'll move on.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 哇。一行代码就能做到这么多！当然，还有很多我们没有提到，但这超出了本章节的范围，所以我们继续吧。
- en: Tip
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: To better understand Meteor data synchronization, see the *Publish and subscribe*
    section of the Meteor documentation at [http://docs.meteor.com/#publishandsubscribe](http://docs.meteor.com/#publishandsubscribe).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解Meteor的数据同步，请参阅Meteor文档中“发布和订阅”部分的*发布和订阅*。[http://docs.meteor.com/#publishandsubscribe](http://docs.meteor.com/#publishandsubscribe)。
- en: Templated HTML (the view)
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模板化的HTML（视图）
- en: The Meteor client renders HTML through the use of templates.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Meteor客户端通过使用模板来渲染HTML。
- en: Templates in HTML are also called **view data bindings**. Without getting too
    deep, a view data binding is a shared piece of data that will be displayed differently
    if the data changes.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: HTML中的模板也称为**视图数据绑定**。简单来说，视图数据绑定是如果数据变化，会以不同方式显示的一块共享数据。
- en: The HTML code has a placeholder. In that placeholder different HTML code will
    be placed, depending on the value of a variable. If the value of that variable
    changes, the code in the placeholder will change with it, creating a different
    view.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: HTML代码有一个占位符。根据变量的值，将在该占位符中放置不同的HTML代码。如果这个变量的值发生变化，占位符中的代码也会随之变化，从而产生不同的视图。
- en: Let's look at a very simple data binding – one that you don't technically need
    Meteor for – to illustrate the point.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个非常简单的数据绑定，这个你实际上不需要Meteor也能做到，来阐明这个观点。
- en: 'In `LendLib.html`, you will see an HTML (Handlebar) template expression:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在`LendLib.html`中，你会看到一个HTML（Handlebar）模板表达式：
- en: '[PRE1]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'That expression is a placeholder for an HTML template, found just below it:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这个表达式是一个HTML模板的占位符，下面就是它：
- en: '[PRE2]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: So, `{{> categories}}` is basically saying "put whatever is in the template
    `categories` right here." And the HTML template with the matching name is providing
    that.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，`{{> categories}}`基本上是在说“在这里放`categories`模板中的任何东西。”具有相应名称的HTML模板正在提供这些内容。
- en: 'If you want to see how data changes will change the display, change the `h2`
    tag to an `h4` tag, and save the change:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想看看数据变化会如何改变显示效果，将`h2`标签改为`h4`标签，并保存更改：
- en: '[PRE3]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You'll see the effect in your browser ("my stuff" become itsy bitsy). That's
    a template – or view data binding – at work! Change the `h4` back to an `h2` and
    save the change. Unless you like the change. No judgment here...okay, maybe a
    little bit of judgment. It's ugly, and tiny, and hard to read. Seriously, you
    should change it back before someone sees it and makes fun of you!!
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 你会在浏览器中看到效果（“我的东西”变得微小）。这是一个模板——或者说是视图数据绑定——在起作用！将`h4`改回`h2`并保存更改。除非你喜欢这个更改。这里没有判断...好吧，也许有一点判断。它又丑又小，很难阅读。说真的，你应该改回去，否则有人看到会嘲笑你的！
- en: Alright, now that we know what a view data binding is, let's see how Meteor
    uses them.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，现在我们知道什么是视图数据绑定，让我们来看看Meteor是如何使用它们的。
- en: 'Inside the categories template in `LendLib.html`, you''ll find even more Handlebars
    templates:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在`LendLib.html`中的categories模板内，你还会找到更多的Handlebar模板：
- en: '[PRE4]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The first Handlebars expression is part of a pair, and is a `for-each` statement.
    `{{#each lists}}` tells the interpreter to perform the action below it (in this
    case, make a new `div`) for each item in the `lists` collection. `lists` is the
    piece of data. `{{#each lists}}` is the placeholder.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个Handlebar表达式是一对的一部分，是一个`for-each`语句。`{{#each lists}}`告诉解释器执行其下方的动作（在这个例子中，创建一个新的`div`）对于`lists`集合中的每个项目。`lists`是数据的一部分。`{{#each
    lists}}`是占位符。
- en: Now, inside the `#each lists` expression, there is one more Handlebars expression.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在`#each lists`表达式中，还有一个Handlebar表达式。
- en: '[PRE5]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Because this is found inside the `#each` expression, `Category` is an implied
    property of `lists`. That is to say that `{{Category}}` is the same as saying
    `this.Category`, where `this` is the current item in the `for each` loop. So the
    placeholder is saying "Add the value of `this.Category` here."
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这位于`#each`表达式内部，`Category`是`lists`的隐含属性。也就是说`{{Category}}`等同于说`this.Category`，其中`this`是`for
    each`循环中的当前项目。因此，占位符表示“在这里添加`this.Category`的值。”
- en: Now, if we look in `LendLib.js`, we will see the values behind the templates.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们查看`LendLib.js`，我们将看到模板背后的值。
- en: '[PRE6]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Here, Meteor is declaring a template variable named `lists`, found inside a
    template called `categories`. That variable happens to be a function. That function
    is returning all the data in the `lists` collection, which we defined previously.
    Remember this line?
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，Meteor声明了一个名为`lists`的模板变量，该变量位于名为`categories`的模板内。这个变量碰巧是一个函数。这个函数返回`lists`集合中的所有数据，我们之前定义了这个集合。记得这个命令吗？
- en: '[PRE7]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: That `lists` collection is returned by the declared `Template.categories.lists`,
    so that when there's a change to the `lists` collection, the variable gets updated,
    and the template's placeholder is changed as well.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 那个`lists`集合是由声明的`Template.categories.lists`返回的，因此当`lists`集合发生变化时，变量也会得到更新，模板的占位符也会相应地改变。
- en: 'Let''s see this in action. On your web page pointing to `http://localhost:3000`,
    open the browser console and enter the following line:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们实际操作一下。在指向`http://localhost:3000`的网页上，打开浏览器控制台并输入以下行：
- en: '[PRE8]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This will update the lists data collection (the model). The template will see
    this change, and update the HTML code/placeholder. The `for each` loop will run
    one additional time, for the new entry in `lists`, and you''ll see the following
    screen:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这将更新`lists`数据集合（模型）。模板将看到这个变化，并更新HTML代码/占位符。`for each`循环将额外运行一次，为`lists`中的新条目，然后你会看到以下屏幕：
- en: '![Templated HTML (the view)](img/0823OS_03_07.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![模板化的HTML（视图）](img/0823OS_03_07.jpg)'
- en: In regards to the MVVM pattern, the HTML template code is part of the client's
    view. Any changes to the data are reflected in the browser automatically.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 关于MVVM模式，HTML模板代码是客户端视图的一部分。任何数据的变化都会自动反映在浏览器中。
- en: Meteor's client code (the View-Model)
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Meteor的客户端代码（视图模型）
- en: As discussed in the preceding section, `LendLib.js` contains the template variables,
    linking the client's model to the HTML page, which is the client's view. Any logic
    that happens inside of `LendLib.js` as a reaction to changes from either the view
    or the model is part of the View-Model.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一部分所述，`LendLib.js`包含了模板变量，它将客户端模型与HTML页面连接起来，这是客户端的视图。在`LendLib.js`内部，作为对视图或模型变化的反应的任何逻辑都是视图模型的一部分。
- en: The View-Model is responsible for tracking changes to the model and presenting
    those changes in such a way that the view will pick up the changes. It's also
    responsible for listening to changes coming from the view.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 视图模型负责跟踪模型的变化并以一种视图可以拾取变化的方式呈现这些变化。它还负责监听来自视图的变化。
- en: By changes, we don't mean a button click or text being entered. Instead, we
    mean a change to a template value. A declared template is the View-Model, or the
    *model for the view*.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，变化并不意味着按钮点击或文本被输入。相反，我们指的是模板值的改变。声明的模板是视图模型，或者说*视图的模型*。
- en: That means that the client controller has its model (the data from the server)
    and it knows what to do with that model, and the view has its model (a template)
    and it knows how to display that model.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着客户端控制器拥有其模型（来自服务器的数据）并且知道如何处理这个模型，视图拥有其模型（一个模板）并且知道如何显示该模型。
- en: Let's create some templates
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让我们创建一些模板
- en: We'll now see a real-life example of the MVVM design pattern, and work on our
    Lending Library at the same time. Adding categories through the console has been
    a fun exercise, but it's not a long -t term solution. Let's make it so we can
    do that on the page instead.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将看到MVVM设计模式的实际例子，同时对我们的借阅图书馆进行操作。通过控制台添加类别是一个有趣的练习，但它不是长期的解决方案。让我们设法让我们可以在页面上进行此类操作。
- en: Open `LendLib.html` and add a new button just before the `{{#each lists}}` expression.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`LendLib.html`，在`{{#each lists}}`表达式之前添加一个新按钮。
- en: '[PRE9]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This will add a plus button to the page.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这将向页面添加一个加号按钮。
- en: '![Let''s create some templates](img/0823OS_03_08.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![让我们创建一些模板](img/0823OS_03_08.jpg)'
- en: Now, we'll want to change out that button for a text field if we click on it.
    So let's build that functionality using the MVVM pattern, and make it based on
    the value of a variable in the template.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们点击它，我们想要将那个按钮换成文本字段。所以让我们使用MVVM模式构建这个功能，并使其基于模板中的一个变量的值。
- en: 'Add the following lines of code:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 添加以下代码行：
- en: '[PRE10]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The first line `{{#if new_cat}}` checks to see if `new_cat` is `true` or `false`.
    If it's `false`, the `{{else}}` section triggers, and it means we haven't yet
    indicated we want to add a new category, so we should be displaying the button
    with the plus sign.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行`{{#if new_cat}}`检查`new_cat`是`true`还是`false`。如果是`false`，`{{else}}`部分触发，这意味着我们还没有表示我们想要添加一个新的类别，所以我们应该显示带有加号的按钮。
- en: 'In this case, since we haven''t defined it yet, `new_cat` will be `false`,
    and so the display won''t change. Now let''s add the HTML code to display, if
    we want to add a new category:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，由于我们还没有定义它，`new_cat`将变为`false`，所以显示不会改变。现在让我们添加HTML代码，如果我们想要添加一个新的类别：
- en: '[PRE11]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Here we've added an input field, which will show up when `new_cat` is `true`.
    The input field won't show up unless it is, so for now it's hidden. So how do
    we make `new_cat` equal `true`?
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加了一个输入字段，当`new_cat`为`true`时显示。除非它是，否则输入字段不会显示，所以现在它是隐藏的。那么我们如何使`new_cat`等于`true`呢？
- en: Save your changes if you haven't already, and open `LendingLib.js`. First, we'll
    declare a `Session` variable, just below our lists template declaration.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还没有保存更改，请保存您的更改，并打开`LendingLib.js`。首先，我们在列表模板声明下方声明一个`Session`变量。
- en: '[PRE12]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now, we declare the new template variable `new_cat`, which will be a function
    returning the value of `adding_category`:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们声明新的模板变量`new_cat`，它将是一个返回`adding_category`值的函数：
- en: '[PRE13]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Save these changes, and you'll see that nothing has changed. Ta-daaa!
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 保存这些更改，你会发现什么都没有变化。Ta-daaa!
- en: In reality, this is exactly as it should be, because we haven't done anything
    to change the value of `adding_category` yet. Let's do that now.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，这正是它应该的样子，因为我们还没有做任何改变`adding_category`值的事情。现在我们来做这件事。
- en: First, we'll declare our click event, which will change the value in our `Session`
    variable.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将声明我们的点击事件，它将改变我们的`Session`变量的值。
- en: '[PRE14]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Let''s take a look at the following line:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看下一行：
- en: '[PRE15]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This line is declaring that there will be events found in the category template.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这条线声明将在类别模板中找到事件。
- en: 'Now let''s take a look at the next line:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看下一行：
- en: '[PRE16]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This line tells us that we're looking for a click event on the HTML element
    with an `id="btnNewCat"` (which we already created on `LendingLib.html`).
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这条线告诉我们，我们在寻找HTML元素上的点击事件，其`id="btnNewCat"`（我们在`LendingLib.html`上已经创建了它）。
- en: '[PRE17]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We set the `Session` variable `adding_category = true`, we flush the DOM (clear
    up anything wonky), and then we set the focus onto the input box with the expression
    `id="add-category"`.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们设置`Session`变量`adding_category = true`，我们刷新DOM（清除任何不正常的内容），然后使用表达式`id="add-category"`将焦点设置到输入框。
- en: 'One last thing to do, and that is to quickly add the helper function `focusText()`.
    Just before the closing tag for the `if (Meteor.isClient)` function, add the following
    code:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一件事要做，那就是快速添加助手函数`focusText()`。在`if (Meteor.isClient)`函数的闭合标签之前，添加以下代码：
- en: '[PRE18]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now when you save the changes, and click on the plus [![Let''s create some
    templates](img/0823OS_03_12.jpg)] button, you''ll see the following input box:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在当你保存更改，并点击加号[![让我们创建一些模板](img/0823OS_03_12.jpg)]按钮时，你会看到以下输入框：
- en: '![Let''s create some templates](img/0823OS_03_09.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![让我们创建一些模板](img/0823OS_03_09.jpg)'
- en: Fancy!
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！
- en: It's still not useful, but we want to pause for a second and reflect on what
    just happened. We created a conditional template in the HTML page that will either
    show an input box or a plus button, depending on the value of a *variable*.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 它仍然没有用，但我们想要暂停一下，反思一下刚才发生了什么。我们在HTML页面中创建了一个条件模板，它将根据一个*变量*的值显示输入框或加号按钮。
- en: That variable belongs to the View-Model. That is to say that if we change the
    value of the variable (like we do with the click event), then the view automatically
    updates. We've just completed an MVVM pattern inside a Meteor application!
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这个变量属于视图模型。也就是说，如果我们通过点击事件改变变量的值，那么视图会自动更新。在Meteor应用程序中，我们刚刚完成了一个MVVM模式！
- en: To really bring this home, let's add a change to the `lists` collection (also
    part of the View-Model, remember?) and figure out a way to hide the `input` field
    when we're done.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 为了真正说明这一点，我们添加了对`lists`集合的更改（也是视图模型的一部分，记得吗？），并找出一个在完成后隐藏`input`字段的方法。
- en: 'First, we need to add a listener for the `keyup` event. Or to put it another
    way, we want to listen when the user types something in the box and hits *Enter*.
    When that happens, we want to have a category added, based on what the user typed.
    First, let''s declare the event handler. Just after the `click` event for `#btnNewCat`,
    let''s add another event handler:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要为`keyup`事件添加一个监听器。换句话说，我们希望监听用户在框中输入内容并按下*回车*时。当发生这种情况时，我们希望能够根据用户输入的内容添加一个类别。首先，让我们声明事件处理程序。在`#btnNewCat`的`click`事件之后，让我们添加另一个事件处理程序：
- en: '[PRE19]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: We add a `","` at the end of the click function, and then added the `keyup`
    event handler.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在点击函数的末尾添加一个`","`，然后添加了`keyup`事件处理程序。
- en: '[PRE20]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This line checks to see if we hit the *Enter*/return key.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行检查我们是否按下了*Enter*/回车键。
- en: '[PRE21]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This checks to see if the input field has any value in it.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这检查输入字段是否有什么值。
- en: '[PRE22]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: If it does, we want to add an entry to the `lists` collection.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这样做，我们希望在`lists`集合中添加一个条目。
- en: '[PRE23]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Then we want to hide the input box, which we can do by simply modifying the
    value of `adding_category`.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们希望隐藏输入框，这可以通过简单地修改`adding_category`的值来实现。
- en: 'One more thing to add, and we''re all done. If we click away from the `input`
    box, we want to hide it, and bring back the plus button. We already know how to
    do that inside the MVVM pattern by now, so let''s add a quick function that changes
    the value of `adding_category`. Add one more comma after the `keyup` event handler,
    and insert the following event handler:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一件事要做，我们就完成了。如果我们点击`input`框以外的区域，我们希望隐藏它，并恢复加号按钮。到现在为止，我们已经知道如何在MVVM模式内部实现这一点，所以让我们添加一个快速函数来更改`adding_category`的值。在`keyup`事件处理程序之后再添加一个逗号，并插入以下事件处理程序：
- en: '[PRE24]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Save your changes, and let's see this in action! In your web browser, on `http://localhost:3000`
    , click on the plus sign – add the word **Clothes** and hit *Enter*.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 保存你的更改，让我们来看一下实际效果！在你的网页浏览器中，访问`http://localhost:3000`，点击加号符号——添加单词**衣服**并按下*回车*。
- en: 'Your screen should now resemble the following:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 你的屏幕现在应该类似于以下内容：
- en: '![Let''s create some templates](img/0823OS_03_10.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![让我们创建一些模板](img/0823OS_03_10.jpg)'
- en: Feel free to add more categories if you want. Also, experiment with clicking
    on the plus button, typing something in, and then clicking away from the input
    field.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想添加更多类别，请随意添加。此外，尝试点击加号按钮，输入一些内容，然后点击输入框以外的区域。
- en: Summary
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter you've learned about the history of web applications, and seen
    how we've moved from a traditional client/server model to a full-fledged MVVM
    design pattern. You've seen how Meteor uses templates and synchronized data to
    make things very easy to manage, providing a clean separation between our view,
    our view logic, and our data. Lastly, you've added more to the Lending Library,
    making a button to add categories, and you've done it all using changes to the
    View-Model, rather than directly editing the HTML. In the next chapter, we'll
    really get to work, and add all kinds of templates and logic, bringing our Lending
    Library to life!
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了网页应用程序的历史，并了解了我们从传统的客户端/服务器模型是如何发展到完整的MVVM设计模式的。你已经看到了Meteor如何使用模板和同步数据使管理变得非常容易，为我们提供了视图、视图逻辑和数据之间的清晰分离。最后，你向借阅图书馆添加了更多内容，添加了一个用于添加类别的按钮，而且你都是通过修改视图模型而不是直接编辑HTML来完成的。在下一章中，我们将真正开始工作，添加各种模板和逻辑，让我们的借阅图书馆焕发生机！
