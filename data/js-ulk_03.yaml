- en: Chapter 3. DOM Scripting and AJAX
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章 DOM脚本和AJAX
- en: When it comes to **Document Object Model** (**DOM**) manipulation and AJAX,
    the first instinct could be to use jQuery or Zepta. But doesn't it bother you
    that you load a weighty third-party library for common tasks, when a browser provides
    everything that you need? Some people pulled in jQuery for cross-browser compatibility.
    Well, the library is known to fix the *broken DOM API*. This was really helpful
    when we supported browsers as old as IE7\. However, today we hardly need to care
    about legacy browsers when their usage share is less than 0.1 percent ([http://www.w3schools.com/browsers/browsers_explorer.asp](http://www.w3schools.com/browsers/browsers_explorer.asp)).
    Modern browsers are quite consistent in the support of Web API. By and large,
    cross-browser compatibility is not an issue anymore.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到**文档对象模型**（**DOM**）操作和AJAX时，第一反应可能是使用jQuery或Zepto。但是，这难道不让你烦恼吗？你为了一些普通的任务，却加载了一个沉重的第三方库，而浏览器已经为你提供了所需的一切？有些人引入jQuery是为了跨浏览器兼容性。好吧，这个库是用来修复*损坏的DOM
    API*。这在我们要支持像IE7这样老旧浏览器的时候真的很有帮助。然而，今天，当我们支持的浏览器使用率不到0.1%时，我们几乎不需要关心遗留浏览器([http://www.w3schools.com/browsers/browsers_explorer.asp](http://www.w3schools.com/browsers/browsers_explorer.asp))。现代浏览器在支持Web
    API方面相当一致。总的来说，跨浏览器兼容性不再是问题。
- en: The second and the most common excuse is that the library simplifies the amount
    of code you have to write to query and manipulate the DOM. It really simplifies
    the code to some degree, but the drawback is that nowadays we have a generation
    of developers who don't know JavaScript and Web API, but only jQuery. Many of
    them cannot solve a simple task without the library and have no idea what actually
    happens when they call the library methods. Good code means portability and high
    performance. One can hardly achieve this without a knowledge of native API.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个，也是最常见的借口是，这个库简化了你需要编写的查询和操作DOM的代码量。它在某种程度上简化了代码，但缺点是，现在我们有一代开发者不知道JavaScript和Web
    API，只知道jQuery。其中许多人没有这个库就无法解决一个简单的任务，也不知道当他们调用库方法时实际发生了什么。良好的代码意味着可移植性和高性能。没有对原生API的了解，很难实现这一点。
- en: So in this chapter, we will examine the native way of dealing with DOM and AJAX
    with a focus on high-performance.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在本章中，我们将探讨原生处理DOM和AJAX的方式，重点关注高性能。
- en: 'This chapter will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: High-speed DOM operations
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高速DOM操作
- en: Communication with the server
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与服务器的通信
- en: High-speed DOM operations
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高速DOM操作
- en: In order to deal with the DOM efficiently, we need to understand its nature.
    The DOM is a tree structure that represents the document that is open in the browser.
    Every element of the DOM is an object that is called node.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为了高效地处理DOM，我们需要了解它的本质。DOM是一个表示在浏览器中打开的文档的树结构。DOM中的每个元素都称为节点。
- en: '![High-speed DOM operations](img/00007.jpeg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![高速DOM操作](img/00007.jpeg)'
- en: 'Every node being an object has properties and methods ([https://developer.mozilla.org/en/docs/Web/API/Node](https://developer.mozilla.org/en/docs/Web/API/Node)).
    There are different types of node. In the preceding image, you can see a document
    node, element nodes, and text nodes. In reality, the tree may also contain specific
    node types such as comment nodes, doctype nodes, and others. To illustrate the
    relationships within the tree, we can say that HTML has two child nodes **HEAD**
    and **BODY**, which relate to each other as siblings. Obviously, HTML is the parent
    node to HEAD and BODY. We can use these relations that are accessible via node
    properties to navigate through the tree:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 每个节点作为一个对象都有属性和方法([https://developer.mozilla.org/en/docs/Web/API/Node](https://developer.mozilla.org/en/docs/Web/API/Node))。节点有不同的类型。在前面的图片中，你可以看到一个文档节点、元素节点和文本节点。实际上，树也可能包含特定类型的节点，如注释节点、文档类型节点等。为了说明树内的关系，我们可以认为HTML有两个子节点**HEAD**和**BODY**，它们作为兄弟姐妹相互关联。显然，HTML是HEAD和BODY的父节点。我们可以使用这些通过节点属性可访问的关系来导航树：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This part is clear, but if we request the next sibling to be HEAD instead of
    BODY. we will get a text node with whitespaces in the content (`nodeValue`):'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这部分很清楚，但如果我们请求下一个兄弟节点是HEAD而不是BODY，我们将得到一个内容中包含空白符的文本节点（`nodeValue`）：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In HTML, we usually separate elements with spaces, TABs, and LineFeeds for better
    readability and these also form a part of DOM. So to access elements, we rather
    use document and element methods.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在HTML中，我们通常用空格、TAB和换行符来分隔元素，以提高可读性，这些也构成了DOM的一部分。因此，为了访问元素，我们最好使用文档和元素方法。
- en: Traversing the DOM
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 遍历DOM
- en: 'Surely you know how to find an element by ID (`document.getElementById`) or
    by tag name (`document.getElementsByTagName`). You can also search for an element
    by a CSS selector (`document.querySelector`):'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你知道如何通过ID（`document.getElementById`）或标签名（`document.getElementsByTagName`）找到一个元素。你也可以通过CSS选择器（`document.querySelector`）查找一个元素：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'A selector builds from one or many type (tag) selectors, class selectors, ID
    selectors, attribute selectors, or pseudo-class/element selectors ([http://www.w3.org/TR/CSS21/selector.html%23id-selectors](http://www.w3.org/TR/CSS21/selector.html%23id-selectors)).
    Considering the combinations (to match a group, descendants, or siblings), this
    gives quite a number of possible options. So it can be hard to pick a strategy
    to bind HTML elements from JavaScript. My advice would be to always use the `data-*`
    attribute selectors:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 选择器由一个或多个类型（标签）选择器、类选择器、ID选择器、属性选择器或伪类/元素选择器组合而成（[http://www.w3.org/TR/CSS21/selector.html%23id-selectors](http://www.w3.org/TR/CSS21/selector.html%23id-selectors)）。考虑到组合（匹配一组、后代或兄弟姐妹），这给了我们相当多的可能选项。所以选择一个将HTML元素从JavaScript绑定的策略可能会很难。我的建议是始终使用`data-*`属性选择器：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This way we are independent from the HTML structure. If we change tags, for
    example for better semantics, nothing breaks on the JavaScript side. We are independent
    from CSS classes and this means that we can safely refactor CSS. And we are not
    limited by ID, which is supposed to be unique per document.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这样我们就独立于HTML结构了。如果我们改变标签，例如为了更好的语义，JavaScript方面不会出错。我们独立于CSS类，这意味着我们可以安全地重构CSS。我们不受ID的限制，ID在每个文档中应该是唯一的。
- en: 'While `querySelector` takes the first element in the DOM to match the selector,
    `querySelectorAll` retrieves all of them:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`querySelector`取DOM中匹配选择器的第一个元素，而`querySelectorAll`检索所有它们：'
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The found elements are represented as a `NodeList`. It looks like an array,
    but it''s not. It''s a live collection that is being updated with every DOM reflow.
    Consider the following example:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 找到的元素被表示为一个`NodeList`。它看起来像一个数组，但它不是。它是一个实时集合，在每次DOM重排时都会被更新。考虑以下示例：
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The preceding code causes an infinite loop, because whenever we access the next
    element of the collection, one new element is appended to the collection, `divs.length`
    incremented, and we never meet the loop condition.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码会导致一个无限循环，因为无论我们访问集合的下一个元素，都会向集合中添加一个新元素，`divs.length`递增，我们永远满足不了循环条件。
- en: 'It''s important to know that an iteration through a live collection (`NodeList`,
    `HTMLCollection`) is slow and considerably resource-expensive. If you don''t need
    it to be live, just convert the collection into an array such as `[].slice.call(
    nodeList )`, as covered in [Chapter 1](part0014_split_000.html#DB7S2-f4ff6b81796e4f78aa983a623fb95daf
    "Chapter 1. Diving into the JavaScript Core"), *Diving into JavaScript Core*.
    In ES6, this can be done with the `[...nodeList]spread` operator:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要知道，遍历一个实时集合（`NodeList`、`HTMLCollection`）是慢的，并且资源消耗很大。如果你不需要它是实时的，只需将集合转换为一个数组，例如`[].slice.call(
    nodeList )`，正如在[第1章](part0014_split_000.html#DB7S2-f4ff6b81796e4f78aa983a623fb95daf
    "Chapter 1. Diving into the JavaScript Core")，*深入JavaScript核心*中提到的那样。在ES6中，这可以用`[...nodeList]spread`操作符完成：
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In addition to querying, we can test whether a found element matches a given
    selector:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 除了查询，我们还可以测试找到的元素是否与给定的选择器匹配：
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Changing the DOM
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 改变DOM
- en: 'Well, now we know how to find elements in the DOM. Let''s see how we can dynamically
    insert new elements into the DOM tree. There are different ways. We can simply
    set new HTML content with the `el.innerHTML` method:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，现在我们知道如何在DOM中找到元素了。那么我们来看看如何将新元素动态插入到DOM树中。有多种方法。我们可以简单地使用`el.innerHTML`方法设置新的HTML内容：
- en: '[PRE8]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Otherwise, we can create a node (`document.createElement`) and inject it into
    the DOM (`el.appendChild`):'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，我们可以创建一个节点（`document.createElement`）并将其注入到DOM中（`el.appendChild`）：
- en: '[PRE9]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Here you should remember that every time we change `el.innerHTML` or append
    a child to an element, we cause DOM reflow. When this happens repeatedly in a
    loop, it can slow down the application.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里你应该记得，每次我们改变`el.innerHTML`或者向一个元素中添加一个子元素，我们都会引起DOM重排。当这种情况在循环中反复发生时，它可能会减慢应用程序的速度。
- en: 'When we pass HTML via `el.innerHTML`, the browser first has to parse the string.
    It''s a resource-consuming operation. However, this will go much faster if we
    create elements explicitly. If we are producing a batch of similar elements, the
    flow can be optimized further. Instead of creating every element in a loop, we
    can clone the one created originally (`el.cloneNode`), which is way faster:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们通过`el.innerHTML`传递HTML时，浏览器首先必须解析字符串。这是一个耗资源的操作。然而，如果我们明确地创建元素，这个操作会快得多。如果我们生产出一系列相似的元素，流程还可以进一步优化。我们可以在循环中创建每一个元素，也可以创建一个原始创建的元素副本（`el.cloneNode`），这样可以快得多：
- en: '[PRE10]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: On the other hand, we can create a document fragment (`document.createDocumentFragment`)
    and during the loop append the created nodes to the fragment. Document fragment
    is a sort of a virtual DOM, which we manipulate instead of the real one. Once
    we're done, we can inject the document fragment as a branch to the real DOM. By
    combining this technique and cloning, we are supposed to gain in terms of performance.
    In effect, this is not certain ([http://codepen.io/dsheiko/pen/vObVOR](http://codepen.io/dsheiko/pen/vObVOR)).
    For example, in WebKit browsers, virtual DOM (`document.createDocumentFragment`)
    runs slower than the real one.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，我们可以创建一个文档片段（`document.createDocumentFragment`）并在循环中向片段添加创建的节点。文档片段是一种虚拟DOM，我们对其进行操作而不是真实的DOM。一旦我们完成，我们可以将文档片段作为分支注入到真实的DOM中。通过结合这种技术和克隆技术，我们预计在性能上会有所收获。实际上，这并不确定([http://codepen.io/dsheiko/pen/vObVOR](http://codepen.io/dsheiko/pen/vObVOR))。例如，在WebKit浏览器中，虚拟DOM（`document.createDocumentFragment`）比真实DOM运行得慢。
- en: 'As we''ve done with performance, let''s focus on accuracy. If we need to inject
    an element to an exact position (for example, between the `foo` and `bar` nodes),
    `el.appendChild` isn''t the right method. We have to go with `el.insertBefore`:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在性能方面所做的那样，让我们关注准确性。如果我们需要将一个元素注入到确切的位置（例如，在`foo`和`bar`节点之间），`el.appendChild`并不是正确的方法。我们必须使用`el.insertBefore`：
- en: '[PRE11]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To remove a particular element from the DOM, we do the following trick:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要从DOM中删除一个特定的元素，我们这样做：
- en: '[PRE12]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In addition, we can reload an element, for example, to reset all the subscribed
    listeners:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还可以重新加载元素，例如，重置所有订阅的事件监听器：
- en: '[PRE13]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Styling the DOM
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 样式化DOM
- en: 'When it comes to styling, we have to go with CSS classes wherever it is possible.
    This provides better maintainability—inheritance, composition, and concern separation.
    You surely know how to assign intended classes to an element via the `el.className`
    property. However, in the real world, the `el.classList` object is much more useful:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 谈到样式，我们 wherever possible 使用CSS类。这提供了更好的可维护性——继承、组合和关注分离。你当然知道如何通过`el.className`属性为元素分配预期的类。然而，在现实世界中，`el.classList`对象要实用得多：
- en: '[PRE14]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Here, in addition to the obvious add/remove/contains methods, we also use `toggle`.
    This method either adds or removes the specified class depending on the Boolean
    passed as the second argument.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，除了明显的添加/删除/包含方法，我们还使用`toggle`。这个方法根据作为第二个参数传递的布尔值，要么添加，要么删除指定的类。
- en: 'Sometimes we need to manipulate styles explicitly. A part of DOM that is called
    **CSS Object Model** (**CSSOM**) provides an interface to manipulate the CSS.
    Thus, we can read or set dynamic styling information on an element using the `el.style`
    property:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 有时我们需要显式地操作样式。DOM的一个部分叫做**CSS对象模型**（**CSSOM**），它提供了一个接口来操作CSS。因此，我们可以使用`el.style`属性读取或设置元素的动态样式信息：
- en: '[PRE15]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'A lesser known technique is to change the actual text of the style rule:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 一个较少为人所知的技巧是改变样式规则的实际文本：
- en: '[PRE16]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: As you can see, the second approach is not that flexible. You cannot change
    or access a single declaration, but only the entire rule. However, styling this
    way is substantially faster ([http://codepen.io/dsheiko/pen/qdvWZj](http://codepen.io/dsheiko/pen/qdvWZj)).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，第二种方法并不那么灵活。你不能改变或访问一个声明，而只能访问整个规则。然而，这种样式的速度显著更快([http://codepen.io/dsheiko/pen/qdvWZj](http://codepen.io/dsheiko/pen/qdvWZj))。
- en: 'While `el.style` comprises explicit styles of an element, `window.getComputedStyle`
    returns inherited (computed) styles:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`el.style`包含了元素的显式样式，但`window.getComputedStyle`返回的是继承（计算）样式：
- en: '[PRE17]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The cases we''ve just examined refer to inline styles. In fact, we can access
    external or internal stylesheets as well:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚检查的情况指的是内联样式。实际上，我们也可以访问外部或内部样式表：
- en: '[PRE18]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Why would we do so? There are special cases. For example, if we want to modify,
    let''s say, pseudo-element style, we have to involve stylesheets:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么我们要这样做呢？因为有特殊情况。例如，如果我们想要修改，比如说，伪元素的样式，我们必须涉及到样式表：
- en: '[PRE19]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Making use of attributes and properties
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 利用属性和属性
- en: 'HTML elements have attributes and we can access them from JavaScript:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: HTML元素有属性，我们可以从JavaScript访问它们：
- en: '[PRE20]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'While element attributes are defined by HTML, the properties are defined by
    DOM. And this makes a difference. For example, if you have an input, initially
    both attribute and property (`el.value`) has the same value. However, when a user
    or a script changes the value, the attribute is not affected but the property
    is:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然HTML定义了元素属性，但属性是由DOM定义的。这造成了区别。例如，如果你有一个输入元素，最初属性和属性（`el.value`）有相同的值。然而，当用户或脚本改变值时，属性不会受到影响，但属性会：
- en: '[PRE21]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'As you may likely know, in addition to global attributes, there is a special
    type—custom data attributes. These attributes are meant to provide an exchange
    of proprietary information between the HTML and its DOM representation, which
    is used by scripts. The general idea is that you define a custom attribute such
    as `data-foo` and set a value to it. Then from a script, we access and change
    the attribute using the `el.dataset` object:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能很可能知道的那样，除了全局属性之外，还有一种特殊类型——自定义数据属性。这些属性旨在提供HTML及其DOM表示之间交换专有信息，由脚本使用。基本想法是，你定义一个自定义属性，如`data-foo`，并为其设置一个值。然后，从脚本中，我们使用`el.dataset`对象访问和改变属性：
- en: '[PRE22]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'If you define a multipart attribute such as `data-foo-bar-baz`, the corresponding
    `dataset` property will be `fooBarBaz`:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你定义了一个多部分属性，如`data-foo-bar-baz`，相应的`dataset`属性将是`fooBarBaz`：
- en: '[PRE23]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Handling DOM events
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理DOM事件
- en: 'Plenty of events happen in the browser. It can be device events (for example,
    the device changes position or orientation), window events (for example, window
    size), a process (for example, page loading), media events (for example, video
    paused), network events (connection status changed), and of course, user interaction
    events (click, keyboard, mouse, and touch). We can make our code listen to these
    events and call the subscribed handler functions when the events occur. To subscribe
    for an event on a DOM element, we use the `addEventListener` method:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中发生了许多事件。这可以是设备事件（例如，设备改变位置或方向），窗口事件（例如，窗口大小），一个过程（例如，页面加载），媒体事件（例如，视频暂停），网络事件（连接状态改变），当然，还有用户交互事件（点击，键盘，鼠标和触摸）。我们可以使我们的代码监听这些事件，并在事件发生时调用订阅的处理函数。要订阅DOM元素的某个事件，我们使用`addEventListener`方法：
- en: '[PRE24]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: In the preceding code, `EventTarget` can be a window, document, an element,
    or other objects such as `XMLHttpRequest`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，`EventTarget`可以是窗口、文档、元素或其他对象，如`XMLHttpRequest`。
- en: '`useCapture` is a Boolean by which you can specify the way you want the event
    to propagate. For example, a user clicks a button, which is in a form, and we
    have subscribed handlers to both elements for this click event. When `useCapture`
    is `true`, the handler of the form element (`ancestor`) will be called first (`capturing
    flow`). Otherwise, forms handler will be called after the button''s handler (`bubbling
    flow`).'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`useCapture`是一个布尔值，你可以指定事件传播的方式。例如，用户点击一个按钮，这个按钮在一个表单中，我们为这个点击事件订阅了两个元素的处理程序。当`useCapture`为`true`时，表单元素的处理程序（`ancestor`）将首先被调用（`capturing
    flow`）。否则，表单的处理程序将在按钮的处理程序之后被调用（`bubbling flow`）。'
- en: '`callback` is a function that is called when an event fires. It receives the
    `Event` object as an argument, which has the following properties:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`callback`是一个在事件触发时调用的函数。它接收一个`Event`对象作为参数，该对象具有以下属性：'
- en: '`Event.type`: This is the name of the event'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Event.type`：这是事件的名字'
- en: '`Event.target`: This is the event target on which the event occurred'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Event.target`：这是事件发生的事件目标'
- en: '`Event.currentTarget`: This is the event target to which the listener was attached
    (`target` and `currentTarget` may differ when we attach the same event handler
    to multiple elements as mentioned at [https://developer.mozilla.org/en-US/docs/Web/API/Event/currentTarget](https://developer.mozilla.org/en-US/docs/Web/API/Event/currentTarget))'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Event.currentTarget`：这是事件目标，监听器附加到该目标（`target`和`currentTarget`可能在我们为多个元素附加相同的事件处理程序时有所不同，如[https://developer.mozilla.org/en-US/docs/Web/API/Event/currentTarget](https://developer.mozilla.org/en-US/docs/Web/API/Event/currentTarget)所述）'
- en: '`Event.eventPhase`: This indicates which phase of the event flow is being evaluated
    (none, capturing, at target, or bubbling)'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Event.eventPhase`：这指示事件流程的哪个阶段正在被评估（无、捕获、目标或冒泡）'
- en: '`Event.bubbles`: This indicates whether or not the event is a bubbling one'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Event.bubbles`：这表明事件是否是冒泡事件'
- en: '`Event.cancelable`: This indicates whether or not the default action for the
    event can be prevented'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Event.cancelable`：这表明是否可以防止事件的默认动作'
- en: '`Event.timeStamp`: This specifies the event time'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Event.timeStamp`：这指定了事件时间'
- en: 'Event also has the following methods:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 事件还有以下方法：
- en: '`Event.stopPropagation()`: This stops further propagation of the event.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Event.stopPropagation()`：这阻止事件进一步传播。'
- en: '`Event.stopImmediatePropagation()`: If we have multiple listeners subscribed
    to the same event target, after calling this method none of remaining listeners
    will be called.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Event.stopImmediatePropagation()`：如果我们有多个监听器订阅了同一个事件目标，在调用这个方法后，剩下的监听器将不会被调用。'
- en: '`Event.preventDefault()`: This prevents the default action. For example, if
    it''s a click event on a button of the submit type, by calling this method we
    prevent it from submitting the form automatically.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Event.preventDefault()`：这阻止默认行为。例如，如果它是一个提交类型的按钮的点击事件，通过调用这个方法，我们可以阻止它自动提交表单。'
- en: 'Let''s try it now in practice:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在实践中试试看：
- en: '[PRE25]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Here, we subscribed an `onClick` listener to a click event on a button element.
    When the button is clicked, it shows in the JavaScript console the button element
    that the form isn't submitted.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们为按钮元素的一个点击事件订阅了一个`onClick`监听器。当按钮被点击时，它会在JavaScript控制台中显示表单没有被提交的事实。
- en: 'If we want to subscribe for keyboard events, we can do this as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要订阅键盘事件，我们可以这样做：
- en: '[PRE26]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The most common example of process events is the document ready status change.
    We can listen to the `DOMContentLoaded` or `load` events. The first one is fired
    when the document has been completely loaded and parsed. The second one also waits
    for stylesheets, images, and subframes to finish loading. Here, there is a quirk.
    We have to check `readyState`, because if we register a listener to an event after
    it has been probably fired, the callback will be never invoked:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 过程事件的最常见例子是文档就绪状态的改变。我们可以监听`DOMContentLoaded`或`load`事件。第一个事件在文档完全加载和解析后触发。第二个事件还等待样式表、图像和子框架加载完成。在这里，有一个怪癖。我们必须检查`readyState`，因为如果在事件可能已经触发后注册一个监听器，回调将永远不会被调用：
- en: '[PRE27]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Well, we know how to subscribe to DOM events with the `EventTarget.addEventListener`
    method. The `EventTarget` objects also have a method to unsubscribe from the listeners.
    For example, see the following:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，我们知道如何使用`EventTarget.addEventListener`方法订阅DOM事件。`EventTarget`对象还有一个方法来取消订阅监听器。例如，请看以下内容：
- en: '[PRE28]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'If we want to trigger a DOM event, for instance to emulate a button click,
    we have to create a new `Event` object, set it up, and dispatch on the element
    when we want the event to fire:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要触发一个DOM事件，例如模拟一个按钮点击，我们必须创建一个新的`Event`对象，设置它，并在我们想要事件触发时在元素上分派：
- en: '[PRE29]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'In the same way, we can create our custom event:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们也可以创建我们自己的自定义事件：
- en: '[PRE30]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Communicating with the server
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与服务器通信
- en: Many people use third-party libraries to make any request to a server. But do
    we need these libraries? Let's examine in the following how AJAX can be used natively
    and what will be the next communication API.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 许多人使用第三方库来向服务器发送任何请求。但我们真的需要这些库吗？让我们在下面的内容中看看如何使用原生的AJAX，以及下一个通信API将是什么。
- en: XHR
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: XHR
- en: '**XMLHttpRequest** (**XHR**) is the main API in JavaScript to exchange data
    between client and server. XHR was firstly presented by Microsoft in IE5 via ActiveX
    (1999) and had a proprietary syntax in IE browser until version 7 (2006). This
    led to compatibility issues that called forth the rise of *AJAX-libraries* such
    as Prototype and jQuery. Today, support for XHR is consistent across all the major
    browsers. In general, to perform an HTML or HTTPS request, we have to do a number
    of tasks. We create an instance of XHR, initialize a request via open method,
    subscribe listeners to request-dependent events, set request headers (`setRequestHeader`),
    and eventually call the send method:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '**XMLHttpRequest**（**XHR**）是JavaScript中用于在客户端和服务器之间交换数据的主要API。XHR最初由微软在IE5中通过ActiveX呈现（1999年），并且在IE浏览器直到版本7（2006年）中都有一种专有的语法。这导致了兼容性问题，促成了*AJAX库*（如Prototype和jQuery）的出现。如今，XHR在所有主流浏览器中的支持都是一致的。通常，要执行一个HTML或HTTPS请求，我们需要完成许多任务。我们创建一个XHR的实例，通过open方法初始化一个请求，为与请求相关的事件订阅监听器，设置请求头（`setRequestHeader`），最后调用send方法：'
- en: '[PRE31]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: More options are available. For example, we can leverage the `progress` and
    `abort` events to control file uploading ([https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest)).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 还有更多选项可用。例如，我们可以利用`progress`和`abort`事件来控制文件上传（[https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest)）。
- en: 'It occurs to me that for a simple call, this interface is overcomplicated.
    There are a plenty of implementations for XHR wrappers on the Internet. One of
    the most popular implementations can be found at [https://github.com/Raynos/xhr](https://github.com/Raynos/xhr).
    It makes the usage of XHR this simple:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我突然想到，对于一个简单的调用，这个接口过于复杂了。互联网上有大量的XHR包装器实现。最流行的实现之一可以在[https://github.com/Raynos/xhr](https://github.com/Raynos/xhr)找到。它使得XHR的使用如此简单：
- en: '[PRE32]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Besides, the library provides a mock object that can be used to replace real
    XHR in unit tests.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，该库还提供了一个模拟对象，可用于在单元测试中替换真实的XHR。
- en: Fetch API
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Fetch API
- en: 'We just examined the XHR API. This looked fine 15 years ago, but now looks
    clumsy. We have to use wrappers to make it more friendly. Luckily, the language
    has evolved and nowadays we have a new built-in method called Fetch API. Just
    consider how easy it is to make a call with it:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚检查了XHR API。这在15年前看起来不错，但现在看起来很笨拙。我们必须使用包装器来使其更友好。幸运的是，语言已经演进，现在我们有一个新的内置方法叫做Fetch
    API。想想使用它进行调用的容易程度：
- en: '[PRE33]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'In spite of the apparent simplicity, the API is pretty powerful. The `fetch`
    method expects in the first mandatory argument either a string with a remote method
    URL or a `Request` object. Request options can be passed in the second optional
    argument:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管表面上很简单，这个API还是很强大的。`fetch`方法期望在第一个强制参数中是一个带有远程方法URL的字符串或者一个`Request`对象。请求选项可以在第二个可选参数中传递：
- en: '[PRE34]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Similar to our previous snippet, the fetch method returns **Promise**. Promises
    are becoming a common practice for asynchronous or deferred operations. The function
    called on the Promise-fulfilled event (see then) receives a `Response` object.
    This function has a number of properties and methods ([https://developer.mozilla.org/en-US/docs/Web/API/Response](https://developer.mozilla.org/en-US/docs/Web/API/Response)).
    So we can convert the response into JSON, text, blob, or stream with corresponding
    methods, and we can obtain request-relative information:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们的上一个片段类似，fetch方法返回**Promise**。Promise对于异步或延时操作已经成为一种常见的实践。在Promise实现时调用的函数（参见then）接收一个`Response`对象。这个函数有许多属性和方法（[https://developer.mozilla.org/en-US/docs/Web/API/Response](https://developer.mozilla.org/en-US/docs/Web/API/Response)）。因此，我们可以使用相应的转换方法将响应转换为JSON、文本、blob或流，并且我们可以获得与请求相关的信息：
- en: '[PRE35]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'What about `POST` requests? Fetch has a mixin called `body` that represents
    the body of the `Response`/`Request`. We can pass the `POST` data through this:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 那么`POST`请求呢？Fetch有一个名为`body`的混合插件，它代表了`Response`/`Request`的正文。我们可以通过这个传递`POST`数据：
- en: '[PRE36]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'It accepts not only key-value pairs, but also, for example, `FormData`, so
    you can submit the whole form including attached files as it is:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 它不仅接受键值对，还可以接受例如`FormData`，所以你可以像这样提交整个表单以及附带的文件：
- en: '[PRE37]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: At the moment, some of the major browsers (for example, IE/Edge, Safari) don't
    support this API. However, if you intend to use Fetch API, you can go with the
    Fetch polyfill ([https://github.com/github/fetch](https://github.com/github/fetch)).
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，一些主流浏览器（例如，IE/Edge、Safari）不支持这个API。然而，如果你打算使用Fetch API，你可以使用Fetch的polyfill([https://github.com/github/fetch](https://github.com/github/fetch))。
- en: Summary
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In the past, every browser's vendors had custom DOM implementations that were
    largely incompatible. However, this has changed, and we have W3C DOM well supported
    among browsers at least for a decade. Today, we can safely use JavaScript native
    API to access, manipulate, and style the DOM.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去，每个浏览器的制造商都有自己定制的DOM实现，这些实现之间几乎不兼容。然而，这种情况已经改变，W3C DOM至少在浏览器中得到了十年的支持。今天，我们可以安全地使用JavaScript原生API来访问、操作和样式化DOM。
- en: In JavaScript, XHR is still the main API to communicate between a client and
    a server. It's not quite developer friendly though. So, we usually write custom
    wrappers for it.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，XHR仍然是客户端与服务器之间通信的主要API。不过它对开发者并不太友好。因此，我们通常为其编写自定义包装器。
- en: However, a new API called Fetch is proposed and already implemented in Chrome,
    Firefox, and Opera. This new API is much easier to use, and compared to XHR, it
    provides a more impressive and flexible features.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，一个新的API，名为Fetch，已经被提出并已经在Chrome、Firefox和Opera中得到实现。这个新API的使用要简单得多，与XHR相比，它提供了更加令人印象深刻且灵活的功能。
