- en: Chapter 9. Adding Menus and Commands
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章. 添加菜单和命令
- en: In this chapter we will learn about the app bar and understand how it works
    and where it is found on the app. Moreover, we will cover how to declare an app
    bar and add controls to it.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习关于应用栏的知识，并了解它是如何工作的，以及在哪里可以找到应用栏。此外，我们还将介绍如何声明应用栏以及向其添加控件。
- en: Understanding the app bar
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解应用栏
- en: When you run a Windows Store app, all you see is a full screen app that allows
    you to be immersed in the content of the app; however, then you ask yourself where
    all the buttons and controls are. They are all contained and hidden in the app
    bar—hidden till you need them, of course—to avoid distractions and make use of
    every pixel on the screen for the content of the app.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行一个Windows商店应用时，你所看到的就是一个全屏应用，它让你能够沉浸在应用的内容中；然而，这时你可能自己会想所有的按钮和控件都去哪了。它们都包含并隐藏在应用栏中——当然，直到你需要它们为止——以避免分散注意力，并让屏幕上的每个像素都用于应用的内容。
- en: The app bar can be found at the bottom of the screen and appears when triggered
    by the user. This can be done with a touch gesture (by tapping or swiping upward
    from the bottom edge or downward from the top edge), using the mouse (by right-clicking),
    or using the keyboard (via the shortcut Windows + *Z*). The app bar typically
    holds the controls that are relevant to the current screen. By default, the controls
    are equally split between the left-hand and right-hand side of the screen. The
    left-hand side contains the commands that are specific to the content that is
    currently being shown in the app and the right-hand side holds the commands that
    are global to the app and apply to all the pages. The app bar can also contain
    commands that are specific to a single element in the app.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 应用栏位于屏幕底部，当用户触发时会出现。这可以通过触摸手势（通过从底部边缘向上轻触或滑动，或从顶部边缘向下轻触），使用鼠标（通过右键点击），或使用键盘（通过Windows
    + *Z*快捷键）来完成。应用栏通常包含与当前屏幕相关的控件。默认情况下，控件在屏幕的左右两侧平均分配。左侧包含当前在应用中显示内容的特定命令，而右侧包含适用于应用所有页面的全局命令。应用栏也可以包含特定于应用中单个元素的命令。
- en: 'Let''s have a look at a sample app bar. The following screenshot shows the
    app bar of the Microsoft Bing app that contains four commands, namely **Copy Link**,
    **Copy**, **Save As**, and **Set As Lock Screen**:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个应用栏的示例。下面的屏幕截图显示了Microsoft Bing应用的应用栏，其中包含四个命令，分别是**复制链接**、**复制**、**另存为**和**设为锁屏背景**：
- en: '![Understanding the app bar](img/7102EN_09_01.jpg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![了解应用栏](img/7102EN_09_01.jpg)'
- en: The app bar's hiding mechanism allows users to focus and get immersed in the
    content and minimizes distractions. It provides the user with consistent and easy
    access to the commands when they need them, and they can easily see or hide the
    app bar.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 应用栏的隐藏机制使用户能够集中精力并沉浸在内容中，同时将干扰降到最低。它在用户需要时提供一致且易于访问的命令，并且他们可以轻松地显示或隐藏应用栏。
- en: When we try to show the app bar using the mouse, touch, or keyboard, another
    bar will appear simultaneously located at the top of the screen. This is the navigation
    bar and though it may look similar, it is not an app bar. The navigation bar is
    used to show controls that help us navigate between different sections of an application.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们尝试使用鼠标、触摸或键盘显示应用栏时，另一个栏会同时出现在屏幕顶部。这是导航栏，虽然它可能看起来很相似，但它并不是应用栏。导航栏用于显示帮助我们导航应用程序不同部分的控制器。
- en: The app bar, if it exists, should always be available to the user and thus adapt
    to changes in the layout between snapped and portrait views. For example, if you
    can't fit all the commands in a snapped view, you can try to group them into menus
    and provide tooltips for the commands, even though Windows will automatically
    hide the labels and adjust the padding accordingly.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果存在应用栏，它应该始终对用户可用，并因此适应用户界面在 snapped 和 portrait 视图之间的变化。例如，如果你在 snapped 视图上看不到所有的命令，你可以尝试将它们组合成菜单并提供命令的提示，尽管Windows会自动隐藏标签并相应地调整内边距。
- en: Tip
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: It is strongly recommended that you do not change the size or the padding of
    buttons that are applied by the default layout provided by `WinJS`, since it is
    designed to fit 10 commands on all supported screen sizes; more importantly, it
    is designed to support touch gestures. Hence, making changes to the layout may
    disrupt this behavior.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 强烈建议你不要更改由`WinJS`提供的默认布局应用的按钮的大小或内边距，因为它是为了在所有支持屏幕大小上适配10个命令而设计的；更重要的是，它还支持触摸手势。因此，更改布局可能会打乱这种行为。
- en: The app bar is made available by the `WinJS` library using the object `WinJS.UI.AppBar`.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 应用栏是由`WinJS`库使用`WinJS.UI.AppBar`对象提供的。
- en: 'It is very trivial to declare an app bar in the markup. We start by creating
    an app bar from a simple `div` element by simply specifying a `WinJS.UI.AppBar`
    control in the `data-win-control` attribute. The syntax will be as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在标记中声明应用栏非常简单。我们从通过指定`data-win-control`属性中的`WinJS.UI.AppBar`控制来从一个简单的`div`元素创建一个应用栏开始。语法如下：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The preceding syntax will create an empty app bar that will be displayed when
    triggered either by a mouse or an upward swipe.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的语法将创建一个空的应用于当通过鼠标或向上滑动触发时显示的应用栏。
- en: 'The app bar is made to contain command buttons, so let''s add a command button
    inside the app bar. In order to create an app bar command button, we will use
    a `button` element and specify its `data-win-control` attribute to be `AppBarCommand`,
    as shown in the following code:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 应用栏是用来包含命令按钮的，所以让我们在应用栏中添加一个命令按钮。为了创建一个应用栏命令按钮，我们将使用一个`button`元素，并指定其`data-win-control`属性为`AppBarCommand`，如下面的代码所示：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The preceding syntax will show the app with an empty command button inside.
    We can add life to this command button by specifying some options in the `data-win-options`
    attribute. These options are as follows:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的语法将在应用中显示一个空的命令按钮。我们可以通过在`data-win-options`属性中指定一些选项来给这个命令按钮添加功能。这些选项如下：
- en: '`type`: This option indicates the type of command from the following values
    – `button`, `toggle`, `separator`, and `flyout`.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type`：此选项用于从以下值指示命令的类型 - `button`、`toggle`、`separator`和`flyout`。'
- en: '`Id`: This option specifies an ID for the command.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Id`：此选项用于指定命令的ID。'
- en: '`label`: This option specifies the text to be displayed on the app bar.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`label`：此选项用于指定应用栏上显示的文本。'
- en: '`Icon`: This option specifies an icon to be displayed for the command either
    by choosing a value from the `AppBarIcon` list provided by Windows, such as `pin`,
    `unpin`, `accept`, `cancel`, and `delete`, or by specifying the path to a custom
    PNG image file.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Icon`：此选项用于指定用于显示命令的图标，可以通过从Windows提供的`AppBarIcon`列表中选择一个值，例如`pin`、`unpin`、`accept`、`cancel`和`delete`，或者通过指定自定义PNG图像文件的路径来指定。'
- en: '`section`: This option indicates the section to which the command belongs,
    either `selection` or `global`. The `selection` section will place the command
    to the left of the app bar, which is reserved for contextual or page-specific
    commands, while the `global` section will place the command to the right, which
    is reserved for global or app-level commands.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`section`：此选项用于指示命令所属的部分，可以是`selection`或`global`。`selection`部分会将命令放在应用栏的左侧，这是为上下文命令或页面特定命令保留的位置，而`global`部分会将命令放在应用栏的右侧，这是为全局命令或应用级别命令保留的位置。'
- en: '`tooltip`: This option specifies an info tooltip (hint) to be displayed when
    the user hovers over the command.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tooltip`：此选项用于指定当用户将鼠标悬停在命令上时显示的信息工具提示（提示）。'
- en: 'The following code shows what the syntax will look like after adding these
    options for the command button that we declared in the previous example:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码显示了在添加这些选项后，我们声明的前一个示例中的命令按钮的语法将如何：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Run the app and you will see an app bar.as shown in the following screenshot:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用，您将看到一个应用栏，如图所示：
- en: '![Understanding the app bar](img/7102EN_09_02.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![了解应用栏](img/7102EN_09_02.jpg)'
- en: As you can see in the preceding screenshot, the app bar contains a button that
    has the placeholder icon, labeled as **Test Command**; when hovered over, it will
    display the tooltip **Command Tooltip**.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在前面的屏幕截图中所见，应用栏包含一个带有占位符图标的按钮，标记为**Test Command**；当鼠标悬停在上面时，将显示工具提示**Command
    Tooltip**。
- en: Adding functionality to the commands
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为命令添加功能
- en: The app bar we just created doesn't really do anything yet, so let's add another
    command and check the other types. But before that, we need a separator between
    the two commands; it can be created using an `hr` element that the app bar contains
    by default in addition to the command buttons.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚创建的应用栏目前还不能做什么，所以让我们添加另一个命令并检查其他类型。但在那之前，我们需要在两个命令之间添加一个分隔符；可以通过应用栏默认包含的`hr`元素来创建它，除了命令按钮之外。
- en: 'The `hr` element will also need to have the `data-win-control="WinJS.UI.AppBarCommand"`
    attribute set on it. The syntax for creating a separator will look like the following
    code:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`hr`元素还需要设置`data-win-control="WinJS.UI.AppBarCommand"`属性。创建分隔符的语法如下所示：'
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'After the separator, we''ll add a new button command but this time we will
    choose the pin icon; the syntax will look as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在分隔符之后，我们将添加一个新的按钮命令，这次我们选择固定图标；语法将如下所示：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Run the app now and you should see two command buttons, one with a pin icon
    and the other with a placeholder icon, and a separator between these two that
    looks like an `hr` element. The following is the screenshot of the resulting app
    bar when the user hovers over the command labeled **Pin to start**:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用，你应该会看到两个命令按钮，一个带有固定图标，另一个带有占位符图标，以及这两个之间的分隔符，看起来像一个`hr`元素。以下是当用户悬停在标有**固定到启动**的命令上时应用栏的结果屏幕快照：
- en: '![Adding functionality to the commands](img/7102EN_09_03.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![为命令添加功能](img/7102EN_09_03.jpg)'
- en: These commands look nice on the app bar but still do nothing when clicked on,
    so let's add some functionality to the **Pin to start** command button and start
    the app pin.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令在应用栏上看起来很不错，但点击后仍然什么也不做，所以让我们给**固定到启动**命令按钮添加一些功能并开始应用固定。
- en: 'To add some functionality to the command buttons, we need to retrieve them
    from the app bar and add to it a `click` event handler. The following code gets
    the app bar and sets it to a variable. Then, it gets the specific command in that
    app bar using its `Id` attribute and attaches a function to its click event:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为了给命令按钮添加一些功能，我们需要从应用栏中获取它们，并为它们添加一个`click`事件处理程序。以下代码获取应用栏并将其设置为变量。然后，它使用应用栏的`Id`属性获取该应用栏中的特定命令，并将其点击事件附加到函数上：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Run the app now and click on the **Pin to start** command button; a pop-up message
    dialog will appear on the screen.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用，并点击**固定到启动**命令按钮；屏幕上将出现一个弹出消息对话框。
- en: 'The app bar is by default located at the bottom of the app and can be changed
    to be at the top of the screen; however, it should contain navigational elements
    that move the user to a different page. The top app bar, according to the Windows
    8 UX guidelines, is a navigational bar. Getting back to the code, we can change
    the location of the app bar from the bottom to the top by simply setting the value
    of the `placement` property of the `data-win-options` attribute in the app bar
    control, as shown in the following code:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 应用栏默认位于应用的底部，可以改为位于屏幕顶部；然而，它应该包含导航元素，以将用户移至不同的页面。根据Windows 8的UX指南，顶部的应用栏是一个导航栏。回到代码，我们可以通过简单地设置应用栏控件的`data-win-options`属性的`placement`属性的值，将应用栏的位置从底部更改为顶部，如下面的代码所示：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: But again, the default and recommended behavior by the UX guidelines is to place
    the app bar at the bottom, since the top bar is reserved for navigational commands.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，再次说明，根据UX指南，默认和推荐的行为是将应用栏放在底部，因为顶部栏留给了导航命令。
- en: 'In the previous examples, we have added the app bar to the main page, `default.html`,
    but in fact the page we should choose to include our app bar in is not arbitrary
    and depends on its scope, as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们已经将应用栏添加到了主页面`default.html`，但实际上我们应该选择包含我们应用栏的页面并不是随意的，它取决于其范围，如下所述：
- en: Add the app bar to the `default.html` page if it contains commands that are
    global and should be available to all the pages
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果应用栏包含全局命令，并且应该对所有页面可用，请将其添加到`default.html`页面。
- en: Add the app bar to a specific page (a `PageControl` object) if it contains commands
    that are specific to one page and will differ between a page and another
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果某个页面（一个`PageControl`对象）包含特定于该页面的命令，并且与其他页面不同，那么请将应用栏添加到该页面。
- en: Alternatively, we can define a default app bar in the main `default.html` file
    and then do the required modifications on the app bar on the load event of that
    particular page, which requires different commands from the default.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，我们可以在主`default.html`文件中定义一个默认应用栏，然后在该特定页面的加载事件上对应用栏进行所需的修改，这需要与默认命令不同的命令。
- en: Summary
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we saw what app bars are and where we can place the commands
    and controls for the app. We also learned about the difference between an app
    bar and a navigational bar. We saw what app bar commands are and the different
    options they can hold. Then we saw how to create a simple app bar containing commands
    and separators.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了应用栏是什么以及我们可以在哪里放置应用的命令和控件。我们还学习了应用栏和导航栏之间的区别。我们看到了应用栏命令是什么以及它们可以持有的不同选项。然后，我们看到了如何创建一个包含命令和分隔符的简单应用栏。
- en: Finally, we saw how to add basic functionality to any command type on the app
    bar.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们了解了如何向应用栏上的任何命令类型添加基本功能。
- en: In the next chapter we will reach the final destination of a Windows Store app;
    that is, submitting to the Store itself, and we will learn how to publish the
    app to the Store from Visual Studio and handle the app configuration on the dashboard.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将到达Windows Store应用的最终目的地；那就是，提交到商店本身，我们将学习如何从Visual Studio将应用发布到商店，并在仪表板上处理应用配置。
