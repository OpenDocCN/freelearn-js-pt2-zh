- en: Chapter 12. Testing in Meteor
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第12章. Meteor中的测试
- en: In this final chapter, we will discuss how we can test a Meteor app.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个最后的章节中，我们将讨论我们如何测试一个Meteor应用。
- en: Testing is a comprehensive topic and it goes beyond the scope of this chapter.
    To keep it simple, we will briefly cover two tools available, as they are certainly
    different, and show a simple example for each.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 测试是一个广泛的话题，超出了本章的范围。为了简化，我们将简要介绍两种可用的工具，因为它们确实不同，并为每种工具提供一个简单的示例。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下主题：
- en: Testing the `reactive-timer` package
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试 `reactive-timer` 包
- en: Using Jasmine to conduct unit tests on our app
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Jasmine对我们应用进行单元测试
- en: Using Nightwatch to conduct acceptance tests on our app
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Nightwatch对我们应用进行验收测试
- en: Note
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you want to jump right into the chapter and follow the examples, download
    the code of [Chapter 10](part0086_split_000.html#page "Chapter 10. Deploying Our
    App"), *Deploying Our App*, which contains the finished example app, either from
    the book's web page at [https://www.packtpub.com/books/content/support/17713](https://www.packtpub.com/books/content/support/17713)
    or from the GitHub repository at [https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter10](https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter10).
  id: totrans-8
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你想要直接进入章节并跟随示例，请下载[第10章](part0086_split_000.html#page "第10章. 部署我们的应用")，*部署我们的应用*的代码，它包含了完成的示例应用，可以从书籍的网页[https://www.packtpub.com/books/content/support/17713](https://www.packtpub.com/books/content/support/17713)或从GitHub仓库[https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter10](https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter10)获取。
- en: Types of tests
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试类型
- en: Tests are pieces of code that test other pieces of code or functionality of
    an app.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 测试是用来验证其他代码或应用功能的代码片段。
- en: 'We can divide tests into four general groups:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将测试分为四个主要组：
- en: '**Unit test**: In this test, we test only a small unit of our code. This can,
    for example, be a function or a piece of code. Unit tests should not call other
    functions, write to the hard disk or database, or access the network. If such
    functionality is needed, one should write stubs, which are functions that return
    the expected value without calling the real function.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单元测试**：在这个测试中，我们只测试我们代码的小单元。这可以，例如，是一个函数或一段代码。单元测试不应该调用其他函数，向硬盘或数据库写入，或访问网络。如果需要这样的功能，应该编写桩函数，这些函数返回期望的值而不调用真正的函数。'
- en: '**Integrations test**: In this test, we combine multiple tests and run them
    in different environments to make sure that they still work. The difference in
    this test compared to the unit test is that we are actually running connected
    functionalities, such as calling the database.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集成测试**：在这个测试中，我们将多个测试结合起来，在不同的环境中运行它们，以确保它们仍然有效。与单元测试相比，这个测试的不同之处在于，我们实际上是在运行连接的功能，比如调用数据库。'
- en: '**Functional test**: This can be a unit test or tests in the interface, but
    will only test the functionality of a feature/function without checking for side
    effects, such as whether or not variables were cleaned up properly.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**功能测试**：这可以是单元测试或界面测试，但只测试功能特性/函数的功能，而不检查副作用，例如是否适当地清理了变量。'
- en: '**Acceptance test**: This runs tests on the full system, which can, for example,
    be a web browser. The idea is to mimic the actual user as much as possible. These
    tests are very similar to user stories that define a feature. The downside is
    that they make it hard to track down bugs, as the test occurs on a higher level.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**验收测试**：这个测试在完整的系统上运行，例如，一个网络浏览器。想法是尽可能地模仿实际用户。这些测试与定义功能的用户故事非常相似。这种测试的缺点是，它使得追踪错误变得困难，因为测试发生在较高的层次。'
- en: In the following examples, we will mostly write functional tests for simplicity.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，我们主要会为了简化而编写功能测试。
- en: Testing packages
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试包
- en: In the previous chapter, we built a package out of the `ReactiveTimer` object.
    A good package should always contain unit tests so that people can run them and
    be sure that changes to that package don't break its functionality.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们基于 `ReactiveTimer` 对象构建了一个包。一个好的包应该总是包含单元测试，这样人们就可以运行它们，并确信对该包所做的更改不会破坏其功能。
- en: 'Meteor provides a simple unit test tool for packages, called `TinyTest`, which
    we will use to test our package:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Meteor为包提供了一个简单的单元测试工具，称为 `TinyTest`，我们将使用它来测试我们的包：
- en: 'To add tests, we need to copy the `meteor-book:reactive-timer` package, which
    we built in the previous chapter, to the `my-meteor-blog/packages` folder of our
    app. This way, we can make changes to the package, as Meteor will prefer the package
    in the `packages` folder over one in its package servers. If you removed the package,
    simply add it back using the following command:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要添加测试，我们需要将我们在上一章中构建的`meteor-book:reactive-timer`包复制到我们应用的`my-meteor-blog/packages`文件夹中。这样，我们可以修改包，因为Meteor将优先选择`packages`文件夹中的包而不是其包服务器中的包。如果你移除了包，只需使用以下命令将其重新添加：
- en: '[PRE0]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Additionally, we need to make sure we delete the `my-meteor-blog/client/ReactiveTimer.js`
    file, which we should have if we used the code example from [Chapter 10](part0086_split_000.html#page
    "Chapter 10. Deploying Our App"), *Deploying Our App*, as a basis.
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此外，我们需要确保我们删除`my-meteor-blog/client/ReactiveTimer.js`文件，如果我们使用了来自[第10章](part0086_split_000.html#page
    "Chapter 10. Deploying Our App") *部署我们的应用* 的代码示例作为基础的话，我们应该有的。
- en: 'Then we open the `package.js` file from our `packages` folder and add the following
    lines of code to the end of the file:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们打开我们`packages`文件夹中的`package.js`文件，并在文件的末尾添加以下几行代码：
- en: '[PRE1]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This will include our `meteor-book:reactive-timer` package and `tinytest` when
    running tests. It will then run the `tests.js` file, which will contain our unit
    tests.
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将包括我们的`meteor-book:reactive-timer`包和`tinytest`，在运行测试时。然后它将运行`tests.js`文件，其中将包含我们的单元测试。
- en: Now, we can create the tests by adding a folder called `tests` to our package's
    folder and create a file called `tests.js` inside.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以通过在我们的包文件夹中添加一个名为`tests`的文件夹，并在其中创建一个名为`tests.js`的文件来创建测试。
- en: Currently, the `tinytest` package is not documented by Meteor, but it is tiny,
    which means it is very simple.
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 目前，`tinytest`包没有被Meteor文档化，但它很小，这意味着它非常简单。
- en: Basically, there are two functions, `Tinytest.add(test)` and `Tinytest.addAsync(test,
    expect)`. They both run a simple test function, which we can pass or fail using
    `test.equal(x, y)`, `test.isTrue(x)`, or `test.isUndefined(x)`.
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 基本上，有两个函数，`Tinytest.add(test)`和`Tinytest.addAsync(test, expect)`。它们都运行一个简单的测试函数，我们可以使用`test.equal(x,
    y)`，`test.isTrue(x)`，或`test.isUndefined(x)`来通过或失败这个函数。
- en: For our package tests, we will simply test whether `ReactiveTimer._intervalId`
    is not null after we started the timer, and we will know whether the timer runs
    or not.
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于我们的包测试，我们将简单地测试在启动计时器后`ReactiveTimer._intervalId`是否不再为null，这样我们就可以知道计时器是否运行了。
- en: Adding package tests
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加包测试
- en: The test is built by first describing what will be tested.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 测试首先描述将要测试的内容。
- en: 'To test for `_intervalId`, we add the following lines of code to our `tests.js`
    file:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试`_intervalId`，我们在我们的`tests.js`文件中添加以下几行代码：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Then we start a timer and test whether its `_intervalId` property is not null
    anymore. At the end, we stop the timer again to clean up the test.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们启动一个计时器，并测试其`_intervalId`属性是否不再为null。最后，我们再次停止计时器以清理测试。
- en: 'The next test we will add to our `tests.js` file will be asynchronous, as we
    need to wait for the timer to run at least once:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将把我们`tests.js`文件中要添加的下一个测试设置为异步，因为我们需要等待计时器至少运行一次：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Let''s take a look at what is happening in this asynchronous test:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看这个异步测试中发生了什么：
- en: First, we started the timer again with an interval of 1 second and created a
    variable called `run`. We then switched this variable to `true` only when our
    reactive `Tracker.autorun()` function ran. Note that we used `if(!c.firstRun)`
    to prevent the `run` variable from being set when the function runs the first
    it's executed, as we only want the "tick" after 1 second to count.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，我们再次以1秒的间隔启动计时器，并创建了一个名为`run`的变量。我们只在我们的反应式`Tracker.autorun()`函数运行时将这个变量切换为`true`。请注意，我们使用了`if(!c.firstRun)`来防止在函数第一次执行时设置`run`变量，因为我们只希望在1秒后的“滴答”计数。
- en: We then used the `Meteor.setTimeout()` function to check whether `run` was changed
    to `true`. The `expect()` tells `Tinytest.addAsync()` that the test is over and
    outputs the result. Note that we also stopped the timer, as we always need to
    clean up after each test.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后我们使用`Meteor.setTimeout()`函数检查`run`是否被更改为`true`。`expect()`告诉`Tinytest.addAsync()`测试已经结束并输出结果。请注意，我们还停止了计时器，因为我们需要在每个测试后清理。
- en: Running the package tests
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行包测试
- en: 'To finally run the test, we can run the following command from our app''s root
    folder:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 要最终运行测试，我们可以从我们应用的根目录运行以下命令：
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This will start a Meteor app and run our package tests. To see them, we navigate
    to `http://localhost:3000`:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动一个Meteor应用并运行我们的包测试。要查看它们，我们导航到`http://localhost:3000`：
- en: '![Running the package tests](img/00035.jpeg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![运行包测试](img/00035.jpeg)'
- en: Tip
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'We can also run a test for more than one package at the same time by naming
    multiple packages separated by spaces:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以通过命名由空格分隔的多个包来同时运行一个以上的包测试：
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To see if the test works, we will deliberately make it fail by commenting out
    `Meteor.setInterval()` in the `my-meteor-book/packages/reactive-timer/ReactiveTimer.js`
    file, as shown in the following screenshot:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 为了看看测试是否有效，我们将通过注释掉 `my-meteor-book/packages/reactive-timer/ReactiveTimer.js`
    文件中的 `Meteor.setInterval()` 来故意使它失败，如下所示：
- en: '![Running the package tests](img/00036.jpeg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![运行包测试](img/00036.jpeg)'
- en: We should always try to make our test fail, as a test could also be written
    in a way that it never succeeds or fails (for example, when `expect()` was never
    called). This would stop the execution of other tests, as the current one could
    never finish.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该始终尝试使我们的测试失败，因为一个测试也可能是编写成永远不会成功或失败的方式（例如，当 `expect()` 从未被调用时）。这将阻止其他测试的执行，因为当前的测试可能永远不会完成。
- en: A good rule of thumb is to test functionality as if we are looking at a black
    box. If we customize our tests too much depending on how a function is written,
    we will have a hard time fixing tests as we improve our functions.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 一个好的经验法则是，测试功能时要好像我们正在看一个黑箱。如果我们根据函数是如何编写的来过度定制我们的测试，那么在我们改进函数时修复测试会比较困难。
- en: Testing our meteor app
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试我们的 Meteor 应用
- en: To test the app itself, we can use Velocity Meteor's official testing framework.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试应用本身，我们可以使用 Velocity Meteor 的官方测试框架。
- en: Velocity itself doesn't contain tools for testing, but rather gives testing
    packages such as Jasmine or Mocha a unified way to test Meteor apps and report
    their output in the console or the apps interface itself using the `velocity:html-reporter`
    package.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Velocity 本身不包含测试工具，而是为诸如 Jasmine 或 Mocha 等测试包提供了一种统一的方式来测试 Meteor 应用，并使用 `velocity:html-reporter`
    包在控制台或应用界面本身报告它们的输出。
- en: 'Let''s quote their own words:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们引用他们自己的话：
- en: '*Velocity watches your tests/ directory and sends test files to the correct
    testing plugin. The testing plugin performs the tests and sends results for each
    test back to Velocity as they complete. Velocity then combines the results from
    all of the testing plugins and outputs them via one or more reporting plugins.
    When the app or tests change, Velocity will rerun your tests and reactively update
    the results.*'
  id: totrans-57
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*Velocity 监控您的 tests/ 目录，并将测试文件发送到正确的测试插件。测试插件执行测试，并在完成后将每个测试的结果发送回 Velocity。然后
    Velocity 结合所有测试插件的结果，并通过一个或多个报告插件输出它们。当应用或测试发生变化时，Velocity 将重新运行您的测试并反应性地更新结果。*'
- en: This is taken from [http://velocity.meteor.com](http://velocity.meteor.com).
    Additionally, Velocity adds features such as Meteor stubs and automatic stubbing.
    It can create mirror apps for isolated testing and run setup code (fixtures).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这段内容来自 [http://velocity.meteor.com](http://velocity.meteor.com)。此外，Velocity
    还增加了诸如 Meteor 存根和自动存根等功能。它能够为隔离测试创建镜像应用，并运行设置代码（测试数据）。
- en: We will now take a look at unit and integration tests using Jasmine and acceptance
    tests using Nightwatch.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将查看使用 Jasmine 的单元测试和使用 Nightwatch 的验收测试。
- en: Testing using Jasmine
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Jasmine 测试
- en: To use Jasmine with Velocity, we need to install the `sanjo:jasmine` package
    along with the `velocity:html-reporter` package.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用 Jasmine 和 Velocity，我们需要安装 `sanjo:jasmine` 包以及 `velocity:html-reporter`
    包。
- en: 'To do this, we''ll run the following command from inside our apps folder:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们将从我们的 apps 文件夹内运行以下命令：
- en: '[PRE6]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Then we install Jasmine for Meteor using the following command:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用以下命令为 Meteor 安装 Jasmine：
- en: '[PRE7]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In order that Velocity can find the tests, we need to create the following
    folder structure:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让 Velocity 能够找到测试，我们需要创建以下文件结构：
- en: '[PRE8]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now, when we start the Meteor server using `$ meteor`, we will see that the
    Jasmine package has already created two files in the `/my-meteor-blog/tests/jasmine/server/unit`
    folder, which contains stubs for our packages.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们使用 `$ meteor` 启动 Meteor 服务器时，我们会发现 Jasmine 包已经在 `/my-meteor-blog/tests/jasmine/server/unit`
    文件夹中创建了两个文件，其中包含我们包的存根。
- en: Adding unit tests to the server
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向服务器添加单元测试
- en: 'Now we can add unit tests to the client and the server. In this book, we will
    only add a unit test to the server and later add integration tests to the client
    to stay within the scope of this chapter. The steps to do so are as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以向客户端和服务器添加单元测试。在这本书中，我们将只向服务器添加一个单元测试，稍后向客户端添加集成测试，以保持在本书章节的范围内。这样做步骤如下：
- en: 'First, we create a file called `postSpecs.js` within the `/my-meteor-blog/tests/jasmine/server/unit`
    folder and add the following command:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们在 `/my-meteor-blog/tests/jasmine/server/unit` 文件夹中创建一个名为 `postSpecs.js`
    的文件，并添加以下命令：
- en: '[PRE9]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This will create a test frame describing what the test inside will be about.
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将创建一个描述测试内部将涉及什么的测试框架。
- en: 'Inside the test frame, we call the `beforeEach()` and `afterEach()` functions,
    which will run before and after each test, respectively. Inside, we will create
    stubs for all Meteor functions using `MeteorStubs.install()` and clean them afterwards
    using `MeteorStubs.uninstall()`:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在测试框架内，我们调用`beforeEach()`和`afterEach()`函数，这两个函数分别在每个测试之前和之后运行。在其中，我们将使用`MeteorStubs.install()`为所有的Meteor函数创建桩，并使用`MeteorStubs.uninstall()`之后清理它们：
- en: '[PRE10]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A stub is a function or object that mimics its original function or object,
    but doesn't run actual code. Instead, a stub can be used to return a specific
    value that the function we test depends on.
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 桩是一个模仿其原始函数或对象的功能或对象，但不会运行实际代码。相反，桩可以用来返回函数我们测试依赖的特定值。
- en: Stubbing makes sure that a unit test tests only a specific unit of code and
    not its dependencies. Otherwise, a break in a dependent function or object would
    cause a chain of other tests to fail, making it hard to find the actual problem.
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 桩确保单元测试只测试特定的代码单元，而不是它的依赖。否则，依赖函数或对象的一个断裂会导致其他测试链失败，使得找到实际问题变得困难。
- en: 'Now we can write the actual test. In this example, we will test whether the
    `insertPost` method we created previously in the book inserts the post, and makes
    sure that no duplicate slug will be inserted:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以编写实际的测试。在这个例子中，我们将测试我们之前在书中创建的`insertPost`方法是否插入了帖子，并确保不会插入重复的slug：
- en: '[PRE11]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: First, we create stubs for all the functions we are using inside the `insertPost`
    method to make sure that they return what we want.
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 首先，我们为`insertPost`方法中使用的所有函数创建桩，以确保它们返回我们想要的结果。
- en: Especially, take a look at the `spyOn(Posts, "findOne")` call. As we can see,
    we call a fake function and return a fake document with just a title. Actually,
    we can return anything as the `insertPost` method only checks whether a document
    with the same slug was found or not.
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 特别是，看看`spyOn(Posts, "findOne")`调用。正如我们可以看到的，我们调用了一个假函数，并返回了一个只有标题的假文档。实际上，我们可以返回任何东西，因为`insertPost`方法只检查是否找到了具有相同slug的文档。
- en: 'Next, we actually call the method and give it some post data:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们实际上调用该方法并给它一些帖子数据：
- en: '[PRE12]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Inside the callback of the method, we add the actual tests:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在方法的回调内，我们添加了实际的测试：
- en: '[PRE13]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: First, we check whether the error object is null. Then we check whether the
    resultant slug of the method contains the `'my-title'` string. Because we returned
    a fake document in the `Posts.findOne()` function earlier, we expect our method
    to add some random number to the slug such as `'my-title-fotvadydf4rt3xr'`. Therefore,
    we check whether the length is bigger than the eight characters of the original
    `'my-title'` string.
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 首先，我们检查错误对象是否为null。然后我们检查方法生成的slug是否包含`'my-title'`字符串。因为我们在较早的`Posts.findOne()`函数中返回了一个假文档，所以我们期望我们的方法会给slug添加一些随机数，比如`'my-title-fotvadydf4rt3xr'`。因此，我们检查其长度是否大于原始`'my-title'`字符串的八个字符。
- en: At last, we check whether the `Post.insert()` function was called with the expected
    values.
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最后，我们检查`Post.insert()`函数是否被调用了期望的值。
- en: Note
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To fully understand how you can test Jasmine, take a look at the documentation
    at [https://jasmine.github.io/2.0/introduction.html](https://jasmine.github.io/2.0/introduction.html).
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了完全理解如何测试Jasmine，请查看文档[https://jasmine.github.io/2.0/introduction.html](https://jasmine.io/2.0/introduction.html)。
- en: You can also find a good cheat sheet of Jasmine functions at [http://www.cheatography.com/citguy/cheat-sheets/jasmine-js-testing](http://www.cheatography.com/citguy/cheat-sheets/jasmine-js-testing).
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你也可以在[http://www.cheatography.com/citguy/cheat-sheets/jasmine-js-testing](http://www.cheatography.com/citguy/cheat-sheets/jasmine-js-testing)找到一个很好的Jasmine函数速查表。
- en: 'Finally, we close the `describe(...` function at the beginning:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们关闭开始时的`describe(...`函数：
- en: '[PRE14]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: If we now start our Meteor app again using `$ meteor`, after a while we'll see
    a green dot appearing in the top-right corner.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在再次使用`$ meteor`启动我们的Meteor应用，过一会儿我们会在右上角看到一个绿色点。
- en: 'Clicking on this dot gives us access to Velocity''s `html-reporter` and it
    should show us that our test has passed:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 点击这个点可以让我们访问Velocity的`html-reporter`，它应该能显示我们的测试已经通过：
- en: '![Adding unit tests to the server](img/00037.jpeg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![向服务器添加单元测试](img/00037.jpeg)'
- en: 'To make our test fail, let''s go to our `my-meteor-blog/methods.js` file and
    comment out the following lines:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使我们的测试失败，让我们去到我们的`my-meteor-blog/methods.js`文件，并将以下行注释掉：
- en: '[PRE15]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This will prevent the slug from getting changed, even if a document with the
    same slug already exists, and fail our test. If we go back and check in our browser,
    we should see the test as failed:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这将防止slug被更改，即使已经存在具有相同slug的文档，也会使我们的测试失败。如果我们回头在浏览器里检查，我们应该会看到测试失败：
- en: '![Adding unit tests to the server](img/00038.jpeg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![向服务器添加单元测试](img/00038.jpeg)'
- en: We can add more tests by just adding a new `it('should be xyz', function() {...});`
    function.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需通过添加新的`it('应该是什么', function() {...});`函数来添加更多测试。
- en: Adding integration tests to the client
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向客户端添加集成测试
- en: Adding integration tests is as simple as adding unit tests. The difference is
    that all the test specification files go to the `my-meteor-blog/tests/jasmine/client/integration`
    folder.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 添加集成测试与添加单元测试一样简单。区别在于所有的测试规格文件都放到`my-meteor-blog/tests/jasmine/client/integration`文件夹里。
- en: Integration tests, unlike unit tests, run in the actual app environment.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 与单元测试不同，集成测试在实际应用环境中运行。
- en: Adding a test for the visitors
  id: totrans-105
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 为访客添加测试
- en: In our first example test, we will test to ensure that visitors can't see the
    **Create Post** button. In the second test, we will log in as an administrator
    and check whether we are able to see it.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们第一个示例测试中，我们将测试确保访客看不到**创建文章**按钮。在第二个测试中，我们将以管理员身份登录，检查我们是否能看到它。
- en: Let's create a file named `postButtonSpecs.js` in our `my-meteor-blog/tests/jasmine/client/integration`
    folder.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在我们`my-meteor-blog/tests/jasmine/client/integration`文件夹里创建一个名为`postButtonSpecs.js`的文件。
- en: 'Now we add the following code snippet to the file and save it:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们向文件添加以下代码片段并保存它：
- en: '[PRE16]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Here we add the `home` template to a `div` again, but this time we log in as
    an admin user, using our admin credentials. After we have logged in, we call `Tracker.afterFlush()`
    to give Meteor time to re-render the template and then check whether the button
    is now present.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们再次向一个`div`中添加`home`模板，但这次我们使用管理员凭据以管理员身份登录。登录后，我们调用`Tracker.afterFlush()`给Meteor时间重新渲染模板，然后检查按钮是否现在出现。
- en: Because this test runs asynchronously, we need to call the `done()` function,
    which we passed as an argument to the `it()` function, telling Jasmine that the
    test is over.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 因为这个测试是异步运行的，我们需要调用`done()`函数，这个函数是作为`it()`函数的参数传递的，告诉Jasmine测试结束了。
- en: Note
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Our credentials inside the test file are secure, as Meteor doesn't bundle files
    in the `tests` directory.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Meteor不会把文件捆绑在`tests`目录里，我们测试文件里的凭据是安全的。
- en: 'If we now go back to our browser, we should see the two integration tests as
    passed:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在回到浏览器，我们应该会看到两个集成测试通过了：
- en: '![Adding a test for the admin](img/00040.jpeg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![为管理员添加测试](img/00040.jpeg)'
- en: After creating a test, we should always make sure we try to fail the test to
    see whether it actually works. To do so, we can simply comment out the `a.createNewPost`
    link in `my-meteor-blog/client/templates/home.html`.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 创建测试后，我们总是应该确保尝试失败测试以查看它是否真的工作。为此，我们只需在`my-meteor-blog/client/templates/home.html`中注释掉`a.createNewPost`链接。
- en: Note
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can run Velocity tests using PhantomJS as follows:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用PhantomJS如下运行Velocity测试：
- en: '[PRE19]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: You first need to install PhantomJS globally with `$ npm install -g phantomjs`.
    Be aware that this feature is experimental at the time of writing this book and
    might not run all your tests.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 首先需要全局安装PhantomJS，使用`$ npm install -g phantomjs`。请注意，撰写此书时此特性是实验性的，可能运行不了你的所有测试。
- en: Acceptance tests
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验收测试
- en: Though we can test client and server code separately with these tests, we can't
    test the interaction between the two. For this, we need acceptance tests, which,
    if explained in detail, would go beyond the scope of this chapter.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们可以用这些测试分别测试客户端和服务器代码，但我们不能测试两者之间的交互。为此，我们需要验收测试，如果详细解释，将超出本章节的范围。
- en: At the time of this writing, there is no acceptance testing framework that is
    implemented using Velocity, though there are two you can use.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文的时候，还没有使用Velocity实施的验收测试框架，尽管有两个你可以使用。
- en: Nightwatch
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Nightwatch
- en: 'The `clinical:nightwatch` package allows you to run an acceptance test in a
    simple way as follows:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`clinical:nightwatch`包让你能简单地运行验收测试，如下所示：'
- en: '[PRE20]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Though the installation process is not as straightforward as installing a Meteor
    package, you need to install and run MongoDB and PhantomJS yourself before you
    can run the tests.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管安装过程不像安装Meteor包那样直接，但在运行测试之前，你自己需要安装并运行MongoDB和PhantomJS。
- en: If you want to give it a try, check out the package on atmosphere-javascript
    website at [https://atmospherejs.com/clinical/nightwatch](https://atmospherejs.com/clinical/nightwatch).
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想尝试一下，请查看atmosphere-javascript网站上的包：[https://atmospherejs.com/clinical/nightwatch](https://atmospherejs.com/clinical/nightwatch)。
- en: Laika
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Laika
- en: If you want to test the communication between the server and the client, you
    can use Laika. Its installation process is similar to Nightwatch, as it requires
    separate MongoDB and PhantomJS installations.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想测试服务器与客户端之间的通信，可以使用Laika。它的安装过程与Nightwatch相似，因为它需要单独安装MongoDB和PhantomJS。
- en: Laika spins up a server instance and connects multiple clients. You then can
    set up subscriptions or insert and modify documents. You can also test their appearance
    in the clients.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: Laika启动一个服务器实例并连接多个客户端。然后你可以设置订阅或插入并修改文档。你还可以测试它们在客户端的外观。
- en: To install Laika, go to [http://arunoda.github.io/laika/](http://arunoda.github.io/laika/).
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Laika，请访问[http://arunoda.github.io/laika/](http://arunoda.github.io/laika/)。
- en: Note
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: At the time of this writing, Laika is not compatible with Velocity, which tries
    to run all the files in the test folder in Laika's environment, causing errors.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，Laika与Velocity不兼容，后者试图在Laika的环境中运行测试文件夹中的所有文件，导致错误。
- en: Summary
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this final chapter, we learned how to write simple unit tests using the `sanjo:jasmine`
    package for Meteor's official testing framework, Velocity. We also took a brief
    look at possible acceptance test frameworks.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在这最后一章中，我们学习了如何使用Meteor官方测试框架Velocity的`sanjo:jasmine`包编写简单的单元测试。我们还简要介绍了可能的验收测试框架。
- en: 'If you want to dig deeper into testing, you can take a look at the following
    resources:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想更深入地了解测试，可以查看以下资源：
- en: '[http://velocity.meteor.com](http://velocity.meteor.com)'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://velocity.meteor.com](http://velocity.meteor.com)'
- en: '[http://jasmine.github.io](http://jasmine.github.io)'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://jasmine.github.io](http://jasmine.github.io)'
- en: '[http://www.cheatography.com/citguy/cheat-sheets/jasmine-js-testing](http://www.cheatography.com/citguy/cheat-sheets/jasmine-js-testing)'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.cheatography.com/citguy/cheat-sheets/jasmine-js-testing](http://www.cheatography.com/citguy/cheat-sheets/jasmine-js-testing)'
- en: '[http://doctorllama.wordpress.com/2014/09/22/bullet-proof-internationalised-meteor-applications-with-velocity-unit-testing-integration-testing-and-jasmine/](http://doctorllama.wordpress.com/2014/09/22/bullet-proof-internationalised-meteor-applications-with-velocity-unit-testing-integration-testing-and-jasmine/)'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://doctorllama.wordpress.com/2014/09/22/bullet-proof-internationalised-meteor-applications-with-velocity-unit-testing-integration-testing-and-jasmine/](http://doctorllama.wordpress.com/2014/09/22/bullet-proof-internationalised-meteor-applications-with-velocity-unit-testing-integration-testing-and-jasmine/)'
- en: '[http://arunoda.github.io/laika/](http://arunoda.github.io/laika/)'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://arunoda.github.io/laika/](http://arunoda.github.io/laika/)'
- en: '[https://github.com/xolvio/velocity](https://github.com/xolvio/velocity)'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/xolvio/velocity](https://github.com/xolvio/velocity)'
- en: You can find this chapter's code files at [https://www.packtpub.com/books/content/support/17713](https://www.packtpub.com/books/content/support/17713)
    or on GitHub at [https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter12](https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter12).
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这本书的代码文件在[https://www.packtpub.com/books/content/support/17713](https://www.packtpub.com/books/content/support/17713)或者在GitHub上[https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter12](https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter12)找到。
- en: Now that you have read the whole book, I assume you know a lot more about Meteor
    than before and are as excited about this framework as I am!
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 既然你已经读完了整本书，我假设你对Meteor的了解比以前多了很多，对这个框架也和我一样兴奋！
- en: If you have any questions concerning Meteor, you can always ask them at [http://stackoverflow.com](http://stackoverflow.com),
    which has a great Meteor community.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 关于Meteor的任何问题，你都可以在[http://stackoverflow.com](http://stackoverflow.com)上提问，那里有一个很棒的Meteor社区。
- en: I also recommend reading through all Meteor subprojects at [https://www.meteor.com/projects](https://www.meteor.com/projects),
    and study the documentation at [https://docs.meteor.com](https://docs.meteor.com).
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我还建议阅读[https://www.meteor.com/projects](https://www.meteor.com/projects)上的所有Meteor子项目，并研究[https://docs.meteor.com](https://docs.meteor.com)上的文档。
- en: I hope you had a great time reading this book and you're now ready to start
    making great apps using Meteor!
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你能享受阅读这本书的过程，现在你已经准备好使用Meteor框架来制作伟大的应用程序了！
- en: Appendix A. Appendix
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录 A. 附录
- en: This appendix contains a list of Meteor's command-line tool commands and a short
    description of `iron:router` hooks.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 附录中包含Meteor命令行工具的命令列表和对`iron:router`钩子的简要描述。
- en: List of Meteor's command-line tool commands
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命令行工具命令列表
- en: '| Option | Description |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| 选项 | 描述 |'
- en: '| --- | --- |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `run` | Using `meteor run` is the same as using `meteor`. This will start
    a Meteor server for our app and watch file changes. |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| `run` | 使用`meteor run`与使用`meteor`相同。这将为我们应用启动一个Meteor服务器并监控文件更改。 |'
- en: '| `create <name>` | This will initialize a Meteor project by creating a folder
    with the same name with some initial files. |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| `create <名称>` | 这将通过创建一个同名的文件夹来初始化一个Meteor项目，并有一些初始文件。 |'
- en: '| `update` | This will update our current Meteor app to the latest release.
    We can also use `meteor update --release xyz` to fix our Meteor app to a specific
    release. |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| `update` | 这将更新我们当前的Meteor应用到最新版本。我们还可以使用`meteor update --release xyz`来将我们的Meteor应用修复到一个特定的版本。
    |'
- en: '| `deploy <site name>` | This will deploy our Meteor app to`<site name>.meteor.com`.We
    can pass the `--delete` option to remove a deployed app |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| `deploy <站点名称>` | 这将把我们的Meteor应用部署到`<站点名称>.meteor.com`。我们可以传递`--delete`选项来删除一个已部署的应用
    |'
- en: '| `build <folder_name>` | This will create a folder with our bundled app(s)
    code ready to be deployed on our own server. |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| `build <文件夹名称>` | 这将创建一个文件夹，其中包含我们捆绑的应用代码，准备部署到我们自己的服务器。 |'
- en: '| `add/remove <package name>` | This will add or remove a Meteor core package
    to/from our project. |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| `add/remove <包名称>` | 这将向/从我们的项目中添加或删除一个Meteor核心包。 |'
- en: '| `list` | This will list all Meteor packages our app is using. |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| `list` | 这将列出我们的应用正在使用的所有Meteor包。 |'
- en: '| `mongo` | This will give us access to our local MongoDB shell. We need to
    also have our application started with `meteor run` at the same time.If we need
    access to the mongo database of a app deployed on [meteor.com](http://meteor.com),
    use `$ meteor mongo yourapp.meteor.com --url`But be aware that these credentials
    are only valid for 1 minute. |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| `mongo` | 这会让我们访问本地MongoDB shell。我们同时还需要启动我们的应用`meteor run`。如果我们需要访问部署在[meteor.com](http://meteor.com)上的应用的mongo数据库，使用`$
    meteor mongo yourapp.meteor.com --url`但要小心，这些凭据仅有效1分钟。 |'
- en: '| `reset` | This will reset our local development database to a fresh state.
    This won''t work when our application is running. Be aware that this will remove
    all our data stored in our local database. |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| `reset` | 这将把我们的本地开发数据库重置为空白状态。当我们的应用运行时此操作将无效。注意这将删除我们存储在本地数据库中的所有数据。 |'
- en: '| `logs <site name>` | This will download and display the logs for an app we
    deployed at `<site name>.meteor.com` |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| `logs <站点名称>` | 这将下载并显示我们在`<站点名称>.meteor.com`部署的应用的日志。 |'
- en: '| `search` | This searches for Meteor packages and releases, whose names contain
    the specified regular expression. |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| `search` | 这会搜索包含指定正则表达式的Meteor包和发布版本。 |'
- en: '| `show` | This shows more information about a specific package or release:
    name, summary, the usernames of its maintainers, and, if specified, its home page
    and Git URL. |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| `show` | 这会显示有关特定包或版本的更多信息：名称、摘要、其维护者的用户名，以及（如果指定）其主页和Git URL。 |'
- en: '| `publish` | This publishes our packages. We must before go to the package
    folder using the cd command, log in to our Meteor account using `$ meteor login`.To
    publish a package for the first time, we use `$ meteor publish --create`. |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| `publish` | 这会发布我们的包。我们之前必须使用cd命令进入包文件夹，使用`$ meteor login`登录到我们的Meteor账户。要第一次发布一个包，我们使用`$
    meteor publish --create`。 |'
- en: '| `publish-for-arch` | This publishes a build of an existing package version
    from a different architecture. *Our machine must have the right architecture to
    be able to publish for a specific one.*Currently, the supported architectures
    for Meteor are 32-bit Linux, 64-bit Linux, and Mac OS. The servers for Meteor
    `deploy` run with a 64-bit Linux. |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| `publish-for-arch` | 这会从不同的架构发布一个现有包版本的构建。*我们的机器必须有正确的架构才能为特定架构发布。*目前，Meteor支持的架构有32位Linux、64位Linux和Mac
    OS。Meteor `deploy`运行的服务器使用64位Linux。 |'
- en: '| `publish-release` | This publishes a release of Meteor. This takes in a JSON
    configuration file.For more detail, visit [https://docs.meteor.com/#/full/meteorpublishrelease](https://docs.meteor.com/#/full/meteorpublishrelease).
    |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| `publish-release` | 这会发布Meteor的一个版本。这需要一个JSON配置文件。更多详细信息，请访问[https://docs.meteor.com/#/full/meteorpublishrelease](https://docs.meteor.com/#/full/meteorpublishrelease)。
    |'
- en: '| `claim` | This claims a site deployed with an old Meteor version with our
    Meteor developer account. |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| `claim` | 这会将使用旧Meteor版本的站点通过我们的Meteor开发者账户进行认领。 |'
- en: '| `login` | This logs us in to our Meteor developer account. |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| `login` | 这会将我们登录到Meteor开发者账户。 |'
- en: '| `logout` | This logs us out of our Meteor developer account. |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| `logout` | 这会将我们登出Meteor开发者账户。 |'
- en: '| `whoami` | This prints the username of our Meteor developer account. |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| `whoami` | 这会打印我们Meteor开发者账户的用户名。 |'
- en: '| `test-packages` | This will run tests for one or more packages. For more
    information, refer to [Chapter 12](part0094_split_000.html#page "Chapter 12. Testing
    in Meteor"), *Testing with Meteor*. |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| `test-packages` | 这将运行一个或多个包的测试。有关更多信息，请参阅[第12章](part0094_split_000.html#page
    "Chapter 12. Testing in Meteor"), *使用Meteor进行测试*。 |'
- en: '| `admin` | This catches for miscellaneous commands that require authorization
    to use.Some example uses of meteor `admin` include adding and removing package
    maintainers and setting a home page for a package. It also includes various help
    functions for managing a Meteor release. |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| `admin` | 此部分用于捕获需要授权才能使用的各种命令。Meteor `admin`的一些示例用途包括添加和删除包维护者以及为包设置主页。它还包括用于管理Meteor版本的各种帮助函数。
    |'
- en: The iron:router hooks
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 铁轨：路由钩子 |
- en: 'The following table contains a list of router controller hooks:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格包含路由控制器钩子的列表： |
- en: '| `action` | This function can overwrite the default behavior of the route.
    If we define this function, we have to manually render the template using `this.render()`.
    |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| `action` | 这个函数可以覆盖路由的默认行为。如果我们定义这个函数，我们必须手动使用`this.render()`渲染模板。 |'
- en: '| `onBeforeAction` | This function runs before the route gets rendered. Here,
    we can put extra custom actions. |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| `onBeforeAction` | 这个函数在路由渲染前运行。在这里，我们可以放置额外的自定义操作。 |'
- en: '| `onAfterAction` | This function runs after the route gets rendered. Here,
    we can put extra custom actions. |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| `onAfterAction` | 这个函数在路由渲染后运行。在这里，我们可以放置额外的自定义操作。 |'
- en: '| `onRun` | This function runs once when the route is first loaded. This function
    doesn''t run again on a hot code reloads or when the same URL is navigated again.
    |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| `onRun` | 当路由第一次加载时，此函数运行一次。在热代码重载或再次导航相同的URL时，此函数不会再次运行。 |'
- en: '| `onRerun` | This function will be called every time the route is called.
    |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| `onRerun` | 每次调用此路由时，此函数将被调用。 |'
- en: '| `onStop` | This function runs once when leaving the current route to a new
    route. |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| `onStop` | 当离开当前路由到新路由时，此函数运行一次。 |'
- en: '| `subscriptions` | This function can return subscription(s) that affect `this.ready()`
    in the action hooks |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| `subscriptions` | 这个函数可以返回影响`this.ready()`在动作钩子中的订阅。 |'
- en: '| `waitOn` | This function can return subscription(s), but will automatically
    render the `loadingTemplate` until those are ready. |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| `waitOn` | 这个函数可以返回订阅，但在那些准备好之前会自动渲染`loadingTemplate`。 |'
- en: '| `data` | The return value of this function will be set as the data context
    of this routes template. |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| `data` | 此函数的返回值将设置为此路由模板的数据上下文。 |'
- en: 'A full explanation of these hooks can be found at the following resources:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 这些钩子的完整解释可以在以下资源中找到： |
- en: '[https://github.com/EventedMind/iron-router/blob/devel/Guide.md#layouts](https://github.com/EventedMind/iron-router/blob/devel/Guide.md#layouts)'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/EventedMind/iron-router/blob/devel/Guide.md#layouts](https://github.com/EventedMind/iron-router/blob/devel/Guide.md#layouts)'
- en: '[https://github.com/EventedMind/iron-router/blob/devel/Guide.md#hooks](https://github.com/EventedMind/iron-router/blob/devel/Guide.md#hooks)'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/EventedMind/iron-router/blob/devel/Guide.md#hooks](https://github.com/EventedMind/iron-router/blob/devel/Guide.md#hooks)'
- en: '[https://github.com/EventedMind/iron-router/blob/devel/Guide.md#rendering-templates-with-data](https://github.com/EventedMind/iron-router/blob/devel/Guide.md#rendering-templates-with-data)'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/EventedMind/iron-router/blob/devel/Guide.md#rendering-templates-with-data](https://github.com/EventedMind/iron-router/blob/devel/Guide.md#rendering-templates-with-data)'
