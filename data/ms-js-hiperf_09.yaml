- en: Chapter 9. Optimizing JavaScript for iOS Hybrid Apps
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章。优化iOS混合应用中的JavaScript
- en: In this chapter, we are going to take a look at the process of optimizing JavaScript
    for iOS web apps (also known as hybrid apps). We will take a look at some common
    ways of debugging and optimizing JavaScript and page performance, both in a device's
    web browser and a standalone app's web view.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨优化iOS网络应用（也称为混合应用）中JavaScript的过程。我们将查看一些常见的调试和优化JavaScript及页面性能的方法，无论是在设备的网络浏览器中，还是在独立应用的网络视图中。
- en: Also, we'll take a look at the Apple Web Inspector and see how to use it for
    iOS development. Finally, we will also gain a bit of understanding about building
    a hybrid app and learn the tools that help to better build JavaScript-focused
    apps for iOS. Moreover, we'll learn about a class that might help us further in
    this.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们将查看Apple Web Inspector，并了解如何将其用于iOS开发。最后，我们还将对建立混合应用有所了解，并学习帮助更好地为iOS构建以JavaScript为重点的应用的工具。此外，我们还将了解一个类，它可能有助于我们进一步学习。
- en: 'We are going to learn about the following topics in the chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章中学习以下主题：
- en: Getting ready for iOS development
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备进行iOS开发
- en: iOS hybrid development
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: iOS混合开发
- en: Getting ready for iOS development
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备进行iOS开发
- en: Before starting this chapter with Xcode examples and using iOS Simulator in
    a JavaScript performance book, I will be displaying some native code and will
    use tools that haven't been covered in this course. Mobile app developments, regardless
    of platform, are books within themselves. When covering the build of the iOS project,
    I will be briefly going over the process of setting up a project and writing *non-JavaScript*
    code to get our JavaScript files into a hybrid iOS WebView for development. This
    is essential due to the way iOS secures its HTML5-based apps. Apps on iOS that
    use HTML5 can be debugged, either from a server or from an app directly, as long
    as the app's project is built and deployed in its debug setting on a host system
    (meaning the developers machine).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在用Xcode示例开始本章并使用iOS模拟器在JavaScript性能书籍中之前，我将展示一些本地代码，并使用尚未在本课程中介绍的工具。无论平台如何，移动应用开发都是各自的书籍。在覆盖iOS项目的构建时，我将简要概述设置项目和编写*非JavaScript*代码以将我们的JavaScript文件引入混合iOS
    WebView进行开发的过程。这是必要的，因为iOS对其基于HTML5的应用进行安全保护的方式。使用HTML5的iOS应用可以进行调试，要么从服务器上，要么直接从应用上，只要该应用的项目在主机系统（意味着开发者的机器）上以调试设置进行构建和部署。
- en: Readers of this book are not expected to know how to build a native app from
    the beginning to the end. And that's completely acceptable, as you can copy-and-paste,
    and follow along as I go. But I will show you the code to get us to the point
    of testing JavaScript code, and the code used will be the smallest and the fastest
    possible to render your content.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的读者不需要从一开始就了解如何构建本地应用。这是完全可以接受的，因为你可以复制粘贴，并跟随我一起进行。但我将展示代码，让我们达到测试JavaScript代码的阶段，所使用的代码将是渲染您内容的最小和最快可能的代码。
- en: All of these code samples will be hosted as an Xcode project solution of some
    type on Packt Publishing's website, but they will also be shown here if you want
    to follow along, without relying on code samples. Now with that said, lets get
    started…
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些代码示例都将在 Packt Publishing 的网站上以某种类型的Xcode项目解决方案的形式托管，但它们也将在此处展示，如果您想要跟随，而不依赖代码示例。现在说到这里，让我们开始…
- en: iOS hybrid development
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: iOS混合开发
- en: Xcode is the IDE provided by Apple to develop apps for both iOS devices and
    desktop devices for Macintosh systems. As a JavaScript editor, it has pretty basic
    functions, but Xcode should be mainly used in addition to a project's toolset
    for JavaScript developers. It provides basic code hinting for JavaScript, HTML,
    and CSS, but not more than that.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Xcode是苹果公司提供的用于开发iOS设备和Macintosh系统桌面设备的IDE。作为一个JavaScript编辑器，它的功能相当基础，但Xcode应该主要用作项目工具集之外，针对JavaScript开发者的工具。它为JavaScript、HTML和CSS提供基本的代码提示，但不止这些。
- en: 'To install Xcode, we will need to start the installation process from the Mac
    App Store. Apple, in recent years, has moved its IDE to the Mac App Store for
    faster updates to developers and subsequently app updates for iOS and Mac applications.
    Installation is easy; simply log in with your Apple ID in the Mac App Store and
    download Xcode; you can search for it at the top or, if you look in the right
    rail among popular free downloads, you can find a link to the Xcode Mac App Store
    page. Once you reach this, click **Install** as shown in the following screenshot:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 Xcode，我们需要从 Mac App Store 开始安装过程。近年来，苹果公司将它的 IDE 移到了 Mac App Store，以便为开发者更快地更新，进而为
    iOS 和 Mac 应用程序提供更新。安装过程很简单；只需用你的 Apple ID 登录 Mac App Store 并下载 Xcode；你可以在顶部搜索它，或者如果你在右侧栏查看流行免费下载，你可以找到一个到
    Xcode Mac App Store 页面的链接。一旦你到达这个页面，点击**安装**，如下图所示：
- en: '![iOS hybrid development](img/7296OS_09_11.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![iOS 混合开发](img/7296OS_09_11.jpg)'
- en: It's important to know that, for the sake of simplicity in this chapter, we
    will not deploy an app to a device; so if you are curious about it, you will need
    to be actively enrolled in Apple's Developer Program. The cost is 99 dollars a
    year, or 299 dollars for an enterprise license that allows deployment of an app
    outside the control of the iOS App Store.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要知道，为了本章节的简单起见，我们将不会将应用程序部署到设备上；所以如果你对此感到好奇，你需要积极参与苹果的开发者计划。该计划的费用为每年 99
    美元，或者 299 美元的企业许可，允许将应用程序部署在 iOS 应用商店之外。
- en: If you're curious to learn more about deploying to a device, the code in this
    chapter will run on the device assuming that your certificates are set up on your
    end.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你好奇想了解更多关于部署到设备的信息，本章节的代码将在设备上运行，前提是你的证书已经设置好。
- en: For more information on this, check out Apple's iOS Developer Center documentation
    online at [https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40012582](https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40012582).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 关于这方面的更多信息，请查看苹果公司在线的 iOS 开发者中心文档：[https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40012582](https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40012582)。
- en: Once it's installed, we can open up Xcode and look at the iOS Simulator; we
    can do this by clicking **XCode**, followed by **Open Developer Tool**, and then
    clicking on **iOS Simulator**. Upon first opening iOS Simulator, we will see what
    appears to be a simulation of an iOS device, shown in the next screenshot. Note
    that this is a simulation, *not* a real iOS device (even if it feels pretty close).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，我们可以打开 Xcode 并查看 iOS 模拟器；我们可以通过点击**XCode**，然后点击**打开开发者工具**，然后点击**iOS 模拟器**来实现。第一次打开
    iOS 模拟器时，我们将看到一个 iOS 设备的模拟，如下图所示。注意这是一个模拟，*不是*一个真实的 iOS 设备（即使它感觉非常接近）。
- en: '![iOS hybrid development](img/7296OS_09_12.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![iOS 混合开发](img/7296OS_09_12.jpg)'
- en: A neat trick for JavaScript developers working with local HTML files outside
    an app is that they can quickly drag-and-drop an HTML file. Due to this, the simulator
    will open the mobile version of Safari, the built-in browser for iPhone and iPads,
    and render the page as it would do on an iOS device; this is pretty helpful when
    testing pages before deploying them to a web server.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 对于在外部应用程序中工作的 JavaScript 开发者来说，一个很酷的技巧是，他们可以快速地拖放 HTML 文件。由于这个原因，模拟器将打开移动版 Safari，iPhone
    和 iPad 的内置浏览器，并像在 iOS 设备上一样渲染页面；这在测试页面并在将其部署到 Web 服务器之前非常有帮助。
- en: Setting up a simple iOS hybrid app
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置简单的 iOS 混合应用程序
- en: JavaScript performance on a built-in hybrid application can be much slower than
    the same page run on the mobile version of Safari. To test this, we are going
    to build a very simple web browser using Apple's new programming language **Swift**.
    Swift is an iOS-ready language that JavaScript developers should feel at home
    with.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 内置混合应用程序上的 JavaScript 性能可能会比在移动版 Safari 上的相同页面慢得多。为了测试这一点，我们将使用苹果公司的新编程语言**Swift**
    构建一个非常简单的网络浏览器。Swift 是一种准备好的 iOS 语言，JavaScript 开发者应该会感到很熟悉。
- en: Swift itself follows a syntax similar to JavaScript but, unlike JavaScript,
    variables and objects can be given types allowing for stronger, more accurate
    coding. In that regard, Swift follows syntax similar to what can be seen in the
    *ECMAScript 6* and *TypeScript* styles of coding practice. If you are checking
    these newer languages out, I encourage you to check out Swift as well.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Swift本身遵循类似于JavaScript的语法，但与JavaScript不同，变量和对象可以赋予类型，从而实现更强大，更精确的编码。在这方面，Swift遵循类似于可以在*ECMAScript
    6*和*TypeScript*编码实践风格中看到的语法。如果您正在查看这些新语言，我鼓励您也查看Swift。
- en: Now let's create a simple web view, also known as a **UIWebView**, which is
    the class used to create a web view in an iOS app. First, let's create a new iPhone
    project; we are using an iPhone to keep our app simple. Open Xcode and select
    the **Create new XCode project** project; then, as shown in the following screenshot,
    select the **Single View Application** option and click the **Next** button.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们创建一个简单的网页视图，也称为**UIWebView**，这是在iOS应用中创建网页视图的类。首先，让我们创建一个新的iPhone项目；我们使用iPhone来保持我们的应用程序简单。打开Xcode并选择**创建新的XCode项目**项目；然后，如以下屏幕截图所示，选择**单视图应用程序**选项并点击**下一步**按钮。
- en: '![Setting up a simple iOS hybrid app](img/7296OS_09_13.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![设置简单的iOS混合应用程序](img/7296OS_09_13.jpg)'
- en: 'On the next view of the wizard, set the product name as `JS_Performance`, the
    language to **Swift**, and the device to **iPhone**; the organization name should
    autofill with your name based on your account name in the OS. The organization
    identifier is a reverse domain name unique identifier for our app; this can be
    whatever you deem appropriate. For instructional purposes, here''s my setup:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在向导的下一页中，将产品名设置为`JS_Performance`，语言设置为**Swift**，设备设置为**iPhone**；组织名称应该会根据您在OS中的账户名称自动填充。组织标识符是用于我们应用程序的反向域名唯一标识符；这可以是您认为合适的任何内容。为了说明目的，以下是我的设置：
- en: '![Setting up a simple iOS hybrid app](img/7296OS_09_14.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![设置简单的iOS混合应用程序](img/7296OS_09_14.jpg)'
- en: Once your project names are set, click the **Next** button and save to a folder
    of your choice with **Git repository** left unchecked. When that's done, select
    **Main.storyboard** under your **Project Navigator**, which is found in the left
    panel. We should be in the storyboard view now. Let's open the **Object Library**,
    which can be found in the lower-right panel in the subtab with an icon of a square
    inside a circle.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您的项目名称设置完成，点击**下一步**按钮，并将其保存在您选择的文件夹中，**Git仓库**保持未选中状态。完成后，在**项目导航器**中选择**Main.storyboard**，您可以在左侧面板中找到它。现在我们应该处于故事板视图中。让我们打开**对象库**，它可以在右下角的子标签中找到，该子标签中有一个圆形内的方形图标。
- en: Search for `Web View` in the **Object Library** in the bottom-right search bar,
    and then drag that to the square view that represents our iOS view.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在右下角的搜索栏中在**对象库**中搜索`Web View`，然后将其拖动到代表我们iOS视图的方形视图中。
- en: '![Setting up a simple iOS hybrid app](img/7296OS_09_15.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![设置简单的iOS混合应用程序](img/7296OS_09_15.jpg)'
- en: We need to consider two more things before we link up an HTML page using Swift;
    we need to set constraints as native iOS objects will be stretched to fit various
    iOS device windows. To fill the space, you can add the constraints by selecting
    the **UIWebView** object and pressing *Command* + *Option* + *Shift* + *=* on
    your Mac keyboard. Now you should see a blue border appear briefly around your
    UIWebView.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用Swift链接HTML页面之前，我们需要考虑另外两件事；我们需要设置约束条件，因为本地iOS对象将被拉伸以适应各种iOS设备窗口。要填充空间，您可以通过在Mac键盘上选择**UIWebView**对象并按*Command*
    + *Option* + *Shift* + *=* 来添加约束。现在您应该看到一个蓝色的边框短暂地出现在您的UIWebView周围。
- en: 'Lastly, we need to connect our **UIWebView** to our Swift code; for this, we
    need to open the **Assistant Editor** by pressing *Command* + *Option* + *Return*
    on the keyboard. We should see **ViewController.swift** open up in a side panel
    next to our **Storyboard**. To link this as a code variable, right-click (or option-click
    the **UIWebView** object) and, with the button held down, drag the **UIWebView**
    to line number 12 in the **ViewController.swift** code in our **Assistant Editor**.
    This is shown in the following diagram:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要将我们的**UIWebView**连接到我们的Swift代码；为此，我们需要打开**助手编辑器**通过按*Command* + *Option*
    + *Return*在键盘上。我们应该看到**ViewController.swift**在**Storyboard**旁边的侧边栏中打开。要作为代码变量链接此内容，请右键点击（或选项点击**UIWebView**对象），然后按住鼠标左键拖动**UIWebView**到**ViewController.swift**代码中的第12行在**助手编辑器**中。以下图表显示了这一点：
- en: '![Setting up a simple iOS hybrid app](img/7296OS_09_19.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![设置简单的iOS混合应用程序](img/7296OS_09_19.jpg)'
- en: Once that's done, a popup will appear. Now leave everything the same as it comes
    up, but set the name to `webview`; this will be the variable referencing our UIWebView.
    With that done, save your `Main.storyboard` file and navigate to your `ViewController.swift`
    file.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些步骤后，会出现一个弹窗。现在保持所有内容与默认设置相同，但将名称设置为`webview`；这将是我们UIWebView的变量引用。完成后，保存你的`Main.storyboard`文件，然后导航到你的`ViewController.swift`文件。
- en: Now take a look at the Swift code shown in the following screenshot, and copy
    it into the project; the important part is on line 19, which contains the filename
    and type loaded into the web view; which in this case, this is `index.html`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在查看下面的截图中显示的Swift代码，并将其复制到项目中；重要的是第19行的文件名和类型被加载到网络视图中；在这个例子中，这是`index.html`。
- en: '![Setting up a simple iOS hybrid app](img/7296OS_09_16.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![设置简单的iOS混合应用](img/7296OS_09_16.jpg)'
- en: 'Now obviously, we don''t have an `index.html` file, so let''s create one. Go
    to **File** and then select **New** followed by the **New File** option. Next,
    under **iOS** select **Empty Application** and click **Next** to complete the
    wizard. Save the file as `index.html` and click **Create**. Now open the `index.html`
    file, and type the following code into the HTML page:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，我们没有`index.html`文件，所以让我们创建一个。点击**文件**，然后选择**新建**，接着选择**新建文件**选项。接下来，在**iOS**下选择**空应用程序**，然后点击**下一步**完成向导。将文件保存为`index.html`，然后点击**创建**。现在打开`index.html`文件，并将以下代码输入到HTML页面中：
- en: '[PRE0]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now click **Run** (the play button in the main iOS task bar), and we should
    see our HTML page running inside our own app, as shown here:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在点击**运行**（主iOS任务栏中的播放按钮），我们应该能在我们自己的应用中看到我们的HTML页面，如下所示：
- en: '![Setting up a simple iOS hybrid app](img/7296OS_09_17.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![设置简单的iOS混合应用](img/7296OS_09_17.jpg)'
- en: 'That''s nice work! We built an iOS app with Swift (even if it''s a simple app).
    Let''s create a structured HTML page; we will override our `Hello iOS` text with
    the HTML shown in the following screenshot:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们用Swift构建了一个iOS应用（即使它是一个简单的应用）。让我们创建一个结构化的HTML页面；我们将用下面的截图中显示的HTML覆盖我们的`Hello
    iOS`文本：
- en: '![Setting up a simple iOS hybrid app](img/7296OS_09_18.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![设置简单的iOS混合应用](img/7296OS_09_18.jpg)'
- en: Here, we use the standard `console.time` function and print a message to our
    UIWebView page when finished; if we hit **Run** in Xcode, we will see the `Loop
    Completed` message on load. But how do we get our performance information? How
    can we get our `console.timeEnd` function code on line 14 on our HTML page?
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用标准的`console.time`函数，在完成后向我们的UIWebView页面打印一条消息；如果我们点击Xcode中的**运行**，我们将在加载时看到`循环完成`的消息。但我们如何获取我们的性能信息呢？我们如何在HTML页面中的第14行的`console.timeEnd`函数代码？
- en: Using Safari Web Inspector for JavaScript performance
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Safari网络检查器进行JavaScript性能
- en: 'Apple does provide a Web Inspector for UIWebViews, and it''s the same inspector
    for desktop Safari. It''s easy to use, but has an issue: the inspector only works
    on iOS Simulators and devices that have started from an Xcode project. This limitation
    is due to security concerns for hybrid apps that may contain sensitive JavaScript
    code that could be exploited if visible.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 苹果为UIWebView提供了网络检查器，而且这个检查器与桌面Safari的检查器相同。它很容易使用，但有一个问题：检查器只适用于从Xcode项目中启动的iOS模拟器和设备。这个限制是由于对混合应用可能包含的敏感JavaScript代码的安全担忧，如果可见可能会被利用。
- en: 'Let''s check our project''s embedded HTML page console. First, open desktop
    Safari on your Mac and enable developer mode. Launch the **Preferences** option.
    Under the **Advanced** tab, ensure that the **Show develop menu in menu bar**
    option is checked, as shown in the following screenshot:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查一下我们项目的内嵌HTML页面控制台。首先，在您的Mac上打开桌面Safari并启用开发者模式。启动**偏好设置**选项。在**高级**标签下，确保已选中**在菜单栏中显示开发菜单**选项，如下面的截图所示：
- en: '![Using Safari Web Inspector for JavaScript performance](img/7296OS_09_20.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![使用Safari网络检查器进行JavaScript性能测试](img/7296OS_09_20.jpg)'
- en: Next, let's rerun our Xcode project, start up iOS Simulator and then rerun our
    page. Once our app is running with the **Loop Completed** result showing, open
    desktop Safari and click **Develop**, then **iOS Simulator**, followed by **index.html**.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们重新运行我们的Xcode项目，启动iOS模拟器，然后重新运行我们的页面。一旦我们的应用在显示**循环完成**结果时运行，打开桌面Safari并点击**开发**，然后**iOS模拟器**，接着点击**index.html**。
- en: 'If you look closely, you will see iOS simulator''s UIWebView highlighted in
    blue when you place the mouse over **index.html**; a visible page is seen as shown
    in the following screenshot:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仔细看，当你将鼠标悬停在`index.html`上时，iOS模拟器的UIWebView会以蓝色高亮显示；如下的截图显示了一个可见的页面：
- en: '![Using Safari Web Inspector for JavaScript performance](img/7296OS_09_21.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![使用Safari网络检查器进行JavaScript性能测试](img/7296OS_09_21.jpg)'
- en: Once we release the mouse on **index.html**, we Safari's **Web Inspector** window
    appears featuring our hybrid iOS app's DOM and console information. The Safari's
    **Web Inspector** is pretty similar to Chrome's **Developer tools** in terms of
    feature sets; the panels used in the **Developer tools** also exist as icons in
    **Web Inspector**.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在**index.html**上释放鼠标后，Safari的**网络检查器**窗口会出现，显示我们混合型iOS应用的DOM和控制台信息。Safari的**网络检查器**在功能集上与Chrome的**开发者工具**相当相似；在**开发者工具**中使用的面板在**网络检查器**中也是以图标的形式存在的。
- en: Now let's select the **Console** panel in **Web Inspector**. Here, we can see
    our full console window including our `Timer` `console.time` function test included
    in the `for` loop. As we can see in the following screenshot, the loop took 0.081
    milliseconds to process inside iOS.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们在**网络检查器**中选择**控制台**面板。在这里，我们可以看到完整的控制台窗口，包括我们在`for`循环中包含的`Timer` `console.time`函数测试。正如我们在以下截图中看到的，循环在iOS中处理了0.081毫秒。
- en: '![Using Safari Web Inspector for JavaScript performance](img/7296OS_09_22.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![使用Safari网络检查器进行JavaScript性能测试](img/7296OS_09_22.jpg)'
- en: Comparing UIWebView with Mobile Safari
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: UIWebView与Mobile Safari比较
- en: What if we wanted to take our code and move it to Mobile Safari to test? This
    is easy enough; as mentioned earlier in the chapter, we can drag-and-drop the
    `index.html` file into our iOS Simulator, and then the OS will open the mobile
    version of Safari and load the page for us.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想将我们的代码移动到Mobile Safari进行测试呢？这很容易；如前所述，我们可以将`index.html`文件拖放到我们的iOS模拟器中，然后操作系统将打开移动版Safari并为我们加载页面。
- en: 'With that ready, we will need to reconnect Safari **Web Inspector** to the
    **iOS Simulator** and reload the page. Once that''s done, we can see that our
    `console.time` function is a bit faster; this time it''s roughly 0.07 milliseconds,
    which is a full.01 milliseconds faster than UIWebView, as shown here:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好之后，我们需要重新连接Safari**网络检查器**到**iOS模拟器**并重新加载页面。完成后，我们可以看到我们的`console.time`函数要快一些；这次大约是0.07毫秒，比UIWebView快了0.01毫秒左右，如图所示：
- en: '![Comparing UIWebView with Mobile Safari](img/7296OS_09_23.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![UIWebView与Mobile Safari比较](img/7296OS_09_23.jpg)'
- en: For a small app, this is minimal in terms of a difference in performance. But,
    as an application gets larger, the delay in these JavaScript processes gets longer
    and longer.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个小应用来说，这在性能上的差别很小。但是，随着应用越来越大，这些JavaScript处理过程的延迟会越来越长。
- en: 'We can also debug the app using the debugging inspector in the Safari''s **Web
    Inspector** tool. Click **Debugger** in the top menu panel in Safari''s **Web
    Inspector**. We can add a break point to our embedded script by clicking a line
    number and then refreshing the page with *Command* + *R*. In the following screenshot,
    we can see the break occurring on page load, and we can see our scope variable
    displayed for reference in the right panel:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用Safari的**网络检查器**工具中的调试检查器来调试应用。在Safari的**网络检查器**顶部菜单栏中点击**调试器**。我们可以通过点击行号来在我们的嵌入式脚本中添加一个断点，然后使用*Command*
    + *R*刷新页面。在下面的截图中，我们可以看到在页面加载时断点发生，我们可以在右侧面板中看到我们的作用域变量：
- en: '![Comparing UIWebView with Mobile Safari](img/7296OS_09_24.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![UIWebView与Mobile Safari比较](img/7296OS_09_24.jpg)'
- en: We can also check page load times using the timeline inspector. Click **Timelines**
    at the top of the **Web Inspector** and now we will see a timeline similar to
    the **Resources** tab found in Chrome's **Developer tools**. Let's refresh our
    page with *Command* + *R* on our keyboard; the timeline then processes the page.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用时间线检查器来检查页面加载时间。在**网络检查器**顶部点击**时间线**，现在我们将看到一个类似于Chrome的**开发者工具**中的**资源**标签页的时间线。让我们用键盘上的*Command*
    + *R*刷新我们的页面；时间线然后处理页面。
- en: Notice that after a few seconds, the timeline in the **Web Inspector** stops
    when the page fully loads, and all JavaScript processes stop. This is a nice feature
    when you're working with the Safari **Web Inspector** as opposed to Chrome's Developer
    tools.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在几秒钟后，**网络检查器**中的时间线在页面完全加载时停止，所有JavaScript处理过程也停止。这是当你使用Safari的网络检查器而不是Chrome的开发者工具时的一个很好的功能。
- en: '![Comparing UIWebView with Mobile Safari](img/7296OS_09_25.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![UIWebView与Mobile Safari比较](img/7296OS_09_25.jpg)'
- en: Common ways to improve hybrid performance
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提高混合性能的常见方法
- en: 'With hybrid apps, we can use all the techniques for improving performance that
    we''ve learned in the past chapters: using a build system such as Grunt.js or
    Gulp.js with NPM, using JSLint to better optimize our code, writing code in an
    IDE to create better structure for our apps, and helping to check for any excess
    code or unused variables in our code.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 使用混合应用程序，我们可以使用我们在前面的章节中学到的所有提高性能的技术：使用像Grunt.js或Gulp.js这样的构建系统，使用JSLint更好地优化我们的代码，在IDE中编写代码以创建我们应用程序更好的结构，并帮助检查我们代码中的任何多余代码或未使用的变量。
- en: We can use best performance practices such as using strings to apply an HTML
    page (like the `innerHTML` property) rather than creating objects for them and
    applying them to the page that way, and so on.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用最佳性能实践，例如使用字符串来应用HTML页面（如`innerHTML`属性），而不是创建对象并以此方式将它们应用到页面上，等等。
- en: 'Sadly, the fact that hybrid apps do not perform as well as native apps still
    holds true. Now, don''t let that dismay you as hybrid apps do have a lot of good
    features! Some of these are as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，混合应用程序的性能不如原生应用程序的事实仍然成立。现在，不要让这使您沮丧，因为混合应用程序确实有很多优点！其中一些如下：
- en: They are (typically) faster to build than using native code
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们（通常）比使用原生代码更快地构建
- en: They are easier to customize
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们更容易定制
- en: They allow for rapid prototyping concepts for apps
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们允许快速为应用程序制作原型
- en: They are easier to hand off to other JavaScript developers rather than finding
    a native developer
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们比找到一个原生开发者更容易地交接给其他JavaScript开发者
- en: They are portable; they can be reused for another platform (with some modification)
    for Android devices, Windows Modern apps, Windows Phone apps, Chrome OS, and even
    Firefox OS
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们是便携式的；它们可以针对其他平台（需要一些修改）重新用于Android设备、Windows现代应用、Windows Phone应用、Chrome OS，甚至是Firefox
    OS。
- en: They can interact with native code using helper libraries such as *Cordova*
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 他们可以使用像*Cordova*这样的辅助库与原生代码交互
- en: At some point, however, application performance will be limited to the hardware
    of the device, and it's recommended you move to native code. But, how do we know
    when to move? Well, this can be done using **Color Blended Layers**. The **Color
    Blended Layers** option applies an overlay that highlights slow-performing areas
    on the device display, for example, green for good performance and red for slow
    performance; the darker the color is, the more impactful will be the performance
    result.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在某个时刻，应用程序的性能将受到设备硬件的限制，建议您转向原生代码。但是，我们如何知道何时转移呢？嗯，这可以通过使用**颜色混合层**来实现。**颜色混合层**选项在设备显示上应用一个覆盖层，突出显示性能较慢的区域，例如，用绿色表示良好性能，用红色表示性能较差；颜色越深，性能影响就越大。
- en: 'Rerun your app using Xcode and, in the Mac OS toolbar for iOS Simulator, select
    **Debug** and then **Color Blended Layers**. Once we do that, we can see that
    our iOS Simulator shows a green overlay; this shows us how much memory iOS is
    using to process our rendered view, both native and non-native code, as shown
    here:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Xcode重新运行您的应用程序，然后在iOS模拟器的Mac OS工具栏中选择**调试**，然后选择**颜色混合层**。一旦我们这样做，我们就可以看到iOS模拟器显示了一个绿色覆盖层；这显示了iOS处理我们的渲染视图所使用的内存量，包括本地和非本地代码，如下图所示：
- en: '![Common ways to improve hybrid performance](img/7296OS_09_26.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![提高混合性能的常见方法](img/7296OS_09_26.jpg)'
- en: Currently, we can see a mostly green overlay with the exception of the status
    bar elements, which take up more render memory as they overlay the web view and
    have to be redrawn over that object repeatedly.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们可以看到大部分都是绿色覆盖层，除了状态栏元素，这些元素占用更多的渲染内存，因为它们覆盖了网页视图，并且必须反复在这些对象上重新绘制。
- en: 'Let''s make a copy of our project and call it `JS_Performance_CBL`, and let''s
    update our `index.html` code with this code sample, as shown in the following
    screenshot:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将我们的项目复制一份，命名为`JS_Performance_CBL`，然后用下面的代码样本更新我们的`index.html`代码，如下图所示：
- en: '![Common ways to improve hybrid performance](img/7296OS_09_27.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![提高混合性能的常见方法](img/7296OS_09_27.jpg)'
- en: Here, we have a simple page with an empty div; we also have a button with an
    `onclick` function called `start`. Our `start` function will update the height
    continuously using the `setInterval` function, increasing the height every millisecond.
    Our empty div also has a background gradient assigned to it with an inline `style`
    tag.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们有一个简单的页面，里面有一个空的div；我们还有一个带有`onclick`函数的按钮，该函数名为`start`。我们的`start`函数将使用`setInterval`函数不断更新高度，每毫秒增加一次高度。我们的空div还使用内联`style`标签分配了一个背景渐变。
- en: CSS background gradients are typically a huge performance drain on mobile devices
    as they can potentially re-render themselves over and over as the DOM updates
    itself. Some other issues include listener events; some earlier or lower-end devices
    do not have enough RAM to apply an event listener to a page. Typically, it's a
    good practice to apply `onclick` attributes to HTML either inline or through JavaScript.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 移动设备上CSS背景渐变通常是一个巨大的性能负担，因为它们可能会在DOM更新自己时反复重新渲染。其他一些问题包括监听事件；一些较早或较低端的设备没有足够的RAM来为页面应用事件监听器。通常，为HTML应用`onclick`属性是一个好习惯，无论是内联还是通过JavaScript。
- en: Going back to the gradient example, let's run this in **iOS Simulator** and
    enable **Color Blended Layers** after clicking our HTML button to trigger the
    JavaScript animation.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 回到渐变示例，让我们在iOS模拟器中运行此操作，在点击我们的HTML按钮触发JavaScript动画后启用**颜色混合层**。
- en: '![Common ways to improve hybrid performance](img/7296OS_09_28.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![提高混合性能的常见方法](img/7296OS_09_28.jpg)'
- en: As expected, our div element that we've expanded now has a red overlay indicating
    that this is a confirmed performance issue, which is unavoidable. To correct this,
    we would need to remove the CSS gradient background, and it would show as green
    again. However, if we had to include a gradient in accordance with a design spec,
    a native version would be required.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 不出所料，我们现在看到我们扩展的div元素有一个红色覆盖层，这表明这是一个确认的性能问题，这是无法避免的。为了解决这个问题，我们需要移除CSS渐变背景，它将再次显示为绿色。然而，如果我们必须包括一个渐变，以符合设计规范，那么就需要一个本地版本。
- en: When faced with UI issues such as these, it's important to understand tools
    beyond normal developer tools and Web Inspectors, and take advantage of the mobile
    platform tools that provide better analysis of our code. Now, before we wrap this
    chapter, let's take note of something specific for iOS web views.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 面对这些问题之类的UI问题，了解正常开发工具和Web检查器之外的工具非常重要，并利用提供更好分析代码的移动平台工具。现在，在我们结束这一章之前，请注意iOS网络视图的某些具体事项。
- en: The WKWebView framework
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: WKWebView框架
- en: At the time of writing, Apple has announced the WebKit framework, a first-party
    iOS library intended to replace UIWebView with more advanced and better performing
    web views; this was done with the intent of replacing apps that rely on HTML5
    and JavaScript with better performing apps as a whole.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，苹果公司宣布了WebKit框架，这是一个旨在用更先进、性能更好的网络视图替换UIWebView的第一方iOS库；这是为了用整体性能更优的应用程序替换依赖HTML5和JavaScript的应用程序。
- en: The WebKit framework, also known in developer circles as **WKWebView,** is a
    newer web view that can be added to a project. WKWebView is also the base class
    name for this framework. This framework includes many features that native iOS
    developers can take advantage of. These include listening for function calls that
    can trigger native Objective-C or Swift code. For JavaScript developers like us,
    it includes a faster JavaScript runtime called *Nitro*, which has been included
    with Mobile Safari since iOS6.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 被称为**WKWebView**的WebKit框架，是开发者圈子里的新一代网络视图，可以添加到项目中。WKWebView也是这个框架的基础类名。这个框架包括许多功能，使原生iOS开发者能够利用这些功能。这包括监听可以触发原生Objective-C或Swift代码的函数调用。对于我们这样的JavaScript开发者来说，它还包括一个更快的JavaScript运行时*Nitro*，自iOS6的Mobile
    Safari以来一直包含在内。
- en: Hybrid apps have always run worse that native code. But with the Nitro JavaScript
    runtime, HTML5 has equal footing with native apps in terms of performance, assuming
    that our view doesn't consume too much render memory as shown in our color blended
    layers example.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 混合应用程序一直运行得比本地代码差。但是，借助Nitro JavaScript运行时，HTML5在性能上与本地应用程序平起平坐，前提是我们视图不会像我们颜色混合层示例中那样消耗太多渲染内存。
- en: WKWebView does have limitations though; it can only be used for iOS8 or higher
    and it doesn't have built-in Storyboard or XIB support like UIWebView. So, using
    this framework may be an issue if you're new to iOS development. **Storyboards**
    are simply XML files coded in a specific way for iOS user interfaces to be rendered,
    while **XIB** files are the precursors to Storyboard. XIB files allow for only
    one view whereas Storyboards allow multiple views and can link between them too.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，WKWebView确实存在局限性；它只能用于iOS8或更高版本，并且不像UIWebView那样内置Storyboard或XIB支持。因此，如果你是iOS开发新手，使用这个框架可能会遇到问题。**Storyboards**
    仅仅是特定方式编写的XML文件，用于渲染iOS用户界面，而**XIB**文件是Storyboard的前身。XIB文件只允许一个视图，而Storyboards允许多个视图，并且可以链接它们。
- en: If you are working on an iOS app, I encourage you to reach out to your iOS developer
    lead and encourage the use of WKWebView in your projects.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在开发一个 iOS 应用，我鼓励你联系你的 iOS 开发负责人，并鼓励在项目中使用 WKWebView。
- en: For more information, check out Apple's documentation of WKWebView at their
    developer site at [https://developer.apple.com/library/IOs/documentation/WebKit/Reference/WKWebView_Ref/index.html](https://developer.apple.com/library/IOs/documentation/WebKit/Reference/WKWebView_Ref/index.html).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息，请查看 Apple 网站上关于 WKWebView 的文档：[https://developer.apple.com/library/IOs/documentation/WebKit/Reference/WKWebView_Ref/index.html](https://developer.apple.com/library/IOs/documentation/WebKit/Reference/WKWebView_Ref/index.html)。
- en: Summary
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned the basics of creating a hybrid-application for
    iOS using HTML5 and JavaScript; we learned about connecting the Safari Web Inspector
    to our HTML page while running an application in iOS Simulator. We also looked
    at Color Blended Layers for iOS Simulator, and saw how to test for performance
    from our JavaScript code when it's applied to device-rendering performance issues.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用 HTML5 和 JavaScript 为 iOS 创建混合应用的基本知识；我们学习了如何在运行应用的 iOS 模拟器中连接
    Safari 网络检查器到我们的 HTML 页面。我们还查看了 iOS 模拟器的颜色混合层，并了解了如何从我们的 JavaScript 代码中测试性能，以解决设备渲染性能问题。
- en: Now we are down to the wire. As for all JavaScript web apps before they go live
    to a production site, we need to smoke-test our JavaScript and web app code and
    see if we need to perform any final improvements before final deployment. This
    is discussed in the next chapter.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们到了最后关头。就像所有上线到生产环境的 JavaScript web 应用一样，我们需要对我们的 JavaScript 和 web 应用代码进行烟雾测试，看看在最终部署之前是否需要进行任何最后的优化。这将在下一章讨论。
