- en: Chapter 6. Putting It All Together – Promises in Action
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章：综合运用——承诺在行动
- en: 'In [Chapter 5](part0026_split_000.html#OPEK1-fe4c0b71cd2847c897e147ea131725a8
    "Chapter 5. Promises in WinJS"), *Promises in WinJS*, we were introduced to the
    WinJS library and learned about the WinJS promise object in detail. We also had
    a quick glance at how to use WinJS promises in windows app development in a basic
    example. Finally, we are here in the last chapter, in which we will put into action
    the learning we have gathered throughout this book about promises. We will try
    to get a deeper understanding of how promises work by creating a simple implementation.
    After we create the implementation library, we will use it in a basic example
    that leverages that library for an asynchronous operation. In this chapter, we
    will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第5章](part0026_split_000.html#OPEK1-fe4c0b71cd2847c897e147ea131725a8 "Chapter 5. Promises
    in WinJS")中，我们介绍了WinJS库，并详细了解了WinJS承诺对象。我们还快速浏览了如何在Windows应用程序开发中使用WinJS承诺的基本示例。最后，我们来到了最后一章，在这一章中，我们将把本书关于承诺的学习付诸实践。我们将尝试通过创建一个简单的实现来更深入地了解承诺是如何工作的。创建实现库之后，我们将在一个基本示例中使用它，利用该库执行异步操作。在本章中，我们将介绍以下主题：
- en: Summary of what we have covered and learned so far
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 总结我们已经涵盖和学到的内容
- en: Creating a promise implementation in a simple JavaScript library
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在简单的JavaScript库中创建承诺实现
- en: Implementing a promise library
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现承诺库
- en: Promises have grown to be very popular as expressed by the numerous standalone
    implementations of them. Moreover, Promises/A+ have more than 35 compliant implementations
    so far as we approach the launch of ECMAScript 6\. One thing to note is that the
    growing adoption of Promise/A+ in JavaScript is reflected in other languages,
    with a number of implementations in ActionScript, Python, and Objective C. Although,
    in terms of semantics, these implementations might not necessarily match the ones
    we have in the JavaScript specifications due to different language capabilities,
    it ultimately cannot be verified for compliance by directly testing them against
    the JavaScript test suite of Promise/A+. Nevertheless, it's worth mentioning the
    implementations and showcasing the efforts taken.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 承诺已经变得非常流行，这可以从它们的许多独立实现中看出。此外，Promises/A+已经有超过35个符合要求的实现，随着ECMAScript 6的推出，这个数字还在增长。值得注意的是，JavaScript中Promise/A+的日益普及在其他语言中也得到了体现，ActionScript、Python和Objective
    C中都有许多实现。尽管从语义上讲，由于不同的语言能力，这些实现可能并不一定与JavaScript规范中的实现相匹配，但直接将它们与Promise/A+的JavaScript测试套件进行测试是无法验证它们是否符合要求的。然而，提及这些实现并展示所付出的努力是有价值的。
- en: 'Let us go through a code example for a basic implementation of promises; this
    will give us a better understanding of how promises work. A deep understanding
    of how things work improves our ability to take advantage of code and debug it
    more easily and quickly when it goes wrong. We will create a minimal JavaScript
    library that implements promises, and we shall start coding that library with
    the states of the promises. We learned, when exploring the Promise API in [Chapter
    2](part0018_split_000.html#H5A42-fe4c0b71cd2847c897e147ea131725a8 "Chapter 2. The
    Promise API and Its Compatibility"), *The Promise API and Its Compatibility*,
    that promises have three different states: pending, fulfilled, and rejected.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个代码示例来了解承诺的基本实现；这将使我们更好地了解承诺是如何工作的。深入理解事物的工作原理可以提高我们利用代码和当它出错时更轻松、更快地调试的能力。我们将创建一个最小的JavaScript库来实现承诺，并从承诺的状态开始编写这个库。我们在[第2章](part0018_split_000.html#H5A42-fe4c0b71cd2847c897e147ea131725a8
    "Chapter 2. The Promise API and Its Compatibility")中了解到，承诺有三种不同的状态：pending（等待中）、fulfilled（已履行）和rejected（已拒绝）。
- en: 'The specification of promises does not specify a value for these states, so
    let us declare them and assign the values to an enumerator, as the following code
    shows:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 承诺的规范没有为这些状态指定一个值，所以让我们声明它们，并将值分配给一个枚举器，如下面的代码所示：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This enumeration will allow us to call the state by name, for example, `promState.fulfilled`.
    Next, we will create an object that holds all the promise logic from transition
    between states to the `then` method and resolves the promise. Let us call this
    object `PromiseMe`.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这个枚举将允许我们通过名称来调用状态，例如，`promState.fulfilled`。接下来，我们将创建一个对象，它包含了从状态转换到`then`方法的整个承诺逻辑，并解决承诺。让我们称这个对象为`PromiseMe`。
- en: 'First, we will need to define the change in the promise''s states and its transition
    from one state to the other. The specification dictates some rules and considerations
    for the transitions between the states, which we have dived into detail in [Chapter
    2](part0018_split_000.html#H5A42-fe4c0b71cd2847c897e147ea131725a8 "Chapter 2. The
    Promise API and Its Compatibility"), *The Promise API and Its Compatibility*.
    These rules can be summarized as follows:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要定义承诺状态的变化及其从一个状态转换到另一个状态的过渡。规范详细说明了状态间转换的一些规则和考虑因素，我们在[第2章](part0018_split_000.html#H5A42-fe4c0b71cd2847c897e147ea131725a8
    "第2章 承诺API及其兼容性")，*承诺API及其兼容性*中进行了深入的讨论。这些规则可以总结如下：
- en: A promise can only be in one state at a certain point of time
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 承诺在某一时间点只能处于一个状态。
- en: When a promise transitions from pending to any other state, either fulfilled
    or rejected, it cannot go back
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当一个承诺从待处理状态转换为其他任何状态，无论是已履行还是已拒绝，它都不能回去。
- en: When a promise fulfills, it must have a value (it can even be undefined) and,
    when it fails, it must have a reason (any value that specifies why the promise
    was rejected)
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当一个承诺被履行时，它必须有一个值（甚至可以是undefined），而当它失败时，它必须有一个原因（任何指定承诺被拒绝原因的值）。
- en: 'Inside the `PromiseMe` object, we will first define a function titled `changeMyState`
    that handles and manages the transition between states for this promise governed
    by the preceding rules, as the following code shows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在`PromiseMe`对象内部，我们首先定义一个名为`changeMyState`的函数，该函数根据前面的规则处理和管理这个承诺的状态转换，如下面的代码所示：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The code inside the object will first set a property named `myState` to the
    pending value of the enumeration `promState` with `myState`: `promState.pending`.
    Afterwards, we set a property named `changeMyState` to an anonymous function that
    takes two arguments: `newState` and `value`. Within that function, we handle the
    transitions of states and check if it adheres to the rules. We have four checkpoints
    before we can proceed with the code:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 对象内的代码首先设置一个名为`myState`的属性，将其值设置为枚举`promState`的待处理值`promState.pending`。随后，我们设置一个名为`changeMyState`的属性，其值为一个匿名函数，该函数接受两个参数：`newState`和`value`。在这个函数中，我们处理状态转换并检查它是否符合规则。在我们继续编写代码之前，有四个检查点：
- en: First, we check whether we are transitioning to the same state and throw an
    error.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们检查我们是否正在转换到同一个状态，并抛出错误。
- en: In the second check, we make sure that the promise is not trying to transition
    from rejected or fulfilled and throws an error accordingly.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第二个检查中，我们确保承诺不是试图从已拒绝或已履行的状态转换，并相应地抛出错误。
- en: The third check is for the value passed with rejected. If it is null, an error
    will be thrown and this makes sure that the promise gets rejected with a value
    other than one with null. We are writing this checkpoint because the promise,
    as per the specification, only accepts non-null values.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第三个检查是针对传递给拒绝的值。如果它是null，将抛出一个错误，这确保了承诺因除null之外的值而被拒绝。我们编写这个检查点，因为根据规范，承诺只接受非null值。
- en: The final check would be for the fulfilled state and its value; we check with
    `arguments.length < 2` to determine if there was a value passed in the second
    argument; if not, we throw an error.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后的检查将是履行状态及其值；我们用`arguments.length < 2`来确定是否有在第二个参数中传递的值；如果没有，我们抛出一个错误。
- en: Tip
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: I gave the error messages a meaningful wording to better understand what we
    are checking for in these conditions. After we pass all the condition statements,
    we close the `changeMyState` method by setting the `myState` property of the promise
    object to `newState`, passed in with the arguments. We also assign the value to
    the `newValue` argument, and we finish by returning `this.myState`, which, in
    turn, returns the state of the promise.
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我给错误信息赋予了有意义的措辞，以便更好地理解我们在这些条件下检查的内容。在我们通过所有的条件语句后，我们通过将`changeMyState`方法的`myState`属性设置为通过参数传递的`newState`，来关闭`changeMyState`方法。我们还将值分配给`newValue`参数，并以返回`this.myState`结束，反过来返回承诺的状态。
- en: Implementing the then method
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现then方法
- en: Up next in our implementation is the `then` method. This is the main pillar
    of promises, and it is what actually makes the promise useful. This method allows
    for and brings about the chaining of promises and handling errors. We will implement
    a basic `then` method that will first check the rules for the validity of the
    promise.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的实现中，接下来是`then`方法。这是承诺的核心，也是使承诺变得有用的关键。这个方法允许并实现承诺的链式调用和错误处理。我们将实现一个基本的`then`方法，该方法首先检查承诺的有效性规则。
- en: 'Let us define the `then` method as the following:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将`then`方法定义如下：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'What the previous code does basically is define a `then` method for this promise.
    `Then` is defined as an anonymous function that takes two arguments: `onFulfilled`
    and `onRejected`. We define an array for this promise and initialize it to either
    the current array `this.handlers`, if it exists, or a new array, if it doesn''t.
    We instantiate a new promise and store it in the `returnedPromise` variable. We
    store `onFulfilled`, `onRejected`, and `returnedPromise` in the array so that
    we can invoke these handlers later after we return the promise. This function
    closes with the returning of the promise.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 之前代码所做的基本工作是为这个promise定义一个`then`方法。`Then`被定义为一个匿名函数，它接受两个参数：`onFulfilled`和`onRejected`。我们为这个promise定义一个数组，并初始化为`this.handlers`（如果存在的话）当前数组或一个新的数组（如果不存在）。我们实例化一个新的promise并将其存储在`returnedPromise`变量中。我们将`onFulfilled`、`onRejected`和`returnedPromise`存储在数组中，这样我们可以在返回promise之后调用这些处理程序。这个函数以返回promise结束。
- en: Note
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The rules of the `then` method, as per the Promise/A+ specification, state
    that the function arguments: `onFulfilled` and `onRejected`, must be called only
    after the promise is fulfilled or rejected accordingly. That is why, in the implementation,
    we stored those two functions in an array so that we can call them later.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 根据Promise/A+规范，`then`方法的规则指出，函数参数：`onFulfilled`和`onRejected`，只能在promise被满足或拒绝后调用。这就是为什么在实现中，我们将这两个函数存储在一个数组中，以便我们稍后可以调用它们。
- en: 'You might have noticed that the handlers array contains two properties: `fulfillPromise`
    and `rejectPromise`. These are two functions that are set to the handlers that
    are passed in the arguments of the `then` method. Let us define these two functions
    so that we can use them later in the `resolve` method. These functions are helper
    methods and simply allow us to manually change the state of a promise. Moreover,
    these functions will call the `changeMyState` method to change the state of the
    promise which in turn returns a state.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会注意到`handlers`数组包含两个属性：`fulfillPromise`和`rejectPromise`。这两个函数被设置为传递给`then`方法的处理器。让我们定义这两个函数，这样我们稍后就可以在`resolve`方法中使用它们。这些函数是辅助方法，它们允许我们手动改变promise的状态。此外，这些函数将调用`changeMyState`方法来改变promise的状态，进而返回一个状态。
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Defining a resolve method
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义一个解决方法
- en: 'Moving forward, we need to address resolving that promise. We need to define
    a resolve method that will deal with the promise and will either fulfill it or
    reject it, depending on the state of the promise. You can think of the `resolve`
    method as an internal method that the promise calls and is aimed at executing
    the `then` calls only when the promise is fulfilled; in literary terms, it resolves
    a fulfilled promise. Actually, the function that you will need to call in order
    to fulfill a promise or reject it would be `changeMyState` in our case here. Let''s
    start by creating a basic logic for the `resolve` method as per the following
    code:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要解决promise的解析问题。我们需要定义一个解决方法，该方法将处理promise并且将根据promise的状态来满足它或拒绝它。你可以把`resolve`方法看作是一个内部方法，promise调用它，并且旨在仅在promise被满足时执行`then`调用；从字面上讲，它解决了一个被满足的promise。实际上，为了满足一个promise或拒绝它，你需要调用一个函数，在我们的案例中是`changeMyState`。让我们先根据以下代码为`resolve`方法创建一个基本逻辑：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The previous code assigns the property `resolve` to a function. Inside that
    function, we first check for the state of this promise. If it is pending, we return
    `false`. Next in code, we will loop through the array that contains the handlers
    we defined in the `then` method:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码将`resolve`属性分配给一个函数。在这个函数内部，我们首先检查这个promise的状态。如果它是pending状态，我们返回`false`。在接下来的代码中，我们将遍历包含我们在`then`方法中定义的处理器的数组：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Inside that loop, we apply the `shift()` function on the array. The `shift()`
    function allows us retrieve the first item from that array and remove it directly
    after. Thus, the `handler` variable will contain the first item in the `handlers`
    array, and in return, the `handlers` array will contain all the items minus that
    first one which is now stored in the `var` handler.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在循环内部，我们对数组应用了`shift()`函数。该`shift()`函数允许我们从数组中检索第一个元素并直接删除它。因此，`handler`变量将包含`handlers`数组中的第一个元素，而作为回应，`handlers`数组将包含所有元素减去现在存储在`var`
    handler中的第一个元素。
- en: 'Next in the `resolve` function, we will define a variable named `doResolve`,
    which is set to the value of either the `fulfillPromise` function or the `rejectPromise`
    handler depending on the state as per the following code:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在`resolve`函数中接下来，我们将定义一个名为`doResolve`的变量，其值根据状态要么是`fulfillPromise`函数，要么是`rejectPromise`处理程序，如下面的代码所示：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Tip
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'The preceding syntax uses the ternary operator. It is called the ternary operator,
    because unlike all other operators that take two values, this operator actually
    requires a third value to be placed in the middle of the operator. It is like
    a single-statement shorthand alternative for an `if` statement, where both the
    `if` and `else` clauses will assign different values to the same variable as per
    the following example:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的语法使用了三元运算符。它被称为三元运算符，是因为与其他所有需要两个值的运算符不同，这个运算符实际上需要第三个值放在运算符的中间。它就像是一个单条语句的`if`语句的简写形式，其中`if`和`else`子句将不同的值赋给同一个变量，如下面的示例所示：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The ternary operator will transform the `if` statement to the following single-line
    condition statement:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 三元运算符将`if`语句转换为以下单行条件语句：
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We need to add some sanity check for the `doResolve` function. If it is not
    of the type function or the function doesn''t exist, then we invoke the `changeMyState`
    method on the promise so that we pass along the state and the value:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要对`doResolve`函数进行一些逻辑检查。如果它不是函数类型或者该函数不存在，那么我们调用`changeMyState`方法来改变承诺的状态并传递状态和值：
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Implementing the doResolve function
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现doResolve函数
- en: 'The other route for this code would be that the `doResolve` function exists,
    and we need to return the promise with a value or reject it with an error. So,
    we follow up the `if` condition with an `else` statement to implement this case
    as per the following code:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码的另一种情况是`doResolve`函数存在，我们需要用值返回承诺，或者用错误拒绝它。所以，我们在`if`条件后跟一个`else`语句来实现这个情况，如下面的代码所示：
- en: '[PRE10]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'As per the code logic so far, we would now have `doResolve` containing the
    `handler.fulfillPromise` or `handler.rejectPromise` functions. These two functions
    can manually change the state of the promise and take one argument, which is the
    current value or current reason. Both values are contained in the `this.value`
    variable. Hence, we will pass the current value to `doResolve` and assign the
    result to a variable named `promiseValue` as per the following line of code:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 根据目前的代码逻辑，我们现在应该有`doResolve`包含`handler.fulfillPromise`或`handler.rejectPromise`函数之一。这两个函数可以手动改变承诺的状态，并接受一个参数，即当前值或当前原因。这两个值都包含在`this.value`变量中。因此，我们将当前值传递给`doResolve`，并将结果赋给一个名为`promiseValue`的变量，如下面的代码行所示：
- en: '[PRE11]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Next, we need to manage the promise returned with `promiseValue`. First, we
    check if the promise exists and has a valid `then` function as per the following
    code:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要管理随`promiseValue`返回的承诺。首先，我们检查承诺是否存在，并且是否有一个有效的`then`函数，如下面的代码所示：
- en: '[PRE12]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Assuming that we pass this condition, inside it we can call the `then` method
    on `promiseValue` since it now contains a promise that is the result of the `doResolve`
    function. We will pass two arguments to its `then` method: a function parameter
    for `onFullfilled`, and another one for `onRejected`, as the following code shows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们通过了这个条件，我们可以在其中调用`promiseValue`的`then`方法，因为现在它包含了一个由`doResolve`函数返回的承诺。我们将两个参数传递给它的`then`方法：一个函数参数`onFullfilled`，另一个参数`onRejected`，如下面的代码所示：
- en: '[PRE13]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'On the other hand, if the value returned by `promiseValue` was not a promise,
    we will not need to invoke the `then` method. Instead, we simply change the state
    to fulfilled and pass it the value. We will deal with this in an `else` statement
    as the following code shows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，如果`promiseValue`返回的值不是一个承诺，我们将不需要调用`then`方法。相反，我们简单地将状态更改为已兑现，并传递值。我们将处理这个情况，如下面的代码所示：
- en: '[PRE14]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Finally, since we are in a `try` statement, we will need to provide a `catch`
    statement accordingly, where we will deal with any error that is thrown if the
    operation fails. In that `catch` statement, we will change the state of the promise
    to rejected and pass it the error that arises. We will also close all the trailing
    braces:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，因为我们处于一个`try`语句中，我们将相应地提供一个`catch`语句，以处理操作失败时抛出的任何错误。在那个`catch`语句中，我们将承诺的状态更改为已拒绝，并传递产生的错误。我们还将关闭所有尾随的花括号：
- en: '[PRE15]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Resolving the promise includes some tedious checks, but these are necessary
    to guarantee the fidelity of the promise implementation against the specification.
    As you have seen, we added the logic as we proceeded, which starts off with a
    simple check to see if we are running the `onFulfilled` or `onRejected` functions
    based on the promise state. Following this, we change the state of their corresponding
    promise based on the return values.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 解决promise包括一些繁琐的检查，但这些是确保promise实现与规范保持一致的必要条件。正如你所见，我们在进行中添加了逻辑，开始时只是一个简单的检查，看看我们是否根据promise状态运行`onFulfilled`或`onRejected`函数。接着，根据返回值改变它们对应的promise状态。
- en: Tip
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Bear in mind that the implementation needs to adhere to the considerations and
    rules that exist in the specification. At any point of time, you can double-check
    the code with the details of the Promise API explained in [Chapter 2](part0018_split_000.html#H5A42-fe4c0b71cd2847c897e147ea131725a8
    "Chapter 2. The Promise API and Its Compatibility"), *The Promise API and Its
    Compatibility*, of this book.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，实现需要遵循规范中存在的考虑和规则。在任何时间点，你可以通过查看本书第2章*The Promise API and Its Compatibility*中解释的Promise
    API的详细信息来核对代码。
- en: 'We are almost finished, and what remain are two scenarios we haven''t addressed
    yet. The first scenario is that the `onFulfilled` and `onRejected` handlers must
    not be called in the same round of the event loop `while` (`this.handlers && this.handlers.length`).
    We do this check because `while` is looping through each `then` call. In a `then`
    call, the promise is either fulfilled or rejected. Hence, in our case here, we
    have the `onFulfilled` and `onRejected` handlers. To fix this issue, we will need
    to add the `then` methods to the array only after the event loop. We can achieve
    this with the use of the `setTimeout` function, which, in turn, ensures we are
    always running asynchronously. Let us add the `setTimeout` function in the `then`
    method and wrap the function that stores the promise handlers in the array, as
    the following code shows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经接近完成，剩下的是我们还没有解决的两种场景。第一个场景是`onFulfilled`和`onRejected`处理程序必须在事件循环的同一轮中（当`this.handlers
    && this.handlers.length`时）不得调用。我们进行这个检查是因为`while`正在遍历每个`then`调用。在`then`调用中，promise要么被解决要么被拒绝。因此，在我们这里，我们有`onFulfilled`和`onRejected`处理程序。为了解决这个问题，我们将在事件循环之后仅将`then`方法添加到数组中。我们可以使用`setTimeout`函数来实现这一点，从而确保我们始终以异步方式运行。让我们在`then`方法中添加`setTimeout`函数，并将存储promise处理程序的函数包装起来，如下面的代码所示：
- en: '[PRE16]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Wrapping the code
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 包装代码
- en: 'The final step in this implementation would be to indicate where and when we
    actually resolve the promise. There are two conditions that we need to check.
    The first one is when we are adding the `then` method, because the state of the
    promise might already be set there. And the second case is when the state of the
    promise changes in the `changeMyState` function. Hence, we will need to add a
    `this.resolve()` call to the end of the `changeMyState` function. All we need
    to do now before we finalize the implementation is wrap all the code in an anonymous
    function named `PromiseMe`. It will use `Object.create` to give us a promise.
    And with that, the final code of this promise implementation will look as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个实现中的最后一步将是指出我们实际上何时解决promise。我们需要检查两个条件。第一个条件是我们添加`then`方法时，因为promise的状态可能已经在那里设置。第二个情况是在`changeMyState`函数中改变promise状态。因此，我们需要在`changeMyState`函数的末尾添加一个`this.resolve()`调用。在最终确定实现之前，我们需要做的一切就是将所有代码包裹在一个名为`PromiseMe`的无名函数中。它将使用`Object.create`给我们一个promise。有了这个，这个promise实现的最终代码将如下所示：
- en: '[PRE17]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The previous code represents a basic promises implementation in a small JavaScript
    library. It implements a promise object with its `t0068en` method, taking into
    consideration the specification requirements of how to fulfill and reject a promise
    while addressing the necessary checks to avoid anomalies in the implementation.
    We can take this library and start calling its `PromiseMe` object and its corresponding
    functions, `then`, `fulfillPromise`, and `rejectPromise`, to achieve some asynchronous
    operations.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码代表了一个小型JavaScript库中的基本promises实现。它实现了一个具有`t0068en`方法的promise对象，考虑到如何根据规范要求解决和拒绝promise，并在实现中进行必要的检查以避免异常。我们可以使用这个库并开始调用其`PromiseMe`对象及其相应的函数`then`、`fulfillPromise`和`rejectPromise`，以实现一些异步操作。
- en: Note
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'This implementation is a basic one; we can extend it to include many features
    and helper methods that can be built on top of the Promises API. Furthermore,
    we can build this implementation and test it against the Promises/A+ Compliance
    Test Suite, which can be found via this link: [https://github.com/promises-aplus/promises-tests](https://github.com/promises-aplus/promises-tests).'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这个实现是一个基本的实现；我们可以扩展它，包括许多可以在Promises API之上构建的功能和帮助方法。此外，我们可以构建这个实现，并将其与Promises/A+兼容性测试套件进行测试，该测试套件可以通过这个链接找到：[https://github.com/promises-aplus/promises-tests](https://github.com/promises-aplus/promises-tests)。
- en: On the link provided in the preceding information box, we can find the steps
    needed to complete the tests, which will need to run in a Node.js environment,
    and we need to make sure that Node.js is installed already.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面信息框中提供的链接中，我们可以找到完成测试所需的步骤，这些测试需要在Node.js环境中运行，我们需要确保Node.js已经安装。
- en: Putting the promise into action
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将承诺付诸行动
- en: 'We can take this basic implementation of promise that we just authored and
    use it in our code to handle our asynchronous operations. Let us have a look at
    an example of how to use this `PromiseMe` library. The following code can be added
    after this code for the `PromiseMe` object:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将刚刚编写的这个promise的基本实现用于我们的代码中，来处理我们的异步操作。让我们来看一个如何使用这个`PromiseMe`库的例子。可以在`PromiseMe`对象的代码之后添加以下代码：
- en: '[PRE18]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: What we are doing in the previous code is simply creating a function named `multiplyMeAsync`,
    which in turn instantiates `PromiseMe` to a variable named `promise` and then
    calls the `fulfillPromise` method on the `promise` variable we created, which
    is an instance of the `PromiseMe` object. What the `fulfillPromise` method does
    is simply multiply the `val` argument by the number 2\. Following that, we call
    `multiplyAsync` and pass it the number 2 as a value for its parameter; since it
    returns a promise, we can call the `then` method on it. The `then` method has
    a single handler, which handles the success and simply pops up an alert with the
    value that should now be 4.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，我们只是创建了一个名为`multiplyMeAsync`的函数，该函数进而将`PromiseMe`实例化给名为`promise`的变量，然后在我们创建的`PromiseMe`对象的`promise`变量上调用`fulfillPromise`方法。`fulfillPromise`方法所做的仅仅是将`val`参数乘以数字2。随后，我们调用`multiplyAsync`，并将2作为其参数的值传递给它；由于它返回一个承诺，我们可以调用其`then`方法。`then`方法有一个单一的处理程序，处理成功并弹出一个带有现在应该为4的值的警告。
- en: Run the script in an HTML page, and we should have an alert displaying the number
    4.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在HTML页面中运行脚本，我们应该会看到一个显示数字4的警告。
- en: Note
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can find the complete code and test it out at jsFiddle via [http://jsfiddle.net/RamiSarieddine/g8oj4guo/](http://jsfiddle.net/RamiSarieddine/g8oj4guo/).
    Make sure the browser supports promises.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在jsFiddle中找到完整的代码并通过[http://jsfiddle.net/RamiSarieddine/g8oj4guo/](http://jsfiddle.net/RamiSarieddine/g8oj4guo/)进行测试。确保浏览器支持承诺。
- en: Let us try to add some error handling to this code. First, for the sake of simplicity
    and readability, I will create a function named `alertResult` to replace `alert(value);`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试给这段代码添加一些错误处理。首先，为了简单和可读性，我将创建一个名为`alertResult`的函数来替代`alert(value);`。
- en: 'Hence, we will have a function as the following:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将有一个如下所示的函数：
- en: '[PRE19]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We will add another function called `onError`, which basically displays an
    alert with the error message passed to it. The function will have the following
    syntax:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将添加另一个名为`onError`的函数，该函数基本上会带有传递给它的错误消息的警告。该函数将有以下语法：
- en: '[PRE20]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now, let us add a function that will include error handling by detecting an
    anomaly and rejecting the promise. The following code shows this:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们添加一个包含错误处理的函数，通过检测异常并拒绝承诺来包含错误处理。下面的代码显示了这一点：
- en: '[PRE21]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'What the previous function does is simply check for the value; if it is zero,
    the function rejects the promise; otherwise, it fulfills the promise by dividing
    the number 1 by `val`. To test this, we will pass the value 0 to `multiplyAsync`
    , invoke `divideAsync` in its `then` call, and finish by calling an error function
    in the `then` method of `divideAsync`. The code will look as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个函数所做的仅仅是检查值；如果值为零，函数拒绝承诺；否则，通过将数字1除以`val`来履行承诺。为了测试这个，我们将把值0传递给`multiplyAsync`，在其`then`调用中调用`divideAsync`，最后在`divideAsync`的`then`方法中调用一个错误函数。代码将如下所示：
- en: '[PRE22]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The end result will be an error message that displays the text **cannot divide
    by zero**. That is because zero got passed to `divideAsync`, which in turn rejected
    the promise, and an error message was passed to the `onError` handler.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 最终结果将是一个显示“不能除以零”的错误信息。这是因为零被传递给了`divideAsync`，它进而拒绝了承诺，并将错误信息传递给了`onError`处理器。
- en: Note
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can find the updated code with this error handler scenario on the following
    jsFiddle URL:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下jsFiddle URL上找到带有此错误处理场景的更新代码：
- en: '[http://jsfiddle.net/RamiSarieddine/g8oj4guo/15/](http://jsfiddle.net/RamiSarieddine/g8oj4guo/15/)'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考以下链接：[http://jsfiddle.net/RamiSarieddine/g8oj4guo/15/](http://jsfiddle.net/RamiSarieddine/g8oj4guo/15/)
- en: 'To wrap it up, promises do offer a very good solution to address the complexities
    of asynchronous operations. The abstraction that promises provide allows us to
    do several things more easily, especially common asynchronous patterns using callbacks,
    with the support of the following major properties:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，承诺为异步操作的复杂性提供了一个非常好的解决方案。承诺提供的抽象让我们能更容易地做很多事情，尤其是使用回调的常见异步模式，具有以下主要特性：
- en: A single promise can be attached to and cater to more than one callback
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个承诺可以附加到多个回调函数上
- en: Values and errors get passed along in the promise
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 值和错误会在承诺中传递
- en: Summary
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Throughout the previous five chapters of this book, we have learned a great
    deal about promises. We started with asynchronous programming in JavaScript and
    took stock of where promises stand amidst that world, during which we discussed
    in detail why you should care about promises as of now. Next, we dived deep into
    the Promises API and a thorough description of its `then` method. Following this,
    we learned about the browsers that currently support promises and the libraries
    that implement promise-like features. Next, we covered the chaining of promises
    and gave a detailed explanation of how we can achieve this as well as queue the
    asynchronous operations using promise chains. Our third stop was error handling,
    one of the most important aspects of the concept of promises. We stepped back
    and took a look at exceptions in JavaScript and how they are addressed in promises.
    We also learned about the `catch` method as part of handling errors with promises.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在前五章中，我们已经学习了关于承诺（promises）的大量知识。我们从JavaScript的异步编程开始，了解了承诺在其中的地位，并详细讨论了为什么你应该关心承诺。接下来，我们深入探讨了Promises
    API及其`then`方法。然后，我们了解了目前支持承诺的浏览器和实现类似承诺特性的库。之后，我们覆盖了承诺的链式操作，并详细解释了如何实现以及如何使用承诺链来队列异步操作。第三个主题是错误处理，这是承诺概念中最重要的方面之一。我们退一步看了看JavaScript中的异常以及它们如何在承诺中得到处理。我们还学习了作为错误处理一部分的`catch`方法。
- en: Promises now have native support in JavaScript, and this is a focal time in
    the world of web and client-side development to start leveraging this technology.
    As we move forward, more browsers will start adopting promises as a standard and
    have it become native in the browser.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，承诺已经在JavaScript中有了原生支持，这是在网页和客户端开发世界中利用这项技术的焦点时刻。随着技术的发展，更多的浏览器将开始采用承诺作为标准，并在浏览器中实现原生支持。
- en: If people around you have been making noise about JavaScript promises, well
    now you know why. This book represents a single point of reference—a comprehensive
    one—just when you want to learn about promises and saving you from all these bits
    and pieces scattered out there on the Web. You can take this learning and implement
    it right away. You can always come back to this book for reference and details
    on the API. From here, you can start implementing your own promise libraries and
    make use of other libraries available as well as delve into other implementations,
    such as Node.js. You can also start using promises for the asynchronous requests
    to databases, the Web, or file servers.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你周围的人一直在谈论JavaScript的承诺，现在你知道原因了。这本书是你学习承诺的一个全面的参考点，它帮你节省了在网上找寻零散信息的麻烦。你可以立即开始实现这些学习内容。你随时可以回来查阅这本书，了解API的详细信息。从这里开始，你可以开始实现自己的承诺库，并利用其他可用的库，以及深入研究其他实现，如Node.js。你还可以开始使用承诺来进行数据库、网络或文件服务器上的异步请求。
- en: I hope you enjoyed reading this book and that it left you equipped with the
    right knowledge, tools, and tips to put that learning into practice and make some
    killer applications that leverage the power of JavaScript promises.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望您喜欢阅读这本书，并且它为您提供了正确的知识、工具和小贴士，以便将学习付诸实践，并开发出利用JavaScript承诺力量的一些绝佳应用程序。
