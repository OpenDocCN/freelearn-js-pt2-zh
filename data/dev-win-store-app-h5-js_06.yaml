- en: Chapter 6. Making the App Responsive
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。使应用具有响应性
- en: In this chapter, we will learn about the different view states that the app
    can exist in and how we can make the app adapt to these view states and to a variety
    of form factors and displays sizes. Windows 8 targets different platforms and
    runs on various devices with dissimilar sizes, from large HD monitors and laptops
    to 10-inch widescreen tablets and 4-inch-wide smartphones. So, in order to abide
    by the Windows 8 UX guidelines, the app should maintain the same look and feel
    and sustain its functionality when users view it on these different devices, they
    flip their screen to toggle between landscape and portrait orientation, they zoom
    in or out, or the app switches between the various view states. The app should
    provide fluid and flexible layouts in a way that allows its UI to reflow gracefully
    and cater for these changes.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习应用程序可能存在的不同视图状态以及我们如何使应用程序适应这些视图状态以及各种外形因素和显示尺寸。Windows 8针对不同的平台，并在具有不同尺寸的各种设备上运行，从大型高清显示器和大笔记本电脑到10英寸宽屏平板电脑和4英寸宽智能手机。因此，为了遵守Windows
    8用户体验指南，当用户在这些不同设备上查看应用程序时，他们翻转屏幕以在纵向和横向之间切换，他们放大或缩小，或者应用程序在各种视图状态之间切换，应用程序应该保持相同的视觉感受和功能。应用程序应提供流畅灵活的布局，使其用户界面能够优雅地重新流动并适应这些变化。
- en: Throughout this chapter, we will learn how to make the app responsive so that
    it handles screen sizes and view state changes and responds to zooming in and
    out. We will first introduce the concept of app view states and then we will learn
    how to handle changes in view states with CSS and JavaScript. Lastly, we will
    learn about the concept of Semantic Zoom in apps.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何使应用程序具有响应性，以便它能够处理屏幕大小和视图状态的变化，并响应放大和缩小。我们首先介绍应用视图状态的概念，然后学习如何使用CSS和JavaScript处理视图状态的变化。最后，我们将学习有关应用中的语义缩放的概念。
- en: Introducing app view states
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍应用视图状态
- en: 'The view states represent the ways that the user can choose to display the
    app. There are four possible application view states; they are listed here with
    the description of each:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 视图状态代表了用户可以选择以显示应用程序的方式。有四种可能的应用程序视图状态；它们在这里列出，每个的描述如下：
- en: '**Full screen landscape view**: With this, the app fills the entire screen,
    and this is the default state for all Windows Store apps.![Introducing app view
    states](img/7102EN_06_01.jpg)'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**全屏横向视图**：使用这种模式，应用会填满整个屏幕，这是所有Windows商店应用的默认状态。![介绍应用视图状态](img/7102EN_06_01.jpg)'
- en: '**Full screen portrait**: With this, the app fills the entire screen again,
    but this time in a portrait orientation.![Introducing app view states](img/7102EN_06_02.jpg)'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**全屏纵向视图**：使用这种模式，应用会再次填满整个屏幕，但这次是纵向的。![介绍应用视图状态](img/7102EN_06_02.jpg)'
- en: '**Snapped view**: With this, the app fills a narrow region of the entire screen
    (320px) either to the left or right; thus, the screen will display two apps simultaneously.![Introducing
    app view states](img/7102EN_06_03.jpg)'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**吸附视图**：使用这种模式，应用程序填满整个屏幕的狭窄区域（320px），位于屏幕的左侧或右侧；因此，屏幕将同时显示两个应用程序。![介绍应用视图状态](img/7102EN_06_03.jpg)'
- en: '**Filled view**: With this, the app runs side by side with a snapped app and
    it fills the region of the screen that is not occupied by that app; thus, the
    screen will display two apps simultaneously again.![Introducing app view states](img/7102EN_06_04.jpg)'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**填充视图**：使用这种模式，应用程序会与一个“吸附”的应用程序并排运行，并填充屏幕上未被该应用程序占据的区域；因此，屏幕将再次同时显示两个应用程序。![介绍应用视图状态](img/7102EN_06_04.jpg)'
- en: If we look at the preceding image, we will see two apps running side by side;
    one in snapped view and the other in filled view. The user has snapped an app
    (Bing News) by dragging another app (the weather app) or window onto the screen.
    The second app will become the currently running app and will have the filled
    view state while the once fullscreen app will be snapped to the side. Now the
    user can toggle the view state of these apps between snapped and filled by pressing
    the Windows key and period (*.*).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们观察前面的图片，将会看到两个应用程序并排运行；一个处于“吸附”视图，另一个处于填充视图。用户通过将另一个应用程序（天气应用）或窗口拖到屏幕上，将一个应用程序（必应新闻）“吸附”到一边。第二个应用程序将成为当前运行的应用程序，并具有填充视图状态，而之前的全屏应用程序将被吸附到一边。现在，用户可以通过按下Windows键和句点（*.*）来切换这些应用程序的视图状态，在“吸附”和“填充”之间切换。
- en: Snapping an app resizes it to 320 pixels wide, which allows it to share the
    screen with another app, thus enabling two apps to be visible at the same time
    so the user can multitask.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序“吸附”后，其大小会被调整为320像素宽，这使得它可以与其他应用程序共享屏幕，从而实现同时显示两个应用程序，使用户能够多任务操作。
- en: Note
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can have snapped and filled views only on displays with a horizontal resolution
    greater than or equal to 1366 relative pixels. This is because the snapped view
    will occupy 320 pixels on either side of the screen. So, the remaining 1046 pixels
    will be allocated to the splitter (22 pixels) and the app in filled view, which
    must always have a horizontal resolution of 1024 relative pixels or greater. Thus,
    the size of 1366 x 768 is considered a reference point.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 只能在水平分辨率大于或等于1366相对像素的显示器上拥有吸附和填充视图。这是因为吸附视图将占用屏幕两侧的320像素。所以，剩下的1046像素将分配给分隔符（22像素）和填充视图中的应用，填充视图中的应用必须始终具有1024相对像素或更大的水平分辨率。因此，1366
    x 768的大小被认为是参考点。
- en: The app can always be snapped either manually, when the user snaps it to either
    side, or automatically, in response to another app being dragged into the full
    screen. Thus, you cannot prevent an app from getting into the snap view. Since
    users can snap every app, if you don't design your app for the snapped view state,
    the system will resize your app anyway and might crop the content and mess up
    the way the app looks.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 应用总是可以被手动或自动吸附，手动吸附是指用户将其吸附到屏幕的任一侧，自动吸附是指响应另一个应用被拖入全屏模式。因此，你不能阻止应用进入吸附视图。由于用户可以将每个应用吸附起来，如果你没有为应用的吸附视图状态设计，系统将会无论如何调整你的应用大小，可能会裁剪内容，使应用的外观变得混乱。
- en: Rotation, on the other hand, is not obligatory, and you can choose to make your
    app support it or not. So, if your app does not support portrait orientation and
    the user flips the device, nothing will happen to your app; that is, it will not
    rotate with the new device orientation. Having said this, of course, it is highly
    recommended to support rotation in order to have a satisfied user, who is, after
    all, the target of your app.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，旋转不是强制的，你可以选择让应用支持或不支持。所以，如果你的应用不支持纵向旋转，用户把设备翻转过来，你的应用也不会有任何变化；也就是说，应用不会随着新设备的旋转而旋转。话说回来，当然，为了拥有一个满意的用户，强烈建议支持旋转，毕竟，用户才是应用的目标。
- en: 'When you click and open the `package_appmanifest` file, you will be able to
    set up options for the application UI; one of these options is **Supported rotations**,
    which is an optional setting that indicates the app''s orientation preference
    and has four values: **Landscape**, **Portrait**, **Landscape-flipped**, and **Portrait-flipped**,
    as shown in the following screenshot:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当你点击并打开`package_appmanifest`文件时，你可以设置应用程序UI的选项；这些选项之一是**支持的旋转**，这是一个可选设置，表示应用的朝向偏好，有四个值：**横向**、**纵向**、**横向翻转**和**纵向翻转**，如下面的屏幕截图所示：
- en: '![Introducing app view states](img/7102EN_06_05.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![介绍应用视图状态](img/7102EN_06_05.jpg)'
- en: Handling a view state
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理视图状态
- en: 'There are two ways to cater for a snapped view: by using the CSS3 media queries
    or by using the JavaScript layout change events, and sometimes both. We use media
    queries for changes in layout that can be tackled using CSS-like element sizes,
    element display (inline, block), and element visibility. By using CSS media queries,
    it becomes very easy to define different styles that will be applied depending
    on the view state of the app. You can use a separate media query for each view
    state you have, or you can apply the same set of styles to multiple view states
    by combining more than one media query. The following code shows the syntax for
    a media query that matches the different view states; the first one matches the
    snapped view state and the second matches a combination of view states.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 为了适应吸附视图，有两种方法：使用CSS3媒体查询或使用JavaScript布局变化事件，有时两者都需要。我们用媒体查询来处理可以通过CSS样式的元素大小、元素显示（内联、块）和元素可见性来解决的布局变化。通过使用CSS媒体查询，可以非常容易地定义不同的样式，这些样式将根据应用的视图状态应用。你可以为每个视图状态使用一个单独的媒体查询，或者通过结合多个媒体查询将相同的样式集应用于多个视图状态。下面的代码展示了匹配不同视图状态的媒体查询的语法；第一个匹配吸附视图状态，第二个匹配视图状态的组合。
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'So, if we have a set of classes and other selectors specifying the styles in
    the UI, we can change these styles with every media query. For example, the following
    code shows the wrapper `div` of the page defined as CSS Grid with two columns;
    it is changed to a single column layout once inside the `media` query for the
    view state `snapped`:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，如果我们有一组类和其他选择器在UI中指定样式，我们可以用每个媒体查询改变这些样式。例如，下面的代码显示了定义为CSS网格的两列的页面包装`div`；一旦进入`media`查询中的视图状态`snapped`，它就变成了单列布局：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The units `vw` and `vh`, set for the width and height values shown in the preceding
    code, represent view width and view height respectively, which specify the full
    width and height resolution that the app is occupying.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 前述代码中为宽度值和高度值设置的单位`vw`和`vh`分别代表视图宽度和视图高度，它们指定了应用占用的完整宽度和高度分辨率。
- en: The previous code sample shows the use of CSS Grid, which is one of the most
    convenient ways to achieve a fluid and adaptable UI layout that can handle the
    change in view states. This is because the Grid automatically expands to distribute
    the content and fill the available space and it allows you to dictate the position
    of elements inside it purely by CSS, independent of the order in which they are
    specified in the HTML markup. This makes it easy to specify the different arrangements
    for the elements on different screen sizes or in different view states.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码示例展示了CSS网格的使用，这是实现流体和适应性UI布局的一种非常方便的方法，该布局可以处理视图状态的变化。这是因为网格会自动扩展以分配内容和填充可用空间，并且允许你仅通过CSS来指定其内部的元素位置，而与它们在HTML标记中的指定顺序无关。这使得指定不同屏幕大小或不同视图状态下的元素不同排列变得容易。
- en: 'The second approach to handling change in window sizes is to use JavaScript
    events, which are the best option when you tackle changes in behavior and properties
    that cannot be specified with CSS styles, such as the scroll direction of the
    `WinJS` ListView control and the control changes (such as changing from a horizontal
    list of buttons to a drop-down list control). If we take the case of a ListView
    control, it uses the grid mode to display the items vertically and horizontally
    in a way that fills the `container` element and the available space when the app
    is in landscape, is in portrait, or is filled. But when the app is snapped, the
    ListView control should rearrange and display the items vertically only to avoid
    horizontal scrolling using the list mode. The list and grid mode cannot be specified
    in the CSS because they are defined in the `data-win-options` attribute as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 处理窗口大小变化的第二种方法是使用JavaScript事件，当需要处理行为和属性的变化时，这是最好的选择，这些变化不能用CSS样式来指定，比如`WinJS`列表视图控制器的滚动方向和控件变化（例如，将水平按钮列表更改为下拉列表控件）。如果我们以列表视图控制器为例，它使用网格模式以填充容器元素和可用空间的方式垂直和水平显示项目，当应用处于横屏、竖屏或填满状态。但是当应用被
    snapped 时，列表视图控制器应该重新排列并仅垂直显示项目，以避免使用列表模式进行水平滚动。列表和网格模式不能在CSS中指定，因为它们是在`data-win-options`属性中定义的，如下所示：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here is where the JavaScript events come in, allowing us to create view-specific
    layouts by registering an event listener for the window resize event that queries
    the `ViewManagement.ApplicationView.value` property, which is provided by the
    WinRT to directly query the current view state of an app. The following sample
    shows the code of an event listener for the window resize event:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这里就是JavaScript事件发挥作用的地方，通过注册一个窗口大小变化事件的监听器，我们可以创建特定于视图的布局，该监听器查询由WinRT提供的`ViewManagement.ApplicationView.value`属性，直接查询应用的当前视图状态。下面的示例展示了窗口大小变化事件的监听器的代码：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: ListView and Grid are flexible controls that provide maximum control over the
    UI with minimum development efforts, as both support the built-in flexible layouts
    and can arrange and distribute their content automatically. You should try to
    use them wherever possible.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 列表视图（ListView）和网格（Grid）是灵活的控制组件，它们能以最小的开发工作提供对用户界面的最大控制，因为两者都支持内置的灵活布局，并能自动安排和分布其内容。你应尽可能地尝试使用它们。
- en: Understanding semantic zoom
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解语义缩放
- en: As per the UX guidelines for the Windows Store app, the content flows horizontally
    and the user will, either by mouse or by touch, scroll the content from left to
    right or right to left (in some languages). But imagine a scenario where you have
    content that features a long list of data, such as in the case of an address book
    or maybe a list of different news articles, where scrolling to navigate the content
    becomes cumbersome for the user. In the case of an address book app where the
    contacts are organized alphabetically, the user has to scroll all the way to find
    a contact whose name starts with the letter z; that is, at the end of list, while
    the user could zoom out to the view level that only lists the letters and find
    a specific contact that falls under that letter.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 根据Windows Store应用的UX指南，内容是水平流动的，用户可以通过鼠标或触摸，从左向右或从右向左滚动内容（在某些语言中）。但想象一个场景，你有一个包含大量数据的内容，比如电话簿或者新闻文章列表，在这种情况下，滚动内容以导航变得对用户来说很繁琐。在电话簿应用中，联系人按字母顺序组织，用户必须滚动到最后才能找到一个以字母z开头的联系人；也就是说，在列表的末尾，而用户可以缩放到只列出字母的视图级别，并找到那个字母下具体的一个联系人。
- en: 'The same goes for a catalog or a news app that organizes items/articles by
    category; instead of long scrolling to reach the desired content, which falls
    under a category that happens to be at the end of the list, the user can zoom
    out to the category level. The following screenshots show a "zoomed-out" view
    of the People app and Bing News app on Windows 8, respectively:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 同样的，对于一个按类别组织项目/文章的目录应用或新闻应用也适用；不必长时间滚动滚动条以达到所需内容，特别是那些恰巧位于列表末尾的类别，用户可以缩放到类别级别。下面的屏幕快照分别显示了Windows
    8上的People应用和Bing News应用的“缩放出”视图：
- en: '![Understanding semantic zoom](img/7102EN_06_06.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![理解语义缩放](img/7102EN_06_06.jpg)'
- en: 'The semantic zoom view of the Bing News app in Windows 8 is shown as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Bing News应用在Windows 8中的语义缩放视图：
- en: '![Understanding semantic zoom](img/7102EN_06_07.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![理解语义缩放](img/7102EN_06_07.jpg)'
- en: Note
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The semantic zoom interaction is touch-optimized, so it can be performed with
    the pinch and stretch gestures. Also, the user can zoom either by scrolling the
    mouse scroll wheel or using the keyboard by holding the *Ctrl* key down and pressing
    the plus (+) or minus (-) key.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 语义缩放交互是触摸优化的，因此可以通过捏合和拉伸手势来执行。另外，用户可以通过鼠标滚轮滚动或按住*Ctrl*键并按加号（+）或减号（-）键使用键盘来进行缩放。
- en: 'This technique is called **semantic zoom** and is used by Windows Store apps
    for presenting—in a single view—two levels of detail for large sets of related
    content while providing quicker navigation. This technique uses two zoom levels
    of the same content for organizing the data: a "zoomed-in" detailed view, which
    is the default mode of display for the apps, and a "zoomed-out" view, which displays
    the items in groups based on some metadata.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这种技术称为**语义缩放**，Windows Store应用使用它来在单个视图中呈现大量相关内容的两个详细级别，并提供更快的导航。这种技术使用同一内容的两个缩放级别来组织数据：一个“缩放进”的详细视图，这是应用显示的默认模式，以及一个“缩放出”视图，它根据某些元数据将项目分组显示。
- en: 'In order to provide the app with the semantic zoom feature, we will need to
    define these two modes of semantic levels. Luckily, `WinJS.UI` offers us the best
    way to do so using the `WinJS.UI.SemanticZoom` object, which will in turn render
    a semantic zoom control that enables the user to zoom between two different views
    of the same content. The zoom control uses two child controls to render these
    two different views; the first child control will supply the zoomed-out view and
    the other will provide the zoomed-in view or vice versa. It is quite easy to declare
    a semantic zoom control, either in the markup or in script as shown in the following
    code:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为了给应用提供语义缩放功能，我们将需要定义这两种语义级别的模式。幸运的是，`WinJS.UI`为我们提供了使用`WinJS.UI.SemanticZoom`对象的最佳方式，该对象将渲染一个语义缩放控件，使用户能够缩放同一内容的两个不同的视图。缩放控件使用两个子控件来渲染这两个不同的视图；第一个子控件将提供缩放出视图，另一个将提供缩放进视图或相反。如以下代码所示，声明语义缩放控件在标记或脚本中非常简单：
- en: 'In HTML:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在HTML中：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In JavaScript:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中：
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: After we have defined the `SemanticZoom` control, let's add to it the two child
    controls that will hold the two views.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 定义了`SemanticZoom`控件之后，让我们向其中添加两个子控件，以容纳两个视图。
- en: 'Bear in mind that the child controls should support the semantic zoom functionality
    by implementing the `IZoomableView` interface, which in turn allows the control
    to be exposed as either a zoomed-in or a zoomed-out view of the `SemanticZoom`
    control. Currently, the only control provided by Windows Library for JavaScript
    that supports this functionality is the ListView control. Hence, the two child
    controls will be two instances of a ListView control, as shown in the following
    code:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，子控件应通过实现`IZoomableView`接口来支持语义缩放功能，这样控件就可以作为`SemanticZoom`控件的放大或缩小视图暴露出来。目前，Windows库for
    JavaScript提供的唯一支持此功能的控件是ListView控件。因此，两个子控件将是两个ListView控件的实例，如下面的代码所示：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now we need some data to display in these two views. Do you recall the data
    array we created back in [Chapter 4](ch04.html "Chapter 4. Developing Apps with
    JavaScript"), *Developing Apps with JavaScript*, when we were getting introduced
    to the ListView control? Well, let''s use it again and add more names to it. Feel
    free to add as many as you like; here it is again for reference:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要一些数据来在这些两个视图中显示。你还记得我们在[第4章](ch04.html "第4章 使用JavaScript开发应用程序")《使用JavaScript开发应用程序》中创建的数据数组吗？当我们开始介绍ListView控件时。好吧，让我们再次使用它并添加更多名称。随意添加你喜欢的任何内容；以下是为了参考再次给出的数据：
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now we need to create a version of this data source that contains the grouping
    information. We can do so using the `createGrouped` method, which allows us to
    create a grouped version of the list. We learned about similar methods, `createdFiltered`
    and `createSorted`, in the previous chapter. The `createGrouped` method creates
    a grouped projection over a list and takes the following three function parameters:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要创建一个包含分组信息的此数据源的版本。我们可以使用`createGrouped`方法来实现，该方法允许我们创建列表的组版本。我们在上一章学习了类似的方法，`createdFiltered`和`createSorted`。`createGrouped`方法在列表上创建一个分组投影，并接受以下三个函数参数：
- en: '`getGroupKey`: This takes an item in the list and returns the group key that
    this item belongs to'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getGroupKey`：此方法接收列表中的一个项目，并返回该项目所属的分组键。'
- en: '`getGroupData`: This takes an item in the list and returns the data object
    that represents the group that this item belongs to'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getGroupData`：此方法接收列表中的一个项目，并返回代表该项目所属分组的对象的数据。'
- en: '`compareGroups`: This compares two groups and returns a negative value if the
    first group has a lesser value than the second group, zero if the two groups have
    the same value, and a positive value if the first group has a greater value than
    the second group'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`compareGroups`：如果第一个组的价值小于第二个组，则返回负值；如果两个组的价值相同，则返回零；如果第一个组的价值大于第二个组，则返回正值。'
- en: 'The following code will create a grouped version of our `bindingList` object,
    which uses the first letter of each item''s name to define the metadata:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码将创建一个包含我们`bindingList`对象的组版本，该对象使用每个项目名称的第一个字母来定义元数据：
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In order to bind the grouped data to the zoomed-out `ListView` control, we
    set its `itemDataSource` property to `groupedItemsList.groups.dataSource`, which
    contains the group information, and we set `itemDataSource` for the zoomed-in
    `ListView` control to `groupedItemsList.dataSource`, which contains the items
    to display, as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将分组数据绑定到放大视图的`ListView`控件上，我们将它的`itemDataSource`属性设置为`groupedItemsList.groups.dataSource`，它包含分组信息，并将放大视图的`ListView`控件的`itemDataSource`属性设置为`groupedItemsList.dataSource`，它包含要显示的项目，如下所示：
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: With this knowledge in hand, you can create templates for both views as we learned
    in [Chapter 4](ch04.html "Chapter 4. Developing Apps with JavaScript"), *Developing
    Apps with JavaScript*, to better present the data.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些知识，你可以按照我们在[第4章](ch04.html "第4章 使用JavaScript开发应用程序")《使用JavaScript开发应用程序》中学到的内容，为视图创建模板，以便更好地展示数据。
- en: Summary
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter we got introduced to the different view states that the user
    can choose to display apps. Then we learned about the techniques and controls
    that allow us to cater to the changes in these view states, either by CSS and
    media queries or using JavaScript event handlers that detect the change in window
    size.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了用户可以选择显示应用程序的不同视图状态。然后，我们学习了如何通过CSS和媒体查询或使用检测窗口大小的JavaScript事件处理程序来适应这些视图状态的变化。
- en: Finally, we learned about semantic zoom and how easy it is to incorporate this
    feature into an app.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们学习了语义缩放以及如何轻松地将此功能集成到应用程序中。
- en: In the following chapter we will learn about live tiles, how to add tiles and
    badges to the app logo, and make the tiles alive and send notifications from the
    app to the user.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章节中，我们将学习关于动态磁贴的知识，如何向应用图标添加磁贴和徽章，以及如何使磁贴具有动态效果，并从应用向用户发送通知。
