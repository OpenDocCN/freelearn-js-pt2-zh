- en: Chapter 3. Styling the User Interface
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。用户界面样式
- en: 'Now that we have an understanding of how an application is put together, we
    are going to take a look at some of the different visual elements you can use
    to customize your application. In this chapter, we will:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了应用程序是如何组合在一起的，接下来我们将看看您可以使用的一些不同的视觉元素来定制您的应用程序。在本章中，我们将：
- en: Take a closer look at toolbars and buttons, using layouts, and additional styles
    and icons to boost the visual appeal of the user interface
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仔细观察工具栏和按钮，使用布局，以及其他样式和图标来提升用户界面的视觉吸引力
- en: Expand on our previous work with icons; this includes using the Pictos icon
    font to display new icons
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展我们之前关于图标的工作；这包括使用Pictos图标字体显示新图标
- en: Talk about the considerations and shortcuts for working with different devices
    and screen sizes
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 讨论与不同设备和屏幕尺寸一起工作时的一些考虑和捷径
- en: Explore the incredibly powerful Sencha theme engine using Sass and Compass to
    create complex visual skins using simple CSS-style commands
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Sass和Compass探索极其强大的Sencha主题引擎，以简单CSS样式命令创建复杂的视觉皮肤
- en: Styling components versus themes
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 样式组件与主题
- en: Before we get into this chapter, it's important to have a good understanding
    of the difference between styling an individual component and creating a theme.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们进入本章之前，了解样式化单个组件与创建主题之间的区别非常重要。
- en: 'Almost every display component in Sencha Touch has the option to set its own
    style. For example, a `panel` component can use a style in this way:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎Sencha Touch中的每一个显示组件都有设置自身样式的选项。例如，`panel`组件可以这样使用样式：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The style can also be set as an object using:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 样式也可以使用如下方式作为对象设置：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Tip
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You will notice that inside the `style` block, we have quoted both sides of
    the configuration setting. This is still the correct syntax for JavaScript and
    a very good habit to get in to for using `style` blocks. This is because a number
    of standard CSS styles use a dash as part of their name. If we do not add quotes
    to `border-left`, JavaScript will read this as `border` minus `left` and promptly
    collapse in a pile of errors.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到在`style`块内部，我们对配置设置的两边都进行了引用。这仍然是JavaScript的正确语法，并且使用`style`块时这是一个非常好的习惯。这是因为许多标准CSS样式在其名称中使用连字符。如果我们不对`border-left`添加引号，JavaScript会将此读作`border`减去`left`，并立即在错误堆中崩溃。
- en: 'We can also set a `style` class for a component and use an external CSS file
    to define the class as follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以为组件设置一个`style`类，并使用外部CSS文件如下定义该类：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Your external CSS file could then control the style of the component in the
    following manner:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 您的外部CSS文件可以以如下方式控制组件的样式：
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This class-based control of display is considered a best practice as it separates
    the style logic from the display logic. This means that when you need to change
    a border color, it can be done in one file instead of hunting through multiple
    files for individual `style` settings.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这种基于类的显示控制被认为是最佳实践，因为它将样式逻辑与显示逻辑分开。这意味着当您需要更改边框颜色时，可以在一个文件中完成，而不是在多个文件中寻找单独的`style`设置。
- en: 'These styling options are very useful for controlling the display of individual
    components. There are also certain style elements, such as border, padding, and
    margin, that can be set directly in the components'' configuration:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这些样式选项对于控制个别组件的显示非常有用。还有一些样式元素，如边框、内边距和外边距，可以直接在组件的配置中设置：
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: These configurations can accept either a number to be applied to all sides or
    a CSS string value, such as `1px solid black` or `10 5 5 5`. The number should
    be entered without quotes but the CSS string values need to be within quotes.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这些配置可以接受一个数字以应用于所有边，或者是一个CSS字符串值，如`1px solid black`或`10 5 5 5`。数字应不带引号输入，但CSS字符串值需要在引号内。
- en: These kind of small changes can be helpful in styling your application, but
    what if you need to do something a bit bigger? What if you want to change the
    color or appearance of the entire application? What if you want to create your
    own default style for your buttons?
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这些小的更改在样式化您的应用程序时可能会有所帮助，但如果您需要做一些更大的事情呢？如果您想要更改整个应用程序的颜色或外观呢？如果想要为按钮创建自己的默认样式呢？
- en: This is where themes and UI styles come into play.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是主题和UI样式发挥作用的地方。
- en: UI styling for toolbars and buttons
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工具栏和按钮的UI样式
- en: Let's do a quick review of the basic MVC application we created in [Chapter
    2](ch02.html "Chapter 2. Creating a Simple Application"), *Creating a Simple Application*,
    and use it to start our exploration of styles with toolbars and buttons.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速回顾一下在[第2章](ch02.html "第2章. 创建一个简单应用程序")，*创建一个简单应用程序*中创建的基本MVC应用程序，并使用它开始探索带有工具栏和按钮的样式。
- en: To begin, we are going to add a few things to the first panel, which has our
    `titlebar`, `toolbar,` and **Hello World** text.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将向第一个面板添加一些内容，该面板包含我们的`titlebar`、`toolbar`和**你好世界**文本。
- en: Adding the toolbar
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加工具栏
- en: 'In `app/views`, you''ll find `Main.js`. Go ahead and open that in your editor
    and takea look at the first panel in our items list:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在`app/views`中，你会发现`Main.js`。打开编辑器中的这个文件，看看我们项目列表中的第一个面板：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We''re going to add a second toolbar on top of the existing one. Locate the
    `items` section, and after the curly braces for our first toolbar, add the second
    toolbar in the following manner:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在现有工具栏的顶部添加第二个工具栏。定位`items`部分，在第一个工具栏的花括号后添加第二个工具栏，如下所示：
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Don't forget to add a comma between the two toolbars.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记在两个工具栏之间加上逗号。
- en: Tip
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Extra or missing commas**'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**多余或缺少的逗号**'
- en: 'While working in Sencha Touch, one of the most common causes of parse errors
    is an extra or missing comma. When you are moving the code around, always make
    sure you have accounted for any stray or missing commas. Fortunately for us, the
    Safari Error Console will usually give us a pretty good idea about the line number
    to look at for these types of parse errors. A more detailed list of common errors
    can be found at:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在Sencha Touch中工作时，导致解析错误的最常见原因之一是多余或缺少逗号。当你移动代码时，请确保你已经考虑到了任何散落或丢失的逗号。幸运的是，对于这些类型的解析错误，Safari错误控制台通常会给我们一个关于查看哪一行的好主意。一个更详细的常见错误列表可以在以下网址找到：
- en: '[http://javascript.about.com/od/reference/a/error.htm](http://javascript.about.com/od/reference/a/error.htm)'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://javascript.about.com/od/reference/a/error.htm](http://javascript.about.com/od/reference/a/error.htm)'
- en: 'Now when you take a look at the first tab, you should see our new toolbar with
    our button to the left. Since the toolbars both have the same background, they
    are a bit difficult to differentiate. So, we are going to change the appearance
    of the bottom bar using the `ui` configuration option:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在当你查看第一个标签页时，你应该看到我们新的工具栏，以及左侧的新按钮。由于两个工具栏都有相同的背景，它们有点难以区分。所以，我们将使用`ui`配置选项更改底栏的外观：
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `ui` configuration is the shorthand for a particular set of styles in Sencha
    Touch. There are several `ui` styles included with Sencha Touch, and later on
    in the chapter, we will show you how to make your own.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`ui`配置是Sencha Touch中特定样式集的简写。Sencha Touch包含几个`ui`样式，我们将在本章后面向您展示如何创建自己的样式。'
- en: '![Adding the toolbar](img/0748OS_03_01.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![添加工具栏](img/0748OS_03_01.jpg)'
- en: Styling buttons
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 样式按钮
- en: 'Buttons can also use the `ui` configuration setting, for which they offer several
    different options:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮也可以使用`ui`配置设置，为此它们提供了几个不同的选项：
- en: '`normal`: This is the default button'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`normal`：这是默认按钮'
- en: '`back`: This is a button with the left side narrowed to a point'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`back`：这是一个左侧缩成一点的按钮'
- en: '`round`: This is a more drastically rounded button'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`round`：这是一个更急剧圆角的按钮'
- en: '`small`: This is a smaller button'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`small`：这是一个更小的按钮'
- en: '`action`: This is a brighter version of the default button (the color varies
    according to the active color of the theme, which we will see later)'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`action`：这是一个默认按钮的更亮版本（颜色根据主题的活跃颜色而变化，我们稍后会看到）'
- en: '`forward`: This is a button with the right side narrowed to a point'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`forward`：这是一个右侧缩成一点的按钮'
- en: Buttons also have some color options built into the `ui` option. These color
    options are `confirm` and `decline`. These options are combined with the previous
    shape options using a hyphen; for example, `confirm-small` or `decline-round`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮还内置了一些`ui`选项的颜色。这些颜色选项是`confirm`和`decline`。这些选项与前面的形状选项结合使用连字符；例如，`confirm-small`或`decline-round`。
- en: 'Let''s add some new buttons and see how this looks on our screen. Locate the
    `items` list with our button in the second toolbar:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加一些新按钮，看看这些按钮在我们的屏幕上看起来如何。在第二个工具栏中找到带有按钮的`items`列表：
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Replace that old `items` list with the following new `items` list:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 用以下新的`items`列表替换那个旧的`items`列表：
- en: '[PRE9]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This will produce a series of buttons across the top of our toolbar. As you
    may notice, all of our buttons are aligned to the left. You can move buttons to
    the right by adding a `spacer` xtype in front of the buttons you want pushed to
    the right. Try this by adding the following between our `Forward` and `Action`
    buttons:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在工具栏顶部产生一系列按钮。正如您所注意到的，我们的所有按钮都靠左对齐。您可以通过在您想要推向右边的按钮前面添加一个`spacer` xtype来将按钮移到右边。尝试通过在我们`Forward`和`Action`按钮之间添加以下内容来实现：
- en: '[PRE10]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This will make the `Forward` button move over to the right-hand side of the
    toolbar:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使`Forward`按钮移动到工具栏的右侧：
- en: '![Styling buttons](img/0748OS_03_02.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![按钮样式](img/0748OS_03_02.jpg)'
- en: 'Since buttons can actually be used anywhere, we can add some to our title bar
    and use the `align` property to control where they appear. Modify the `titlebar`
    for our first `panel` and add an `items` section, as shown in the following code:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 由于按钮实际上可以任何地方使用，我们可以在我们的标题栏添加一些按钮，并使用`align`属性来控制它们出现的位置。修改我们第一个`panel`的`titlebar`，并添加一个`items`部分，如下面的代码所示：
- en: '[PRE11]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now we should have two buttons in our title bar, one on either side of the
    title:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们标题栏应该有两个按钮，一个在标题的每一边：
- en: '![Styling buttons](img/0748OS_03_03.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![按钮样式](img/0748OS_03_03.jpg)'
- en: Let's also add some buttons to the `panel` container so we can see what the
    `ui` options `confirm` and `decline` look like.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还在`panel`容器中添加一些按钮，以便我们可以看到`ui`选项`confirm`和`decline`的样子。
- en: 'Locate the end of the `items` section of our `HelloPanel` container and add
    the following after the second toolbar:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们`HelloPanel`容器的`items`部分末尾，位于第二个工具栏后面添加以下内容：
- en: '[PRE12]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: There are two things you may notice that differentiate our panel buttons from
    our toolbar buttons. The first is that we declare `xtype:'button'` in our panel
    but we don't in our toolbar. This is because the toolbar assumes it will contain
    buttons and `xtype` only has to be declared if you use something other than a
    button. The panel does not set a default `xtype` attribute, so every item in the
    panel must declare one.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会注意到，我们的面板按钮和工具栏按钮之间有两个不同之处。第一个是我们在我们面板中声明了`xtype:'button'`，但在我们的工具栏中没有声明。这是因为工具栏假设它将包含按钮，而`xtype`只有在您使用除按钮之外的内容时才需要声明。面板没有设置默认的`xtype`属性，所以面板中的每个项目都必须声明一个。
- en: The second difference is that we declare `width` for the buttons. If we don't
    declare `width` when we use a button in a panel, it will expand to the full width
    of the panel. On the toolbar, the button auto-sizes itself to fit the text.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个区别是我们为按钮声明了`width`。如果我们不在面板中使用按钮时声明`width`，它将扩展到面板的整个宽度。在工具栏上，按钮会自动调整大小以适应文本。
- en: '![Styling buttons](img/0748OS_03_04.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![按钮样式](img/0748OS_03_04.jpg)'
- en: 'You will also see that our two buttons in the panel are mashed together. You
    can separate them out by adding `margin: 5` to each of the button configuration
    sections.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '您还会注意到我们面板中的两个按钮粘在一起。您可以通过为每个按钮配置部分添加`margin: 5`来将它们分开。'
- en: These simple styling options can help make your application easier to navigate
    and provide the user with visual clues for important or potentially destructive
    actions.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这些简单的样式选项可以帮助使您的应用程序更易于导航，并为用户提供了关于重要或潜在破坏性操作的视觉提示。
- en: The tab bar
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标签栏
- en: The tab bar at the bottom also understands the `ui` configuration option. In
    this case, the available options are `light` and `dark`. The tab bar also changes
    the icon appearance based on the `ui` option; a `light` toolbar will have dark
    icons and a `dark` toolbar will have light icons.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 底部的标签栏也理解`ui`配置选项。在这种情况下，可用的选项是`light`和`dark`。标签栏还根据`ui`选项改变图标的外观；`light`工具栏将具有深色图标，而`dark`工具栏将具有浅色图标。
- en: These icons are actually part of a special font called **Pictos**. Sencha Touch
    started using the Pictos font in Version 2.2 instead of images icons because of
    compatibility issues on some mobile devices.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这些图标实际上是名为**Pictos**的特殊字体的一部分。Sencha Touch从版本2.2开始使用Pictos字体，以解决某些移动设备上的兼容性问题，而不是使用图像图标。
- en: Note
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The icon mask from previous versions of Sencha Touch is available but has been
    discontinued as of Version 2.2.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 来自Sencha Touch先前版本的图标遮罩可用，但已在2.2版本中被弃用。
- en: 'You can see some of the icons available in the documentation for the `Ext.Button`
    component:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`Ext.Button`组件的文档中看到一些可用的图标：
- en: '[http://docs.sencha.com/touch/2.2.0/#!/api/Ext.Button](http://docs.sencha.com/touch/2.2.0/#!/api/Ext.Button)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://docs.sencha.com/touch/2.2.0/#!/api/Ext.Button](http://docs.sencha.com/touch/2.2.0/#!/api/Ext.Button)'
- en: If you're curious about the Pictos font, you can learn more about it at [http://pictos.cc/](http://pictos.cc/)
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对Pictos字体感到好奇，你可以通过访问[http://pictos.cc/](http://pictos.cc/)了解更多相关信息。
- en: Sencha Touch themes
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Sencha Touch主题
- en: Sometimes you want to alter the looks of more than just a single panel or button.
    Themes in Sencha Touch are a powerful way to quickly change the overall look and
    feel of your application. We will cover the theming process a bit later in this
    chapter, but we do need to lay a bit of groundwork before we can get started.
    There is a lot of conceptual information to cover, but the flexibility you gain
    will be well worth the effort.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候你希望不仅仅改变一个单个的面板或按钮的外观。Sencha Touch主题是快速改变应用程序整体外观和感觉的强大方式。我们将在本章后面覆盖主题化过程，但在开始之前我们需要做一些基础工作。需要覆盖的概念信息很多，但你所获得的灵活性将是值得努力的。
- en: 'The first thing we need to cover is a basic overview of the tools used by Sencha
    Touch that make theming your application possible: Sass and Compass.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要覆盖的第一个工具是Sencha Touch中用于使应用程序主题化可能的工具：Sass和Compass。
- en: Note
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you are already familiar with Sass and Compass, you will be more comfortable
    installing first and then covering the concepts. You can skip ahead to the *Setting
    up Sass and Compass* section.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经熟悉Sass和Compass，你将会更舒适地先安装然后再覆盖概念。你可以跳到*设置Sass和Compass*部分。
- en: Introducing Sass and Compass
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍Sass和Compass
- en: '**Syntactically Awesome Stylesheets** (**Sass**) is used to extend standard
    CSS to allow variables, nesting, mixins, built-in functions, and selector inheritance.
    This means that all of your regular CSS declarations will work just fine, but
    you also get some extra goodies.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '**Syntactically Awesome Stylesheets** (**Sass**)用于扩展标准CSS，允许变量、嵌套、混合函数、内置函数和选择器继承。这意味着你的所有常规CSS声明都会正常工作，但你也会得到一些额外的福利。'
- en: Variables in Sass
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在Sass中的变量
- en: 'Variables allow you to define specific values and then use them throughout
    the stylesheet. The variable names are arbitrary and start with `$`. For example,
    we can use Sass to define the following:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 变量允许你定义具体的值，然后在样式表中使用它们。变量名称是任意的，以`$`开始。例如，我们可以使用Sass定义以下内容：
- en: '[PRE13]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We can then use the following variables as part of our standard CSS declarations
    in the Sass file:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在Sass文件中的标准CSS声明中使用以下变量：
- en: '[PRE14]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We can also use basic math functions as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以按照以下方式使用基本数学函数：
- en: '[PRE15]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This creates a box with twice the padding and half the margin of the first box.
    This is great for creating flexible, scalable layouts. By changing your base values,
    you can quickly scale your application to deal with multiple devices that have
    multiple resolutions and screen sizes.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个具有两倍内边距和原始盒子一半外边距的盒子。这对于创建灵活、可扩展的布局非常不错。通过更改你的基本值，你可以快速扩展你的应用程序以应对具有多种分辨率和屏幕尺寸的多台设备。
- en: 'Additionally, when you decide you want to change the shade of blue you are
    using, you only have to change it in one place. Sass also has a number of built-in
    functions for adjusting colors, such as:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，当你决定要更改你使用的蓝色阴影时，你只需要在一个地方更改。Sass还有许多内置函数用于调整颜色，例如：
- en: '`darken`: This makes the color darker by percentage'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`darken`: 这个函数通过百分比使颜色变暗'
- en: '`lighten`: This makes the color lighter by percentage'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lighten`: 这个函数通过百分比使颜色变亮'
- en: '`complement`: This returns the complementary color'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`complement`: 这个函数返回互补色'
- en: '`invert`: This returns the inverted color'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`invert`: 这个函数返回反色'
- en: '`saturate`: This saturates the color by a numerical value'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`saturate`: 这个函数通过数值来饱和颜色'
- en: '`desaturate`: This desaturates the color by a numerical amount'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`desaturate`: 这个函数通过数值来去色'
- en: 'These functions allow you to perform operations, such as:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数允许你执行操作，例如：
- en: '[PRE16]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: There are also functions for numbers, lists, strings, and basic if-then statements.
    These functions help make your stylesheets as flexible as your programming code.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 还有针对数字、列表、字符串和基本if-then语句的函数。这些函数可以帮助你的样式表像你的编程代码一样灵活。
- en: Tip
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Sass functions**'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '**Sass函数**'
- en: The full list of Sass functions can be found at [http://sass-lang.com/docs/yardoc/Sass/Script/Functions.html](http://sass-lang.com/docs/yardoc/Sass/Script/Functions.html).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: Sass函数的完整列表可以在[http://sass-lang.com/docs/yardoc/Sass/Script/Functions.html](http://sass-lang.com/docs/yardoc/Sass/Script/Functions.html)找到。
- en: Mixins in Sass
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Sass中的混合函数
- en: '**Mixins** are a variation of the standard Sass variables. Avoid simply declaring
    a single one-to-one variable such as the following:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**混合函数**是Sass变量标准的一种变体。避免简单地声明一个一对一的变量，例如以下内容：'
- en: '[PRE17]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Instead, you can use a mixin to declare an entire CSS class as a variable:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，你可以使用混合（mixin）来声明一个整个 CSS 类作为变量：
- en: '[PRE18]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'You can then take that mixin and use it in the Sass file:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你可以把这个混合（mixin）用在 Sass 文件中：
- en: '[PRE19]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This gives you all of the attributes of the `baseDiv` mixin component plus the
    specific styles you declared in the `#specificDiv` class.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这给了你 `baseDiv` 混合（mixin）组件的所有属性和在 `#specificDiv` 类中声明的具体样式。
- en: 'You can also set your mixin to use arguments to make it even more flexible.
    Let''s look at an alternative version of what we had seen previously:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以让你的混合（mixin）使用参数来使其更加灵活。让我们看看我们之前看到的内容的一个替代版本：
- en: '[PRE20]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This means we can set values for `width`, `margin`, and `float` as part of
    our Sass code as follows:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们可以在 Sass 代码中为 `width`、`margin` 和 `float` 设置值，如下所示：
- en: '[PRE21]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This gives us four `div` tags with slightly different properties. All of them
    share the same base properties as the mixin `baseDiv` class, but they have different
    values for `width` and `float`. We can also override the values for the mixin
    `baseDiv` by adding them after we include the mixin as seen in our `#divRightAlert`
    example.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这给了我们四个带有稍有不同的属性的 `div` 标签。它们都共享与混合（mixin） `baseDiv` 类相同的基属性，但它们的 `width` 和
    `float` 值是不同的。我们也可以通过在我们包含混合（mixin）时像在我们的 `#divRightAlert` 示例中添加它们来覆盖混合（mixin）
    `baseDiv` 的值。
- en: Nesting in Sass
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Sass 中的嵌套
- en: Sass also allows nesting of CSS declarations. This not only lets you write styles
    that more closely mirror the structure of your HTML, but also makes for cleaner,
    more easily maintainable code.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: Sass 也允许嵌套 CSS 声明。这不仅能让你写出的样式更紧密地反映你的 HTML 结构，而且还能写出更清晰、更容易维护的代码。
- en: 'In HTML, we often nest elements within one another to give the document a structure.
    A common example of this would be an unordered list that contains several list
    items, such as the following:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在 HTML 中，我们经常嵌套彼此之间的元素以给文档结构。这种的一个常见例子是一个无序列表包含几个列表项，如下所示：
- en: '[PRE22]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Normally, to style this list via CSS, you would write rules for the `ul` elements
    separately from the rules for the `li` elements. The two rules might not even
    be near one another in your CSS files, making debugging or modifying the styles
    more difficult.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，通过 CSS 样式这个列表，你会分别写 `ul` 元素的规则和 `li` 元素的规则。这两个规则在你的 CSS 文件中可能相隔很远，使得调试或修改样式更加困难。
- en: 'In Sass, we can write the following:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Sass 中，我们可以写如下内容：
- en: '[PRE23]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: See how we nest the style declarations for our `li` element inside the style
    declaration for `ul`? Not only does nesting match the structure of the HTML document,
    but it also lets you know that it can be found inside the `ul` element when you
    want to update the `li` element.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 看看我们是怎样在 `ul` 的样式声明内嵌套 `li` 元素的样式声明的？嵌套不仅匹配 HTML 文档的结构，而且还能让你知道当需要更新 `li` 元素时，它是在
    `ul` 元素内的。
- en: 'When you compile this with Sass, the resulting CSS has separate rules for the
    `ul` and `li` elements:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 当你用 Sass 编译这个时，生成的 CSS 为 `ul` 和 `li` 元素有分开的规则：
- en: '[PRE24]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: If you were to view this list in your browser, you would see a list with a red
    border around it and blue borders around each of the individual list items.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在浏览器中查看这个列表，你会看到一个有红色边框的列表，每个单独的列表项周围还有蓝色边框。
- en: '![Nesting in Sass](img/0748OS_03_05.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![Sass 中的嵌套](img/0748OS_03_05.jpg)'
- en: It's also possible to reference the item one level up in the nesting using the
    ampersand (`&`) character. This is useful while adding things like hover states
    to nested elements, or more generally, grouping together the exceptions to your
    rules.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 使用和号（`&`）字符引用嵌套层级中的一级也是可能的。这在给嵌套元素添加悬停状态等事物时很有用，或者更一般地说，将你的规则的异常分组在一起。
- en: 'Suppose we want to change the background color when we hover over one of our
    `li` elements. We could add `&:hover` inside the `li` style declaration:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要在鼠标悬停在 `li` 元素上时改变背景色。我们可以在 `li` 样式声明内添加 `&:hover`：
- en: '[PRE25]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The `&:hover` gets translated into `li:hover` by the Sass compiler:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: Sass 编译器将 `&:hover` 转换为 `li:hover`：
- en: '[PRE26]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The `&` special character doesn''t have to be used at the beginning of a rule.
    Say your designer has the elements `li`, which use a bigger border when they''re
    located in a special `#sidebardiv` component. You could write a separate rule
    after your `ul`/`li` rules or you could add the exception inside the `li` ruleset
    using the special `&` character:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 和号（`&`）特殊字符不必用在规则的开始处。比如说你的设计师有元素 `li`，当它们位于特殊的 `#sidebardiv` 组件内时，使用更大的边框。你可以在
    `ul`/`li` 规则之后写一个单独的规则，或者使用特殊的 `&` 字符在 `li` 规则集中添加这个异常：
- en: '[PRE27]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The preceding code will be translated to the following rule:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码将被翻译成以下规则：
- en: '[PRE28]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'You can also nest CSS namespaces. In CSS, if properties all start with the
    same prefix, such as `font-`, then you can nest them as well:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以嵌套CSS命名空间。在CSS中，如果属性全部以相同的前缀开始，比如`font-`，那么你也可以嵌套它们：
- en: '[PRE29]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Be sure to remember to put the colon after the namespace. When compiled, this
    will become the following:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 一定要记得在命名空间后面加上冒号。编译后，这将变为以下内容：
- en: '[PRE30]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: This works for any namespace CSS property, such as `border-` or `background-`.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法适用于任何命名空间CSS属性，如`border-`或`background-`。
- en: Selector inheritance in Sass
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Sass中的选择器继承
- en: Selector inheritance in Sass is analogous to object inheritance in JavaScript.
    In the same way, a `panel` component extends the `container` object, meaning that
    a `panel` has all the properties and functions of a `container`, and then some.
    Sass lets you have objects that inherit the styles of other objects.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: Sass中的选择器继承与JavaScript中的对象继承类似。同样，一个`panel`组件扩展了`container`对象，这意味着一个`panel`具有`container`的所有属性和功能，还有一些别的。Sass让您拥有继承其他对象样式的对象。
- en: 'Say we want to create some message box elements for our application, one for
    informational messages and one for errors. First, we need to define a generic
    box:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要为我们的应用程序创建一些消息框元素，一个用于信息性消息，一个用于错误。首先，我们需要定义一个通用框：
- en: '[PRE31]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Now, in any class where we want to include the `.messageBox` styles, we just
    use the `@extend` directive `@extend .messageBox;` on a line by itself:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在任何我们想要包含`.messageBox`样式的类中，我们只需使用`@extend`指令`@extend .messageBox;`（单独一行）：
- en: '[PRE32]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Then, in HTML, we would just use the `.errorBox` and `.infoBox` classes:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在HTML中，我们只需使用`.errorBox`和`.infoBox`类即可：
- en: '[PRE33]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Put it all together and you will see the left box with a blue border and blue
    text and the right box with a red border and red text:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 把所有内容放在一起，你就会看到左边的盒子有一个蓝色的边框和蓝色的文本，右边的盒子有一个红色的边框和红色的文本：
- en: '![Selector inheritance in Sass](img/0748OS_03_06.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![Sass中的选择器继承](img/0748OS_03_06.jpg)'
- en: Compass
  id: totrans-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 指南针
- en: 'Just as Sencha Touch is a framework built on the lower-level languages of JavaScript,
    CSS, and HTML, Compass is a framework built on Sass and CSS. Compass provides
    a suite of reusable components for styling your application. These include:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 正如Sencha Touch是建立在JavaScript、CSS和HTML这些低级语言之上的框架一样，Compass也是建立在Sass和CSS之上的框架。Compass为您应用程序的样式提供了一系列可重用的组件。这些包括：
- en: '**CSS Resets**: These enforce a uniform appearance for most HTML across all
    of the major web browsers.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CSS重置**：这能强制大多数HTML在所有主流网络浏览器中具有一致的外观。'
- en: '**Mixins**: These allow you to declare complex programmatic functions for your
    CSS.'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**混合**：这些允许你为你的CSS声明复杂的程序化函数。'
- en: '**Layouts and Grids**: These enforce width and height standards to assist in
    keeping your layout consistent across all pages.'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**布局和网格**：这些强制执行宽度和高度标准，以帮助保持跨所有页面的一致布局。'
- en: '**Image Spriting**: This allows you to automatically generate a single image
    from multiple smaller images (this is faster for the browser to download). The
    CSS will automatically show just the portion of the image you need, hiding the
    rest.'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**图像雪碧**：这允许您自动从多个小图像生成单个图像（这对于浏览器下载来说更快）。CSS将自动显示您需要的图像部分，隐藏其余部分。'
- en: '**Text Replacement**: This allows you to automatically swap specific text pieces
    within your document.'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文本替换**：这允许您自动交换文档中特定文本片段。'
- en: '**Typography**: This provides advanced options for using fonts within your
    web pages.'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**排版**：这为在您的网页中使用字体提供了高级选项。'
- en: Compass also incorporates into its components the latest in CSS best practices,
    meaning that your stylesheet will be leaner and more efficient.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: Compass还将其组件中融入最新的CSS最佳实践，这意味着你的样式表将会更简洁、更高效。
- en: Sass + Compass = themes
  id: totrans-164
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Sass + Compass = 主题
- en: Sencha Touch themes take Sass and Compass one step further by providing variables
    and mixins whose functionalities are specific to Sencha Touch. The JavaScript
    portion of Sencha Touch generates lots of very complex HTML in order to display
    various components such as toolbars and panels. Rather than learning all of the
    intricate classes and HTML tricks used by Sencha Touch, you can simply use the
    appropriate mixins to change the appearance of your application.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: Sencha Touch主题通过提供变量和混合器，其功能性特定于Sencha Touch，将Sass和Compass推进了一步。Sencha Touch的JavaScript部分生成大量非常复杂的HTML，以显示各种组件，如工具栏和面板。而不是学习所有Sencha
    Touch使用的复杂类和HTML技巧，你可以简单地使用适当的混合器来改变应用程序的外观。
- en: Setting up Sass and Compass
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置Sass和Compass
- en: If you decide that you would like to create your own Sencha Touch theme, you
    won't have to install either Sass or Compass as they come packaged with Sencha
    Cmd.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您决定要创建自己的Sencha Touch主题，则不需要安装Sass或Compass，因为它们都包含在Sencha Cmd中。
- en: However, Windows users will first need to install Ruby. Ruby is used to compile
    the Sass/Compass files into a working theme. Linux and OS X users should already
    have Ruby installed on their computers.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Windows用户首先需要安装Ruby。Ruby用于将Sass/Compass文件编译成可用的主题。Linux和OS X用户应该已经在他们的计算机上安装了Ruby。
- en: Installing Ruby on Windo
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Windo
- en: download the Ruby installer from [http://rubyinstaller.org/](http://rubyinstaller.org/).
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 从[http://rubyinstaller.org/](http://rubyinstaller.org/)下载Ruby安装程序。
- en: Tip
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: We recommend downloading Version 1.9.2 as Sencha Cmd can have problems with
    newer versions of Ruby.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议下载版本1.9.2，因为Sencha Cmd可能会与Ruby的新版本发生问题。
- en: Run the installer and follow the onscreen instructions to install Ruby. Be sure
    to check the box that says **Add Ruby executables to your PATH**. This will save
    you a lot of typing on the command line later on.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 运行安装程序，并按照屏幕上的说明安装Ruby。确保检查名为**将Ruby可执行文件添加到您的PATH中**的框。这将在以后命令行中为您节省很多输入。
- en: Once the installation is complete, open up the command line in Windows by going
    to **Start** | **Run**, typing `cmd`, and pressing *Enter*. This should bring
    up the command line.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，打开Windows中的命令行，通过前往**开始** | **运行**，输入`cmd`，并按*Enter*键。这应该会打开命令行。
- en: 'Now, try typing **ruby -v**. You should see something such as the following:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，尝试输入**ruby -v**。您应该会看到如下内容：
- en: '[PRE34]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: This means that Ruby is correctly installed.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着Ruby已经正确安装。
- en: Creating a custom theme
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义主题
- en: The next thing we need to do is create our own theme SCSS file. Locate the `app.scss`
    file in `TouchStart/resources/sass` and make a copy of the file. Rename the new
    copy of the file as `myTheme.scss`.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们需要做的是创建我们自己的主题SCSS文件。在`TouchStart/resources/sass`中找到`app.scss`文件，并复制该文件。将新复制的文件重命名为`myTheme.scss`。
- en: 'Once you have renamed the file, you will need to compile the theme into an
    actual CSS file that our application can read. To do this, we need to return to
    the command line and move into our `TouchStart/resources/sass` directory:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 更改文件名后，您需要将主题编译成应用程序可以读取的实际CSS文件。为此，我们需要回到命令行，移动到我们的`TouchStart/resources/sass`目录：
- en: '[PRE35]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Once you are in the directory, you can enter the following command:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦进入目录，您可以输入以下命令：
- en: '[PRE36]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: This will compile our new theme and create a new file under `resources/css`
    called `myTheme.css`.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 这将编译我们新的主题，并在`resources/css`目录下创建一个名为`myTheme.css`的新文件。
- en: Tip
  id: totrans-185
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Using `compass compile` will compile any `.scss` files in the directory. You
    will need to run this command each time you make changes to the `.scss` file.
    However, you can also use the command `compass watch` to monitor the current folder
    for any changes and compile them automatically.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`compass compile`将目录中的任何`.scss`文件编译。每次更改`.scss`文件时，您都需要运行此命令。不过，您也可以使用命令`compass
    watch`来监视当前文件夹的任何更改，并自动编译它们。
- en: Now that we have our new CSS theme file, we need to tell the application to
    load it. In previous versions of Sencha Touch, the CSS files were loaded from
    the `index.html` file. However, with applications generated by Sencha Cmd, the
    CSS files are actually loaded from within the `app.json` file located in our main
    `TouchStart` directory.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经有了新的CSS主题文件，接下来需要让应用程序加载它。在Sencha Touch的早期版本中，CSS文件是从`index.html`文件中加载的。然而，由Sencha
    Cmd生成的应用程序实际上是从我们主`TouchStart`目录中的`app.json`文件中加载CSS文件的。
- en: 'Open `app.json` and look for the section where it says:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`app.json`，查找如下部分：
- en: '[PRE37]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Change this section to:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 将此部分更改为：
- en: '[PRE38]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Tip
  id: totrans-192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**SCSS and CSS**'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '**SCSS和CSS**'
- en: Notice that we are currently including a stylesheet from the `css` folder called
    `sencha-touch.css` and we have a matching file in the `scss` folder called `sencha-touch.scss`.
    When the SCSS files are compiled, they create a new file in your `css` folder.
    This new file will have the suffix `.css` instead of `.scss`.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们目前从`css`文件夹中包含了一个名为`sencha-touch.css`的样式表，并且在`scss`文件夹中有一个匹配的文件，名为`sencha-touch.scss`。当编译SCSS文件时，它们将在您的`css`文件夹中创建一个新文件。这个新文件将具有`.css`后缀，而不是`.scss`。
- en: '`.scss` is the file extension for Sass files.'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '`.scss`是Sass文件的文件扩展名。'
- en: 'If you reload the application in your web browser, you won''t see any changes
    since we have simply duplicated the file for our theme. Let''s take a look at
    how we can change that. Open your `myTheme.scss` file. You should see the following:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在网页浏览器中重新加载应用程序，您将看不到任何变化，因为我们只是为我们的主题复制了文件。让我们看看我们如何改变这一点。打开您的`myTheme.scss`文件。您应该看到以下内容：
- en: '[PRE39]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: This code grabs all of the default Sencha Touch theme information. When we run
    `compass compile` or `compass watch`, it gets compiled and compressed into a CSS
    file that our application can read.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码抓取了所有默认的Sencha Touch主题信息。当我们运行`compass compile`或`compass watch`时，它会被编译并压缩成一个CSS文件，我们的应用程序可以阅读。
- en: The best part is that we can now change the entire color scheme of the application
    with a single line of code.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 最好的部分是我们现在可以用一条代码就改变应用程序的整体颜色方案。
- en: Base color
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本颜色
- en: 'One of the key variables in the Sencha Touch theme is `$base_color`. This color
    and its variations are used throughout the entire theme. To see what we mean,
    let''s change the color of our theme to a nice forest green by adding the following
    to the top of our `myTheme.scss` file (on top of all the other text):'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: Sencha Touch主题中的一个关键变量是`$base_color`。这个颜色及其变体在整个主题中都有使用。为了了解我们的意思，让我们将主题的颜色改为漂亮的森林绿，方法是在我们的`myTheme.scss`文件的顶部添加以下内容（在所有其他文本之上）：
- en: '[PRE40]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Next, we need to recompile the Sass files to create our `myTheme.css` file.
    If you are running `compass watch`, this will happen automatically when you save
    the Sass file. If not, you will need to run `compass compile` as before to update
    the CSS (remember you need to run this from inside the `resources/sass` directory).
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要重新编译Sass文件以创建我们的`myTheme.css`文件。如果您正在运行`compass watch`，当您保存Sass文件时这将自动发生。如果没有，您需要像以前一样运行`compass
    compile`来更新CSS（请记住，您需要从`resources/sass`目录中运行此命令）。
- en: Tip
  id: totrans-204
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**compass compile versus compass watch**'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '**Compass编译与Compass监控**'
- en: 'Compass uses the `compile` command to create the new stylesheet based on your
    SCSS file. However, you can also set up Compass to watch a particular file for
    changes and automatically compile files when anything new is added. This command
    is entered on the command line as the following:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: Compass使用`compile`命令根据您的SCSS文件创建新的样式表。然而，您还可以设置Compass监控特定文件的更改，并在添加任何新内容时自动编译文件。这个命令在命令行中如下输入：
- en: '[PRE41]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: This command will remain active as long as your terminal is open. Once you close
    the terminal window, you will need to run the command again in order to make Compass
    watch out for changes.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令将一直保持活动状态，直到您的终端关闭。一旦您关闭终端窗口，您需要再次运行该命令，以便让Compass监控更改。
- en: Reload the page in Safari and you should see a new forest green look for our
    application.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在Safari中重新加载页面，您应该看到我们应用程序的新森林绿色外观。
- en: Note that this one line of code has created variations for both our dark and
    light toolbars. Changing the base color has also changed the icons for our tab
    bar at the bottom.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这一行代码为我们的深色和浅色工具栏创建了变体。更改基本颜色还改变了底部的标签栏图标。
- en: This is all pretty cool, but what if we want to tweak individual parts of the
    theme? Sencha Touch themes provide exactly what we need using mixins and the `ui`
    configuration option.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 这很酷，但如果我们要调整主题的个别部分呢？Sencha Touch主题通过混合和`ui`配置选项为我们提供了 exactly 需要。
- en: Mixins and the UI configuration
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 混合与UI配置
- en: As we have noted previously, the Sencha theme system is a set of predefined
    mixins and variables that get compiled to create a CSS stylesheet. Each component
    has its own mixins and variables for controlling styles. This means you can override
    these variables or use the mixins to customize your own theme.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们之前提到的，Sencha主题系统是一组预定义的混合和变量，它们被编译成CSS样式表。每个组件都有自己的混合和变量来控制样式。这意味着您可以覆盖这些变量或使用混合来定制您自己的主题。
- en: You can also use mixins to create additional options for the `ui` configuration
    option (beyond the simple `light` and `dark` values that we have seen previously).
    For example, we can modify the color of our toolbar by adding a new mixin to our
    `myTheme.sass` file.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用混合（mixins）为`ui`配置选项创建额外选项（超出我们之前见过的简单的`light`和`dark`值）。例如，我们可以在`myTheme.sass`文件中添加一个新的混合来修改我们工具栏的颜色。
- en: 'In our `myTheme.sass` file, locate the line that says the following:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`myTheme.sass`文件中，找到如下行：
- en: '[PRE42]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'After this line, add the following line:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在此行之后，添加以下行：
- en: '[PRE43]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'This code tells Sass to create a new `ui` option for the toolbar. Our new option
    will be called `subnav`, and it will have a base color of `#625546`. The last
    option sets the style for the gradient. The available styles are:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码告诉Sass为工具栏创建一个新的`ui`选项。我们新的选项将被称为`subnav`，它将具有`#625546`的基础颜色。最后一个选项设置了渐变的样式。可用的样式有：
- en: '`flat`: No gradient'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flat`：无渐变'
- en: '`matte`: A subtle gradient'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`matte`：一个细微的渐变'
- en: '`bevel`: A medium gradient'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bevel`：一个中等渐变'
- en: '`glossy`: A glassy style gradient'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`glossy`：一个玻璃样式渐变'
- en: '`recessed`: A reversed gradient'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`recessed`：一个反转的渐变'
- en: You can find additional information about these variables (and any available
    mixins) at the top of each component in the Sencha Touch documentation at [http://docs.sencha.com/touch/2.2.0/](http://docs.sencha.com/touch/2.2.0/).
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在Sencha Touch文档的每个组件顶部找到有关这些变量（和任何可用的混合剂）的额外信息：[http://docs.sencha.com/touch/2.2.0/](http://docs.sencha.com/touch/2.2.0/)。
- en: '![Mixins and the UI configuration](img/0748OS_03_07.jpg)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![混合剂和UI配置](img/0748OS_03_07.jpg)'
- en: Once you have saved the file, you will need to recompile the stylesheet using
    the `compass compile` command on the command line.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 保存文件后，你需要在命令行使用`compass compile`命令重新编译样式表。
- en: 'We also need to change the `ui` configuration option in our JavaScript file.
    Locate our `Main.js` file in the `app/view` folder and open it. Find the second
    toolbar in our application, just on top of where we added the buttons. It should
    look as follows:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要更改JavaScript文件中的`ui`配置选项。在`app/view`文件夹中找到我们的`Main.js`文件并打开它。找到我们应用程序中的第二个工具栏，就在我们添加按钮的上方。它应该如下所示：
- en: '[PRE44]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: You will need to change `ui:'light'` to `ui:'subnav'` and save the file.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要将`ui:'light'`改为`ui:'subnav'`并保存文件。
- en: You can then reload the page to see your changes.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你可以重新加载页面以查看你的更改。
- en: '![Mixins and the UI configuration](img/0748OS_03_08.jpg)'
  id: totrans-232
  prefs: []
  type: TYPE_IMG
  zh: '![混合剂和UI配置](img/0748OS_03_08.jpg)'
- en: You will also notice that the buttons within the toolbar also adjust their colors
    to match the new toolbar's `ui` configuration.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 你还会注意到，工具栏内的按钮也调整了它们的颜色以匹配新工具栏的`ui`配置。
- en: Adding new icons
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加新图标
- en: As we mentioned earlier in the chapter, previous versions of Sencha Touch used
    icon masks for creating icons in your application. This caused some issues with
    browser compatibility, so the new icons are actually generated from the Pictos
    icon font. By default, 26 of these icons are included, but you can add more of
    them using the `icon` mixin.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们在本章开头提到的，Sencha Touch的早期版本使用图标遮罩来创建应用程序中的图标。这导致了一些与浏览器兼容性问题，所以新图标实际上是从Pictos图标字体生成的。默认情况下，包含这26个图标，但你可以使用`icon`混合剂添加更多。
- en: Note
  id: totrans-236
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A list of default icons in Sencha Touch is available at [http://docs.sencha.com/touch/2.2.0/#!/api/Ext.Button](http://docs.sencha.com/touch/2.2.0/#!/api/Ext.Button).
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: Sencha Touch中可用的默认图标列表可以在[http://docs.sencha.com/touch/2.2.0/#!/api/Ext.Button](http://docs.sencha.com/touch/2.2.0/#!/api/Ext.Button)找到。
- en: A full list of Pictos icons is available at [http://pictos.cc/font/](http://pictos.cc/font/).
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: Pictos图标的完整列表可以在[http://pictos.cc/font/](http://pictos.cc/font/)找到。
- en: 'In your `myTheme.sass` file, locate the line that says:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的`myTheme.sass`文件中，找到写着以下内容的行：
- en: '[PRE45]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'After this line, add the following line:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 此行之后，请添加以下内容：
- en: '[PRE46]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'The `icon` mixin takes two arguments: the name you want to refer to the icon
    with (which is arbitrary) and the corresponding letter of the icon in the Pictos
    font. This second argument can be looked up on the Pictos website referred in
    the preceding tip.'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '`icon`混合剂有两个参数：你想要引用图标的名称（这是任意的）以及Pictos字体中图标的相应字母。第二个参数可以在前面提示中提到的Pictos网站上查找。'
- en: Once the stylesheet is recompiled, we can change the `iconCls` value in our
    panel to use the new image.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 样式表重新编译后，我们可以在面板中更改`iconCls`值以使用新图像。
- en: 'In the `app/Main.js` file, locate `iconCls` for our `HBox` panel that currently
    says:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在`app/Main.js`文件中，找到我们的`HBox`面板的`iconCls`，目前显示为：
- en: '[PRE47]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Replace the line with the following:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 用以下内容替换该行：
- en: '[PRE48]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Save your changes and reload the page to see your new icon. Don't forget to
    recompile the Sass file using `compass compile` on the command line.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 保存你的更改并重新加载页面以查看你的新图标。不要忘记在命令行使用`compass compile`重新编译Sass文件。
- en: Variables
  id: totrans-250
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变量
- en: 'Variables are also available for most components, and they are used to control
    specific color, size, and appearance options. Unlike mixins, variables target
    a single setting for a component. For example, the `button` component includes
    variables for the following:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 变量也适用于大多数组件，并用于控制特定的颜色、大小和外观选项。与混合剂不同，变量针对组件的单一设置。例如，`button`组件包括以下变量的变量：
- en: '`$button-gradient`: The default gradient for all buttons'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$button-gradient`：所有按钮的默认渐变'
- en: '`$button-height`: The default height for all buttons'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$button-height`：所有按钮的默认高度'
- en: '`$button-radius`: The default border radius for all buttons'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$button-radius`：所有按钮的默认边框半径'
- en: '`$button-stroke-weight`: The default border thickness for all buttons'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$button-stroke-weight`：所有按钮的默认边框厚度'
- en: As mentioned previously, you can find a listing for each of these variables
    (and any available mixins) at the top of each component in the Sencha Touch documentation
    at [http://docs.sencha.com/touch/2.2.0/](http://docs.sencha.com/touch/2.2.0/).
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，您可以在每个组件的顶部找到这些变量（和任何可用的混合）的列表，在Sencha Touch文档中[http://docs.sencha.com/touch/2.2.0/](http://docs.sencha.com/touch/2.2.0/)。
- en: 'For example, if we add `$button-height: 2em;` to our `myTheme.scss` file, then
    we can recompile and see that buttons in our toolbar are now larger than they
    were before.'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '例如，如果我们向我们的`myTheme.scss`文件添加`$button-height: 2em;`，然后我们可以重新编译并看到我们工具栏中的按钮现在比之前要大。'
- en: '![Variables](img/0748OS_03_09.jpg)'
  id: totrans-258
  prefs: []
  type: TYPE_IMG
  zh: '![变量](img/0748OS_03_09.jpg)'
- en: You will also notice that our **small** button did not change in size. This
    is because its UI configuration (`small`) has already been defined separately
    and includes a specific height. If you wanted to change the size of this button,
    you would need to remove the `ui` configuration for it in the `Main.js` file.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 您还会注意到我们的**小型**按钮大小没有改变。这是因为它的UI配置（`small`）已经单独定义，并包括了一个特定的高度。如果您想更改这个按钮的大小，您需要在`Main.js`文件中删除它的`ui`配置。
- en: More Sass resources
  id: totrans-260
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多Sass资源
- en: Using the mixins and variables included in the Sencha Touch theme, you can change
    almost any aspect of your interface to look exactly the way you want it to. There
    are a number of online resources that will help you dig deeper into all the possibilities
    with Sass and Compass.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Sencha Touch主题中包含的混合和变量，您可以几乎改变界面的任何方面，使其完全按照您想要的方式显示。有许多在线资源可以帮助您深入了解Sass和Compass的所有可能性。
- en: Note
  id: totrans-262
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Additional resources**'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '**更多资源**'
- en: A full list of the Sencha Touch theme mixins and variables is available at [http://dev.sencha.com/deploy/touch/docs/theme/](http://dev.sencha.com/deploy/touch/docs/theme/).
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: Sencha Touch主题混合和变量的完整列表可在[http://dev.sencha.com/deploy/touch/docs/theme/](http://dev.sencha.com/deploy/touch/docs/theme/)找到。
- en: Learn more about Sass at [http://sass-lang.com/](http://sass-lang.com/).
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 详细了解Sass，请访问[http://sass-lang.com/](http://sass-lang.com/)。
- en: The Compass home page has examples of sites using Compass, tutorials, help,
    and more; it is available at [http://compass-style.org/](http://compass-style.org/).
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: Compass官网提供了使用Compass的网站示例、教程、帮助等内容；您可以访问[http://compass-style.org/](http://compass-style.org/)。
- en: Default themes and theme switching
  id: totrans-267
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 默认主题和主题切换
- en: With the introduction of Sencha Touch 2.2, there is now support for Blackberry
    10 and Windows Phone platforms. To help style your application for these platforms,
    Sencha Touch 2.2 includes default themes for both of them. Let's take a look at
    how this works by creating a few new theme files.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 随着Sencha Touch 2.2的推出，现在支持Blackberry 10和Windows Phone平台。为了帮助您为这些平台样式化您的应用程序，Sencha
    Touch 2.2包括两个平台的默认主题。让我们通过创建几个新的主题文件来了解这是如何工作的。
- en: Start by making two copies of our original `resources/sass/app.scss` file and
    rename them to `windows.scss` and `blackberry.scss`.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将我们的原始`resources/sass/app.scss`文件复制两份，并将它们重命名为`windows.scss`和`blackberry.scss`。
- en: 'In both files, locate the following lines:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 在两个文件中，找到以下行：
- en: '[PRE49]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'In `windows.scss,` change the lines to:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 在`windows.scss`中，将行更改为：
- en: '[PRE50]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'In `blackberry.scss,` change the lines to:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 在`blackberry.scss`中，将行更改为：
- en: '[PRE51]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Next, you will need to run `compass compile` to create the new CSS files.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您需要运行`compass compile`以创建新的CSS文件。
- en: 'Now we can use our `app.json` file to switch these themes based on the platform
    our application is running on. Open up the `app.json` file and look for our `css`
    section again. It should look like this:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用我们的`app.json`文件根据应用程序运行的平台来切换这些主题。打开`app.json`文件，再次查找我们的`css`部分。它应该如下所示：
- en: '[PRE52]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Let''s change that to look like this:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将其更改为如下所示：
- en: '[PRE53]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Since most of us are not rolling in money, we probably don''t have one of every
    kind of device to test with. However, we can add an argument at the end of our
    application URL to test each of our themes. For example:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们大多数人并不富有，我们可能没有每种类型的设备来测试。然而，我们可以在我们应用程序URL的末尾添加一个参数，以测试我们的每个主题。例如：
- en: '[http://myapplication.com?platform=ie10](http://myapplication.com?platform=ie10)'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://myapplication.com?platform=ie10](http://myapplication.com?platform=ie10)'
- en: This will be handled automatically in the application, but we can test our application
    by adding this argument to the URL. We should now have three different themes
    based on the platform.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 这将会在应用程序中自动处理，但我们可以通过向URL添加这个参数来测试我们的应用程序。我们应该现在有了基于平台的三种不同的主题。
- en: '![Default themes and theme switching](img/0748OS_03_10.jpg)'
  id: totrans-284
  prefs: []
  type: TYPE_IMG
  zh: '![默认主题和主题切换](img/0748OS_03_10.jpg)'
- en: 'We can make these kinds of conditional themes based on more than just these
    three options. The available platforms are:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以根据这些三个选项之外的条件来制作这些条件主题。可用的平台有：
- en: Phone, tablet, and desktop
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电话、平板电脑和桌面
- en: iOS, Android, and Blackberry
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: iOS、Android 和 Blackberry
- en: Safari, Chrome, IE 10, and Firefox
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Safari、Chrome、IE 10 和 Firefox
- en: This means we can change styles based on any of the platforms mentioned in the
    preceding list. Just generate new Sass/CSS stylesheets and include the appropriate
    configuration lines in `app.json` as we have in the previous examples.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们可以根据前面列表中提到的任何平台来更改样式。只需生成新的Sass/CSS样式表，并在`app.json`中包含适当的配置行，就像之前的示例一样。
- en: These types of conditional style tweaks will help keep your application readable
    and usable across multiple devices.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 这类条件样式的微调将帮助您的应用程序在多种设备上保持可读性和易用性。
- en: Images on multiple devices with Sencha.io Src
  id: totrans-291
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Sencha.io Src在不同设备上的图片
- en: 'If your application uses images, you probably need something a bit more robust
    than conditional styles, such as those used in the previous section. Creating
    individual image sets for each device would be a nightmare. Fortunately, the folks
    at Sencha have an answer to this problem: a web-based service called `Sencha.io
    Src`.'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的应用程序使用图片，那么您可能需要比前面部分使用的条件样式更健壮的东西。为每个设备创建单独的图片集将是一场噩梦。幸运的是，Sencha的团队对这个问题的解决办法是一个名为`Sencha.io
    Src`的基于Web的服务。
- en: '`Sencha.io Src` is a separate service from Sencha and can be used in any web-based
    application. The service works by taking an original image and resizing it on
    the fly to fit the current device and screen size. These images are also cached
    by the service and optimized for quick, repeatable delivery. To use the `Sencha.io
    Src` service, the only thing you need to change is the URL for your image.'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '`Sencha.io Src`是Sencha的一个独立服务，可以用于任何基于Web的应用程序。该服务通过获取原始图片并实时调整大小以适应当前设备和屏幕大小来工作。这些图片也被服务缓存并优化，以便快速、重复交付。要使用`Sencha.io
    Src`服务，您需要更改的只是图片的URL。'
- en: 'For example, a basic HTML image tag looks like this:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，一个基本的HTML图片标签看起来像这样：
- en: '[PRE54]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'The same image tag, using the `Sencha.io Src` service, would look like this:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`Sencha.io Src`服务的同一个图片标签看起来像这样：
- en: '[PRE55]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: This passes the actual URL of your image to the system for processing.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程会将您图片的实际URL传递给系统进行处理。
- en: Note
  id: totrans-299
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Image URLs in Sencha.io Src**'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '**Sencha.io Src中的图片URL**'
- en: As you can see in the example, we are using a full image URL (with [http://www.mydomain.com/](http://www.mydomain.com/))
    instead of a shorter relative URL (such as `/images/my-big-image.jpg`). Since
    the `Sencha.io Src` service needs to be able to directly get to the file from
    the main `Sencha.io` server, a relative URL will not work. The image file needs
    to be on a publicly available web server in order to work correctly.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在示例中看到的，我们使用了一个完整的图片URL（带有[http://www.mydomain.com/](http://www.mydomain.com/)），而不是一个更短的相对URL（例如`/images/my-big-image.jpg`）。由于`Sencha.io
    Src`服务需要能够直接从主`Sencha.io`服务器获取文件，所以相对URL不起作用。图片文件需要放在一个可以向公众公开的Web服务器上，才能正确工作。
- en: '![Images on multiple devices with Sencha.io Src](img/0748OS_03_11.jpg)'
  id: totrans-302
  prefs: []
  type: TYPE_IMG
  zh: '![Sencha.io Src在不同设备上的图片](img/0748OS_03_11.jpg)'
- en: By using this service, our large image will be scaled to fit the full width
    of our device's screen no matter what the size of the device we use. `Sencha.io
    Src` also keeps the image proportions correct without any squishing or stretching.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个服务，我们的大图片将根据我们使用的设备屏幕大小调整到全宽，无论设备的大小如何。`Sencha.io Src`还能保持图片的比例正确，不会出现压缩或拉伸的情况。
- en: Specifying sizes with Sencha.io Src
  id: totrans-304
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Sencha.io Src指定大小
- en: 'We don''t always use fullscreen images in our applications. We often use them
    for things such as icons and accents within the application. `Sencha.io Src` also
    lets us specify a particular height and/or width for an image:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 我们并不总是在我们应用程序中使用全屏图片。我们经常用它们来作为应用程序中的图标和强调元素。`Sencha.io Src`还允许我们为图片指定特定的高度和/或宽度：
- en: '[PRE56]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'In this case, we have set the width of our image to be resized to `320` pixels
    and the height to `200` pixels. We can also constrain just the width; the height
    will automatically be set to the correct proportion:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们已经将需要调整大小的图片宽度设置为`320`像素，高度设置为`200`像素。我们还可以只限制宽度；高度将自动设置为正确的比例：
- en: '[PRE57]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Tip
  id: totrans-309
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: It is important to note that `Sencha.io Src` will only shrink images; it will
    not enlarge them. If you enter a value larger than the dimensions of the actual
    image, it will simply display at the full image size. Your full-size image should
    always be the largest size you will need for the display.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是`Sencha.io Src`只会缩小图片；它不会放大它们。如果你输入的值大于实际图片的尺寸，它将 simply display at the
    full image size. 你的全尺寸图片应始终是你用于展示所需的最大尺寸。
- en: Sizing by formula
  id: totrans-311
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过公式确定大小
- en: 'We can also use formulas to make changes based on the screen size of the device.
    For example, we can use the following code to make our photo 20 pixels narrower
    than the full width of the screen:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用公式根据设备屏幕大小进行更改。例如，我们可以使用以下代码使我们的照片比屏幕的全宽窄20像素：
- en: '[PRE58]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: This is useful if you want to leave a small border around the image.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要在图片周围留出一点边框，这个选项很有用。
- en: Sizing by percentage
  id: totrans-315
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过百分比确定大小
- en: 'We can also use percentage widths to set our image sizes:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用百分比宽度来设置图片大小：
- en: '[PRE59]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: The `x50` part of our URL sets the image size to 50 percent of the screen width.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 我们URL中的`x50`部分将图片大小设置为屏幕宽度的50%。
- en: 'We can even combine these two elements to create a scalable image gallery:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 我们甚至可以将这两个元素结合起来创建一个可伸缩的图片库：
- en: '[PRE60]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: By using the formula `-20x50-5`, we take our original image, remove 20 pixels
    for our margin, shrink it to 50 percent, and then remove an additional five pixels
    to allow for space between our two images.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 使用公式`-20x50-5`，我们取原始图片，为边距去掉20像素，将其缩小到50%，然后去掉额外的五像素，以允许两张图片之间有空间。
- en: '![Sizing by percentage](img/0748OS_03_12.jpg)'
  id: totrans-322
  prefs: []
  type: TYPE_IMG
  zh: '![通过百分比确定大小](img/0748OS_03_12.jpg)'
- en: Changing file types
  id: totrans-323
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更改文件类型
- en: '`Sencha.io Src` offers some additional options you may find useful. Firstly,
    it lets you change the file type for your image on the fly. For example, the following
    code will turn your JPG file into a PNG:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '`Sencha.io Src`提供了一些可能很有用的额外选项。首先，它让你可以实时更改图片的文件类型。例如，以下代码会将你的 JPG 文件转换为 PNG：'
- en: '[PRE61]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: This can be useful while offering your applications' users multiple image downloading
    options.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 当向应用程序用户提供多个图片下载选项时，这个选项很有用。
- en: 'This option can also be combined with the resizing options:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 此选项还可以与调整大小选项结合使用：
- en: '[PRE62]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: This would convert the file to PNG format and scale it to 50 percent.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把文件转换为 PNG 格式并将其缩放到50%。
- en: By using the functions available in `Sencha.io Src`, you can automatically size
    images for your application and provide a consistent look and feel across multiple
    devices.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`Sencha.io Src`中可用的功能，您可以自动调整应用程序中的图片大小，并在多种设备上提供一致的外观和感觉。
- en: Note
  id: totrans-331
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Sencha.io is a free service. For a full list of all the functions you can use
    with `Sencha.io Src`, go to:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: Sencha.io 是一个免费服务。要获取使用`Sencha.io Src`的所有功能的完整列表，请访问：
- en: '[http://www.sencha.com/learn/how-to-use-src-sencha-io/](http://www.sencha.com/learn/how-to-use-src-sencha-io/)'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.sencha.com/learn/how-to-use-src-sencha-io/](http://www.sencha.com/learn/how-to-use-src-sencha-io/)'
- en: Summary
  id: totrans-334
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learnt how to style toolbars using the `ui` configuration
    option. We also talked about how Sencha Touch uses Sass and Compass to create
    a robust theme system. We included installation instructions for Sass and Compass
    and explained mixins, variables, nesting, and selector inheritance. Finally, we
    touched upon designing interfaces for multiple devices and handling automatic
    image resizing using `Sencha.io Src`.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们学习了如何使用`ui`配置选项来样式化工具栏。我们还讨论了 Sencha Touch 如何使用 Sass 和 Compass 创建一个健壮的主题系统。我们包括了
    Sass 和 Compass 的安装说明，并解释了混合模式、变量、嵌套和选择器继承。最后，我们提到了为多种设备设计界面以及使用`Sencha.io Src`处理自动调整图片大小的方法。
- en: In the next chapter, we will dive right back into the Sencha Touch framework.
    We'll review a bit of what we have previously learned about the components' hierarchies.
    Then, we will cover some of the more specialized components that are available.
    Finally, we'll give you some tips on finding the information youneed in the Sencha
    Touch API documentation.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将重新深入研究 Sencha Touch 框架。我们将回顾一下我们之前学过的关于组件层次结构的知识。然后，我们将介绍一些更专业的组件。最后，我们会给你一些在
    Sencha Touch API 文档中找到所需信息的技巧。
