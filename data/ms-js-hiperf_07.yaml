- en: Chapter 7. Hands off the DOM
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 7 章。不要碰 DOM
- en: In this chapter, we will review the DOM in relation to writing high-performance
    JavaScript, and see how to optimize our JavaScript to render our web applications
    visibly faster.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将回顾与编写高性能 JavaScript 相关的 DOM，并了解如何优化我们的 JavaScript 以使我们的网络应用程序可见地更快渲染。
- en: We will also take a look at JavaScript animations and test their performance
    against modern CSS3 animations; we will also test for paint redraw events in the
    DOM and quickly test for scrolling events attached to a page that may affect performance.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将查看 JavaScript 动画，并测试它们与现代 CSS3 动画的性能；我们还将测试与页面关联的绘制重绘事件在 DOM 中，并快速测试可能影响性能的滚动事件。
- en: 'We will cover the following topics in the chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章中涵盖以下主题：
- en: Why worry about the DOM?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么担心 DOM？
- en: Don't we need a MV-whatever library?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要一个 MV- whatever 库吗？
- en: Creating new objects using the `createElement` function
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `createElement` 函数创建新对象
- en: Animating elements
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动画元素
- en: Understanding paint events
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解绘制事件
- en: Pesky mouse scrolling events
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 讨厌的鼠标滚动事件
- en: Why worry about the DOM?
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么担心 DOM？
- en: The **Document Object Model** (**DOM**) is how our HTML content is presented
    in our web browser. It's not quite the same as the source code; the DOM is the
    live updated version of our source code as we make updates to a web application's
    page in a web browser.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**文档对象模型**（**DOM**）是我们 HTML 内容在网络浏览器中的呈现方式。这并不完全相同于源代码；DOM 是我们源代码的实时更新版本，当我们在大纲浏览器中对网络应用程序的页面进行更新时。'
- en: We can say that fast, optimized JavaScript will certainly help our applications
    run and perform better, as we learned in previous chapters. But it's important
    to understand that the DOM is just as important to JavaScript performance as understanding
    how to optimize a `for` loop.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以说，优化快速的 JavaScript 肯定有助于我们的应用程序运行和表现更好，正如我们在之前的章节中学到的。但重要的是要理解，DOM 对 JavaScript
    性能的重要性不亚于理解如何优化一个 `for` 循环。
- en: In the early days of the Web, we as web developers didn't think about the DOM
    too much. If we think about how far JavaScript has come, we can see that many
    changes have come to the world of web development. If we reminisce about the pre-Google
    days of the web, we know that websites were pretty simplistic, and user interaction
    was mainly limited to hyperlink tags and an occasional JavaScript `window.alert()`
    function to show some form of application interaction.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Web 的早期时代，我们作为网络开发者并没有过多考虑 DOM。如果我们思考一下 JavaScript 的发展历程，我们可以看到网络开发世界发生了许多变化。如果我们回忆起谷歌之前的网络时代，我们知道网站相当简单，用户交互主要限于超链接标签和一个偶尔的
    JavaScript `window.alert()` 函数以显示某种应用程序交互。
- en: 'As time passed, we encountered Web 2.0, or rather the point where **Asynchronous
    JavaScript and XML** (**AJAX**) came into being. If you''re not familiar with
    AJAX, I would like to sum it up: AJAX web applications allow developers to pull
    content from external sources, typically XML files, (this is the X in AJAX).'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间的推移，我们遇到了 Web 2.0，或者说，**异步 JavaScript 和 XML**（**AJAX**）诞生的时刻。如果你不熟悉 AJAX，我想总结一下：AJAX
    网络应用程序允许开发人员从外部源拉取内容，通常是 XML 文件，（这是 AJAX 中的 X）。
- en: With AJAX, website content suddenly became dynamic, meaning developers didn't
    have to rely on backend technologies to refresh a web page with updated data.
    Suddenly, a need for stronger JavaScript came into play. Businesses and their
    clients no longer wanted to have a website responding with page flashes (or sites
    that used backend technologies to update the page with a `POST` submission method),
    all the more so with sites such as Google Maps and Gmail seemingly pushing the
    idea of the web as a platform for software rather than a desktop operating system.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 AJAX，网站内容突然变得动态，这意味着开发人员不必依赖后端技术来刷新带有更新数据的网络页面。突然之间，对更强大的 JavaScript 需求应运而生。企业和他们的客户不再希望网站以页面闪烁（或使用后端技术通过
    `POST` 提交方法更新页面）的方式响应，尤其是像 Google Maps 和 Gmail 这样的网站，它们似乎在推动网络作为软件平台而非桌面操作系统平台的想法。
- en: Don't we need an MV-whatever library?
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们需要一个 MV- whatever 库吗？
- en: Today, we have frameworks that help with the heavy lifting of some of this type
    of application; AngularJS, Backbone.js, Knockout.js, and jQuery are a few libraries
    that come to mind.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，我们有框架可以帮助处理这类应用程序的繁重工作；AngularJS、Backbone.js、Knockout.js 和 jQuery 是几个想到的库。
- en: For this book, however, we will stick to vanilla JavaScript for two reasons.
    The first reason is that entire books are dedicated to many of these libraries
    and talk about performance and various levels of experience, all of which are
    good but beyond the scope of this book. The second reason is that most developers
    typically don't need these libraries to build a project.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，对于这本书，我们将坚持使用原生的JavaScript，原因有两点。第一个原因是，许多这样的库都有自己的书籍，讨论性能和各种经验级别，这些都是很好的，但超出了本书的范围。第二个原因是，大多数开发者通常不需要这些库来构建项目。
- en: Remember that all the JavaScript libraries mentioned here, as well as those
    found on the Web, are again all JavaScript! For most projects, we shouldn't need
    a library to make a project the way we want to build it; moreover, many of these
    libraries come with extra code.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，这里提到的所有JavaScript库，以及网络上找到的所有库，都是JavaScript！对于大多数项目，我们不应该需要一个库来使项目按照我们想要的方式构建；此外，这些库中有很多额外的代码。
- en: What I mean by this is that the libraries come with features that might not
    be needed in a given project and, unless a library is modular, it's difficult
    to use it without removing features that aren't needed. This is even harder if
    you're working in a team environment where others may be using a shared library
    for certain areas of the application that may use some features, but not all of
    them.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我的意思是，这些库带有可能不需要的特性和功能，除非库是模块化的，否则很难在不删除不需要的功能的情况下使用它。如果你在一个团队环境中工作，其他人可能正在为应用程序的某些区域使用共享库，这些区域可能使用一些功能，但不是全部。
- en: We'll look into mobile JavaScript performance later in [Chapter 9](ch09.html
    "Chapter 9. Optimizing JavaScript for iOS Hybrid Apps"), *Optimizing JavaScript
    for iOS Hybrid Apps*. We will find these libraries become even more of a burden.
    Now with that said, let's look at some common ways to break the DOM, and what
    we can do to make it perform better.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第9章](ch09.html "第9章：为iOS混合应用优化JavaScript")*为iOS混合应用优化JavaScript*中探讨移动JavaScript性能。我们会发现这些库变得更加沉重。现在话说回来，让我们看看一些常见的DOM破坏方式，以及如何使其表现更好。
- en: Creating new objects using the createElement function
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`createElement`函数创建新对象
- en: 'Here, we will learn to create new objects using the `createElement` function
    along with the following three topics:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将学习如何使用`createElement`函数以及以下三个主题来创建新对象：
- en: Working around the `createElement` function
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绕过`createElement`函数
- en: Working with the `createElement` function
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`createElement`函数工作
- en: When to use the `createElement` function
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 何时使用`createElement`函数
- en: Working around the createElement function
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 绕过`createElement`函数
- en: In JavaScript, we can create new page elements using the `document.createElement()`
    function and text objects to place inside our generated elements using the `document.createTextNode()`
    function. Typically, creating new elements to inject into our DOM can be a bit
    of a drain on rendering resources as well as interaction performance if done with
    multiple generated elements.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，我们可以使用`document.createElement()`函数创建新的页面元素，并使用`document.createTextNode()`函数在生成的元素内部放置文本对象。通常，创建新元素以将其注入我们的DOM可能会消耗一些渲染资源，以及如果生成了多个元素，交互性能也会受到影响。
- en: Working with the createElement function
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`createElement`函数工作
- en: 'Let''s test how well the `createElement` function renders content to a screen.
    Here''s our test: we are going to create a table with a lot of data using a `for`
    loop. We will populate a table cell with a text object with the count of the iteration
    of our `for` loop. Then, we will look at an alternate version creating the same
    effect with a different code implementation, and compare both. Let''s take a look
    at the first option using the `createElement` function shown as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们测试一下`createElement`函数将内容渲染到屏幕上的效果。这是我们的测试：我们将使用`for`循环创建一个包含大量数据的表格。我们将使用文本对象填充表格单元格，该文本对象包含`for`循环迭代的计数。然后，我们将查看一个使用不同代码实现的创建相同效果的替代版本，并比较两者。让我们看看使用`createElement`函数的第一个选项，如下所示：
- en: '![Working with the createElement function](img/7296OS_07_01.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![使用createElement函数工作](img/7296OS_07_01.jpg)'
- en: Here, we have a simple HTML5 page with some formatting CSS styles in the `head`
    section and an empty placeholder `div` element on line number 21 with an `id`
    set as `datainsert`. On line 25, we have an `anonymous function` to run as soon
    as it's loaded into the browser; also on line 26, we start a `console.time` function
    to start counting how long our JavaScript performs. We then create a table element
    variable called `tableElem` on line 27; on lines 28 through 31, we set some attributes
    to help style the formatting of our table.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们有一个简单的HTML5页面，在`head`部分有一些格式化的CSS样式，在第21行有一个空的占位符`div`元素，其`id`设置为`datainsert`。在第25行，我们有一个`匿名函数`，在加载到浏览器后立即运行；在第26行，我们开始一个`console.time`函数，以开始计算我们的JavaScript执行时间。然后我们在第27行创建一个表格元素变量`tableElem`；在第28到31行，我们设置一些属性，以帮助格式化我们的表格。
- en: Then on line 33, we start our `for` loop; in the scope of our `for` loop we
    create a table row element, a table cell element, and a text node to insert text
    into our generated table cell, starting with the `cellContent` variable on line
    35, the `tableTr` variable on line 36, and the `tableTd` variable on line 37\.
    On lines 39-41, we append the table with our generated cell and continue the loop
    for `10000` times. Lastly, we append the table element to our `datainsert` div
    element on the page to render our content. Let's run this in our browser and see
    how long it takes for the content to render using Chrome **Developer tools** options.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在第33行，我们开始我们的`for`循环；在`for`循环的作用域内，我们创建一个表格行元素、一个表格单元元素和一个文本节点，以将文本插入到我们生成的表格单元中，从第35行的`cellContent`变量开始，第36行的`tableTr`变量，第37行的`tableTd`变量。在第39-41行，我们将生成的单元格添加到表格中，并继续循环`10000`次。最后，我们将表格元素添加到页面上的`datainsert`
    div元素中，以渲染我们的内容。让我们在浏览器中运行这个，并看看使用Chrome **开发者工具**选项渲染内容需要多长时间。
- en: '![Working with the createElement function](img/7296OS_07_02.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![使用createElement函数工作](img/7296OS_07_02.jpg)'
- en: As we can see, this took quite a bit of processing time, roughly 140 milliseconds
    in Chrome, which is a pretty lengthy render. You can consider doing something
    like this in building a messaging client or displaying data from JSON. Whatever
    the case, the cost of using the `createElement` function is quite large and should
    only be used in small portions.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，这需要相当多的处理时间，在大约140毫秒的Chrome中，这是一个相当长的渲染时间。你可以在构建消息客户端或显示JSON数据时考虑这样做。无论什么情况，使用`createElement`函数的成本是相当大的，应该只在小范围内使用。
- en: 'The other way to generate data on a table like this, but without the use of
    the `createElement` function, is to use the `innerHTML` property. This property
    provides a simple way to completely replace the contents of an element and assign
    values in the same manner as assigning value to a variable. When the `innerHTML`
    property is used, you can change the page''s content without refreshing the page.
    This can make your website feel quicker and more responsive to user input. This
    property can also be appended using the `+=` append operator. Knowing this, we
    can structure our code base in a slightly different way. What we are doing is
    shown in the following screenshot:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 生成这种表格数据的其他方法，但不使用`createElement`函数，是使用`innerHTML`属性。这个属性提供了一种简单的方法，可以完全替换元素的
    contents，并且赋值的方式与给变量赋值相同。当使用`innerHTML`属性时，你可以不刷新页面就改变页面的内容。这可以使你的网站感觉更快、对用户输入更有响应性。这个属性也可以使用`+=`附加运算符进行追加。知道了这个，我们可以以稍微不同的方式构建我们的代码基础。我们所做的是在下面的屏幕截图中显示：
- en: '![Working with the createElement function](img/7296OS_07_03.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![使用createElement函数工作](img/7296OS_07_03.jpg)'
- en: The layout for this should be pretty similar to our `createElement` function
    example. On line 21, we have the same `datainsert` div; on line 25 our `Anonymous
    function` is started off. Now on line 28, we see something quite different; here,
    we can see the start of a string variable called `tableContents`, with the start
    of an HTML table with the same properties as that of the preceding example set
    to it. This is just like what we did using the `createElement` function except
    that we used just a JavaScript string of HTML markup rather than a DOM object
    this time.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这个布局应该与我们的`createElement`函数示例非常相似。在第21行，我们有一个相同的`datainsert` div；在第25行，我们的`匿名函数`开始执行。现在在第28行，我们看到有些不同；在这里，我们可以看到一个名为`tableContents`的字符串变量的开始，它是一个带有与前一个示例相同属性的HTML表格的开始。这就像我们之前使用`createElement`函数一样，只不过这次我们使用了一个JavaScript字符串形式的HTML标记，而不是一个DOM对象。
- en: Next on line 30, we start our `for` loop and append the `tableContents` string
    with an appended string adding in our table row and table cell, with the for loop's
    iteration count inserted into the cell, again counting 10,000 times.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在第30行，我们开始我们的`for`循环，并将`tableContents`字符串与添加了表格行和表格单元格的新字符串一起附加，将for循环的迭代次数插入到单元格中，再次计数为10,000次。
- en: When the loop is finished on line 35, we append our string with the closing
    brackets for our table. Finally on line 37 and 38, we use the `innerHTML` property
    and write our table into the `innerHTML` property of the `datainsert` div element.
    Let's run this example in a browser and take a look at its processing time.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当循环在第35行完成时，我们将我们的字符串附加以表格的闭合括号。最后，在第37行和38行，我们使用`innerHTML`属性，将我们的表格写入`datainsert`
    div元素的`innerHTML`属性中。让我们在浏览器中运行这个例子并查看其处理时间。
- en: '![Working with the createElement function](img/7296OS_07_04.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![使用createElement函数工作](img/7296OS_07_04.jpg)'
- en: This time our table's render time is roughly 40 milliseconds, which is almost
    four times faster than we would get if we used the `createElement` function. Now
    that's a great speed improvement! And it's even visually faster in Chrome as well.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这次我们的表格渲染时间大约为40毫秒，这比我们使用`createElement`函数的速度快了近四倍。这是一个巨大的速度提升！在Chrome中视觉效果也更快。
- en: When to use the createElement function?
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 何时使用createElement函数？
- en: Though the `createElement` function is slow, on occasion it can be more helpful
    in generating HTML through a complex layout, where a complex application generates
    many more elements than an `innerHTML` property can be styled to accommodate.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管`createElement`函数速度较慢，但在生成复杂布局的HTML时，有时它会更 helpful，复杂的应用程序会生成比`innerHTML`属性可以样式化容纳的更多元素。
- en: If this is the case, this is done more for convenience and usability for the
    development team when modifying the element's type rather than for updating a
    full string to fit the needs of the application. In any case, if you need to create
    HTML elements, the `innerHTML` property is always faster.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果确实如此，这更多的是为了方便开发团队在修改元素类型时的可用性和易用性，而不是为了更新满足应用程序需求的完整字符串。无论如何，如果您需要创建HTML元素，`innerHTML`属性总是更快的。
- en: Animating elements
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动画化元素
- en: One of the more impressive uses of JavaScript came around the *Web 2.0* age
    of JavaScript while AJAX was gaining popularity; another interesting idea came
    about in the form of JavaScript animations. These are animations that are created
    by simply iterating over and over an element's styles that are left- and top-positioned
    using a `setInterval` function, and then dismissing it after the element reached
    its end point. This allows the div to appear to tween or animate on the page itself.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在*Web 2.0*时代，JavaScript的一个更加令人印象深刻的使用方式出现了，当时AJAX正在变得越来越受欢迎；另一种有趣的想法以JavaScript动画的形式出现。这些动画是通过简单地反复迭代一个元素的样式来创建的，该元素使用`setInterval`函数设置左上角位置，然后在元素达到终点后撤销它。这使得div似乎在页面上进行了微调或动画化。
- en: Animating the old-fashioned way
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 以传统方式动画化
- en: 'Most JavaScript developers are familiar with doing animations using jQuery,
    the popular DOM manipulation library for JavaScript, using the `animate` function
    to create DOM animations. But, as we are talking about pure JavaScript in this
    book, let''s take a look at an example of how to build this from the ground up.
    Check out the code in the following screenshot:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数JavaScript开发者都熟悉使用流行的DOM操作库jQuery进行动画制作，使用`animate`函数创建DOM动画。但是，由于我们在这本书中讨论的是纯JavaScript，让我们来看一个从零开始构建的例子。查看以下屏幕截图中的代码：
- en: '![Animating the old-fashioned way](img/7296OS_07_05.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![以传统方式动画化](img/7296OS_07_05.jpg)'
- en: In this example, I've simply created a WebKit-friendly animation using just
    JavaScript, (meaning this will only display properly in the Google Chrome and
    Apple Safari browsers). On line 7, we set up some basic styles including a black
    dot div element with the `id` set as `dot`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我仅仅使用JavaScript创建了一个WebKit友好的动画（这意味着这只能在Google Chrome和Apple Safari浏览器中正确显示）。在第7行，我们设置了一些基本样式，包括一个带有`id`为`dot`的黑点div元素。
- en: 'Now on line 27 and 28, we declare the `dot` and `i` variables respectively.
    Then, on line 31, we create a variable called `interval`, which is actually a
    parameter passed to the `setInterval` function. In the case of this code, it''s
    for every millisecond, which is shown on line 38\. Inside the `setInterval` function
    we increment the `i` variable''s count by `1`, and update the position of the
    `dot` element. Finally, when the value of the `i` variable is strictly equal to
    `450`, we dismiss our interval variable using the `clearInterval` function, which
    stops the `setInterval` function from processing any further. If we look at this,
    we can see a simple animation tween using pure JavaScript in our browser. This
    is shown in the following screenshot:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在第27行和28行，我们分别声明了`dot`和`i`变量。然后，在第31行，我们创建了一个名为`interval`的变量，这实际上是一个传递给`setInterval`函数的参数。在此代码中，它是每毫秒一次，这在第38行显示。在`setInterval`函数内部，我们将`i`变量的计数增加`1`，并更新`dot`元素的位置。最后，当`i`变量的值严格等于`450`时，我们使用`clearInterval`函数清除我们的`interval`变量，从而停止`setInterval`函数进一步处理。如果我们看看这个，我们可以在浏览器中使用纯JavaScript看到一个简单的动画淡入淡出。这在下方的屏幕截图中显示：
- en: '![Animating the old-fashioned way](img/7296OS_07_06.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![老式动画](img/7296OS_07_06.jpg)'
- en: Now, you may think that creating a `setInterval` function in this manner may
    be a cause of concern, and you might be correct. Fortunately, we as developers
    now have an alternative when it comes to creating animations like this for our
    HTML5 applications!
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可能会认为以这种方式创建`setInterval`函数可能是个问题，你可能是对的。幸运的是，我们现在作为开发者在创建这类动画时，为我们的HTML5应用程序有了另一种选择！
- en: Animating using CSS3
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用CSS3动画
- en: 'Let''s rebuild this example using CSS3 and JavaScript only to trigger the animation.
    Again, we will simply style for WebKit-focused browsers, just for simplicity.
    Let''s take a look at the updated code sample shown in the following screenshot:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用仅CSS3和JavaScript来重建这个例子，以触发动画。再次，我们仅仅为WebKit内核浏览器进行样式设计，仅为简化。下面屏幕截图所示的是更新后的代码样本：
- en: '![Animating using CSS3](img/7296OS_07_07.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![使用CSS3动画](img/7296OS_07_07.jpg)'
- en: With this example, we can see that our JavaScript has much fewer lines, and
    that's a good thing; it keeps our content styles purely CSS-based rather than
    styling content using JavaScript logic.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个例子，我们可以看到我们的JavaScript代码行要少得多，这是件好事；它使我们的内容样式纯粹基于CSS，而不是使用JavaScript逻辑来样式化内容。
- en: Now, on the JavaScript side, we can see that we are using the same kind of `Anonymous
    function` on line 39, except that we are setting a timeout to trigger the `dot`
    element to add an active class property that triggers the animation in CSS3\.
    This is shown on lines 19 through 30 in our example
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在JavaScript方面，我们可以看到我们在第39行使用了相同类型的`匿名函数`，不同的是，我们设置了一个超时时间，以触发`dot`元素添加一个激活类属性，从而在CSS3中触发动画。这在我们示例的第19至30行中显示。
- en: An unfair performance advantage
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不公平的性能优势
- en: 'In many code examples in this book, I''ve used `console.time`, and `console.timeEnd`
    to review performance, and this example is no exception. You may have noticed
    that I''ve wrapped each animation example in a `time` and `timeEnd` function to
    measure the processing timeAs we can see in the following screenshot, it''s a
    bit one-sided:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中的许多代码示例中，我使用了`console.time`和`console.timeEnd`来回顾性能，这个例子也不例外。你可能注意到了，我将每个动画示例都包裹在一个`time`和`timeEnd`函数中，以测量处理时间正如下面的屏幕截图所示，它有点片面：
- en: '![An unfair performance advantage](img/7296OS_07_08.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![不公平的性能优势](img/7296OS_07_08.jpg)'
- en: As we can see in the preceding screenshot, the JavaScript processing time is
    roughly 1,900 milliseconds, and the CSS3 animation is around 0.03 milliseconds.
    Now, before we conclude that the CSS3 method is better, we must bear in mind that
    we are using CSS3 only to render the page, and JavaScript is handling only the
    trigger of the animation. It's still more efficient, but it should be noted that
    JavaScript handles less code.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在之前的屏幕截图中所看到的，JavaScript处理时间大约是1900毫秒，而CSS3动画大约是0.03毫秒。现在，在得出CSS3方法更好的结论之前，我们必须记住，我们仅用CSS3来渲染页面，而JavaScript只处理动画的触发。这仍然更有效率，但应注意JavaScript处理的是更少的代码。
- en: 'Now for newer browsers, this is the recommended way of building content animations
    given the performance improvements seen thus far, whether made by JavaScript or
    not. However, some projects require older browser support, where projects may
    not have access to CSS3 transitions and animations, or we''re upgrading a part
    of an application''s animation while still maintaining compatibility. Here''s
    one way of doing just that while using the same JavaScript-based animation as
    earlier:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在对于新浏览器，这是构建内容动画的推荐方式，因为迄今为止已经看到了性能改进，无论是由JavaScript还是其他方式实现的。然而，一些项目需要支持旧浏览器，这些项目可能无法访问CSS3转换和动画，或者我们在升级应用程序的动画部分的同时仍然保持兼容性。以下是在使用与之前相同的基于JavaScript的动画时实现这一点的一种方法：
- en: '![An unfair performance advantage](img/7296OS_07_09.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![不公平的性能优势](img/7296OS_07_09.jpg)'
- en: Here we've modified our initial JavaScript example by updating the position
    of the `dot` element; however, we've added two CSS lines on lines 17 and 18\.
    The first one is a `-webkit-transform` and `translate3d` property that only sets
    the element to not change position; in older browsers or non webkit-focused browsers,
    this property will be ignored. But here it's simply setting the position of the
    element to its initial position, which sounds silly, and in a way it is!
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们修改了最初的JavaScript示例，通过更新`dot`元素的位置；然而，我们在第17行和第18行添加了两条CSS。第一个是一个`-webkit-transform`和`translate3d`属性，它只设置元素不改变位置；在旧浏览器或非webkit重点浏览器上，这个属性将被忽略。但在这里，它只是将元素的位置设置为初始位置，这听起来很傻，实际上也确实如此！
- en: What this really does is tell the DOM runtime that this needs to run as a unique
    graphics process; it also tells the **graphics processing unit** (**GPU**) on
    the browser's device to draw this element fast! The same can be said for `will-change`,
    which is a similar property that does the same thing as the `translate3d` property
    with the exception that it's not updating the position but simply telling the
    GPU to redraw this element at a very high rate and to expect it to change in the
    DOM. Now, this practice is called adding elements to a composite layer. We will
    get more into composite layers in [Chapter 9](ch09.html "Chapter 9. Optimizing
    JavaScript for iOS Hybrid Apps"), *Optimizing JavaScript for iOS Hybrid Apps*.
    But for now, this is what we are doing here; this way, newer browsers can still
    get some visual speed improvements using legacy JavaScript animations.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这实际上告诉DOM运行时，这需要作为一个独特的图形进程运行；它还告诉浏览器设备上的**图形处理单元**（**GPU**）快速绘制这个元素！同样的可以说对于`will-change`，这是一个类似的属性，它做的和`translate3d`属性一样的事情，不同的是它不是更新位置，而是告诉GPU以非常高的频率重新绘制这个元素，并期待它在DOM中发生变化。现在，这种做法被称为将元素添加到合成层。我们将在[第9章](ch09.html
    "第9章。为iOS混合应用优化JavaScript")，*为iOS混合应用优化JavaScript*中更深入地介绍合成层。但现在，这就是我们在这里做的事情；这样，新浏览器仍然可以使用遗留的JavaScript动画获得一些视觉速度提升。
- en: Understanding paint events
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解绘制事件
- en: Paint events are DOM events that cause a web browser to paint the web page as
    the DOM is updated with JavaScript. For browsers with low memory, this can be
    a bit of an issue as paint events take a sizable amount of processing and graphics
    rendering to show updates in large quantities.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 绘制事件是DOM事件，它会导致Web浏览器在DOM用JavaScript更新时绘制网页。对于内存较低的浏览器来说，这可能是一个问题，因为绘制事件需要大量的处理和图形渲染才能在大规模显示更新。
- en: How to check for paint events?
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何检查绘制事件？
- en: Typically, paint events can be found in your Web Inspector's timeline view.
    Since paint events are displayed chronologically during a page's execution in
    a web browser, these appear slightly differently in Chrome's **Developer tools**
    options.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，您可以在Web Inspector的时间线视图中找到绘制事件。由于绘制事件在Web浏览器中执行页面的过程中按时间顺序显示，因此在Chrome的**开发者工具**选项中这些显示略有不同。
- en: 'Open Chrome''s **Developer tools** options and click the drawer icon (it''s
    the icon next to the gear icon on the upper right of the **Developer tools** options).
    Next, open the **Rendering** tab in the drawer, and click **Show paint rectangles**
    option. Once that''s finished, refresh the page. We will see the page highlighted
    green in various areas as the page loads. These are paint events in action as
    they are loaded on screen. Here''s an example using our animation and showing
    paint rectangles enabled in Chrome''s **Developer tools** options:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 打开Chrome的**开发者工具**选项，点击抽屉图标（它在**开发者工具**选项上方的右侧齿轮图标旁边）。接下来，在抽屉中打开**渲染**标签，然后点击**显示绘制矩形**选项。完成后，刷新页面。页面加载时，我们会看到页面的不同区域被绿色突出显示。这些是正在加载屏幕上的绘制事件。以下是一个使用我们的动画并显示在Chrome的**开发者工具**选项中启用绘制矩形的示例：
- en: '![How to check for paint events?](img/7296OS_07_10.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![如何检查绘制事件？](img/7296OS_07_10.jpg)'
- en: Notice how the green square appears on page load and again when the animation
    finishes. This happens because the DOM only repaints the browser window on page
    load or when an animation ends.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 注意绿色正方形在页面加载时出现，以及在动画完成时再次出现。这是因为DOM仅在页面加载或动画结束时重绘浏览器窗口。
- en: Occasionally, projects can create pretty complex animations using JavaScript
    alone. To spot errors with our JavaScript logic and ensure that a paint event
    isn't causing an issue, we can use the continuous page repainting feature inside
    Chrome's **Developer tools**.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 偶尔，项目可以仅使用JavaScript创建相当复杂的动画。为了找出我们的JavaScript逻辑错误，并确保绘制事件没有造成问题，我们可以在Chrome的**开发者工具**中使用连续页面重绘功能。
- en: Testing paint events
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试绘制事件
- en: 'To test this, we''ve set up a JavaScript animation with a built-in bug as shown
    here:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试这个，我们设置了一个带有内置错误的JavaScript动画，如图所示：
- en: '![Testing paint events](img/7296OS_07_11.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![测试绘制事件](img/7296OS_07_11.jpg)'
- en: Much of this should seem pretty similar to earlier animations we've built in
    this chapter. But if we take a look at lines 35 through 38, we can see that we
    have a conditional `else if` statement checking to see if our increment variable
    `i` is within the 250-258 range count; if so, the `left` `style` is removed from
    the `dot` element.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该与我们在本章中构建的早期动画看起来非常相似。但如果我们查看第35至38行，我们可以看到有一个条件`else if`语句，检查我们的递增变量`i`是否在250-258范围内；如果是，`dot`元素的`left``style`将被移除。
- en: When we run this, we should encounter a flicker right the animation hits this
    point. We can verify whether this is truly a JavaScript issue by enabling continuous
    page repainting in Chrome's **Developer tools**.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行这个测试时，动画达到这个点时我们应该会遇到一个闪烁。我们可以通过在Chrome的**开发者工具**中启用连续页面重绘来验证这是否真的是一个JavaScript问题。
- en: 'To do this, open the **Developer tools** options, open the drawer, and click
    the **Rendering** tab in the drawer. Then we can check the **Enable continuous
    page repainting** and **Show paint rectangles** options. When we do this, our
    web page should show a green overlay and display an information box in the upper
    right of our browser window. This is shown in the following screenshot:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，打开**开发者工具**选项，打开抽屉，点击抽屉中的**渲染**标签。然后我们可以检查**启用连续页面重绘**和**显示绘制矩形**选项。当我们这样做时，我们的网页应该显示一个绿色覆盖层，并在浏览器窗口的右上角显示一个信息框。以下屏幕截图显示了这一点：
- en: '![Testing paint events](img/7296OS_07_12.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![测试绘制事件](img/7296OS_07_12.jpg)'
- en: Now, when we reload the page and the animation is replayed, our `dot` element
    should show a green box drawn around it during the whole animation this time.
    This is Chrome forcing the page to constantly redraw as the animation updates.
    As we can see, the box is still on the dot even when we hit our premade bug, indicating
    a JavaScript issue. If this was a true paint issue, the box would disappear when
    a redraw issue occurs.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们重新加载页面，动画再次播放时，我们的`dot`元素应该在整个动画期间显示一个绿色的矩形框。这是Chrome强制页面不断重绘以更新动画。正如我们所看到的，即使在我们的预设错误发生时，矩形框仍然在点上，这表明了一个JavaScript问题。如果这是一个真正的绘制问题，当重绘出现问题时，矩形框会消失。
- en: Pesky mouse scrolling events
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 讨厌的鼠标滚动事件
- en: Paint events (or a lack thereof) are not the only issues when it comes to web
    application performance when you're working with JavaScript. Scrolling events
    applied to a browser window or document can cause havoc on an application; it's
    never a good idea to continuously trigger events by scrolling a mouse, let alone
    multiple events.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 绘制事件（或缺乏 thereof）并不是当你使用JavaScript工作时影响网络应用程序性能的唯一问题。对浏览器窗口或文档应用的滚动事件可能会对应用程序造成混乱；不断通过滚动鼠标触发事件，更不用说触发多个事件，永远都不是一个好主意。
- en: If we're coding an application, we know whether our application has one or many
    events added. But if we are handed a web application to update, there is a tool
    in Chrome's **Developer tools** that lets us visually check for scroll events.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们正在编写一个应用程序，我们知道我们的应用程序是否有多个事件添加。但如果我们被交了一个需要更新的网络应用程序，Chrome的**开发者工具**中有一个工具，可以让我们
    visually check for scroll events。
- en: 'Let''s create a quick example to show how this feature works and what it looks
    for when trying to optimize the DOM interface. For this, I''ve created a `mousewheel`
    event that will capture the *X* and *Y* coordinates of a mouse pointer''s position
    with respect to the page, and print that to an input field with an `id` set as
    `txtfield`; it will trigger every time I move the mouse wheel. Let''s take a look
    at the following code sample:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个简单的示例来展示这个功能是如何工作的，以及它在尝试优化DOM界面时在寻找什么。为此，我创建了一个`mousewheel`事件，它将捕获鼠标指针相对于页面的*X*和*Y*坐标，并在具有`id`为`txtfield`的输入字段中打印出来；每当
    I 移动鼠标滚轮时，它都会触发。让我们看看以下代码示例：
- en: '![Pesky mouse scrolling events](img/7296OS_07_13.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![讨厌的鼠标滚动事件](img/7296OS_07_13.jpg)'
- en: We can see here that the page itself is pretty light but, on line 23, we can
    see the `mousewheel` event listener in play adding a continuous event using the
    `getMouseLocation` function on line 26\. Then on line 27, our input field with
    an `id` of `txtfield` is assigned a string with the mouse event information, grabbing
    the mouse pointer's `X` and `Y` coordinates and applying it to the value of `txtfield`.
    Now let's see **Developer tools** highlight performance issues with scrolling.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里我们可以看到页面本身相当轻，但在第23行，我们可以看到`mousewheel`事件监听器在起作用，使用`getMouseLocation`函数在第26行添加了一个持续的事件。然后在第27行，我们的具有`id`为`txtfield`的输入字段被分配了一个字符串，其中包含鼠标事件信息，抓取鼠标指针的`X`和`Y`坐标并将其应用于`txtfield`的值。现在让我们看看**开发者工具**如何突出显示滚动性能问题。
- en: 'Open up the drawer, open the **Rendering** tab, and then click **Show potential
    scroll bottlenecks**. This will highlight the block areas that have scroll events
    assigned in JavaScript; here''s what our example looks like with the filter enabled:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 打开抽屉，打开**渲染**标签，然后点击**显示潜在的滚动瓶颈**。这将突出显示在JavaScript中分配了滚动事件的块区域；下面是我们示例在启用过滤器时的样子：
- en: '![Pesky mouse scrolling events](img/7296OS_07_14.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![讨厌的鼠标滚动事件](img/7296OS_07_14.jpg)'
- en: 'Now, this by itself isn''t too bad when it comes to performance, but applications
    with multiple mouse movement events can potentially cause issues, even more so
    if the movement areas overlap. If we add the same event listener to the text area
    and remove the listener from the document, will we see multiple instances of the
    scroll listener showing in our **Developer tools** filter? Let''s find it out
    by looking at the output of the final example file for this chapter, `07_08.html`:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这本身在性能方面并不是太糟糕，但是具有多个鼠标移动事件的应用程序可能会潜在地引起问题，如果移动区域重叠，问题会更严重。如果我们将在文本区域中添加相同的事件监听器并从文档中删除监听器，我们会在**开发者工具**过滤器中看到多个滚动监听器的实例吗？让我们通过查看本章最终示例文件`07_08.html`的输出来找到答案：
- en: '![Pesky mouse scrolling events](img/7296OS_07_15.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![讨厌的鼠标滚动事件](img/7296OS_07_15.jpg)'
- en: Nope! As we can see, even when a `mousewheel` event is enabled on a single element,
    the entire page becomes highlighted. As the `mousewheel` event can be checked
    at the top of the DOM, the whole page is affected even if an application focuses
    only on one small element for a `mousewheel` event.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 当然不是！正如我们所看到的，即使在一个元素上启用了`mousewheel`事件，整个页面也会被突出显示。由于`mousewheel`事件可以在DOM的顶部进行检查，即使一个应用程序只关注一个`mousewheel`事件的很小元素，整个页面也会受到影响。
- en: So it's important to keep in mind `mousewheel` events, as they can potentially
    slow down your page's performance.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，记住`mousewheel`事件是很重要的，因为它们可能会潜在地减慢您页面的性能。
- en: Summary
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we covered how JavaScript can affect the DOM's performance;
    we reviewed the `createElement` function and learned how to better write our JavaScript
    to optimize generating elements from code.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了JavaScript如何影响DOM的性能；我们回顾了`createElement`函数，并学习了如何更好地编写我们的JavaScript以优化从代码生成元素。
- en: We also reviewed JavaScript animations, and compared their performance to modern
    CSS3 animations. We also learned how to optimize existing or legacy JavaScript
    animations.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还回顾了JavaScript动画，并将其性能与现代CSS3动画进行了比较。我们还学习了如何优化现有或遗留的JavaScript动画。
- en: Lastly, we reviewed paint events in the DOM and saw how the DOM redraws its
    content after JavaScript manipulates it; we also covered `mousewheel` events and
    saw how they can potentially slow down the DOM.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们回顾了在 DOM 中处理绘图事件，并了解了当 JavaScript 对其进行操作后，DOM 是如何重新绘制其内容的；我们还介绍了 `mousewheel`
    事件，并看到了它们如何可能导致 DOM 的性能下降。
- en: 'In the next chapter, we will take a look at JavaScript''s new best friend for
    performance: *web workers*, and how we can make JavaScript perform like a multithreaded
    application.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨 JavaScript 性能提升的新伙伴：*web 工作者*，以及如何让 JavaScript 表现得像一个多线程应用程序。
