- en: Chapter 5. Twitter
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章 Twitter
- en: Twitter is a service that really grew up on having an open and available API.
    Initially, there were no Twitter clients. Communication with Twitter was limited
    to SMS and later the website. During the development of Twitter, the developers
    apparently racked up hundreds of dollars in SMS charges, testing, and building
    the system. Twitter grew in popularity on the back of hundreds of developers who
    built tools like **TweetDeck** and **Tweetree** using open Twitter APIs or the
    Twitter RSS feeds. As such, Twitter offers a rich API that can be used to build
    up applications, and in our case, visualizations.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Twitter是一个真正在开放和可用的API上成长起来的服务。最初，没有Twitter客户端。与Twitter的通信限于SMS，后来是网站。在Twitter的开发过程中，开发者显然累积了数百美元的SMS费用，用于测试和构建系统。Twitter在数百名开发者的支持下变得流行，这些开发者使用开放的Twitter
    API或Twitter RSS源构建了工具，如**TweetDeck**和**Tweetree**。因此，Twitter提供了一个丰富的API，可以用来构建应用程序，在我们这个案例中，是可视化。
- en: Before we get into building visualizations, let's take a look at the Twitter
    API, and how we can make use of it. There is a great deal of documentation on
    the API available at [https://dev.twitter.com](https://dev.twitter.com). If you
    want more information, this should be your first stop for additional research.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始构建可视化之前，让我们来看看Twitter API，以及我们如何使用它。在[https://dev.twitter.com](https://dev.twitter.com)上有大量的API文档可供查阅。如果你需要更多信息，这应该是你进行额外研究的第一个停靠点。
- en: 'For our purposes, Twitter offers two different models for retrieving data.
    The first is a typical RESTful model, where the client makes requests to Twitter
    for specific resources that are returned over HTTP in JSON format. This API is
    likely to be similar to others you have seen before. It is stateless, meaning
    that no information is retained server side between requests, and follows the
    best practices of HTTP. If you''re attempting to consume data from Twitter in
    a web browser, then this is the option for you. The second option is the streaming
    API. This method makes use of a persistent HTTP connection to which Twitter will
    send messages as they occur. It is a generally poor idea to make use of the streaming
    API from a browser, so you''ll need to have some sort of an intermediary server
    between the browser and the API, as shown in the following figure:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的目的，Twitter提供了两种不同的数据获取模型。第一种是典型的RESTful模型，其中客户端向Twitter请求特定资源，这些资源通过HTTP以JSON格式返回。这个API可能与你之前见过的其他API相似。它是无状态的，意味着在请求之间不会在服务器端保留任何信息，并遵循HTTP的最佳实践。如果你试图在网页浏览器中消费Twitter数据，那么这个选项适合你。第二种选择是流式API。这种方法利用一个持久的HTTP连接，Twitter会在消息发生时向该连接发送消息。通常不建议从浏览器使用流式API，所以你需要一个浏览器和API之间的中介服务器，如下面的图所示：
- en: '![Twitter](img/6542OS_05_01.jpg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![Twitter](img/6542OS_05_01.jpg)'
- en: Having a server is, unfortunately, a requirement of all visualizations that
    make use of Twitter, even the RESTful API, as Twitter does not support authentication
    using a pure browser-based solution. We'll get into all that later, but first
    we'll need to set up a developer account with Twitter.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，拥有服务器是使用Twitter的所有可视化的要求，即使是RESTful API，因为Twitter不支持使用纯基于浏览器的解决方案进行身份验证。我们稍后会深入讨论所有这些，但首先我们需要在Twitter上设置一个开发者账号。
- en: Getting access to the APIs
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取API访问权限
- en: If you remember in [Chapter 3](ch03.html "Chapter 3. OAuth"), *OAuth*, one of
    the requirements was getting an application key for each site with which we want
    to talk. This applies to Twitter, so let's go and do that.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你记得在[第3章](ch03.html "第3章 OAuth")中，*OAuth*，其中一个要求是为我们想要与之通信的每个网站获取一个应用程序密钥。这适用于Twitter，所以我们去这样做。
- en: Open up a browser, head over to [https://dev.twitter.com](https://dev.twitter.com),
    and click on the **Sign in** link. If you already have a Twitter account, then
    you can use that here to sign in. If not then you can sign up for a new Twitter
    account. Don't worry, it is all free.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 打开浏览器，前往[https://dev.twitter.com](https://dev.twitter.com)，然后点击**登录**链接。如果你已经有一个Twitter账号，那么你可以在这里使用它来登录。如果没有，你可以注册一个新的Twitter账号。别担心，这些都是免费的。
- en: 'Once you''re signed in, then in the top right-hand corner there should be a
    link to **My applications,** as shown in the following screenshot:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 登录后，然后在右上角应该有一个链接到**我的应用**，如下面的屏幕截图所示：
- en: '![Getting access to the APIs](img/6542OS_05_02.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![获取API访问权限](img/6542OS_05_02.jpg)'
- en: 'Clicking on that will take you to a page where you can go about setting up
    your first application. You''ll need to enter some information about the application.
    You can enter whatever you choose for most fields, but the callback URL should
    be [http://127.0.0.1:8080/twitter1.html](http:// http://127.0.0.1:8080/twitter1.html).
    This is the URL to which Twitter will direct you once the OAuth phase is complete.
    We''re using a localhost value here, but in production you would want to use the
    publicly-facing URL for your visualization. The following screenshot shows the
    **Application Details** window:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 点击那个链接会带你到一个页面，你可以在那里设置你的第一个应用程序。你需要为应用程序输入一些信息。对于大多数字段，你可以输入你选择的任何内容，但回调URL应该是[http://127.0.0.1:8080/twitter1.html](http://127.0.0.1:8080/twitter1.html)。这是Twitter完成OAuth阶段后将要引导你访问的URL。在这里我们使用localhost值，但在生产环境中，你希望使用你可视化的公共面向URL。下面的屏幕快照显示了**应用程序详情**窗口：
- en: '![Getting access to the APIs](img/6542OS_05_03.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![获取API访问权限](img/6542OS_05_03.jpg)'
- en: Tip
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You cannot use a localhost domain here, but if you would rather not see an IP
    address, then you can use a URL shortening service to create an alias for your
    localhost URL. Make sure your URL shortener preserves query parameters, or you
    won't be able to login correctly.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里你不能使用localhost域名，但如果你不想看到IP地址，那么你可以使用一个URL缩短服务为你的localhost URL创建一个别名。确保你的URL缩短器保留查询参数，否则你将无法正确登录。
- en: 'Once your application has been created, you''ll be able to see the various
    settings from the same **My applications** option that we used previously. The
    key information for our purpose is `OAuth settings,` as shown in the following
    figure:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你的应用程序创建完成，你将能够从我们之前使用的同一个**我的应用程序**选项中看到各种设置。对我们目的来说，关键信息是`OAuth设置`，如下面的图所示：
- en: '![Getting access to the APIs](img/6542OS_05_04.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![获取API访问权限](img/6542OS_05_04.jpg)'
- en: These keys will be used for user authorization with our application. Should
    the secret key be leaked—for instance, you might have pasted it into a book you're
    writing—it can be reset using the **Reset keys** link. Doing so will prevent readers
    of your book from pretending to be you and committing unspeakable evils in your
    name.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这些密钥将用于用户对我们应用程序的授权。如果密钥泄露了—例如，你可能把它粘贴到你正在写的书里—你可以通过**重置密钥**链接来重新设置。这样做可以防止你的书的读者假装是你，并在你不知情的情况下为你做出不可描述的坏事。
- en: Setting up a server
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置服务器
- en: As I mentioned, Twitter does not allow direct access to their authentication
    structure from a browser, we'll need to make use of a server. Fortunately, we
    can develop against a server on our own computer—no need for an external server.
    We're using a lot of JavaScript in this book, so let's keep that theme going and
    host our site locally using node.js. Any other HTTP server will also work.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如我所说，Twitter不允许从浏览器直接访问其认证结构，我们需要使用一个服务器。幸运的是，我们可以在自己电脑上的服务器上进行开发——不需要外部服务器。这本书中使用了大量的JavaScript，所以让我们继续这个主题，使用node.js在本地托管我们的网站。任何其他的HTTP服务器也可以工作。
- en: 'Installing node.js is pretty simple. If you''re on Windows, then there is an
    installer available from [http://nodejs.org](http://nodejs.org). On OS X, there
    is a `.pkg`-based installer available on the same site, or it can be installed
    using Homebrew. If you''re using Linux, it is preferable to compile from source.
    However, if you''re using a distribution with a built-in packaging system, such
    as **apt** or **yum**, then there is a node.js package that can be installed with
    either of the two commands:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 安装node.js相当简单。如果你使用的是Windows，那么可以从[http://nodejs.org](http://nodejs.org)下载安装程序。在OS
    X上，可以在同一个网站上下载基于`.pkg`的安装器，或者使用Homebrew进行安装。如果你使用的是Linux，最好是从源代码编译。然而，如果你使用的是带有内置包管理系统的发行版，例如**apt**或**yum**，那么可以使用这两个命令中的任何一个来安装node.js包：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'node.js is a piece of server-side software that is designed to perform all
    of its I/O tasks asynchronously. This means that an operation such as writing
    to disk is handled without blocking the main thread. When the I/O is complete,
    the main thread is notified. One of the most common applications is its usage
    as an HTTP server. This functionally comes in the box in the form of the HTTP
    module, but the interface provided by that module is pretty lightweight. Instead,
    we''ll make use of the Express framework. Express is a lightweight framework which
    provides some infrastructure around routing, sessions and serving content, and
    templating. It can be installed using the node package manager `npm` as shown
    in the following command:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: node.js是一个设计为异步执行所有I/O任务的服务器端软件。这意味着像写入磁盘这样的操作是在不阻塞主线程的情况下处理的。当I/O完成后，主线程会被通知。最常用的应用之一是将其用作HTTP服务器。这个功能以HTTP模块的形式包含在盒子里，但该模块提供的接口相当轻量级。相反，我们将使用Express框架。Express是一个轻量级框架，提供了一些围绕路由、会话和内容服务的基础设施，以及模板。它可以通过node包管理器`npm`安装，如下所示命令：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We'll make use of Express going forward.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将使用Express。
- en: OAuth
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OAuth
- en: 'OAuth can, of course, be manually configured and controlled, but we stand on
    the shoulders of giants for good reason. It is much easier for us to make use
    of an already built OAuth library. Fortunately, node has such a library, creatively
    called **OAuth**. Even with this library, you''ll see that interacting with an
    OAuth 1.0a endpoint is complicated. To install it, drop to the command line again
    and use the node package manager:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: OAuth当然可以手动配置和控制，但我们站在巨人的肩膀上有充分的理由。对我们来说，使用一个已经建立的OAuth库要容易得多。幸运的是，node有一个这样的库，创造性地称为**OAuth**。即使有了这个库，你也会看到与OAuth
    1.0a端点的交互是复杂的。要安装它，再次切换到命令行并使用node包管理器：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This library can perform both OAuth 1.0a and OAuth 2.0 operations. As Twitter
    is an OAuth 1.0a endpoint, we'll be making use of that.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这个库可以执行OAuth 1.0a和OAuth 2.0操作。由于Twitter是一个OAuth 1.0a端点，我们将使用它。
- en: 'The first thing to do is set up our Express application. Express provides application
    templates, but they are an overkill for the simple application in this chapter.
    If you''re planning on creating a more complicated application in future, you''ll
    want to look more into app generation and directory structure for you, application.
    We start by requiring `express` and creating a new app using the loaded module,
    as shown in the following code:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要设置我们的Express应用程序。Express提供了应用程序模板，但对于本章中的简单应用程序来说，这些模板过于复杂。如果你计划在将来创建一个更复杂的应用程序，那么你可能需要更深入地了解应用程序生成和目录结构。我们从以下代码中要求`express`并使用加载的模块创建一个新应用程序：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Require is a library which permits the dynamic loading of JavaScript libraries.
    It is the most common way to bring in external modules in a node application.
    Next, we configure a number of settings in `express`, as shown in the following
    code:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Require是一个库，它允许动态加载JavaScript库。这是在node应用程序中引入外部模块的最常见方式。接下来，我们在`express`中配置了一些设置，如下所示代码：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`bodyParser` allows `express` for simple parsing of the body of requests sent
    to the server. On the next line, the `cookieParser` is set up. Like the `bodyParser`,
    this allows for parsing of cookies and populates the request object with values
    retrieved from cookies, in our case, information for the session. Next, we set
    up the session capabilities. This allows us to share information from request
    to request. In its default configuration, it uses in-memory storage to hold session
    information. This means that restarting your application will erase session information.
    If you''re hosting your visualization on a farm of machines, you''ll need to make
    use of an external data storage mechanism such as **MongoDB** or **Redis**. We
    pass in a secret key that is used in generating the `session` hash. It should
    be a random string. Using the `app.router` will instruct express to listen to
    route requests, which we''ll define in a second. Finally our `.html` and `.js`
    files are going to be in a directory called `public`, so we''ll instruct `express`
    to serve out the contents of that directory as static resources.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`bodyParser` 允许 `express` 对发送到服务器的请求体进行简单的解析。下一行，设置了 `cookieParser`。与 `bodyParser`
    类似，这允许解析 cookies 并将从 cookies 中检索到的值填充到请求对象中，在我们的案例中，是会话信息。接下来，我们设置了会话功能。这允许我们从一个请求到另一个请求共享信息。在其默认配置中，它使用内存存储来持有会话信息。这意味着重新启动您的应用程序将清除会话信息。如果您在一批机器上托管您的可视化，您将需要使用外部数据存储机制，如**MongoDB**
    或 **Redis**。我们传递了一个密钥，该密钥用于生成 `session` 哈希。它应该是一个随机字符串。使用 `app.router` 将指示 express
    监听路由请求，我们将在一秒钟内定义这些请求。最后，我们的 `.html` 和 `.js` 文件将位于一个名为 `public` 的目录中，因此我们将指示 `express`
    作为静态资源提供该目录的内容。'
- en: 'We now want to make use of the OAuth library. This can be done with a function
    as shown in the following code:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们想使用 OAuth 库。这可以通过以下代码中的函数完成：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We create an OAuth object associated with Twitter. We give the two end-points,
    and then the consumer key and consumer secret which we received from Twitter earlier.
    The requirement to embed the consumer secret for OAuth 1.0a is why client-side
    code cannot be used to retrieve information from Twitter. The consumer secret
    cannot be leaked to outsiders by sending it to the client. `1.0A` is passed in
    as the version of OAuth; no authorization callback is required so `null` is given
    as the sixth parameter. The final parameter is the signature method: Twitter uses
    `HMAC-SHA1`.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个与 Twitter 关联的 OAuth 对象。我们给出了两个端点，然后是之前从 Twitter 收到的消费者密钥和消费者密钥。OAuth
    1.0a 需要嵌入消费者密钥这就是为什么不能使用客户端代码从 Twitter 检索信息的原因。消费者密钥不能泄露给外人，因为它会被发送到客户端。`1.0A`
    作为 OAuth 的版本；不需要授权回调，所以第六个参数为 `null`。最后一个参数是签名方法：Twitter 使用 `HMAC-SHA1`。
- en: 'Next, we''ll set up a route in the Express application to request the OAuth
    tokens from Twitter:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们在 Express 应用程序中设置一个请求 Twitter OAuth 令牌的路由：
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Here, we hook up the `/requestOAuth` route to first request an OAuth token,
    and then use that to redirect the users to the sign in page on Twitter. We build
    an anonymous function and pass that into OAuth, because node is highly asynchronous.
    The callback model allows the main node thread to serve another request, while
    waiting for Twitter to get back to it with OAuth tokens. Once we have the OAuth
    tokens, we save them in a session state for use in the next step, and redirect
    to the Twitter authorization page.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将 `/requestOAuth` 路由首先请求一个 OAuth 令牌，然后使用该令牌将用户重定向到 Twitter 的登录页面。我们构建了一个匿名函数并将其传递给
    OAuth，因为 node 是非常异步的。回调模型允许主线程在等待 Twitter 回复 OAuth 令牌的同时服务于另一个请求。一旦我们有了 OAuth
    令牌，我们将其保存在会话状态中以供下一步使用，并将用户重定向到 Twitter 授权页面。
- en: 'Twitter will redirect the user once they have authenticated to the URL we defined
    when setting up the application. In our case, this will be served by the route
    `/receiveOAuth`, as shown in the following code:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Twitter 将在用户完成认证后重定向到我们设置应用程序时定义的 URL。在我们的案例中，这将由路由 `/receiveOAuth` 服务，如下面的代码所示：
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This code takes the OAuth tokens passed back by Twitter's `redirect`, and performs
    the final step which is looking up the access tokens. Once we have these access
    tokens, they can be used to call the API—here done in the `GetRetweets` function.
    We'll save all the tokens generated in the session so that user's don't have to
    continually grant access to the Twitter API.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码获取了 Twitter 的 `redirect` 返回的 OAuth 令牌，并执行了最后一步，即查找访问令牌。一旦我们有了这些访问令牌，它们就可以用来调用
    API——在这里在 `GetRetweets` 函数中完成。我们将会在会话中保存生成的所有令牌，这样用户就不用不断地授权给 Twitter API。
- en: Tired of tokens yet? You should be! This exchange to set up OAuth 1.0a uses
    an awful lot of tokens. Fortunately, we're done with tokens and OAuth. Now we
    can get onto building a visualization with Twitter data!
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 是否对令牌感到厌倦了呢？你应该感到厌倦！设置OAuth 1.0a的这次交换使用了很多令牌。幸运的是，我们已经完成了令牌和OAuth的设置。现在我们可以开始用Twitter数据构建可视化了！
- en: Visualization
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可视化
- en: There is a whole bunch of APIs made available to us by Twitter. We should start
    perhaps by inventing something we would like to visualize and then decide if the
    data is available and how we would show it. I'm curious about which of the people
    I follow tweet the most. Some accounts such as `@kellabyte` seem to always be
    tweeting and others like @ericevans hardly at all.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Twitter向我们提供了一系列API。我们应该或许先发明一些我们想要可视化的东西，然后决定数据是否可用以及我们如何展示它。我对我所关注的哪些人发推文最多感到好奇。一些账户，比如`@kellabyte`，似乎总是在发推文，而像@ericevans的其他账户几乎不发推文。
- en: Server side
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 服务器端
- en: 'Let''s start by getting the data on the server side. In node.js, I set up a
    new route using the following code:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先从服务器端获取数据开始。在node.js中，我使用以下代码设置了一个新路由：
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: First, we check to make sure that we have the appropriate tokens available in
    the session. If not then we redirect back to the `requestOAuth` page which will
    start up the whole OAuth workflow. Next, we set an initial cursor value. Twitter
    limits the number of results which come back from its services. This avoids dumping
    a million records out to the consumer, which is not something either party is
    likely to want. For the API call, we'll be using the limit set to 20\. However,
    Twitter also provides a continuation token which they call a cursor. By calling
    the service again with this token, the next page of results is returned. An initial
    value of `-1` gives the first page. The cursor along with all the required tokens
    is passed into `receiveUserListPage`, which will perform the actual lookups.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们检查确保在会话中拥有合适的令牌。如果没有，则重定向回`requestOAuth`页面，这将启动整个OAuth工作流程。接下来，我们设置一个初始的游标值。Twitter限制从其服务中返回的结果数量。这避免了向消费者推送一百万条记录，这双方都不太可能想要。对于API调用，我们将使用设置为20的限制。然而，Twitter还提供了一个他们称之为游标继续令牌。通过使用这个令牌再次调用服务，将返回下一页的结果。初始值为`-1`，表示第一页。游标以及所有必需的令牌传递给`receiveUserListPage`，该方法将执行实际的查找操作。
- en: Tip
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Rate Limits**'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**速率限制**'
- en: Twitter limits the number of request you can send to their service. When developing
    a visualization, you may bump into these limits. Wait for 15 minutes and try again.
    In production, try caching your data so you don't have to query Twitter so frequently.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Twitter限制了您可以发送到他们服务的请求数量。在开发可视化时，您可能会遇到这些限制。等待15分钟，然后再次尝试。在生产环境中，尝试缓存您的数据，这样您就不必频繁地查询Twitter。
- en: '`receiveUserListPage` looks like the following code:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`receiveUserListPage`看起来像以下代码：'
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We start off by getting a reference to the OAuth library, then we use the current
    cursor and the current `user_id` to query Twitter. The API call we're using returns
    a set of 20 users from the list of people who I follow. The results are returned
    as a string so we parse them into an object using `JSON.parse`. If the resulting
    object contains a field called `errors`, then we've likely hit the rate limit,
    so we return everything we've pull down so far. Because the rate limit is only
    `15` for this API call, if you follow more than 300 people, you'll hit the limit.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先获取OAuth库的引用，然后使用当前的游标和当前的`user_id`来查询Twitter。我们使用的API调用返回了我关注的名单上的一组20个用户。结果以字符串形式返回，因此我们使用`JSON.parse`将它们解析为对象。如果结果对象包含一个名为`errors`的字段，那么我们很可能遇到了速率限制，因此我们返回到目前为止我们所获取的所有内容。因为对于这个API调用，速率限制只有`15`，如果你关注超过300人，你将遇到限制。
- en: If we have results, we append them to our current set of data. We use the underscore's
    `map` function to select only two of the fields from. This saves on bandwidth
    and makes debugging easier, as the objects returned from Twitter are very heavyweight
    with dozens of useless fields. If `next_cursor` is equal to `0`, then it means
    that we've reached the end of the list and can return the current set of names
    and counts. Otherwise we recourse into the function, giving it the new cursor,
    set of names, and items. Once we hit a case where we can return, we call `projectResults`
    which sends the 10 users with the most tweets to the client formatted as JSON.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们有结果，我们将把它们添加到我们当前的数据集中。我们使用Underscore的`map`函数只选择两个字段。这节省了带宽，使调试更容易，因为从Twitter返回的对象带有几十个无用的字段，非常沉重。如果`next_cursor`等于`0`，那么这意味着我们已经到达列表的末尾，可以返回当前的名字和计数集合。否则我们重新进入函数，给它新的游标，名字集合和项目。一旦我们遇到可以返回的情况，我们调用`projectResults`，将拥有最多推文的10个用户以JSON格式发送给客户端。
- en: Tip
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 顶端
- en: '**Underscore.js**'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**Underscore.js**'
- en: The underscore JavaScript library is a small library that makes working with
    arrays far easier. It adds set functions such as `union` and `intersect,` as well
    as functional programming concepts such as map and reduce. It can be downloaded
    from [http://underscorejs.org/](http:// http://underscorejs.org/).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Underscore JavaScript库是一个小型库，它使处理数组变得更容易。它添加了集合函数如`union`和`intersect`，以及映射和减少等功能编程概念。它可以从[http://underscorejs.org/](http://http://underscorejs.org/)下载。
- en: Client side
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 客户端
- en: The client side visualization code can be placed in the public directory that
    we previously directed Express to serve out as static content.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端可视化代码可以放在我们之前指导Express作为静态内容服务的公共目录中。
- en: 'I''d like to show the most active tweeters visually. A nice way of doing this
    is to use a bubble chart, and make the bubbles bigger the more tweets they have.
    Let''s build up the code:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我想要直观地展示最活跃的推文者。一种很好的方法是使用气泡图，气泡越大，他们的推文就越多。让我们逐步构建代码：
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Much of this code will look familiar now that you know a bit about d3\. The
    data array which is passed in is what is retrieved from our node service. First,
    we create an SVG element on the page of an arbitrary size. Then, we set up a color
    scale so that our visualization will be nicely colored. The `calculateBubbles`
    function is a helper function which will calculate the locations of the bubbles.
    It augments our data array with the x and y coordinates for the circle as well
    as its radius. We won't get into that here, but the code is available on GitHub.
    For each of the top tweeters we create a bubble. We color it using the color scale,
    and set the location using the pre-calculated values from the data array. Initially,
    we set the radius to `0`, but then we use a transition to grow the circles for
    a nice loading effect.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如今当你对d3有所了解后，这些代码看起来会很熟悉。传入的数据数组是我们从节点服务中检索到的。首先，我们在页面上创建一个任意的SVG元素。然后，我们设置一个颜色比例尺，以便我们的可视化效果颜色悦目。`calculateBubbles`函数是一个辅助函数，将计算气泡的位置。它用圆的x和y坐标以及半径增强我们的数据数组。我们在这里不会深入讲解那个，但代码可以在GitHub上找到。我们对每个顶级推文者创建一个气泡。我们使用颜色比例尺为其着色，并使用数据数组中预计算的值设置位置。最初，我们设置半径为`0`，然后我们使用过渡效果使圆形在加载效果中逐渐变大。
- en: For each one of the circles, we want to label what the circle represents. This
    is done by adding a text element at the center of the circle.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个圆形，我们想要标识圆形代表的内容。这是通过在圆的中心添加文本元素来实现的。
- en: 'The resulting graph, based on the 10 most active people I follow, looks like
    the following figure:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我所关注的10个最活跃的人生成的图表如下所示：
- en: '![Client side](img/6542OS_05_05.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![客户端](img/6542OS_05_05.jpg)'
- en: Every one of these people has tweeted over 35,000 times.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这些人中的每一个人都发过超过35,000条推文。
- en: Summary
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: You should now be able to set up a new application to query Twitter, create
    the proper OAuth tokens using the OAuth library on node.js, and build a bubble
    chart. The Twitter API is rich and has many more potential visualizations lurking
    in it. I'm sure that we could come up with a couple of dozen potential visualizations.
    There is no better way to learn than through experimenting with the API, so don't
    be afraid to get messy.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你应该能够设置一个新的应用程序来查询Twitter，使用node.js上的OAuth库创建正确的OAuth令牌，并建立一个气泡图。Twitter API丰富且具有许多潜在的可视化效果。我相信我们可以提出几十个潜在的可视化效果。没有比通过实验API更好的学习方法了，所以不要害怕弄脏。
- en: In the next chapter we'll take a look at visualizations of data on the popular
    question and answer site, Stack Overflow. Their API is largely an open one which
    doesn't require authentication for most queries, so we should have a brief reprieve
    from having to use OAuth and even node.js.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将查看一个流行的问答网站Stack Overflow上的数据可视化。该API对大多数查询是开放的，并不需要身份验证，因此我们可能暂时不需要使用OAuth甚至node.js。
