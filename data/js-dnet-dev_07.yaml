- en: Chapter 7. JavaScript Design Patterns
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章 JavaScript设计模式
- en: 'In every mid- to large-sized projects, good architecture and design always
    plays an important role in handling complex scenarios and increasing the maintainability
    of the product. Design patterns are best practices developed and used by professional
    developers to solve a particular problem. If a design pattern has been used in
    the application for specific scenarios, it evades many of the issues one could
    face during development or when running the application in production. Design
    patterns solve the problems by providing the guidelines which are industry best
    practices to handle problems or to achieve or implement any requirement. A singleton
    pattern, for example, is used to create only one instance that is shared among
    all, whereas a prototype is used to extend the existing functionality of an object
    by adding more properties and methods and so on. Design patterns are classified
    into three categories, namely creational, structural, and behavioral patterns.
    The topics which we will cover in this chapter are as follows:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在每一个中等到大型的项目中，良好的架构和设计总是在处理复杂场景和提高产品的可维护性方面发挥重要作用。设计模式是开发者和专业开发人员为解决特定问题而开发和使用的最佳实践。如果一个设计模式已经用于应用程序的特定场景，它可以在开发过程中或生产环境中运行时避免许多问题。设计模式通过提供行业最佳实践的指导来解决问题或实现需求。例如，单例模式用于创建一个被所有对象共享的唯一实例，而原型模式则通过添加更多属性和方法来扩展对象现有功能。设计模式分为三类，即创建型、结构型和行为型模式。本章我们将覆盖的主题如下：
- en: '**Creational patterns**: The following are the creational patterns we will
    discuss in this chapter:'
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建型模式**：以下是本章我们将讨论的创建型模式列表：'
- en: Singleton pattern
  id: totrans-3
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单例模式
- en: Factory pattern
  id: totrans-4
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工厂模式
- en: Abstract factory pattern
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 抽象工厂模式
- en: Prototype pattern
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 原型模式
- en: '**Structural patterns**: The following are the list of structural patterns
    we will discuss in this chapter:'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**结构型模式**：以下是本章我们将讨论的结构型模式列表：'
- en: Adapter pattern
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 适配器模式
- en: Decorator pattern
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 装饰器模式
- en: Facade pattern
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外观模式
- en: Bridge pattern
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 桥接模式
- en: '**Behavioral patterns**: The following are the list of behavioral patterns
    we will discuss in this chapter:'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**行为型模式**：以下是本章我们将讨论的行为型模式列表：'
- en: Chain of responsibility
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 责任链模式
- en: Observer pattern
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 观察者模式
- en: Pub/sub pattern
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布/订阅模式
- en: Promises
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 承诺（Promises）
- en: Creational patterns
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建型模式
- en: Creational patterns are used for object instantiation. They are used in situations
    where the basic form of object creation could result in design problems or increase
    complexity to the design. In the following section, we will discuss all four creational
    patterns mentioned previously, and how to implement them in JavaScript.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 创建型模式用于对象实例化。它们用于对象创建的基本形式可能导致设计问题或增加设计复杂性的情况。在下一节中，我们将讨论前面提到的所有四个创建型模式，以及如何在JavaScript中实现它们。
- en: Singleton design pattern
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 单例设计模式
- en: 'Singleton is the most widely used pattern. It is used in scenarios where we
    need to share the same instance of a class or function (in terms of JavaScript)
    between different objects. It ensures that there is only one instance of particular
    object which can be accessed globally at any point:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 单例是最常用的模式。它用于需要在不同对象之间共享类或函数（就JavaScript而言）的同一实例的场景。它确保了特定对象的只有一个实例可以在任何时候全局访问：
- en: '![Singleton design pattern](img/00066.jpeg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![单例设计模式](img/00066.jpeg)'
- en: 'In a singleton pattern, the constructor should be private which restricts the
    user to create objects using a `new` keyword and exposes one method that creates
    an instance and verifies that only one instance exists. A simple example could
    be a logger object that writes the log to the browser''s console window:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在单例模式中，构造函数应该是私有的，这限制了用户使用`new`关键字创建对象，并暴露一个创建实例并验证只有一个实例存在的的方法。一个简单的例子可能是一个写日志到浏览器控制台窗口的日志对象：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Tip
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: In JavaScript (ES5 standard), classes are still represented through functions.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript（ES5标准）中，类仍然通过函数表示。
- en: In JavaScript, to implement a singleton, we can use closures. Closures are inner
    objects that have access to the private members of the function, such as accessing
    variables and methods defined within a parent function, and are accessible from
    closures.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，要实现单例，我们可以使用闭包。闭包是内部对象，它们可以访问函数的私有成员，例如访问在父函数内定义的变量和方法，并且可以从闭包中访问它们。
- en: Brackets `()` in the last statement are specified to assign the object returning
    to the logger variable rather than the function itself. This actually restricts
    the object from initializing through a `new` keyword.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 最后语句中的括号`()`用于将对象返回给日志变量，而不是函数本身。这实际上限制了通过`new`关键字初始化对象。
- en: 'In the preceding script, the function first returns the closure that has one
    `getInstance()` method, which actually checks the private member variable instance
    and if it is not initialized it calls the `initializeInstance()` method that returns
    another closure containing the `writeLog()` method. We can add more methods or
    variables separated by commas and they will be accessible with the logger object.
    Here is the modified version of the `initializeInstance()` method that has one
    more method, `showAlert()`, and a variable, `logEnabled`:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的脚本中，函数首先返回一个闭包，其中有一个`getInstance()`方法，该方法实际上检查私有成员变量instance，如果它未初始化，则调用`initializeInstance()`方法，该方法返回另一个包含`writeLog()`方法的闭包。我们可以添加更多方法或变量，用逗号分隔，它们将通过日志对象访问。以下是`initializeInstance()`方法的修改版本，其中有一个额外的方法`showAlert()`和一个变量`logEnabled`：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Factory pattern
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工厂模式
- en: 'The factory pattern delegates object instantiation to the centralized class.
    Instead of instantiating the object using a `new` keyword, we call the `factory`
    method that returns the type of the object requested:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 工厂模式将对象实例化委托给中心化的类。而不是使用`new`关键字实例化对象，我们调用返回请求对象类型的`factory`方法：
- en: '![Factory pattern](img/00067.jpeg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![Factory pattern](img/00067.jpeg)'
- en: 'Here is an example of the `LoggerFactory` that creates the logger instances
    based on the logger type:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是基于日志类型创建日志实例的`LoggerFactory`示例：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In our example, the factory class is `LoggerFactory` that creates instances
    of `ConsoleLogger` and `AlertLogger` objects. `LoggerFactory` exposes a `createLogger()`
    method that takes the type of logger as a parameter to determine which object
    needs to be instantiated. Each type of logger has its own `logMessage()` method
    to either log on the console window or show an alert message.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，工厂类是`LoggerFactory`，它创建`ConsoleLogger`和`AlertLogger`对象的实例。`LoggerFactory`暴露一个`createLogger()`方法，该方法接受日志类型作为参数，以确定需要实例化哪个对象。每种日志类型都有自己的`logMessage()`方法，用于在控制台窗口上记录日志或显示警告消息。
- en: Abstract factory pattern
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 抽象工厂模式
- en: 'The abstract factory pattern encapsulates the collection of factories to create
    instances. The instance exposes the same method that can be invoked by the factory.
    The following is an example of two factories, `ShapeFactory` and `CarFactory`
    and each one returns two types of instance. `ShapeFactory` returns `Circle` and
    `Square` instances whereas `CarFactory` returns `HondaCar` and `NissanCar` instances.
    Each of the instance have the same method `make()` that can be called for any
    instance:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 抽象工厂模式封装了一系列工厂以创建实例。实例暴露相同的方法，可以被工厂调用。以下是两个工厂的示例，`ShapeFactory`和`CarFactory`，每个工厂都返回两种类型的实例。`ShapeFactory`返回`Circle`和`Square`实例，而`CarFactory`返回`HondaCar`和`NissanCar`实例。每个实例都有相同的方法`make()`，可以对任何实例进行调用：
- en: '![Abstract factory pattern](img/00068.jpeg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![Abstract factory pattern](img/00068.jpeg)'
- en: 'Here is the code for `ShapeFactory`:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`ShapeFactory`的代码：
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The following is the code for `CarFactory` that creates instances of Honda
    and Nissan cars:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是创建Honda和Nissan汽车实例的`CarFactory`代码：
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We call the `execute` method on a button click event which creates the instances
    and holds them in an array. Eventually the objects `make()` method will be executed
    that draws the circle on a HTML canvas and writes messages on the console. As
    in JavaScript, we cannot define abstract methods; we have to explicitly define
    the same method, such as `make()` in our case that completes our abstract factory
    pattern:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在按钮点击事件上调用`execute`方法，该方法创建实例并将它们保存在数组中。最终，对象的`make()`方法将被执行，在HTML画布上绘制圆并在控制台上写入消息。与JavaScript一样，我们不能定义抽象方法；我们必须明确定义相同的方法，例如在我们的案例中完成的抽象工厂模式中的`make()`：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here is the HTML code containing a canvas and a button:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是包含画布和按钮的HTML代码：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The output will be as follows on a button click event. The circle will be drawn
    and two messages will be printed on the console window for Honda and Nissan car
    objects:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在按钮点击事件上，输出将如下所示。将绘制一个圆并在控制台窗口上打印Honda和Nissan汽车对象的两次消息：
- en: '![Abstract factory pattern](img/00069.jpeg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![Abstract factory pattern](img/00069.jpeg)'
- en: Prototype pattern
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 原型模式
- en: 'The prototype pattern is used to create instances that are clones of existing
    instances. It is used in scenarios where we need to auto configure the object
    with some specific values or properties and users don''t have to explicitly define:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 原型模式用于创建现有实例的克隆实例。它用于需要自动为对象配置某些特定值或属性的场景，用户无需显式定义：
- en: '![Prototype pattern](img/00070.jpeg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![原型模式](img/00070.jpeg)'
- en: 'The following is the code that implements the prototype pattern:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是实现原型模式的代码：
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Structural patterns
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结构模式
- en: Structural patterns are used to simplify the relationships between objects.
    In the following sections, we will discuss all four structural patterns mentioned
    previously, and how to implement them in JavaScript.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 结构模式用于简化对象之间的关系。在以下部分，我们将讨论前面提到的所有四种结构模式，以及如何在JavaScript中实现它们。
- en: Adapter pattern
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 适配器模式
- en: 'The adapter pattern is used in situations in which our application is dependent
    on any object whose properties and methods change frequently and we want to avoid
    modifying the code to use them. The adapter pattern allows us to wrap the interface
    of a specific object as what the client expects and rather than changing the whole
    implementation we can just call the wrapper object which contains the code as
    per the modified version. This wrapper object is called an adapter. Let''s have
    a look at a basic example that uses the `PersonRepository` to save the `person`
    object by performing an Ajax request:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 适配器模式用于应用程序依赖于属性和方法频繁变化的对象的情况，我们想避免修改使用它们的代码。适配器模式允许我们将特定对象的接口包装为我们期望的接口，而无需改变整个实现，我们只需调用包含修改后版本代码的包装器对象。这个包装器对象称为适配器。让我们来看一个使用`PersonRepository`通过执行Ajax请求保存`person`对象的简单示例：
- en: '![Adapter pattern](img/00071.jpeg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![适配器模式](img/00071.jpeg)'
- en: 'The following is the old interface of the `PersonRepository` object:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`PersonRepository`对象的旧接口：
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The preceding interface has one `SavePerson()` method that takes three parameters:
    `name`, `email`, and `phoneNo`. Here is the original code for using the `SavePerson()`
    method:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个接口有一个`SavePerson()`方法，该方法接受三个参数：`name`、`email`和`phoneNo`。以下是使用`SavePerson()`方法的原始代码：
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Suppose this interface has changed and the new person repository interface accepts
    the `person` JSON object, instead of passing values as parameters. One way is
    to modify the function here itself and encapsulate these parameters in the JSON
    object and send. Alternatively, we can implement an adapter pattern which contains
    an adapter function that takes three parameters, calls the new `PersonRepository`
    object and passes the JSON object.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 假设这个接口发生了变化，新的人员仓库接口接受`person` JSON对象，而不是通过参数传递值。一种方法是直接在这里修改函数，将这些参数封装在JSON对象中并发送。另一种方法是实现一个适配器模式，该模式包含一个适配器函数，该函数接受三个参数，调用新的`PersonRepository`对象并传递JSON对象。
- en: 'The following is the new interface of `PersonRepository`:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`PersonRepository`的新接口：
- en: '[PRE11]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Here is the adapter pattern that encapsulates the parameters in a JSON object
    and calls the new `PersonRepository` interface:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个将参数封装在JSON对象中并调用新`PersonRepository`接口的适配器模式：
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Here is the modified version that calls the adapter pattern rather than calling
    the old `PersonRespository` interface:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是调用适配器模式而不是调用旧的`PersonRespository`接口的修改版本：
- en: '[PRE13]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Decorator pattern
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 装饰器模式
- en: 'The decorator pattern is used to change the behavior of the object at runtime.
    Decorators are like annotation attributes in C#. Likewise, we can add multiple
    decorators on one object as well. The decorator pattern can be implemented by
    creating a decorator object and associating that with the target object whose
    behavior needs to be changed:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 装饰器模式用于在运行时改变对象的行为。装饰器在C#中类似于注解属性。同样，我们也可以在一个对象上添加多个装饰器。装饰器模式可以通过创建一个装饰器对象并将该对象与需要改变行为的目标对象关联来实现：
- en: '![Decorator pattern](img/00072.jpeg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![装饰器模式](img/00072.jpeg)'
- en: 'The following is an example of a decorator that adds the `Tax` and `Courier`
    charge decorators on the `Product` object:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个添加了`Tax`和`Courier`费用装饰器的`Product`对象的示例：
- en: '[PRE14]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The `product` object takes three parameters, `code`, `quantity`, and `price`,
    and calculates the total price based on `quantity` and `price`. `AddTax()` and
    `AddCourierCharges()` are two decorator objects product object followed with a
    parameter to apply specific calculation on change the total price. The `AddTax()`
    method applies the tax based on the value supplied, whereas `AddCourierCharges()`
    will add the courier charge amount to the total price. The `Execute()` method
    will be called immediately when the page renders and displays the following output
    in the console window:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`product`对象接受三个参数，`code`、`quantity`和`price`，根据`quantity`和`price`计算总价。`AddTax()`和`AddCourierCharges()`是两个装饰器对象，
    followed product object with a parameter to apply specific calculation on change
    the total price. The `AddTax()` method applies the tax based on the value supplied,
    whereas `AddCourierCharges()` will add the courier charge amount to the total
    price. The `Execute()` method will be called immediately when the page renders
    and displays the following output in the console window:'
- en: '![Decorator pattern](img/00073.jpeg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![装饰器模式](img/00073.jpeg)'
- en: Facade pattern
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 外观模式
- en: The façade pattern is used to simplify various interfaces or subsystems into
    one unified interface. It simplifies things to the user and rather than understanding
    the complexities of different subsystems, the user can call the `façade` interface
    to perform a specific operation.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 外观模式用于将各种接口或子系统简化为一个统一的接口。它简化了事物对用户来说，而不是理解不同子系统的复杂性，用户可以调用`façade`接口来执行特定操作。
- en: 'Let''s see the following example, which has three methods to load permissions,
    the user profile, and the user chat window on successful login. It has three interfaces,
    and with façade we can simplify it to one unified interface. This allows the user
    to call `UserFacade` only once if the login is successful and it will load the
    permissions, user chat, and user profile from one interface:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看以下示例，它有三个方法来加载登录成功后的权限、用户资料和用户聊天窗口。它有三个接口，通过外观我们可以简化为一个统一的接口。这允许用户如果登录成功，只需调用一次`UserFacade`，它将从一个接口加载权限、用户聊天和用户资料：
- en: '![Facade pattern](img/00074.jpeg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![责任链模式](img/00074.jpeg)'
- en: '[PRE15]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Bridge pattern
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 桥接模式
- en: 'The bridge pattern is used to decouple the abstraction from its implementation
    and make concrete implementation independent from the interface. This is achieved
    by providing a bridge between the interface and the concrete implementer:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 桥接模式用于将抽象与其实现解耦，并使具体实现与接口独立。这是通过在接口和具体实现者之间提供一个桥梁来实现的：
- en: '![Bridge pattern](img/00075.jpeg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![桥接模式](img/00075.jpeg)'
- en: 'The following code shows the bridge pattern implementation:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码展示了桥接模式的实现：
- en: '[PRE16]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The objective of the preceding example is to separate the notification types
    (`Invitation` and `Reminder`) from the notification gateway (`Email` and `SMS`).
    So any notification can be sent through any gateway and can handle any notification
    that separates the gateway to the notification types and disable the bounding
    with the type of the notification.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个示例的目标是将通知类型（`Invitation`和`Reminder`）与通知网关（`Email`和`SMS`）分离。因此，任何通知都可以通过任何网关发送，并且可以处理任何通知，将网关与通知类型分离，并禁用与通知类型的绑定。
- en: Behavioral pattern
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行为型模式
- en: Behavioral patterns are used to delegate responsibilities between objects. In
    the following section, we will discuss all four behavioral patterns mentioned
    previously, and how to implement them in JavaScript.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 行为型模式用于在对象之间委派责任。在以下部分，我们将讨论前面提到的所有四种行为型模式，以及如何在JavaScript中实现它们。
- en: Chain of responsibility pattern
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 责任链模式
- en: 'The chain of responsibility pattern provides a chain of objects executed in
    order as they are chained to fulfill any request. A good example for ASP.NET developers
    is the OWIN pipeline that chains the components or OWIN middleware together and
    is based on the appropriate request handler being executed:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 责任链模式提供了一串按顺序执行的对象链，它们被串联起来以满足任何请求。ASP.NET开发者一个很好的例子是OWIN管道，它将组件或OWIN中间件串联在一起，基于适当的请求处理器被执行：
- en: '![Chain of responsibility pattern](img/00076.jpeg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![责任链模式](img/00076.jpeg)'
- en: 'Let''s look into a very basic example that executes the chain of objects and
    displays the table for 2, 3 and 4:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个非常基本的示例，它执行对象链并显示2、3和4的表格：
- en: '[PRE17]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Let''s get into a more practical example which takes the amount and checks
    the budget owner in the objects chained in the pipeline. The following code have
    a main handler object that takes the budget amount and the budget owner to set
    the budget amount for `Line Manager`, `Head of Department`, `CTO`, and `CEO`.
    Finally, we can set the main entry point in the chain by calling the `handler1`
    method, which first checks whether the amount is under the line manager''s budget,
    then the head of department''s, then the CTO''s, and finally the CEO''s:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进入一个更实际的示例，该示例获取金额并在管道中的对象中检查预算所有者。以下代码有一个主处理对象，它接受预算金额和预算所有者，以设置`Line Manager`、`Head
    of Department`、`CTO`和`CEO`的预算金额。最后，我们可以通过调用`handler1`方法设置链中的主入口点，该方法首先检查金额是否在
    line manager 的预算范围内，然后是部门经理的、CTO的，最后是CEO的：
- en: '[PRE18]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'And the following is the output:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![Chain of responsibility pattern](img/00077.jpeg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![责任链模式](img/00077.jpeg)'
- en: Observer pattern
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 观察者模式
- en: '[PRE19]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In the above example, we have taken a scenario that translates the text for
    all the languages added as observer objects. We extended the `Observer` object
    and defined three methods, namely `addObserver()`, `removeObserver()`, and `notify()`
    through a prototype. Adding methods through a prototype consumes less memory and
    each method is shared among all instances. These methods are created once and
    then inherited by each instance. On the other hand, methods that are defined inside
    the constructor function are created every time the new instance is created and
    consume more memory.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述示例中，我们采取了一个场景，为所有添加为观察者对象的语言翻译文本。我们扩展了`Observer`对象，并通过原型定义了三个方法，分别是`addObserver()`、`removeObserver()`和`notify()`。通过原型添加方法可以节省内存，每个方法都被所有实例共享。这些方法一次性创建，然后被每个实例继承。另一方面，在构造函数函数内定义的方法每次创建新实例时都会被创建，消耗更多内存。
- en: The `addObserver()` method is used to add any object in an observer list, `removeObserver()`
    is used to remove a specific object from observer list, and `notify()` executes
    the observer's `update()` method.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`addObserver()`方法用于将任何对象添加到观察者列表中，`removeObserver()`用于从观察者列表中移除特定对象，`notify()`执行观察者的`update()`方法。'
- en: '`EnglishTranslator`, `FrenchTranslator` and `ArabicTranslation` are objects
    that have implemented the `update()` method which is called when `notify()` is
    executed. On page load we have registered all the translator objects as observers
    and provided a textbox with a button through which the user can type any text
    on the textbox and on a button click event it will call the observer''s `notify()`
    method that eventually calls the registered observer''s `update()` method.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`EnglishTranslator`、`FrenchTranslator`和`ArabicTranslation`是实现了`update()`方法的对象，当`notify()`执行时会调用该方法。在页面加载时，我们已经将所有翻译器对象注册为观察者，并提供了一个文本框和一个按钮，用户可以在文本框中输入任何文本，在按钮点击事件时，它会调用观察者的`notify()`方法，最终调用注册观察者的`update()`方法。'
- en: Pub/sub pattern
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发布/订阅模式
- en: '[PRE21]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: In the preceding example, we have one `PubSub` object that provides three methods
    to `subscribe`, `unsubscribe`, and `publish` events. The `Subscribe()` method
    is used to subscribe for any event and takes two parameters, the event name and
    function, and adds them to the array for a specific event name. If the event name
    does not exist a new array will be initialized for that event name, otherwise
    the existing instance will be retrieved to add the item. The user can register
    as many events as they want, by passing the event name and the anonymous function
    body that will be executed when the event is published. To publish events, the
    `publish()` method can be called that takes the event name and the data you want
    to pass to the corresponding function, which has been executed.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的示例中，我们有一个`PubSub`对象，它提供了三个方法：`subscribe`、`unsubscribe`和`publish`，用于处理事件。`Subscribe()`方法用于订阅任何事件，并接受两个参数：事件名称和函数，并将它们添加到特定事件名称的数组中。如果事件名称不存在，则会为该事件名称初始化一个新的数组；否则，将检索现有实例以添加项目。用户可以通过传递事件名称和匿名函数体来注册尽可能多的事件，当事件发布时将执行该函数体。要发布事件，可以调用`publish()`方法，该方法接受事件名称和要传递给相应函数的数据，该函数将被执行。
- en: Promises
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 承诺
- en: 'Promises are one of the most popular patterns extensively used in JavaScript
    APIs and frameworks to make asynchronous calls simpler. An asynchronous operation
    in JavaScript needs to have a callback function register, which invokes when the
    value is returned. With promises, when you make any asynchronous call, it immediately
    returns a promise and provides objects such as `then` and `done` to define a function
    when the resultant value is resolved. In the real world, promises are just like
    a token or a receipt for the food you order in a fast food restaurant, and that
    receipt guarantees you to have the food delivered when it is ready. Promises are
    tokens that confirm you get a response to a specific request:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 承诺是JavaScript API和框架中广泛使用的一种最流行的模式，用于使异步调用更简单。在JavaScript中，异步操作需要有一个回调函数注册，当值返回时调用。使用承诺时，当你进行任何异步调用，它立即返回一个承诺，并提供诸如`then`和`done`的对象来定义当结果值解析时执行的函数。在现实世界中，承诺就像在快餐店订购食物时得到的
    tokens 或收据，那个收据保证你在食物准备好时能够获得食物。承诺是确认你针对特定请求获得响应的 tokens：
- en: '![Promises](img/00080.jpeg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![承诺](img/00080.jpeg)'
- en: 'In JavaScript, promises are widely used by APIs and frameworks such as AngularJS,
    Angular 2, and more. Let''s have a look at the following example that implements
    the promise pattern:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，承诺（promises）被广泛用于API和框架，如AngularJS、Angular 2等。让我们来看一下以下实现承诺模式的示例：
- en: '[PRE23]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '**In progress**: When the `resolve` method is called the state will be set
    to `in progress`. This state will persist until we register the handlers for `done`
    and `failed` scenarios.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**进行中**：当调用`resolve`方法时，状态将被设置为`in progress`。这个状态将持续，直到我们为`done`和`failed`场景注册处理程序。'
- en: '**Done**: When `done` is invoked, the status will be set to `done`.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**已完成**：当调用`done`时，状态将被设置为`done`。'
- en: '**Failed**: When any exception occurs, the status will be set to `fail`.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**失败**：当发生任何异常时，状态将被设置为`fail`。'
- en: 'The following is the modified version of the `orderFood` example:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对`orderFood`示例的修改版本：
- en: '[PRE25]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Summary
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter, we have learned the importance of design patterns in small-to-large
    scale applications and how we can use them effectively to resolve specific problems.
    We have covered four types of design patterns for each category, such as when
    creating objects, structuring objects, and adding a behavioral change or states
    to objects. There are various more design patterns available and documented, which
    can be referred to here: [http://www.dofactory.com/javascript/design-patterns](http://www.dofactory.com/javascript/design-patterns).'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经学习了设计模式在小到大型应用程序中的重要性，以及我们如何有效地使用它们来解决特定问题。我们已经涵盖了每个类别的四种设计模式，例如创建对象、结构化对象以及向对象添加行为变化或状态。还有许多其他的设计模式可供参考，具体可以参考这里：[http://www.dofactory.com/javascript/design-patterns](http://www.dofactory.com/javascript/design-patterns)。
- en: In the next chapter, we will learn about Node.js that runs JavaScript on the
    server side. We will see how web applications can be developed in Node.js using
    Visual Studio 2015 and explore some popular frameworks and view the engines it
    provides.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习Node.js，它可以在服务器端运行JavaScript。我们将了解如何使用Visual Studio 2015在Node.js中开发网络应用程序，并探索一些流行的框架以及它提供的视图引擎。
