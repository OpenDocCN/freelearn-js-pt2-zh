- en: Chapter 2. Reactive Programming… It's Alive!
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章．响应式编程…它是有生命的！
- en: As you learned in [Chapter 1](ch01.html "Chapter 1. Setup and Installation"),
    *Setup and Installation*, Meteor operates on a reactive programming model. This
    means that your client/browser isn't only concerned with displaying data, but
    it's also listening for changes to that data, so that it can "react" to those
    changes. These areas of data, where your browser looks for changes, are called
    **reactive contexts**.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在[第1章](ch01.html "第1章．设置和安装")中所学到的，*设置和安装*，Meteor采用响应式编程模型。这意味着您的客户端/浏览器不仅关心显示数据，还关心数据的变化，这样它就可以“反应”这些变化。这些寻找数据变化的数据区域称为**响应式上下文**。
- en: We will start our Lending Library application in earnest, laying the framework
    for future chapters, and using Meteor's built-in reactive contexts to track and
    propagate changes to our application to all clients who are listening.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将开始我们的借贷图书馆应用程序，为未来的章节打下基础，并使用Meteor内置的响应式上下文来跟踪和传播我们应用程序的变化，以便所有监听的客户端都能接收到。
- en: 'In this chapter, you will learn about:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习到：
- en: Creating your first real application
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建您的第一个真实应用程序
- en: Using reactive programming to track and automatically update changes
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用响应式编程来跟踪和自动更新变化
- en: Exploring and testing changes to your data from multiple browser windows
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从多个浏览器窗口探索和测试您数据的变化
- en: Creating the Lending Library
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建借贷图书馆
- en: There are two kinds of people in this world. Those who remember who they lent
    something to, and those who buy a *lot* of stuff twice. If you're one of the people
    that are on a first-name basis with your UPS delivery driver, this application
    is for you!
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这个世界上有两种人。那些记得他们借给谁东西的人，和那些买了很多东西两次的人。如果你和你的UPS送货司机很熟，这个应用程序就是为你准备的！
- en: Using Meteor, we're going to build a Lending Library. We'll keep track of all
    our stuff, and who we lent it to, so that the next time we can't remember where
    we put our linear compression wrench, we can simply look up who we last lent it
    to, and go get it back from them.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Meteor，我们将建立一个借贷图书馆。我们将跟踪我们所有的东西，以及我们借给了谁，这样下次我们记不起我们把线性压缩扳手放在哪里时，我们只需查找我们最后借给了谁，然后去向他们要回来。
- en: And when that same friend says, "are you sure you lent it to me?" we can say,
    "yeah, STEVE, I'm sure I lent it to you! I see you're enjoying your digital cable,
    thanks to my generous lending of said linear compression wrench. Why don't you
    go find it so I too can enjoy the benefits of digital cable in my own home?!"
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 而且当同一个朋友说，“你确定你借给我了吗？”我们可以回答，“是的，史蒂夫，我确定我借给了你！我看到你正在享受我的慷慨借出的线性压缩扳手带来的数字有线电视，为什么不自己去找它，这样我也可以在家享受数字有线电视的好处呢？！”
- en: Okay, okay, maybe Steve forgot too. Maybe he's a dirty liar and he sold your
    wrench to pay for his deep-fried Twinkies® habit. Either way, you've got your
    own custom Meteor app that gives you proof that you're not going crazy. And if
    he did sell it for deep fried carnival food, at least you can make him share his
    stash with you, while you watch the game at his house.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，好吧，也许史蒂夫也忘记了。也许他是个骗子，他把你的扳手卖了来支付他的炸Twinkies®习惯。无论如何，你都有自己的自定义Meteor应用程序，可以证明你并没有发疯。如果他确实为了油炸嘉年华食品而卖了它，至少你可以让他和他的存货一起分享，然后你可以在他家看比赛。
- en: Creating the base application
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建基本应用程序
- en: The first thing we want to do is create the base application, which we can then
    expand to fit our needs.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先要做的就是创建基本应用程序，然后我们可以根据需要进行扩展。
- en: 'Start by navigating to your applications folder. This can be anywhere, but
    as mentioned, we''ll be working out of `~/Documents/Meteor` as our root folder:'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，导航到您的应用程序文件夹。这可以随便放在哪里，但如前所述，我们将使用`~/Documents/Meteor`作为根文件夹：
- en: '[PRE0]'
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now we create our base folder structure for our Lending Library application:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们为我们的借贷图书馆应用程序创建基本文件夹结构：
- en: '[PRE1]'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'As usual, we''ll get instructions on how to get the application up and running.
    Let''s go ahead and try that, just to make sure that everything was created properly:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 像往常一样，我们将获得关于如何启动应用程序的说明。让我们先试试看，以确保一切都创建得正确：
- en: '[PRE2]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This navigates to the Lending Library folder `~/Documents/Meteor/LendLib` and
    runs the application.
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将导航到借贷图书馆文件夹`~/Documents/Meteor/LendLib`并运行应用程序。
- en: Open a browser and navigate to `http://localhost:3000/`. You should see the
    following screen:![Creating the base application](img/0823OS_02_01.jpg)
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个浏览器，导航到`http://localhost:3000/`。你应该看到以下屏幕：![创建基本应用程序](img/0823OS_02_01.jpg)
- en: 'Hello World just isn''t going to cut it, so let''s change that to Lending Library.
    Open `~/Documents/Meteor/LendLib/LendLib.html` in your favorite editor. Towards
    the top (line 9 or so), you''ll see the template HTML code snippet that''s responsible
    for our greeting. Go ahead and change `Hello World` to `Lending Library`:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你好世界是远远不够的，所以让我们把它改为借阅图书馆。在你的最喜欢的编辑器中打开`~/Documents/Meteor/LendLib/LendLib.html`。在顶部（第9行左右），你会看到负责我们问候的模板HTML代码片段。大胆把“Hello
    World”改为“Lending Library”：
- en: '[PRE3]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Save that change, and the page will refresh:![Creating the base application](img/0823OS_02_02.jpg)
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存那个更改，页面将刷新：![创建基本应用](img/0823OS_02_02.jpg)
- en: 'The welcome message wasn''t located in the HTML file, however. If you noticed,
    it''s found in a template function called greeting:'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 欢迎信息不在HTML文件中，然而。如果你注意到了，它在一个名为greeting的模板函数中找到：
- en: '[PRE4]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Let''s change that as well. Open `~/Documents/Meteor/LendLib/LendLib.js` and
    make the following change to the greeting template function:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们也来改一下。打开`~/Documents/Meteor/LendLib/LendLib.js`，将问候模板函数更改如下：
- en: '[PRE5]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Save the change, and your page will update:![Creating the base application](img/0823OS_02_03.jpg)
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存更改，你的页面将更新：![创建基本应用](img/0823OS_02_03.jpg)
- en: Creating a collection
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个集合
- en: Okay, you've just made a few small changes to static files, but what we really
    want to see is some dynamic, reactive programming, and some live HTML!
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 好，你刚刚静态文件做了一些小改动，但我们真正想看到的是些动态的、响应式的编程，还有实时的HTML！
- en: 'We need to attach a data source: something that will keep track of our items.
    Normally, this would be quite a process indeed, but Meteor makes it easy, supporting
    Minimongo (a light version of MongoDB) out of the box.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要附加一个数据源：一些可以跟踪我们项目的东西。通常，这确实是一个相当的过程，但Meteor使之变得简单，支持Minimongo（MongoDB的轻量级版本）内置。
- en: Tip
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'To learn more about NoSQL databases (and specifically MongoDB, the default
    database used inside Meteor) you can visit the following sites:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于NoSQL数据库（特别是MongoDB，Meteor内部默认使用的数据库）的信息，你可以访问以下网站：
- en: '[http://en.wikipedia.org/wiki/NoSQL](http://en.wikipedia.org/wiki/NoSQL)'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息请访问[http://en.wikipedia.org/wiki/NoSQL](http://en.wikipedia.org/wiki/NoSQL)
- en: '[http://www.mongodb.org/](http://www.mongodb.org/)'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息请访问[http://www.mongodb.org/](http://www.mongodb.org/)
- en: '[http://www.packtpub.com/books/all?keys=mongodb](http://www.packtpub.com/books/all?keys=mongodb)'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息请访问[http://www.packtpub.com/books/all?keys=mongodb](http://www.packtpub.com/books/all?keys=mongodb)
- en: 'Let''s create our collection. Inside `LendLib.js`, we want to add the following
    as the first line, and then save the change:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建我们的集合。在`LendLib.js`中，我们想添加以下作为第一行，然后保存更改：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This creates a new collection in MongoDB. Since it comes before anything else
    in the `LendLib.js` file, the collection is available for both the client and
    server to see. It is persistent, as we'll see in a moment, and once values are
    entered into it, they can be retrieved by any client accessing the page.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在MongoDB中创建一个新的集合。由于它在`LendLib.js`文件中的任何其他内容之前，所以集合可供客户端和服务器查看。如我们所见，它是持久的，一旦在其中输入值，任何访问页面的客户端都可以检索它们。
- en: To see this persisted object, we'll need to use the console for our web page.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看这个持久对象，我们需要使用我们网页的控制台。
- en: Fun with the browser console
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 浏览器控制台的乐趣
- en: The **browser console** is a debugging tool available in most modern browsers
    by default, or as an add-on through plugins.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**浏览器控制台**是大多数现代浏览器默认提供的调试工具，或者通过插件作为附加组件。'
- en: Tip
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: For a more in-depth tutorial on using the console in Chrome, check out [http://developer.chrome.com/extensions/tut_debugging.html.](http://developer.chrome.com/extensions/tut_debugging.html.)
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 要深入了解如何在Chrome中使用控制台，请查看[http://developer.chrome.com/extensions/tut_debugging.html](http://developer.chrome.com/extensions/tut_debugging.html)。
- en: Since we're using Chrome, the console is available by default. In a browser
    window pointing to `http://localhost:3000/` enter the shortcut key combination
    *[command]* + *[option]* + *i* or you can right-click anywhere on the page and
    select **Inspect Element**:![Fun with the browser console](img/0823OS_02_04.jpg)
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们使用的是Chrome，控制台默认可用。在一个指向`http://localhost:3000/`的浏览器窗口中，输入快捷键组合*[command]*
    + *[option]* + *i*，或者你可以在页面的任何地方右键点击并选择**检查元素**：![浏览器控制台的乐趣](img/0823OS_02_04.jpg)
- en: This will open our debugging tools. We now want to get into the console.
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将打开我们的调试工具。我们现在想要进入控制台。
- en: Click on the **Console** icon found at the extreme right of the debugging menu
    bar:![Fun with the browser console](img/0823OS_02_05.jpg)
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击调试菜单栏最右边的**控制台**图标：![浏览器控制台的乐趣](img/0823OS_02_05.jpg)
- en: You will now have a blinking cursor, and you're ready to check for our newly-minted
    collection!
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你现在将有一个闪烁的光标，你准备检查我们新创建的集合！
- en: 'Enter the following command in the console and hit *Enter*:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制台中输入以下命令并按*Enter*：
- en: '[PRE7]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You should get a returned object that says Meteor Collection:'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该得到一个返回的对象，说Meteor集合：
- en: '![Fun with the browser console](img/0823OS_02_06.jpg)'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![浏览器控制台的乐趣](img/0823OS_02_06.jpg)'
- en: Adding some data
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加一些数据
- en: 'This means that our changes were accepted, and we have a new persistent collection!
    It''s blank, but let''s do something about that:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们的更改已被接受，我们有一个新的持久集合！它是空的，但让我们做点什么来改变这一点：
- en: 'Enter the following commands in the browser console to create a couple of sample
    categories:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器控制台中输入以下命令以创建几个示例类别：
- en: '[PRE8]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: After each command, you'll get a GUID (something like `f98c3355-18ce-47b0-82cc-142696322a06`),
    which is Meteor's way of telling you that the item was saved properly. Being the
    natural skeptics that we are, we're going to check this.
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 每个命令执行后，你将获得一个GUID（类似于`f98c3355-18ce-47b0-82cc-142696322a06`），这是Meteor用来告诉你项目已正确保存的方式。我们作为天生的怀疑论者，将要检查这一过程。
- en: 'Enter the following command:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下命令：
- en: '[PRE9]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: You should get back an object, with an expandable icon next to it.
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该得到一个对象，旁边有一个可扩展的图标。
- en: Click on that icon to expand, and you should have the following:![Adding some
    data](img/0823OS_02_07.jpg)
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击那个图标来展开，你应该有以下内容：![添加一些数据](img/0823OS_02_07.jpg)
- en: We could similarly check for our tools collection by entering the command `lists.findOne({Category:"Tools"})`
    but we don't need to. This time we'll trust that Meteor entered it correctly.
    We do, however, want to check to see if the objects are persistent.
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们可以通过输入命令`lists.findOne({Category:"Tools"})`来同样检查我们的工具集合，但我们不需要这样做。这次我们将相信Meteor已经正确地输入了。然而，我们确实希望检查对象是否持久存在。
- en: Refresh the web page. Your console will clear, but the categories we entered
    have been saved in the persistent Meteor Collection, so we can check again to
    see if they're hanging around.
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 刷新网页。你的控制台将清空，但我们输入的类别已经保存在持久的Meteor集合中，因此我们可以再次检查它们是否还在。
- en: 'Enter the following command in the console:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制台中输入以下命令：
- en: '[PRE10]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This command finds all records in the `lists` collection and gives us a total
    count. If everything went according to plan, you should have gotten back a count
    of `2`.
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个命令查找`lists`集合中的所有记录，并给我们一个总数。如果一切按计划进行，你应该得到一个`2`的计数。
- en: We're on our way! We've created two categories, and we have one item in each
    category. We've also verified that the `lists` collection is being saved from
    session to session. Now, let's see how to display this in our page.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在前进！我们已经创建了两个类别，每个类别中有一个项目。我们还验证了`lists`集合正在从会话到会话中保存。现在，让我们看看如何在我们的页面上显示这个。
- en: Displaying collections in HTML
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在HTML中显示集合
- en: We're now going to see our collection come to life inside the HTML page we created
    when we initialized our project. This page will use templates, which are reactive,
    allowing us to have changes made to our collection appear instantly, without a
    page refresh. This type of reactive programming, where the DOM for the page can
    be instantly updated without a refresh is called **Live HTML**.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将看到我们在初始化项目时创建的HTML页面中的集合栩栩如生。这个页面将使用模板，它们是响应式的，允许我们的集合发生变化时，页面无需刷新即可立即更新。这种类型的响应式编程，页面DOM可以无需刷新即可立即更新，称为**Live
    HTML**。
- en: Tip
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'To read more about Live HTML, consult the Meteor documentation at the following
    URL:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于Live HTML的信息，请查阅以下网址的Meteor文档：
- en: '[http://docs.meteor.com/#livehtml](http://docs.meteor.com/#livehtml)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://docs.meteor.com/#livehtml](http://docs.meteor.com/#livehtml)'
- en: 'With `~/Documents/Meteor/LendLib/LendLib.html` still open, locate the `body`
    tag, and add a new **template** declaration:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`~/Documents/Meteor/LendLib/LendLib.html`仍然打开的情况下，找到`body`标签，并添加一个新的**模板**声明：
- en: '[PRE11]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This creates a new `div`, with the contents being filled by a `template partial`
    named `categories`.
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将创建一个新的`div`，其内容由名为`categories`的`template partial`填充。
- en: 'Now, at the very bottom of the page, let''s add the skeleton for the categories
    `template partial`:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在页面的最底部，让我们添加类别`template partial`的骨架：
- en: '[PRE12]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This won't change the appearance of the page, but we now have a `template partial`
    where we can list our categories.
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这不会改变页面的外观，但我们现在有一个`template partial`，我们可以列出我们的类别。
- en: 'Let''s put in our section title:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们放入我们的节标题：
- en: '[PRE13]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'And now let''s get our categories in there:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们把我们的类别放进去：
- en: '[PRE14]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This creates the categories `div`, where we can then go through and list all
    of our categories. If we only had one record to deal with, the code would look
    like this:'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这样在`div`中创建了类别，我们可以遍历并列出所有类别。如果我们只有一个记录要处理，代码将如下所示：
- en: '[PRE15]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'But we need to wrap this into a loop (in this case, an `#each` statement) so
    we get all the categories:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 但是我们需要将其包装在一个循环中（在这个例子中，一个`#each`语句），这样我们才能获取所有类别：
- en: '[PRE16]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Notice that we are telling the template "for each record in the lists collection"
    with our `{{#each lists}}` command, and then, "display the category" with `{{Category}}`.
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意我们正在告诉模板“对于`lists`集合中的每个记录”使用我们的`{{#each lists}}`命令，然后，“显示类别”使用`{{Category}}`。
- en: Save these changes, and look at the web page:![Displaying collections in HTML](img/0823OS_02_08.jpg)
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存这些更改，然后查看网页：![在HTML中显示集合](img/0823OS_02_08.jpg)
- en: It doesn't look much different. Yes, we have our header (**my stuff**), but
    where are the categories we just created our `template` for?
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 看起来并没有太大不同。是的，我们有我们的头部（**我的东西**），但是我们刚刚创建的模板的类别在哪里？
- en: There's one more step we need to complete in order for the categories to show
    up. Currently, the template we just created isn't pointed towards anything. In
    other words, we have a lists collection, and we have a template, but we don't
    have the underlying JavaScript function that hooks them together. Let's take care
    of that.
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了让类别显示出来，我们还需要完成一步。目前，我们刚刚创建的模板没有指向任何东西。换句话说，我们有一个lists集合，我们有一个模板，但我们没有连接它们的底层JavaScript函数。让我们处理一下那部分。
- en: 'In `~/Documents/Meteor/LendLib/LendLib.js` we can see some `Template` functions:'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在`~/Documents/Meteor/LendLib/LendLib.js`中我们可以看到一些`Template`函数：
- en: '[PRE17]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: These code chunks are hooking up JavaScript functions and objects to the HTML
    hello `template`. Meteor's built-in `Template` object makes this possible, and
    we're going to follow the same pattern to hook up our categories `template`.
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些代码块正在将JavaScript函数和对象连接到HTML hello`template`。Meteor内置的`Template`对象使这成为可能，我们将遵循相同的模式来连接我们的categories`template`。
- en: 'We want to declare to any listening client that the categories template has
    a `lists` collection. We do this by entering the following code, just below the
    `Template.hello.events = {...}` code block:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们想要向任何监听的客户端声明，categories模板有一个`lists`集合。我们通过在`Template.hello.events = {...}`代码块下方输入以下代码来实现：
- en: '[PRE18]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Tip
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The Template declaration must be inside the `if (Meteor.isClient) {...}` code
    block, so the client will pick up the change, and the server will ignore it.
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Template声明必须位于`if (Meteor.isClient) {...}`代码块内，以便客户端可以获取更改，而服务器会忽略它。
- en: 'We''ve now declared the `lists` collection for all templates to use, and we
    can have the function return the results from a `Meteor.Collection` query. We
    do that using the `find()` command:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经为所有模板声明了`lists`集合，我们可以让函数返回来自`Meteor.Collection`查询的结果。我们使用`find()`命令来实现：
- en: '[PRE19]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This code will find every record in the `lists` collection, and will sort the
    results by `Category` (name). Save these changes, and you will now see a populated
    list of categories:'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这段代码将找到`lists`集合中的每个记录，并按`Category`（名称）对结果进行排序。保存这些更改，你现在将看到一个填充了类别的列表：
- en: '![Displaying collections in HTML](img/0823OS_02_09.jpg)'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![在HTML中显示集合](img/0823OS_02_09.jpg)'
- en: Cleaning up
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 清理
- en: 'We''re fast approaching a working application, and we want it to look super-shiny
    and clean. Let''s do a bit of cleanup in our code, and add some CSS to make things
    more readable:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在快速接近一个可以工作的应用程序，我们希望它看起来超级光滑和干净。让我们对我们的代码进行一些清理，并添加一些CSS以提高可读性：
- en: 'We don''t need the greeting anymore. Let''s get rid of that. Remove the following
    highlighted lines from `LendLib.html` and save the page:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们不再需要问候语。让我们去掉它。从`LendLib.html`中删除以下高亮显示的行并保存页面：
- en: '[PRE20]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We''ll want to keep the Template.hello declarations in LendLib.js for now,
    as a reference. We''ll comment them out for now, and remove them later when they''re
    no longer needed:'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们现在想保留`LendLib.js`中的Template.hello声明，作为参考。我们现在注释掉它们，稍后当它们不再需要时删除它们：
- en: '[PRE21]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now, let''s add the Twitter Bootstrap Framework, which gives us a lot of style
    without much effort:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们添加Twitter Bootstrap框架，它让我们轻松拥有大量样式：
- en: 'Using a terminal window, create a `client` folder in `/LendLib/`:'
  id: totrans-110
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端窗口，在`/LendLib/`中创建一个`client`文件夹：
- en: '[PRE22]'
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Download the latest Bootstrap framework at [http://twitter.github.com/bootstrap/assets/bootstrap.zip](http://twitter.github.com/bootstrap/assets/bootstrap.zip)
    and extract the archive into the `~/Documents/Meteor/LendLib/client` folder.
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问[http://twitter.github.com/bootstrap/assets/bootstrap.zip](http://twitter.github.com/bootstrap/assets/bootstrap.zip)下载最新的Bootstrap框架，然后将其解压到`~/Documents/Meteor/LendLib/client`文件夹中。
- en: Because Meteor will read and use every file put in to the application folder,
    we want to eliminate the redundant files. We don't have to worry too much about
    efficiency, but some things are just shameful, and leaving that much extraneous
    code lying around is right up there with enjoying the *Twilight* movies.
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 因为Meteor会读取并使用应用程序文件夹中的每一个文件，我们希望消除这些冗余的文件。我们不必太担心效率问题，但有些事情确实令人羞愧，留下这么多无用的代码就是其中之一，与享受《暮光之城》系列电影没什么两样。
- en: 'Navigate to the bootstrap folder:'
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到bootstrap文件夹：
- en: '[PRE23]'
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Delete the unneeded files:'
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除不需要的文件：
- en: '[PRE24]'
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Tip
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If you know what you're doing with Bootstrap, you can just copy the `images`,
    `min.js`, and `min.css` files over instead of following the previous instructions.
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你熟悉Bootstrap，你可以直接复制`images`、`min.js`和`min.css`文件，而不是按照前面的说明操作。
- en: 'After all these changes, your UI should be really clean and simple:'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 经过这些更改后，你的UI应该非常干净简洁：
- en: '![Cleaning up](img/0823OS_02_10.jpg)'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![清理](img/0823OS_02_10.jpg)'
- en: 'Let''s quickly make it more distinct and readable. In `LendLib.html`, let''s
    change our header from a `div` tag to an `h2` tag:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们快速使其更加醒目和可读。在`LendLib.html`中，让我们将头部标签从`div`更改为`h2`：
- en: '[PRE25]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'And let''s turn categories into a pretty button group:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们把分类变成一个漂亮的按钮组：
- en: '[PRE26]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'This gives us a distinct, clean-looking page:'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这给了我们一个独特、干净的页面：
- en: '![Cleaning up](img/0823OS_02_11.jpg)'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![清理](img/0823OS_02_11.jpg)'
- en: Creating a reaction
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个反应
- en: With our basic template and collection created, and with Meteor putting our
    `lists` collection into the reactive context, we can now proceed to watch the
    reactive programming model in action.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们创建了基本模板和集合，并且Meteor将我们的`lists`集合放入了反应式上下文之后，我们现在可以继续观察反应式编程模型在实际工作中的表现。
- en: Navigate to our Lending Library page at `http://localhost:3000/` and open the
    browser console window.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到我们的借阅图书馆页面`http://localhost:3000/`，并打开浏览器控制台窗口。
- en: 'In the console, enter the following command:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制台中输入以下命令：
- en: '[PRE27]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: You will instantly see the page update. But notice that this time, the full
    page didn't refresh! That's because under the hood, Meteor is tracking changes
    to our reactive context (in this case, the `lists` collection) and `template`
    is being updated immediately after a change is made.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 你会立刻看到页面更新。但注意，这次页面没有完全刷新！那是因为在幕后，Meteor正在跟踪我们的反应式上下文（在这个例子中是`lists`集合）的变化，并在变化发生后立即更新`template`。
- en: 'Let''s make a few more changes. Enter the same `Fraggles` command again:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再做些改动。再次输入相同的`Fraggles`命令：
- en: '[PRE28]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Just as before, a new **Fraggles** button instantly appears:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前一样，一个新的**Fraggles**按钮立刻出现：
- en: '![Creating a reaction](img/0823OS_02_12.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个反应](img/0823OS_02_12.jpg)'
- en: 'But we have too many Fraggles categories now. There *are* a lot of Fraggles,
    but unless you''re some weirdo collector you don''t need *two* categories. So
    let''s remove them:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们现在的Fraggles分类太多了。确实有很多Fraggles，但除非你是个奇怪的收藏家，否则你不需要*两个*分类。所以我们去掉它们：
- en: '[PRE29]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This command finds any records where `Category = "Fraggles"` and deletes them.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令查找任何`Category = "Fraggles"`的记录并将它们删除。
- en: 'It would probably be better to add a single collection entry for all our collectibles,
    so let''s do that instead:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地管理我们的收藏品，添加一个收藏品集合条目可能更好，所以我们来这样做：
- en: '[PRE30]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: As you can see, the changes are made instantly, with no page refresh.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，更改是即时的，无需页面刷新。
- en: Multiple clients
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多个客户端
- en: Good things should be shared. Meteor gets this, and as we're about to see for
    ourselves, the reactive programming model allows us to share updates in real time,
    across multiple clients.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 好的事物应该分享。Meteor理解这一点，正如我们即将亲自看到的那样，反应式编程模型允许我们在多个客户端之间实时共享更新。
- en: With your Chrome web page still open to `http://localhost:3000/` open a new
    browser tab and navigate to the same page.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 保持你的Chrome网页打开在`http://localhost:3000/`，然后打开一个新的浏览器标签页，导航到同一页面。
- en: Tip
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If you really want to get fancy, you can conduct this same experiment with multiple
    browsers (Firefox, Opera, or Safari) – each session is live and reactive!
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想更高级一点，可以用多个浏览器（Firefox、Opera或Safari）进行这个实验——每个会话都是实时的并且具有反应性！
- en: You now have two clients open, which are simulating the application being opened
    by different people, at different locations, with different computers. Meteor's
    reactive model allows you to treat all clients the same, and a change made by
    one will be propagated to all the others.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在打开了两个客户端，它们模拟了不同的人、在不同的地点、使用不同的计算机打开应用程序。Meteor的反应式模型允许你对所有客户端一视同仁，其中一个客户端所做的更改将会传播到所有其他客户端。
- en: 'With your eyes on the new second browser, type the following command into the
    console on browser #1:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在关注新的第二个浏览器的同时，在浏览器#1的控制台中输入以下命令：
- en: '[PRE31]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'You will notice that the change propagates to *both* browsers, and again without
    the page refreshing:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到更改传播到了*两个*浏览器，再次没有刷新页面：
- en: '![Multiple clients](img/0823OS_02_13.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![多个客户端](img/0823OS_02_13.jpg)'
- en: Feel free to make any extra collections, remove or rename, and so on. Experiment
    a little, and notice how these changes can be instantly made to every listening
    client. Meteor operates under a very powerful paradigm, and in the next chapter,
    we'll be able to see exactly why this is such an important and disruptive change
    to web application development.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 随意添加任何额外的集合，删除或重命名等。稍作实验，注意这些更改如何能够立即对所有监听的客户端生效。Meteor遵循一个非常强大的范式，在下一章中，我们将能够确切地看到为什么这是web应用程序开发中的一个如此重要和具有颠覆性的变革。
- en: Summary
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter you've successfully created the framework for your new Meteor
    application. You've seen firsthand how quickly a new project can be created, and
    you've created some major database and template functionality, with just a few
    lines of code. You've seen live HTML and reactive programming in action, and you
    are now ready to go even deeper into the Meteor engine. You've conquered the tip
    of the iceberg, my friend. Take a break, have a cold one, and get ready for even
    more Meteor awesomeness!
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你已经成功地为你的新Meteor应用创建了框架。你亲自见证了新的项目是如何迅速被创建的，而且你仅仅用几行代码就创建了一些主要的数据库和模板功能。你亲眼看到了实时HTML和反应式编程的实际应用，现在你准备更深入地了解Meteor引擎。你已经征服了冰山之巅，我的朋友。休息一下，喝杯冰镇饮料，为更深入的Meteor精彩做好准备！
