- en: Chapter 3. JavaScript for Windows Apps
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章. Windows应用的JavaScript
- en: In this chapter, we will get introduced to some of the features provided by
    the **Windows Library for JavaScript** (the `WinJS` library) that has been introduced
    by Microsoft to provide access to Windows Runtime for the Windows Store apps using
    JavaScript. Windows Library for JavaScript is a library of CSS and JavaScript
    files. It contains a set of powerful and feature-rich JavaScript objects, functions,
    and methods organized into namespaces, with the aim of making it easier for developers
    to create Windows Store apps using JavaScript.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍由微软引入的**Windows库for JavaScript**（简称`WinJS`库）提供的一些功能，该库用于通过JavaScript访问Windows运行时，以便为Windows商店应用提供支持。Windows库for
    JavaScript是一个CSS和JavaScript文件的库。它包含一组强大且功能丰富的JavaScript对象、函数和方法，这些对象、函数和方法按命名空间组织，旨在使开发人员更容易使用JavaScript创建Windows商店应用。
- en: We will also learn about asynchronous programming with `WinJS` and see how we
    can query the document for elements and manipulate these elements using the functions
    provided by the `WinJS.Utilities` namespace. Next we will learn about the `xhr`
    function and its use and finally get introduced to the set of UI controls provided
    by the Windows Library for JavaScript.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将学习关于`WinJS`的异步编程，并了解我们如何可以使用`WinJS.Utilities`命名空间提供的函数查询文档中的元素并操作这些元素。接下来，我们将学习`xhr`函数及其使用，最后介绍由Windows库for
    JavaScript提供的一组UI控件。
- en: Asynchronous programming with Promise objects
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Promise对象的异步编程
- en: When building a Windows 8 app, the stress is on having a responsive UI, which
    is one of the main characteristics of a Windows 8 Store app. In [Chapter 2](ch02.html
    "Chapter 2. Styling with CSS3"), *Styling with CSS3*, we got to see how we can
    achieve that at the styling level. The responsive UI also includes having a responsive
    functionality whereby the code running behind the scenes not only blocks the app's
    UI all of a sudden but also makes it unresponsive to any user input while some
    logic or functionality executes.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 当构建一个Windows 8应用时，重点是拥有一个响应式UI，这是Windows 8商店应用的主要特点之一。在[第2章](ch02.html "第2章. 使用CSS3进行样式设计")*使用CSS3进行样式设计*中，我们看到了我们如何在样式级别实现这一点。响应式UI还包括具有响应式功能，后台运行的代码不仅会突然阻塞应用的UI，而且会使它在执行某些逻辑或功能时对任何用户输入不作出响应。
- en: JavaScript, as a programming language, is single-threaded, which means that
    a synchronous execution of a long-running process will block all other executions
    until that process has completed. Thus, you should avoid synchronous execution
    whenever you can. The solution to this predicament is asynchronous processing,
    which is essential to create responsive, high-performance apps. One way of achieving
    asynchronous processing is by using the **callback function mechanism**. A callback
    function is used as a hook point for continuing the processing after a previous
    asynchronous operation has terminated. A typical example is a call to a server-side
    backend.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript作为一种编程语言是单线程的，这意味着一个长时间运行的同步执行过程将阻塞所有其他执行，直到该过程完成。因此，你应该尽可能避免同步执行。这个困境的解决方案是异步处理，这对于创建响应式、高性能的应用程序至关重要。实现异步处理的一种方式是使用**回调函数机制**。回调函数用作一个钩子点，在之前的异步操作终止后继续处理。一个典型的例子是对服务器端后端的调用。
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This function is then invoked as follows:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数然后按照如下方式调用：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The callback functions are the typical solution to asynchronous calls but they
    have a drawback: they create deep chains, especially when you place multiple asynchronous
    operations in a chain where subsequent functions rely on the result of the previous
    computation. Windows Library for JavaScript along with Windows Runtime provides
    a more elegant solution using a mechanism called **Promise**, which simplifies
    asynchronous programming. Promise, as the name suggests, indicates that something
    will happen in the future and the Promise is said to be fulfilled after that something
    has completed.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 回调函数是异步调用的典型解决方案，但它们有一个缺点：它们创建了深层链，特别是在你将多个异步操作放在一个链中，而后续函数又依赖于前一个计算结果时。Windows库for
    JavaScript以及Windows运行时提供了一个更优雅的解决方案，使用了一种名为**Promise**的机制，它简化了异步编程。Promise，正如它的名字所暗示的，表示将来会发生一些事情，当这些事情完成后，Promise就被认为是得到了满足。
- en: 'In the following code sample, we create a function called `sumAsync` that will
    return a `WinJS.Promise` object and will execute asynchronously when we call it
    in the `clickMe()` function:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码示例中，我们创建了一个名为`sumAsync`的函数，它将返回一个`WinJS.Promise`对象，并在我们其在`clickMe()`函数中调用它时异步执行：
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We can deduce from the preceding code sample that, `Promise` is basically an
    object. This object implements a method named `then`, which in turn takes the
    following three functions as parameters:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的代码示例中我们可以推断出，`Promise`基本上是一个对象。这个对象实现了一个名为`then`的方法，该方法又采取了以下三个函数作为参数：
- en: A function that will be called when the `Promise` object completes and has been
    fulfilled successfully
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个在`Promise`对象完成并成功满足时会被调用的函数
- en: A function that will be called when an error arises while the `Promise` object
    is being fulfilled, known as `future`
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个在`Promise`对象被满足时会调用的函数，称为`未来`
- en: A function that will be called while `Promise` is being fulfilled, to indicate
    the progress information, known as `deferred`
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个在`Promise`被满足时会被调用的函数，以指示进度信息，称为`延迟`
- en: 'In Visual Studio, when you add a `then` method to a function, you will be prompted
    in the IntelliSense pop-up window to enter these parameters, as shown in the following
    screenshot:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在Visual Studio中，当你向一个函数添加一个`then`方法时，你将在IntelliSense弹出窗口中提示输入这些参数，如下面的屏幕截图所示：
- en: '![Asynchronous programming with Promise objects](img/7102EN_03_01.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![使用Promise对象的异步编程](img/7102EN_03_01.jpg)'
- en: 'You can use the `then` method with any function that returns `Promise`; since
    it returns `Promise`, you can chain multiple `then` functions. For example:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`then`方法与任何返回`Promise`的函数；因为它返回`Promise`，所以你可以链接多个`then`函数。例如：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the previous example, we appended multiple `then` methods to the functions
    and completed the processing with the `done` method.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一个示例中，我们将多个`then`方法附加到函数上，并使用`done`方法完成处理。
- en: Note
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `done` method takes the same parameter as `then`. However, the difference
    between the two is that `done` returns `undefined` instead of `Promise`, so you
    cannot chain it. In addition, the `done` method throws an exception if an `error`
    function is not provided to handle any errors that occur during processing, while
    the `then` function does not throw an exception and instead returns the `Promise`
    object in the `error` state.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`done`方法接受与`then`相同的参数。然而，两者的区别在于`done`返回`undefined`而不是`Promise`，所以你不能链接它。此外，`done`方法如果在处理过程中没有提供`error`函数来处理任何错误，将抛出一个异常，而`then`函数不会抛出异常，而是返回`error`状态的`Promise`对象。'
- en: All the Windows Runtime APIs that are exposed to Windows Store apps are wrapped
    in `Promise` objects, exposing methods and functions that return a `Promise` object,
    allowing you to easily implement asynchronous processes in your app.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 所有向Windows Store应用公开的Windows运行时API都被包装在`Promise`对象中，暴露出返回`Promise`对象的方法和函数，允许你在应用中轻松实现异步过程。
- en: Querying the DOM with WinJS.Utilities
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用WinJS.Utilities查询DOM
- en: The UI of the app is described in HTML and the corresponding styles. When the
    app is launched, you should expect different user interactions with the UI. The
    user will touch some sections of your app; he/she will scroll, zoom in and out,
    or add or remove items. Moreover, the app might interact with the user through
    dialogs or conversations and through posting notifications on the screen. Responding
    to such interactions is handled by code and in our case, specifically by JavaScript
    code. That's where `WinJS.Utilities` comes in handy, by providing helper functions
    to do that; for example, functions to add/remove CSS classes or to insert HTML
    elements. But before anything interacts with the user, you have to select the
    function using JavaScript, which is called **querying the DOM**.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 应用的界面由HTML和相应的样式描述。当应用启动时，你应该期待与界面不同的用户交互。用户将触摸应用的某些部分；他会滚动、缩放或添加/删除项目。此外，应用可能通过对话框或会话与用户交互，并通过在屏幕上发布通知来与用户交互。处理这些交互由代码完成，在我们的案例中，特别是由JavaScript代码完成。这时`WinJS.Utilities`就派上用场了，它提供了助手函数来完成这些任务；例如，添加/删除CSS类或插入HTML元素的功能。但在任何与用户交互之前，你必须使用JavaScript选择函数，这称为**查询DOM**。
- en: 'In [Chapter 2](ch02.html "Chapter 2. Styling with CSS3"), *Styling with CSS3*,
    we saw how to select parts of the DOM using CSS selectors. JavaScript has built-in
    functions to do so by using the traditional `document.getElementById` function.
    This function has a limited functionality and does not allow selecting from the
    DOM using the CSS selector syntax as the jQuery selectors do, however, now JavaScript
    includes `querySelector()` and `querySelectorAll()`. These two functions are more
    powerful and take CSS queries just as the jQuery selector syntax does. While the
    `querySelector()` function returns a single DOM element, the `querySelectorAll()`
    function returns a list of nodes. Both functions exist on the `document` and `element`
    objects. So, you can query the document to find all matching results in the entire
    document, or you can just query a single element to find all matching objects
    under it. For example:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 'In [Chapter 2](ch02.html "Chapter 2. Styling with CSS3"), *Styling with CSS3*,
    we saw how to select parts of the DOM using CSS selectors. JavaScript has built-in
    functions to do so by using the traditional `document.getElementById` function.
    This function has a limited functionality and does not allow selecting from the
    DOM using the CSS selector syntax as the jQuery selectors do, however, now JavaScript
    includes `querySelector()` and `querySelectorAll()`. These two functions are more
    powerful and take CSS queries just as the jQuery selector syntax does. While the
    `querySelector()` function returns a single DOM element, the `querySelectorAll()`
    function returns a list of nodes. Both functions exist on the `document` and `element`
    objects. So, you can query the document to find all matching results in the entire
    document, or you can just query a single element to find all matching objects
    under it. For example:'
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Alongside these two JavaScript selection methods, the `WinJS.Utilities` namespace
    provides two functions with similar features for selecting elements, namely `id()`
    and `query()`. Basically, these functions wrap the `querySelector` and `querySelectorAll`
    functions but the return result value is different. The selector functions provided
    by `WinJS.Utilities` return a `QueryCollection` object, which in turn exposes
    various operations that perform actions over the elements of the collection, such
    as adding and removing a class and others.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: alongside these two JavaScript selection methods, the `WinJS.Utilities` namespace
    provides two functions with similar features for selecting elements, namely `id()`
    and `query()`. Basically, these functions wrap the `querySelector` and `querySelectorAll`
    functions but the return result value is different. The selector functions provided
    by `WinJS.Utilities` return a `QueryCollection` object, which in turn exposes
    various operations that perform actions over the elements of the collection, such
    as adding and removing a class and others.
- en: 'The following code shows the syntax for using `id()` and `query()`. We first
    create a `WinJS.Utilities` object and call these two methods on it as shown:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 'The following code shows the syntax for using `id()` and `query()`. We first
    create a `WinJS.Utilities` object and call these two methods on it as shown:'
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The following screenshot shows the IntelliSense window that lists the functions
    provided by the `WinJS.Utilities` namespace:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 'The following screenshot shows the IntelliSense window that lists the functions
    provided by the `WinJS.Utilities` namespace:'
- en: '![Querying the DOM with WinJS.Utilities](img/7102EN_03_02.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![Querying the DOM with WinJS.Utilities](img/7102EN_03_02.jpg)'
- en: 'Querying the DOM is also useful when you need to apply a behavior to the elements
    of `document`. For example, you might want to add a functionality whenever the
    user clicks on a particular button. We do so by first querying for that element
    and then adding a `click` handler to it. The following code shows how:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 'Querying the DOM is also useful when you need to apply a behavior to the elements
    of `document`. For example, you might want to add a functionality whenever the
    user clicks on a particular button. We do so by first querying for that element
    and then adding a `click` handler to it. The following code shows how:'
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the previous code sample, the `listen()` method is used to wire an event
    handler to the `click` event of the button with the ID `Btn`; in this handler,
    we are creating a new `p` element and adding it to the `div` element with the
    ID `postDiv`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: In the previous code sample, the `listen()` method is used to wire an event
    handler to the `click` event of the button with the ID `Btn`; in this handler,
    we are creating a new `p` element and adding it to the `div` element with the
    ID `postDiv`.
- en: Note
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Note
- en: The methods provided by the `WinJS.Utilities` namespace are like a simplified
    subset of the functions provided in jQuery.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: The methods provided by the `WinJS.Utilities` namespace are like a simplified
    subset of the functions provided in jQuery.
- en: 'The following is a list of some of the available methods that you can call
    on the objects returned in `QueryCollection`:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 'The following is a list of some of the available methods that you can call
    on the objects returned in `QueryCollection`:'
- en: '`addClass`'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`addClass`'
- en: '`clearStyle`'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`clearStyle`'
- en: '`getAttribute`'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getAttribute`'
- en: '`hasClass`'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hasClass`'
- en: '`query(query)`'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`query(query)`'
- en: '`removeClass`'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`removeClass`'
- en: '`removeEventListener`'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`removeEventListener`'
- en: '`setAttribute`'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setAttribute`'
- en: '`setStyle`'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setStyle`'
- en: '`toggleClass`'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`toggleClass`'
- en: '`children`'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`children`'
- en: Understanding WinJS.xhr
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Understanding WinJS.xhr
- en: 'The `xhr` function basically wraps the calls to `XMLHttpRequest` in a `Promise`
    object. The function is useful for cross-domain and intranet requests, as shown
    in the following code:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 'The `xhr` function basically wraps the calls to `XMLHttpRequest` in a `Promise`
    object. The function is useful for cross-domain and intranet requests, as shown
    in the following code:'
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Since the `WinJS.xhr` function processes asynchronously and returns a `Promise`
    object, we can pass the `then()` or `done()` method to it, as shown in the previous
    example.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`WinJS.xhr`函数异步处理并返回一个`Promise`对象，我们可以像 previous example中所示，向它传递`then()`或`done()`方法。
- en: 'You can use the `WinJs.xhr` function to connect to a web service and to download
    different types of content, such as text or a JSON string that are specified in
    the `responseType` option of `WinJS.xhr`. The `responseType` option takes a string
    value that specifies the type of response expected from the request, and the types
    are as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`WinJs.xhr`函数来连接Web服务并下载不同类型的内容，如文本或指定在`WinJS.xhr`的`responseType`选项中的JSON字符串。`responseType`选项取一个字符串值，指定从请求中期望的响应类型，类型如下：
- en: '`text`: This is the default value and expects a response of type string'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`text`：这是默认值，期待一个字符串类型的响应。'
- en: '`arraybuffer`: This expects an **ArrayBuffer** used to represent binary content
    such as an array of type integer or float'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`arraybuffer`：这期待一个用于表示二进制内容，如整数或浮点数数组的**ArrayBuffer**。'
- en: '`blob`: This expects a **Blob** (**Binary Large Object**), which is an object
    that represents immutable raw data and is typically of a large file size'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`blob`：这期待一个**Blob**（**Binary Large Object**），它是一个代表不可变原始数据的对象，通常文件大小较大。'
- en: '`document`: This expects XML content; that is, content that has a MIME type
    of `text/xml`'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`document`：这期待XML内容；也就是说，内容具有`text/xml`MIME类型的内容。'
- en: '`json`: This expects a JSON string'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`json`：这期待一个JSON字符串'
- en: '`ms-stream`: This expects an `msStream` object that handles streaming data
    and is marked with a vendor-specific prefix (`ms`) because it is not defined in
    the W3C specifications yet'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ms-stream`：这期待一个处理流数据的`msStream`对象，并用供应商特定的前缀（`ms`）标记，因为它尚未在W3C规范中定义。'
- en: 'Besides `responseType`, a couple of more options can be applied to the `xhr`
    (`XMLHttpRequest`) objects, which are all optional except `url`. These options
    are as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`responseType`，还可以在`xhr`（`XMLHttpRequest`）对象上应用几个更多选项，这些都是可选的，除了`url`。这些选项如下：
- en: '`url`: This specifies a string that is either the absolute or relative URL
    of the XML data or server-side XML web services'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`url`：这指定了一个字符串，它或者是XML数据或服务器端XML Web服务的绝对或相对URL。'
- en: '`type`: This specifies a string that represents the HTTP method used; for example,
    `GET`, `POST`, or `HEAD`'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type`：这指定了一个代表使用的HTTP方法的 string，例如`GET`、`POST`或`HEAD`。'
- en: '`user`: This specifies a string that represents the name of the user used for
    authentication, if required'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`user`：这指定了一个代表用于身份验证的用户名的字符串，如果需要的话。'
- en: '`password`: This specifies a string that represents the password used for authentication,
    if any'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`password`：这指定了一个代表用于身份验证的密码的字符串，如果有的话。'
- en: '`headers`: This specifies an object that represents a custom HTTP header'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`headers`：这指定了一个代表自定义HTTP头的对象。'
- en: '`data`: This specifies an object that contains the data that will be sent with
    the HTTP request to the server; this data is passed directly to the `XMLHttpRequest.send`
    method'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data`：这指定了一个包含将通过HTTP请求发送到服务器的数据的对象；这些数据直接传递给`XMLHttpRequest.send`方法。'
- en: '`customRequestInitializer`: This specifies a function that can be used for
    preprocessing on `XMLHttpRequest`.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`customRequestInitializer`：这指定了一个可以在`XMLHttpRequest`上用于预处理的函数。'
- en: 'Let''s populate the basic syntax on how to retrieve some text from a website
    as shown in the following code:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们填充以下代码中如何从网站上检索一些文本的基本语法：
- en: '[PRE8]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The previous code sample will retrieve the text from the specified `url` string
    and insert it into the `div` element, `responseDiv`; in case there was an error
    during processing, we retrieve it in the error-handling function via `statusText`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码示例将从一个指定的`url`字符串检索文本，并将其插入到`div`元素中，`responseDiv`；如果在处理过程中出现错误，我们通过`statusText`在错误处理函数中检索它。
- en: Note
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It is not recommended to use the `XMLHttpRequest` object to request a transfer
    of extremely large objects that might take a long time to complete, such as the
    **Blob** and the **FormData** objects. Instead, you should consider using the
    file upload APIs provided by the Windows Runtime API for such operations.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 不建议使用`XMLHttpRequest`对象来请求可能需要很长时间才能完成的极其大型对象的传输，例如**Blob**和**FormData**对象。相反，你应该考虑使用Windows运行时API提供的文件上传API来进行此类操作。
- en: Introducing a new set of controls
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引入一组新的控件
- en: 'Besides content, your app will need controls; regular HTML controls such as
    buttons, select lists, and checkboxes; and some Windows 8 exclusive controls such
    as the AppBar rating and settings. In addition to the standard built-in HTML controls,
    `WinJS` provides a set of new and feature-rich controls designed for Windows Store
    apps using JavaScript. These controls are basically objects available in the `WinJS.UI`
    namespace; so, a date picker control will look like `WinJS.UI.DatePicker`. Here
    is a list of the major `WinJS.UI` controls you will use in an app:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 除了内容，您的应用程序还需要控件；常规的HTML控件，如按钮、选择列表和复选框；以及一些Windows 8独有的控件，如AppBar评分和设置。除了标准的内置HTML控件外，`WinJS`还提供了一组新的、功能丰富的控件，这些控件是为使用JavaScript的Windows商店应用程序设计的。这些控件基本上是`WinJS.UI`命名空间中可用的对象；因此，日期选择器控件看起来像`WinJS.UI.DatePicker`。以下是您在应用程序中使用的主要的`WinJS.UI`控件列表：
- en: '`DatePicker`: This renders a customizable control that is used to select a
    date value'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DatePicker`：用于选择日期值的定制控件。'
- en: '`TimePicker`: This renders a customizable control that is used to select a
    time value'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TimePicker`：用于选择时间值的定制控件。'
- en: '`Menu`: This renders a menu flyout control for displaying commands'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Menu`：用于显示命令的菜单弹出控制。'
- en: '`AppBar`: This renders an application toolbar for displaying commands'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AppBar`：用于显示命令的应用程序工具栏。'
- en: '`FlipView`: This renders a collection of items to be displayed one item at
    a time'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FlipView`：用于一次性显示一系列项目的集合。'
- en: '`ListView`: This renders a collection of items in a customizable grid or list
    layout'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ListView`：用于以可自定义的网格或列表布局显示项目的控件。'
- en: '`Flyout`: This is a control that displays a kind of a pop up control containing
    information; however, it is lightweight and doesn''t create a separate window
    such as a dialog box'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Flyout`：这是一个轻量级的控件，用于显示包含信息的弹出式控件，但它不会像对话框那样创建一个单独的窗口。'
- en: '`Rating`: This is a control that allows the user to rate something and can
    display three types of ratings—tentative, average, or the user''s rating'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Rating`：这是一个允许用户评分并可以显示三种类型评分—临时、平均或用户评分的控件。'
- en: '`SemanticZoom`: This is a control that lets the user zoom between a zoomed-in
    and zoomed-out view, which is supplied by two separate child controls that provide
    each type of view:'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SemanticZoom`：这是一个可以让用户在缩放视图和放大视图之间缩放的控件，由两个提供每种视图的单独子控件提供：'
- en: '`ToggleSwitch`: This renders a control that lets the user switch an option
    between two states (on and off)'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ToggleSwitch`：这是一个可以让用户在两个状态之间切换选项（开和关）的控制。'
- en: '`Tooltip`: This renders a control that displays a tooltip to show more information
    about an object, and it can support rich content (such as images)'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Tooltip`：用于显示有关对象的弹出式控件，其中包含有关对象的更多信息，并支持丰富的内容（如图像）。'
- en: '`ViewBox`: This renders a control that scales a single child element it contains
    (without changing its aspect ratio) to make it fit and fill the available space'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ViewBox`：这是一个缩放其包含的单个子元素（不改变其宽高比）的控制，使其适合并填充可用空间。'
- en: Note
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: These controls are automatically styled with either one of the two stylesheets
    that appear by default in any new Windows 8 Store app project you create in Visual
    Studio. The two stylesheets (one with a dark color theme and the other with a
    light one) will give your app the look and feel of Windows 8.
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些控件会自动使用Visual Studio中创建的任何新的Windows 8商店应用程序项目中默认出现的两个样式表之一进行样式设计。这两个样式表（一个为深色主题，另一个为浅色主题）将给您的应用程序带来Windows
    8的外观和感觉。
- en: 'Unlike standard HTML controls, `WinJS.UI` controls do not have dedicated markup
    elements or attribute tags; for example, you can''t go on adding a `WinJS.UI.Rating`
    element such as `<rating/>` to your markup, as you would normally do with the
    standard HTML elements such as `<input/>`. To add a `WinJS.UI` control, you need
    to create an HTML element, say `div`, and use the `data-win-control` attribute
    to specify the type of control you want. The following code shows the syntax to
    create a `WinJS.UI` `Rating` control:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 与标准的HTML控件不同，`WinJS.UI`控件没有专用的标记元素或属性标签；例如，您不能像正常添加标准HTML元素（如`<input/>`）那样，继续向您的标记中添加`WinJS.UI.Rating`元素（如`<rating/>`）。要添加一个`WinJS.UI`控件，您需要创建一个HTML元素，比如`div`，并使用`data-win-control`属性来指定您想要的控件类型。下面的代码显示了创建一个`WinJS.UI`
    `Rating`控件的语法：
- en: '[PRE9]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This will declare a rating element in the markup but will not load the control
    in your app when you run it. In order to activate any `WinJS` control that you've
    declared in the markup, the JavaScript code must call the `WinJS.UI.processAll()`
    function that processes the document and initializes the controls you created.
    When you create an app using any of the templates provided in Visual Studio, the
    `default.js` file includes a call to `WinJS.UI.processAll` in the code, declared
    in the `app.onactivated` event handler.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这将声明一个评分元素在标记中，但当你运行应用程序时，不会加载控件。为了激活你在标记中声明的任何`WinJS`控件，必须调用处理文档并初始化你创建的控件的`WinJS.UI.processAll()`函数。当你使用Visual
    Studio提供的任何模板创建应用程序时，`default.js`文件中在`app.onactivated`事件处理程序中包含了对`WinJS.UI.processAll`的调用。
- en: 'When you run the app, you will see the new `Rating` control as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行应用程序时，你会看到如下的新`Rating`控件：
- en: '![Introducing a new set of controls](img/7102EN_03_03.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![介绍一组新的控件](img/7102EN_03_03.jpg)'
- en: 'You can also create a `WinJS` control in code by calling its constructor and
    passing the HTML element that will host this control to the constructor. For example,
    if we have `div` with an `id` attribute of `ratingControlDiv`, the JavaScript
    to create a `Rating` control will be as follows:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以通过调用其构造函数并在构造函数中传递将托管此控件的HTML元素来在代码中创建`WinJS`控件。例如，如果我们有一个`div`元素，其`id`属性为`ratingControlDiv`，创建`Rating`控件的JavaScript将如下所示：
- en: '[PRE10]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In this case, there will be no need to call the `WinJS.UI.processAll` function,
    since you didn't create the JavaScript control in the markup.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，将无需调用`WinJS.UI.processAll`函数，因为你没有在标记中创建JavaScript控件。
- en: 'Also, setting the properties of a `WinJS` control differs from setting the
    properties of a standard HTML control; the latter has dedicated attributes for
    that purpose. For example, an `input` element of the type `range` has `min` and
    `max` attributes whose values can be set in the markup as shown in the following
    code:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，设置`WinJS`控件的属性与设置标准HTML控件的属性不同；后者有专门用于此目的的属性。例如，类型为`range`的`input`元素有`min`和`max`属性，其值可以在标记中如以下代码所示设置：
- en: '[PRE11]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In the case of a JavaScript control, we have to use the `data-win-options`
    attribute to set a property in the markup, which takes a string that contains
    one or more property/value pairs (multiple properties are separated with a comma)
    and in its basic form looks as shown in the following code:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 对于JavaScript控件，我们必须在标记中使用`data-win-options`属性来设置属性，它是一个包含一个或多个属性/值对的字符串（多个属性以逗号分隔），在基本形式下如以下代码所示：
- en: '[PRE12]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The following syntax will show how to set the `minRating` and `maxRating` attributes
    for a `WinJS.UI.Rating` control:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的语法将显示如何为`WinJS.UI.Rating`控件设置`minRating`和`maxRating`属性：
- en: '[PRE13]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Summary
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We have glimpsed some of the capabilities and powerful features of the `WinJS`
    in Windows 8\. We learned how to implement asynchronous programming using the
    `Promise` object.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经瞥见了`WinJS`在Windows 8中的某些功能和强大特性。我们学习了如何使用`Promise`对象实现异步编程。
- en: Also, we were introduced to the methods provided in the `WinJS.Utilities` namespace
    that allow us to retrieve and modify the elements of an HTML document. We also
    covered retrieving different types of content with the `WinJS.xhr()` function.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还介绍了`WinJS.Utilities`命名空间中提供的方法，这些方法允许我们检索和修改HTML文档的元素。我们还介绍了使用`WinJS.xhr()`函数检索不同类型内容的方法。
- en: Finally, we learned about the new set of controls provided by the `WinJS` library
    and how to create these JavaScript controls and set their properties.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们学习了`WinJS`库提供的新一组控件以及如何创建这些JavaScript控件并设置它们的属性。
- en: In the next chapter, we will start developing apps with JavaScript by introducing
    the needed tools first and then learn about the templates provided for Windows
    8 JavaScript apps. Also, we will create a very basic app and understand the anatomy
    of the JavaScript app. We will also learn about the ListView control.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将开始使用JavaScript开发应用程序，首先介绍所需的工具，然后学习为Windows 8 JavaScript应用程序提供的模板。此外，我们将创建一个非常基础的应用程序，并了解JavaScript应用程序的解剖结构。我们还将学习ListView控件。
