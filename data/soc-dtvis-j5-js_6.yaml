- en: Chapter 6. Stack Overflow
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。Stack Overflow
- en: In 2008, the programming question market on the Internet was dominated by a
    company called Experts Exchange. Many were dissatisfied with the culture on the
    site and the requirement that people had to be registered to view answers. Programmers
    Jeff Atwood and Joel Spolsky launched the "question and answer" site, Stack Overflow.
    Since then, the site has, taken off, quickly growing to become one of the top
    100 sites on the Internet. Users can ask and answer questions on the site about
    a wide variety of programming topics. Answering a question well or asking a well
    thought-out question wins reputation points, which are prominently displayed.
    Although, it's not a social media site like Facebook and Twitter, Stack Overflow's
    content is all user-created and user-moderated. Stack Overflow offers an API against
    which you can query for all sorts of interesting information.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 2008年，互联网上的编程问题市场被一个名为Experts Exchange的公司所主导。许多人对网站上文化和要求人们注册才能查看答案的规定表示不满。程序员Jeff
    Atwood和Joel Spolsky推出了“问答”网站Stack Overflow。自那时以来，该网站迅速起飞，快速发展成为互联网上前100个网站之一。用户可以在网站上关于各种编程主题提问和回答问题。回答一个问题很好或者提出一个经过深思熟虑的问题可以赢得声誉点，这些点数突出显示。尽管Stack
    Overflow不是一个像Facebook和Twitter那样的社交媒体网站，但该网站的内容全部由用户创建和用户审核。Stack Overflow提供了一个API，你可以通过该API查询各种有趣的信息。
- en: Authenticating
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 身份验证
- en: Much of the query API is available without authenticating. However, if you want
    private information about users or want to write to the site, then you'll need
    to authenticate. There is also a much higher request limit for authenticated applications.
    Without authenticating, a single IP address is limited to 300 requests a day.
    With an authenticated application, this limit is raised to 10,000 requests.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 查询API的大部分功能不需要进行身份验证。然而，如果你想要关于用户的私人信息或者想要向网站写入内容，那么你就需要进行身份验证。对于经过身份验证的应用程序，也有一个请求限制的请求限制。没有进行身份验证的情况下，一个IP地址每天只能限制300个请求。有了经过身份验证的应用程序，这个限制提高到10,000个请求。
- en: Tip
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Rate limits**'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**速率限制**'
- en: Many social media sites use rate limits in their APIs. These limits are in place
    to prevent you from overloading the site, and also to save you from asking for
    too much data. Twitter processes more than 4,000 tweets a second. Without very
    special preparation, your infrastructure would quickly be overwhelmed if you were
    to process them all.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 许多社交媒体网站在其API中使用速率限制。这些限制是为了防止你使网站过载，也是为了让你不要获取太多数据。Twitter每秒处理超过4,000条推文。如果你要处理它们所有人，而没有做特殊的准备，你的基础设施很快就会被压垮。
- en: Again, this is a site that makes use of **OAuth** to authorize users. However,
    they make use of OAuth 2.0, which is much easier than the OAuth 1.0a we used in
    the previous chapter. We'll limit ourselves to making use of public information
    to avoid authenticating. Should you wish to authenticate, I promise it is easier
    than Twitter. You can find instructions at [https://api.stackexchange.com/docs/authentication.](https://api.stackexchange.com/docs/authentication.)
    Stack Overflow uses the same authorization system as Facebook, so the example
    from the OAuth chapter should work perfectly.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 再次说明，这个网站利用**OAuth**来授权用户。然而，他们使用的是OAuth 2.0，这比我们上一章使用的OAuth 1.0a要简单得多。我们将限制自己只使用公共信息来避免身份验证。如果你希望进行身份验证，我保证这比Twitter容易。你可以在[https://api.stackexchange.com/docs/authentication.](https://api.stackexchange.com/docs/authentication.)找到说明。Stack
    Overflow使用与Facebook相同的授权系统，所以上一章的OAuth示例应该完全适用。
- en: Creating a visualization
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建可视化
- en: Many of the questions on Stack Overflow have a large number of answers. The
    site is not optimized to show the latest answers; the answers are ranked by being
    the most accepted answer then randomly. This is done to give all answers a chance
    at being shown near the top which should, in theory, encourage people to vote
    for the best answer instead of just the first answer shown.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 许多在Stack Overflow上的问题都有很多答案。该网站并没有优化显示最新的答案；答案是按照被接受最多的答案然后随机排序的。这样做是为了让所有的答案都有机会出现在顶部，理论上应该能鼓励人们为最好的答案投票，而不仅仅是第一个显示的答案。
- en: For this visualization, I would like to show how a question has been answered
    over time. Are more recent answers likely to get a higher score? Is the first
    answer always the best?
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个可视化，我希望能展示一个问题是如何随时间被回答的。最近的答案得分更高吗？第一个答案总是最好的吗？
- en: Let's start by pulling down the data for an individual question which has a
    large number of answers. To do this, we'll make use of the questions API. All
    of the API endpoints are hosted on [https://api.stackexchange.com](https://api.stackexchange.com).
    We're going to make use of the latest API which is Version 2.1\. This is also
    encoded into the URI, as is the specific endpoint and the ID. Within the question
    API, we're interested in the answers, so we can query specifically for them, giving
    us a URI of [https://api.stackexchange.com/2.1/questions/{id}/answers](https://api.stackexchange.com/2.1/questions/{id}/answers).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先拉取一个有大量答案的单个问题的数据。为此，我们将使用问题API。所有API端点都托管在[https://api.stackexchange.com](https://api.stackexchange.com)。我们将使用最新的API，即版本2.1。这也编码在URI中，以及特定的端点和ID。在问题API中，我们感兴趣的是答案，因此我们可以针对它们进行查询，得到一个URI：[https://api.stackexchange.com/2.1/questions/{id}/answers](https://api.stackexchange.com/2.1/questions/{id}/answers)。
- en: 'In the query string, we''ll specify the site against which we want to query.
    Stack Exchange hosts several dozen question and answer sites modeled on Stack
    Overflow, all of which are served from the same API endpoint, so it is necessary
    to filter just for Stack Overflow by passing in `site=stackoverflow`:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在查询字符串中，我们将指定我们要查询的站点。Stack Exchange托管了数十个模仿Stack Overflow的问题和答案站点，所有这些站点都使用相同的API端点，因此有必要通过传递`site=stackoverflow`来过滤出Stack
    Overflow。
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Twitter provided us with the continuation tokens that we could pass back to
    Twitter to request the next page of data. Stack Overflow takes a different approach
    and assigns page numbers, allowing us to browse through the results with ease.
    Embedded in the response for every API call is a token called `has_more`, which
    is true whenever there are more pages of data that match the current query.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Twitter为我们提供了继续令牌，我们可以将其回传给Twitter以请求下一页的数据。Stack Overflow采取了不同的方法，分配了页码，使我们能够轻松地浏览结果。每个API调用响应中嵌入了一个名为`has_more`的令牌，当有符合当前查询的更多数据页时，该令牌为真。
- en: In this code, we make use of the continuation token and the page number to perform
    as many queries as necessary to retrieve all the answers. We are making use of
    the jQuery function `ajax,` instead of the more common `getJson` function, because
    we would like to retrieve the data synchronously. We do this because we want the
    entire dataset at one time. If your visualization allows for data to be added
    dynamically then you can relax the `async:false` requirement.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个代码中，我们利用继续令牌和页码执行尽可能多的查询，以获取所有答案。我们使用了jQuery函数`ajax`，而不是更常见的`getJson`函数，因为我们希望同步获取数据。我们这样做是因为我们希望一次性获取整个数据集。如果您的可视化允许动态添加数据，那么您可以放宽`async:false`的要求。
- en: What's returned is an array of objects, each one of which represents an answer
    to a question. If we give the `retrieveQuestionAnswers` method an ID such as `901115`,
    then we'll get back an array of 50 answers. These come back over the course of
    two requests and the code above merges them together into the results array which
    is returned.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的是一个对象数组，每个对象都代表一个问题的答案。如果我们给`retrieveQuestionAnswers`方法一个ID，比如`901115`，那么我们会得到一个包含50个答案的数组。这些答案在两个请求中返回，上述代码将它们合并到结果数组中并返回。
- en: 'Each `Answer` contains a number of fields. A list of the fields returned by
    default can be found at [https://api.stackexchange.com/docs/types/answer](https://api.stackexchange.com/docs/types/answer).
    For the purpose of our visualization, we''re most interested in when the answer
    was originally suggested, its score, and also whether it was chosen as the accepted
    answer. These bits of information can be found in the fields: `creation_date`,
    `score`, and `is_accepted`. We''ll ignore the rest of the fields for now.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 每个`Answer`包含多个字段。返回默认字段的列表可以在[https://api.stackexchange.com/docs/types/answer](https://api.stackexchange.com/docs/types/answer)找到。对于我们的人来说，我们最感兴趣的是答案最初是在什么时候提出的，它的得分，以及它是否被选为接受的答案。这些信息可以在字段`creation_date`、`score`和`is_accepted`中找到。现在我们忽略其他字段。
- en: Now that we have some basic data, we can start thinking about the visualization.
    We're trying to convey the relationship between the age of a question and its
    score. This sounds a lot like a use for a scatter plot. The data points stand
    on their own and can be placed along two axis, date and points. My theory before
    starting on this that answers that are older will tend to have a higher score,
    because they've been around longer to gather points. People are programmed to
    believe that numbers going up are positive, so let's play to that and plot points
    versus age which will, if my theory holds, have higher values on the right.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有一些基本数据，可以开始考虑可视化了。我们试图传达问题的年龄和其得分之间的关系。这听起来像是一个散点图的用途。数据点本身就可以放置在日期和分数的两个轴上。在我开始这项工作之前，我的理论是：越老的问题往往会得分更高，因为它们存在的时间更长，有更多的时间积累分数。人们倾向于认为上升的数字是积极的，所以让我们利用这一点，将分数对年龄绘制成图表，如果我的理论成立，那么右侧的值将会更高。
- en: Of course, a scatter plot is boring and nothing we couldn't generate outside
    of Excel. We'll add some interactivity to it, but to start, we'll still need a
    simple scatter plot.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，散点图很无聊，我们完全可以在Excel之外生成它。我们将添加一些交互性，但首先，我们仍然需要一个简单的散点图。
- en: 'This is easily done with a couple of scales and some circles, as shown in the
    following code:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过几个刻度和一些圆圈轻松实现，如下面的代码所示：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This gives a very flat graph with the majority of the data being close to zero,
    while the scale is skewed by a high outlier with a score over 2000, as can be
    seen in the following figure:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这会生成一个非常平缓的图表，其中大部分数据接近于零，而刻度则被一个得分超过2000的高异常值所扭曲，如图所示：
- en: '![Creating a visualization](img/6542OS_06_02_New.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![创建可视化](img/6542OS_06_02_New.jpg)'
- en: This can be ameliorated by using a logarithmic scale. Any time you use a non-standard
    scale like logarithmic, you'll want to put in axis labels to prevent causing confusion
    or misleading the consumer of the visualization.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过使用对数刻度来改善。每次使用像对数这样的非标准刻度时，您都会想要添加轴标签，以防止引起混淆或误导可视化的消费者。
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The labels in this graph are manually assigned to give the best spread. You
    can automatically assign labels, but I found them to be declared at odd places.
    I also defined a function to format the labels, otherwise they had a tendency
    to be formatted using scientific notation (*2 * 10^3*). Finally, I appended some
    text as an axis label. I also added an age axis that lists the age of the answer
    in days.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这个图表中的标签是手动分配的，以给出最好的分散效果。您可以自动分配标签，但我发现它们被声明在奇怪的地方。我还定义了一个函数来格式化标签，否则它们倾向于使用科学记数法(*2
    * 10^3*)。最后，我附加了一些文本作为轴标签。我还添加了一个年龄轴，列出了答案的年龄（以天为单位）。
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The only special thing worth noting in this code is that the label is rotated
    using a transform, as it appears along a vertical axis. The resulting graph looks
    like this figure:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码中唯一值得注意的特殊之处在于，标签是通过变换旋转的，因为它沿着垂直轴出现。结果图表看起来像这个图：
- en: '![Creating a visualization](img/6542OS_06_02.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![创建可视化](img/6542OS_06_02.jpg)'
- en: Now that we have a basic visualization, we can start spiffing it up with some
    interaction.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了基本的可视化，可以开始通过一些交互来使其更加完善。
- en: The simplest interaction we can add is to pop up a label when somebody moves
    the mouse pointer over one of the points.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以添加的最简单的交互是将一个标签在有人将鼠标指针悬停在一个点上时弹出。
- en: 'This can be done by using the `on()` function of `d3`. This function can tie
    event listeners to the elements created as part of an SVG. To start, we add to
    the end of circle appending from above, as shown in the following code:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过使用`d3`的`on()`函数来实现。这个函数可以将事件监听器绑定到SVG中创建的元素上。首先，我们在上面的圆圈附加代码的末尾添加如下代码：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here, the `showTip()` function will be called whenever the user hovers the mouse
    over one of the circles in the above graph. The `item` parameter, which is passed
    into the event handler, is the item from the data collection that is attached
    to the hovered circle. If you need additional information about the event, and
    we do, then that can be found attached to the global variable `d3.event`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，每当用户将鼠标悬停在上面的图表中的一个圆圈上时，`showTip()`函数就会被调用。事件处理程序中传递的`item`参数是附着在悬停圆圈上的数据集合中的项目。如果您需要关于事件的额外信息，我们需要，那么可以在全局变量`d3.event`中找到。
- en: 'In the event handler, we first highlight the selected circle by ensuring all
    other circles are black and then making the selected one blue:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在事件处理程序中，我们首先通过确保所有其他圆圈都是黑色并把选中的圆圈变成蓝色来突出选中的圆圈：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'It may also be useful to change the size of the circle to draw even more attention
    to it. This can be done by simply updating its attributes. Next, we hide the previous
    tip and set the inner contents of the tip to take values from the selected data
    element:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 更改圆的大小也可能很有用，以吸引更多的注意力。这可以通过简单地更新其属性来实现。接下来，我们隐藏先前的提示，并将提示内的内容设置为从选中的数据元素中获取值：
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Finally, we move the tool tip to be next to the circle and have it fade in:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将工具提示移动到圆旁边，并让它渐显：
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The end result looks like the following diagram:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是类似以下的图表结果：
- en: '![Creating a visualization](img/6542OS_06_03.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![创建可视化](img/6542OS_06_03.jpg)'
- en: Adding interactivity to your visualization allows you to present far more data
    than would normally be possible. Hiding data so that it can only be seen by moving
    the mouse over, or clicking on it prevents overwhelming your users while still
    providing the maximum amount of information.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 将交互性添加到您的可视化中，可以使您呈现比正常情况下更多的数据。隐藏数据，以便只有在移动鼠标或单击它时才能看到，可以防止让您的用户感到不知所措，同时仍提供最多的信息。
- en: Filters
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过滤器
- en: The data returned by our query isn't exactly what we want. For instance, we
    don't care about `last_edit_date` or even the `last_activity_date`, but we do
    care about the number of up and down votes. By pulling extra data back, we're
    wasting bandwidth and slowing down the visualization for our users. Fortunately,
    Stack Overflow has a solution for that in the form of filters.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的查询返回的数据并不是我们想要的确切数据。例如，我们不在乎`last_edit_date`甚至是`last_activity_date`，但我们关心的是赞成和反对票的数量。通过拉回额外的数据，我们正在浪费带宽，并减慢用户的可视化速度。幸运的是，Stack
    Overflow有一个解决方案，那就是过滤器。
- en: Tip
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Deep queries**'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**深度查询**'
- en: If you find that you need to explore the Stack Overflow data in greater depth
    than is provided for by the API, you can download a dump of the entire site at
    [http://www.clearbits.net/creators/146-stack-exchange-data-dump](http://www.clearbits.net/creators/146-stack-exchange-data-dump).
    This dump is provided every three months, and currently clocks in at 13.4 GB compressed.
    With this dump, you can run much more complex queries without the fear of hitting
    a rate limit.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您发现需要比API提供的更深入地探索Stack Overflow数据，您可以从[http://www.clearbits.net/creators/146-stack-exchange-data-dump](http://www.clearbits.net/creators/146-stack-exchange-data-dump)下载整个网站的数据转储。这个转储每三个月提供一次，目前压缩后为13.4
    GB。有了这个转储，您可以在不担心达到速率限制的情况下运行更复杂的查询。
- en: Filters govern what data is returned from the API, and can be used to either
    add or remove fields. They are statically created so you should only need to create
    them once and there is no need to create a new filter each time you query the
    site, or even each time your application is launched. In fact, I actually make
    use of the API explorer provided by Stack Exchange to create my filters ahead
    of time. The URL for creating filters is [https://api.stackexchange.com/docs/create-filter](https://api.stackexchange.com/docs/create-filter).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 过滤器控制从API返回的数据，可以用来添加或删除字段。它们是静态创建的，所以您只需要创建一次，您不需要在每次查询网站时，甚至每次应用程序启动时都创建一个新的过滤器。实际上，我实际上利用了Stack
    Exchange提供的API浏览器来提前创建我的过滤器。创建过滤器的URL是[https://api.stackexchange.com/docs/create-filter](https://api.stackexchange.com/docs/create-filter)。
- en: 'In the **include** field, you can place a semi-colon to include a delimited
    series of names. Everything which is part of the answer object is prefaced by
    answer, so the answer owner would be referred to as `answer.owner`. The default
    filter is quite inclusive so as a base filter I''ve used the special `none` filter.
    This includes no fields unless they are explicitly included. Using the `none`
    filter as a base is the best practice to reduce excess queries, as shown in the
    following figure:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在**包括**字段中，您可以放置一个分号来包括由分隔符指定的名称系列。属于答案对象的所有内容都以前缀answer，所以答案所有者被称为`answer.owner`。默认过滤器非常包容，因此作为基本过滤器，我使用了特殊的`none`过滤器。这个过滤器除非明确包括，否则不包含任何字段。将`none`过滤器作为基础是减少过量查询的最佳实践，如图所示：
- en: '![Filters](img/6542OS_06_04.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![Filters](img/6542OS_06_04.jpg)'
- en: 'If you do start with the `none` filter, be sure to add the tokens `.items`
    and `.has_more` to the include list. Without items, the items collection—which
    holds either questions, answers, or users depending on the query—isn''t included
    and `has_more` is needed to tell if there are additional pages. For our purposes,
    the following filter is perfect:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你从`none`过滤器开始，请确保在包含列表中添加令牌`.items`和`.has_more`。没有项目，项目集合（根据查询持有问题、答案或用户）不包括在内，并且需要`has_more`来判断是否有其他页面。对我们来说，以下过滤器是完美的：
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The `create` filter returns an alpha-numeric string which can then be used
    in our query to filter it appropriately. The URL against which we''re querying
    becomes the following:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`create`过滤器返回一个字母数字字符串，然后可以在我们的查询中使用以适当地过滤它。我们查询的URL如下：'
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: By using a filter, I was able to reduce the payload returned from the API to
    3kB from 22kB. This is a significant saving, especially over low bandwidth connections.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用过滤器，我能够将API返回的负载从22kB减少到3kB。这对于低带宽连接尤其节省大量数据。
- en: Summary
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: You should now be able to query against the Stack Exchange API for not just
    the Stack Overflow but for all the Stack Exchange sites. You should also have
    some idea of how to add interactivity to your visualizations through the use of
    `d3`. In the next chapter we'll take a look at using Facebook as a source of data
    to visualize.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你应该能够使用Stack Exchange API不仅查询Stack Overflow，还可以查询所有Stack Exchange网站。你也应该对如何使用`d3`为你的可视化添加交互性有一些了解。在下一章，我们将探讨如何使用Facebook作为数据来源进行可视化。
