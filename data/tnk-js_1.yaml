- en: Chapter 1. Thinking in JavaScript
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章. JavaScript思维方式
- en: JavaScript is a scripting language for the Web. Before we delve into the intricacies
    of JavaScript, we need to know why it is used. While HTML tells your browser how
    the page will look, JavaScript will be used for dynamic content and to add functionality.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript是一种用于Web的脚本语言。在深入研究JavaScript的复杂性之前，我们需要知道它为何被使用。尽管HTML能告诉您的浏览器页面将呈现何种外观，但JavaScript将用于动态内容以及增加功能。
- en: 'The prerequisites for getting started with JavaScript are as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 开始学习JavaScript的先决条件如下：
- en: Prior knowledge of HTML
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对HTML的先前知识
- en: A text editor such as Notepad
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个文本编辑器，例如记事本
- en: JavaScript enabled on your web browser
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的网页浏览器上已启用JavaScript
- en: JavaScript does not require a compiler to execute the code. JavaScript can be
    embedded within the HTML code. The web browser interprets the JavaScript while
    the page loads.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript不需要编译器来执行代码。JavaScript可以嵌入HTML代码中。当页面加载时，网络浏览器解释JavaScript。
- en: In this book, we are going to use a practical approach so that we can gain more
    insight into JavaScript. By the end of the book, we should be able to understand
    the concepts of JavaScript so that we can implement it in our real-life applications.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将采用一种实用方法，以便我们能对JavaScript有更深入的了解。到本书结束时，我们应该能够理解JavaScript的概念，以便我们能够在现实生活中的应用程序中实现它。
- en: Applying JavaScript
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用JavaScript
- en: Instead of beating around the bush and wandering through loads of theory, we
    will start with a simple code right away.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 与其拐弯抹角，迷失在大量的理论中，不如直接开始一个简单的代码。
- en: 'Let''s look at the following code to understand how JavaScript is applied to
    a web page:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下以下代码，以了解JavaScript是如何应用于网页的：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'When we look at this code, we can see that we have included a line: `script
    type="text/javascript"` in the `<head>` section. The `script` tag and its `type
    attribute` tell the browser that we have introduced a JavaScript in the HTML code.
    We can also see that there is an `alert` command in the code. We will talk about
    the `alert` command later in this book. On executing the code, we can see the
    following output on the screen:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们查看此代码时，我们可以看到在`<head>`部分包含了一行：`script type="text/javascript"`。`script`标签及其`type属性`告诉浏览器我们在HTML代码中引入了JavaScript。我们还可以看到代码中有一个`alert`命令。我们将在本书的后面章节中讨论`alert`命令。执行代码后，我们可以在屏幕上看到以下输出：
- en: '![Applying JavaScript](img/Image00002.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![应用JavaScript](img/Image00002.jpg)'
- en: We can see that the JavaScript code must be inserted between the `<script>`
    and `</script>` tags.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，JavaScript代码必须插入到`<script>`和`</script>`标签之间。
- en: Our JavaScript code can be kept in the `<head>` or `<body>` tags. It is a matter
    of choice and depends on the web page. If there are a lot of styles and videos,
    it is preferable to keep the JavaScript code in the `<body>` tag. This ensures
    that the web page and its resources have been loaded completely before JavaScript
    comes into the picture. Another reason is that any resource, except for a JavaScript
    file, loads asynchronously. However, when a JavaScript file is being loaded, it
    happens one at a time. This hampers the performance.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的JavaScript代码可以放在`<head>`或`<body>`标签中。这是取决于网页的选择问题。如果有很多样式和视频，最好将JavaScript代码放在`<body>`标签中。这确保了在JavaScript发挥作用之前，网页及其资源已经完全加载。另一个原因是，除了JavaScript文件以外的任何资源都是异步加载的。然而，当加载JavaScript文件时，它是逐个加载的。这会影响性能。
- en: 'We must understand that if there is a lot of code to be written, it is always
    systematic to keep the JavaScript code separate from the HTML code. In this book,
    we will embed JavaScript in the HTML between the `<script>` tags for the sake
    of convenience. However, in real-world situations, it is good practice to keep
    the JavaScript code as a standalone. For that, we need to create a standalone
    JavaScript file and save it with a `.js` extension. The JavaScript code must be
    written in this separate `.js` file. Suppose we create a JavaScript file called
    `main.js` . We then invoke the `main.js` file in our HTML code. Let''s have a
    look at a code example to view the procedure:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须明白，如果有很多代码要编写，总是系统地将JavaScript代码与HTML代码分开是很有系统的。在本书中，为了方便起见，我们将把JavaScript代码嵌入到HTML代码之间的`<script>`标签中。然而，在现实情况下，将JavaScript代码作为独立的文件是一个好的实践。为此，我们需要创建一个独立的JavaScript文件并将其保存为`.js`扩展名。JavaScript代码必须写在这个单独的`.js`文件中。假设我们创建了一个名为`main.js`的JavaScript文件。然后在我们的HTML代码中调用`main.js`文件。让我们来看一个代码示例，以查看该过程：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In the `.js` file, we need to write the following code snippet:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在`.js`文件中，我们需要编写以下代码片段：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'When we execute the code, we will get the same output as shown in the earlier
    example. As we can see, we have invoked the `main.js` file by using the following
    code in our HTML file:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们执行代码时，我们将得到与前面示例相同的输出。正如我们所见，我们通过在 HTML 文件中使用以下代码调用了 `main.js` 文件：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here, the `main.js` file should be on the same path as the HTML file. If it
    is in a different folder, we need to specify the entire path.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`main.js` 文件应该与 HTML 文件在同一目录下。如果它在不同的文件夹中，我们需要指定整个路径。
- en: Thereby, we have seen the procedure to applying JavaScript in our code.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们已经了解了如何在代码中应用 JavaScript 的过程。
- en: Variables
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变量
- en: In JavaScript, we need containers that will store data and values for processing
    purposes. Hence, we use variables in JavaScript. We can assign a numeric or a
    string value to a variable. A string needs to be enclosed in quotes. We also have
    the concept of constants. A **constant** is assigned a value that is permanent
    in the script, unlike variables where the values can be changed.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 中，我们需要容器来存储用于处理的数据和值。因此，我们在 JavaScript 中使用变量。我们可以将数字或字符串值赋给变量。字符串需要用引号括起来。我们还有常量的概念。**常量**
    被分配一个在脚本中永久的值，与变量不同，变量的值可以被改变。
- en: 'Let''s have a look at the way we declare variables and constants in JavaScript:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看在 JavaScript 中我们是如何声明变量和常量的：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: It is quite evident that the variable should be preceded by the `var` keyword
    whereas constants must be preceded by the `const` keyword. We can also see that
    the value can be assigned to a variable at the time of declaring it.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 很明显，变量应该由 `var` 关键字前缀，而常量必须由 `const` 关键字前缀。我们还可以看到，在声明时可以将值赋给变量。
- en: Note
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '`const` is compatible with modern versions of all browsers except Internet
    Explorer.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`const` 兼容所有现代浏览器版本，除了 Internet Explorer。'
- en: A variable can be either local or global. Let's look at how we differentiate
    between local and global variables.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 变量可以是局部的或全局的。让我们看看如何区分局部变量和全局变量。
- en: Note
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Remember that JavaScript is case-sensitive. Hence "myAttribute" is *not* the
    same as "myattribute". One more point to note is that every statement ends with
    a semicolon. Spaces inside the quotes will be reflected in the output.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，JavaScript 是大小写敏感的。因此 "myAttribute" 与 "myattribute" 是 *不同的*。还需要注意的一点是，每条语句都以分号结束。引号内的空格将在输出中反映出来。
- en: Global and local variables
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 全局变量和局部变量
- en: '**Global variables** can be accessed from any location in the script, whereas
    **local variables** can be accessed only within the function.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**全局变量** 可以从脚本中的任何位置访问，而 **局部变量** 只能在函数内部访问。'
- en: 'Let''s have a look at the following code to understand it better:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下以下代码以更好地理解它：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the code, `a` as well as `b` have been passed as arguments to the function.
    `a` and `b` are local variables that can be accessed only within the function,
    as they exist in the function. However, `z` is declared outside the function and
    hence is a global variable.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码中，`a` 以及 `b` 被作为参数传递给函数。`a` 和 `b` 是局部变量，只能在函数内部访问，因为它们存在于函数中。然而，`z` 是在函数外部声明的，因此是一个全局变量。
- en: 'We can see the output of the executed code in the following screenshot:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到以下屏幕截图中执行代码的输出：
- en: '![Global and local variables](img/Image00003.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![全局和局部变量](img/Image00003.jpg)'
- en: Functions will be explained under the heading *Functions* in this book, so let's
    stick to variables as of now.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 函数将在本书的“函数”一节中解释，所以目前让我们专注于变量。
- en: 'To understand the scope and concept of variables better, let''s have a look
    at the following code:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解变量的作用域和概念，让我们来看一下以下代码：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'On execution, we see three alerts in the following order :'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 执行后，我们按照以下顺序看到三个警告：
- en: Packt Publishing has an online book library
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Packt Publishing 有一个在线图书图书馆
- en: Welcome to Packt
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 欢迎来到 Packt
- en: Packt publishes Books on Technology
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Packt 出版科技书籍
- en: From the output, it is quite evident that the function can access the local
    variable (hence the first alert) as well as the global variable (hence the second
    alert). However, anything outside a specific function cannot access the variables
    inside that function (hence the third alert). That clears the concept of global
    and local variables.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 从输出中可以看出，函数可以访问局部变量（因此第一个警告）以及全局变量（因此第二个警告）。然而，任何特定函数之外的代码无法访问该函数内的变量（因此第三个警告）。这清楚地解释了全局变量和局部变量的概念。
- en: Operators
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作符
- en: 'The three types of commonly used operators in JavaScript are as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 中常用的三种操作符如下：
- en: Arithmetic operators
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 算术操作符
- en: Logical operators
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 逻辑操作符
- en: Comparison operators
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比较操作符
- en: Arithmetic operators
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 算术操作符
- en: 'The following table displays the various kinds of Arithmetic operators:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格显示了各种算术操作符：
- en: '![Arithmetic operators](img/Image00004.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![算术操作符](img/Image00004.jpg)'
- en: The operators mentioned in the table are used for Arithmetic operations.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 表中提到的操作符用于算术运算。
- en: The **Addition** , **Subtraction** , **Multiplication** , and **Division** operators
    are self explanatory. The **Modular** operator (%) is used for the remnant left
    after division (we call this the modulus). Increment operators are used to increase
    the value by one whereas the decrement operator is used to decrease the value
    by one.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**加法**、**减法**、**乘法**和**除法**操作符是容易理解的。**取模**操作符（%）用于除法后的余数（我们称之为模数）。递增操作符用于将值增加1，递减操作符用于将值减少1。'
- en: For example, `x=x+1` can also be written as `x++` whereas `y=y-1` can be written
    as `y--` .
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`x=x+1` 也可以写成 `x++`，而 `y=y-1` 可以写成 `y--`。
- en: Logical operators
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 逻辑操作符
- en: 'The following table displays the different types of logical operators:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格显示了不同类型的逻辑操作符：
- en: '![Logical operators](img/Image00005.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![逻辑操作符](img/Image00005.jpg)'
- en: The **AND** operator is used when all the conditions must be satisfied. For
    example, `X>5 && y=5` means that `x` should be greater than 5 and `y` must be
    equal to 5 for the condition to be true.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**AND** 操作符用于当所有条件都必须满足时。例如，`X>5 && y=5` 的意思是 `x` 应该大于 5 且 `y` 必须等于 5 条件才为真。'
- en: The **OR** operator is used when one of the conditions must be true. For example,
    `x=5 || y<3` means that the condition is true when `x` is equal to 5 or `y` is
    less than 3.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**OR** 操作符用于当一个条件为真时。例如，`x=5 || y<3` 的意思是当 `x` 等于 5 或 `y` 小于 3 时条件为真。'
- en: The **NOT** operator is used when the antithesis is true. For example, `!(x>5)`
    is true when `x` is equal to or less than 5.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**NOT** 操作符用于当反面为真时。例如，`!(x>5)` 当 `x` 等于或小于 5 时为真。'
- en: Conditions and Loops
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 条件和循环
- en: 'The main purpose of JavaScript is to add dynamic functionality. In order to
    execute a lot of actions and iterations, we have the concept of conditions and
    loops in JavaScript. The `if-else` statement is primarily used for various conditions.
    The structure of the `If-else` statement is as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript的主要目的是添加动态功能。为了执行许多动作和迭代，JavaScript中有条件和循环的概念。`if-else` 语句主要用于各种条件。`If-else`
    语句的结构如下：
- en: '[PRE7]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'For example, consider the following code snippet:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑以下代码片段：
- en: '[PRE8]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The interpretation of this code is simple. If the value of `i` is greater than
    5, the value of `x` will be `50` . If the value of `i` is not greater than `5`
    , then the value of `x` will be `100` .
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码的解释很简单。如果 `i` 的值大于 5，`x` 的值将是 `50`。如果 `i` 的值不大于 `5`，那么 `x` 的值将是 `100`。
- en: At times, we know the number of iterations to be performed. Suppose we need
    to execute the code and get the output, say 10 times. At that time, we use loops
    to perform multiple iterations as we know the number of times the loop will be
    repeated. We will see an example of the `for` loop in this chapter.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们知道要执行的迭代次数。比如说，我们需要执行代码并得到输出，比如10次。在这种情况下，我们使用循环来执行多次迭代，因为我们知道循环将重复的次数。在本章中，我们将看到
    `for` 循环的一个例子。
- en: 'The structure of the `for` loop is as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`for` 循环的结构如下：'
- en: '[PRE9]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Let us have a look at a code snippet:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个代码片段：
- en: '[PRE10]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The output of the code on execution would be as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 代码执行后的输出将如下所示：
- en: '![Conditions and Loops](img/Image00006.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![条件和循环](img/Image00006.jpg)'
- en: Functions
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 函数
- en: Functions are an integral part of JavaScript. Let's understand the concept of
    functions. We know that the imperative purpose of JavaScript is to add functionality
    to the web page. Say, we want to add certain functionality in JavaScript. Suppose
    we need to implement it on different pages of the website or different places
    on the same web page. Instead of adding functionality each time, we can use the
    concept of functions where we can declare the function once. From there on, we
    can use it multiple times on multiple web pages or at different places on the
    website.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 函数是JavaScript的重要组成部分。让我们来理解一下函数的概念。我们知道JavaScript的命令目的是为了给网页添加功能。比如说，我们想在JavaScript中添加某些功能。假设我们需要在网站的不同页面或同一网页的不同地方实现它。我们不是每次都添加功能，而是可以利用函数的概念，一次性声明函数。从那时起，我们可以在多个网页或网站上不同的地方多次使用它。
- en: 'There are many inbuilt functions in JavaScript. We can also craft our own functions
    in JavaScript and customize them according to our needs. Let''s look at the following
    code to understand how the functions work:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript中有很多内建函数。我们也可以在JavaScript中编写自己的函数，并根据需要进行定制。让我们看看下面的代码，了解函数是如何工作的：
- en: '[PRE11]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The execution of the code will give us the following output:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的执行将给我们以下输出：
- en: '![Functions](img/Image00007.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![函数](img/Image00007.jpg)'
- en: 'On clicking the **Click Here** link, we can see the following output:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**点击这里**链接，我们可以看到以下输出：
- en: '![Functions](img/Image00008.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![函数](img/Image00008.jpg)'
- en: We get a prompt box that requests for an input. Say we enter the name **Joe**
    and click on **OK** . We will get the following alert box as defined in the code.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到一个请求输入的提示框。比如说我们输入了名字`Joe`并点击了`OK`。我们将得到以下定义在代码中的警告框。
- en: '![Functions](img/Image00009.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![函数](img/Image00009.jpg)'
- en: 'Let''s now understand how the code works. We have used two inbuilt functions
    in the code:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们了解代码是如何工作的。我们在代码中使用了两个内建函数：
- en: '`alert`'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`alert`'
- en: '`prompt`'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`prompt`'
- en: '`alert` and `prompt` are inbuilt functions in JavaScript.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`alert`和`prompt`是JavaScript的内建函数。'
- en: Note
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: JavaScript is case-sensitive; hence, we must use lowercase for `alert` and `prompt`
    , otherwise the code will not work.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript是大小写敏感的；因此，我们必须使用小写字母`alert`和`prompt`，否则代码将无法工作。
- en: The `alert` and `prompt` functions are commonly used in JavaScript. An alert
    box is used when we need to inform the user about some development. It is also
    used when we want to give the user some information prior to clicking on a link
    or surfing the website. Similarly, a prompt box is used when we want an input
    from the user before he accesses the page.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`alert`和`prompt`函数在JavaScript中经常使用。当我们需要通知用户某些发展时，使用警告框。它也用于在用户点击链接或浏览网站之前给用户一些信息。同样，当我们在用户访问页面之前需要用户输入时，使用提示框。'
- en: If you observe the code, it is quite evident that the `PacktPub()` function
    was declared prior to calling it. In the `PacktPub()` function, we have used the
    `prompt` and `alert` functions. The `prompt` command on execution will prompt
    the user for an input. The double quotes (`""` ) after `Hey` are for the default
    string that has to be entered as the input. In the code, `x` is a variable that
    is assigned a `prompt` function. Again, `x` is used in the `alert` command in
    the very next line.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你观察代码，可以明显看出`PacktPub()`函数在调用之前被声明了。在`PacktPub()`函数中，我们使用了`prompt`和`alert`函数。执行`prompt`命令时，将提示用户输入。`Hey`后面的双引号（`""`）是作为默认输入的字符串。在代码中，`x`是一个变量，被分配了一个`prompt`函数。再次，`x`在接下来的同一行`alert`命令中使用。
- en: 'Once we enter the name `Joe` , we get an alert: `Welcome to Packt, Joe` .'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们输入了名字`Joe`，我们就会得到一个警告：`欢迎来到Packt，Joe`。
- en: The concept of functions must be clear by now. Functions are used extensively
    in JavaScript and are widely used to return a value in real-world programming.
    Hence, functions are an imperative part of JavaScript.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 到现在为止，函数的概念应该是清晰的。函数在JavaScript中广泛使用，并在实际编程中广泛用于返回值。因此，函数是JavaScript的重要组成部分。
- en: Objects and their role in JavaScript
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对象及其在JavaScript中的作用
- en: JavaScript is an object-oriented language. We have inbuilt objects such as `Math`
    , `Date` , and `Document` , to mention a few. However, we can also create our
    own objects and customize them to suit our needs.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript是一种面向对象的语言。我们有如`Math`、`Date`和`Document`等内建对象，提及几个。然而，我们也可以创建自己的对象，并定制它们以满足我们的需求。
- en: An object has properties and methods to define it. These are attributes that
    give meaning to the object-oriented concept in JavaScript. A **property** is an
    attribute that defines values for the object. Methods define the action that can
    be implemented on the objects.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 对象有属性和方法来定义它。这些属性使JavaScript中的面向对象概念具有意义。**属性**是定义对象值的属性。方法定义可以在对象上实现的动作。
- en: 'Let''s have a look at the following code to understand how properties define
    values for an object:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下以下代码，了解属性是如何为对象定义值的：
- en: '[PRE12]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The output of the code would be as follows:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的输出将如下所示：
- en: '![Objects and their role in JavaScript](img/Image00010.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![JavaScript中的对象和它们的作用](img/Image00010.jpg)'
- en: Thus, we have defined properties for a dog called Monster. If you observe the
    code and the output, we can see that we have connected the properties using string
    values connected by an operator known as the concatenation operator. The concatenation
    operator is used to connect several pieces of text together. One point to remember
    is that the empty space in the string is taken into consideration. Observe how
    we have a space preceding and following the " is a dog that has " string and how
    it reflects in the output. Coming back to objects, we have defined the properties
    for the dog by specifying its name, age, and eye color.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们为一只名叫Monster的狗定义了属性。如果你观察代码和输出，我们可以看到我们使用连接符将属性连接起来，这个连接符被称为连接操作符。连接操作符用于将几个文本片段连接在一起。需要记住的一点是，字符串中的空格会被考虑进去。看看我们在"
    is a dog that has "字符串前后的空格，以及它在输出中的反映。回到对象，我们通过指定狗的名字、年龄和眼睛颜色来定义狗的属性。
- en: In JavaScript, all the user-defined objects and the inbuilt objects belong to
    an object called `Object` . Let's understand the concept of the `new` operator
    and the constructor function. In the earlier code, there is a line of code `var
    animal=new Object();` . Hence, it is evident that the `new` operator is used to
    create an instance of the object. The constructor used in this case is `Object()`
    . The `new` operator is always followed by a constructor method. That explains
    the code structure to create a new object.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，所有的用户定义的对象和内置对象都属于一个名为`Object`的对象。让我们来了解一下`new`操作符和构造函数的概念。在之前的代码中，有一行代码`var
    animal=new Object();`。因此，很明显`new`操作符是用来创建对象实例的。这里使用的构造函数是`Object()`。`new`操作符总是后面跟着一个构造方法。这解释了创建新对象代码的结构。
- en: 'Instead of the inbuilt functions, we can also use user-defined functions. Let''s
    have a look at the following code to understand how it works:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不仅可以使用内置函数，还可以使用用户自定义的函数。让我们看看下面的代码来了解它是如何工作的：
- en: '[PRE13]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The output of the code would be as follows:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的输出如下：
- en: '![Objects and their role in JavaScript](img/Image00011.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![JavaScript中的对象及其作用](img/Image00011.jpg)'
- en: We need to understand that a function and method are very similar. The only
    difference is that a **function** is a standalone bunch of statements whereas
    a **method** belongs to an object and can be referenced by the `this` keyword.
    In the code, we have defined the `rate` function that will act as the method;
    then we assign the `rate` method as a property in the function prose. Hence, we
    have seen the concept of properties and methods in JavaScript objects.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要理解函数和方法是非常相似的。唯一的区别是，**函数**是一组独立的语句，而**方法**属于一个对象，可以通过`this`关键字来引用。在代码中，我们定义了`rate`函数作为方法；然后我们将`rate`方法作为函数属性赋值。因此，我们在JavaScript对象中看到了属性和方法的概念。
- en: As we mentioned, JavaScript is an object-oriented language. As with any object-oriented
    language, the OOP concept applies to JavaScript as well. **Encapsulation** , **Inheritance**
    , **Abstraction** , and **Polymorphism** are features of OOP that can be applied
    to JavaScript.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们提到的，JavaScript是一种面向对象的语言。和任何面向对象的语言一样，OOP概念也适用于JavaScript。**封装**、**继承**、**抽象**和**多态**是OOP可以应用于JavaScript的特性。
- en: Arrays
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数组
- en: In many programming languages such as C++, Java, and PHP to mention a few, we
    use the concept of arrays. Similarly, we use the concept of arrays in JavaScript
    too. Objects in JavaScript store and allow manipulation of data. So far, we have
    seen variables that are restricted to a single piece of data. However, in an array,
    we can store multiple items and retrieve them with ease.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 像C++、Java和PHP这样的许多编程语言都使用数组的概念。同样，我们在JavaScript中也使用数组的概念。JavaScript中的对象用于存储和操作数据。到目前为止，我们看到的变量都只限于单一的数据。然而，在数组中，我们可以存储多个项目，并且轻松地检索它们。
- en: 'Arrays can be created in different ways. Let''s have a look at the following
    code snippet to understand it better:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 数组可以通过不同的方式创建。让我们看看以下代码片段来更好地理解：
- en: '[PRE14]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We can also create an array by entering the items directly within the `new
    Array` constructor. The following code snippet will show how it works:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以通过直接在`new Array`构造函数中输入项目来创建数组。以下代码片段将展示它是如何工作的：
- en: '[PRE15]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We can also define an array without using the `new Array` constructor.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以不使用`new Array`构造函数来定义数组。
- en: '[PRE16]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The index position of an array starts with 0\. The index feature helps us in
    accessing the data stored in the array. Let''s say we define the array as follows:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 数组的索引位置从0开始。索引功能帮助我们访问数组中存储的数据。假设我们按照以下方式定义数组：
- en: '[PRE17]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: If we want to retrieve the third item in the array, we need to specify its index
    position.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要检索数组中的第三个项目，我们需要指定其索引位置。
- en: 'Let''s have a look at the following code to understand how it works:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看以下代码，了解它是如何工作的：
- en: '[PRE18]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The output of the following code would be as follows:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码的输出将如下所示：
- en: '![Arrays](img/Image00012.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![数组](img/Image00012.jpg)'
- en: 'An array has inbuilt properties and methods. For example, `length` is a property
    of arrays. Let''s have a look at the following code to see how it works:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 数组有内置的属性和方法。例如，`length`是数组的属性。让我们看看以下代码，了解它是如何工作的：
- en: '[PRE19]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The output of the code would be `3` .
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的输出将是`3`。
- en: 'In brief, let''s look at the various properties and methods of arrays:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 简要地，让我们看看数组的各种属性和方法：
- en: '**push** : To add an item at the end of the array'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**push** ：在数组的末尾添加一个项'
- en: '**pop** : To remove an item at the end of the array'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**pop** ：删除数组末尾的项'
- en: '**reverse** : To reverse the order of elements in the array'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**reverse** ：反转数组中元素的顺序'
- en: '**toString** : To convert an array to a string'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**toString** ：将数组转换为字符串'
- en: '**sort** : To sort items alphabetically or numerically in an ascending or descending
    order'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**sort** ：按字母或数字顺序对项目进行升序或降序排序'
- en: An overview on jQuery – the need of the hour
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: jQuery概述——当务之急
- en: jQuery, a multi-browser JavaScript library, was invented by John Resig. It is
    an open source library. Modern complex websites that have a lot of animation and
    navigation can be developed with ease using jQuery. **jQuery mobile** ( **JQM**
    ) is also an offshoot of jQuery. With the advent of smartphones and tablets, responsive
    web design is the trend today. Responsive web design can be achieved with the
    use of jQuery.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery是一个多浏览器JavaScript库，由John Resig发明。它是一个开源库。运用jQuery可以轻松地开发带有大量动画和导航的现代复杂网站。**jQuery移动**（**JQM**）也是jQuery的一个分支。随着智能手机和平板电脑的出现，响应式网页设计成为当今的趋势。利用jQuery可以实现响应式网页设计。
- en: Adding jQuery to the web page
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将jQuery添加到网页
- en: 'jQuery can be added to the website in the following ways:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些将jQuery添加到网站的方法：
- en: Including jQuery locally by downloading a copy of the library
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过下载库的一个副本来在本地包含jQuery
- en: Including a hosted copy of jQuery
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含托管的jQuery副本
- en: Let's have a look at both of the procedures in the next sections.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看下面的两个程序。
- en: Including jQuery locally by downloading a copy of the library
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过下载库的一个副本在本地包含jQuery
- en: When we visit the jQuery website at [http://jquery.com/](http://jquery.com/)
    to download the copy of the library, we can view two different versions. The first
    version in the download section is the Minified Production jQuery version, whereas
    the second version is the Uncompressed Development version. There is a difference
    between the two.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们访问[http://jquery.com/](http://jquery.com/)下载库的副本时，我们可以看到两个不同的版本。下载部分中的第一个版本是Minified
    Production jQuery版本，而第二个版本是Uncompressed Development版本。这两个版本之间有区别。
- en: The Uncompressed Development version is readable and has lots of whitespaces
    and comments to understand the code better. Hence, it is recommended you use the
    Uncompressed Development version when you are learning jQuery or are in the development
    stage.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: Uncompressed Development版本可读性强，有很多空格和注释，以便更好地理解代码。因此，建议你在学习jQuery或开发阶段使用Uncompressed
    Development版本。
- en: The Minified Production version is precise and does not have the whitespaces
    as in the Uncompressed Development version. Moreover, the variables are given
    short names and the comments removed along with other compression tricks to reduce
    the size of the file as much as possible. Hence, during deployment, it is advisable
    to use the Minified version, as a shorter file has to be downloaded on loading
    the page. Let's see how we add the jQuery file locally.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: Minified Production版本精确，不像Uncompressed Development版本那样有空白。此外，变量被赋予简短的名字，注释被移除，以及其他压缩技巧，以尽可能减少文件的大小。因此，在部署时，建议使用Minified版本，因为较短的文件在加载页面时需要下载。让我们看看我们是如何将jQuery文件本地添加的。
- en: When we go to the website, we can view the Minified Production and Uncompressed
    Development versions. Click on the version of your choice and it will be loaded
    in the browser as shown in the following figure.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们访问网站时，我们可以查看Minified Production和Uncompressed Development版本。点击你选择的版本，它将像下面的
    figure 所示在浏览器中加载。
- en: 'In our case, we will download the Minified version:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的案例中，我们将下载压缩版：
- en: '![Including jQuery locally by downloading a copy of the library](img/Image00013.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![通过下载库的副本来本地包含jQuery](img/Image00013.jpg)'
- en: 'Copy the contents of the file and save it in a text file giving it an extension
    `.js` . In our case, we will save it as `latestjquery.js` . Make sure you are
    saving the file in the same directory as your project so that we can call it directly.
    The following code snippet displays the way we include jQuery in our website:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 复制文件内容并将其保存为文本文件，给它一个`.js`扩展名。在我们的案例中，我们将将其保存为`latestjquery.js`。确保您将文件保存在与您的项目相同的目录中，这样我们就可以直接调用它。以下代码片段显示了我们如何在网站上包含jQuery：
- en: '[PRE20]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In the preceding code, we have invoked `latestjquery.js` (our jQuery file) prior
    to any JavaScript code for example, (`ourjavascriptpage.js` ). Hence, it is quite
    evident that we need to include jQuery first as our code needs to find jQuery
    fully loaded before we use it. It is good practice to include the jQuery file
    in our `<head>` section as it has to be loaded completely. Let's now have a look
    at the second way of including jQuery to our website.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们在任何JavaScript代码（例如`ourjavascriptpage.js`）之前调用了`latestjquery.js`（我们的jQuery文件）。因此，很明显我们需要首先包含jQuery，因为我们的代码需要在使用它之前找到完全加载的jQuery。将jQuery文件包含在我们的`<head>`部分是一个良好的实践，因为它必须完全加载。现在让我们来看看将jQuery包含在我们网站上的第二种方法。
- en: Including a hosted copy of jQuery
  id: totrans-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 包含jQuery的托管副本
- en: We can use the **Content Delivery Network** ( **CDN** ) of Google or Microsoft
    to host the jQuery file. Let's have a look at the following code snippet to see
    how it works.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用Google或Microsoft的**内容交付网络**（**CDN**）来托管jQuery文件。让我们来看看以下代码片段，了解它是如何工作的。
- en: 'If we go to the Google CDN, we can see the following code snippet that has
    to be included in order to use jQuery:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们访问Google CDN，我们可以看到以下代码片段，必须包含在jQuery使用中：
- en: '[PRE21]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'If we go to the Microsoft CDN, we can see the following code snippet that has
    to be included in order to use jQuery:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们访问Microsoft CDN，我们可以看到以下代码片段，必须包含在jQuery使用中：
- en: '[PRE22]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We also have the minified version that can be used:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也有一个压缩版可以使用：
- en: '[PRE23]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Remember that we need to include this snippet before our JavaScript file as
    jQuery has to be loaded completely if we need to use it.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，我们需要在JavaScript文件之前包含这个代码片段，因为如果我们需要使用它，jQuery必须完全加载。
- en: Using the document ready feature
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用文档就绪功能
- en: 'Before we understand the document ready feature, let''s look at the following
    code:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们理解文档就绪功能之前，让我们看看以下代码：
- en: '[PRE24]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'On execution, we can see the following output:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 执行后，我们可以看到以下输出：
- en: '![Using the document ready feature](img/Image00014.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![使用文档就绪功能](img/Image00014.jpg)'
- en: According to the code, when we click on the text, an alert dialog box is displayed
    that reads `Welcome to Packt Publishing` .
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 根据代码，当我们点击文本时，会显示一个阅读“欢迎来到Packt出版社”的警告对话框。
- en: However, we do not see any alert box. This is because the events must be fired,
    or should perform the desired action, before the page loads. If you observe the
    code, the alert box is not displayed as the method is not called before the `click`
    event takes place. By using the document ready feature, we can solve this issue.
    Let's tweak the code a bit and include the document ready feature.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们并没有看到任何警告框。这是因为事件必须在页面加载之前触发，或执行期望的动作。如果你观察代码，警告框没有显示，因为方法在`click`事件发生之前没有调用。通过使用文档就绪功能，我们可以解决此问题。让我们稍微修改代码，并包含文档就绪功能。
- en: '[PRE25]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The code on execution will display the following output:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 执行代码后将显示以下输出：
- en: '![Using the document ready feature](img/Image00015.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![使用文档就绪功能](img/Image00015.jpg)'
- en: 'However, the difference here is that on clicking the text in the output, the
    following alert box gets displayed:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这里的区别是，在输出的文本上点击后，将显示以下警告框：
- en: '![Using the document ready feature](img/Image00016.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![使用文档就绪功能](img/Image00016.jpg)'
- en: 'Hence, it is a good practice to include the document ready feature in jQuery.
    We have to use the following syntax to implement the document ready feature:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在jQuery中包含文档就绪功能是一个良好的实践。我们必须使用以下语法来实现文档就绪功能：
- en: '[PRE26]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: If we observe the code snippet, the function is the callback function that has
    to be executed once the document gets ready for implementing jQuery. We can also
    observe a `$` sign. The `$` sign is the synonym for the `jQuery()` function. Instead
    of writing `jQuery` before the tag name, tag id, or class, we can use `$` . It
    simplifies and shows that it is a jQuery code snippet. Using the appropriate syntax
    makes up for cleaner and shorter code; this is of prime importance when the page
    loads.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们观察代码片段，函数是必须在文档准备好后执行的回调函数。我们还可以看到一个`$`符号。`$`符号是`jQuery()`函数的同义词。在标签名、标签ID或类之前，我们可以使用`$`而不是`jQuery`。它简化了，并显示它是一个jQuery代码片段。使用适当的语法可以使代码更简洁、更短；当页面加载时，这是非常重要的。
- en: Accessing DOM elements using jQuery
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用jQuery访问DOM元素
- en: Similar to CSS, we can access elements in the **Document Object Model** ( **DOM**
    ) using jQuery. In JavaScript, we use the `getElementByID` function to access
    elements in the DOM by using their ID. However, we can do that in jQuery in a
    much shorter code.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 与CSS类似，我们可以在jQuery中使用**文档对象模型**（**DOM**）访问元素。在JavaScript中，我们使用`getElementByID`函数通过使用它们的ID来访问DOM中的元素。然而，我们可以在jQuery中用更短的代码做到这一点。
- en: Using the ID
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用ID
- en: 'Let''s have a look at the following code snippet to see how we access the elements
    by their IDs:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看以下代码片段，了解我们如何通过ID访问元素：
- en: '[PRE27]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: For an element with an ID `packt` , we can refer to it using the `#` operator
    similar to the way it is done in CSS. We need to remember that the ID has to be
    preceded by a `#` and should be enclosed in double quotes.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 对于具有ID `packt`的元素，我们可以使用`#`操作符来引用，这与在CSS中进行的方式相似。我们需要记住，ID前面必须有一个`#`，并且应该用双引号括起来。
- en: Using the class
  id: totrans-185
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用类
- en: 'Let''s have a look at the following code snippet to see how we access the elements
    by their class:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看以下代码片段，了解我们如何通过类名访问元素：
- en: '[PRE28]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: For an element defined with a class `pubman` , we can refer it using the dot
    (`.` ) operator. The class has to be preceded by a dot (`.` ) operator similar
    to the way it is done in CSS. However, the class has to be enclosed in double
    quotes.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 对于定义了类`pubman`的元素，我们可以使用点（`.`）操作符来引用。类前面必须有一个点（`.`）操作符，这与在CSS中进行的方式相似。然而，类必须用双引号括起来。
- en: Using the tag
  id: totrans-189
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用标签
- en: 'Let''s have a look at the following code snippet to see how we access the elements
    by their tag name:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看以下代码片段，了解我们如何通过标签名访问元素：
- en: '[PRE29]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The elements can be accessed by their tag name in jQuery by referring to the
    tag enclosed in double quotes.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在jQuery中，可以通过引用由双引号括起来的标签名来访问元素。
- en: Anonymous functions
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 匿名函数
- en: Let's have a look at the way we use anonymous functions in jQuery.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看在jQuery中如何使用匿名函数。
- en: 'The following code will give us an idea about its functionality:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码将让我们了解其功能：
- en: '[PRE30]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Let's understand the meaning of the code.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们理解代码的含义。
- en: The document ready feature has already been explained. Then we query the DOM
    for the element with the ID `packt` and we assign a `click` event to it. Inside
    the function, we have included the `remove` method, which will remove all `<div>`
    elements.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 文档准备功能已经解释过。然后我们查询具有ID `packt`的DOM元素，并为它分配一个`click`事件。在函数内部，我们包括了`remove`方法，这将删除所有`<div>`元素。
- en: Note
  id: totrans-199
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'For the various methods used in jQuery, we can have a look at books such as
    *jQuery for Designers: Beginner''s Guide* , which are on the Packt website at
    [www.packtpub.com](http://www.packtpub.com) . Alternatively, we can refer to the
    Packt online library at [http://packtlib.packtpub.com/](http://packtlib.packtpub.com/)
    .'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 对于jQuery中使用的各种方法，我们可以查看诸如《jQuery设计师：初学者指南》之类的书籍，这些书籍在 Packt 网站上有售，网址为[www.packtpub.com](http://www.packtpub.com)
    。另外，我们还可以参考 Packt 在线图书馆，网址为[http://packtlib.packtpub.com/](http://packtlib.packtpub.com/)
    。
- en: 'jQuery is widely used for animation. We will now have a look at the following
    code where we hide and show elements on the web page:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery广泛用于动画。现在让我们看看以下代码，了解我们如何在网页上隐藏和显示元素：
- en: '[PRE31]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Let''s have a look at the output of the code on execution:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看代码执行后的输出：
- en: '![Anonymous functions](img/Image00017.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![匿名函数](img/Image00017.jpg)'
- en: When we click on **Click here to Hide** , the box containing the text **Packt
    Publishing** vanishes. When we click on **Click here to Display** , the box appears
    again. We have used the `show()` method as well as the `hide()` method in the
    jQuery code. We have also specified the time in milliseconds for the transition
    to take place.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们点击**点击这里隐藏**时，包含文本**Packt Publishing**的盒子消失。当我们点击**点击这里显示**时，盒子再次出现。我们在jQuery代码中使用了`show()`方法以及`hide()`方法。我们还指定了过渡所需的时间（以毫秒为单位）。
- en: Hence, we can see how easy it is to create animations using jQuery. There are
    various other methods such as `toggle` and `fade` , to mention a few, but we cannot
    cover everything that jQuery has to offer in this book.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以看到使用jQuery创建动画是多么简单。还有其他各种方法，比如`toggle`和`fade`等，但是我们在本书中无法涵盖jQuery所提供的一切。
- en: 'jQuery is a vast subject and the book will only look at a certain aspect of
    it. Packt has a lot of books on jQuery such as *jQuery for Designers: Beginner''s
    Guide* , Packt Publishing, and you can visit our web page at [http://www.packtpub.com/books?keys=jquery](http://www.packtpub.com/books?keys=jquery)
    to see the various books on jQuery customized for your needs.'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 'jQuery是一个广泛的主题，本书只探讨其中的一个方面。Packt有很多关于jQuery的书籍，比如《jQuery for Designers: Beginner''s
    Guide》，Packt出版社出版，你可以访问我们网页上的[http://www.packtpub.com/books?keys=jquery](http://www.packtpub.com/books?keys=jquery)，查看各种针对您需求的jQuery书籍。'
- en: Coding gets better with practice. We would really appreciate if you copy the
    code mentioned in this book on an editor such as Notepad or Notepad++ and practice
    it. When you implement the things you have learned in this book in real life,
    you will realize how interesting it is to work on JavaScript practically. We have
    covered objects and arrays in this book. There are different kinds of objects
    such as the `Math` object and `Date` object, to mention a few. However, everything
    cannot be covered here.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 编程多练习就会更熟练。如果你能在Notepad或Notepad++等编辑器上复制本书提到的代码并进行练习，我们将非常感激。当你把在这本书中学到的知识应用到现实生活中时，你会发现实际操作JavaScript是多么有趣。本书涵盖了对象和数组。有各种各样的对象，比如`Math`对象和`Date`对象等。然而，不可能在这里涵盖一切内容。
