- en: Chapter 8. Web Workers and Promises
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章 Web工作者和承诺
- en: In the previous chapters, we addressed some common performance issues while
    dealing with common JavaScript issues that come up in general JavaScript development.
    Now, we come to the point where, assuming that our projects can support newer
    JavaScript features, we can make our code perform even better than before.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我们解决了一些在通用JavaScript开发中常见性能问题。现在，我们来到了一个假设我们的项目可以支持新JavaScript特性的点，我们可以使代码比以前表现得更好。
- en: This is where web workers and promises come into play. In this chapter, we will
    take a look at both and see how and when to use them. We will also discover their
    limitations and understand their benefits in terms of high-performance JavaScript.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是Web工作者和承诺发挥作用的地方。在本章中，我们将探讨两者并了解如何以及何时使用它们。我们还将发现它们的局限性，并理解它们在提高高性能JavaScript方面的优势。
- en: Understanding the limitations first
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 首先理解局限性
- en: Before diving into web workers and promises, we need to understand a concern
    with the JavaScript language itself. As mentioned in past chapters, JavaScript
    is single-threaded and cannot support two or more methods running at the same
    time.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入探讨Web工作者和承诺之前，我们需要了解与JavaScript语言本身有关的一个问题。如前几章所述，JavaScript是单线程的，无法支持同时运行两个或更多方法。
- en: For many years, we as JavaScript developers never really had to concern ourselves
    with threading, let alone the JavaScript memory issues that we have covered in
    the course of this book. Most of our code existed inside a browser, and ran on
    the same page either inline, or linked externally to a file on the same server,
    for basic web page functionality.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，作为JavaScript开发者，我们实际上从未真正关心过线程，更不用说本书中介绍的JavaScript内存问题了。我们的代码大部分存在于浏览器中，在同一页面内以内联方式运行，或者与同一服务器上的文件外部链接，以实现基本网页功能。
- en: As the Web moves forward, with originally frontend coding becoming more and
    more necessary for high-performing applications, newer ways of handling larger
    JavaScript applications are needed. Today, we consider these newer features as
    a part of the *ECMAScript 5* feature set.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 随着Web的发展，原本的前端编码对于高性能应用程序变得越来越必要，处理更大JavaScript应用程序的新方法也应运而生。今天，我们将这些新特性视为ECMAScript
    5特性集的一部分。
- en: In ECMAScript 5, many of these features were rolled into what many consider
    to be the HTML5 stack. This stack consists of HTML5 (the `DOCTYPE` and `HTML`
    tags), CSS version 3.0, and ECMAScript 5.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在ECMAScript 5中，许多这些特性被整合到许多人认为的HTML5堆栈中。这个堆栈包括HTML5（`DOCTYPE`和`HTML`标签）、CSS
    3.0版本和ECMAScript 5。
- en: These technologies make the Web much more powerful than the days of AJAX and
    XHTML development. The limitation is that these features are cutting-edge and
    may or may not work with every browser. So, using these newer features usually
    requires a bit for forethought before their implementation in a project.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这些技术使得Web比AJAX和XHTML开发时代强大得多。局限性在于这些特性是尖端技术，可能与所有浏览器都兼容，也可能不兼容。因此，在项目实施之前，使用这些新特性通常需要仔细思考。
- en: We've talked about some of these features since [Chapter 2](ch02.html "Chapter 2. Increasing
    Code Performance with JSLint"), *Increasing Code Performance with JSLint*, including
    the `use strict` statement, which forces the browser to throw an error if something
    in JavaScript isn't strictly written or coded correctly. Now you may ask why we
    are using the `use strict` statement if it isn't supported in all browsers. The
    trick with the `use strict` statement is that, when it's coded for an older browser,
    it shows up as a string and is ignored.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从第二章*使用JSLint提高代码性能*开始就已经讨论过这些特性，包括`use strict`声明，它强制浏览器在JavaScript代码有严格书写或编码错误时抛出错误。也许你会问，既然`use
    strict`在所有浏览器中都得不到支持，我们为什么还要使用它。`use strict`声明的技巧在于，当为老浏览器编写时，它显示为一个字符串并被忽略。
- en: This is a great thing because, even if it is ignored in older browsers, we can
    still use this newer feature and write more efficient code. Unfortunately, that
    doesn't translate to all features in ECMAScript 5; this includes web workers and
    promises.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一件好事，因为即使它在老浏览器中被忽略，我们仍然可以使用这个新特性并编写更高效的代码。不幸的是，这并不能推广到ECMAScript 5的所有特性；这包括Web工作者和承诺。
- en: So in this chapter, let's keep in mind that henceforth, while working with code
    samples, we need to focus our testing and coding on a newer browser such as Google
    Chrome, Opera, Firefox, or Apple's Safari, and even newer versions of Internet
    Explorer that follow the same standards.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在本章中，让我们记住，从现在开始，在处理代码示例时，我们需要将测试和编码集中在像Google Chrome、Opera、Firefox或苹果的Safari这样的较新浏览器上，甚至包括遵循相同标准的Internet
    Explorer的新版本。
- en: Web workers
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网页工作者
- en: Web workers give JavaScript developers like us a way to build multi-threaded
    JavaScript applications; this works in newer browsers as we have an object called
    a **worker**. A worker object is simply an external JavaScript file that we pass
    logic to.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 网页工作者为我们这些JavaScript开发者提供了一种构建多线程JavaScript应用程序的方法；这项技术在较新的浏览器中可行，因为我们有一个名为**工作者**的对象。工作者对象本质上是一个外部的JavaScript文件，我们向其传递逻辑。
- en: 'Now, this may seem a little odd. Haven''t we worked with external JavaScript
    files, since the beginning of JavaScript? Fair enough, but web workers are a bit
    new in terms of how a browser handles the execution of files in the DOM. Let''s
    take a look at the following sample diagram on how a browser reads a file:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这可能看起来有点奇怪。自从JavaScript诞生以来，我们不是一直在使用外部JavaScript文件吗？这个观点是正确的，但是网页工作者在浏览器处理DOM中文件执行的方式上有点新。让我们看看以下示例图表，了解浏览器如何读取文件：
- en: '![Web workers](img/7296OS_08_01.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![网页工作者](img/7296OS_08_01.jpg)'
- en: 'So here we have a single-threaded JavaScript application, a `DOMContentLoaded`
    event, and a `window.onload` event triggering shortly after, followed by the functions
    simply named as: `function1`, `function2`, `function3` respectively. Now, what
    if we had the `function2()` function perform some complex `for` loop such as calculating
    pi 5 million times while `console.log(Shakespeare)` is checking the time? Well,
    we can see that in the following diagram:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，这里我们有一个单线程JavaScript应用程序，一个`DOMContentLoaded`事件，紧接着是`window.onload`事件，然后是简单命名的函数：`function1`、`function2`、`function3`分别触发。现在，如果我们的`function2()`函数执行一些复杂的`for`循环，比如计算500万次π，而`console.log(Shakespeare)`正在检查时间呢？好的，我们可以从以下图表中看到：
- en: '![Web workers](img/7296OS_08_02.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![网页工作者](img/7296OS_08_02.jpg)'
- en: As we can see, once the browser calls `function2()`, it locks up and hangs until
    it can complete its execution, (assuming that the system running the code has
    enough memory to execute). Now an easy way to fix this would be to say, "Hey,
    maybe we don't need to check the time, or maybe we only want to calculate pi once
    to improve performance.". But what if we had no choice but to write code that
    way? Maybe our application had to work like that, and so we were obliged to code
    a complicated, slow-performing function that did slow performance; for the success
    of the application, that function with that logic must fire.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，一旦浏览器调用`function2()`，它会锁定并挂起，直到它能完成其执行，（假设运行代码的系统有足够的内存来执行）。现在要修复这个问题的一个简单方法可能是说：“嘿，也许我们不需要检查时间，或者也许我们只想计算一次π以提高性能。”。但是，如果我们别无选择，只能以这种方式编写代码呢？也许我们的应用程序必须那样工作，因此我们被迫编写一个复杂、性能缓慢的函数，这个函数执行缓慢；为了应用程序的成功，具有这种逻辑的函数必须触发。
- en: 'Well, if we must build an application like that, our solution is a web worker.
    Let''s see how that works in comparison to our single-threaded diagrams:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，如果我们必须要构建这样的应用程序，我们的解决方案就是网页工作者。让我们看看这与我们的单线程图表相比是如何工作的：
- en: '![Web workers](img/7296OS_08_03.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![网页工作者](img/7296OS_08_03.jpg)'
- en: In our example here, we can see in the diagram that we create a new worker that
    points to an external JavaScript worker file called `worker.js`. That worker sends
    a response in the form of a message. With web workers, messages are how we pass
    data between the host script and the worker data. It works in a similar way to
    any other event in JavaScript using the `onmessage` event.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们可以看到在图表中创建了一个新的工作者，它指向一个名为`worker.js`的外部JavaScript工作者文件。那个工作者以消息的形式发送一个响应。使用网页工作者，消息是我们在宿主脚本和工作者数据之间传递数据的方式。它的工作方式与JavaScript中的任何其他事件类似，都使用`onmessage`事件。
- en: So how does this look in a coded application? Well, let's find out!
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，在编码应用程序中这是怎样的呢？嗯，让我们找出答案！
- en: 'We have a coded example shown in the following screenshot that is built in
    a similar way to the preceding diagrams:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕快照中的代码示例以与前面图表类似的方式构建：
- en: '![Web workers](img/7296OS_08_04.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![网页工作者](img/7296OS_08_04.jpg)'
- en: As we can see, this is a simple HTML5 page with a `script` tag on line 11\.
    On line 13, we have `function1()` declared first, which prints an info message
    to the console; with line 15, we start a new timer to see how fast our worker
    is. It's rightly called a `Worker`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，这是一个简单的HTML5页面，在第11行有一个`script`标签。在第13行，我们首先声明了一个名为`function1()`的函数，它将信息消息打印到控制台；在第15行，我们开始一个新的定时器，以查看我们的工作者有多快。它被恰当地称为一个`Worker`。
- en: Next up, on line 18 we declare `function2()`; now here is where the things get
    interesting. First, on line 19, we declare a variable called `func2_Worker`; the
    naming of this variable isn't important, but it's always a good idea to indicate
    what your variable actually is. In this case, I add the suffix `_Worker` to the
    variable, following which I create a new web worker using the `Worker` keyword
    with a capital *W*.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在第18行我们声明了`function2()`；现在事情变得有趣了。首先，在第19行，我们声明了一个名为`func2_Worker`的变量；这个变量的命名并不重要，但最好是指明你的变量实际上是什么。在这个例子中，我在变量后添加了`_Worker`后缀，然后使用大写的`Worker`关键词创建一个新的网络工作者。
- en: Inside the parentheses, we add a string, the filename, using the relative path
    of our worker file, named `08_01-worker.js`. Let's take a look inside the worker
    file.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在括号内，我们添加了一个字符串，文件名，使用我们工作者文件的相对路径，名为`08_01-worker.js`。让我们来看看工作者文件内部。
- en: '![Web workers](img/7296OS_08_05.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![Web workers](img/7296OS_08_05.jpg)'
- en: 'As we can see, the worker file is very simple. We have a global object declared
    on line 1 called `onmessage` and that is assigned a function with a `for` loop.
    It''s also worth noting that we can refer to this context through the `self` and
    `this` keywords (example: `self.onmessage`). You may have noticed that we also
    have a parameter called `oEvent`, which is a placeholder for any data being passed
    into the worker that we call using the `data` property. We can see this in our
    `postMessage` function on line 3.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，工作者文件非常简单。在第1行声明了一个全局对象叫做`onmessage`，并将其赋值为一个带有`for`循环的函数。值得注意的是，我们还可以通过`self`和`this`关键词来引用这个上下文（例如：`self.onmessage`）。您可能注意到了我们还有一个名为`oEvent`的参数，它是任何通过`data`属性传递给工作者的数据的占位符。我们可以在第3行的`postMessage`函数中看到这一点。
- en: 'The `postMessage` function is a built-in function for ECMAScript that either
    sends data to an assigned worker or, if no worker is assigned, it posts a message
    back to any parent JavaScript workers that might be listening. Now let''s go back
    to our root HTML page script and take a look on line 20; this is shown in the
    following screenshot:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`postMessage`函数是ECMAScript的内置函数，它要么向指定的工作者发送数据，要么如果没有分配工作者，它就会向任何可能监听的父级JavaScript工作者发送消息。现在让我们回到我们的根HTML页面脚本，看看第20行；这在下面的屏幕截图中显示：'
- en: '![Web workers](img/7296OS_08_06.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![Web workers](img/7296OS_08_06.jpg)'
- en: We can see that, by calling our `func2_Worker` worker variable, we can use the
    `onmessage` property of that worker and call a function back on our root page;
    in this case, you need to log a message back to the console using the `oEvent`
    parameter used in the worker.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，通过调用我们的`func2_Worker`工作者变量，我们可以使用该工作者的`onmessage`属性，并在我们的根页面上调用一个函数；在这个例子中，您需要使用在工作者中使用的`oEvent`参数将消息记录到控制台。
- en: That's all well and good. But how do we pass data in? Well, that's easy enough.
    Line 24 uses the `func2_Worker` variable but utilizes the `postMessage` function
    for that worker object, as mentioned earlier. As we've assigned a worker variable
    to this `postMessage` function, this will pass in a data parameter into our `oEvent`
    parameter used in our `worker.js` file; in this case, it's a string that says,
    `"Processing a high performance JavaScript worker..."`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这是很好的。但是我们是如何传递数据的呢？嗯，这很简单。第24行使用了`func2_Worker`变量，但利用了之前提到的`postMessage`函数。因为我们已经将工作者变量分配给了这个`postMessage`函数，这将把数据参数传递给我们的`oEvent`参数，在我们的`worker.js`文件中使用；在这个例子中，它是一个字符串，写着，“处理高性能的JavaScript工作者...”。
- en: 'Finally, on line 32 and again on line 35, we have 2 event listeners. One is
    for the `DOMContentLoaded` event that was shown in our diagram as the first function
    called in our execution thread and that simply outputs a log message that the
    DOM is loaded; this is followed by our `window.onload` function, which also prints
    a log message, But then it also triggers functions 1, 2, and 3, in order when
    the page is loaded. Let''s load this in our browser and see what happens by using
    Chrome''s **Developer tools** option. Take a look at the output in the **Console**
    panel, which will resemble the following screenshot:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在第32行和第35行，我们有两个事件监听器。一个是用于`DOMContentLoaded`事件，如我们图表中所示，是我们在执行线程中首先调用的函数，它只是输出一个日志消息，表明DOM已加载；这之后是我们的`window.onload`函数，它也打印一个日志消息，但它还会在页面加载时按顺序触发函数1、2和3。让我们在浏览器中加载这个，并使用Chrome的**开发者工具**选项来看看会发生什么。查看控制台面板中的输出，它将类似于以下屏幕截图：
- en: '![Web workers](img/7296OS_08_07.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![Web工作者](img/7296OS_08_07.jpg)'
- en: 'Well, that''s not a good sign as we can see an error appear in our console.
    The `DOM Loaded` and `Page Loaded` log messages appear as does `function1(): Called.`
    after which we get the `Uncaught SecurityError: Failed to construct ''Worker'':
    Script at (file:url) cannot be accessed from origin ''null''` error message.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '嗯，这可不是个好迹象，因为我们可以看到控制台出现一个错误。`DOM Loaded`和`Page Loaded`日志消息出现，以及`function1():
    Called.`之后，我们得到`Uncaught SecurityError: Failed to construct ''Worker'': Script
    at (file:url) cannot be accessed from origin ''null''`错误消息。'
- en: Now what does that mean? First, we have to understand that using a web worker
    is similar to working with AJAX. If your code is not on a server, there is a security
    risk in sharing or gathering data across your system. Now this isn't incorrect
    but, when testing our code, we need to test on a local server such as Apache or
    IIS that can secure our content using HTTP. In Chrome, there is also another way
    to disable this warring, but that's only for limited testing.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 那么这意味着什么呢？首先，我们必须明白使用web工作者类似于使用AJAX。如果你的代码不在服务器上，那么在系统之间共享或收集数据时存在安全风险。现在这并不是错误的，但在测试我们的代码时，我们需要在本地服务器上测试，如Apache或IIS，这样可以使用HTTP保护我们的内容。在Chrome中，还有另一种禁用此警告的方法，但这只适用于有限的测试。
- en: Testing workers with a local server
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用本地服务器测试工作者
- en: A local server can be created on OS X and Linux quickly using Python; now, if
    you're not a Python *guru*, don't worry as this is a quick one-line bit of Terminal
    code to spin up a server in seconds.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在OS X和Linux上快速使用Python创建本地服务器；如果你不是Python*大师*，不要担心，因为这只是一个在几秒钟内启动服务器的终端代码片段。
- en: 'First, open the Terminal and set its path; this should be the path your files
    are in. You can do this by using the change directory command or `cd`. Here''s
    an example of setting the path to the active user''s desktop using the *tilde*
    key:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，打开终端并设置其路径；这应该是你的文件所在的路径。你可以通过使用更改目录命令或`cd`来实现。以下是一个将路径设置为活动用户桌面路径的示例，使用*tilde*键：
- en: '[PRE0]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Once that''s done, we can start the server with this simple one-line python
    command that calls a built-in simple server method, as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成，我们可以使用以下简单的单行Python命令来启动服务器，该命令调用一个内置的简单服务器方法：
- en: '[PRE1]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Once we press the *Enter* key, we can start the server. We can look at the server
    root by typing `http://127.0.0.1:8000` into Chrome; we should then see a list
    of files to access. Also, should you need to close the server, you can exit out
    of the Terminal or use *CTRL* + *Z* to kill the server manually.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们按下*Enter*键，我们就可以启动服务器了。我们可以在Chrome中输入`http://127.0.0.1:8000`来查看服务器根目录；我们应该
    then 看到一个可以访问的文件列表。另外，如果你需要关闭服务器，你可以退出终端，或者使用*CTRL* + *Z*手动杀死服务器。
- en: '![Testing workers with a local server](img/7296OS_08_08.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![使用本地服务器测试工作者](img/7296OS_08_08.jpg)'
- en: Now go ahead and open the HTML file in which the worker script is called, from
    the `.js` file, in the page. We should then see the **Console** panel in Chrome's
    **Developer tools** show one thousand lines iterating through our "for loop" from
    our worker JavaScript file.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在去打开HTML文件，从`worker.js`文件中调用工作者脚本。我们应该然后在Chrome的**开发者工具**中的控制台面板看到一千行代码迭代我们的"for循环"从我们的工作者JavaScript文件中。
- en: 'We can also see that, on the fifth console line, the `console.timeEnd` function
    stops for about 0.5 milliseconds, showing that it''s been called prior to processing
    the loop. This is shown in the following screenshot:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以看到，在第五行控制台中，`console.timeEnd`函数停止了约0.5毫秒，说明它在处理循环之前被调用。这显示在以下屏幕截图中：
- en: '![Testing workers with a local server](img/7296OS_08_09.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![使用本地服务器测试工作者](img/7296OS_08_09.jpg)'
- en: 'Before we move on, let''s check how long this would process outside a worker
    in the next code sample. We''ve recreated the logic for the loop in the page itself
    without using a web worker. We are still using the `console.time` function to
    test how long the thread runs until `function3()` is triggered. Let''s take a
    look at the following code and review it:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，让我们检查一下在下一个代码示例中，这个流程在工作者外部会运行多长时间。我们在页面本身重新创建了循环的逻辑，而没有使用网页工作者。我们仍然使用`console.time`函数来测试线程运行到`function3()`被触发的时间。让我们看一下下面的代码并进行复习：
- en: '![Testing workers with a local server](img/7296OS_08_10.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![使用本地服务器测试工作者](img/7296OS_08_10.jpg)'
- en: So, on line 19, we've removed the reference to the worker file, which is a `.js`
    file, and moved the `for` loop into the page. Here it will loop one thousand times
    and print to the console. Now on line 32, we have our `window.load` event listener,
    and we sequentially call our functions as 1, 2, and 3.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，在第19行，我们移除了对工作者文件的引用，这是一个`.js`文件，并将`for`循环移到了页面中。在这里，它会循环一千次并在控制台打印。现在在第32行，我们有一个`window.load`事件监听器，我们按顺序调用我们的函数，分别是1、2和3。
- en: 'We then again use the `console.time` function to track how long a process occurs.
    As this code sample is now single-threaded, we should see a longer time for the
    `timeEnd` function to fire. Let''s run our code and take a look at the next screenshot:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们再次使用`console.time`函数来跟踪一个过程持续的时间。由于这个代码示例现在是单线程的，我们应该看到`timeEnd`函数触发的时间更长。让我们运行我们的代码并查看下一个屏幕截图：
- en: '![Testing workers with a local server](img/7296OS_08_11.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![使用本地服务器测试工作者](img/7296OS_08_11.jpg)'
- en: That's not bad! Here, our time is much longer than our multi-threaded Worker
    example, which is roughly 70 milliseconds slower than our web worker. That's not
    a bad performance boost; it's minor but still helpful. Now, one issue with workers
    is that they take a lot of time to trigger the next function that exists on a
    separate thread from the main thread. We need to have some way to call a function
    when a function completes asynchronously, and for that we have JavaScript promises.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 不错啊！在这里，我们的时间比我们的多线程工作者示例要长得多，比我们的网页工作者大约慢70毫秒。这并不是一个坏的提升，虽然很小，但仍然有帮助。现在，工作者的一个问题是在主线程上触发下一个函数需要花费很长时间。我们需要有一种方式在函数异步完成时调用一个函数，为此我们有了JavaScript承诺。
- en: Promises
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 承诺
- en: JavaScript promises are also a new way to optimize our JavaScript code; the
    idea of promises is you have a function that is chained to a main function, and
    is fired in sequential order as it's written. Here is how it's structured. First,
    we create a new object using the `Promise` object, and, inside the parentheses,
    we write the main function, and assign the new promise object to a variable.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript承诺也是优化我们JavaScript代码的一种新方法；承诺的理念是你有一个函数被链接到主函数，并且按照编写顺序依次执行。这是它的结构。首先，我们使用`Promise`对象创建一个新的对象，在括号内写入主函数，并将新的承诺对象赋值给一个变量。
- en: One thing to note before continuing is that JavaScript promises are EcmaScript
    6- specific. So, for this section, we will need to test our code in an EcmaScript
    6-ready browser such as Google Chrome.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前需要注意的一点是，JavaScript承诺是EcmaScript 6特定的。因此，在这个部分，我们需要在我们的代码中测试一个准备好EcmaScript
    6的浏览器，比如Google Chrome。
- en: 'Next, with our `promise` variable, we use the `then` keyword, which in actuality
    works just like a function. But it only fires when our root promise function is
    completed. Also, we can chain the `then` keywords one after another and sequentially
    fire JavaScript asynchronously to ensure that the variables scoped in our promise
    will, of course, promise to the next `then` function that those variables will
    have set values. Let''s take a look at a sample promise and see how this works:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在我们的`promise`变量中，我们使用`then`关键字，实际上它的工作方式就像一个函数。但它只在我们的根承诺函数完成时才会触发。此外，我们可以将`then`关键字一个接一个地链接起来，并依次异步执行JavaScript，以确保我们承诺中的作用域变量，当然会承诺传递给下一个`then`函数这些变量将具有设置的值。让我们看一个示例承诺，看看这是如何工作的：
- en: '![Promises](img/7296OS_08_12.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![承诺](img/7296OS_08_12.jpg)'
- en: In our code sample, we have an HTML5 page with an embedded `script` tag. We
    have two elements on our page that we interact with or view using a `button` tag
    with the `makeAPromise()` function as an attached `onclick` event on line 13\.
    On line 15, we have a `div` tag with an `id` of `results`, with its inner HTML
    left empty.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的代码示例中，有一个HTML5页面带有内嵌的`script`标签。我们页面上有两个元素，我们通过`button`标签的`makeAPromise()`函数附加的`onclick`事件进行交互或查看，在第13行。在第15行，我们有一个带有`id`为`results`的`div`标签，其内部HTML保持为空。
- en: Next, on line 19 we create our `makeAPromise` function and set a `count` variable
    on line number 20 called `promiseCount`. Now here's where we create our promise.
    On line number 22, we create a variable called `promiseNo1`, and we assign it
    with a new `Promise` object. Here you can notice how we start opening the parenthesis
    with a `function` as parameter that starts on line 23, and we have a `resolve`
    parameter inside that function. We'll discuss that later.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在第19行我们创建了`makeAPromise`函数，并在第20行设置了一个名为`promiseCount`的`count`变量。现在，就在这里创建我们的promise。在第22行，我们创建了一个名为`promiseNo1`的变量，并将其赋值为一个新的`Promise`对象。在这里，你可以注意到我们是如何开始用一个`function`作为参数来打开括号的，这从第23行开始，我们在该函数内部有一个`resolve`参数。我们稍后再讨论这个问题。
- en: In our `Promise` function, we have a simple `for` loop that multiplies the value
    from the `for` loop by `5`, and the `then` function assigns it to our `promiseCount`
    variable. To finish our `Promise` object's function, notice a new type of keyword,
    `resolve`! The `resolve` keyword is a type of return used specifically for promises;
    it sets a promise's return value. There are also other promise return types such
    as `reject`, which allows us to return a failed value if we want. For this example,
    however, we are keeping it simple and only using `resolve`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`Promise`函数中，有一个简单的`for`循环，将`for`循环的值乘以`5`，然后`then`函数将其赋值给我们的`promiseCount`变量。为了完成我们的`Promise`对象的函数，注意一个新的关键字，`resolve`！`resolve`关键字是一种专门用于promise的返回类型；它设置了promise的返回值。还有其他一些promise返回类型，如`reject`，如果我们想要的话，它可以让我们返回一个失败值。然而，在这个例子中，我们保持简单，只使用`resolve`。
- en: Now, if you remember on line 23, our `Promise` function had an internal function
    with the `resolve` parameter. Though this may look a little odd, it is required
    to make our promise work; by adding `resolve` to our function, we are telling
    our promise that we need to use the resolve function inside our `Promise` function.
    For example, if we needed `resolve` and `reject`, we would write it as `function
    (resolve, revoke) {}`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你记得第23行，我们的`Promise`函数有一个内部函数，带有`resolve`参数。虽然这看起来可能有点奇怪，但它是我们使promise工作所必需的；通过在函数中添加`resolve`，我们告诉我们的promise我们需要在`Promise`函数内部使用`resolve`函数。例如，如果我们需要`resolve`和`reject`，我们会写成`function
    (resolve, revoke) {}`。
- en: Back on line 29, we assign our `resolve` with a string that outputs our value
    with some copy to fill our `div`, but we don't assign the `innerHTML` property
    here; that's done using our `promiseNo1.then` function. This works like a function
    that follows the promise's `resolve` function.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 回到第29行，我们将我们的`resolve`赋值为一个字符串，输出我们的值并填充我们的`div`，但我们这里不赋值`innerHTML`属性；这是通过我们的`promiseNo1.then`函数来完成的。这个像是一个跟随promise的`resolve`函数的函数。
- en: Finally on line 32, we call our `promiseNo1` variable's instance, use the `then`
    function, and again wrap the parenthesis with its own internal function. We may
    notice that, on line 33, we've passed in an argument called `promiseCount`. This
    is our `resolve` value that ended our `Promise` function declared on line 22\.
    We then use that again in line 33, where we assign our `results div` element with
    its `innerHTML` property.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在第32行，我们调用了我们`promiseNo1`变量的实例，使用了`then`函数，并再次用它自己的内部函数包装了括号。我们可能会注意到，在第33行，我们传递了一个名为`promiseCount`的参数。这是我们第22行声明的`Promise`函数中的`resolve`值。我们然后在第33行再次使用它，在那里我们将我们的`results
    div`元素赋值给它的`innerHTML`属性。
- en: Testing a true asynchronous promise
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试一个真正的异步promise
- en: 'For this simple example, we can see how a promise is structured and how each
    firing is needed when chained; when we chain promises, we can see how a promise
    can still fire a chained function even when we create a bit of single-threaded
    JavaScript code that causes a delay in execution. In this case, it''s a `setTimeout`
    function; let''s take a look at this new code sample shown in the following screenshot:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个简单的例子，我们可以看到promise的结构以及当链式调用时每个触发是如何需要的；当我们链式调用promise时，我们可以看到即使我们创建了一些导致执行延迟的单线程JavaScript代码，promise仍然可以触发链式函数。在这个例子中，是一个`setTimeout`函数；让我们来看看下面屏幕截图中显示的新代码样本：
- en: '![Testing a true asynchronous promise](img/7296OS_08_13.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![测试一个真正的异步promise](img/7296OS_08_13.jpg)'
- en: For this simple example, we can see how promise chains function without breaking
    the thread. Here, we set a `timerCount` variable on line 20; then we will print
    to an empty `results` `div` element found on line 15\. Next, by reusing our `promiseNo1`
    variable with its own promise instance, we create a `for` loop that randomizes
    the `timerCount` using `Math.random()`, which allows a random number to be generated
    and then multiplied to 10000 in the `for` loop when it finishes.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个简单的例子中，我们可以看到承诺链如何在不断线的情况下工作。在这里，我们在第20行设置了一个`timerCount`变量；然后我们将打印出在第15行找到的空的`results`
    `div`元素。接下来，通过重用我们的`promiseNo1`变量及其自己的承诺实例，我们创建了一个`for`循环，使用`Math.random()`随机化`timerCount`，当循环完成时，它允许生成一个随机数，然后乘以10000。
- en: Lastly, we use the resolve function to return our promise, which is chained
    to our `then` function on line 31; here we have an argument called response to
    serve as our `resolve` function's value. Now on line 33, we have a variable called
    `totalCount`, where we have the response argument and the `timerCount` function
    added together.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们使用解决函数返回我们的承诺，它链式地连接到第31行的`then`函数；在这里，我们有一个名为response的参数作为我们的`resolve`函数的值。现在在第33行，我们有一个名为`totalCount`的变量，其中我们有response参数和`timerCount`函数相加。
- en: 'Next, we create a `setTimeout` function that appends the `results` `div` element
    with a second line, printing the amount of time set by the `totalCountvariable`
    variable declared by us, while still using the `timerCount` function as our timeout
    value. Now, the last part of our chain is another `then` function on line number
    40\. Here, we append the `results` `div` element again, but you need to note that
    we are printing from our second chained `then` function. Let''s take a look at
    how that works in Chrome, as shown in the following screenshot:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们创建了一个`setTimeout`函数，它使用我们声明的`totalCountvariable`变量设置的时间将`results` `div`元素附加第二行，同时仍然将`timerCount`函数作为我们的超时值。现在，我们链的最后一部分是第40行的另一个`then`函数。在这里，我们再次附加`results`
    `div`元素，但请注意，我们是从我们的第二个链式`then`函数打印的。让我们看看在Chrome中这是如何工作的，如下面的屏幕截图所示：
- en: '![Testing a true asynchronous promise](img/7296OS_08_14.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![测试一个真正的异步承诺](img/7296OS_08_14.jpg)'
- en: Take a look at the output. Here, we can see that, with each button click, we
    get a numeric count for each point of the promise chain. We have a value of `0`
    on the `First count`, and a random larger number on the `Third count`. Wait! Is
    that the third count? Yes, note that the third count comes after first; this demonstrates
    that, even when we were waiting for our for loop to process, the third promise
    continued.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 看看输出。在这里，我们可以看到，每次点击按钮，我们都会为承诺链的每个点得到一个数字计数。我们有`First count`上的值为`0`，`Third count`上有随机较大的数字。等等！那是第三次计数吗？是的，请注意第三次计数在第一次之后；这表明，即使我们在等待for循环处理时，第三个承诺也在继续。
- en: On the next line, we see an even larger number value with the `Second count`
    noted in our line; if we continue clicking the button, we should see a consistent
    pattern. Using promises can help us multi-thread code as long as we don't need
    a specific value in the chain immediately. We also get performance benefits by
    moving some of our code off our main JavaScript thread using promises.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一行，我们看到一个更大的数字值，在我们的行中注明了`Second count`；如果我们继续点击按钮，我们应该看到一个一致的模式。使用承诺可以帮助我们在不需要在链中立即获得特定值的情况下多线程代码。我们还可以通过使用承诺将一些代码从我们的主JavaScript线程中移除，从而获得性能上的好处。
- en: Summary
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we reviewed how to use web workers, and the limitations web
    workers have technically and conceptually in a real-life application. We also
    worked with JavaScript promises, where we learned common keywords related to promises
    such as `respond` and `revoke`. We saw how to use the `then` function to chain
    our promises in sync with our main application thread, to create a multi-threaded
    JavaScript function.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们回顾了如何使用网络工人，以及网络工人在实际应用中在技术和概念上的局限性。我们还使用了JavaScript承诺，在这里我们学习了与承诺相关的常见关键词，如`respond`和`revoke`。我们看到了如何使用`then`函数将我们的承诺与主应用程序线程同步，以创建一个多线程的JavaScript函数。
- en: In the next chapter, we will see how working from a mobile device such as iOS
    and Android can affect our performance and how to debug performance on a device.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将了解从像iOS和Android这样的移动设备工作如何影响我们的性能以及如何在设备上调试性能。
