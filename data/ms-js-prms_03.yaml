- en: Chapter 3. The Promise Paradigm
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三章．承诺范式
- en: In this chapter, we will focus on what the promises paradigm is, from where
    it originated, how languages implement it, and what problems it can solve for
    us.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将重点关注承诺范式是什么，它起源于何处，语言如何实现它，以及它能为我们的生活解决哪些问题。
- en: We have briefly discussed the origin of the promise pattern in [Chapter 1](ch01.html
    "Chapter 1. Promises.js"), *Promises.js*. In this chapter, we will explore this
    subject in more detail, in a generic way, so that it would clear the logic and
    theory behind the adoption of promise in different languages and in particular,
    how it's helping us in today's modern programming.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在[第一章](ch01.html "第一章．Promises.js")，*Promises.js*中简要讨论了承诺模式的起源。在这一章中，我们将更详细地探讨这个主题，以一种通用的方式，以便阐明不同语言中采用承诺的逻辑和理论，特别是它如何帮助我们今天在现代编程中。
- en: Callback, revisited
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回调，重新审视
- en: In previous chapters, you learned how the JavaScript mechanism works. The single-threaded
    model of JavaScript has its limitation, which can be controlled through better
    use of callbacks. However, the scenarios such as callback hell really pushed engineers
    to find and implement a better way to control the callbacks and maximize the performance
    of the program, while staying inside a single thread. A callback is a function
    that can be passed as an argument to another function to be executed when it's
    called.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，你已经学习了JavaScript机制是如何工作的。JavaScript的单线程模型有其局限性，可以通过更好地使用回调来控制。然而，像回调地狱这样的场景真的推动工程师去寻找并实现一种更好的回调控制方法，以最大化程序的性能，同时仍保持在单线程内。回调是一个可以作为另一个函数的参数传递给它的函数，当它被调用时执行。
- en: There is absolutely no harm in using callbacks, but there are also a number
    of other options available to handle asynchronous events. Promise is one such
    way to handle asynchronous events and has more efficiency than many of other asynchronous
    tools in its family.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 使用回调绝对没有错，但处理异步事件还有许多其他选项。承诺是处理异步事件的一种方式，其效率要高于其家族中的许多其他异步工具。
- en: To understand more clearly why we needed to implement Promises.js in asynchronous
    programming, we need to understand the concept behind the promise and deferred
    objects.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更清楚地了解为什么我们在异步编程中需要实现Promises.js，我们需要了解承诺和延迟对象背后的概念。
- en: Promise
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 承诺
- en: The beauty of working with JavaScript's asynchronous events is that the program
    continues its execution, even when it doesn't have any value it needs to work
    that is in progress. Such scenarios are named as yet known values from unfinished
    work. This can make working with asynchronous events in JavaScript challenging.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 与JavaScript的异步事件一起工作的好处是，即使程序没有正在进行它需要工作的值，它也会继续执行。这种情况被称为未完成工作中的已知值。这可能会使得在JavaScript中处理异步事件具有挑战性。
- en: Promises are a programming construct that represents a value that is still unknown.
    Promises in JavaScript enable us to write asynchronous code in a parallel manner
    to synchronous code.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 承诺是一种编程结构，表示一个尚不可知的值。JavaScript中的承诺让我们能够以并行的方式编写异步代码，就像同步代码一样。
- en: Deferred
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 延迟
- en: Deferred is an object that represents work that is not yet being done, and promise
    is an object representing a value that is not yet known.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 延迟是一个代表尚未执行的工作的对象，而承诺是一个代表尚未知晓的值的对象。
- en: The objects provide a way to take care of registering multiple callbacks into
    a self-managed callbacks queues, invoke callbacks queues, and relay the success
    or failure state of any synchronous function.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这些对象提供了一种方式，用于照顾注册多个回调到一个自管理的回调队列中，调用回调队列，以及传递任何同步函数的成功或失败状态。
- en: How do promise and deferred relate to each other?
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 承诺和延迟之间有什么关系？
- en: 'So far, in [Chapter 2](ch02.html "Chapter 2. The JavaScript Asynchronous Model"),
    *The JavaScript Asynchronous Model*, we discussed promises and how they work.
    Let''s have a look at how promises and deferred work:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 直到现在，在[第二章](ch02.html "第二章．JavaScript异步模型")，*JavaScript异步模型*中，我们讨论了承诺及其工作原理。让我们看看承诺和延迟是如何工作的：
- en: Every deferred object has a promise that serves as a proxy for the future result.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个延迟对象都有一个承诺作为未来结果的代理。
- en: A deferred object can be resolved or rejected by its caller, which separates
    the promise from the resolver, while a promise is a value returned by an asynchronous
    function.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 延迟对象可以通过其调用者解决或拒绝，这使得承诺与解决器分离，而承诺是异步函数返回的值。
- en: The promise can be given to a number of consumers and each will observe the
    resolution incessantly, while the resolver/deferred can be given to any number
    of users and the promise will be resolved by the one that first resolved it.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 承诺可以被多个消费者接收，每个消费者都会不断地观察到解决结果，而解决器/延迟器可以被任何数量的用户接收，第一个解决它的用户将解决承诺。
- en: Standard behaviors of the Promise API
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 承诺API的标准行为
- en: There are few standards as per a promise/proposal, which has to be fulfilled
    for the true implementation of the concept. These standards are the keys to implement
    promises, and any library/language must comply with it for true implementation.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 关于承诺/提案的规范很少，必须实现概念的真正实现。这些规范是实现承诺的关键，任何库/语言都必须遵守它以实现真正的实现。
- en: 'A promise does the following:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一个承诺如下：
- en: A promise returns an eventual value when a single completion of an operation
    occurs.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当一个操作完成时，承诺返回一个最终的值。
- en: 'A promise has three states: unfulfilled (when a promise is waiting to be processed),
    fulfilled (when a promise has been completed and the desired result has been obtained),
    and finally, failed (when the result of a promise was obtained but not as anticipated).'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个承诺有三种状态：未完成（当一个承诺等待被处理时），已完成（当一个承诺已完成并获得了所需的结果），最后，失败（当承诺的结果已获得，但不是所期望的）。
- en: Promise has a `then` property, which must be a function and must return a promise.
    In order to complete a promise, `fulfilledHandler`, `errorHandler`, and `progressHandler`
    must be called in.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 承诺有一个`then`属性，必须是一个函数，并且必须返回一个承诺。为了完成一个承诺，必须调用`fulfilledHandler`，`errorHandler`和`progressHandler`。
- en: With a promise, callback handlers return the fulfillment value from the returned
    promise.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过承诺，回调处理程序返回履行值从返回的承诺。
- en: The promise value must be persistent. This should maintain a state, and within
    that state, the value must be preserved.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 承诺值必须是持久的。这应该保持一个状态，在该状态下，值必须被保留。
- en: This API does not define how promises are created. It only provides a necessary
    interface that promise provides to promise consumers to interact with it. Implementations
    are free to define how promises are generated. Some promise may provide their
    own function to fulfill the promise and other promises may be fulfilled by mechanisms
    that are not visible to the promise consumer. Promises themselves may include
    other additional convenient methods as well.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 本API不定义承诺是如何创建的。它只提供了一个必要的接口，承诺提供给承诺消费者与之交互。实现者可以自由定义承诺是如何生成的。一些承诺可能提供它们自己的函数来履行承诺，其他承诺可能通过对承诺消费者不可见的机制来履行。承诺本身可能还包括其他一些方便的方法。
- en: Interactive promises
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交互式承诺
- en: 'Interactive promises are extended promises that add more value to the paradigm
    by adding two more functions to its arsenal, `get` and `call`:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 交互式承诺是通过向其武器库中添加两个更多函数`get`和`call`来扩展承诺，从而为范式添加更多价值：
- en: '`get(propertyName)`: This function requests the given property from the target
    of promise. This also returns a promise to provide the value of the stated property
    from promise''s target.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get(propertyName)`：这个函数请求从承诺的目标中获得给定的属性。它还返回一个承诺，提供从承诺的目标中声明的属性的值。'
- en: '`call(functionName, arg1, arg2…)`: This function requests to call the given
    method/function on the target of promise. It also returns a promise to provide
    the return value of the requested function call.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`call(functionName, arg1, arg2…)`：这个函数请求在承诺的目标上调用给定的方法/函数。它还返回一个承诺，提供所请求函数调用的返回值。'
- en: The states and return values of a promise
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 承诺的状态和返回值
- en: From [Chapter 1](ch01.html "Chapter 1. Promises.js"), *Promises.js*, we are
    already aware that a promise is based on three states. Let's brush up our memory
    on these states, in accordance with promises paradigm.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 从[第1章](ch01.html "第1章 Promises.js")，*Promises.js*，我们已经知道承诺基于三种状态。让我们根据承诺范式复习这些状态。
- en: 'Promise has three states:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 承诺有三种状态：
- en: Unfulfilled promise
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未完成的承诺
- en: Fulfilled promise
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已完成的承诺
- en: Failed promise
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 失败的承诺
- en: A promise exists within these three states.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 承诺存在于这三个状态之一。
- en: The beginning of a promise is from an unfulfilled state. This is due to the
    fact that a promise is a proxy for an unknown value.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 承诺的开始是从一个未完成的状态。这是由于承诺是一个未知值的代理。
- en: When the promise is filled with the value it's waiting for, it's in the fulfilled
    state. The promise will be labeled as failed if it returns an exception.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 当承诺充满它等待的值时，它处于已完成的 state。如果它返回一个异常，承诺将被标记为失败。
- en: A promise may move from an unfulfilled to a fulfilled or failed state. Observers
    (or the objects/events waiting) are notified when the promise is either rejected
    or fulfilled. Once the promise is rejected or resolved, its output (value or state)
    cannot be modified.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 承诺可能从未满足状态转移到满足或失败状态。观察者（或等待的对象/事件）在承诺被拒绝或满足时收到通知。一旦承诺被拒绝或解决，其输出（值或状态）就不能被修改。
- en: 'The following code snippet will help you understand more easily than theory:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码片段可以帮助你比理论更容易地理解：
- en: '[PRE0]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Common sequencing patterns
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常见的序列模式
- en: Promise and deferred enables us to represent simple tasks combined with complex
    tasks to a fine-grained control over their sequences.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 承诺和延迟对象使我们能够将简单任务与复杂任务结合在一起，从而实现对它们序列的精细控制。
- en: As mentioned earlier, deferred is an object that represents work that is not
    being done yet and promise is an object representing a value that is currently
    unknown. This concept helps us write asynchronous JavaScript, similar to how we
    write synchronous code.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，延迟对象代表尚未执行的工作，而承诺对象代表当前未知的值。这个概念帮助我们编写类似同步代码的异步JavaScript。
- en: 'Promises make it comparatively easy to abstract small pieces of functionality
    shared across multiple asynchronous tasks. Let''s take a look at the most common
    sequencing patterns that promises makes easier:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 承诺使相对容易地将小功能抽象化，这些功能跨多个异步任务共享。让我们看看承诺使更容易的常见序列模式：
- en: Stacked
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 堆叠
- en: Parallel
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并行
- en: Sequential
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 顺序
- en: Stacked
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 堆叠
- en: 'Stacked binds multiple handlers anywhere in the application to the same promise
    event. This helps us bind a number of handlers in a cleaner way so that it gives
    control to sequence within our code. Here is a sample for stacked and bind handlers:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 堆叠在任何应用程序中将多个处理程序绑定到同一个承诺事件。这有助于以更简洁的方式绑定多个处理程序，以便在代码中给出顺序控制。以下是堆叠和绑定处理器的示例：
- en: '[PRE1]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Parallel
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 并行
- en: Parallel simply asks multiple promises to return a single promise, which alerts
    of their multiple completion.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 并行简单地要求多个承诺返回单个承诺，该承诺通知它们多个完成。
- en: With the parallel sequence, you can write multiple promises to return a single
    promise. In a parallel sequence, an array of asynchronous tasks are executed concurrently
    and return a single promise when all the tasks have succeeded or rejected with
    an error in case of failure.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 使用并行序列，你可以编写多个承诺以返回单个承诺。在并行序列中，一组异步任务并发执行并返回一个承诺，当所有任务成功或失败时返回一个承诺（在失败的情况下）。
- en: 'A general code snippet that shows how parallel sequence returns a single promise
    is shown as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个显示并行序列返回单个承诺的一般代码片段：
- en: '[PRE2]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'For a more clear understanding, here is a sample function that processes the
    parallel sequence:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更清楚地理解，这里有一个处理并行序列的示例函数：
- en: '[PRE3]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Sequential
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 顺序
- en: Actions need to be in sequence if the output of one action is an input to another.
    HTTP requests are such a case where one action is an input to the other. Sequence
    also enables you to transfer the control of one part of the code to the other.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个动作的输出是另一个动作的输入，则需要按顺序执行动作。HTTP请求就是这样一个例子，其中一个动作是另一个动作的输入。顺序还允许您将代码的一部分控制权传递给另一部分。
- en: It executes tasks in a sequential order that is defined by the need of the application,
    or the scope of the tasks that need to be queued in order to be served.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 它按照应用程序的需求或需要排队以供服务的任务范围执行任务。
- en: 'Here is a generic example in which one sequence processes and passes control
    to the other as an input:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个通用示例，其中一个序列处理并将控制权传递给另一个序列作为输入：
- en: '[PRE4]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Decoupling events and applications logic
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解耦事件和应用程序逻辑
- en: Promises provide an efficient way to decouple the events and application logic.
    This makes the implementation of events and application logic easier to build
    and maintenance also saleable.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 承诺提供了一种有效的方法来解耦事件和应用程序逻辑。这使得事件的实现和应用程序逻辑更容易构建，维护也更可销售。
- en: '![Decoupling events and applications logic](img/5500OS_03_01.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![解耦事件和应用程序逻辑](img/5500OS_03_01.jpg)'
- en: A simple way to show how promises decouple events and business logic
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 一种简单的方法，展示承诺如何解耦事件和业务逻辑
- en: The significance of durability in promises is that it's not an "EventEmitter",
    but can be converted into one by intelligent implementation. But then again, it
    would be a crippled one.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 承诺的持久性重要性在于它不是一个“EventEmitter”，但可以通过智能实现转换为一个。但话说回来，它将是一个残废的。
- en: Promises as event emitters
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 承诺作为事件发射器
- en: The problem in using promises as an event emitter is it's composition. It's
    the progression events in promises that cannot compose very well with EventEmitter.
    Promises chain and compose whereas events, on the other hand, are unable to do
    so. An implementation of Q library is discarding the progression in favor of estimation
    in v2\. This is why progression was never included in ECMAScript 6\. We will learn
    a great deal about a few of these emerging technologies in [Chapter 9](ch09.html
    "Chapter 9. JavaScript – The Future Is Now"), *JavaScript – The Future Is Now*.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 使用promises作为事件发射器的问题在于它的组合。它是promises中的事件进展无法与EventEmitter很好地组合。而promises链和事件进展，另一方面，无法做到这一点。Q库的实现放弃了进展，以估计为代价在v2中。这就是为什么进展从未包含在ECMAScript
    6中的原因。我们将在[第9章](ch09.html "第9章。JavaScript – The Future Is Now")，*JavaScript –
    The Future Is Now*中学习关于这些新兴技术的许多内容。
- en: 'Coming back to our topic of how promises is decoupling events and applications
    logic, we can use events to trigger the resolution/failure of promises by passing
    the value at the same time, which allows us to decouple. Here is the code:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 回到我们的话题，即如何通过promises解耦事件和应用程序逻辑，我们可以通过同时传递值来使用事件触发promises的解析/失败，从而使我们能够解耦。以下是代码：
- en: '[PRE5]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The reference of the following code is available at [http://jsfiddle.net/cwebbdesign/NEssP/2](http://jsfiddle.net/cwebbdesign/NEssP/2).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码的参考资料可在[http://jsfiddle.net/cwebbdesign/NEssP/2](http://jsfiddle.net/cwebbdesign/NEssP/2)找到。
- en: What promises prescribed not to do
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: promises规定不要做什么
- en: Promises clearly outline what not to do while implementing a promises paradigm.
    We saw most of these rules in [Chapter 2](ch02.html "Chapter 2. The JavaScript
    Asynchronous Model"), *The JavaScript Asynchronous Model*. Let's take a look at
    these from the promises paradigm in order to refresh our memories.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Promises明确指出在实现promises范式时不要做什么。我们在[第2章](ch02.html "第2章。JavaScript异步模型")，《JavaScript异步模型》中看到了大部分这些规则。让我们从promises范式中看看这些，以刷新我们的记忆。
- en: 'The following two practices must be taken into account while implementing promises,
    regardless of what implementation you are using:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在实现promises时，无论您使用哪种实现，都必须考虑以下两种做法：
- en: Avoiding getting into a callback hell
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免进入回调地狱
- en: Avoiding use of unnamed promises
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免使用未命名的promises
- en: Avoiding getting into callback hell
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 避免进入回调地狱
- en: We are already aware what callbacks are and how to handle them. Callbacks are
    a great way to implement an asynchronous model, but they have their own cost.
    They are unmanageable at some point, and that point comes in when you start your
    descent in callbacks. The deeper you dive in, the more difficult it becomes to
    handle, thus leading you into a callback hell scenario.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经了解到回调是什么以及如何处理它们。回调是实现异步模型的绝佳方式，但它们也有自己的代价。在某些时候，回调变得难以管理，这个时刻在你开始深入回调时到来。你越深入，处理起来就越困难，从而导致你陷入回调地狱的场景。
- en: All of the promises implementations have sorted this problem very simply and
    wisely.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 所有promises实现都简单而明智地解决了这个问题。
- en: '![Avoiding getting into callback hell](img/5500OS_03_02.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![避免进入回调地狱](img/5500OS_03_02.jpg)'
- en: A handy way to tackle callback hell
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 解决回调地狱的便捷方法
- en: Avoiding the use of unnamed promises
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 避免使用未命名的promises
- en: As we saw from [Chapter 2](ch02.html "Chapter 2. The JavaScript Asynchronous
    Model"), *The JavaScript Asynchronous Model*, the use of unnamed promises can
    cause huge problems and will cost more time than the normal function of writing
    and testing. In some instances, it's good and recommended that you do not give
    the name of your function, but it's not good practice to leave your promise unnamed.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[第2章](ch02.html "第2章。JavaScript异步模型")，《JavaScript异步模型》中所见，使用未命名的promises可能造成巨大问题，并且会花费比编写和测试普通函数更多的时间。在某些情况下，不给出函数名称是好的，也是推荐的，但留下未命名的promise并不是一个好的实践。
- en: If someone thinks anonymous functions are hard to deal with, then unreasonably
    named functions are hard to understand and maintain. I recommend that you come
    up with a proper, predecided naming convention, and it should be done well before
    writing the actual code. I prefer to use CamelCase notation in Microsoft style,
    in which the starting name of the function is in lowercase and the connecting
    name is in uppercase.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有人认为匿名函数难以处理，那么不合理命名的函数难以理解和支持。我建议您在实际编写代码之前制定一个合适的、预先决定的命名约定，并且应该做得很好。我更喜欢使用微软风格的驼峰命名法，其中函数的起始名是小写的，而连接名是大写的。
- en: Promises and exceptions
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Promises和异常
- en: Consider a function that throws exceptions within the promise paradigm. You
    won't find any trace or log if you try to see what has happened to the exception-throwing
    function. You will see no output on the screen or on console. Why? The reason
    is hidden in the basics of promise.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个在承诺范式内抛出异常的函数。如果您试图查看异常抛出函数发生了什么，您将找不到任何踪迹或日志。您在屏幕或控制台上看不到任何输出。为什么？原因隐藏在承诺的基本知识中。
- en: Promises are designed to produce two types of output—a promise will either be
    fulfilled or rejected. So naturally, it won't show up anywhere at the output streams
    since promises are not designed to produce any other output except these two predefined
    states. However, it's not promise that does not give any facility to handle exceptions.
    In fact, it provides a robust way to show and handle such exceptions, by implementing
    a proper handler to catch the exception and display the reason at any desirable
    output stream.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 承诺被设计成产生两种类型的输出-承诺要么被实现，要么被拒绝。因此，自然地，它不会在任何输出流中出现，因为承诺没有被设计成产生除了这两个预定义状态之外的任何其他输出。然而，并不是承诺没有提供任何处理异常的设施。实际上，它通过实现适当的处理程序来捕获异常并在任何所需的输出流中显示原因，提供了一种健壮的方法来显示和处理此类异常。
- en: In most of the promises paradigm, the exception is handled by `fail` and `then`.
    The handlers differ from one library to another and from one language to another
    language. In many advance high-level languages, error and exception handling are
    managed automatically without adding much of code and explicitly telling compiler/
    interpreter, but in those libraries and languages, in which it's not handled on
    auto-basis, you have to write an explicit code to handle exception manually.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数承诺范式中，异常是通过`fail`和`then`处理的。处理程序因库而异，也因语言而异。在许多高级高级语言中，错误和异常处理是自动管理的，不会增加太多代码，也无需明确告诉编译器/解释器，但在那些没有自动处理的库和语言中，您必须编写显式的代码来手动处理异常。
- en: At this point, it's significant to mention that we are using a bit of code from
    Q, just to make you understand that exemption handling is also a part of promises
    implementation and how to deal with an exception, if one occurs. In our next chapter,
    we will focus more on how to implement promises in other libraries and languages.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，值得注意的是我们使用了Q中的一些代码，只是为了让您理解异常处理也是承诺实现的一部分，以及如果发生异常，如何处理异常。在我们下一章中，我们将重点介绍如何在其他库和语言中实现承诺。
- en: Coming back to the topic, like many other implementations, Q has its own mechanism
    of dealing with promises.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 回到主题，像许多其他实现一样，Q有自己的承诺处理机制。
- en: 'Consider that this code is about to throw an exception:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑这段代码即将抛出异常：
- en: '[PRE6]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Since it's not the right implementation of handling exception in promises using
    Q, there will be no output at all, and if we want to handle it as per implementation
    of the Promises paradigm in Q, we will want to add a rejection handler.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这不是使用Q处理承诺异常的正确实现，将根本没有任何输出，如果我们想要根据Q中承诺范式的实现来处理它，我们将想要添加一个拒绝处理程序。
- en: 'Let''s take Q as an example, in order to see if we can add the same function
    using its `fcall()` method:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以Q为例，看看我们是否可以使用其`fcall()`方法添加相同的函数：
- en: '[PRE7]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This method call is not meant to handle the exceptions, so it won't show anything.
    To handle it, we need to add a rejection handler that will help us to track and
    monitor the exception.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法调用不是用来处理异常的，所以它不会显示任何东西。要处理它，我们需要添加一个拒绝处理程序，以帮助我们跟踪和监视异常。
- en: The fail method
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 失败方法
- en: 'The simplest way to handle exception is using `fail`. Let''s restructure our
    code to implement the `fail` method:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 处理异常的最简单方法是使用`fail`。让我们重构我们的代码以实现`fail`方法：
- en: '[PRE8]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The then method
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 然后方法
- en: 'Normally, we would use `then` to handle chaining promise. This will take two
    arguments and the return promise-based execution of one of these handlers:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，我们会使用`then`来处理承诺链。这将接收两个参数，并根据这些处理器的返回承诺执行之一：
- en: '[PRE9]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The first argument was a fulfill method and the second is rejection handler,
    as shown in the preceding code. Using these simple techniques, Q implements exception
    handling.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数是一个完成方法，第二个是拒绝处理程序，如前所示的代码。使用这些简单技术，Q实现了异常处理。
- en: Best practices to handle exceptions in promise
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理承诺异常的最佳实践
- en: 'Promise provides an impressive way to handle exceptions. Exception handling
    in promise is quite simple and easy to implement, and almost all libraries and
    implementations support a generic way of implementation. Here are some of best
    practices to deal with exceptions:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 承诺提供了一种令人印象深刻的方式来处理异常。承诺中的异常处理相当简单且易于实现，几乎所有库和实现都支持一种通用的实现方式。以下是一些处理异常的最佳实践：
- en: Make your exceptions meaningful
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使您的异常有意义
- en: To maximize performance and maintainability, throw understandable errors. The
    best practice is to reject a promise and reject it with an error instance. Make
    it a habit not to reject an error object or primitive values.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 为了最大化性能和可维护性，抛出可理解的错误。最佳实践是拒绝一个承诺，并用错误实例来拒绝它。养成不拒绝错误对象或原始值的习惯。
- en: Monitor, anticipate, and handle exception
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 监视、预期并处理异常
- en: Keep an eye on the effects of errors on the flow of execution. The best practice
    for doing this is to anticipate failures in your handlers. The better you are
    at anticipation, the better will be your control over the flow of execution. Always
    think whether your rejection handler should be invoked by failures in the resolution
    handler, or if there should be a different behavior.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 关注错误对执行流程的影响。最佳实践是预料你处理程序中的失败。你越擅长预见，你对执行流程的控制就会越好。总是考虑您的拒绝处理程序是否应该由解析处理程序中的失败调用，或者是否应该有不同的行为。
- en: Keep it clean
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保持干净
- en: When you are done dealing with exception, start CleanUp as soon as the error
    occurs. When the chain of promises is processed and a result has been delivered
    in either rejected or fulfilled state, terminate the chain and clean up the unused
    thread. This will help in not only optimizing the throughput of code, but also
    creating manageable outputs.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 当你处理完异常后， error occurs as soon as possible. When the chain of promises is processed
    and a result has been delivered in either rejected or fulfilled state, terminate
    the chain and clean up the unused thread. This will help not only in optimizing
    the throughput of code but also in creating manageable outputs.
- en: Mozilla has its own implementation for handling errors in promise, which can
    be seen at [https://developer.mozilla.org/en-US/docs/Mozilla/JavaScript_code_modules/Promise.jsm/Promise](https://developer.mozilla.org/en-US/docs/Mozilla/JavaScript_code_modules/Promise.jsm/Promise).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: Mozilla为其承诺中的错误处理有自己的实现，这可以在[https://developer.mozilla.org/en-US/docs/Mozilla/JavaScript_code_modules/Promise.jsm/Promise](https://developer.mozilla.org/en-US/docs/Mozilla/JavaScript_code_modules/Promise.jsm/Promise)中看到。
- en: Considerations while choosing a promise
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择承诺时的考虑
- en: Before you start working with a promise library, there are a number of elements
    you should keep in mind. Not all the implementations of a promise's implementation
    are created equally. They are different from one another in terms of offered utilities
    by API, performance, and sometimes, behavior too.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始使用承诺库之前，有许多因素你应该记住。并不是所有的承诺实现都是一样的。它们在提供的API实用程序、性能以及有时行为方面都各不相同。
- en: 'A promise/proposal just outlines the proposed behavior of the promises and
    not implementation specifications. This results in varying libraries offering
    a different set of features. These are the ways that they differ from one another:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 承诺/提案只是概述了承诺的拟议行为，而不是实现规范。这导致不同的库提供不同的功能集。它们之间的区别如下：
- en: All promises/compliments have `then()`; function and also have varying features
    in their API. In addition to this, they're still able to exchange promises with
    each other.
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有的承诺/赞美都有`then()`；函数，并且它们API中还有各种不同的功能。此外，它们仍然能够与其他承诺进行交换。
- en: In promise/compliant libraries, a thrown exception is translated into a rejection
    and the `errorHandler()` method is called with the exception.
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在承诺/兼容库中，抛出的异常被翻译为一个拒绝，并且`errorHandler()`方法用异常调用。
- en: As a result of the differing implementations, there are interoperability problems
    when working with libraries that return or expect promise/compliant.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 由于不同的实现，当使用返回或期望承诺/兼容的库时，存在互操作性问题。
- en: There may be trade-offs in choosing a promise library. Every library has its
    own pros and cons, and it is purely up to you to decide what to use depending
    on the particular use case and your project needs.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 选择承诺库可能会有所权衡。每个库都有自己的优点和缺点，完全取决于您根据特定用例和项目需求决定使用什么。
- en: Summary
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered the paradigm of promise and the concept behind it.
    We have covered the conceptual knowledge of promise, deferred, common sequences
    of promise, and how promise helps in decoupling the business logic and application
    logic. We have also covered the relation between promise and event emitters and
    the idea behind it.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了承诺（promise）的范式及其背后的概念。我们讲解了承诺、延迟（deferred）、常见的承诺链以及承诺如何帮助解耦业务逻辑和应用逻辑的概念性知识。我们还讲解了承诺与事件发射器（event
    emitters）之间的关系及其背后的理念。
- en: Due to the virtue of this chapter, we are now able the select which promise
    library we should use on the basis of our knowledge gained.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 由于本章的性质，我们现在可以根据所获得的知识选择我们应该使用的承诺库。
- en: In our next chapter, we will be looking at the implementation of promise in
    different programming languages and will examine the ease they are bringing for
    the developers and end users.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们下一章中，我们将探讨不同编程语言中承诺（promise）的实现，并检查它们为开发人员和最终用户带来的便利。
