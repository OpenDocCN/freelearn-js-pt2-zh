- en: Chapter 5. Binding Data to the App
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章 绑定数据到应用
- en: In this chapter we will learn how to implement data binding from different data
    sources to the elements in the app. The Windows library for JavaScript provides
    the data source objects that can be used to populate the `WinJS` controls such
    as `ListView` or `FlipView` with different sorts of data. We have the `WinJS.Binding.List`
    object that is used to access arrays and JSON data and the `StorageDataSource`
    object that provides access to information about the filesystem. These two data
    source objects enable us to query and bind to items in the data source. Additionally,
    we will learn how to apply sorting and filtering on the data source and display
    its data using the `ListView` control.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何从不同的数据源实现数据绑定到应用中的元素。Windows库为JavaScript提供了数据源对象，可以用来填充`WinJS`控件如`ListView`或`FlipView`的不同类型的数据。我们有`WinJS.Binding.List`对象，用于访问数组和JSON数据，还有`StorageDataSource`对象，提供对文件系统信息的访问。这两个数据源对象使我们能够查询并在数据源中绑定项目。此外，我们还将学习如何对数据源进行排序和筛选，并使用`ListView`控件显示其数据。
- en: Getting the data
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取数据
- en: The **Windows library for JavaScript binding** (`WinJS.Binding`) provides a
    mechanism to bind data and styles to the HTML elements. The binding provided by
    the Windows library for JavaScript is one-way by default, so the HTML elements
    are updated when the data changes; however, any change in the HTML elements does
    not reflect on the data being bound to. Let's see this in action, and we'll start
    with the very basic kind of binding; that is, a declarative binding between an
    HTML element and a simple JavaScript object that contains only data.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**Windows库用于JavaScript绑定的**（`WinJS.Binding`）提供了一种将数据和样式绑定到HTML元素的方法。Windows库提供的JavaScript绑定默认是单向的，所以当数据发生变化时，HTML元素会被更新；然而，HTML元素的任何变化都不会反映到绑定到的数据上。让我们通过实际操作来了解这一点，并且我们从最基本的绑定类型开始，即HTML元素与仅包含数据的简单JavaScript对象之间的声明性绑定。'
- en: First we will check for the `WinJS.Binding.optimizeBindingReferences` property,
    and set it to `true` if not set already.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将检查`WinJS.Binding.optimizeBindingReferences`属性，如果尚未设置，则将其设置为`true`。
- en: Tip
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: It is important to always set the `WinJS.Binding.optimizeBindingReferences`
    property to `true` while performing a declarative binding. This property determines
    whether or not the binding should automatically set the ID of an element. This
    property should be set to `true` in apps that use `WinJS.Binding`.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行声明性绑定时，始终设置`WinJS.Binding.optimizeBindingReferences`属性为`true`非常重要。此属性决定是否应自动为元素的ID设置绑定。在使用`WinJS.Binding`的应用程序中，应将此属性设置为`true`。
- en: 'We''ll create a sample `person` JavaScript object that contains two properties,
    `name` and `badgeColor`, as shown in the following code:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个包含两个属性的sample `person` JavaScript对象，`name`和`badgeColor`，如下面的代码所示：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now we''ll bind an HTML `span` element to the `person` object using the data
    attribute `data-win-bind`, as shown in the following code:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用数据属性`data-win-bind`将HTML `span`元素绑定到`person`对象，如下面的代码所示：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In order for the binding to take place and consequently have the name appear
    in the `span` element, we must call the `WinJS.Binding.processAll()` method and
    pass it the DOM element and the `dataContext` object; it will start searching
    for the `data-win-bind` attribute at this specified element and then go through
    all the descendants of that element.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使绑定发生并且随后在`span`元素中显示名称，我们必须调用`WinJS.Binding.processAll()`方法，并传递给它DOM元素和`dataContext`对象；它会从这个指定的元素开始寻找`data-win-bind`属性，然后遍历该元素的的所有后代。
- en: 'The following code retrieves the `span` element from the DOM and then passes
    the parameters to the `WinJS.Binding.processAll()` method:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码从DOM中获取`span`元素，然后将参数传递给`WinJS.Binding.processAll()`方法：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Tip
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If you are using the default.HTML page for this example, you will need to add
    the code after the call to `args.setPromise(WinJS.UI.processAll())` has been made
    so that all the controls have been initialized, as explained in [Chapter 3](ch03.html
    "Chapter 3. JavaScript for Windows Apps"), *JavaScript for Windows Apps*.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用这个示例的default.HTML页面，你需要在调用`args.setPromise(WinJS.UI.processAll())`之后添加代码，以便所有控件都已初始化，如在[第3章](ch03.html
    "第3章 JavaScript for Windows Apps") *JavaScript for Windows Apps*中解释的那样。
- en: 'Run the project and you will see the name **John** on the screen. The preceding
    code implements only a static binding, which means the text is not affected by
    the change in data. This is because a JavaScript object by itself is not capable
    of notifying the application when it changes. We can use `WinJS.Binding.as` to
    change this object to an observable object, which will enable the data source
    to get notified when items in that object change. The following code snippet will
    create a `bindingSource` object that manifests an observable instance of the `person`
    object we created; hence, any change made to `bindingSource` will be reflected
    in the HTML element it is bound to:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 运行项目后，你将在屏幕上看到**John**这个名字。前面的代码只实现了一个静态绑定，这意味着文本不会受到数据变化的影响。这是因为JavaScript对象本身无法通知应用程序当它发生变化。我们可以使用`WinJS.Binding.as`将这个对象变为可观察的对象，这将使得数据源在对象中的项发生变化时得到通知。以下代码片段将创建一个`bindingSource`对象，它表示我们创建的`person`对象的观测实例；因此，对`bindingSource`的任何更改都将反映在与它绑定的HTML元素上：
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Let''s see this dynamic data binding in action. First, add an `input type`
    element to enter name values and a `button` element, as shown in the following
    code as shown in the following code:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看动态数据绑定的实际效果。首先，向输入姓名值和`button`元素的`input type`中添加代码，如下面的代码所示：
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then, we write the code that simulates a change in the `person` data object.
    We do this by setting the `name` property in the `person` object to the new value
    entered in the `input` element on the click event for the `setNameBtn` button,
    as shown in the following code:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们编写模拟`person`数据对象变化的代码。我们通过在`setNameBtn`按钮的点击事件中设置`person`对象的`name`属性为在`input`元素中输入的新值来实现，如下面的代码所示：
- en: '[PRE5]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Run the project and try entering new values in the `input` element, and then
    click on the button to see the names getting changed.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 运行项目，尝试在`input`元素中输入新值，然后点击按钮查看名称是否发生变化。
- en: 'Not only can we bind data to an HTML element but we can also apply binding
    at the level of the style. Going back to the previous example, let''s add the
    `style.background` value to the data attribute and bind it to the `badgeColor`
    field of the `person` object, as shown in the following code:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不仅可以将数据绑定到HTML元素上，还可以在样式级别应用绑定。回到上一个例子，让我们将`style.background`值添加到数据属性中，并绑定到`person`对象的`badgeColor`字段，如下面的代码所示：
- en: '[PRE6]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Make the preceding changes and refresh the app, and the name will be highlighted
    in blue. When you run the app, the output should look like the following screenshot
    (if you are referencing the `ui-light.css` style sheet, the output will be a darker
    shade of blue):'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 做出上述更改后，刷新应用，名字将会用蓝色高亮显示。当你运行应用时，输出应该看起来像下面的截图（如果你引用的是`ui-light.css`样式表，输出将会是蓝色的一种更深的阴影）：
- en: '![Getting the data](img/7102EN_05_01.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![获取数据](img/7102EN_05_01.jpg)'
- en: There are several other approaches for data access and storage in Windows Store
    apps; the data sources can be either local or remote and your choice of storage
    basically depends on the scenario at hand. For example, a Windows Store app that
    needs to be connected and alive would require access to data from a remote online
    source. The data might be fetched from the web URLs or RESTful services. The ideal
    way to consume these web services is using the `WinJS.xhr` function that we were
    introduced to in [Chapter 3](ch03.html "Chapter 3. JavaScript for Windows Apps"),
    *JavaScript for Windows Apps*.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows Store应用中，还有其他几种数据访问和存储的方法；数据源可以是本地或远程，你选择的存储方式基本上取决于当前的场景。例如，一个需要保持连接并始终运行的Windows
    Store应用就需要访问来自远程在线源的数据。这些数据可能来源于网页URL或RESTful服务。理想情况下，使用我们在[第3章](ch03.html "第3章
    JavaScript for Windows Apps")*JavaScript for Windows Apps*中介绍的`WinJS.xhr`函数来消费这些网络服务。
- en: 'The `WinJS.xhr` function will make an asynchronous request to a web URL or
    a service and return the data in response upon a successful call. Let''s assume
    we need to get some tweets and parse the results; the call is pretty straightforward
    in this case. To do this, provide the URL to the Twitter search service that will
    search for all the tweets that contain `windows 8`, as shown in the following
    code:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`WinJS.xhr`函数将向一个web URL或服务发起异步请求，并在成功调用后返回响应中的数据。假设我们需要获取一些推文并解析结果；在这个案例中，调用非常直接。为此，提供Twitter搜索服务的URL，该服务将搜索包含`windows
    8`的所有推文，如下面的代码所示：'
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The output will be all the tweets that match the query wrapped in a JSON string,
    which is the data format provided by many websites. Windows 8 JavaScript has native
    support for JSON; hence, we can simply deserialize the JSON string into an object
    by calling `JSON.parse(jsonString)`. Let''s append the preceding code to get the
    following code:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将是一个包含与查询匹配的所有推文的JSON字符串，这是许多网站提供的数据格式。Windows 8 JavaScript对JSON有原生支持，因此，我们可以通过调用`JSON.parse(jsonString)`将JSON字符串反序列化为一个对象。让我们将前面的代码添加如下：
- en: '[PRE8]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We can also read the data from a file by using the `Windows.Storage` API file
    provided by Windows. If we have a readable file and an instance of `storageFile`
    that represents it, we can read the text from the file or we can read bytes using
    a buffer. In order to read text from a file, we can make use of the `readTextAsync(file)`
    function of the `fileIO` class as shown in the following code:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用Windows提供的`Windows.Storage` API文件从文件中读取数据。如果我们有一个可读文件和一个代表它的`storageFile`实例，我们可以从文件中读取文本，或者我们可以使用缓冲区读取字节。为了从文件中读取文本，我们可以利用`fileIO`类提供的`readTextAsync(file)`函数，如下面的代码所示：
- en: '[PRE9]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: When the preceding code runs successfully, this function returns the contents
    of the file as a text string passed via the variable `fileContents`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当之前的代码成功运行时，这个函数会返回一个通过变量`fileContents`传递的文本字符串，该字符串包含了文件的内容。
- en: 'Almost the same thing applies when reading a byte from a file; however, we
    call the method `readTextAsync(file)` and pass it the file. We can then capture
    the buffer data in the response after the async process completes using the `then()`
    or `done()` method, as shown in the following code:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎同样的原则适用于从文件中读取字节；然而，我们调用`readTextAsync(file)`方法，并向其传递文件。在异步过程完成后，我们可以使用`then()`或`done()`方法捕捉响应中的缓冲区数据，如下面的代码所示：
- en: '[PRE10]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In the preceding code, we used the `DataReader` class to read from the buffer;
    this class provides the functionality to read strings from an in-memory stream
    and process the buffer.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们使用了`DataReader`类从缓冲区读取数据；这个类提供了从内存流读取字符串的功能，并处理缓冲区。
- en: Displaying the data
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示数据
- en: 'We have learned about the different sources of data and seen a couple of examples
    on how to get the data. Now we will see how to format and display that data. In
    the previous examples, we saw how we can bind data to any HTML element, but fortunately
    there is a better way to do this. The better way is using the Windows library
    for JavaScript, which provides controls and templates that make it easy to format
    and display the data. The most famous controls are `ListView` and `FlipView`;
    when it comes to binding and displaying data, the same technique applies for both
    but we''ll use `ListView` in this chapter. It is not out of personal preference
    but a question of taking advantage of the features of `ListView` control, since
    it provides a flexible way to display data with built-in support for the cross-slide
    (touch) gesture; also, it is performance-optimized. Moreover, it delivers an appearance
    and a behavior that are consistent with Windows Store apps. The steps to do the
    binding and displaying the data are as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学习了不同数据源的知识，并看到了几个获取数据的示例。现在我们将了解如何格式化和显示这些数据。在前面的示例中，我们看到了如何将数据绑定到任何HTML元素，但幸运的是还有更好的方法。更好的方法是使用Windows库for
    JavaScript，它提供了控件和模板，使格式化和显示数据变得容易。最著名的控件是`ListView`和`FlipView`；在绑定和显示数据时，这两种方法应用相同的技巧，但在这个章节中我们将使用`ListView`。这不仅仅是因为个人偏好，而是利用`ListView`控件的功能，因为它提供了一种灵活的方式显示数据，并内置了对交叉滑动（触摸）手势的支持；此外，它还进行了性能优化。而且，它提供了一个与Windows
    Store应用一致的外观和行为。绑定和显示数据的步骤如下：
- en: Get the data.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取数据。
- en: Create a `WinJS.Binding.List` object to wrap the data.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`WinJS.Binding.List`对象来包装数据。
- en: Create a `ListView` element.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`ListView`元素。
- en: Set `itemDataSource` of the `ListView` element to the `WinJS.Binding.List` object.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`ListView`元素的`itemDataSource`设置为`WinJS.Binding.List`对象。
- en: 'Let''s continue with the example we used previously for getting tweets via
    the web URL; the code returns a JSON string that is our data here, so the next
    step is to create a `WinJS.Binding.List` object as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续使用之前用于通过网络URL获取推文的例子；代码返回了一个JSON字符串，这里就是我们的数据，所以下一步是创建一个`WinJS.Binding.List`对象，如下所示：
- en: '[PRE11]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We just did steps 1 and 2; step 3 involves creating a `ListView` element in
    the DOM and getting an instance of it in the JavaScript code.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚完成了步骤1和2；第3步涉及在DOM中创建一个`ListView`元素，并在JavaScript代码中获得它的实例。
- en: 'In HTML, we use the following:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在HTML中，我们使用如下内容：
- en: '[PRE12]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In JavaScript, we use the following:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，我们使用以下代码：
- en: '[PRE13]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In step 4, we set the `itemDataSource` attribute of the `ListView` object to
    `dataSource` of the `bindingList` object and the complete code will look like
    the following code snippet:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在第4步中，我们将`ListView`对象的`itemDataSource`属性设置为`bindingList`对象的`dataSource`属性，完整的代码将如下面的代码片段所示：
- en: '[PRE14]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'If you are adding the `ListView` control or any other `WinJS.UI` control in
    the `default.html` page, remember to add the previous code in a `then()` or `done()`
    call on the function `WinJS.UI.ProcessAll()`, as shown in the following code:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在`default.html`页面中添加`ListView`控件或其他`WinJS.UI`控件，请记得在函数`WinJS.UI.ProcessAll()`上的`then()`或`done()`调用中添加前面的代码，如下面的代码所示：
- en: '[PRE15]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The reason for adding that code is that this function processes the Windows
    library for JavaScript controls and renders these controls in the DOM.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 添加这段代码的原因是这个函数处理Windows库中的JavaScript控件并在DOM中渲染这些控件。
- en: 'Now let''s build and run the project. The output will be a list containing
    the tweets, each with its properties, as shown in the following screenshot:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们构建并运行项目。输出将是一个包含推文的列表，每个推文都有其属性，如下面的截图所示：
- en: '![Displaying the data](img/7102EN_05_02.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![显示数据](img/7102EN_05_02.jpg)'
- en: 'Although the `ListView` control does the job of binding the data automatically,
    it looks messed up and needs formatting. The `WinJS` control provides templates
    that can be used in combination with the `ListView` and `FlipView` objects to
    specify how each item should be displayed and which data it will show. Templates
    can be defined declaratively as a `WinJS` control and provide its structure and
    styles, either by specifying the `div` element in which it should appear or by
    using the `render` method to create its own `div` element. Let''s see this in
    action. Inside the DOM, add a `div` element and assign it to `WinJS.Binding.Template`
    via the `data-win-control` attribute as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管`ListView`控件可以自动绑定数据，但看起来很乱，需要格式化。`WinJS`控件提供了模板，可以与`ListView`和`FlipView`对象结合使用，指定每个项目应如何显示以及它将显示哪些数据。可以通过指定应出现的`div`元素或使用`render`方法创建自己的`div`元素来声明定义模板。让我们亲身体验一下。在DOM内部，添加一个`div`元素，并通过`data-win-control`属性将其分配给`WinJS.Binding.Template`，如下所示：
- en: '[PRE16]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Then create the internal structure of the template by first adding a root `div`
    element and then adding the bound elements inside that root `div`, as shown in
    the following code snippet:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 然后通过首先添加一个根`div`元素，然后在该根`div`内部添加绑定元素来创建模板的内部结构，如下面的代码片段所示：
- en: '[PRE17]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: You may have noticed in the previous screenshot that the listed data items contained
    properties marked with quotes and followed by a colon; for example, `"created_at":`
    and `"from_user":`. These properties represent the data that was returned in the
    `jsonData` object from the web call to Twitter and these properties are passed
    as parameters to the `data-win-bind` attribute in the `listTemplate` element to
    be rendered in the DOM.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能在之前的截图中注意到，列出的数据项包含用引号标记的属性，后面跟着一个冒号；例如，`"created_at":` 和 `"from_user":`。这些属性代表了从Twitter的web调用返回的`jsonData`对象中的数据，并且这些属性作为参数传递给`listTemplate`元素中的`data-win-bind`属性，以便在DOM中渲染。
- en: 'Next, we should assign this newly created template to the `ListView` control
    we created earlier, by specifying a value for `itemTemplate` in the `data-win-options`
    attribute, as shown in the following code:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们应该将这个新创建的模板分配给前面创建的`ListView`控件，通过在`data-win-options`属性中指定一个`itemTemplate`值，如下面的代码所示：
- en: '[PRE18]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Run the project and you will see something similar to the next screenshot.
    Since live data is being fetched from Twitter, the values will change according
    to the specific query:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 运行项目后，您将看到与下一张截图类似的界面。由于正在从Twitter获取实时数据，值将根据特定查询而变化：
- en: '![Displaying the data](img/7102EN_05_03.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![显示数据](img/7102EN_05_03.jpg)'
- en: Sorting and filtering the data
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 排序和过滤数据
- en: 'We got the data and we used templates to display it and bind it to the `WinJS`
    control. Now, what if we need to sort the data items or even filter out unwanted
    items based on a certain criterion? The binding list API provided by the `WinJS`
    library handles this seamlessly using built-in methods such as `createSorted`
    and `createFiltered`. If we go back to the code we wrote earlier to fetch the
    tweets and write the `bindingList` variable we created, which is an instance of
    `WinJS.Binding.List`, and try to call the method `createSorted`, you will notice
    the autocomplete feature lists the other two built-in functions provided for this
    functionality, as shown in the following screenshot:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们获取了数据，并使用模板来展示它并将它绑定到`WinJS`控件上。现在，如果我们需要对数据项进行排序，甚至根据某个特定标准筛选掉不需要的项，该怎么办呢？`WinJS`库提供的绑定列表API无缝地使用内置方法如`createSorted`和`createFiltered`来处理这一点。如果我们回到之前编写的代码，获取推文并创建`bindingList`变量，这是一个`WinJS.Binding.List`的实例，并尝试调用`createSorted`方法，你会注意到自动完成功能列出了为此功能提供的其他两个内置函数，如下面的屏幕截图所示：
- en: '![Sorting and filtering the data](img/7102EN_05_04.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![Sorting and filtering the data](img/7102EN_05_04.jpg)'
- en: These two methods will create a view over its data called "sorted projection".
    The `createSorted` method will return a `SortedListProjection` object, which represents
    a sorted view over the data it holds, and similarly the `createFiltered` method
    will return a `FilteredListProjection` object representing a filtered view over
    the data. The main advantage of these two projections is that they are fully observable,
    which means that when the data in the list changes, its corresponding projection
    will get a notification and update itself. Additionally, when the projection changes
    itself, it will notify any listening object about its change.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个方法将为它的数据创建一个名为“排序投影”的视图。`createSorted`方法将返回一个`SortedListProjection`对象，它代表了一个对其持有的数据进行排序的视图，同样，`createFiltered`方法将返回一个`FilteredListProjection`对象，代表了一个对其数据进行筛选的视图。这两个投影的主要优点是它们是完全可观察的，这意味着当列表中的数据发生变化时，其相应的投影将收到通知并更新自己。此外，当投影自身发生变化时，它会通知任何监听的对象其变化。
- en: 'We can sort this binding list by calling the `createSorted` method, which takes
    the sorting function parameter that handles the sorting logic. Let''s sort the
    tweets we fetched alphabetically by user name. Use the following code:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过调用`createSorted`方法来对这个绑定列表进行排序，该方法接收处理排序逻辑的排序函数参数。让我们按用户名字母顺序排序我们获取的推文。使用以下代码：
- en: '[PRE19]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The `createSorted` function will do the sorting logic inside the sorter function
    parameter that, in this case, compares the `from_user_name` field from the list
    and returns the list that is sorted alphabetically. Note that the fields to compare
    are fields from the data items in the list.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`createSorted`函数将在sorter函数参数内进行排序逻辑，在这个例子中，比较列表中的`from_user_name`字段并返回按字母顺序排序的列表。注意比较的字段是列表中数据项的字段。'
- en: 'Once we are done with the sorting, the `itemDataSource` attribute of the `ListView`
    control should now bind to the newly created `sortedList` method in order to see
    the following code:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们完成了排序，`ListView`控件的`itemDataSource`属性现在应该绑定到新创建的`sortedList`方法，以便看到以下代码：
- en: '[PRE20]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Build and run the project and you will see a result similar to the following
    screenshot:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 构建并运行项目，你会看到与以下屏幕截图类似的结果：
- en: '![Sorting and filtering the data](img/7102EN_05_05.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![Sorting and filtering the data](img/7102EN_05_05.jpg)'
- en: 'The filtering is done by calling the `createFiltered` method that creates a
    live filtered projection over this list. The filtered projection will react to
    changes in the list and may also change accordingly. This method takes one parameter
    of type `function`, and what this parameter basically does is execute a callback
    method on each element in the list. For example, we want to apply a filter to
    `bindingList` that will check if the `from_user_name` string has the character
    `''a''` as the second character of its value and return only the matching items
    in the list. The `createFiltered` parameter of type `function` will check for
    each string in the list; if the condition returns true, include that string in
    the filtered list. To use the filter, refer to the following code snippet:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 筛选是通过调用`createFiltered`方法来完成的，该方法创建了一个实时筛选投影，覆盖此列表。筛选投影将反应列表中的变化，并且可能相应地发生变化。此方法接收一个类型为`function`的参数，这个参数的基本作用是在列表中的每个元素上执行回调方法。例如，我们希望对`bindingList`应用一个筛选器，该筛选器将检查`from_user_name`字符串的第二个字符是否为`'a'`，并只返回列表中匹配的项。`createFiltered`的`function`类型的参数将对列表中的每个字符串进行检查；如果条件为真，则将该字符串包含在筛选列表中。要使用筛选器，请参考以下代码片段：
- en: '[PRE21]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Run the project and you will see that the list has been filtered accordingly
    (you can change the filter criteria as you please in order to better see the effect
    of the filter). The result will be something similar to the following screenshot:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 运行项目，您将看到列表已根据筛选条件进行了筛选（您可以随意更改筛选条件，以便更好地看到筛选器的效果）。结果将类似于以下屏幕截图：
- en: '![Sorting and filtering the data](img/7102EN_05_06.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![对数据进行排序和筛选](img/7102EN_05_06.jpg)'
- en: Summary
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter we have covered the basics for handling data in a JavaScript
    app. We learned how to get the data from a local object and how to fetch data
    from the web via a web service and handle the data that is coming back with the
    response.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经涵盖了在JavaScript应用程序中处理数据的基本知识。我们学习了如何从本地对象获取数据，以及如何通过Web服务从Web获取数据，并处理返回响应中的数据。
- en: We then covered how to display the data we fetched and bind it to a `ListView`
    control. Finally, we saw how we can add sorting and filtering to this data before
    we display it on the app.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们介绍了如何显示我们从本地对象获取的数据，并将其绑定到`ListView`控件。最后，我们看到了如何在将数据显示在应用程序之前对其进行排序和筛选。
- en: In the next chapter we will learn how to make the app responsive to allow the
    layout to change when the view state changes, so that the content always appears
    to the user in a good format.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何使应用程序具有响应性，以便在视图状态发生变化时布局也发生变化，从而使内容始终以良好的格式呈现给用户。
