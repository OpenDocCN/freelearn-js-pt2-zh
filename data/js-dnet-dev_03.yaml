- en: Chapter 3. Using jQuery in ASP.NET
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章 使用jQuery在ASP.NET中
- en: We will start off this chapter with a short introduction to jQuery. jQuery is
    a JavaScript library developed to provide a better development experience and
    a faster coding experience by writing less code to do complex operations much
    faster compared to plain vanilla JavaScript. However, JavaScript is still there
    when writing custom scripts for specific reasons. So, jQuery helps you perform
    DOM manipulation, selecting elements based on class, element name, and so on,
    and provides a better event handling model to make it simpler for developers to
    use in their routine projects.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从这个章节开始，先对jQuery作一个简短的介绍。jQuery是一个JavaScript库，旨在通过编写更少的代码来提供更好的开发体验和更快的编程体验，与纯JavaScript相比，它可以更快地执行复杂操作。然而，当编写特定原因的自定义脚本时，JavaScript仍然存在。因此，jQuery可以帮助你进行DOM操作，根据类、元素名称等选择元素，并提供一个更好的事件处理模型，使开发者在他们的日常项目中使用更为简单。
- en: Compared to JavaScript, another advantage is the cross browser issues. It offers
    consistent behavior across browsers. JavaScript, on the other hand, is implemented
    differently by each browser. Also, in order to handle cross-browser issues in
    JavaScript, a developer tends to write some conditional logic to check what browser
    version JavaScript is running on and handle it accordingly; whereas jQuery handles
    all the heavy lifting of what the browser is and provides consistent behavior.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 与JavaScript相比，另一个优点是跨浏览器问题。它提供了跨浏览器的 consistent behavior。另一方面，每个浏览器对JavaScript的实现都不一样。此外，为了在JavaScript中处理跨浏览器问题，开发者倾向于编写一些条件逻辑来检查JavaScript正在运行的浏览器版本并相应地处理；而jQuery处理了浏览器的所有重活，并提供了
    consistent behavior。
- en: 'Some powerful features of jQuery that we will discuss in the current chapter
    are as follows:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论jQuery的一些强大功能，如下：
- en: Working with selectors
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用选择器
- en: Manipulating the DOM elements
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作DOM元素
- en: Handling events
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理事件
- en: Getting started with jQuery
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用jQuery
- en: The jQuery library can be downloaded from [http://jquery.com](http://jquery.com).
    The latest version of jQuery is 3.0.0 and you can use this library if you are
    targeting modern browsers; for example, IE 9 and Microsoft Edge support this version.
    For older versions—for example, IE 6-8—you can download jQuery 1.x.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery库可以从[http://jquery.com](http://jquery.com)下载。jQuery的最新版本是3.0.0，如果你目标是现代浏览器，例如，IE
    9和Microsoft Edge支持这个版本，你可以使用这个库。对于较旧版本—例如，IE 6-8—你可以下载jQuery 1.x。
- en: 'Once jQuery is downloaded, you can add it to your project and reference it,
    as shown here:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦jQuery被下载，你可以将其添加到你的项目中并引用，如下所示：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Using a content delivery network
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用内容交付网络
- en: 'Instead of loading jQuery from your server, we can also load it from some other
    server, such as the Microsoft server or Google server. These servers are called
    the **content delivery network** (**CDN**) and they can be referenced as shown
    here:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 'Instead of loading jQuery from your server, we can also load it from some other
    server, such as the Microsoft server or Google server. These servers are called
    the **content delivery network** (**CDN**) and they can be referenced as shown
    here:'
- en: 'Referencing the Microsoft CDN:'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引用微软CDN：
- en: '[PRE1]'
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Referencing the Google CDN:'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引用谷歌CDN：
- en: '[PRE2]'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The use of CDN
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用CDN
- en: Actually, these CDNs are very common and most of the sites already use them.
    When running any application that references a CDN, there are chances that some
    other website might have also used the same CDN of Microsoft or Google, and the
    same file might be cached on the client side. This increases the page rendering
    performance. Also, downloading the jQuery library again from your local server
    uses the cached version of CDN. Moreover, Microsoft and Google have different
    servers available, based on different regions, and the user will get some speed
    benefits too when using it from a CDN.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，这些CDN非常普遍，大多数网站已经在使用它们。当运行任何引用CDN的应用程序时，有可能其他网站也使用了微软或谷歌的同一个CDN，相同的文件可能会在客户端缓存。这提高了页面渲染性能。另外，再次从本地服务器下载jQuery库时，使用的是CDN的缓存版本。而且，微软和谷歌提供了不同地区的服务器，用户在使用CDN时也能获得一些速度上的好处。
- en: 'However, there are certain cases when the CDN might be down, and in this case,
    you might have to refer to and download scripts from your own server. To handle
    this scenario, we can specify the fallback URL, which detects whether it has been
    downloaded from CDN; otherwise, it downloads from the local server. We can use
    the following script to specify the fallback:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有时 CDN 可能会宕机，在这种情况下，你可能需要参考并从你自己的服务器下载脚本。为了处理这种场景，我们可以指定回退 URL，它检测是否已经从 CDN
    下载；否则，它从本地服务器下载。我们可以使用以下脚本来指定回退：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `window.jQuery` instance tells us whether jQuery is loaded; otherwise, it
    writes the script on the DOM, which refers to the local server.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`window.jQuery` 实例告诉我们 jQuery 是否已加载；否则，它在 DOM 上写入脚本，指向本地服务器。'
- en: Alternatively, in ASP.NET Core, we can use the `asp-fallback-src` attribute
    to specify the fallback URL. ASP.NET Core 1.0 provides a wide range of tag helpers.
    Compared to the HTML helpers, these helpers can be used just by adding the HTML
    attributes to the page elements and they offer developers the same experience
    as writing the frontend code.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，在 ASP.NET Core 中，我们可以使用 `asp-fallback-src` 属性来指定回退 URL。ASP.NET Core 1.0 提供了一系列广泛的标签助手。与
    HTML 助手相比，这些助手可以通过向页面元素添加 HTML 属性来使用，并为开发者提供与编写前端代码相同的体验。
- en: 'The same code can be written in a simple way to handle the fallback scenarios
    in ASP.NET:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ASP.NET 中可以用一种简单的方式编写代码来处理回退场景：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In ASP.NET Core, there is one more tag helper, `<environment>`, which can be
    used to load scripts based on the current environment set in the `launchSettings.json`
    file:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ASP.NET Core 中，还有一个标签助手 `<environment>`，可以用来根据 `launchSettings.json` 文件中设置的当前环境加载脚本：
- en: '![The use of CDN](img/00013.jpeg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![CDN 的使用](img/00013.jpeg)'
- en: 'Based on the current environment set in the project''s profile, we can load
    scripts to cater to debugging and production scenarios. For example, in a production
    environment, preferably, we used to specify the minified version of the JavaScript
    libraries as it removes all the white spaces and renames the variables to make
    it more compressed in size to load fast. However, for debugging purposes, the
    standard non-minified version is much better as far as the development experience
    is concerned. Therefore, we can use the environment tag helper, as shown in the
    following code, to load the minified version for production and standard when
    developing an application:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 根据项目配置文件中设置的当前环境，我们可以加载脚本来满足调试和生产场景的需求。例如，在生产环境中，最好指定 JavaScript 库的压缩版本，因为它移除了所有空白字符并将变量重命名为更紧凑的尺寸，以便快速加载。然而，就开发体验而言，标准的非压缩版本对于调试目的来说要好得多。因此，我们可以使用以下代码所示的环境标签助手，在开发应用程序时加载生产环境和标准版本：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The document ready event
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文档就绪事件
- en: The jQuery library can be accessed through a `$` sign or simply by writing `jQuery`.
    However, preferably, developers access it using a dollar sign. It also provides
    a way to catch an event when the DOM hierarchy is completely loaded. This means
    that once the DOM structure is loaded, you can catch this event to perform different
    operations, such as associating the CSS class with controls and manipulating control
    values. The DOM hierarchy is not dependent on the the images or CSS files when
    the page is loading and the document ready event is raised in parallel irrespective
    of whether the images or CSS files are downloaded or not.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery 库可以通过一个 `$` 符号或者简单地写 `jQuery` 来访问。然而，最好是由开发者使用美元符号访问。它还提供了一种在 DOM 层次结构完全加载时捕获事件的方法。这意味着一旦
    DOM 结构加载完成，你可以捕获这个事件来执行不同的操作，如将 CSS 类与控件关联和操作控件值。当页面加载时，DOM 层次结构不依赖于图像或 CSS 文件，并且无论图像或
    CSS 文件是否下载，`document ready` 事件都会并行触发。
- en: 'We can use the document ready event, as shown in this code:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用文档就绪事件，如这段代码所示：
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As explained in the preceding code, `$` is the way of accessing a jQuery object.
    It takes a `document` object, which is passed as a parameter, whereas `ready`
    checks whether the `document` object model hierarchy is loaded completely once.
    Finally, it takes an anonymous function in which we can write the operation that
    we need to perform. In the preceding example, we are just displaying a simple
    text message when the DOM hierarchy gets loaded.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述的代码解释，`$` 是访问 jQuery 对象的方式。它需要一个作为参数传递的 `document` 对象，而 `ready` 则是检查一旦文档对象模型层次结构完全加载。最后，它接受一个匿名函数，我们可以在其中编写所需的操作。在前面的例子中，当
    DOM 层次结构加载时，我们只是显示一个简单的文本消息。
- en: The jQuery selectors
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jQuery选择器
- en: For DOM manipulation, the jQuery selectors play an important role and provide
    a better and easy one-line approach to select any element from DOM and manipulate
    its values and attributes, for example, searching a list of elements with a specific
    CSS class is easier with the jQuery selectors.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 对于DOM操作，jQuery选择器起着重要作用，并提供了一种更简单、易行的一行方法来选择DOM中的任何元素并操作其值和属性，例如，使用jQuery选择器更容易搜索具有特定CSS类的元素列表。
- en: The jQuery selectors can be written with a dollar sign and parentheses. We can
    use the jQuery selectors to select elements based on the element's ID, tag name,
    class, attribute value, and input nodes. We will look into these elements one
    by one with a practical example in the next section.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery选择器可以用美元符号和括号来书写。我们可以使用jQuery选择器根据元素的ID、标签名、类、属性值和输入节点来选择元素。在下一节中，我们将逐一通过实际例子来看这些元素。
- en: Selecting the DOM elements using the ID
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过ID选择DOM元素
- en: 'The following example shows you the way of selecting a `div` element with its
    ID:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例展示了选择具有ID的`div`元素的方法：
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'After selecting an element, we can call various methods to set values. In the
    given example, we called the `html()` method that takes the `html` string and
    sets `Hello World` as the first heading. On the other hand, the `html` content
    can be retrieved by calling this code:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 选择元素后，我们可以调用各种方法来设置值。在给定示例中，我们调用了`html()`方法，该方法接受`html`字符串并设置第一个标题为`Hello World`。另一方面，可以通过调用此代码来检索`html`内容：
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Selecting the DOM elements using TagName
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过TagName选择DOM元素
- en: In JavaScript, we can retrieve the DOM elements by calling `document.getElementsByTagName()`.
    This element returns an array of elements matched with the tag name. In jQuery,
    this can be achieved in an easier way and the syntax is quite simple.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，我们可以通过调用`document.getElementsByTagName()`来检索DOM元素。这个函数返回与标签名匹配的元素数组。在jQuery中，这种方式可以更简单实现，并且语法相当简单。
- en: 'Consider the following example:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例：
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Let''s have a look at the following example to clarify our understanding:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过以下示例来阐明我们的理解：
- en: '[PRE10]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The preceding example sets all the `div` child controls alignment to the left.
    If you note here, we didn''t have to loop through all the `div` controls to set
    the background color and the style has been set on `all`. However, there are certain
    cases in which you might need to set different values based on the index of each
    element residing, and this can be done using the `each()` function on `div`. For
    example, the following script shows you the way of assigning an `index` value
    as an `html` string on each `div` control using the `each` function:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的示例将所有`div`子控件的对齐设置为左对齐。如果你注意这里，我们并没有必要遍历所有的`div`控件来设置背景颜色，而且样式已经应用于`all`。然而，在某些情况下，你可能需要根据每个元素的索引设置不同的值，这可以通过在`div`上使用`each()`函数来实现。例如，下面的脚本展示了如何使用`each`函数为每个`div`控件分配一个`index`值作为`html`字符串：
- en: '[PRE11]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Each function takes a function with the index and elements as a parameter.
    We can access each element using a dollar sign, as shown in the preceding code,
    and set the index as the content by calling the `html` method. The output will
    be similar to the following screenshot:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 每个函数都带有一个参数，该参数是一个带有索引和元素的函数。我们可以使用美元符号访问每个元素，如前代码所示，并通过调用`html`方法将索引设置为内容。输出将类似于以下屏幕截图：
- en: '![Selecting the DOM elements using TagName](img/00014.jpeg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![通过TagName选择DOM元素](img/00014.jpeg)'
- en: 'Let''s have a look at another example that displays the content of each `div`
    control in a console window. Here, the `each()` function takes no parameters and
    each item in the loop can be accessed through the `this` keyword:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看另一个示例，它将在控制台窗口中显示每个`div`控件的内容。在这里，`each()`函数不需要参数，每个循环中的项目可以通过`this`关键字访问：
- en: '[PRE12]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The output will be as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Selecting the DOM elements using TagName](img/00015.jpeg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![通过TagName选择DOM元素](img/00015.jpeg)'
- en: There are various other methods available, which you can refer to in the jQuery
    documentation. Therefore, with selectors, we can search any element in a faster
    and more efficient way.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他各种方法可供使用，您可以在jQuery文档中查阅。因此，使用选择器，我们可以更快、更高效地搜索DOM中的任何元素。
- en: Another example is selecting multiple elements using the tag name, as follows.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个例子是使用标签名选择多个元素，如下所示。
- en: '[PRE13]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Unlike accessing class names, we can restrict the search by specifying the tag
    name before the period and class name. You can use `$('button.active')` to search
    for all the buttons that are active.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 与访问类名不同，我们可以通过在点号和类名之前指定标签名来限制搜索。您可以使用`$('button.active')`来查找所有激活的按钮。
- en: Selecting by the attribute value
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过属性值选择
- en: In certain cases, you may have to select the elements based on the attribute
    or its value. The jQuery library provides a very concise way of searching elements
    based not only on the attribute, but its value as well.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，您可能需要根据属性或其值来选择元素。jQuery库提供了一种非常简洁的方式来根据属性及其值搜索元素。
- en: 'The syntax of using this selector is specifying the element name followed by
    a square bracket containing the attribute name and value, which is optional:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此选择器的语法是先指定元素名称，然后是包含属性名称和值的方括号，这是可选的：
- en: '[PRE16]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'For example, the following code selects all the elements that have `type` as
    an attribute:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下代码选择所有具有`type`属性的元素：
- en: '[PRE17]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In this example, we have three input controls that have a `type` attribute.
    So, the result will be `3`. In the same way, if you want to search for the elements
    that have a value equal to `hello world`, we can use the following code:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们有三个具有`type`属性的输入控件。所以，结果将是`3`。同样，如果您想搜索具有等于`hello world`的值的元素，我们可以使用以下代码：
- en: '[PRE18]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: One thing to note is that the attribute value is case sensitive, and so, with
    this expression, you should consider the exact case as the attribute value. However,
    there are other ways as well, that is, using `^` to search a value that contains,
    starts, or ends with particular text.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，属性值是大小写敏感的，因此，在使用此表达式时，您应该考虑属性值的确切大小写。然而，还有其他方法，那就是使用`^`来搜索包含、开始或结束特定文本的值。
- en: 'Let''s have a look at the following example, `alert`, which is based on searching
    a value that starts with an expression:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个基于搜索以表达式开始的值的`alert`例子：
- en: '[PRE19]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'On the other hand, we can also search a value that ends with a text using the
    `$` symbol. Here is the code to search the text that ends with `1`:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，我们也可以使用`$`符号来搜索以文本结尾的值。以下是搜索以`1`结尾的文本的代码：
- en: '[PRE20]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Finally, searching for a text that contains some text can be achieved using
    `*` and here is the code to run this example:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，搜索包含某些文本的文本可以使用`*`实现，以下是运行此例子的代码：
- en: '[PRE21]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Selecting input elements
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选择输入元素
- en: Input controls in HTML have a wide range of different controls. Controls such
    as `textarea`, `button`, `input`, `select`, `image`, and `radio` are input controls.
    These controls are normally used in form-based applications. Therefore, jQuery
    specifically provides the selecting option to select input controls based on different
    criteria.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: HTML中的输入控件有很多不同的控件。`textarea`、`button`、`input`、`select`、`image`和`radio`等控件都是输入控件。这些控件通常用于基于表单的应用程序中。因此，jQuery专门提供了基于不同标准的输入控件的选择选项。
- en: 'This selector starts with a dollar and the `input` keyword followed by the
    attribute and value:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这个选择器以美元符号和`input`关键词开头，后跟属性和值：
- en: '[PRE22]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: However, in the previous section, we have already seen how to search any element
    with the attribute name and value. So, if we want to search all the input controls
    with the type that equals to text, it is achievable.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在上一节中，我们已经看到了如何搜索具有属性名称和值的任何元素。所以，如果我们想要搜索所有类型等于文本的输入控件，这是可以实现的。
- en: This selector is less performance-efficient in particular scenarios and searches
    out all the controls that are a part of the input group and finds the attribute
    with its value; whereas, this selector will only search in the input controls.
    When writing programs, using this method is a better choice if something is specifically
    targeting the input control properties.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这个选择器在某些场景下性能效率较低，它搜索出所有输入组中的控件，并找到属性及其值；然而，这个选择器只会搜索输入控件。在编写程序时，如果有什么东西专门针对输入控件属性，使用这种方法是一个更好的选择。
- en: 'Let''s have a look at the following example in ASP.NET Core MVC 6 that applies
    the CSS properties once the document is loaded completely:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个在ASP.NET Core MVC 6中的例子，该例子在文档完全加载后应用CSS属性：
- en: '[PRE23]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Selecting all the elements
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选择所有元素
- en: The jQuery library provides you with a special selector that brings the collection
    of all the elements defined in a DOM. Instead of the standard controls, it also
    returns the elements, such as `<html>`, `<head>`, `<body>`, `<link>`, and `<script>`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '**jQuery库**为您提供了一个特殊的选择器，它能够获取DOM中定义的所有元素的集合。除了标准控件之外，它还会返回诸如`<html>`、`<head>`、`<body>`、`<link>`和`<script>`之类的元素。'
- en: 'The syntax of getting all the elements is `$("*")` and the following example
    lists down all the elements of the DOM on the browser''s console:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 获取所有元素语法是`$("*")`，下面的例子在浏览器的控制台中列出了DOM的所有元素：
- en: '[PRE24]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'In the preceding code, we used the `prop` method that takes the property name
    to display element names. Here, in the `prop` method, we can use either `tagName`
    or `nodeName` to display name types. Finally, on the browser''s console, a login
    page will be displayed, as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们使用了`prop`方法，该方法需要属性名来显示元素名称。在这里，`prop`方法可以使用`tagName`或`nodeName`来显示名称类型。最后，在浏览器的控制台中，将显示一个登录页面，如下所示：
- en: '![Selecting all the elements](img/00018.jpeg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![选择所有元素](img/00018.jpeg)'
- en: Selecting the first and last child elements
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选择第一个和最后一个子元素
- en: The jQuery library provides special selectors to select all the first elements
    or last elements of their parent element.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**jQuery库**提供了特殊的选择器来选择它们父元素的所有第一个或最后一个元素。'
- en: 'The syntax of selecting the first child of all the parent elements is as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 选择所有父元素的第一个子元素的语法如下：
- en: '[PRE25]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The syntax of selecting the last child of all the parent elements is as follows:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 选择所有父元素的最后一个子元素的语法如下：
- en: '[PRE26]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The following example shows you the way of changing the font style of the first
    and last child of the select options:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的例子向您展示了更改选择选项的第一个和最后一个孩子的字体样式的方法：
- en: '[PRE27]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The output will be as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如下：
- en: '![Selecting the first and last child elements](img/00019.jpeg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![选择第一个和最后一个子元素](img/00019.jpeg)'
- en: The contains selector in jQuery
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: jQuery中的**包含选择器**
- en: The `contains` selector is used to find the text in the HTML container elements,
    such as `<div>` and `<p>`. This selector searches all the elements of a specific
    type and finds the text passed as a parameter to the `contains()` function. An
    example that displays the text of the `div` elements that contains the text is
    shown in the following code. This is case-sensitive, so make sure to supply the
    correct case when searching.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`contains`选择器用于查找HTML容器元素中的文本，如`<div>`和`<p>`。这个选择器搜索特定类型的所有元素，并找到传递给`contains()`函数的参数的文本。下面显示了包含`div`元素文本的代码示例。这个选择器区分大小写，因此在搜索时请确保大小写正确。'
- en: 'The following code will display an alert with the value, `2`, as it finds two
    `div` elements containing the text, `demo`:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码将显示一个带有值`2`的警告框，因为它找到了两个包含文本`demo`的`div`元素：
- en: '[PRE28]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Selecting the even and odd rows selectors
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选择偶数行和奇数行的选择器
- en: 'These types of selectors work on the rows in a table and are usually used to
    provide special formatting to the odd or even rows by changing the color of each
    odd row to make it look more like a grid. We can use this type of selector with
    the following syntax:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这类选择器适用于表格中的行，通常用于通过将每行奇数行的颜色改变为灰色，使其看起来更像网格。我们可以使用以下语法类型的选择器：
- en: '[PRE29]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Let''s have a look at the following example to change all the row colors in
    a table to gray:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个将表格中所有行颜色改为灰色的例子：
- en: '[PRE30]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Manipulating DOM
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作DOM
- en: In this section, we will see some examples of manipulating DOM through the jQuery
    methods. The jQuery library provides an extensive library of performing different
    operations on the DOM elements. We can easily modify the element attributes, apply
    styles, and iterate through different nodes and properties. We have already seen
    some examples in the previous section, and this section will focus on the DOM
    manipulation specifically.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文档的这一部分，我们将通过jQuery方法看到一些操作DOM的例子。jQuery库提供了一个广泛的库，可以对DOM元素执行不同的操作。我们可以轻松地修改元素属性、应用样式，以及遍历不同的节点和属性。我们在上一节中已经看到了一些例子，这一节将专门关注DOM操作。
- en: Modifying an element's properties
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修改元素的属性
- en: When working with a client-side scripting language, modifying an element's attributes
    and reading them is a vital task. In plain JavaScript, this can be achievable
    by writing a few lines of code; however, with jQuery, it can be achieved in a
    quicker and nicer way.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用客户端脚本语言时，修改元素属性和读取它们是一项基本任务。使用普通的JavaScript，这可以通过编写几行代码来实现；然而，使用jQuery，可以更快、更优雅地实现。
- en: Modifying any properties of an element, which is to be selected, can be done
    with the various options listed in the previous section. Each property listed
    in the following table provides both the `get` and `set` options and takes parameter(s)
    when setting something and no parameters when reading it.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 选定要修改的元素的任何属性都可以通过前面章节列出的各种选项来完成。下表中列出的每个属性都提供了`get`和`set`选项，设置时需要参数，而读取时不需要参数。
- en: There are some common methods available to modify an element, namely `html`,
    `value`, and so on, in jQuery. For more methods, you can refer to [http://api.jquery.com/category/manipulation/](http://api.jquery.com/category/manipulation/).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在jQuery中，有一些可用于修改元素的常见方法，例如`html`、`value`等。要了解更多信息，可以参考[http://api.jquery.com/category/manipulation/](http://api.jquery.com/category/manipulation/)。
- en: '| The get method | The set method | Description |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| 获取方法 | 设置方法 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `.val()` | `.val(''any value'')` | This method is used to read or write any
    value of the DOM element. |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| `.val()` | `.val(''any value'')` | 这个方法用于读取或写入DOM元素的任何值。 |'
- en: '| `.html()` | `.html(''any html string'')` | This method is used to read or
    write any HTML content of the DOM element. |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| `.html()` | `.html(''any html string'')` | 这个方法用于读取或写入DOM元素的任何HTML内容。 |'
- en: '| `.text()` | `.text(''any text'')` | This method is used to read or write
    the text content. HTML will not be returned in this method. |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| `.text()` | `.text(''any text'')` | 这个方法用于读取或写入文本内容。在这个方法中不会返回HTML。 |'
- en: '| `.width()` | `.width(''any value'')` | This method is used to update the
    width of any element. |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| `.width()` | `.width(''any value'')` | 这个方法用于更新任何元素的宽度。 |'
- en: '| `.height()` | `.height(''any value'')` | This method is used to read or modify
    the height of any element. |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| `.height()` | `.height(''any value'')` | 这个方法用于读取或修改任何元素的高度。 |'
- en: '| `.attr()` | `.attr(''attributename'', ''value'')` | This method is used to
    read or modify the value of a specific element''s attribute. |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| `.attr()` | `.attr(''attributename'', ''value'')` | 这个方法用于读取或修改特定元素属性的值。
    |'
- en: '| `.prop()` | `.prop()` | This method is the same as `attr()` but more efficient
    when dealing with the `value` property that returns the current state. For example,
    the `attr()` checkbox provides the default value whereas `prop()` gives the current
    state, that is, `true` or `false`. |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| `.prop()` | `.prop()` | 这个方法与`attr()`相同，但在处理返回当前状态的`value`属性时更高效。例如，`attr()`复选框提供默认值，而`prop()`给出当前状态，即`true`或`false`。
    |'
- en: '| `.css(''style-property'')` | `.css({''style-property1'': value1, ''style-property2'':
    value2, ''style-propertyn'':valueN }` | This method is used to set any property
    of style, such as the font size, font family, and width for a particular element.
    |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| `.css(''style-property'')` | `.css({''style-property1'': value1, ''style-property2'':
    value2, ''style-propertyn'':valueN }` | 这个方法用于设置特定元素的样式属性，如字体大小、字体家族和宽度。 |'
- en: 'Let''s have a look at the following example, which uses the `html()`, `text()`,
    and `css()` modifiers and updates the `p` element with `html`, `text`, and `increaseFontSize`:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下下面的例子，它使用了`html()`、`text()`和`css()`修饰符，并使用`html`、`text`和`increaseFontSize`更新了`p`元素：
- en: '[PRE31]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The outcome of the preceding HTML code is as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 前面HTML代码的结果如下：
- en: '![Modifying an element''s properties](img/00020.jpeg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![修改元素的属性](img/00020.jpeg)'
- en: 'You can update HTML by clicking on the **Update Html** button and plain text
    by clicking on the **Update Text** button:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过点击**更新Html**按钮来更新HTML，通过点击**更新文本**按钮来更新纯文本：
- en: '![Modifying an element''s properties](img/00021.jpeg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![修改元素的属性](img/00021.jpeg)'
- en: 'Finally, the font size can be increased by clicking on the **Increase Font
    Size** button:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，可以通过点击**增加字体大小**按钮来增加字体大小：
- en: '![Modifying an element''s properties](img/00022.jpeg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![修改元素的属性](img/00022.jpeg)'
- en: Creating new elements
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建新元素
- en: 'The jQuery library provides a smart way of creating new elements. Elements
    can be created using the same `$()` method and passing `html` as a parameter.
    Once the element is created, it cannot be shown until it is added to the DOM.
    There are various methods available that help append, insert after, or insert
    before any element, and so on. The following table shows the list of all the methods
    used to add new elements to the DOM:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery库提供了一种创建新元素的智慧方式。可以使用相同的`$()`方法并传递`html`作为参数来创建元素。创建元素后，除非将其添加到DOM中，否则它无法显示。有各种方法可用于附加、插入后或插入前任何元素等。下面表格展示了用于将新元素添加到DOM的所有方法：
- en: '| The get method | Description |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| 获取方法 | 描述 |'
- en: '| --- | --- |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `.append()` | This method is used to insert the HTML content into the element
    from which it has been called |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| `.append()` | 此方法用于向调用它的元素中插入HTML内容 |'
- en: '| `.appendTo()` | This method is used to insert every element at the end from
    which it has been called |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| `.appendTo()` | 此方法用于将每个元素插入到调用它的末尾 |'
- en: '| `.before()` | This method is used to insert the HTML content before the element
    from which it has been called |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| `.before()` | 此方法用于在调用它的元素之前插入HTML内容 |'
- en: '| `.after()` | This method is used to insert the HTML content after the element
    from which it has been called |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| `.after()` | 此方法用于在调用它的元素之后插入HTML内容 |'
- en: '| `.insertAfter()` | This method is used to insert the HTML content after every
    element from which it has been called |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| `.insertAfter()` | 此方法用于在调用它的每个元素之后插入HTML内容 |'
- en: '| `.insertBefore()` | This method is used to insert the HTML content before
    every element from which it has called |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| `.insertBefore()` | 此方法用于在调用它的每个元素之前插入HTML内容 |'
- en: '| `.prepend()` | This method is used to insert the HTML content into the element
    at the starting position from which it has been called |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| `.prepend()` | 此方法用于在调用它的元素的起始位置插入HTML内容 |'
- en: '| `.prepend()` | This method is used to insert the HTML content from the starting
    position for each element from which it has been called |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| `.prepend()` | 此方法用于向每个元素的开始位置插入HTML内容 |'
- en: 'The following example creates a form with two fields, `Name` and `Description`,
    and a button to save these values:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例创建了一个包含两个字段（`Name`和`Description`）和一个按钮来保存这些值表单：
- en: '[PRE32]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'This code will give the following output:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将产生以下输出：
- en: '![Creating new elements](img/00023.jpeg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![创建新元素](img/00023.jpeg)'
- en: Removing elements and attributes
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 删除元素和属性
- en: 'With the option of using different methods to create and render elements in
    the DOM, jQuery also provides a few methods to remove elements from the DOM. The
    following table is a list of methods that we can use to remove a particular element,
    set of elements, or all child nodes:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用不同的方法来创建和渲染DOM中的元素时，jQuery还提供了一些用于从DOM中删除元素的方法。以下表格是我们可以用来删除特定元素、一组元素或所有子节点的方法的列表：
- en: '| Methods | Description |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 描述 |'
- en: '| --- | --- |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `.empty()` | This method removes the inner HTML code from the element |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| `.empty()` | 此方法从元素中移除内部HTML代码 |'
- en: '| `.detach()` | This method removes the set of matched elements from the DOM
    |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| `.detach()` | 此方法从DOM中删除一组匹配的元素 |'
- en: '| `.remove()` | This method removes the set of matched elements from the DOM
    |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| `.remove()` | 此方法从DOM中删除一组匹配的元素 |'
- en: '| `.removeAttr()` | This method removes a particular attribute from the element
    |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| `.removeAttr()` | 此方法从元素中移除特定的属性 |'
- en: '| `.removeClass()` | This method removes a class from an element |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| `.removeClass()` | 此方法从元素中移除一个类 |'
- en: '| `.removeProp()` | This method removes a property from an element |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| `.removeProp()` | 此方法从元素中移除一个属性 |'
- en: 'The difference between `remove()` and `detach()` is that `remove` removes the
    content from the DOM permanently; this means that if the element has specific
    events or data associated, these events or data will also be removed. However,
    `detach` just separates and isolates the element from the DOM and returns the
    content that you can save in some variable for later attachment:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '`remove()`和`detach()`的区别在于，`remove`永久性地从DOM中删除内容；这意味着如果元素有特定的事件或数据关联，这些事件或数据也将被删除。然而，`detach`只是将元素从DOM中分离并返回你可以保存在某个变量中以供以后附着的内容：'
- en: '[PRE33]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'On detaching, the output will be as follows:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在分离后，输出将如下所示：
- en: '![Removing elements and attributes](img/00024.jpeg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![删除元素和属性](img/00024.jpeg)'
- en: 'On attaching, the output will be similar to the following screenshot:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在附着后，输出将类似于以下屏幕截图：
- en: '![Removing elements and attributes](img/00025.jpeg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![删除元素和属性](img/00025.jpeg)'
- en: Event handling in jQuery
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jQuery中的事件处理
- en: The jQuery event model provides a better way of handling events on the DOM elements.
    Programmatically, if developers want to register any event of the user's action;
    for example, a button click event can be a cumbersome process when working with
    plain JavaScript. This is because different browsers have different implementations
    and the syntax is somehow different from one another. The jQuery library, on the
    other hand, provides a cleaner syntax and developers don't have to work on the
    cross browser issues.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery事件模型为处理DOM元素上的事件提供了更好的方法。程序化地，如果开发者想要注册用户操作的任何事件；例如，按钮的点击事件当使用纯JavaScript时可能是一个繁琐的过程。这是因为不同的浏览器有不同的实现，并且语法彼此之间有所不同。另一方面，jQuery库提供了一个更简洁的语法，开发人员不必处理跨浏览器问题。
- en: Registering events in jQuery
  id: totrans-168
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: jQuery中注册事件
- en: 'There are many shortcuts available in jQuery to register events to different
    elements. The following table shows you a list of all these events with specific
    descriptions:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在jQuery中，有许多快捷方式可以注册事件到不同的元素上。下面的表格展示了所有这些事件及其具体的描述：
- en: '| Events | Description |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| 事件 | 描述 |'
- en: '| --- | --- |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `click()` | This event is used when the mouse click occurs |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| `click()` | 此事件在鼠标点击时使用 |'
- en: '| `.dblclick()` | This event is used when the double-click occurs |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| `.dblclick()` | 此事件在双击时使用 |'
- en: '| `.mousedown()` | This event is used when any of the mouse buttons are pressed
    |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| `.mousedown()` | 此事件在鼠标任何按钮被按下时使用 |'
- en: '| `.mouseup()` | This event is used when any of the mouse buttons are released
    |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| `.mouseup()` | 此事件在鼠标任何按钮被释放时使用 |'
- en: '| `.mouseenter()` | This event is used when the mouse enters the section |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| `.mouseenter()` | 此事件在鼠标进入区域时使用 |'
- en: '| `.mouseleave()` | This event is used when the mouse leaves the section |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| `.mouseleave()` | 此事件在鼠标离开区域时使用 |'
- en: '| `.keydown()` | This event is used when a keyboard key is pressed |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| `.keydown()` | 此事件在键盘按键被按下时使用 |'
- en: '| `.keyup()` | This event is used when the keyboard key is released |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| `.keyup()` | 此事件在键盘按键被释放时使用 |'
- en: '| `.focus()` | This event is used when the element is focused |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| `.focus()` | 此事件在元素获得焦点时使用 |'
- en: '| `.blur()` | This event is used when the element loses focus |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| `.blur()` | 此事件在元素失去焦点时使用 |'
- en: '| `.change()` | This event is used when the item is changed |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| `.change()` | 此事件在项目被更改时使用 |'
- en: There are various other events, which you can check out at [http://api.jquery.com/category/events](http://api.jquery.com/category/events).
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多其他事件，您可以在[http://api.jquery.com/category/events](http://api.jquery.com/category/events)上查看。
- en: 'Registering an event is quite simple using jQuery. First of all, the element
    has to be selected by choosing any of the selectors and then registering the events
    by calling a specific event handler; for example, the following code snippet will
    register the click event for the button:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 使用jQuery注册事件相当简单。首先，必须通过选择任何选择器来选择元素，然后通过调用特定的事件处理程序来注册事件；例如，以下代码片段将为按钮注册点击事件：
- en: '[PRE34]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'After the preceding example code, register the `asp.net` button click event
    and call the `Contact` action of the controller of `Home` in ASP.NET:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例代码之后，注册`.asp.net`按钮的点击事件，并调用ASP.NET中`Home`控制器的`Contact`动作：
- en: '[PRE35]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'In the preceding example, we used the HTML helper, `Url.Action`, through the
    Razor syntax, which generated the URL and set it to the `href` property of the
    window''s current location. Now, click on the button shown in the following screenshot:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们通过Razor语法使用了HTML助手`Url.Action`，生成了URL并将其设置为窗口当前位置的`href`属性。现在，点击下面屏幕截图中的按钮：
- en: '![Registering events in jQuery](img/00026.jpeg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![jQuery中注册事件](img/00026.jpeg)'
- en: 'The following contact page will be displayed:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 以下联系页面将被显示：
- en: '![Registering events in jQuery](img/00027.jpeg)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![jQuery中注册事件](img/00027.jpeg)'
- en: 'Another example shown here will change the background color of all input controls
    to `aliceblue` when the control is focused and change back to white when it blurs:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的一个示例将改变所有输入控件的背景颜色到`aliceblue`，当控件获得焦点时，并在它失去焦点时恢复为白色：
- en: '[PRE36]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Binding events using on and off
  id: totrans-194
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用on和off注册事件
- en: Apart from registering events directly by calling the event handler, we can
    also register them using `on` and `off`. These events register and deregister
    the event for specific elements.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 除了直接通过调用事件处理程序来注册事件，我们还可以使用`on`和`off`来注册它们。这些事件为特定元素注册和注销事件。
- en: 'Here is a simple example of binding a click event to a button using `on`:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个使用`on`绑定点击事件到按钮的简单示例：
- en: '[PRE37]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'This is a very useful technique and can be used in certain conditions where
    you want to deregister any event. For example, business applications are mostly
    related to form handling, and forms can be submitted using some button that posts
    the request to some server. In certain conditions, we have to restrict the user
    to submit multiple times until the first request has been processed. To handle
    this problem, we can use the `on()` and `off()` events to register and deregister
    them when the user clicks the first time. Here is an example that deregisters
    the button-click event when it is clicked for the first time:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常实用的技术，可以在你希望注销任何事件的情况下使用。例如，商务应用程序大多数与表单处理相关，而表单可以通过某个按钮提交请求到某个服务器。在某些条件下，我们必须限制用户在第一次请求处理完成前多次提交。为了解决这个问题，我们可以使用`on()`和`off()`事件在用户第一次点击时注册和注销它们。以下是一个在第一次点击时注销按钮点击事件的示例：
- en: '[PRE38]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The `preventDefault()` event is just the cancel event that we used to have
    in .NET. This event is used to cancel the event from execution. It can be used
    as follows:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '`preventDefault()`事件就是我们以前在.NET中使用的取消事件。这个事件用于取消事件的执行。它可以像下面这样使用：'
- en: '[PRE39]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The `on()` method is equivalent to the `delegate()` method used with the previous
    version of jQuery. Since jQuery 1.7, `delegate()` has been replaced with `on()`.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '`on()`方法与以前版本jQuery中使用的`delegate()`方法等效。自jQuery 1.7起，`delegate()`已被`on()`取代。'
- en: 'There is one more overloaded method, `on`, which takes four parameters:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个重载方法`on`，它接受四个参数：
- en: '[PRE40]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Here, `element` is the control name, `events` is the event that you want to
    register, and `selector` is a new thing, which can be the child element of the
    parent control. For example, for a table element selector, it could be `td`; and
    on each click event of `td`, we can do something as follows:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`element`是控件名称，`events`是你想要注册的事件，`selector`是一个新东西，可以是父控件的子元素。例如，对于一个表格元素选择器，它可能是`td`；而且在每个`td`的点击事件上，我们可以做如下操作：
- en: '[PRE41]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '![Binding events using on and off](img/00028.jpeg)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![使用on和off绑定事件](img/00028.jpeg)'
- en: Using the hover events
  id: totrans-209
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用hover事件
- en: 'We can use the hover events when the mouse enters or exits a particular element.
    It can be used by calling the `hover()` method on any element of the DOM. The
    syntax of calling this method is as follows:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以利用鼠标悬停在特定元素上或离开时的hover事件。它可以通过在DOM的任何元素上调用`hover()`方法来使用。调用此方法的语法如下：
- en: '[PRE43]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The following example changes the input text control''s border color when the
    mouse enters or exits:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例在鼠标悬停在输入文本控件上时改变边框颜色：
- en: '[PRE44]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Summary
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned about jQuery basics and how to use them in web
    applications, especially in ASP.NET core 1.0\. This is a very powerful library.
    It eliminates cross-browser issues and provides consistent behavior across all
    browsers. This library provides simple and easy methods to select elements, modify
    attributes, attach events, and perform complex operations by writing code in a
    cleaner and more precise manner. In the next chapter, we will look into the various
    techniques of doing Ajax requests using jQuery and plain JavaScript to perform
    server-side operations.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了jQuery的基础知识以及如何在Web应用程序中使用它们，特别是在ASP.NET核心1.0中。这是一个非常强大的库。它消除了跨浏览器问题，并在所有浏览器中提供一致的行为。这个库提供了简单易用的方法来选择元素、修改属性、附加事件以及通过编写更干净、更精确的代码来执行复杂操作。在下一章中，我们将探讨使用jQuery和纯JavaScript进行Ajax请求的各种技术以执行服务器端操作。
