- en: Chapter 6. Application and Folder Structure
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 6 章。应用程序和文件夹结构
- en: To allow you to jump right in, Meteor creates a default set of libraries, default
    folder structure, and default permissions. This default configuration works great
    for quick development, testing, and learning-as-you-go. It does not, however,
    make for a great production environment.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让你能够直接开始，Meteor 创建了一组默认库、默认文件夹结构和默认权限。这个默认配置非常适合快速开发、测试和学习。然而，它并不适合生产环境。
- en: 'In this chapter, we''ll go over changes you''ll want to make to the default
    configuration, so that your app will be performant, secure, and easier to manage.
    Specifically, you will learn about:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章，我们将讨论你可能想要对默认配置进行的更改，以便你的应用性能更优、更安全、更容易管理。具体来说，你将学习到：
- en: Separating the client, server, and public files of your application
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将你的应用程序的客户端、服务器和公共文件分离
- en: Enabling database security and user login
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用数据库安全和用户登录
- en: Tailoring display results to protect privacy
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定制显示结果以保护隐私
- en: Client and server folders
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 客户端和服务器文件夹
- en: 'Up to this point, we''ve put all of our JavaScript code in one file: `LendLib.js`.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们把所有的 JavaScript 代码都放在了一个文件中：`LendLib.js`。
- en: Inside `LendLib.js`, we have two sections, separated by `if` statements. The
    client-facing code is found inside the `if (Meteor.isClient) {...}` block, and
    the server-side code is found inside the `if (Meteor.isServer) {...}` block.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `LendLib.js` 中，我们有两个部分，由 `if` 语句分隔。面向客户端的代码位于 `if (Meteor.isClient) {...}`
    块中，而服务器端代码位于 `if (Meteor.isServer) {...}` 块中。
- en: That structure works fine for a very simple application, but when we are writing
    a more complex application, or we have multiple people working on the same app,
    trying to share one file with conditional statements will quickly turn into a
    nightmare situation.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这种结构对于一个非常简单的应用程序来说是可以的，但当我们编写一个更复杂的应用程序，或者我们有 multiple 人在同一个应用程序上工作时，尝试用条件语句共享一个文件很快就会变成一场噩梦。
- en: Additionally, Meteor will read any and all files in our application folders,
    and try to apply JavaScript to both the client and the server. This makes for
    sort of a strange situation if we want to use a client-facing JavaScript library
    (for example, Twitter Bootstrap or jQuery). If we add the library to the root
    folder, Meteor will try to implement that file on both the client and the server.
    This either creates performance issues because we're loading files to the server
    that it doesn't need, or produces errors because the server doesn't know what
    to do with display objects (the server doesn't display anything).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，Meteor 会读取我们应用程序文件夹中的任何和所有文件，并尝试将 JavaScript 应用到客户端和服务器。如果我们想使用面向客户端的 JavaScript
    库（例如，Twitter Bootstrap 或 jQuery），这就会造成一种奇怪的情况。如果我们把库放到根目录，Meteor 就会尝试在客户端和服务器上都实现这个文件。这要么因为我们在服务器上加载了它不需要的文件而造成性能问题，要么因为服务器不知道如何处理显示对象（服务器不显示任何东西）而产生错误。
- en: Conversely, if there is server-side code in files accessible to both the client
    and server, the client may try to implement that code, which can cause all kinds
    of problems, or will at the very least make the code available to the client,
    which could quickly become a security issue. There simply are some files and code
    that we don't want the client to see or have access to.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，如果文件中包含面向客户端和服务器的服务器端代码，客户端可能会尝试实现该代码，这可能会造成各种问题，或者至少会让代码对客户端可见，这可能很快就会成为一个安全问题。有些文件和代码我们就是不想让客户端看到或访问。
- en: 'Let''s see an example of the client code being processed by the server, and
    then let''s move that code to a place where only the client will try to execute
    it. Create a new file in `~/Documents/Meteor/` called `LendLibClient.js`. Open
    `LendLib.js` and cut the entire client code block from it indicated by the following
    highlighted code:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看客户端代码被服务器处理的一个例子，然后把那部分代码移到一个只有客户端会尝试执行它的地方。在 `~/Documents/Meteor/` 中创建一个名为
    `LendLibClient.js` 的新文件。打开 `LendLib.js` 并剪下以下高亮显示的代码块中的整个客户端代码块：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Tip
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You should have cut about 186 lines of code. Make sure you get the closing `}`
    bracket!
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该剪掉了大约 186 行代码。确保你找到了闭合的 `}` 括号！
- en: Now paste the code you just cut into `LendLibClient.js`, and save the changes
    to both files. You'll notice that this made no visual changes to your running
    application. That's because Meteor is processing both files, and the `if` condition
    stops the server from executing the code.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在把刚刚剪切的代码粘贴到 `LendLibClient.js` 中，然后保存对两个文件的更改。你会注意到这并没有对你的正在运行的应用程序产生任何视觉上的变化。那是因为
    Meteor 正在处理这两个文件，而 `if` 条件阻止了服务器执行代码。
- en: But let's see what happens when we remove the `if` condition. In `LendLibClient.js`,
    remove the first line, containing the `if (Meteor.isClient) {` condition. Additionally,
    make sure you remove the last line, containing the closing bracket (`}`) for the
    `if` condition. Save `LendLibClient.js` and then go take a look at your console
    where Meteor is running.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 但让我们看看当我们移除`if`条件时会发生什么。在`LendLibClient.js`中，删除包含`if (Meteor.isClient) {`条件的第一行。同时，确保你也删除`if`条件的闭合括号（`}`）的最后一行。保存`LendLibClient.js`，然后去看看Meteor正在运行的控制台。
- en: 'You will see the following error message, or something similar to it:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到以下错误信息，或类似的内容：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Removing the `if` condition has created a situation where the server part of
    Meteor is trying to run the client-facing code. It doesn't know what to do with
    it, so the app is crashing. We're going to fix the situation by using folder structure.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 移除`if`条件创造了一种情况，Meteor的服务器部分试图运行面向客户端的代码。它不知道如何处理它，所以应用程序崩溃了。我们将通过使用文件夹结构来解决这个问题。
- en: If you recall, when we implemented Twitter Bootstrap, we created the `client`
    folder. Meteor identifies the `client` folder, and will run any JavaScript files
    it finds in there exclusively as client-facing code, and not on the server side.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还记得，当我们实现Twitter Bootstrap时，我们创建了`client`文件夹。Meteor识别出`client`文件夹，并且将独占地运行在此文件夹中找到的任何JavaScript文件，作为面向客户端的代码，而不会在服务器端运行。
- en: 'Move (cut + paste, click-and-drag, or `mv`) the `LendLibClient.js` file from
    `~/Documents/Meteor/LendLib/` to `~/Documents/Meteor/LendLib/client/`. This will
    instantly fix our crashing app, and Meteor is happy again! You''ll see the following
    in the console:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 将`LendLibClient.js`文件从`~/Documents/Meteor/LendLib/`移动（剪切+粘贴，拖放，或使用`mv`命令）到`~/Documents/Meteor/LendLib/client/`。这将立即修复我们的崩溃应用程序，Meteor再次快乐！你会在控制台看到以下内容：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Because we moved `LendLibClient.js` to the `client` folder, the `if` condition
    is no longer needed. Because of the file location, Meteor knows that the code
    is only intended to be run on the client, so it doesn't try to run it on the server.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们把`LendLibClient.js`移动到了`client`文件夹，所以不再需要`if`条件。由于文件位置，Meteor知道该代码只打算在客户端运行，所以它不会尝试在服务器上运行它。
- en: Tip
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You will want to refresh your browser pointing to `http://localhost:3000`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能想刷新你的浏览器，指向`http://localhost:3000`。
- en: This is because you crashed the application. Repent of your evil ways, and refresh
    your page.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为你的应用程序崩溃了。悔改你的邪恶行为，刷新你的页面。
- en: 'Now let''s do the same thing with the server code. Create a new folder named
    `server`. You can do this through a Finder window, or directly in the command
    line as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们对服务器端代码也做同样的事情。创建一个名为`server`的新文件夹。你可以通过Finder窗口，或者直接在命令行中如下操作：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We know we should create our JavaScript file directly in the new `server` folder,
    but we are also pathologically curious and we enjoy breaking things, so we're
    going to create it where it can cause problems.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道我们应该直接在新生成的`server`文件夹中创建我们的JavaScript文件，但我们也是病态的好奇，喜欢破坏事物，所以我们打算创建一个可能引起问题的地方。
- en: Create a new file named `LendLibServer.js` in the `~/Documents/Meteor/LendLib`
    folder. Cut the `if (Meteor_is.server) { … }` block from `LendLib.js`, paste it
    into `LendLibServer.js`, and save both files.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在`~/Documents/Meteor/LendLib`文件夹中创建一个名为`LendLibServer.js`的新文件。从`LendLib.js`中剪切`if
    (Meteor_is.server) { … }`块，粘贴到`LendLibServer.js`中，然后保存两个文件。
- en: Tip
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'At this point, there should be only one line of code left in `LendLib.js`:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，`LendLib.js`中应该只剩下一行代码了：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As with the move of the client code, nothing adverse will happen at this point,
    because we still have the `if` condition. Let's remove that, and let the app crashing
    continue!
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 与客户端代码的移动一样，在此阶段不会发生任何不良反应，因为我们仍然有`if`条件。让我们移除它，让应用程序崩溃继续！
- en: In `LendLibServer.js`, remove the first line, containing `if (Meteor.isServer)
    {` and remove the last line, containing the closing bracket (`}`).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在`LendLibServer.js`中，删除包含`if (Meteor.isServer) {`的第一行和包含闭合括号（`}`）的最后一行。
- en: Save your changes, and let's see the carnage!
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 保存你的更改，让我们看看混乱场面！
- en: '![Client and server folders](img/0823OS_06_01.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![客户端和服务器文件夹](img/0823OS_06_01.jpg)'
- en: Huh. No crashes. The app still works fine. What a let down...
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯。没有崩溃。应用程序仍然运行良好。真是让人失望...
- en: 'Let''s check the browser console:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查一下浏览器控制台：
- en: '![Client and server folders](img/0823OS_06_02.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![客户端和服务器文件夹](img/0823OS_06_02.jpg)'
- en: 'Yes! We *did* do something naughty! The reason this (unfortunately) didn''t
    interfere with or affect the rest of the application is twofold:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 是的！我们*确实*做了坏事！这个行为（不幸的是）没有干扰或影响应用程序的其他部分，原因有两个：
- en: It's the client side (browser) that threw the error. That won't affect the server
    application.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是客户端（浏览器）抛出了错误。这不会影响服务器应用程序。
- en: The only code in `LendLibServer.js` is the server code. If that code breaks
    on the client, no big deal, because it wasn't supposed to run on the client anyway.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LendLibServer.js`中的唯一代码是服务器代码。如果这段代码在客户端出错了，那也没关系，因为本来就不应该在客户端运行。'
- en: The end user will never know that the error is there, but we will, so let's
    fix it. Move `LendLibServer.js` to `~/Documents/Meteor/LendLib/server/`. The error
    will go away, and all will be right again in our tiny little Meteor kingdom.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 最终用户永远不知道错误的存在，但我们知道，所以让我们来修复它。将`LendLibServer.js`移动到`~/Documents/Meteor/LendLib/server/`目录下。错误将消失，我们小小的Meteor王国将再次一切安好。
- en: Public folder
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 公共文件夹
- en: It's pretty logical that the `client` folder will only be processed by the client,
    and the `server` folder will only be processed by the server. But there's one
    more consideration we need to make, and that's for **assets** (images, text/content
    files, and so on).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端文件夹（`client`）只能被客户端处理，服务器文件夹（`server`）只能被服务器处理，这是很逻辑的。但我们还需要考虑一个额外的因素，那就是**资源文件**（如图片、文本/内容文件等）。
- en: The assets are only needed in runtime. We don't depend on them for any logic
    or processing, and so if we can get them out of the way, the Meteor compiler can
    ignore them, which speeds up the processing and delivery of our application.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 资源文件仅在运行时需要。我们在任何逻辑或处理上都不依赖于它们，所以如果我们能将它们移开，Meteor编译器就可以忽略它们，这能加快我们应用程序的处理和交付速度。
- en: That's where the `public` folder comes into play. When Meteor is compiling CSS
    or JavaScript for both the client and the server, it ignores anything inside of
    `public`. Then, when all the compiling is done, it will use the `public` folder
    to access anything it may need to deliver.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是`public`文件夹发挥作用的地方。当Meteor在为客户端和服务器编译CSS或JavaScript时，它会忽略`public`文件夹内的任何内容。然后，在所有的编译工作完成后，它会使用`public`文件夹来访问可能需要传递给客户端的任何内容。
- en: Let's add a background image to our application. The handsome and generous fellas
    over at [subtlepatterns.com](http://subtlepatterns.com) have quite a few to choose
    from, and they're all free, so we'll pick one from there. We'll use Texturetastic
    Gray, because it seems to fit our theme. Navigate to [http://subtlepatterns.com/texturetastic-gray/](http://subtlepatterns.com/texturetastic-gray/)
    and download the image.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为我们的应用程序添加一个背景图片。慷慨和英俊的先生在[subtlepatterns.com](http://subtlepatterns.com)有很多选择，而且都是免费的，所以我们从中选择一个。我们将使用Texturetastic
    Gray，因为它似乎符合我们的主题。访问[http://subtlepatterns.com/texturetastic-gray/](http://subtlepatterns.com/texturetastic-gray/)并下载图片。
- en: Tip
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: You can use any background you'd like. Just perform the following steps with
    your custom background, and replace the name with your image name in the CSS when
    we declare `background-image`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用任何背景图片。只需按照以下步骤操作您自定义的背景图片，并在我们声明`background-image`时将图片名称替换到CSS中。
- en: Before we can use our downloaded background, we need to make a quick change
    to `LendLib.css`, and create a public folder.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们可以使用下载的背景之前，我们需要对`LendLib.css`做一次快速更改，并创建一个公共文件夹。
- en: 'Open `LendLib.css` (found in `~/Documents/Meteor/LendLib/` unless you moved
    it to the `client` folder, which is totally fine), and add the following CSS declaration:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`LendLib.css`（除非您已将其移动到`client`文件夹中，这完全可以），并添加以下CSS声明：
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Save this change. Nothing will happen (yet) but we''ll take care of that right
    now. Create the folder `~/Documents/Meteor/LendLib/public`. Now, open the downloaded
    zip folder `texturetastic_gray.zip` and copy `texturetastic_gray.png` from the
    zipped folder to our newly created `public` folder:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 保存这个更改。现在还不会发生任何事情（译者注：暂时不变），我们稍后再处理。在`~/Documents/Meteor/LendLib`目录下创建一个名为`public`的文件夹。现在，打开下载的压缩包`texturetastic_gray.zip`，并将`texturetastic_gray.png`从压缩包中复制到我们刚创建的`public`文件夹中：
- en: '![Public folder](img/0823OS_06_03.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![公共文件夹](img/0823OS_06_03.jpg)'
- en: The background has changed to your background, and we now have a snazzier interface!
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 背景已经更换成了您的背景图片，现在我们拥有了一个更炫酷的界面！
- en: This file is safely tucked away in the `public` folder, so the Meteor compiler
    doesn't have to deal with it, but it's still available and ready to go when it
    needs to be served to a client for display purposes.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件被安全地保存在`public`文件夹中，所以Meteor编译器不需要处理它，但当需要服务于客户端以供显示时，它仍然可用并准备就绪。
- en: Tip
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Other folders exist, which have varying effects and purposes. For a full explanation,
    consult the Meteor documentation at [http://docs.meteor.com/#structuringyourapp](http://docs.meteor.com/#structuringyourapp).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 还存在其他文件夹，它们有不同的效果和目的。有关完整解释，请参阅Meteor文档中的[http://docs.meteor.com/#structuringyourapp](http://docs.meteor.com/#structuringyourapp)。
- en: Security and accounts
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全和账户
- en: At this point, our Lending Library app does exactly what we want it to. It keeps
    track of all our stuff, and who we've lent items out to. If we were to put this
    app into use, however, there are some security issues inside the app itself that
    we'd have to deal with.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们的借阅图书馆应用程序完全是我们想要它做的。它记录了所有我们的物品以及我们借出物品给谁。如果我们把这个应用程序投入使用，然而，应用程序本身存在一些我们需要解决的安全问题。
- en: First and foremost, what's to stop someone from accessing our app and erasing
    their name from an item they borrowed? That scumbag STEVE might just keep our
    linear compression wrench forever, if he were so inclined, and we'd have no way
    of proving whether he still had it or not.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，阻止某人访问我们的应用程序并从他们借阅的物品中删除他们的名字有什么阻止他们呢？那个恶棍STEVE可能会永远保留我们的线性压缩扳手，如果他有意的话，而我们将无法证明他是否还拥有它。
- en: 'We cannot let such thievery and dishonesty go unpunished! STEVE must be held
    accountable! So, we need to implement security. Specifically, we need to perform
    two actions:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不能让这种盗窃和不诚实的行为不受惩罚！STEVE必须为此负责！所以，我们需要实现安全措施。具体来说，我们需要执行两个操作：
- en: Only allow editing in the UI by the owner of the items
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只允许物品所有者在UI中进行编辑
- en: Secure the database so that changes can't be made using the web console
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保数据库安全，防止通过网络控制台进行更改。
- en: Removing insecure
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除insecure
- en: The first step in accomplishing these two goals is to remove the `insecure`
    library from Meteor. By default, the `insecure` library is included so that we
    can go about building our application without having to worry about security until
    we've got our security strategy in place, and most of our code written.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 实现这两个目标的第一步是删除Meteor中的`insecure`库。默认情况下，`insecure`库是包含在内的，这样我们就可以在制定安全策略并编写大部分代码之前构建我们的应用程序，而不用担心安全问题。
- en: 'The time has come, we know what we want security-wise, so let''s go ahead and
    get rid of that library. Stop the Meteor application (press *Ctrl* + *C* in the
    terminal window) and enter the following command (you need to be in the `LendLib`
    directory):'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候了，我们知道我们希望实现的安全方面，所以让我们继续摆脱那个库。停止Meteor应用程序（在终端窗口中按*Ctrl* + *C*），然后输入以下命令（您需要位于`LendLib`目录中）：
- en: '[PRE6]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This will generate the following message:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成以下消息：
- en: '[PRE7]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Our application is now secure. It''s actually *too* secure. Start Meteor again
    (type `meteor` in the terminal and press *Enter*) and navigate to our app in a
    browser window, using `http://localhost:3000`. Once you''re there, try to add
    a new item; add a lendee, or even delete an item. We''ll try to lend our favorite
    shirt to our sexy American girlfriend, but nothing will happen; no deletions,
    no additions, no changes. Nothing is working now! If you open the browser console,
    you''ll see that every attempt to update the database is being met with the message
    **update failed: Access denied**:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序现在很安全。实际上*太*安全了。重新启动Meteor（在终端中输入`meteor`并按*Enter*键），然后在浏览器窗口中使用`http://localhost:3000`导航到我们的应用程序。一旦你到了那里，试着添加一个新项目；添加一个借阅者，或者甚至删除一个项目。我们将尝试把我们的最爱衬衫借给我们的性感美国女友，但是什么也不会发生；没有删除，没有添加，没有更改。现在什么都不起作用了！如果你打开浏览器控制台，你会发现每次尝试更新数据库都会显示**更新失败：访问被拒绝**的消息：
- en: '![Removing insecure](img/0823OS_06_04.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![Removing insecure](img/0823OS_06_04.jpg)'
- en: This message is occurring because we disabled the insecure package. Put another
    way, no anonymous changes are allowed anymore. Because we don't yet have a login
    account, all of our requests are anonymous, and will therefore fail.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这个消息发生是因为我们禁用了insecure包。换句话说，不再允许匿名更改。因为我们还没有登录账户，我们所有的请求都是匿名的，因此将会失败。
- en: Adding an admin account
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加管理员账户
- en: To re-enable update functionality, we need to be able to create an admin account,
    give the admin account permissions to make changes, and provide the user a way
    to recover a lost password.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 为了重新启用更新功能，我们需要能够创建一个管理员账户，给管理员账户权限进行更改，并给用户提供一个找回丢失密码的方法。
- en: 'We''ll first need to add three built-in Meteor packages. Stop the Meteor application,
    and in the terminal window, enter the following three commands:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先需要添加三个内置的Meteor包。停止Meteor应用程序，在终端窗口中输入以下三个命令：
- en: '[PRE8]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: These commands will add the necessary packages to our Meteor application for
    us to administer accounts.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令将为我们的Meteor应用程序添加管理账户所需的包。
- en: 'Meteor also has a UI package that will create the login logic for us automatically,
    so that we don''t have to write any custom accounts UI code. Let''s add that package
    while we''re at it:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Meteor还提供一个UI包，可以自动为我们的账户创建登录逻辑，这样我们就不用编写任何自定义的账户UI代码。既然如此，我们顺便添加这个包：
- en: '[PRE9]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now that we''ve added the `accounts-ui` package, we just need to quickly configure
    the fields to be displayed, and update our HTML template. Open `LendLibClient.js`
    and append the following code to the very bottom of the file:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经添加了`accounts-ui`包，我们只需要快速配置要显示的字段，并更新我们的HTML模板。打开`LendLibClient.js`，在文件的底部添加以下代码：
- en: '[PRE10]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This tells the `accounts-ui` package that we want to display the `username`
    and `email` fields in the sign up form, with the `email` field being optional
    (we need it to recover a lost password).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉`accounts-ui`包我们希望在注册表单中显示`username`和`email`字段，其中`email`字段是可选的（我们需要它来恢复丢失的密码）。
- en: 'Now open `LendLib.html` and enter the following code directly below the `<body>`
    tag:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在打开`LendLib.html`，在`<body>`标签的直接下方输入以下代码：
- en: '[PRE11]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This HTML code will add a login link and context menu box to the top right
    of our screen. Let''s see that in action. Save all your changes, start your Meteor
    app, and navigate to `http://localhost:3000` in a browser. Notice the top right
    of the following screenshot:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这段HTML代码将在我们屏幕的右上角添加一个登录链接和上下文菜单框。让我们看看它的实际效果。保存所有更改，启动您的Meteor应用，在浏览器中导航到`http://localhost:3000`。注意以下屏幕截图的右上角：
- en: '![Adding an admin account](img/0823OS_06_05.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![添加管理员账户](img/0823OS_06_05.jpg)'
- en: 'Click on **Sign in** and then click on **Create account** in the bottom right
    of the popup window:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**登录**，然后点击弹出窗口右下角的**创建账户**：
- en: '![Adding an admin account](img/0823OS_06_06.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![添加管理员账户](img/0823OS_06_06.jpg)'
- en: 'Fill in the create account form, making sure to enter a username for admin,
    and a valid e-mail address, so that you can recover your password if needed. Enter
    and confirm your new password, and click on **Create account**:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 填写创建账户表单，确保为管理员输入一个用户名和一个有效的电子邮件地址，以便在需要时可以恢复您的密码。输入并确认您的新密码，然后点击**创建账户**：
- en: '![Adding an admin account](img/0823OS_06_07.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![添加管理员账户](img/0823OS_06_07.jpg)'
- en: 'You will now be logged in as admin, and we can proceed with configuring permissions:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在将作为管理员登录，我们可以继续配置权限：
- en: '![Adding an admin account](img/0823OS_06_08.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![添加管理员账户](img/0823OS_06_08.jpg)'
- en: Granting admin permissions
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 授予管理员权限
- en: Now that we have our admin account, let's allow the account to make any changes
    needed in the UI, while at the same time removing the ability to make changes
    in the browser console, if the admin account is not logged in.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了管理员账户，让我们允许该账户在UI中进行任何必要的更改，同时取消管理员账户未登录时在浏览器控制台进行更改的能力。
- en: Our original `LendLib.js` file currently has only one line of code in it. We
    will add some account checking code to it, ensuring that only the admin account
    can make changes.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们原始的`LendLib.js`文件目前里面只有一行代码。我们将向其中添加一些账户检查代码，确保只有管理员账户可以进行更改。
- en: 'Add the following code to `LendLib.js` and save your changes:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码添加到`LendLib.js`并保存您的更改：
- en: '[PRE12]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `adminUser` function is used in multiple places, so it makes sense to create
    a common function, which simply checks to see if the `userId` making the request
    is the same as the `_id` of the admin account.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`adminUser`函数在多个地方使用，因此创建一个公共函数是有意义的，该函数仅检查发出请求的`userId`是否与管理员账户的`_id`相同。'
- en: '`lists.allow` sets up the conditions upon which operations are allowed, with
    each operation having a function that returns `true` to allow and `false` to deny.
    We could, for example, set the `remove` function check to always return `false`
    if we never wanted to let anyone (including the admin account) delete categories.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`lists.allow`设置了允许操作的条件，每个操作都有一个返回`true`以允许和`false`以拒绝的函数。例如，如果我们永远不想让任何人（包括管理员账户）删除类别，我们可以将`remove`函数检查设置为总是返回`false`。'
- en: For now, we simply want to make the operations conditional on whether the admin
    account is logged in and making the request, so we will set each function to `return
    adminUser(userId);`.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们只是想让操作根据管理员账户是否登录并发起请求而有条件地执行，因此我们将每个函数设置为`return adminUser(userId);`。
- en: In our browser, we can now test our permissions. Add a new category (anything
    you'd like, but we'll add `glassware`), add a new item, change an owner, and so
    on – all operations should now be allowed, provided you're logged in as admin.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的浏览器中，我们现在可以测试我们的权限。添加一个新的类别（任何您喜欢的，但我们将会添加`玻璃器皿`），添加一个新项目，更改一个所有者，等等——只要您以管理员身份登录，所有操作都应该被允许。
- en: 'Let''s make sure that the access is indeed linked to our admin account. Log
    out of the app by clicking on **admin** in the top right corner, and clicking
    on the **Sign out** button:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们确保访问确实与我们的管理员账户相关联。通过点击右上角**管理员**旁边的**登出**按钮，然后点击**登出**按钮，退出应用程序：
- en: '![Granting admin permissions](img/0823OS_06_09.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![授予管理员权限](img/0823OS_06_09.jpg)'
- en: 'Now, in the browser console, enter the following command (or equivalent to
    the category you added):'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在浏览器控制台中，输入以下命令（或等效于您添加的类别）：
- en: '[PRE13]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'You will get an **Access denied** message:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 您将收到一个**访问被拒绝**的消息：
- en: '![Granting admin permissions](img/0823OS_06_10.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![授予管理员权限](img/0823OS_06_10.jpg)'
- en: Log back in as admin, and run the command again. This time the category will
    be removed. By setting the permissions and allowed actions on the lists level,
    using `lists.allow()`, we've made it impossible for someone to make changes without
    being logged in as admin. Both the UI and the browser console are now secure from
    the evil machinations of STEVE, the wrench thief!
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 以管理员身份重新登录，再次运行该命令。这次分类将被删除。通过在`lists`级别设置权限和允许的操作，使用`lists.allow()`，我们使某人无法在不以管理员身份登录的情况下进行更改。现在，用户界面和浏览器控制台都受到了STEVE，那个扳手小偷的邪恶阴谋的保障！
- en: Customizing results
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义结果
- en: There is one more consideration we should make when it comes to security and
    usability of our app. What if we could enable multiple users to use the Lending
    Library, with each user only able to see the items that belong to them? If we
    did this, we could stop people from being able to see what kinds of things other
    people own, and at the same time we could allow each person to track their own
    stuff. We originally set out to just create an app for ourselves, but with a little
    tweaking, we can let anyone use it, and they'll think we're awesome and maybe
    buy us lunch!
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们考虑到应用程序的安全性和可用性时，还有一个我们需要考虑的问题。如果我们能够使多个用户可以使用借阅图书馆，而每个用户只能看到属于他们的物品，那会怎样呢？如果我们这样做，我们就可以阻止人们看到别人拥有什么样的东西，同时我们也可以让每个人跟踪自己的物品。我们最初的目标是为自己创建一个应用程序，但是稍作修改，我们就可以让任何人使用它，他们会觉得我们很棒，也许会请我们吃午饭！
- en: Modifying Meteor.publish()
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修改Meteor.publish()
- en: In preparation for multiple people using our application, we need to make sure
    that no one can see anyone else's stuff. This is done inside the `Meteor.publish()`
    declaration for `Categories`. Logically, if we limit the categories that can be
    seen by a user, that limitation will cascade to the visible items, because items
    are found inside categories.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 为了准备让多个人使用我们的应用程序，我们需要确保没有人能看到别人的东西。这是在`Meteor.publish()`声明中为`Categories`完成的。逻辑上，如果我们限制用户可以看到的类别，这种限制将会传递到可见的项目，因为项目是在类别中找到的。
- en: 'Open `LendLibServer.js`, and modify the `find({})` block, found approximately
    around line 6:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`LendLibServer.js`，修改大约在第6行附近找到的`find({})`块：
- en: '[PRE14]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Adding the selector `owner:this.userId` will check each list in our `lists`
    repository, and return the category for each instance where the currently logged
    in user is the owner of the list. Save this change, and you'll notice that all
    of the current categories disappeared!
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 添加选择器`owner:this.userId`将检查我们`lists`存储库中的每个列表，并返回每个当前登录用户是列表所有者的每个实例的类别。保存此更改，您会发现所有当前的类别都消失了！
- en: '![Modifying Meteor.publish()](img/0823OS_06_11.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![修改Meteor.publish()](img/0823OS_06_11.jpg)'
- en: That's because the lists we already created don't have any owner, and we're
    logged in as admin. We're going to experience similar problems when we try to
    modify existing items, because no lists have any owner.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为我们已经在应用程序中创建的列表没有任何所有者，而且我们以管理员身份登录。当我们尝试修改现有项目时，我们将遇到类似的问题，因为没有列表有任何所有者。
- en: We have several options of how to fix this, including manually adding the admin
    account as the owner, letting the admin account see all unclaimed lists, or just
    starting with a clean slate. Since we only have one item lent out (dangit, STEVE!
    We want our wrench back!), now is a good time to clear out our database, and add
    back our linear compression wrench, before we forget who has it (yeah, right!).
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有几种方法可以解决这个问题，包括手动将管理员账户作为所有者添加，让管理员账户看到所有未认领的列表，或者直接重新开始。由于我们只借出了一件物品（可恶，STEVE！我们还我们的扳手！），现在是一个很好的时间清空我们的数据库，并在我们忘记谁有它之前重新添加我们的线性压缩扳手。
- en: 'In your browser console, while logged in as admin, enter the following command:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 作为管理员登录到浏览器控制台，输入以下命令：
- en: '[PRE15]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This will remove all of our lists, and we can start over, once we've added an
    owner to newly created lists.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这将删除我们所有的列表，一旦我们给新创建的列表添加了所有者，我们就可以重新开始了。
- en: Tip
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If you want to clear out all users as well, you can do that by stopping the
    Meteor application, and running `meteor reset` in the terminal window and then
    restarting the Meteor application. Be careful! There's no warning, and no takebacks!
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你也想清除所有用户，你可以通过停止Meteor应用程序，然后在终端窗口中运行`meteor reset`，然后再重新启动Meteor应用程序来完成。要小心！没有警告，也没有后悔药！
- en: Adding owner privileges
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加所有者权限
- en: 'Adding an owner to any new category is pretty simple. We just need to update
    our `lists.insert()` function, and add the owner field. Open `LendLibClient.js`,
    and locate the `Templates.categories.events` declaration. Inside the event delegate
    for `''keyup #add-category''` you will see the `lists.insert()` function call.
    Modify that call as follows:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '给任何新类别添加所有者是相当简单的。我们只需要更新我们的`lists.insert()`函数，并添加所有者字段。打开`LendLibClient.js`，找到`Templates.categories.events`声明。在`''keyup
    #add-category''`事件的事件代理中，你会看到`lists.insert()`函数的调用。按照以下方式修改该调用：'
- en: '[PRE16]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Now whenever a new list is added, instead of just adding a category field, we
    are also adding an owner field. This allows our `Meteor.publish()` code to work
    correctly for any new lists we make.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 每当添加一个新的列表时，我们不仅在添加一个类别字段，而是在添加一个所有者字段。这使得我们的`Meteor.publish()`代码能够正确地为我们创建的任何新列表工作。
- en: 'Let''s add back the Tools category, enter the item `Linear Compression Wrench`
    and assign the Lendee as `STEVE`:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先恢复“工具”类别，输入项目“线性压缩扳手”，并将借阅者设为`STEVE`：
- en: '![Adding owner privileges](img/0823OS_06_12.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![添加所有者权限](img/0823OS_06_12.jpg)'
- en: There, we're back up and running, and hidden in each list, we now have an owner
    property. This becomes important when we enable others to create and maintain
    their own lists.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们就可以重新运行，并且在每个列表中都隐藏了一个所有者属性。当允许其他人创建和维护他们自己的列表时，这个属性就变得重要了。
- en: Enabling multiple users
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启用多个用户
- en: Okay, everything is in place now for us to have a customized, private view of
    our own stuff, but currently only the admin account can add lists or items, and
    assign a lendee to an item.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在一切都准备就绪，我们可以拥有一个定制化的、私有的个人物品视图，但目前只有管理员账户可以添加列表或项目，并将借阅者分配给一个项目。
- en: 'We''ll fix that by going back to `LendLib.js`, and adding some logic to check
    if either the currently logged in user owns the list, or is an admin. Inside `LendLib.js`,
    in the `lists.allow()` code block, make the following additions:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过回到`LendLib.js`，并添加一些逻辑来检查当前登录的用户是否拥有列表，或者是否是管理员来解决这个问题。在`LendLib.js`中的`lists.allow()`代码块里，加入以下内容：
- en: '[PRE17]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Inside `insert`, we check to see if the current `doc.owner` is the logged in
    user. In `update` and `remove`, we iterate through all the records to be updated
    (using `_.all()`) and check if the `doc.owner` is the logged in user.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在`insert`中，我们检查当前`doc.owner`是否是登录的用户。在`update`和`remove`中，我们遍历所有要更新的记录（使用`_.all()`），并检查`doc.owner`是否是登录的用户。
- en: You will now want to save your changes, and create a new account on `http://localhost:3000`.
    Add categories and items to your heart's content. You can switch between users,
    and add as many more users and lists as you would like.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可能想要保存你的更改，并在`http://localhost:3000`上创建一个新的账户。尽情添加类别和项目吧。你可以随意在用户之间切换，并且可以添加尽可能多的用户和列表。
- en: 'You''ll notice that there''s no visibility from one person''s lists to another,
    and consequently no way for someone to manipulate or delete another person''s
    lists and records. Now when STEVE finally gets his grubby little hands on your
    application, he can only see his stuff (none of which is worth borrowing, by the
    way!):'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到，一个人的列表对另一个人是不可见的，因此也没有人能够操纵或删除另一个人的列表和记录。当STEVE最终得到你的应用程序时，他只能看到自己的东西（顺便说一下，这些都是不值得借的东西！）：
- en: '![Enabling multiple users](img/0823OS_06_13.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![启用多个用户](img/0823OS_06_13.jpg)'
- en: Summary
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you've learned how Meteor compiles and searches for JavaScript
    and CSS code, and how to optimize that search. You've learned how to protect your
    server code, and keep things running smoothly and efficiently. You've learned
    how to secure your database, through the use of Meteor's built-in Accounts packages,
    and you've closed all the major security loopholes in your application. Finally,
    you've enabled multiple accounts, so anybody can use your Lending Library to keep
    track of their items, and you've done so without compromising on privacy for the
    end user.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章节中，你已经学习了Meteor是如何编译和搜索JavaScript和CSS代码的，以及如何优化搜索。你已经学会了如何保护你的服务器代码，并保持运行流畅和高效。你已经学会了如何通过使用Meteor内置的Accounts包来保护你的数据库，并且你已经关闭了你的应用程序中的所有主要安全漏洞。最后，你启用了多个账户，这样任何人都可以使用你的借阅图书馆来跟踪他们的物品，而且你这样做并没有损害最终用户的隐私。
- en: In the next chapter you will learn how to deploy a meteor application to a production
    environment, and learn techniques to start coding fast, robust, and production-ready
    Meteor applications.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章节中，你将学习如何将Meteor应用程序部署到一个生产环境中，并学习开始编写快速、健壮且适用于生产的Meteor应用程序的技术。
