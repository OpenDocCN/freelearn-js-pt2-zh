- en: Chapter 9. Using JavaScript for Large-Scale Projects
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章 使用JavaScript进行大规模项目
- en: Large-scale web application projects comprise of several modules. With continuous
    improvements and advancements in the development of various JavaScript frameworks,
    developers use JavaScript frequently in an application's presentation or frontend
    layer, and server-side operations are only performed when required. For example,
    when saving or reading the data from server or doing some other database or backend
    operations, an HTTP request is made to the server that returns the plain JSON
    object and updates the DOM elements. With these developments in place, most of
    the application frontend code resides on the client side. However, when JavaScript
    was first developed, it was targeted to be used for doing some basic operations,
    such as updating the DOM elements or showing confirm dialogs and other relative
    operations. The JavaScript code mostly exists on the page itself within the `<script>`
    scripting tag. However, large-scale applications consist of many lines of code
    and need proper attention when designing and architecting the frontend. In this
    chapter, we will discuss a few concepts and best practices that help to make the
    application frontend more scalable and maintainable.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 大型网络应用项目由多个模块组成。随着各种JavaScript框架的开发不断进步和提升，开发者在应用程序的展示或前端层频繁使用JavaScript，而服务器端操作只在需要时执行。例如，当从服务器保存或读取数据，或进行其他数据库或后端操作时，向服务器发送HTTP请求，返回纯JSON对象并更新DOM元素。随着这些发展，应用程序的大部分前端代码都位于客户端。然而，当JavaScript最初被开发时，它的目标是用于执行一些基本操作，比如更新DOM元素或显示确认对话框等相对操作。JavaScript代码主要存在于页面本身的`<script>`脚本标签中。然而，大规模应用程序包含许多代码行，在设计和架构前端时需要适当的关注。在本章中，我们将讨论一些概念和最佳实践，以帮助使应用程序前端更具可扩展性和可维护性。
- en: Think before proceeding
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在行动之前先思考
- en: Large-scale applications consist of many JavaScript files and proper structuring
    of these files brings greater visibility. JavaScript frameworks such as AngularJS,
    EmberJS, and others already provide proper structuring and guidelines to define
    controllers, factories, and other objects, as well as provide best practices of
    using them. These frameworks are very popular and already adhere to the problem
    of higher scalability and maintainability. However, there are certain scenarios
    where we want to strictly rely on plain JavaScript files and may develop our own
    custom framework to remedy particular requirements. To acknowledge these, there
    are certain best industry-wide practices being used, which make our JavaScript-based
    frontend more maintainable and scalable.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 大规模应用通常包含许多JavaScript文件，合理地组织这些文件可以提高可见性。像AngularJS、EmberJS这样的JavaScript框架已经提供了适当的组织和指导，用于定义控制器、工厂和其他对象，同时也提供了使用它们的最佳实践。这些框架非常流行，并且已经符合了更高可扩展性和可维护性的需求。然而，在某些情况下，我们可能想严格依赖纯JavaScript文件，并为特定需求开发自己的自定义框架。为了认可这些情况，行业内已经采用了某些最佳实践，这些实践使得基于JavaScript的前端更加可维护和可扩展。
- en: When working on large scale applications, we need to think ahead of what the
    scope of the application is all about. We need to think how easily our application
    can be extended and how quickly the incorporation of other modules or functionality
    can be achieved. If any module fails, would it affect the behavior of the application
    or crash other modules? For example, if we are using any third-party JavaScript
    library that modify some of their method's signatures. In this case, if any third-party
    library is used frequently everywhere in our application, we have to modify the
    method at each point, and it may be a cumbersome process to not only change, but
    also test. On the other hand, if some Facade or wrapper has been implemented,
    it would only require us to change at one place instead of updating it everywhere.
    Therefore, designing an application architecture or framework is a thoughtful
    process, but it makes the application more robust and healthy.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在大型应用程序上工作时，我们需要思考应用程序的范围是什么。我们需要考虑应用程序如何容易地被扩展，以及如何快速地实现其他模块或功能。如果任何模块失败，它会影响应用程序的行为还是导致其他模块崩溃？例如，如果我们正在使用某个第三方JavaScript库，该库修改了它们某些方法签名。在这种情况下，如果我们在应用程序的每个地方都频繁使用第三方库，我们就必须在每个点上修改方法，而且不仅更改，而且测试也可能是一个繁琐的过程。另一方面，如果已经实现了一些Facade或包装器，那么我们只需要在一个地方进行更改，而不是到处更新。因此，设计应用程序架构或框架是一个深思熟虑的过程，但它使应用程序更加健壮和健康。
- en: Developing highly scalable and maintainable applications
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发高度可扩展和可维护的应用程序
- en: The following are the factors that we should consider to make highly scalable
    and maintainable web applications that rely heavily on JavaScript.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们应该考虑的因素，以创建高度可扩展和可维护的基于JavaScript的Web应用程序。
- en: Modularization
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模块化
- en: With big applications, writing everything in a single JavaScript file is not
    a good practice. Nonetheless, even if you have separate JavaScript files for different
    modules and referencing them through the scripting `<script>` tag bloats the global
    namespace. A proper structuring should be done to keep JavaScript files into separate
    module-wise folders. For example, an ERP application consists of several modules.
    We can create separate folders for each module and use specific JavaScript files
    to provide certain functionality for specific views or pages. However, the common
    files can reside in the common folder.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在大型的应用程序中，将所有内容写入一个JavaScript文件是不好的做法。尽管如此，即使你为不同的模块分离了不同的JavaScript文件，并通过脚本`<script>`标签引用它们，这也会使全局命名空间膨胀。应该进行适当的结构化，以将JavaScript文件保存在单独的模块文件夹中。例如，一个ERP应用程序包括几个模块。我们可以为每个模块创建单独的文件夹，并使用特定的JavaScript文件为特定的视图或页面提供某些功能。然而，公共文件可以存放在公共文件夹中。
- en: 'Here is the sample project structuring to arrange JavaScript files based on
    an ERP module. Each module has a `service` folder that contains some files to
    do some read or write operations on the server side, and the `Views` folder to
    manipulate DOM elements of specific views once the data is loaded or any control
    event is invoked. The `common` folder may contain all the helper utilities and
    functions that are used by all the other modules. For example, to log messages
    on console, or make an HTTP request on the server side, functions can be defined
    in the common JavaScript files and they can be used by the services or view JavaScript
    files:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个根据ERP模块来组织JavaScript文件的示例项目结构。每个模块都有一个`service`文件夹，其中包含一些用于服务器端读或写操作的文件，以及一个`Views`文件夹，用于在数据加载或任何控件事件触发后操作特定视图的DOM元素。`common`文件夹可能包含所有其他模块都会使用的助手工具和函数。例如，在控制台日志消息，或在服务器端发送HTTP请求，这些功能可以定义在公共JavaScript文件中，并且它们可以被服务或视图JavaScript文件使用：
- en: '![Modularization](img/00111.jpeg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![模块化](img/00111.jpeg)'
- en: In the preceding structure, the `Services` folder can have the functions related
    to perform **create**, **retrieve**, **update**, **and delete** (**CRUD**) operations
    on the database by calling some Web API or web services, whereas a view file such
    as `FIMain.js` contains page-specific function.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的结构中，`Services`文件夹可以包含与调用某些Web API或Web服务执行数据库的**创建**、**检索**、**更新**、**和删除**（**CRUD**）操作相关的函数，而像`FIMain.js`这样的视图文件包含页面特定的函数。
- en: To make an HTML page clean, it is a better approach to keep JavaScript files
    separate from the HTML page. So in the preceding screenshot, `FIMain.js` contains
    the JavaScript function corresponding to the main page, whereas `FIDashboard.js`
    contains the JavaScript function corresponding to the dashboard page, and so on.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持HTML页面的整洁，将JavaScript文件与HTML页面分开是一个更好的方法。所以在之前的截图中，`FIMain.js`包含了与主页面对应的JavaScript函数，而`FIDashboard.js`包含了与仪表板页面对应的JavaScript函数，依此类推。
- en: These files can simply be added through the `<script>` scripting tag, but in
    JavaScript world, adding JavaScript files directly on the page itself is not good
    practice. Modules can be defined in JavaScript by implementing a module pattern.
    However, mostly developers prefer using RequireJS API to define modules to make
    module loading simpler and provide a better scoping of variables and functions
    defined in this module. It is equivalent to the CommonJS system, but it is recommended
    because of an asynchronous behavior. It loads the JavaScript modules in an asynchronous
    way and make the page-load cycle faster.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这些文件可以通过`<script>`脚本标签简单地添加，但在JavaScript世界中，直接在页面上添加JavaScript文件是不好的做法。模块可以通过实现模块模式在JavaScript中定义。然而，大多数开发者更愿意使用RequireJS
    API来定义模块，以使模块加载更简单，并提供更好的变量和函数定义范围。它与CommonJS系统等效，但由于其异步行为而受到推荐。它以异步方式加载JavaScript模块，使页面加载周期更快。
- en: Implementing the module pattern
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实现模块模式
- en: A module pattern is the most prevailing design pattern used for creating loose-coupled
    architecture and keeping the pieces of JavaScript code independent of other modules.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 模块模式是用于创建松耦合架构和使JavaScript代码片段独立于其他模块的最流行的设计模式。
- en: Modules are just like .NET classes that can have private, protected, and public
    properties and methods and provide control to the developer to expose only those
    methods or properties that are needed by other classes.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 模块就像.NET类一样，可以有私有、受保护和使用公开的属性和方法，并为开发者提供控制，只暴露其他类需要的属性和方法。
- en: In JavaScript, a module pattern can be implemented using **immediately invoked
    function expression** (**IIFE**) that executes immediately and returns a closure.
    Closure actually hides private variables and methods and returns an object that
    contains only those methods or variables that are public and are accessible by
    other modules.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，模块模式可以通过**立即执行函数表达式**（**IIFE**）实现，该表达式立即执行并返回一个闭包。闭包实际上隐藏了私有变量和方法，并返回一个只包含公共方法和变量的对象，供其他模块访问。
- en: 'Here is the `Logger` module that exposed a `logMessage()` method, which calls
    one private `formatMessage()` method to append date and returns the formatted
    message that is then printed out on a browser''s **Console** window:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是暴露了`logMessage()`方法的`Logger`模块，该方法调用一个私有`formatMessage()`方法来附加日期，并返回格式化后的消息，然后将其打印在浏览器的**控制台**窗口上：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In the preceding code, the `logMessage()` method returns an object that is invoked
    through a `Logger` namespace.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，`logMessage()`方法返回一个通过`Logger`命名空间调用的对象。
- en: 'A module can contain multiple methods and properties, and to implement this
    scenario, let''s modify the preceding example and add one more method to show
    alert message and a property to access the logger name and expose them through
    an object literal syntax. Object literal is another representation of binding
    methods and properties as name value pairs separated by commas and offers a cleaner
    representation. Here is the modified code:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 模块可以包含多个方法和属性，为了实现这种情况，让我们修改前面的示例，再添加一个显示警告消息的方法和一个访问日志名称的属性，并通过对象字面量语法暴露它们。对象字面量是另一种表示将方法和属性作为名称值对分离并用逗号分隔的绑定方式，提供了更清晰的表示。以下是修改后的代码：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the preceding code, `logMessage()` and `showAlert()` will be accessible through
    `logConsoleMessage()` and `showAlertMessage()` methods.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，`logMessage()`和`showAlert()`将通过`logConsoleMessage()`和`showAlertMessage()`方法进行访问。
- en: Modularizing JavaScript code through RequireJS
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用RequireJS对JavaScript代码进行模块化
- en: Modules in RequireJS are an extension of the module pattern with the benefit
    of not needing globals to refer to other modules. RequireJS is a JavaScript API
    to define modules and load them asynchronously when they are required. It downloads
    the JavaScript files asynchronously and reduces the time to load the whole page.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: RequireJS中的模块是模块模式的扩展，其好处是不需要全局变量来引用其他模块。RequireJS是一个JavaScript API，用于定义模块并在需要时异步加载它们。它异步下载JavaScript文件，并减少整个页面加载的时间。
- en: Creating modules using the RequireJS API
  id: totrans-26
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用RequireJS API创建模块
- en: 'A module in RequireJS can be created using the `define()` method and loaded
    using the `require()` method. RequireJS provides two syntax styles to define modules
    that are as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在RequireJS中，可以通过`define()`方法创建模块，并使用`require()`方法加载。RequireJS提供了两种语法风格来定义模块，如下所示：
- en: '**Defining module in CommonJS style**: Here is the code snippet to define the
    module in the CommonJS style:'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用CommonJS风格定义模块**：以下是在CommonJS风格中定义模块的代码片段：'
- en: '[PRE2]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The preceding CommonJS style syntax uses the `define()` method of RequireJS
    API that takes a function. This function takes three parameters: `require`, `exports`,
    and `module`. The last two parameters, `exports` and `module`, are optional. However,
    they have to be defined in the same sequence. If you are not using `require`,
    and only wanted to export some functionality using the `exports` object, the `require`
    parameter needs to be provided. The `require` parameter is used to import modules
    that were exported using `exports` or `module.exports` in other modules. In the
    preceding code, we have added the dependency of the `utility` module by specifying
    the path of the `utility.js` file in calling the `require` method. When adding
    any dependency, we just need to specify the path followed with the filename of
    the JavaScript file and not the `.js` file extension. The file is automatically
    picked by the RequireJS API. Exporting any function or variable that we need to
    be used by other modules can be done through `exports` or `module.exports` appropriately.'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前面的CommonJS风格语法使用了RequireJS API的`define()`方法，该方法接受一个函数。此函数接受三个参数：`require`、`exports`和`module`。后两个参数`exports`和`module`是可选的。但是，它们必须按照相同的顺序定义。如果你不使用`require`，只想通过`exports`对象导出一些功能，那么需要提供`require`参数。`require`参数用于导入使用`exports`或`module.exports`在其他模块中导出的模块。在前面的代码中，我们通过在调用`require`方法时指定`utility.js`文件的路径，添加了`utility`模块的依赖。添加任何依赖时，我们只需要指定路径以及JavaScript文件的名称，而不需要`.js`文件扩展名。文件由RequireJS
    API自动识别。我们可以通过`exports`或`module.exports`适当地导出其他模块需要使用的任何函数或变量。
- en: '**Defining module in AMD style**: Here is the code snippet to define the module
    in an AMD-style syntax:'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在AMD风格中定义模块**：以下是在AMD风格语法中定义模块的代码片段：'
- en: '[PRE3]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The AMD-style syntax takes the dependencies array as the first parameter. To
    load the module dependencies in an AMD-style syntax you have to define them in
    an array. The second parameter takes the `function` parameter, taking the module
    name that maps to the module defined in the dependencies array so that it can
    be used in the function body. To export the variables or methods, we can export
    them through the object literal syntax.
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: AMD风格语法将依赖项数组作为第一个参数。要使用AMD风格语法加载模块依赖项，你必须将它们定义在一个数组中。第二个参数接受`function`参数，它取模块名称，映射到依赖项数组中定义的模块，以便在函数体中使用。要导出变量或方法，我们可以通过对象字面量语法进行导出。
- en: Bootstrapping RequireJS
  id: totrans-34
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 启动RequireJS
- en: Let's go through a simple example to understand the concepts of using RequireJS
    in an ASP.NET application. To use the RequireJS API in the ASP.NET Core application,
    you have to download and place the `Require.js` file in the `wwwroot/js` folder.
    In the following example, we will write a `logging` module that contains a few
    methods such as writing to console, showing an alert, and writing on the server.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个简单的例子来了解如何在ASP.NET应用程序中使用RequireJS。要在ASP.NET Core应用程序中使用RequireJS API，你必须下载并将在`wwwroot/js`文件夹中放置`Require.js`文件。在下面的例子中，我们将编写一个`logging`模块，其中包含一些方法，如写入控制台、显示警告以及向服务器写入。
- en: 'Let''s create the `Logging.js` file in the `wwwroot/js/common` folder and write
    the following code:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`wwwroot/js/common`文件夹中创建一个`Logging.js`文件，并写入以下代码：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The following is the code for the `Index.cshtml` page that displays an alert
    message when the page is loaded:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`Index.cshtml`页面的代码，当页面加载时会显示一个警告消息：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We can also wrap the preceding function in the `main.js` file and bootstrap
    it through the scripting `<script>` tag. There is one special attribute known
    as `data-main`, which is used by RequireJS as the entry point of the application.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以将前面的函数包装在`main.js`文件中，并通过脚本`<script>`标签启动它。有一个特殊的属性称为`data-main`，它是由RequireJS用作应用程序的入口点。
- en: 'The following is the code for `main.js` that resides under the `wwwroot/JS`
    folder. As `main.js` resides under the `wwwroot/js` folder, the path will be `common/logging`:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是位于`wwwroot/JS`文件夹中的`main.js`代码。因为`main.js`位于`wwwroot/js`文件夹中，所以路径将是`common/logging`：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Finally, we can bootstrap `main.js` using scripting tag, as shown in the following
    code:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以使用脚本标签启动`main.js`，如下面的代码所示：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The following is the sample project structure containing the `Common` folder
    to have common JavaScript files; whereas, `FI` and `HR` folders for module-specific
    JavaScript files:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个包含`Common`文件夹的示例项目结构，以存储常见的JavaScript文件；而`FI`和`HR`文件夹用于模块特定的JavaScript文件：
- en: '![Bootstrapping RequireJS](img/00112.jpeg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![启动RequireJS](img/00112.jpeg)'
- en: Suppose we want to modify the preceding example and pass the message from an
    input control on a button's `click` event. This can be done by developing a `view`
    module for a particular page and injecting the `logging` module inside it.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要修改之前的例子，并在按钮的`click`事件上从输入控件传递消息。这可以通过为特定页面开发一个`view`模块并在其中注入`logging`模块来实现。
- en: 'The following is the HTML markup containing `input` and `button` elements:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是要包含`input`和`button`元素的HTML标记：
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The following is the `view.js` file that takes the `logging` module and call
    its `sendMessage()` method by reading the `txtMessage` element value:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的`view.js`文件通过读取`txtMessage`元素的值来调用`logging`模块的`sendMessage()`方法：
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: When the button is clicked, an alert message will be displayed.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 当按钮被点击时，将显示一个警告消息。
- en: Event-driven messaging
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 事件驱动的消息传递
- en: In the preceding section, we enabled the modularization support for JavaScript
    files and converted them into modules. In large applications, we cannot just rely
    on injecting the modules in other modules, we may need some flexibility to invoke
    events of certain modules through some the Pub/Sub pattern. We have already seen
    the Pub/Sub pattern in [Chapter 7](part0039_split_000.html#1565U2-40dd2de0d2d94f79a49cd7a43c4b76e6
    "Chapter 7. JavaScript Design Patterns"), *JavaScript Design Patterns*, which
    maintains a centralized list to register events that point to some callback functions
    and are invoked through a publisher object. This pattern is very useful when enabling
    event-driven messaging between modules, but there is another better pattern known
    as a mediator pattern, which is a superset of the Pub/Sub pattern. The mediator
    pattern is better as it allows publishers or mediators to access other events/methods
    of the subscribed object and allows the mediator to decide the method or event
    that is needed to be called.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一部分，我们为JavaScript文件启用了模块化支持并将它们转换为模块。在大型应用程序中，我们不能仅仅依赖于在其他模块中注入模块，我们可能需要一些灵活性，通过某种发布/订阅模式调用某些模块的事件。我们已经在[第7章](part0039_split_000.html#1565U2-40dd2de0d2d94f79a49cd7a43c4b76e6
    "Chapter 7. JavaScript Design Patterns")中看到了发布/订阅模式，该模式维护一个注册事件（指向某些回调函数）的集中式列表，并通过发布者对象调用这些事件。这种模式在使模块之间的事件驱动消息传递变得非常实用，但还有一种更好的模式，即中介者模式，它是发布/订阅模式的一个超集。中介者模式更好，因为它允许发布者或中介者访问订阅对象的其他事件/方法，并允许中介者决定需要调用哪个方法或事件。
- en: Implementing mediator pattern for communication between modules
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为模块之间的通信实现中介者模式
- en: Mediator encapsulates objects in a centralized list and uses them by invoking
    their methods. This list keeps all the objects (or modules) at central location,
    thus allowing improved communication between them.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 中介者将对象封装在集中式列表中并调用它们的方法。这个列表将所有对象（或模块）放在中央位置，从而允许它们之间改进的通信。
- en: Let's go through a practical example of implementing the mediator pattern. The
    mediator acts as a centralized controlling object where modules can subscribe
    or unsubscribe. It provides abstract methods that can be invoked by any of the
    source subscriber module to communicate with the target subscriber module. The
    mediator holds a centralized dictionary object to hold subscriber objects based
    on some key, or mostly name, and invokes target module method based on the module
    name passed by the subscriber. In the following example, we have `MediatorCore`
    (mediator), `EmployeeRepository` (subscriber), and `HRModule` (subscriber) objects.
    We will use the RequireJS API to convert JavaScript files into modules.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个实现中介者模式的实际例子来了解。中介者作为一个集中控制的对象，模块可以进行订阅或取消订阅。它提供了抽象方法，任何源订阅模块都可以调用这些方法与目标订阅模块进行通信。中介者持有一个集中式字典对象，根据某些键（或通常是名称）持有订阅对象，并根据订阅者传递的模块名称调用目标模块方法。在下面的例子中，我们有了`MediatorCore`（中介者）、`EmployeeRepository`（订阅者）和`HRModule`（订阅者）对象。我们将使用RequireJS
    API将JavaScript文件转换为模块。
- en: 'The following is the `MediatorCore` JavaScript file:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的`MediatorCore` JavaScript文件：
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '`EmployeeRepository` takes a name parameter at initialization and defines the
    mediator variable that can be set when it is registered at mediator. This is provided
    in case `EmployeeRepository` wants to call some other module or repository of
    a subscriber module. We can create multiple repositories, for example, `RecruitmentRepository`
    and `AppraisalRepository` for `HRModule` and use them when needed.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`EmployeeRepository`在初始化时接收一个名称参数，并定义了一个中介变量，该变量在注册中介时可以设置。这样提供的目的是，如果`EmployeeRepository`想要调用其他模块或订阅模块的仓库，就可以这样做。我们可以创建多个仓库，例如为`HRModule`创建`RecruitmentRepository`和`AppraisalRepository`，并在需要时使用它们。'
- en: 'Here is the code for `HRModule` that calls `EmployeeRepository` through a mediator:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`HRModule`的代码，通过中介调用`EmployeeRepository`：
- en: '[PRE13]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Now, we will register `HRModule` and `EmployeeRepository` with the mediator
    and call the `HRModule` methods to perform CRUD operations.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将注册`HRModule`和`EmployeeRepository`到中介，并调用`HRModule`方法以执行CRUD操作。
- en: 'The following is the code for `HRView.js` that is used to capture the button''s
    `click` event on the form and calls the `getRecords()` method when the button
    is clicked:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`HRView.js`的代码，用于捕获表单上按钮的`click`事件，并在按钮被点击时调用`getRecords()`方法：
- en: '[PRE14]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The following is the `main.js` file that is used to bootstraps the `HRView.js`
    file through the RequireJS API:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用RequireJS API引导`HRView.js`文件的`main.js`文件：
- en: '[PRE15]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Finally, we can use the preceding `Main.js` module on the `Index.cshtml` page
    in ASP.NET, as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以在ASP.NET的`Index.cshtml`页面上使用上述`Main.js`模块，如下所示：
- en: '[PRE16]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The following is the logical diagram that shows how the modules communicate
    with each other:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是显示模块如何相互通信的逻辑图：
- en: '![Implementing mediator pattern for communication between modules](img/00113.jpeg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![模块间通信的中介者模式实现](img/00113.jpeg)'
- en: Encapsulating complex code
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 封装复杂代码
- en: Another core principle of developing highly scalable and maintainable application
    is to use wrappers and encapsulate complex code into a simpler interface. This
    can be achieved by implementing a Facade pattern.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 开发高度可扩展和可维护应用程序的另一个核心原则是使用包装器，并将复杂代码封装到更简单的接口中。这可以通过实现一个外观模式来完成。
- en: The Facade pattern is used to simplify the complex code by exposing a method
    and hiding all the complex code inside the Facade object. For example, there are
    many ways and APIs available to perform Ajaxified operations. Ajax requests can
    be made using a plain `XmlHttpRequest` object, or with jQuery, it is quite easy
    to use `$.post()` and `$.get()` methods. In AngularJS, it can be achieved using
    its own `http` object to invoke services and so on. These type of operations can
    be encapsulated and benefited in scenarios when the internal API is modified,
    or when you decided to use some other better API; modification needs to be done,
    which is far lesser than changing it at all the places where it has been used.
    With the Facade pattern, you can only modify it in the Facade object and save
    time on updating it everywhere where it has been used.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 外观模式（Facade Pattern）用于简化复杂代码，通过暴露一个方法并隐藏所有复杂代码在Facade对象内部。例如，有多种方法和API可用于执行Ajaxified操作。可以使用一个普通的`XmlHttpRequest`对象发出Ajax请求，或者使用jQuery，使用`$.post()`和`$.get()`方法非常容易。在AngularJS中，可以使用其自己的`http`对象来调用服务等等。这些类型的操作可以通过封装，在内部API更改时，或者当你决定使用另一个更好的API时受益；修改工作量远小于更改所有使用过的地方。使用外观模式，你只需要在Facade对象中修改一次，并节省在所有使用过的地方更新它的时间。
- en: Another advantage of using Facade is that it reduces the development effort
    by encapsulating a bunch of code to a simple method and make it easy for the consumer
    to use. Facade reduces the development effort by minimizing the lines of code
    required to call a certain functionality. To learn more about Facade, refer to
    [Chapter 7](part0039_split_000.html#1565U2-40dd2de0d2d94f79a49cd7a43c4b76e6 "Chapter 7. JavaScript
    Design Patterns"), *JavaScript Design Patterns*.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 使用外观模式的另一个优点是，它通过将一串代码封装到一个简单的方法中，减少了开发工作量，并使消费者容易使用。外观模式通过最小化调用特定功能所需的代码行数，减少了开发工作量。要了解更多关于外观模式的信息，请参考[第7章](part0039_split_000.html#1565U2-40dd2de0d2d94f79a49cd7a43c4b76e6
    "Chapter 7. JavaScript Design Patterns")，《JavaScript设计模式》。
- en: Generating documentation
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成文档
- en: Proper documentation increases the maintainability of your application and makes
    it easier for developers to reference it when needed or customizing applications.
    There are many documentation generators available in the market. JSDoc and YUIDoc
    are very popular JavaScript documentation generators, but in this section, we
    will use JSDoc3 that not only generates documentation, but also enables intellisense
    for your custom JavaScript modules to facilitate during development.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 适当的文档可以提高你的应用程序的可维护性，并使开发者在需要时或定制应用程序时更容易参考。市场上有很多文档生成器可供选择。JSDoc和YUIDoc是非常流行的JavaScript文档生成器，但在本节中，我们将使用JSDoc3，它不仅可以生成文档，还可以为你的自定义JavaScript模块启用intellisense，以便在开发过程中提供便利。
- en: JSDoc is an API similar to JavaDoc and PHPDoc. Comments can be added directly
    to the JavaScript code. It also provides a JSDoc tool through which the documentation
    website can be created.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: JSDoc是一个类似于JavaDoc和PHPDoc的API。可以直接在JavaScript代码中添加注释。它还通过JSDoc工具提供了文档网站的生成。
- en: Installing JSDoc3 in ASP.NET Core
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在ASP.NET Core中安装JSDoc3
- en: 'JSDoc3 can be added as a Node package and we can use it with the Gulp task
    runner to generate documents. To add JSDoc3 to your ASP.NET Core project, you
    can start by adding an entry to the `package.json` file used by Node. This entry
    has to be done in the development dependencies:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: JSDoc3可以作为一个Node包添加，我们还可以使用Gulp任务运行器来生成文档。要将JSDoc3添加到你的ASP.NET Core项目中，你可以首先在由Node使用的`package.json`文件中添加一个条目。这个条目必须在开发依赖项中完成：
- en: '![Installing JSDoc3 in ASP.NET Core](img/00114.jpeg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![在ASP.NET Core中安装JSDoc3](img/00114.jpeg)'
- en: The first development dependency defined in the previous screenshot is Gulp
    which is required to create tasks, and `gulp-jsdoc3` is the actual documentation
    generator that generates the HTML website when you run that task.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 前一张截图中定义的第一个开发依赖是Gulp，它用于创建任务，而`gulp-jsdoc3`是实际的文档生成器，当你运行那个任务时，它会生成HTML网站。
- en: 'The task can be defined as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 任务可以定义如下：
- en: '[PRE17]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Adding comments
  id: totrans-88
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 添加注释
- en: 'To generate documentation, we need to annotate our code with comments. The
    more the comments are provided, the better the documentation will be generated.
    Comments can be added through `/**` as the starting tag and `*/` as the ending
    tag:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 为了生成文档，我们需要用注释注释我们的代码。提供的注释越多，生成的文档就会越好。注释可以通过`/**`作为开始标签和`*/`作为结束标签来添加：
- en: '[PRE19]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'If the function is a constructor, you can specify `@constructor` in the comments
    to give more meaning to the readers:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果函数是构造函数，你可以在注释中指定`@constructor`，以便向读者传达更多意义：
- en: '[PRE20]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'A function takes parameters as well, and this can be indicated by using `@param`
    in your comments. Here is the same function that takes the actual path of some
    service as a parameter to retrieve records:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 函数接收参数，这可以通过在注释中使用`@param`来表示。以下是同一个函数，它接收某个服务的实际路径作为参数来检索记录：
- en: '[PRE21]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'When you run your application, it will show the documentation as follows:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行你的应用程序时，它将按如下方式显示文档：
- en: '![Adding comments](img/00115.jpeg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![添加注释](img/00115.jpeg)'
- en: We have seen how easy it is with JSDoc3 to generate documentation. This not
    only helps to understand the code, but also helps the developer during development
    by providing intellisense. To learn more about JSDoc3, refer to [http://usejsdoc.org/](http://usejsdoc.org/).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了使用JSDoc3生成文档是多么简单。这不仅有助于理解代码，而且在开发过程中通过提供intellisense，也有助于开发者。要了解更多关于JSDoc3的信息，请参考[http://usejsdoc.org/](http://usejsdoc.org/)。
- en: Deployment optimization
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署优化
- en: '[PRE22]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '| Module | Description |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '```'
- en: '| --- | --- |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '```'
- en: '| `Gulp` | This is used to define tasks that can be run through task runners
    |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '```'
- en: '| `gulp-concat` | This is used to concatenate JavaScript files into a single
    file |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '```'
- en: '| `gulp-cssmin` | This is used to compress CSS files |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '```'
- en: '| `gulp-uglify` | This is used to compress JavaScript files |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '```'
- en: 'The following is the sample `gulpfile.js` that can be used to compress JavaScript
    and CSS files:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是可以用于压缩JavaScript和CSS文件的示例`gulpfile.js`：
- en: '[PRE23]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'In Visual Studio 2015, you can run these tasks using **Task Runner Explorer**,
    and also bind them with the `build` events:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在Visual Studio 2015中，你可以使用**任务运行器浏览器**运行这些任务，并将它们与`build`事件绑定：
- en: '![Deployment optimization](img/00117.jpeg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![部署优化](img/00117.jpeg)'
- en: 'The following are the options that you can have to associate them with specific
    `build` events:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是你可以为特定`build`事件关联的选项：
- en: '![Deployment optimization](img/00118.jpeg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![部署优化](img/00118.jpeg)'
- en: The preceding screenshot shows the steps to bind the `clean:js` task with a
    **Clean** build event. So, whenever your clean your project, it will run `clean:js`
    and remove the `site.min.js` file.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个屏幕截图显示了将`clean:js`任务与**清理**构建事件绑定的步骤。因此，无论何时你清理你的项目，它都会运行`clean:js`并删除`site.min.js`文件。
- en: Summary
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we discussed a few concepts of structuring JavaScript-based
    projects and splitting them into modules to increase the scalability and maintainability.
    We also saw how effectively we can use the mediator pattern to provide communication
    between modules. Documentation also plays an important role and increases the
    maintainability, and we used JSDoc3, which is one of the most popular JavaScript
    documentation APIs and helped developers to reference and understand the functions
    of JavaScript during development. Lastly, we discussed how to optimize the load
    time of your application by compressing and merging your JavaScript files into
    one minified JavaScript file to increase the performance. In the next chapter,
    we will discuss testing and debugging JavaScript applications and the tools that
    are available to troubleshoot efficiently.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了几个关于如何结构化基于JavaScript的项目并将其划分为模块以提高可扩展性和可维护性的概念。我们还看到了如何有效地使用中介者模式（mediator
    pattern）来提供模块间的通信。文档也扮演着重要的角色并增加了可维护性，我们使用了JSDoc3，这是最流行的JavaScript文档API之一，它帮助开发者参考并理解JavaScript的功能。最后，我们讨论了如何通过将JavaScript文件压缩和合并成一个最小化的JavaScript文件来优化应用程序的加载时间以提高性能。在下一章中，我们将讨论如何测试和调试JavaScript应用程序以及可用的工具，以便有效地解决问题。
