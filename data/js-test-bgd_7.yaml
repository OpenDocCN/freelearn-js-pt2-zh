- en: Chapter 7. Debugging Tools
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 7 章。调试工具
- en: In this chapter, we shall learn about debugging tools that can make our lives
    easier. We will be using debugging tools provided by major browsers in the market
    such as Internet Explorer, Firefox, Google Chrome, and Safari.
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习一些可以使我们的生活更轻松的调试工具。我们将使用市场上主要浏览器（如 Internet Explorer、Firefox、Google
    Chrome 和 Safari）提供的调试工具。
- en: I understand that there is informative documentation on the Internet, therefore
    what you can expect in this chapter is that I'll very briefly talk about the features,
    and then walk through a simple example as to how you can make use of the debugging
    features to make your life easier.
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我明白互联网上有详尽的文档，因此你可以在这一章期待的是我会非常简要地介绍一下特性，然后通过一个简单的例子说明如何利用调试功能让生活变得更轻松。
- en: 'In general, you will learn about each of the following topics for the above-mentioned
    debugging tools for each browser:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，你会了解到每个浏览器中提到的调试工具的以下主题：
- en: Where and how to get the debugging tools
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取调试工具的位置和方式
- en: How to use the tools to debug HTML, CSS, and JavaScript
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用工具调试 HTML、CSS 和 JavaScript
- en: Advanced debugging, such as setting breakpoints and watching variables
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高级调试，如设置断点和观察变量
- en: How to perform profiling by using the debugging tools
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用调试工具进行性能分析
- en: So let's get started.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 那么让我们开始吧。
- en: IE 8 Developer Tools (and the developer toolbar plugin for IE6 and 7)
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IE 8 开发者工具（以及为 IE6 和 7 设计的开发者工具栏插件）
- en: In this section we will focus on Internet Explorer 8's developer toolbar.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本节我们将重点介绍 Internet Explorer 8 的开发者工具栏。
- en: Note
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In case you are using Internet Explorer 6 or 7, here's how you can install the
    developer toolbar for Internet Explorer 6 or 7.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用 Internet Explorer 6 或 7，以下是你如何可以为 Internet Explorer 6 或 7 安装开发者工具栏的方法。
- en: You will need to visit [http://www.microsoft.com/downloads/details.aspx?familyid=e59c3964-672d-4511-bb3e-2d5e1db91038&displaylang=en](http://www.microsoft.com/downloads/details.aspx?familyid=e59c3964-672d-4511-bb3e-2d5e1db91038&displaylang=en)
    and download the developer toolbar. In case you are reading a paper version of
    this book and cannot copy and paste the above URL, Google "developer toolbar for
    IE6 or IE7", and you should land on the download page you need.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要访问 [http://www.microsoft.com/downloads/details.aspx?familyid=e59c3964-672d-4511-bb3e-2d5e1db91038&displaylang=en](http://www.microsoft.com/downloads/details.aspx?familyid=e59c3964-672d-4511-bb3e-2d5e1db91038&displaylang=en)
    并下载开发者工具栏。如果你阅读的是这本书的纸质版，无法复制和粘贴上述 URL，那么就谷歌“IE6 或 IE7 的开发者工具栏”，你应该会来到你需要的下载页面。
- en: Note that the toolbar from the above webpage is not compatible with Internet
    Explorer 8.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，上述网页上的工具栏与 Internet Explorer 8 不兼容。
- en: If you do not wish to install the developer tool separately, I'd recommend that
    you install Internet Explorer 8; IE8 comes pre-packaged with their developer tool
    and it is more handy when compared to installing developer tools for IE6 or IE7
    separately.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不想单独安装开发者工具，我建议你安装 Internet Explorer 8；IE8 预装了他们的开发者工具，与为 IE6 或 IE7 单独安装开发者工具相比，它更为方便。
- en: From this point onwards, I'll be covering the developer tool using the built-in
    tool in Internet Explorer 8.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 从这一刻起，我将涵盖使用 Internet Explorer 8 内置工具的开发者工具。
- en: Using IE developer tools
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 IE 开发者工具
- en: Now that we have obtained the plugin, it's time to go through an example to
    get an idea of how it works. I have prepared a sample code in the `source code`
    folder of this chapter; go to the folder and open the document called `IE-sample.html`
    in you browser. Basically what this example does is that it requires you to enter
    two numbers, and then it will perform addition, subtraction, multiplication, and
    division on the two numbers. The result will be shown on a box which is found
    on the right-hand side of the form.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们已经获得了插件，现在是时候通过一个例子来了解它是如何工作的了。我为此章节准备了`source code`文件夹中的示例代码；转到文件夹并在浏览器中打开名为`IE-sample.html`的文件。这个示例基本上要求你输入两个数字，然后对这两个数字进行加法、减法、乘法和除法。结果将显示在表单右侧的框中。
- en: Now give it a test, and once you are done with it, we will start to learn how
    we can debug this web page using IE8's debugging tool.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在给它一个测试，完成后我们开始学习如何使用 IE8 的调试工具调试这个网页。
- en: Open
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 打开
- en: I assume that the file is still open in your browser. If not, open `IE-sample.html`
    in your browser (using Internet Explorer, of course). Once the example is opened,
    you will need to open the debugging tool. You can navigate to **Tools**, and then
    click on **Developer Tools**. Alternatively, you can access the debugging tool
    by pressing *Shift* + *F12* on your keyboard.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我假设文件仍然在你的浏览器中打开。如果不是，请在浏览器中打开`IE-sample.html`（当然，使用Internet Explorer）。一旦示例打开，您需要打开调试工具。您可以导航到**工具**，然后点击**开发者工具**。或者，您可以通过按键盘上的*Shift*
    + *F12*来访问调试工具。
- en: A brief introduction to the user interface
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户界面的简要介绍
- en: Before we move into the actual debugging process, I'll briefly focus on the
    key features of the IE debugging tool.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们进入实际的调试过程之前，我将简要关注IE调试工具的关键特性。
- en: '![A brief introduction to the user interface](img/0004_07_21.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![用户界面简介](img/0004_07_21.jpg)'
- en: 'HTML: The **HTML** tab shows the source code for the script or web page that
    you are currently viewing. When you click on this tab, you will get the related
    tabs on the right-hand side, as shown in the previous screenshot.'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: HTML：**HTML**标签显示您当前查看的脚本或网页的源代码。当你点击这个标签时，你会在右侧得到相关标签，如图所示。
- en: 'CSS: The **CSS** tab shows you the CSS stylesheet used by the current webpage
    that you are viewing.'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CSS：**CSS**标签显示了当前您正在查看的网页所使用的CSS样式表。
- en: 'Script: The **Script** tab is where you will be performing your JavaScript
    debugging tasks. When you click on this tab, you will get a list of features related
    to the debugging tasks, such as **Console, Breakpoints, Locals**, and **Watch**.'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 脚本：**脚本**标签是您执行JavaScript调试任务的地方。当你点击这个标签时，你会得到一些与调试任务相关的特性，比如**控制台、断点、局部变量**和**监视**。
- en: 'Profiler: The **Profiler** tab shows the profiling data for the web page, should
    you choose to perform profiling.'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Profiler**：**Profiler**标签显示了网页的剖析数据，如果您选择进行剖析的话。'
- en: Debugging basics of the IE debugging tool
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IE调试工具的基本调试
- en: 'In general, we can use IE''s debugging tool in two ways:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，我们可以用IE的调试工具两种方式：
- en: In a separate window
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在一个单独的窗口中
- en: Docking it Docked within the browser
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在浏览器内停靠
- en: You can dock the debugging tool within the browser by going to the upper right-hand
    corner of the debugging window and clicking on the pin icon. In my case, I prefer
    to dock it in my browser so that I have more viewing space on my screen. Moreover,
    because the example code is fairly small, docking it on your browser should suffice.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过点击调试窗口右上角的钉子图标将调试工具停靠在浏览器内。在我的情况下，我更喜欢将其停靠在我的浏览器中，这样我屏幕上就有更多的查看空间。而且，由于示例代码相当小，将其停靠在您的浏览器上应该就足够了。
- en: In general, the left-hand side of the debugging panel is what the IE team calls
    the **Primary Content** pane. This panel displays the web page's Document Object
    Model; this is the panel that gives us a programmatic overview of the source code
    of the web page.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，调试面板的左侧是IE团队所说的**主要内容**面板。这个面板显示了网页的文档对象模型；这个面板让我们从程序化的角度 overview网页的源代码。
- en: Here are some of the basics of debugging when using IE's debugging tool.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些使用IE调试工具进行调试的基本知识。
- en: Time for action—debugging HTML by using the IE8 developer tool
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——使用IE8开发者工具调试HTML
- en: To inspect HTML elements of the webpage, click on the **HTML** tab found in
    the **Primary Content Panel**. We can click on the **+** icon located on the first
    line of the **Primary Content Panel**.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要检查网页的HTML元素，请点击**主要内容面板**中的**HTML**标签。我们可以点击位于**主要内容面板**第一行上的**+**图标。
- en: Once you have clicked on the **+** icon, you should see`<head>` and`<body>`
    appearing as soon as the`<html>` tag is expanded; clicking on them again will
    show the other elements contained within the`<head>` and`<body>` tags. For example,
    let us click on the `div` element with the `id wrap`.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你点击了**+**图标，你应该会看到`<head>`和`<body>`在`<html>`标签展开后立即出现；再次点击它们将会显示`<head>`和`<body>`标签包含的其他元素。例如，让我们点击具有`id
    wrap`的`div`元素。
- en: On clicking the `div` element, you can immediately see the various properties
    associated with `wrap`, such as its parent element, its inherited HTML and CSS,
    and the CSS properties that belong to `wrap`.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`div`元素后，您可以立即看到与`wrap`相关的各种属性，如其父元素、继承的HTML和CSS，以及属于`wrap`的CSS属性。
- en: 'We can perform further inspection by clicking on the various commands found
    on the **Properties pane**:'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们可以通过点击调试窗口中**属性面板**上的各种命令来进一步检查：
- en: '**Style**: The **Style** command improves CSS debugging by providing a list
    of all of the rules that apply to the selected element. The rules are displayed
    in precedence order; so those that apply last appear at the bottom, and any property
    overridden by another is struck through, allowing you to quickly understand how
    CSS rules affect the current element without manually matching selectors. You
    may quickly turn a CSS rule on or off by toggling the checkbox next to the rule,
    and the action will take effect immediately on your page. In our case, you will
    see two inheritances for our `#wrap` element: body and HTML. You can change the
    color property to, say, `#eee`, by clicking on the property value and typing `#eee`.
    Once you are done, press *Enter* and you can see changes immediately.'
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**样式**：**样式**命令通过提供适用于选定元素的的所有规则列表，改善了CSS的调试。规则按优先级顺序显示；所以最后应用的规则出现在底部，任何被另一个属性覆盖的属性都会被划掉，让你能快速理解CSS规则如何影响当前元素，而不需要手动匹配选择器。您可以通过切换规则旁边的复选框，快速开启或关闭CSS规则，动作将立即在您的页面上生效。在我们这个案例中，你会看到我们的`#wrap`元素有两个继承：body和HTML。你可以通过点击属性值并输入`#eee`，将颜色属性更改为`#eee`。完成后，按下*Enter*，您可以看到变化立即生效。'
- en: '**Trace** Styles: This command contains the same information as **Style** except
    it groups styles by property. If you are looking for information about a specific
    property, switch to the **Trace Styles** command. Simply find the property that
    interests you, click the plus (+) icon, and see a list of all rules that set that
    property—again in precedence order.'
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**追踪样式**：这个命令包含了与**样式**相同的信息，只不过它按照属性对样式进行了分组。如果你正在寻找关于某个特定属性的信息，切换到**追踪样式**命令。只需找到你感兴趣的属性，点击加号（+）图标，就能看到设置该属性的所有规则列表——再次按照优先级顺序排列。'
- en: '**Layout:** The **Layout** command provides box model information, such as
    the element''s offset, height, and padding. Use this command when debugging an
    element''s positioning.'
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**布局**：**布局**命令提供了盒模型信息，如元素的偏移、高度和内边距。在调试元素的定位时使用这个命令。'
- en: '**Attributes:** The **Attributes** command allows you to inspect all of the
    defined attributes of the selected element. This command also allows you to edit,
    add, or remove the selected element''s attributes.'
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**属性**：**属性**命令允许你查看选定元素的的所有定义属性。这个命令还允许你编辑、添加或删除选定元素的属性。'
- en: Time for action—debugging CSS by using the IE8 developer tool
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——使用IE8开发者工具调试CSS
- en: Now let use shift our attention back to the **Primary Content Panel**.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们将注意力重新转移到**主要内容面板**。
- en: Click on the **CSS** tab so that we have access to all of the CSS (external
    or internal) files. Once you have done that, you will see an identical CSS that
    is used by our webpage.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**CSS**标签，以便我们可以访问所有的CSS（外部或内部）文件。一旦你这样做，你会看到我们网页上使用的相同的CSS。
- en: Now I want you to click on a style property, say **color**, found in **BODY**,
    and change it to **#ccc**. You will immediately see changes to the color of the
    text in our web page.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我想要你点击**BODY**中的一项样式属性，比如**color**，并将其更改为**#ccc**。你将立即看到我们网页上文本颜色的变化。
- en: What just happened?
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: We have just performed the basics of debugging, which has provided us with the
    required knowledge before we move into debugging JavaScript by using IE's debugging
    tool.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚完成了调试的基本操作，这为我们提供了在使用IE的调试工具调试JavaScript之前所需的知识。
- en: The simple examples that we have carried out above are what we call editing
    sources on-the-fly; we can edit any HTML or CSS properties without going back
    to our source code, changing it, saving it, and than reloading the file in our
    browser. In my opinion, such features are some of the key reasons why we should
    use debugging tools.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们上面执行的简单例子，就是我们所说的实时编辑源；我们可以编辑任何HTML或CSS属性，而无需回到我们的源代码，更改它，保存它，然后在浏览器中重新加载文件。在我看来，这样的功能是我们使用调试工具的关键原因之一。
- en: However, take note that the changes that you have made only exist in Internet
    Explorer's internal representation of the site. This means that refreshing the
    page or navigating away brings back the original site.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，请注意，你所做的更改只存在于Internet Explorer对网站的内部表示中。这意味着刷新页面或导航离开会恢复原始网站。
- en: However, there will be cases where you may want to save the changes, and in
    order to do that, you can click the **Save** button to save the current HTML or
    CSS to a file. This is done in order to prevent the accidental overwriting of
    your original source code.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有些情况下你可能想保存更改，为了做到这一点，你可以点击**保存**按钮，将当前的HTML或CSS保存到文件中。这是为了防止意外覆盖你的原始源代码。
- en: Let us move on to JavaScript.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续学习JavaScript。
- en: Debugging JavaScript
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调试JavaScript
- en: Now its time to learn how we can debug JavaScript by using IE's developer tool.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在该学习如何使用IE的开发者工具调试JavaScript了。
- en: Time for action—more Debugging JavaScript by using the IE8 developer tool
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——使用IE8开发者工具进行更多JavaScript调试
- en: 'Here are the steps to start debugging:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是开始调试的步骤：
- en: Click on the **Script** tab found in the **Primary Content Panel**.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击在**主内容面板**中找到的**脚本**标签。
- en: Next, click on the button that says **Start Debugging**.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，点击写着**开始调试**的按钮。
- en: After clicking on **Start Debugging**, you will have all of the functionality
    of a proper debugger.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**开始调试**后，你将拥有一个完整调试器的所有功能。
- en: If you wish to stop debugging at any point in the debugging process, click on
    **Stop debugging**.
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你希望在调试过程中的任何一点停止调试，请点击**停止调试**。
- en: 'Now let us see what we can do with the various functionalities of the debugging
    tools. Let us start with the first one: setting breakpoints.'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在让我们看看我们可以使用调试工具的各种功能做什么。让我们从第一个开始：设置断点。
- en: We usually set breakpoints in order to control execution. In the previous chapters,
    we have typically relied on `alert()` or other functions in order to control program
    execution.
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们通常设置断点以控制执行。在前几章中，我们通常依赖于`alert()`或其他函数来控制程序执行。
- en: However, by using IE's debugging tool, you can control program execution by
    simply setting breakpoints; you can save quite a lot of `alert()`, or other self-defined
    functions, along the way.
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然而，通过使用IE的调试工具，你只需设置断点就可以控制程序执行；在这个过程中，你可以节省很多`alert()`，或其他自定义函数。
- en: Now, let us control execution by using breakpoints.
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，让我们通过使用断点来控制执行。
- en: You can set a breakpoint by right-clicking on a line number and selecting **Insert
    Breakpoint**. In our case, let us go to the line that contains `buildContent(answerB,
    "minus")`; right-click on it, and then select **Insert Breakpoint**.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以通过右键点击行号并选择**插入断点**来设置断点。在我们的案例中，让我们去包含`buildContent(answerB, "minus")`;的那一行，右键点击它，然后选择**插入断点**。
- en: Now try running the example by entering some values into the input fields in
    your browser. You will see that the dynamic content will not be created on the
    **black square** on the right-hand side. This is because the code execution stops
    at `buildContent(answerB, "minus")`;.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在尝试在浏览器中输入一些值到输入字段中。你会看到，动态内容不会在右侧的**黑色正方形**上创建。这是因为代码执行在`buildContent(answerB,
    "minus")`;处停止了。
- en: We usually use breakpoints to inspect variables; we need to know if our code
    is executing the way in which we want it to, in order to make sure that it is
    correct. So now, let us see how we can set breakpoints and inspect variables.
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们通常使用断点来检查变量；我们需要知道我们的代码是否以我们希望的方式执行，以确保它是正确的。现在，让我们看看如何设置断点和检查变量。
- en: We inspect variables by using the watch functionality. Continuing from the previous
    example, we can use the watch functionality by clicking on the Watch pane. Alternatively,
    you can click on Locals, which provides a similar functionality and allows us
    to see a set of variables. This can be done to monitor a custom list of variables,
    and also to inspect the current state of variables.
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们通过使用监视功能来检查变量。继续上一个示例，我们可以通过点击监视窗格来使用监视功能。另外，你也可以点击本地变量，它提供了类似的功能，允许我们看到一组变量。这可以用来监视自定义变量列表，也可以检查变量的当前状态。
- en: 'To do what we have just described, we need to perform the following steps:'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要执行我们刚刚描述的操作，我们需要执行以下步骤：
- en: Click on **Start Debugging** and set breakpoints for the lines that contain
    `var answerA = add(numberA, number)`; and `buildContent(answerA, "add")`;
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**开始调试**，并为包含`var answerA = add(numberA, number)`;和`buildContent(answerA,
    "add")`;的行设置断点。
- en: Now, run the example, and type in **5** and **3** respectively for the input
    fields. Then click on **Submit**.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，运行示例，分别为输入字段输入**5**和**3**。然后点击**提交**。
- en: Now go to your **Debugger** panel, and click on **Locals**. You will see the
    output as shown in the following screenshot:![Time for action—more Debugging JavaScript
    by using the IE8 developer tool](img/0004_07_01.jpg)
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在转到你的 **调试器** 面板，点击 **局部变量**。你会看到以下截图的输出：![行动时间—使用 IE8 开发者工具进行更多 JavaScript
    调试](img/0004_07_01.jpg)
- en: What this panel shows is a list of local variables that are local to the function
    where breakpoints are set
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个面板显示的是与设置断点的函数相关的局部变量列表
- en: Notice that **answerA**, **answerB**, **answerC**, and **answerD** are currently
    undefined as we have not performed any calculation for them, because we have set
    the breakpoint at `var answerA = add(numberA, number)`;.
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意到 **answerA**, **answerB**, **answerC**, 和 **answerD** 目前都是未定义的，因为我们还没有为它们执行任何计算，因为我们已经在
    `var answerA = add(numberA, number)` 处设置了断点。
- en: Next, click on **Watch**. You can now add the variables that you want to inspect.
    You can achieve this by typing in the name of the variables. Type in **answerA**
    and **numberB**, and then press *Enter*. You will see a screen similar to the
    example shown in the following screenshot:![Time for action—more Debugging JavaScript
    by using the IE8 developer tool](img/0004_07_02.jpg)
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，点击 **监视**。现在你可以添加你想要检查的变量。你可以通过输入变量的名称来实现这一点。输入 **answerA** 和 **numberB**，然后按
    *Enter*。你会看到一个类似于以下截图的屏幕：![行动时间—使用 IE8 开发者工具进行更多 JavaScript 调试](img/0004_07_02.jpg)
- en: As explained previously, **answerA** is not defined yet as it has not been calculated
    by our program. Also, because we enter the values for **numberA** and **numberB**,
    **numberB** is naturally defined.
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如前所述，**answerA** 目前还没有定义，因为它还没有被我们的程序计算出来。另外，因为我们已经为 **numberA** 和 **numberB**
    输入了值，所以 **numberB** 自然是有定义的。
- en: Note
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Did you notice that we have the incorrect types for our input? This is because
    we have used the `.value` method to access the values of the input fields. As
    a good JavaScript programmer, we should be converting the values to floating-point
    numbers by using `parseFloat()`.
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你注意到我们的输入类型不正确了吗？这是因为我们使用了 `.value` 方法来访问输入字段的值。作为一个优秀的 JavaScript 程序员，我们应该使用
    `parseFloat()` 将值转换为浮点数。
- en: We can continue to execute the code (in debugging mode) by performing Continue,
    Step In, Step Over, and Step Out operations in the debugging window.
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以在调试模式下继续执行代码（在调试窗口中）通过执行 Continue、Step In、Step Over 和 Step Out 操作。
- en: 'We will move quickly into the example to see how Continue, Step In, Step Over
    and Step Out work. Continuing from the above example:'
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将快速进入示例，看看 Continue、Step In、Step Over 和 Step Out 是如何工作的。继上面的例子继续：
- en: Click on the **Continue** button, which is green and looks like a "**play**"
    button. Immediately, you will see that the code will execute until the next breakpoint.
    This means that the variables that were previously undefined will now be defined.
    If you click on **Locals**, you will see output similar to the example shown in
    the next screenshot:![Time for action—more Debugging JavaScript by using the IE8
    developer tool](img/0004_07_03.jpg)
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击绿色的 **Continue** 按钮，它看起来像一个 "**播放**" 按钮。立即，你会看到代码将执行到下一个断点。这意味着之前未定义的变量现在将被定义。如果你点击
    **局部变量**，你会看到类似于下一个截图的输出：![行动时间—使用 IE8 开发者工具进行更多 JavaScript 调试](img/0004_07_03.jpg)
- en: Click on **Watch**, and you will see a screen similar to the example displayed
    in the next screenshot:![Time for action—more Debugging JavaScript by using the
    IE8 developer tool](img/0004_07_04.jpg)
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **监视**，你会看到一个类似于下一个截图的屏幕：![行动时间—使用 IE8 开发者工具进行更多 JavaScript 调试](img/0004_07_04.jpg)
- en: This means that the effect of Continue is that it will execute the code from
    one breakpoint to the next breakpoint. If there is no second breakpoint, the code
    will execute up to the end.
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这意味着 Continue 的效果是执行从第一个断点到最后一个断点的代码。如果没有第二个断点，代码将执行到末尾。
- en: You might want to experiment with Step In, Step Over, and Step Out.
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可能想尝试 Step In、Step Over 和 Step Out。
- en: 'In general, this is what they do:'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通常，它们就是这样做的：
- en: 'Step In: This traces the code as the code executes. For instance, you can perform
    the steps shown in the above example except that you click on **Step In** instead
    of **Continue**. You will notice that you are effectively tracing the code. Next,
    you can check on the **Locals** and **Watch** window and you will notice that
    the previously-undefined variables will be defined as the code progresses.'
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 步入（Step In）：这会跟踪代码的执行。例如，您可以执行上述示例中的步骤，只是点击**步入**而不是**继续**。您会注意到，您实际上正在跟踪代码。接下来，您可以查看**局部变量**和**监视**窗口，您会注意到
    previously-undefined 变量将在代码执行过程中被定义。
- en: 'Step Over: This simply moves to the next line of code without jumping into
    other functions as with what happened in Step In.'
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 步过（Step Over）：这会直接跳到下一行代码，而不是像步入（Step In）那样跳进其他函数。
- en: 'Step Out: This simply "steps out" of the current breakpoint until the next
    breakpoint. It is similar to **Continue**. If you use Step Out after Step In,
    it will continue to the next breakpoint (if any).'
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 步出（Step Out）：这会“步出”当前断点，直到下一个断点。它与**继续**类似。如果您在步入（Step In）之后使用步出（Step Out），它将继续到下一个断点（如果有）。
- en: Now let us move on to the next useful feature, stopping your code when an error
    is encountered.
  id: totrans-91
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在让我们继续了解下一个有用功能，即在遇到错误时停止代码。
- en: To enable this feature, you will need to click on the **Break on Error** button,
    or you can simply press *Cntrl* + *Shift* + *E*. This feature should be automatically
    enabled once you start debugging.
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要启用此功能，您需要点击**在错误时中断**按钮，或者您可以简单地按*Ctrl* + *Shift* + *E*。一旦您开始调试，此功能应该会自动启用。
- en: 'What this feature does is stop executing the code should any error be discovered.
    For example, uncomment the line that says: `buildContent(noSuchThing, "add");`
    and run the code in debugging mode. You will see the following screenshot in the
    Console, in your debugging window:'
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个功能的作用是如果在执行代码时发现任何错误，就停止执行。例如，取消注释说：`buildContent(noSuchThing, "add");` 这行代码，并在调试模式下运行代码。您将在调试窗口的控制台中看到以下屏幕截图：
- en: '![Time for action—more Debugging JavaScript by using the IE8 developer tool](img/0004_07_05.jpg)'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间—使用IE8开发者工具进行更多JavaScript调试](img/0004_07_05.jpg)'
- en: This is one of the cool things about using a debugger; it helps you to spot
    errors during run time, so that you can quickly identify the errors that you have
    made.
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用调试器的一个酷炫之处在于，它可以帮助您在运行时发现错误，这样您就可以快速识别您犯的错误。
- en: Now that we have a basic knowledge and understanding of some of the more advanced
    features of IE's debugging tool, it's time to be concerned about the performance
    of our JavaScript program.
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在我们已经对IE调试工具的一些更高级功能有了基本的了解和认识，是时候关注我们JavaScript程序的性能了。
- en: The Internet Explorer debugging tool comes with a built-in profiler called the
    JavaScript Profiler, which helps to take your site to the next level by improving
    its performance.
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Internet Explorer调试工具附带一个内置分析器，名为JavaScript分析器，通过提高性能帮助您的网站达到一个新的水平。
- en: In general, the profiler gives you data on the amount of time spent in each
    of your site's JavaScript methods and even built-in JavaScript functions. Here's
    how you can use this feature.
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通常，分析器会为您提供您网站的JavaScript方法以及内置JavaScript函数中花费的时间数据。这就是如何使用这个功能。
- en: Using the sample example source code in your browser, open the **Develop** tool
    and click on the **Profile** tab. Then click on **Start Profiling**, to begin
    a session.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用浏览器中的示例源代码，打开**开发**工具并点击**分析**标签。然后点击**开始分析**，以开始一个会话。
- en: Go to your browser, and enter some sample values. For instance, I entered **5**
    and **3**. Once you have entered the sample values, go to your debugging window
    and click on **Stop Profiling**. A screen similar to the one shown in the following
    screenshot will be displayed:![Time for action—more Debugging JavaScript by using
    the IE8 developer tool](img/0004_07_06.jpg)
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的浏览器，输入一些示例值。例如，我输入了**5** 和 **3**。输入示例值后，转到您的调试窗口并点击**停止分析**。将显示以下屏幕截图的类似屏幕：![行动时间—使用IE8开发者工具进行更多JavaScript调试](img/0004_07_06.jpg)
- en: Notice that the Jscript Profiler includes the time spent on each of the functions
    (the name of each function is also given). The number of times that each function
    is being used is also given, as shown in the Count column. You may have noticed
    that the time taken for each of our functions is 0.00; this is because our example
    program is relatively small, so the time required is close to zero.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请注意，Jscript Profiler包括每个函数花费的时间（每个函数的名称也给出）。每个函数的使用次数也给出，如计数栏所示。您可能注意到我们每个函数的时间都是0.00；这是因为我们的示例程序相对较小，所以所需时间接近零。
- en: What just happened?
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: We have just covered Internet Explorer's developer tool, which helps us to perform
    debugging tasks in a much streamlined manner.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚介绍了Internet Explorer的开发者工具，它帮助我们从更流畅的方式执行调试任务。
- en: In case want to know what the difference between debugging manually and using
    a debugging tool is, I can safely tell you from experience that the amount of
    time saved by using a debugging tool alone is a good enough reason for us to use
    debugging tools.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 以防你想知道手动调试与使用调试工具之间的区别，我可以根据经验 safely tell you that the amount of time saved
    by using a debugging tool alone is a good enough reason for us to use debugging
    tools.
- en: You may understand that there are various quirks involved when developing for
    Internet Explorer; using its built-in debugging tools will help you to figure
    out these quirks in a more efficient manner.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能知道，在为Internet Explorer开发时会有各种怪癖；使用其内置的调试工具可以帮助你更有效地找出这些怪癖。
- en: With that in mind, let us move on to the next tool.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 带着这个想法，让我们继续介绍下一个工具。
- en: Safari or Google Chrome Web Inspector and JavaScript Debugger
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Safari或Google Chrome网络检查器和JavaScript调试器
- en: In this section, we will learn about the JavaScript debugger used in Safari
    and Google Chrome. Both browsers have similar code base, but have subtle differences,
    so let us start by learning about the differences between Safari and Google Chrome.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习Safari和Google Chrome中使用的JavaScript调试器。尽管两者有相似的代码基础，但存在微妙的差异，因此让我们先了解Safari和Google
    Chrome之间的区别。
- en: Differences between Safari and Google Chrome
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Safari与Google Chrome之间的差异
- en: If you are an Apple fan, you will no doubt feel that Safari is perhaps the best
    browser on planet Earth. Nonetheless, both Google Chrome and Safari have their
    roots in an open source project called WebKit.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是苹果粉丝，你无疑会认为Safari可能是地球上最好的浏览器。然而，Google Chrome和Safari都源自一个名为WebKit的开源项目。
- en: Safari and Google Chrome use a different JavaScript Engine. Since **Safari 4.0**,
    Safari has used a new JavaScript engine called SquirrelFish. Google Chrome uses
    the V8 JavaScript Engine.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Safari和Google Chrome使用不同的JavaScript引擎。从**Safari 4.0**开始，Safari使用了一种名为SquirrelFish的新JavaScript引擎。Google
    Chrome使用V8 JavaScript引擎。
- en: However, in terms of JavaScript debugging, the two are almost identical when
    we are using the built-in debugger provided by Google Chrome and Safari; even
    the interface is similar.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在使用Google Chrome和Safari提供的内置调试器进行JavaScript调试时，两者几乎完全相同，甚至界面也很相似。
- en: In the following sections, I'll be using Chrome to explain the examples.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我将使用Chrome来解释示例。
- en: Debugging using Chrome
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Chrome中的调试
- en: For Google Chrome, there is no need to download any external tools in order
    for us to perform debugging tasks. The debugging tools are delivered right out
    the box with the browser itself. So now, we will see how we can start our debugging
    session, using `sample.html`.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Google Chrome，我们无需下载任何外部工具即可执行调试任务。调试工具随浏览器本身一起提供。所以现在，我们将看到如何使用`sample.html`开始我们的调试会话。
- en: 'Opening and Enabling: We''ll start by opening and enabling debugging in Chrome.
    There are basically two tools in Google Chrome that you can use to help you to
    perform debugging tasks for your web applications: the web inspector and the javascript
    debugger.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 打开和启用：我们首先需要在Chrome中打开和启用调试。在Google Chrome中，您可以使用两个工具来帮助您为Web应用程序执行调试任务：网络检查器和JavaScript调试器。
- en: 'Web Inspector: Google Chrome''s Web Inspector''s predominant use is for inspecting
    your HTML and CSS elements. To use Web Inspector, right-click on any component
    on a web page to launch the Web Inspector. You''ll be able to see the elements
    and resources associated with the component on which you clicked, including a
    hierarchy view of the DOM and a JavaScript console. To use the Web Inspector,
    open `example.html` in Google Chrome. Move your mouse to the side bar column that
    says **Column 2**. Right-click on **Column 2** and you will see a pop-up menu.
    Select **Inspect Element**. A new window is opened. This is the Web Inspector.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 网络检查器：谷歌浏览器的网络检查器主要用于检查您的HTML和CSS元素。要使用网络检查器，只需在网页上的任何组件上右键单击即可启动网络检查器。您将能够看到您点击的组件的相关元素和资源，包括DOM的层次视图和一个javascript控制台。要使用网络检查器，请在谷歌浏览器中打开`example.html`。将鼠标移至侧边栏上写着**列2**的地方。在**列2**上右键单击，您将看到一个弹出菜单。选择**检查元素**。一个新的窗口被打开。这就是网络检查器。
- en: Now we'll move on to the JavaScript debugger.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将进入javascript调试器。
- en: 'JavaScript Debugger: To use Chrome''s JavaScript Debugger, select the **Page
    menu** icon, which can be found on the right-hand side of the **URL** input field,
    and then go to **Developer** | **Debug JavaScript Console**. You can also press
    *Ctrl* + *Shift* + *J* to launch JavaScript Debugger. If you are using Safari,
    you will have to first enable the developer menu by clicking on the **Display
    Settings** icon that is found on the right-hand side of the **Page** icon, select
    **Preference**, and then go to **Advanced**. On this screen, enable the option
    **Show Develop menu in menu bar**. Then you can access this menu bar by clicking
    on the **Page** icon and going to **Develop** and selecting **Start Debugging
    JavaScript**. The interface is almost identical as to what we see in Google Chrome.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: javascript调试器：要使用谷歌浏览器的javascript调试器，选择**页面菜单**图标，该图标位于**URL**输入字段的右侧，然后单击**开发者**
    | **调试javascript控制台**。你也可以通过按下*Ctrl* + *Shift* + *J* 来启动javascript调试器。如果您使用的是Safari，您需要首先通过点击位于**页面**图标右侧的**显示设置**图标来启用开发者菜单，选择**偏好设置**，然后单击**高级**。在此屏幕上，启用**在菜单栏中显示开发菜单**选项。然后，您可以通过点击**页面**图标并选择**开发者**和**开始调试javascript**来访问这个菜单栏。这个界面与我们在谷歌浏览器中看到的基本相同。
- en: Notice that by opening the JavaScript Debugger, you will be opening up the same
    window that you saw in the Web Inspector. However, the default tab is now **Scripts**.
    In this tab, you can to view the source code of our example mentioned in the previous
    subsection.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，打开javascript调试器后，您将打开与网络检查器中看到的相同的窗口。然而，现在的默认标签页是**脚本**。在这个标签页中，您可以查看前一小节中提到的我们例子的源代码。
- en: This is the main screen that we will be using to perform our debugging tasks.
    In the following sessions, we will start to get our hands a little dirty by doing
    some basic debugging.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们将要用来执行我们的调试任务的主屏幕。在接下来的会话中，我们将开始做一些基本的调试，让我们的手指稍微脏一些。
- en: Most of the tasks and actions that you are going in order to perform should
    be conceptually similar if you have gone through our debugging session on using
    the Internet Explorer developer tools.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经完成了我们在使用Internet Explorer开发者工具的调试会话，您将要执行的大部分任务和行动在概念上应该是相似的。
- en: We have just explored the basic actions of opening and starting the Web Inspector
    and the JavaScript Debugger. Let us now go through a brief introduction to the
    user interface, in order to get you up to speed.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚探索了打开和开始网络检查器和javascript调试器的基本操作。现在让我们简要介绍一下用户界面，以便让您跟上进度。
- en: A brief introduction to the user interface
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户界面的简要介绍
- en: 'Here''s a brief explanation of where you can find the key features in Google
    Chrome''s debugging tool as shown in the following screenshot:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对您如何在谷歌浏览器调试工具中找到关键功能的简要说明，如图所示：
- en: '![A brief introduction to the user interface](img/0004_07_22.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![用户界面的简要介绍](img/0004_07_22.jpg)'
- en: 'Elements: The **Elements** tab shows you the source code for the script or
    web page that you are currently displaying. When you click on the **Elements**
    icon, you will get the related tabs (as shown on the right-hand side of the previous
    screenshot), such as **Computed Style**.'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 元素：**元素**标签页显示您当前正在显示的脚本或网页的源代码。当你点击**元素**图标时，你会得到一些相关标签页（如前一个屏幕快照中所示的**计算样式**）。
- en: 'Scripts: The **Scripts** tab is where you will perform your JavaScript debugging
    tasks. When you click on the **Scripts** icon, you will get a list of related
    features for debugging, such as **Watch Expressions, Call Stack, Scope Variables**
    and **Break**.'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 脚本：**脚本**标签是你将执行你的JavaScript调试任务的地方。当你点击**脚本**图标时，你会得到一个与调试相关的功能的列表，比如**监视表达式、调用栈、作用域变量**和**断点**。
- en: 'Profiles: The **Profiles** tab shows the profiling data of your web page, should
    you choose to perform profiling.'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置文件：**配置文件**标签显示了你选择进行配置时网页的配置数据。
- en: Time for action—debugging with Chrome
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间—使用Chrome进行调试
- en: We'll now learn how to use the console and make use of breakpoints in order
    to simplify our debugging session. We'll start with the console.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将学习如何使用控制台并利用断点来简化我们的调试会话。我们从控制台开始。
- en: The console basically shows what you have done within a debugging session. We
    first see how we can access the console.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 控制台基本上显示了你在调试会话中做了什么。我们首先看到如何访问控制台。
- en: 'Start off by opening the file `sample.html` in your Google Chrome browser,
    if you have not done so already. Once you have done that, perform the following
    steps in order to show the console:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在你的Google Chrome浏览器中打开`sample.html`文件，如果你还没有这么做的话。一旦你完成了这个，按照以下步骤进行操作，以显示控制台：
- en: Open your JavaScript debugger by selecting the **Page menu** icon ![Time for
    action—debugging with Chrome](img/0004_07_07.jpg) which can be found on the right-hand
    side of the **URL** input field, and then go to **Developer** | **Debug JavaScript**.
    You can also press *Ctrl* + *Shift* + *J* to launch JavaScript Debugger.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的JavaScript调试器，通过选择**页面菜单**图标 ![行动时间—使用Chrome进行调试](img/0004_07_07.jpg)，该图标可以在**URL**输入字段的右侧找到，然后前往**开发者**
    | **调试JavaScript**。你也可以按*Ctrl* + *Shift* + *J* 启动JavaScript调试器。
- en: Once you have completed step 4, click on the console icon, which can be found
    at the bottom of the JavaScript debugger. Once you are done, you will see a screen
    similar to the example shown in the following screenshot:![Time for action—debugging
    with Chrome](img/0004_07_08.jpg)
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成第4步后，点击控制台图标，该图标可以在JavaScript调试器的底部找到。完成后，你会看到一个类似于以下屏幕截图的屏幕：![行动时间—使用Chrome进行调试](img/0004_07_08.jpg)
- en: Now that we have opened the console, we move on to the most commonly-used features
    of the debugger. Along the way, you will also see how the console logs our actions.
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在我们已经打开了控制台，我们将继续学习调试器的最常用功能。在这个过程中，你也将看到控制台如何记录我们的行动。
- en: We'll now move on to breakpoints by learning how to set them.
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们现在将继续学习如何设置断点。
- en: As noted earlier, setting breakpoints is an important part of the debugging
    process. So we will start off our actual debugging process by setting a breakpoint.
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如前所述，设置断点是调试过程的重要部分。所以我们实际调试过程的起点就是设置一个断点。
- en: With `sample.html` opened in Google Chrome, start your debugger and make sure
    that you are in the **Scripts** tab. You can set a breakpoint by clicking on the
    line number at which we want to set our breakpoint. Let use try going to the line
    that contains `buildContent(answerB, "minus")`; and click on the line number.
    You will see a screen similar to the example shown in the following screenshot:![Time
    for action—debugging with Chrome](img/0004_07_09.jpg)
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Google Chrome中打开`sample.html`，开始你的调试器，并确保你处于**脚本**标签。你可以通过点击我们想要设置断点的行号来设置断点。让我们尝试点击包含`buildContent(answerB,
    "minus")`的行；然后点击行号。你会看到一个类似于以下屏幕截图的屏幕：![行动时间—使用Chrome进行调试](img/0004_07_09.jpg)
- en: Notice that **line 130** now has a blue arrow (highlighted line), and over to
    the right of the source code panel, you will see the Breakpoint panel. This now
    contains the breakpoint, which we have just set, within it.
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意现在**第130行**有一个蓝色箭头（突出显示的行），在源代码面板的右侧，你会看到断点面板。现在它包含了我们刚刚设置的断点。
- en: Run the example and enter some values into the input fields in your browser.
    I want you to enter **4** in the first input field and **3** in the second input
    field. Then click on **Submit**. You will see that the dynamic content will not
    be created in the black square on the right. This is because the code has stopped
    at `buildContent(answerB, "minus")`;.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行示例，在浏览器中输入一些值到输入字段中。我希望你在第一个输入字段中输入**4**，在第二个输入字段中输入**3**。然后点击**提交**。你会看到动态内容不会在右边的黑色正方形中创建。这是因为代码已经停止在`buildContent(answerB,
    "minus")`；.
- en: Now go back to your debugger, and you will see the next screenshot on the right-hand
    side of your source code, similar to the example shown below:![Time for action—debugging
    with Chrome](img/0004_07_10.jpg)
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在回到你的调试器，你会看到你的源代码右侧下一个屏幕截图，类似于下面的示例：![行动时间—使用Chrome进行调试](img/0004_07_10.jpg)
- en: You will see that **Call Stack**, and **Scope variables** are now being populated
    with values, while Watch Expressions is not. We will cover these in detail in
    the next few paragraphs. But for now, we first start off with **Call Stack** and
    **Scope Variables**.
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你会看到**调用栈**和**作用域变量**现在正在用值填充，而监视表达式没有。我们将在接下来的几段中详细介绍这些内容。但现在，我们首先从**调用栈**和**作用域变量**开始。
- en: As shown in the previous screenshot, **Call Stack** and **Scope Variables**
    are now populated with values when we execute the program. In general, **Call
    Stack** contains the sequence of functions that are being executed, and **Scope
    Variables** shows the values of the variables that are available until a breakpoint
    or end of execution.
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 正如上一个屏幕截图所示，当我们执行程序时，**调用栈**和**作用域变量**现在正在用值填充。一般来说，**调用栈**包含了正在执行的函数的序列，而**作用域变量**显示了可用直到断点或执行结束的变量的值。
- en: 'Here''s what happens when we click on the **Submit** button: the first function
    that is executed is `formSubmit()`, and within this function, `var answerA`, `var
    answerB`, `var answerC`, and `var answerD` are calculated. This is how the **Scope
    Variables** get populated with our values.'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当我们点击**提交**按钮时，会发生以下情况：首先执行的是`formSubmit()`函数，在这个函数内部，计算了`var answerA`、`var
    answerB`、`var answerC`和`var answerD`。这就是**作用域变量**如何用我们的值进行填充的。
- en: In general, that is how **Call Stack** and **Scope Variables** work in Google
    Chrome. Now, let us focus on a feature that has been lingering in our minds, **Watch
    Expression**.
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通常，这就是Google Chrome中**调用栈**和**作用域变量**的工作方式。现在，让我们关注一下我们心中一直存在的问题，**监视表达式**。
- en: 'Before we explain what **Watch Expression** is, it is best that we see it in
    action, first. Going back to the previous screenshot, you will notice that **Watch
    Expression** is not populated at this point of time. We''ll now try to populate
    Watch Expression by performing the following steps:'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在解释**监视表达式**之前，最好我们先看看它如何行动。回到上一个屏幕截图，你会注意到此时**监视表达式**还没有被填充。我们现在尝试通过执行以下步骤来填充监视表达式：
- en: Refresh your browser and go back to your debugger.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 刷新你的浏览器，回到你的调试器。
- en: 'In the **Watch Expression** panel, click on **Add**, and enter the following:
    `document.sampleform.firstnumber.value` and `document.getElementById("dynamic")`.'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**监视表达式**面板上，点击**添加**，并输入以下内容：`document.sampleform.firstnumber.value`和`document.getElementById("dynamic")`。
- en: Go back to your browser and enter **4** and **3** for the input values. Click
    on **Submit**. Assuming that you have not removed the breakpoint that we set in
    the previous subsection, you will see the information shown in the next screenshot
    in the **Watch Expression** panel:![Time for action—debugging with Chrome](img/0004_07_11.jpg)
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 回到你的浏览器，输入**4**和**3**作为输入值。点击**提交**。假设你没有在上一个部分中移除我们设置的断点，你将在**监视表达式**面板上看到下一个屏幕截图中的信息：![行动时间—使用Chrome进行调试](img/0004_07_11.jpg)
- en: '**Watch Expression** is now populated. `document.sampleform.firstnumber.value`
    and `document.getElementById("dynamic")` are lines of code copied from our JavaScript
    program. If you were to trace the code, you would notice that `document.sampleform.firstnumber.value`
    is used to derive the value of the first input field, and `document.getElementById("dynamic")`
    is used to refer to the `div` element.'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**监视表达式**现在被填充了。`document.sampleform.firstnumber.value`和`document.getElementById("dynamic")`是从我们的JavaScript程序中复制的代码行。如果你追踪代码，你会注意到`document.sampleform.firstnumber.value`用于推导第一个输入字段的值，而`document.getElementById("dynamic")`用于引用`div`元素。'
- en: Up to this point, you will have understood that **Watch Expression** is useful
    for checking out expressions. All you have to do is add the expression that you
    want to see, and, after executing the program, you will see what that expression
    means, refers to, or what current values it has. This allows you to watch the
    expressions update as the program executes. You do not have to complete the program
    to see the value of the variables.
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 截至目前，你已经理解了**监视表达式**用于检查表达式。你只需要添加你想要看到的表达式，在执行程序后，你将看到该表达式的意思、指向的内容，或者它当前的值。这允许你在程序执行时监视表达式的更新。你不需要完成程序就能看到变量的值。
- en: Now it's time to move on to the Continue, Step In, Step Over, and Step Out operations
    in the debugging window.
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在该转到调试窗口中的继续（Continue）、步进（Step In）、步过（Step Over）和步出（Step Out）操作了。
- en: 'The concepts here are pretty similar to what we have seen in Internet Explorer
    developer tools. In case you are wondering where the buttons are for executing
    these operations, you can find them above the **Watch Expression** panel. Here
    are the related concepts for each of the operation:'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里的概念与我们之前在 Internet Explorer 开发者工具中看到的内容非常相似。如果你想知道执行这些操作的按钮在哪里，你可以发现在**观察表达式（Watch
    Expression）**面板上方。以下是每个操作的相关概念：
- en: 'Step In: This traces the code as the code executes. Assuming that you are still
    at our example, you can click on the icon with an arrow pointing downwards. You
    will see that you are effectively tracing the code. As you continue to click on
    **Step In**, you will see the values in **Scope Variables** and **Call Stack**
    change. This is because at different points of the code there will be different
    values for various variables or expressions.'
  id: totrans-155
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 步进（Step In）：这会在代码执行时跟踪代码。假设你仍然在我们的示例中，你可以点击带有向下箭头的图标。你会看到你实际上正在跟踪代码。继续点击**步进（Step
    In）**，你会看到**作用域变量（Scope Variables）**和**调用栈（Call Stack）**中的值发生变化。这是因为代码的不同点会有各种变量或表达式的不同值。
- en: 'Step Out: This simply moves to the next line of code without jumping into other
    functions, similarly to how Step In works.'
  id: totrans-156
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 步出（Step Out）：这仅仅是移动到代码的下一行，而不跳入其他函数，与步进（Step In）类似。
- en: 'Step Over: This simply moves to the next line of code.'
  id: totrans-157
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 步过（Step Over）：这仅仅是移动到代码的下一行。
- en: 'In this last subsection, we will focus on how we can pause on exceptions. In
    general what this means is that the program will halt at the line where a problem
    is encountered. Here''s what we will do to see it in action:'
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在本节最后，我们将重点介绍如何暂停在异常处。这意味着程序将在遇到问题的那行停止。我们将做什么来看它的实际作用：
- en: Open `sample.html` in your editor. Search for the line that says `buildContent
    (noSuchThing, "add")`; and uncomment it. Save the file and open it in Google Chrome.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`sample.html`文件，在编辑器中搜索`buildContent (noSuchThing, "add")`这一行；取消注释它。保存文件并在
    Google Chrome 中打开。
- en: Open the **debugger**. Click on the button with a Pause sign ![Time for action—debugging
    with Chrome](img/0004_07_25.jpg) which can be found to the right of the **Show
    Console** button. This will cause the debugger to halt execution when errors are
    encountered.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**调试器**。点击带有暂停标志的按钮 ![行动时间—使用Chrome进行调试](img/0004_07_25.jpg)，该按钮位于**显示控制台（Show
    Console）**按钮的右侧。这将在遇到错误时使调试器停止执行。
- en: As usual, enter some values for the input fields. Click on **Submit**. Once
    you have done so, go back to your debugger, and you will see the information shown
    in the following screenshot:![Time for action—debugging with Chrome](img/0004_07_12.jpg)
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 像往常一样，为输入字段输入一些值。点击**提交**。完成后，回到你的调试器，你会看到以下屏幕截图中的信息：![行动时间—使用Chrome进行调试](img/0004_07_12.jpg)
- en: In general, this is the kind of visual message that you can get if you enable
    the pause on exception feature.
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你启用了暂停异常功能，通常你会得到这种视觉信息。
- en: What just happened?
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: We have covered the basics of using Google Chrome. If you have followed the
    previous tutorial, you will have learned how to use the Console, setting, stepping
    in, stepping out and over a breakpoint, pausing on exceptions, and watching the
    variables.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经介绍了使用 Google Chrome 的基础知识。如果你遵循了之前的教程，你将学会如何使用控制台、设置、步进、步出和越过断点、在异常时暂停以及观察变量。
- en: By using a mix of the above features, you will be able to quickly sniff out
    and spot unintended JavaScript errors. You can even trace how your JavaScript
    code is working as it executes.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用上述功能的组合，你将能够快速嗅出并发现不意的 JavaScript 错误。你甚至可以跟踪你的 JavaScript 代码是如何执行的。
- en: Over the next few sections, you will begin to notice that most of the tools
    have very similar features, although some may have different terms for the same
    feature.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几节中，你将开始注意到大多数工具都有非常相似的功能，尽管有些可能有不同术语表示相同的功能。
- en: Now it's time to move on to the other tool, the Opera JavaScript Debugger.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 现在该转向另一个工具，即 Opera JavaScript 调试器了。
- en: Opera JavaScript Debugger (Dragonfly)
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Opera JavaScript 调试器（Dragonfly）
- en: Opera's JavaScript Debugger is called Dragonfly. In order to use it, all you
    need to do is download the latest version of Opera; Dragonfly is included in the
    latest version of Opera already.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: Opera 的 JavaScript 调试器被称为 Dragonfly。为了使用它，你所需要做的就是下载最新版本的 Opera；Dragonfly 已经包含在最新版本的
    Opera 中。
- en: Now that you have installed the necessary software, it is time for us to perform
    debugging tasks.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 既然你已经安装了必要的软件，是时候进行调试任务了。
- en: Using Dragonfly
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Dragonfly
- en: We'll first start with our `example.html` file. Open this file in Opera browser.
    Now we will see how we can start Dragonfly.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先从我们的`example.html`文件开始。在Opera浏览器中打开这个文件。现在我们将了解如何启动Dragonfly。
- en: Starting Dragonfly
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启动Dragonfly
- en: To access Dragonfly, go to menu option **Tools**. Select **Advanced**, and then
    click on **Developer Tools**. Once you have done that, Dragonfly will appear.
    As usual, we'll start with a brief introduction to the user interface of the tool.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问Dragonfly，请转到菜单选项**工具**。选择**高级**，然后点击**开发者工具**。一旦你这样做，Dragonfly就会出现。像往常一样，我们将从工具的用户界面简介开始。
- en: Brief Introduction to the User Interface
  id: totrans-175
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 用户界面简介
- en: 'Here''s a brief overview of the most important functions that we will be using,
    as shown in the next screenshot:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们将使用的一些最重要功能的简要概述，如图所示：
- en: '![Brief Introduction to the User Interface](img/0004_07_23.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![用户界面简介](img/0004_07_23.jpg)'
- en: '**DOM:** This tab is used for checking the HTML and CSS elements'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**DOM:** 这个标签页用于检查HTML和CSS元素'
- en: '**Scripts:** This tab is used when we are debugging JavaScript'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**脚本:** 当我们调试JavaScript时使用此标签页'
- en: '**Error Console:** This tab shows the various error messages when we are debugging
    JavaScript.'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**错误控制台:** 这个标签页在调试JavaScript时显示各种错误信息。'
- en: We'll now start with debugging `example.html`.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在开始调试`example.html`。
- en: Time for action—debugging with Opera Dragonfly
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间—使用Opera Dragonfly进行调试
- en: In this section, we'll learn how to use the debugging facilities of the Dragonfly.
    We'll start by setting breakpoints.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何使用Dragonfly的调试功能。我们将从设置断点开始。
- en: 'Here''s how we can set a breakpoint in Dragonfly:'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这就是我们在Dragonfly中设置断点的方法：
- en: With `sample.html` opened in Opera, start Dragonfly and click on the **Scripts**
    tabbed page. You can set a breakpoint by clicking on the line number at which
    we want to set our breakpoint. Let us try going to the line that contains `buildContent(answerB,
    "minus")`; and then clicking on the line number.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Opera中打开`sample.html`，启动Dragonfly，然后点击**脚本**标签页。您可以通过点击我们想要设置断点的行号来设置断点。让我们尝试转到包含`buildContent(answerB,
    "minus")`;的行，然后点击行号。
- en: Go to your browser and execute `example.html`. Enter **5** and **3** as the
    inputs. Click on **Submit**. As usual, you will not see any content being created
    dynamically. The program's breakpoint is at contains `buildContent(answerB, "minus")`;.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的浏览器，执行`example.html`。输入**5**和**3**作为输入值。点击**提交**按钮。像往常一样，你不会看到任何动态生成的内容。程序的断点在包含`buildContent(answerB,
    "minus")`;的位置。
- en: Now go back to Dragonfly, and you will notice that the panels for **Call Stack**
    and **Inspection** are now populated. You should see similar values to those shown
    in the next screenshot if you enter the same values as I did:![Time for action—debugging
    with Opera Dragonfly](img/0004_07_14.jpg)
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在回到龙fly，你会注意到**调用堆栈**和**检查**面板现在已填充。如果你输入与我相同的值，你应该会看到与下一个截图相似的值：![行动时间—使用Opera
    Dragonfly进行调试](img/0004_07_14.jpg)
- en: The values shown in **Inspection** and **Call Stack** are the values and functions
    that have been calculated and executed up to the breakpoint.
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在**检查**和**调用堆栈**中显示的值是在断点之前的计算和执行的值和函数。
- en: What just happened?
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: We have just used Dragonfly to set a breakpoint, and as we executed our JavaScript
    program, we have seen how Dragonfly's various fields get populated. We'll now
    go into detail with regards to each field.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚使用Dragonfly设置了一个断点，当我们执行我们的JavaScript程序时，我们看到了Dragonfly的各种字段是如何填充的。现在我们将详细介绍每个字段。
- en: Inspection and Call Stack
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查和调用堆栈
- en: As shown in the previous screenshot, **Call Stack** and **Inspection** are populated
    with values when we execute the program. In general, **Call Stack** shows the
    nature of the runtime environment at the time of a specific function call—what
    has been called, and in what order. The inspection panel lists all of the property
    values and others for the current call. Stack frames are specific parts of the
    **Call Stack. Inspection** is conceptually similar to the **Scope Variables**
    seen in Google Chrome.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一个截图所示，当我们执行程序时，**调用堆栈**和**检查**会填充值。一般来说，**调用堆栈**显示特定函数调用时的运行时环境性质—已经调用了什么，以及以什么顺序调用。检查面板列出了当前调用的所有属性值及其他信息。堆栈帧是**调用堆栈**中的特定部分。检查的概念与在Google
    Chrome中看到的**作用域变量**相似。
- en: Thread Log
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 线程日志
- en: The **Thread Log** panel shows the details of the different threads running
    through the script that you are currently debugging.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 线程日志：这个面板显示了穿过你当前正在调试的脚本的各个线程的详细信息。
- en: We'll now move on into greater details about the functionalities of Dragonfly.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将继续深入了解龙翼的功能。
- en: Continue, Step Into, Step Over, Step Out, and Stop at Error
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 继续、步入、单步跳过、单步跳出和错误停止
- en: 'We can also perform the usual Continue, Step Into, Step Over, and Step Out
    tasks while debugging our code. Here''s a screenshot that shows us where to find
    the previously-mentioned functions:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在调试代码时执行通常的继续、步入、单步跳过和单步跳出的任务。下面是一个截图，显示我们如何找到前面提到的功能：
- en: '![Continue, Step Into, Step Over, Step Out, and Stop at Error](img/0004_07_15.jpg)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![继续、步入、单步跳过、单步跳出和错误停止](img/0004_07_15.jpg)'
- en: 'Continue: This continues the currently-selected script after it has stopped
    at a breakpoint. This will continue to the next breakpoint, if any, or it will
    continue to the end of the script.'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续：在停止在断点后继续当前选中的脚本。如果有的话，这将继续到下一个断点，或者它将继续到脚本的末尾。
- en: 'Step Into: This allows you to step into the next function in the stack, after
    the current function within which the breakpoint is contained. It effectively
    traces the code as the code executes. Assuming that you are still at our example,
    you can click on the **Step Into** icon with an arrow pointing downwards. You
    will see that you are effectively tracing the code. As you continue to click on
    **Step In**, you will see the values in **Inspection** and **Call Stack** change.
    This is because at different points of the code there will be different values
    for various variables or expressions.'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 步入：这允许你在包含断点的当前函数之后的下一个函数中步入。它有效地追踪代码的执行。假设你仍然在我们的示例中，你可以点击带有向下箭头的**步入**图标。你会发现你实际上正在追踪代码。继续点击**步入**，你会看到**检查**和**调用栈**中的值发生变化。这是因为代码的不同点会有各种变量或表达式的不同值。
- en: 'Step over: This allows you to step to the next line after the line on which
    the breakpoint is set—you can use this multiple times to follow the execution
    path of the script.'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单步跳过：这允许你在设置断点的行之后跳到下一行——你可以多次使用这个功能来跟随脚本的执行路径。
- en: 'Step out: This causes you to step out of the function.'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单步跳出：这将使你跳出函数。
- en: 'Stop at error: This allows you to stop executing your script at the point where
    an error is encountered. To see this in action, open the file `example.html` in
    your editor, and search for the line that says `buildContent(noSuchThing, "add")`;
    and uncomment it. Save the file and then open it again, using Opera. Go to Dragonfly
    and click on the icon. Now execute your program in Opera and enter some sample
    values. Once you are done, you will see the following screenshot in Dragonfly:![Continue,
    Step Into, Step Over, Step Out, and Stop at Error](img/0004_07_16.jpg)'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 错误停止：这允许你在遇到错误时停止执行你的脚本。为了看到这个功能，请在你的编辑器中打开`example.html`文件，并查找写着`buildContent(noSuchThing,
    "add")`的行；然后取消注释。保存文件，然后再次使用Opera打开它。打开龙翼，点击图标。现在在Opera中执行你的程序并输入一些示例值。完成后，你将在龙翼中看到以下截图：![继续、步入、单步跳过、单步跳出和错误停止](img/0004_07_16.jpg)
- en: Notice that at line **46** there is a black arrow pointing to the right. This
    means that there is an error in this line of code.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在**46**行有一个指向右边的黑色箭头。这意味着这行代码有一个错误。
- en: Before we end of the section on DragonFly, we'll take a look at one more important
    feature the settings feature.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们结束龙翼节段之前，我们再来看一个重要的功能：设置功能。
- en: Settings
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置
- en: Opera's Dragonfly has a nifty feature that allows us to create different settings
    for our debugging tasks. There is a whole list of these settings, so I will not
    go through all of them. But I will focus on those that are useful for your debugging
    sessions.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: OPERA的龙翼有一个让我们为我们的调试任务创建不同设置的巧妙功能。这一系列设置很多，所以我不会全部介绍。但我将重点介绍那些对你的调试会话有用的设置。
- en: 'Scripts: In this panel, enabling reload documents automatically when selecting
    window is a huge time saver when you have multiple JavaScript files to debug,
    because it will help you to automatically reload the documents.'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 脚本：在这个面板中，选中窗口后自动重新加载文档是一个巨大的时间节省功能，尤其是当你有多个JavaScript文件需要调试时，因为它将帮助你自动重新加载文档。
- en: 'Console: This panel allows you to control what information you wish to see
    during your debugging session. From XML to HTML, you can enable or disable messages
    in order to see the most important information.'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制台：此面板允许你在调试会话中控制你想看到的信息。从XML到HTML，你可以启用或禁用消息，以看到最重要的信息。
- en: With that, we'll end the section on Dragonfly and move on to Firefox and the
    Venkman Extension.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，我们将结束Dragonfly部分，继续学习Firefox和Venkman扩展。
- en: Firefox and the Venkman extension
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Firefox和Venkman扩展
- en: We know that Firefox has many plugins and tools, some of which are made for
    web development purposes. In this section, we will learn about the Venkman extension,
    which is Mozilla's JavaScript Debugger.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道Firefox有很多插件和工具，其中一些是专为网页开发而设计的。在本节中，我们将学习Mozilla的JavaScript调试器Venkman扩展。
- en: Using Firefox's Venkman extension
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Firefox的Venkman扩展
- en: We'll start off by obtaining the extension; we will assume that you have Firefox
    installed. In my case, I am using Firefox 3.6.3.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将先获得扩展；我们将假设您已经安装了Firefox。在我的情况下，我正在使用Firefox 3.6.3。
- en: Obtaining the Venkman JavaScript Debugger extension
  id: totrans-215
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获得Venkman JavaScript调试器扩展
- en: To obtain the Venkman JavaScript Debugger extension, go to [https://addons.mozilla.org/en-US/Firefox/addon/216/](http://https://addons.mozilla.org/en-US/Firefox/addon/216/)
    and click on **Add To Firefox**. Once it is installed, Firefox will prompt you
    to restart Firefox for the changes to take effect.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获得Venkman JavaScript调试器扩展，请前往[https://addons.mozilla.org/en-US/Firefox/addon/216/](http://https://addons.mozilla.org/en-US/Firefox/addon/216/)并点击**添加到Firefox**。安装后，Firefox将提示您重新启动Firefox以使更改生效。
- en: Opening Venkman
  id: totrans-217
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 打开Venkman
- en: To start debugging, let us open the file `example.html` in Firefox. Here, we
    can now start Venkman. Go to **Tools** and select **JavaScript Debugger**. If
    you are using older versions of Firefox, you can access it by going to **Tools**
    | **Web Development** | **JavaScript Debugger menu**.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始调试，让我们在Firefox中打开文件`example.html`。在这里，我们可以现在开始Venkman。点击**工具**并选择**JavaScript调试器**。如果你使用的是Firefox的旧版本，可以通过前往**工具**
    | **网页开发** | **JavaScript调试器菜单**来访问它。
- en: Now we'll start with a brief introduction to Venkman's user interface.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将对Venkman的用户界面进行简要介绍。
- en: A brief introduction to the user interface
  id: totrans-220
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用户界面的简要介绍
- en: 'The next screenshot shows the user interface of the Venkman extension:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 下一张截图显示了Venkman扩展的用户界面：
- en: '![A brief introduction to the user interface](img/0004_07_24.jpg)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
  zh: '![用户界面的简要介绍](img/0004_07_24.jpg)'
- en: 'Loaded Scripts: The **Loaded Scripts** panel shows a list of scripts that you
    may load for debugging. After you have loaded a script, you will see it in the
    **Source Code** panel.'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 已加载脚本：**已加载脚本**面板显示了您可以用于调试的脚本列表。加载脚本后，你将在**源代码**面板中看到它。
- en: 'Local Variables and Watches: The **Local Variables** panel shows the local
    variables that are available when you are performing debugging tasks. If you click
    on the **Watches** tab, you will see the **Watches** panel. You will be using
    this to enter the expressions that you want to watch.'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 局部变量和观察：**局部变量**面板显示在执行调试任务时可用的局部变量。如果您点击**观察**标签，您将看到**观察**面板。您将使用这个来输入您想要观察的表达式。
- en: 'Breakpoint and Call Stack: The **Breakpoint** panel allows you to add a list
    of breakpoints, and the **Call Stack** panel shows a list of functions or variables
    that are executed, in order.'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 断点和调用堆栈：**断点**面板允许您添加一系列断点，而**调用堆栈**面板按顺序显示执行的函数或变量。
- en: 'Source Code: The **Source Code** panel shows the source code that you are currently
    debugging.'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 源代码：**源代码**面板显示您当前正在调试的源代码。
- en: 'Interactive Session: The **Interactive Session** panel is the console for this
    debugger.'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 互动会话：**互动会话**面板是此调试器的控制台。
- en: 'We''ll now start debugging using the Venkman extension:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将使用Venkman扩展开始调试：
- en: Time for action—debugging using Firefox's Venkman extension
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 是时候行动了——使用Firefox的Venkman扩展进行调试
- en: 'We''ll start off by setting breakpoints, before we go into greater details:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将先设置断点，然后再详细说明：
- en: 'As with all debuggers, we can set a breakpoint by performing the following
    steps:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他所有调试器一样，我们可以通过以下步骤设置断点：
- en: Start by opening the file `example.html`, in Firefox.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在Firefox中打开文件`example.html`。
- en: Open the JavaScript debugger, and the debugger window will be shown.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开JavaScript调试器，调试器窗口将显示出来。
- en: When your see the debugger window, go to the **Load Scripts** panel and you
    will see the file `example.html` in it. Click on it and you will see the code
    being loaded in the **Source Code** panel.
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你看到调试器窗口时，转到**加载脚本**面板，你将在其中看到文件`example.html`。点击它，你将在**源代码**面板上看到代码被加载。
- en: 'To set a breakpoint, click on the line at which you want the breakpoint to
    be set. For instance, I have set it on line **130**, which contains the code:
    `buildContent(answer, "minus")`;. You should see something like the following
    screenshot:![Time for action—debugging using Firefox''s Venkman extension](img/0004_07_17.jpg)'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置断点时，点击你想要设置断点的行。例如，我在包含以下代码的行**130**上设置了断点：`buildContent(answer, "minus")`；你应该会看到类似以下截图的内容：![行动时刻—使用Firefox的Venkman扩展进行调试](img/0004_07_17.jpg)
- en: What just happened?
  id: totrans-236
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: The first thing to note is that there is a **white B** within a red rectangle,
    as shown in the previous screenshot. This indicates that a breakpoint has been
    set.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要注意的是，在之前的截图中，有一个**白色B**在一个红色矩形内。这表示已经设置了一个断点。
- en: In Venkman, there are times where you will see a **white F** within a yellow
    box; this means that Venkman could only set a Future Breakpoint. This happens
    when the line you select has no source code, or if the line of code has already
    been unloaded by the JavaScript engine (top level code is sometimes unloaded shortly
    after it completes execution).
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 在Venkman中，有时你会看到一个**白色F**在一个黄色盒子内；这表示Venkman只能设置一个未来的断点。当你的选择行没有源代码，或者如果该行代码已经被JavaScript引擎卸载（顶级代码有时在执行完成后不久就会被卸载）。
- en: A Future Breakpoint means that Venkman was unable to set a hard breakpoint now,
    but if the file is loaded later, and it has executable code at the selected line
    number, Venkman will automatically set a hard breakpoint.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 未来断点意味着Venkman现在无法设置一个硬断点，但如果文件稍后加载，并且在选择的行号有可执行代码，Venkman将自动设置一个硬断点。
- en: The second thing to note is the **Breakpoints** panel. This contains a list
    of all of the breakpoints that we have set in this debugging session.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 要关注的第二件事是**断点**面板。这个面板包含了我们在这个调试会话中设置的所有断点。
- en: Now, before we move on to the following subsections, I need you to enter some
    input for our example application by going to your browser. In my case I have
    entered **5** and **3** for the first and second input fields respectively. Once
    you have done that, click on **Submit**.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在我们将要进入以下小节之前，我需要你通过打开浏览器输入我们示例应用程序的输入。在我的案例中，我在第一个和第二个输入框中分别输入了**5**和**3**。完成输入后，点击**提交**。
- en: Again, you will notice that the panels that were originally empty are now populated
    with values. We will cover this in the following subsections.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，你会注意到原来空白的面板现在充满了值。我们将在以下小节中介绍这个。
- en: Breakpoints or Call Stack
  id: totrans-243
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 断点或调用栈
- en: We have briefly covered breakpoints in the previous subsection. If you look
    at the **Breakpoints** panel, you will notice that in that panel, there is another
    tab, to the right-hand side of the **Breakpoint** panel, called **Call Stack**.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一个小节中我们已经简要介绍了断点。如果你看看**断点**面板，你会注意到在那个面板的右侧，有一个名为**调用栈**的标签页。
- en: 'Click on **Call Stack** and you should see some data in this new panel. Assuming
    that you have entered the same input and the same breakpoint, you will see a screen
    similar to the example shown in the next screenshot:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**调用栈**，你应该在这个新面板中看到一些数据。假设你已经输入了相同的输入和同样的断点，你会看到一个与下一个截图示例相似的屏幕：
- en: '![Breakpoints or Call Stack](img/0004_07_18.jpg)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
  zh: '![断点或调用栈](img/0004_07_18.jpg)'
- en: In general, **Call Stack** shows the nature of the runtime environment at the
    time of a specific function call—what has been called, and in what order. In Venkman,
    it shows the name of the function, filename, line number and pc (program counter).
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，**调用栈**显示了在特定函数调用时的运行环境性质—调用什么，以及调用顺序。在Venkman中，它显示函数名、文件名、行号和pc（程序计数器）。
- en: Local Variables and Watches
  id: totrans-248
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 局部变量和监视器
- en: 'Let us now focus on **Local Variables** and **Watches**. The panels for **Local
    Variables** and **Watches** are located above the **Breakpoints** and **Call Stack**
    panels. And if you have been following my instructions up to this point with the
    exact same input, you should see the following in the **Local Variables** panel:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们关注**局部变量**和**监视器**。**局部变量**和**监视器**的面板位于**断点**和**调用栈**面板之上。如果你一直按照我的指示操作，并且输入完全相同的输入，你应在**局部变量**面板中看到以下内容：
- en: '![Local Variables and Watches](img/0004_07_19.jpg)'
  id: totrans-250
  prefs: []
  type: TYPE_IMG
  zh: '![本地变量和观察](img/0004_07_19.jpg)'
- en: The **Local Variables** panel simply shows the values of the variables that
    have values (due to code execution) up to a breakpoint, or to the end of the program,
    according to the order in which they are created or calculated.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '**本地变量** 面板简单地显示了具有值（由于代码执行）的变量的值，直到断点，或者程序结束，根据它们创建或计算的顺序。'
- en: 'The next panel that we want to talk about is the **Watches** panel. The **Watches**
    panel does the same thing as watch expressions, as we have done previously for
    other browsers. However, because we have not added anything for the **Watches**
    panel yet, let us take some action to see how the **Watches** panel works:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要讨论的下一个面板是 **Watches** 面板。**Watches** 面板的作用和我们之前为其他浏览器做的 watch 表达式一样。然而，因为我们还没有为
    **Watches** 面板添加任何内容，所以让我们采取一些行动来看看 **Watches** 面板是如何工作的：
- en: Time for action—more debugging with the Venkman extension
  id: totrans-253
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 是时候行动了——使用 Venkman 扩展进行更多调试
- en: 'In this section, we''ll cover more debugging features such as the Watch, Stop,
    Continue, Step Into, Step Over, Step Out, edge triggers and throw triggers. But
    first, let us perform the following steps, in order to see the Watch panel in
    action:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍更多的调试功能，比如观察、停止、继续、单步进入、单步跳过、单步退出、边缘触发和抛出触发。但首先，让我们执行以下步骤，以便看到 **Watches**
    面板的实际作用：
- en: Click on the **Watches** tab.
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **Watches** 标签。
- en: Right-click within the **Watches** panel, right-click and select **Add Watch**.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Watches** 面板内部右键点击，选择 **添加观察**。
- en: Enter `document.sampleform.firstnumber.value`.
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入 `document.sampleform.firstnumber.value`。
- en: Repeat steps 2 and 3, and this time enter `document.getElementById("dynamic")`.
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复步骤 2 和 3，这次输入 `document.getElementById("dynamic")`。
- en: 'Once you are done, you will see the output shown in the following screenshot:'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 完成后，你会看到以下屏幕截图的输出：
- en: '![Time for action—more debugging with the Venkman extension](img/0004_07_20.jpg)'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![是时候行动了——使用 Venkman 扩展进行更多调试](img/0004_07_20.jpg)'
- en: What the **Watches** panel does is allow us to add a list of expressions that
    we want to keep track of, and also shows us the value of the expression.
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**Watches** 面板的作用是允许我们添加一个表达式列表，以便我们跟踪这些表达式，并且还能显示这些表达式的值。'
- en: Now let's move on to the Stop and Continue features.
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在让我们来看看停止和继续功能。
- en: Venkman provides some useful functionality, which includes Stop and Continue.
    Stop basically stops at the next JavaScript statement, and Continue continues
    the code execution.
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Venkman 提供了一些有用的功能，包括停止和继续。停止功能基本上会在下一个 JavaScript 语句处停止，而继续功能则继续代码的执行。
- en: You can make Venkman stop at the next JavaScript statement.
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以让 Venkman 在下一行 JavaScript 语句处停止。
- en: Click on the large red **X** on the toolbar, or you can go to the menu and select
    **Debug** and then choose **Stop**.
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击工具栏上较大的红色 **X**，或者你可以去菜单选择 **调试**，然后选择 **停止**。
- en: There are times when no JavaScript is being executed. If this is the case, you
    will see an ellipsis (...) appear over the **X** in the toolbar, and the menu
    item will be checked. When the next line of JavaScript is encountered, the debugger
    will stop. You can cancel this by clicking on **X** or selecting **Stop** again.
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有时没有执行 JavaScript。如果出现这种情况，你会在工具栏上的 **X** 上看到省略号（...），菜单项会被勾选。当遇到下一行 JavaScript
    时，调试器将停止。你可以通过点击 **X** 或再次选择 **停止** 来取消这个操作。
- en: In addition to Stop and Continue, Venkman also provides the standard Step In,
    Step Over, and Step Out features.
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 除了停止和继续功能，Venkman 还提供了标准的单步进入、单步跳过和单步退出功能。
- en: 'Step In: This executes a single line of JavaScript, and then stops. You can
    try this by clicking on the icon that says **Step Into**. If you click on it multiple
    times, you will notice that the local variables change and you will get to see
    that the code is being executed as if you are tracing the code.'
  id: totrans-268
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单步执行：这会执行一行 JavaScript 代码，然后停止。你可以通过点击写着 **Step Into** 的图标来尝试这个功能。如果你多次点击它，你会注意到局部变量在变化，你将能够看到代码被执行的情况，就像你在追踪代码一样。
- en: 'Step Over: This is used to step over an impending function call, and return
    control to the debugger when the call returns. If you click on **Step Over**,
    you will see that new content is being created in your browser. For the file `example.html`,
    assuming that you click on **Step Over** from the breakpoint, you will see content
    being created from `buildContent(answer, "minus")`;.'
  id: totrans-269
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单步跳过：用于跳过即将到来的函数调用，并在调用返回时将控制权返回给调试器。如果你点击 **单步跳过**，你会发现新内容正在你的浏览器中创建。对于文件 `example.html`，假设你从断点点击
    **单步跳过**，你会看到内容是从 `buildContent(answer, "minus")` 创建的；。
- en: 'Step Out: This executes until the current function call exits.'
  id: totrans-270
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 步出：执行直到当前函数调用退出。
- en: We'll now see how we can make use of Error triggers and Throw triggers.
  id: totrans-271
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将看到如何使用错误触发器和抛出触发器。
- en: Error triggers is used to make Venkman stop at the next error, and Throw Triggers
    is used to make Venkman stop when the next exception is thrown.
  id: totrans-272
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 错误触发器用于让Venkman在下一个错误处停止，而抛出触发器用于让Venkman在下一个异常抛出时停止。
- en: 'To see it in action, we''ll perform the following actions:'
  id: totrans-273
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了看到它的实际效果，我们将执行以下操作：
- en: Open the file `example.html` in your editor and, once again, search for the
    line that says `buildContent(noSuchThing, "add")`; and uncomment it. Save the
    file and open it again, using Firefox.
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的编辑器中打开`example.html`文件，再次搜索到`buildContent(noSuchThing, "add")`这一行，并取消注释。保存文件后再次打开，使用Firefox。
- en: After you have opened the file in Firefox, open Venkman.
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Firefox中打开文件后，打开Venkman。
- en: Once you have opened up Venkman, go to **Debug** | **Error Trigger** and select
    **Stop for Errors**. Then, once again, go back to **Debug** | **Throw Trigger**
    and select **Stop for Errors**.
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你打开了Venkman，点击**调试**|**错误触发器**，选择**在错误处停止**。然后，再次点击**调试**|**抛出触发器**，选择**在错误处停止**。
- en: Go to your browser and enter any two numbers for the input fields—say **5**
    and **3** respectively. Click on **Submit**.
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的浏览器，为输入字段输入任意两个数字——比如说分别是**5**和**3**。点击**提交**。
- en: Return to Venkman and you will see that the line with `buildContent(noSuchThing,
    "add")`; is highlighted, and within the Interactive Session (or console) panel,
    you will see an error message that says **X Error. noSuchThing not defined**.
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回Venkman，你会发现`buildContent(noSuchThing, "add")`这一行被突出显示，在交互式会话（或控制台）面板中，你会看到一个错误信息，写着**X
    错误。noSuchThing未定义**。
- en: Now that we have seen how Venkman can be used to stop our program when errors
    are encountered, let us move on to its profiling feature.
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 既然我们已经看到了Venkman在遇到错误时如何停止我们的程序，现在让我们转到它的剖析功能。
- en: 'As we have mentioned in the previous chapters, profiling is used to measure
    execution times for your scripts. To enable profiling:'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 正如我们在前一章节中提到的，剖析是用来测量脚本的执行时间的。要启用剖析：
- en: Click on the **Profile** button in the toolbar. When profiling is enabled, you
    will see a green check mark on the toolbar button.
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击工具栏上的**剖析**按钮。当剖析被启用时，你会在工具栏按钮上看到一个绿色的勾选标记。
- en: Once you have Profiling enabled, go to your browser and enter some sample values.
    I'll stick to **5** and **3** again. Then click on **Submit**.
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你启用了剖析，打开你的浏览器并输入一些示例值。我还是用**5**和**3**吧。然后点击**提交**。
- en: Go back to Venkman, go to **File**, and select **Save Profile Data As**. I have
    included an example as to what we have just done, and saved it to `data.txt` file.
    You can open the file and see the contents of the profiling session. You can find
    the profiling data for the file `sample.html` by searching for `example.html`
    in the file `data.txt`.
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 回到Venkman，点击**文件**，选择**另存为配置数据**。我已经包含了一个例子，展示了我们刚刚做了什么，并将其保存为`data.txt`文件。你可以打开这个文件，查看剖析会话的内容。你可以在`data.txt`文件中通过搜索`example.html`来找到`sample.html`的剖析数据。
- en: When you are done, click on **Profile** again to stop collecting the data.
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成剖析后，点击**剖析**再次停止收集数据。
- en: While profiling is enabled, Venkman will collect call count, maximum call duration,
    minimum call duration, and total call duration, for every function called.
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在剖析被启用时，Venkman将为每个调用的函数收集调用次数、最大调用持续时间、最小调用持续时间和总调用持续时间。
- en: You can also clear the profile data for the selected scripts by using the **Clear
    Profile Data** menu item.
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你也可以使用**清除剖析数据**菜单项清除所选脚本的剖析数据。
- en: What just happened?
  id: totrans-287
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: We have gone through the various features of the Venkman extensions. Features
    like Stop, Continue, Step In, Step Out and Over of breakpoints shouldn't be unfamiliar
    to you by this stage, as they are conceptually similar to the tools that we introduced
    earlier.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经介绍了Venkman扩展的各种功能。像停止、继续、步进、步出和断点步进这些功能，在现阶段对你来说应该不再陌生，因为它们与我们之前介绍的工具概念上是相似的。
- en: So let us now move to the last and final tool, the Firebug extension.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 那么现在让我们转移到最后一个工具，Firebug扩展程序。
- en: Firefox and the Firebug extension
  id: totrans-290
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Firefox和Firebug扩展程序
- en: I personally think that the Firebug extension needs no further introduction.
    It is probably one of the most (if not most) popular debugging tools for Firefox
    in the market right now. Firebug is free and open source.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 我个人认为Firebug扩展无需进一步介绍。它可能是市场上最受欢迎的Firefox调试工具之一（如果不是最流行的话）。Firebug是免费和开源的。
- en: 'It has the following features:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 它具有以下功能：
- en: Inspection and editing HTML by pointing and clicking on your web page
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过在网页上点击和指向来检查和编辑HTML
- en: Debugging and profiling JavaScript
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试和分析JavaScript
- en: Quickly spotting JavaScript errors
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 快速发现JavaScript错误
- en: Logging JavaScript
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记录JavaScript
- en: Executing JavaScript on the fly
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行飞行的JavaScript
- en: 'Firebug is perhaps one of the best documented debugging tools on the Internet.
    So we''ll have a look at the URLs that you can visit in order to take advantage
    of this free, open source, and powerful debugging tool:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: Firebug或许是互联网上最好的文档化调试工具之一。所以我们将查看你可以访问的URL，以便利用这个免费、开源且强大的调试工具：
- en: 'To install Firebug, visit: [http://getFirebug.com](http://getFirebug.com)'
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要安装Firebug，请访问：[http://getFirebug.com](http://getFirebug.com)
- en: 'To see a complete list of FAQ, visit: [http://getFirebug.com/wiki/index.php/FAQ](http://getFirebug.com/wiki/index.php/FAQ)'
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要查看完整的常见问题解答列表，请访问：[http://getFirebug.com/wiki/index.php/FAQ](http://getFirebug.com/wiki/index.php/FAQ)
- en: 'To see a full list of tutorials, visit: [http://getFirebug.com/wiki/index.php/Main_Page](http://getFirebug.com/wiki/index.php/Main_Page).
    If you wish to learn more about each specific feature, look for **Panel** on the
    left-hand side of the web page.'
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要查看完整的教程列表，请访问：[http://getFirebug.com/wiki/index.php/Main_Page](http://getFirebug.com/wiki/index.php/Main_Page)。如果你希望了解更多关于每个特定功能的信息，请在网页的左侧寻找**面板**。
- en: Summary
  id: totrans-302
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We have finally reached the end of this chapter. We have covered specific tools
    for various browsers that can be used for our debugging tasks.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 我们终于到了本章的结尾。我们已经介绍了可用于我们的调试任务的各个浏览器的特定工具。
- en: 'Specifically, we have covered the following topics:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，我们已经介绍了以下主题：
- en: The Developer tool for Internet Explorer
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于Internet Explorer的开发者工具
- en: JavaScript Debugger and Web Inspector for Google Chrome and Safari
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google Chrome和Safari的JavaScript调试器和Web检查器
- en: Dragonfly for Opera
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Opera的Dragonfly
- en: The Venkman extension for Firefox
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Firefox的Venkman扩展
- en: Resources for Firebug
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Firebug资源
- en: In case you need more information about each specific tool, you can Google it
    by appending the keyword "tutorial" to each of the tools and features' mentioned
    in this chapter.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要更多关于每个特定工具的信息，你可以通过在本书中提到的工具和功能后添加关键词“教程”来使用Google搜索。
- en: We have covered the most important features of the tools that can help you get
    started with debugging your JavaScript application. In our final chapter, we will
    focus on the various testing tools that you can use when your testing requirements
    cannot be met manually.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经介绍了可以帮助你开始调试JavaScript应用程序的工具的最重要功能。在我们最后一章中，我们将重点介绍各种测试工具，这些工具可以在你的测试需求不能手动满足时使用。
