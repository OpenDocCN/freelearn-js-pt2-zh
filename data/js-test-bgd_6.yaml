- en: Chapter 6. Testing More Complex Code
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。测试更复杂的代码
- en: Welcome to the sixth chapter. In this chapter, we will learn more about JavaScript
    testing. More specifically, we'll learn how to test more complex code, where there
    will be more interactions between entities. Until now, we have been performing
    tests on relatively simple code, using fairly straightforward techniques.
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 欢迎来到第六章。在这一章中，我们将了解更多关于JavaScript测试的内容。更具体地说，我们将学习如何测试更复杂的代码，其中实体之间会有更多的交互。到目前为止，我们一直在对相对简单的代码进行测试，使用的是相对直接的技术。
- en: 'More specifically, we''ll cover the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 更具体地说，我们将涵盖以下内容：
- en: Types of errors that can occur when combining scripts
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组合脚本时可能发生的错误类型
- en: How we can deal with the errors that occur when combining the scripts together
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何处理组合脚本时发生的错误
- en: Various JavaScript libraries available on the Internet right now, and the issues
    that we need to consider when testing them
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目前互联网上可用的各种JavaScript库，以及我们在测试它们时需要考虑的问题。
- en: How to test the GUI, widgets add-ons for libraries, and other considerations
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何测试GUI、库的控件插件以及其他考虑因素
- en: How to use the console log
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用控制台日志
- en: Performing exception handling by using JavaScript built-in objects
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用JavaScript内置对象进行异常处理
- en: Testing an application by using JavaScript built-in objects
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用JavaScript内置对象测试应用程序
- en: Let us get started with the basic concepts by covering the kinds of errors that
    can occur when combining scripts.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从覆盖组合脚本时可能发生的错误类型的基本概念开始。
- en: Issues with combining scripts
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组合脚本的问题
- en: So far, we have been focused on writing and testing only one JavaScript code
    within our HTML document. Consider the real-life situation where we typically
    use external JavaScript; what happens if we use more than one JavaScript file?
    What kind of issues can we expect if we use more than one external JavaScript
    file? We'll cover all of this in the subsections below. We'll start with the first
    issue—combining event handlers.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直专注于在HTML文档中编写和测试只有一段JavaScript代码。考虑一下现实生活中的情况，我们通常使用外部的JavaScript；如果我们使用多个JavaScript文件会发生什么？如果我们使用多个外部JavaScript文件，我们可能会遇到什么问题？我们在下面的子节中都会覆盖到。我们首先从第一个问题开始——组合事件处理器。
- en: Combining event handlers
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组合事件处理器
- en: You may or may not have realized this, but we have been dealing with event handlers
    since [Chapter 3](ch03.html "Chapter 3. Syntax Validation"), *Syntax Validation*.
    In fact, we actually mentioned events in *Chapter 1, What is JavaScript Testing*.
    JavaScript helps to bring life to our web page by adding interactivity. Event
    handlers are the heartbeat of interactivity. For example, we click on a button
    and a pop-up window appears, or we move our cursor over an HTML `div` element
    and the element changes color to provide visual feedback.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能意识到了，也可能没有意识到，但自从[第三章](ch03.html "Chapter 3. Syntax Validation")《语法验证》以来，我们就一直在处理事件处理器。实际上，我们在《第一章，什么是JavaScript测试》中提到了事件。JavaScript通过添加交互性，使我们的网页充满生机。事件处理器是交互性的心跳。例如，我们点击一个按钮，一个弹出窗口就会出现，或者我们的光标移动到HTML
    `div`元素上，元素的颜色会改变以提供视觉反馈。
- en: 'To see how we can combine event handlers, consider the following example, which
    is found in the `source code` folder in the files `combine-event-handlers.html`
    and `combine-event-handlers.js` as shown in the following code:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解我们可以如何组合事件处理器，请考虑以下示例，该示例在文件`combine-event-handlers.html`和`combine-event-handlers.js`中，如以下代码所示：
- en: 'In `combine-event-handlers.html`, we have:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在`combine-event-handlers.html`中，我们有：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Notice that each of the `div` elements is handled by different functions, namely,
    `changeOne(), changeTwo()`, and `changeThree()` respectively. The event handlers
    are found in `combine-event-handlers.js:`
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，每个`div`元素都由不同的函数处理，分别是`changeOne()`、`changeTwo()`和`changeThree()`。事件处理器在`combine-event-handlers.js`中：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You might want to go ahead and test the program. As you click on the text, the
    content changes based on what is defined in the functions.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能想接着测试程序。随着你点击文本，内容会根据函数中的定义发生变化。
- en: 'However, we can rewrite the code such that all of the events are handled by
    one function. We can rewrite `combine-event-handlers.js` as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们可以重写代码，使得所有事件都由一个函数处理。我们可以将`combine-event-handlers.js`重写为如下：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: When we use `if else` statements to check the `id` of the `div` elements that
    we are working on, and change the HTML contents accordingly, we will save quite
    a few lines of code. Take note that we have renamed the function to `combine()`.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用`if else`语句检查我们正在处理的`div`元素的`id`，并相应地改变HTML内容时，我们可以节省很多行代码。请注意，我们已经将函数重命名为`combine()`。
- en: 'Because we have made some changes to the JavaScript code, we''ll need to make
    the corresponding changes to our HTML. So `combine-event-handlers.html` will be
    rewritten as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们对JavaScript代码做了一些改动，所以我们还需要对我们的HTML进行相应的改动。所以`combine-event-handlers.html`将被重写如下：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Notice that the `div` elements are now handled by the same function, `combine()`.
    These rewritten examples can be found in `combine-event-handlers-combined.html`
    and `combine-event-handlers-combined.js`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，现在`div`元素由同一个函数`combine()`处理。这些重写的示例可以在`combine-event-handlers-combined.html`和`combine-event-handlers-combined.js`中找到。
- en: Naming clashes
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 名称冲突
- en: 'Removing name clashes is the next issue that we need to deal with. Similar
    to the issue of combining event handlers, naming clashes occur when two or more
    variables, functions, events, or other objects have the same name. Although these
    variables or objects can be contained in different files, these name clashes do
    not allow our JavaScript program to run properly. Consider the following code
    snippets:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 处理名称冲突是我们需要解决的下一个问题。与事件处理程序组合的问题类似，名称冲突发生在两个或更多变量、函数、事件或其他对象具有相同名称时。尽管这些变量或对象可以包含在不同的文件中，但这些名称冲突仍然不允许我们的JavaScript程序正常运行。请考虑以下代码片段：
- en: 'In `nameclash.html`, we have the following code:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在`nameclash.html`中，我们有以下代码：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In `nameclash1.js`, we have the following code:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在`nameclash1.js`中，我们有以下代码：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If you run this code by opening the file in your browser and clicking on the
    text **Testing**, the HTML contents will be changed as expected. However, if we
    add `<script type="text/javascript" src="img/nameclash2.js"></script>` after the`<title></title>`
    tag, and if the content of `nameclash2.js` is as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你通过在浏览器中打开文件并点击文本**Testing**来运行此代码，HTML内容将按预期更改。然而，如果我们在这段代码后面添加`<script type="text/javascript"
    src="img/nameclash2.js"></script>`，并且`nameclash2.js`的内容如下：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Then we will not be able to execute the code properly. We will see the alert
    box instead of the HTML contents being changed. If we switch the arrangement of
    the external JavaScript, then the HTML contents of the `div` elements will be
    changed and we will not be able to see the alert box.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将无法正确执行代码。我们将看到警告框，而不是HTML内容被改变。如果我们改变外部JavaScript的位置，那么`div`元素的内容将被改变，我们将无法看到警告框。
- en: With such naming clashes, our program becomes unpredictable; the solution to
    this is to use unique names in your functions, classes, or events. If you have
    a relatively large program, it would be advisable to use namespaces, which is
    a common strategy in several JavaScript libraries such as YUI and jQuery.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些名称冲突，我们的程序变得不可预测；解决这个问题的方法是在你的函数、类或事件中使用独特的名称。如果你有一个相对较大的程序，建议使用命名空间，这是YUI和jQuery等几个JavaScript库中常见的策略。
- en: Using JavaScript libraries
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用JavaScript库
- en: 'There are many JavaScript libraries available right now. Some of the most commonly-used
    ones are as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在有很多JavaScript库可供使用。一些最常用的如下：
- en: JQuery ([http://jquery.com](http://jquery.com))
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JQuery ([http://jquery.com](http://jquery.com))
- en: YUI (Yahoo! User Interface JavaScript library) ([http://developer.yahoo.com/yui/](http://developer.yahoo.com/yui/))
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: YUI (Yahoo!用户界面JavaScript库) ([http://developer.yahoo.com/yui/](http://developer.yahoo.com/yui/))
- en: Dojo ([http://dojotoolkit.org/](http://dojotoolkit.org/))
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Dojo ([http://dojotoolkit.org/](http://dojotoolkit.org/))
- en: Prototype ([http://www.prototypejs.org/](http://www.prototypejs.org/))
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 原型([http://www.prototypejs.org/](http://www.prototypejs.org/))
- en: Mootools ([http://mootools.net/](http://mootools.net/))
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mootools ([http://mootools.net/](http://mootools.net/))
- en: Script.aculo.us ([http://script.aculo.us/](http://script.aculo.us/))
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Script.aculo.us ([http://script.aculo.us/](http://script.aculo.us/))
- en: There are many more JavaScript libraries out there. For a complete list, feel
    free to visit [http://en.wikipedia.org/wiki/List_of_JavaScript_libraries.](http://en.wikipedia.org/wiki/List_of_JavaScript_libraries.)
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 还有更多的JavaScript库。要查看完整的列表，请随时访问[http://en.wikipedia.org/wiki/List_of_JavaScript_libraries.](http://en.wikipedia.org/wiki/List_of_JavaScript_libraries.)
- en: 'If you have considered using JavaScript libraries, you may be aware of the
    benefits of using a JavaScript library. Issues such as event handling, and the
    much dreaded cross-browser issues make it necessary to consider using a JavaScript
    library. But you might want to know what you should look out for when selecting
    a JavaScript library as a beginner JavaScript programmer. So here is a list of
    things to consider:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '- 如果您考虑使用JavaScript库，您可能已经了解到使用JavaScript库的好处。事件处理以及令人望而生畏的跨浏览器问题使得考虑使用JavaScript库变得必要。但是，您可能想知道作为初学者JavaScript程序员在选择JavaScript库时应注意什么。这里有一份需要考虑的事项列表：'
- en: The level of available support, in terms of documentation.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '- 可用支持的级别，以文档形式表示。'
- en: Whether tutorials are available, and whether they are free or paid for. This
    helps you to speed up the programing process.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '- 是否提供教程，以及它们是免费还是付费。这有助于加快编程过程。'
- en: The availability of plugins and add-ons.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '- 插件和附加组件的可用性。'
- en: Does the library have a built-in testing suite? This is very important, especially
    for our purposes here.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '- 库是否有内置的测试套件？这对于我们的目的来说非常重要。'
- en: Do you need to test a library that someone else has written?
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '- 您是否需要测试别人编写的库？'
- en: Firstly, while we are learning about JavaScript testing, I would say that for
    a beginner learning JavaScript programing, it might not be advisable to test JavaScript
    libraries that someone else wrote. This is because we need to understand the code
    in order to perform accurate tests. People who are able to conduct objective (and
    accurate) tests are JavaScript experts, and although you are on your way to becoming
    one, you are probably not there yet.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '- 首先，当我们学习JavaScript测试时，我认为对于初学者学习JavaScript编程，可能不建议测试别人编写的JavaScript库。这是因为我们需要理解代码才能进行准确测试。能够进行客观（且准确）测试的是JavaScript专家，而虽然您正在成为其中的一员，但您可能还没有达到那个水平。'
- en: Secondly, from a practical standpoint, many such tests have already been done
    for us. All you need to do is search for them on the Internet.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '- 其次，从实际角度考虑，已经为我们完成了许多这样的测试。您需要做的就是在互联网上搜索它们。'
- en: But for learning purposes, let us have a brief look at what tests are usually
    run against library code.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '- 但为了学习目的，让我们简要了解一下通常针对库代码运行哪些测试。'
- en: What sort of tests to run against library code
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '- 针对库代码应运行哪些测试'
- en: In general, as a user of various JavaScript libraries, we would most commonly
    perform performance testing and profiling testing.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '- 通常，作为各种JavaScript库的用户，我们最常进行性能测试和性能测试。'
- en: Performance testing
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '- 性能测试'
- en: Performance testing, as the name suggests, is about testing the performance
    of your code. This includes testing how fast your code runs (on various browsers)
    in a manual way, or by using certain tools such as Firebug or others (more such
    tools are covered in [Chapter 8](ch08.html "Chapter 8. Testing Tools")).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '- 性能测试，顾名思义，是关于测试您的代码性能。这包括以手动方式测试您的代码（在各种浏览器上）的速度，或使用某些工具（如Firebug或其他工具）（更多此类工具将在[第8章](ch08.html
    "第8章. 测试工具")中介绍）。'
- en: In general, in order to generate accurate results for performance testing, it
    is important for you to test your code (most preferably by using tools and test
    suites) against all popular platforms. For example, a common way to performance
    test JavaScript code id to install Firebug in Firefox and test your code using
    that. But to think of it from a practical standpoint, Firefox users only make
    up approximately a quarter (or a third at the most) of the total number of Internet
    users. You will have to test your code against other platforms such as Internet
    Explorer in order to make sure that your code is up to the mark. We'll cover more
    of this in [Chapter 8](ch08.html "Chapter 8. Testing Tools").
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '- 通常，为了生成性能测试的准确结果，您需要针对所有流行平台测试您的代码（最理想的是使用工具和测试套件）。例如，对JavaScript代码进行性能测试的常见方法是在Firefox中安装Firebug并使用它进行测试。但是从实际角度考虑，Firefox用户只占互联网用户的约四分之一（最多三分之一）。为了确保您的代码达到标准，您还需要针对其他平台（如Internet
    Explorer）进行测试。我们将在[第8章](ch08.html "第8章. 测试工具")中介绍更多内容。'
- en: Profiling testing
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '- 性能测试'
- en: Profiling testing is similar to performance testing, except that it focuses
    on bottlenecks in your code rather than the overall performance. Bottlenecks are,
    in general, the main culprits for inefficient code. Fixing bottlenecks is (almost)
    a sure way to enhance the performance of your code.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 剖析测试与性能测试类似，不同之处在于它关注的是代码中的瓶颈，而不是整体性能。瓶颈通常是低效代码的主要罪魁祸首。修复瓶颈（几乎）是提高代码性能的确定方法。
- en: GUI and widget add-ons to libraries and considerations on how to test them
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图形用户界面（GUI）和控件插件以及如何测试它们的相关考虑
- en: If you have checked the list of various JavaScript libraries that I pointed
    you to, you may have noticed that some of the JavaScript libraries provide user
    interface or widget add-ons as well. These are meant to enhance your application's
    user interface, and most importantly will help you to save time and effort by
    implementing commonly-used user interface components, such as dialog boxes, color
    selectors, and so on.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看了我向你指出的各种 JavaScript 库的列表，你可能会注意到一些 JavaScript 库也提供了用户界面或控件插件。这些旨在增强你的应用程序的用户界面，最重要的是，通过实现常用的用户界面组件（如对话框、颜色选择器等）来帮助你节省时间和精力。
- en: But that's where the problem starts—how do we test such user interface and widget
    add-ons? There are many ways in which we can go about doing that, but the simplest
    way (and perhaps the most cumbersome) would be to test visually and manually.
    For example, if we are expecting a dialog box to appear at the top left-hand side
    of the screen with a certain color, width, and height, and it does not appear
    the way we want, then something is wrong.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 但是问题就从这里开始——我们如何测试这些用户界面和控件插件呢？我们可以采取很多方法来完成这件事，但最简单的方法（或许也是最繁琐的）莫过于 visually
    和 manually 进行测试。例如，如果我们期望一个对话框会出现在屏幕的左上角，并且具有某种颜色、宽度和高度，如果它没有以我们期望的方式出现，那么就出错了。
- en: Similarly, if we see something that we expect to see, then we can say that it
    is correct—at least in a visual sense.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，如果我们看到了我们预期看到的东西，那么我们可以说它是正确的——至少在视觉上是这样。
- en: However, more vigorous testing is required. Testing user interfaces can be a
    daunting task, and hence I would suggest that you use testing tools such as Sahi,
    which allows us to write automated web application UI tests in any programing
    language. Tools such as Sahi are out of scope for this chapter. We will cover
    Sahi in detail in [Chapter 8](ch08.html "Chapter 8. Testing Tools"). Meanwhile,
    if you are eager to check out Sahi, feel free to visit their website at [http://sahi.co.in](http://sahi.co.in).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，需要进行更严格的测试。测试用户界面可能是一项艰巨的任务，因此我建议你使用像 Sahi 这样的测试工具，它允许我们用任何编程语言编写自动化网页应用界面测试。像
    Sahi 这样的工具超出了本章的范围。我们将在[第8章](ch08.html "第8章 测试工具")详细介绍 Sahi。与此同时，如果你急于了解 Sahi，可以随时访问他们的网站：[http://sahi.co.in](http://sahi.co.in)。
- en: Deliberately throwing your own JavaScript errors
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 故意抛出自己的 JavaScript 错误
- en: In this section, we will learn how to throw our own JavaScript errors and exceptions.
    We will briefly cover the syntax of the error functions and commands. It may be
    a little incomprehensible at this stage to just give you the syntax, but this
    is necessary. Once you understand how to make use of these commands and reserved
    words, you will see how you can make use of them to give yourself more specific
    information (and hence more control) over the types of errors that you can catch
    and create in the next section. So let us get started with the first reserved
    word—`throw`.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何抛出自己的 JavaScript 错误和异常。我们将简要介绍错误函数和命令的语法。这时给你语法可能有点难以理解，但这是必要的。一旦你理解了如何使用这些命令和保留字，你将了解如何利用它们提供更具体的信息（从而获得更多控制权）来控制你可以在下一节中捕获和创建的错误类型。那么让我们从第一个保留字——`throw`开始吧。
- en: The throw statements
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 抛出语句
- en: '`throw` is a statement that allows you to create an exception or error. It
    is a bit like the `break` statement, but `throw` allows you to break out of any
    scope. In general, this is what we usually use to literally throw an error. The
    syntax is as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`throw`是一个允许你创建异常或错误的语句。它有点像`break`语句，但`throw`允许你跳出任何作用域。通常，我们用它来字面意思上抛出一个错误。语法如下：'
- en: '[PRE7]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We can use `throw(exception)` in the following ways:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以用`throw(exception)`以下方式：
- en: '[PRE8]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'or:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 或者：
- en: '[PRE9]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`Error` is a built-in object that is commonly used in conjunction with the
    `throw` statement; we will cover `Error` later. The important thing to understand
    now is the syntax, and the fact that `throw` is also often used with `try, catch`,
    and `finally`, which will help you to control the program flow and create accurate
    error messages. Now let us move on to `catch`.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`Error`是一个内置对象，通常与`throw`语句一起使用；我们稍后会介绍`Error`。现在要理解的重要一点是语法，以及`throw`也经常与`try,
    catch`和`finally`一起使用，这将帮助你控制程序流程并创建准确的错误信息。现在让我们继续讲解`catch`。'
- en: The try, catch, and finally statement
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试，捕获和最后语句
- en: 'The `try, catch`, and `finally` statement are JavaScript''s exception handling
    mechanism, which, as mentioned previously, helps you control the program flow,
    while catching your errors. The syntax of the `try, catch`, and `finally` statements
    is as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`try, catch`和`finally`语句是JavaScript的异常处理机制，如前所述，它帮助你控制程序流程，同时捕获你的错误。`try, catch`和`finally`语句的语法如下：'
- en: '[PRE10]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Notice that `try` is followed by `catch`, and then `finally` can be used optionally.
    In general, the `catch` statement catches the exceptions that occur in the `try`
    statement. An exception is an error. The `finally` statement is executed as long
    as the `try` or `catch` statement terminates.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意`try`后面跟着`catch`，然后可选地使用`finally`。通常，`catch`语句捕获`try`语句中发生的异常。异常是一个错误。只要`try`或`catch`语句终止，`finally`语句就会执行。
- en: 'Now that we have covered the basic commands and reserved words for deliberately
    throwing JavaScript errors, let us take a look at an example of how `try, catch`,
    and `finally` can be used together. The following code can be found in the `source
    code` folder of *Chapter 6*, in the HTML document named `try-catch-finally-correct-version.html`.
    Check out the following code:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经介绍了故意抛出JavaScript错误的基本命令和保留字，那么让我们来看一个`try, catch`和`finally`一起使用的例子。下面的代码可以在*第6章*的`source
    code`文件夹中的HTML文档`try-catch-finally-correct-version.html`中找到。查看下面的代码：
- en: '[PRE11]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You can copy and paste the code above into your favorite text editor, save it,
    and run it in your browser. Or you can run the sample file `try-catch-finally-correct-version.html`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将上面的代码复制并粘贴到你最喜欢的文本编辑器中，保存它，然后在浏览器中运行。或者你可以运行样本文件`try-catch-finally-correct-version.html`。
- en: You will see a prompt window asking you to enter a positive integer. Go ahead
    and enter a positive integer, say **3** for instance, and you will receive an
    alert window telling you **3! = 6**. After that, you should receive another alert
    window, which contains the message **ok, all is done!**, as the `finally` block
    will be executed after `try` or `catch` terminates.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到一个提示窗口，要求你输入一个正整数。接着输入一个正整数，比如**3**，然后你会收到一个警告窗口，告诉你**3! = 6**。之后，你应该会收到另一个警告窗口，其中包含消息**好的，一切都完成了！**，因为`finally`块将在`try`或`catch`终止后执行。
- en: Now, enter a negative number, say **-1**. If you are using Firefox, you will
    receive an alert window that says that you have too much recursion. If you are
    using Internet Explorer, you will receive an **[object Error]** message.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，输入一个负数，比如**-1**。如果你使用的是Firefox，你会收到一个提示窗口，告诉你有太多的递归。如果你使用的是Internet Explorer，你会收到一个**[object
    Error]**消息。
- en: 'After the first pop-up window, you will receive a second pop-up window. If
    you are using Firefox, you will see an **InternalError: Too much recursion** message.
    If you are using Internet Explorer, you will receive an **Out of stack space**
    message.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '在第一个弹出窗口之后，你将收到第二个弹出窗口。如果你使用的是Firefox，你会看到一个**InternalError: Too much recursion**消息。如果你使用的是Internet
    Explorer，你会收到一个**Out of stack space**消息。'
- en: Lastly, you should receive a final alert window, which contains the message
    **ok, all is done!**, as the `finally` block will be executed after `try` or `catch`
    terminates. While it is true that we have an error, the error message is not exactly
    what we need, as it does not tell us that we have entered an illegal value.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你应该会看到一个最终的警告窗口，其中包含消息**好的，一切都完成了！**，因为`finally`块将在`try`或`catch`终止后执行。虽然确实我们遇到了一个错误，但错误信息并不是我们真正需要的，因为它没有告诉我们我们输入了非法值。
- en: This is where `throw` comes in. `throw` can be used to control the program flow
    and give us the correct response for each type of error. Check out the following
    code, which can also be found in the `source code` folder, in the file `try-catch-finally-throw-correct-version.html`.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是`throw`发挥作用的地方。`throw`可以用来控制程序流程，并为每种错误给出正确的响应。查看下面的代码，也可以在`source code`文件夹中的文件`try-catch-finally-throw-correct-version.html`找到。
- en: '[PRE12]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Now go ahead and execute the program, and enter correct values, negative values,
    and non-alphanumeric values. You should receive the correct error messages depending
    on your input.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在请执行程序，输入正确的值、负值和非字母数字值。根据你的输入，你应该会收到正确的错误消息。
- en: Notice the previous lines of code where we used the `throw` statement to control
    the types of error messages, which will be shown to the user in the `catch` block.
    This is one way in which `throw` statements can be used. Note that the string
    that is defined after `throw` is used to create program logic to decide what error
    messages should be called.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 注意之前代码行中我们使用`throw`语句来控制要显示给用户的错误消息类型。这是`throw`语句可以使用的几种方式之一。请注意，在`throw`之后定义的字符串用于创建程序逻辑，以决定应调用哪些错误消息。
- en: In case you are wondering what other capabilities this exception handling mechanism
    has, remove the `factorial` function from `try-catch-finally-correct-version.html`.
    Alternatively, you can open the file `try-catch-finally-wrong-version.html` and
    run the program. Then try entering any value. You should receive an alert message
    telling you that the `factorial` function is not defined, and after that you will
    receive another alert box saying **ok, all is done!**. Notice that, in this case,
    there is no need for us to write any form of message; `catch` is powerful enough
    to tell us what went wrong.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想知道这种异常处理机制还有哪些其他功能，请从`try-catch-finally-correct-version.html`中删除`factorial`函数。或者，你可以打开文件`try-catch-finally-wrong-version.html`并运行程序。然后尝试输入任何值。你应该会收到一个警告消息，告诉你`factorial`函数未定义，之后你将收到另一个警告框，显示**好的，一切都完成了**。请注意，在这种情况下，我们不需要编写任何形式的消息；`catch`足够强大，可以告诉我们出了什么问题。
- en: One thing to note, though, is that the JavaScript runtime may catch an exception
    if you do not write an exception handler.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，如果不对异常编写处理程序，JavaScript运行时可能会捕获异常。
- en: Now that we have covered the basics of the exception handling mechanism, let
    us move on to the specifics—built-in objects for handling errors.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经介绍了异常处理机制的基本知识，接下来让我们具体了解一下——处理错误的内置对象。
- en: Trapping errors by using built-in objects
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用内置对象捕获错误
- en: In this section, we'll briefly describe what each type of built-in object is,
    along with its syntax, before we show some examples of how each of the built-in
    objects work. Do take note that the alert messages, which we will be using sparingly
    in the examples, are based on the Firefox browser. If you try the code on Internet
    Explorer, you might see different error messages.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将简要介绍每种内置对象是什么，以及它们的语法，然后展示每个内置对象如何工作的示例。请注意，我们将在示例中适度使用警告消息，这些消息是基于Firefox浏览器。如果你在Internet
    Explorer上尝试代码，你可能会看到不同的错误消息。
- en: The Error object
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 错误对象
- en: 'An `Error` is a generic exception, and it accepts an optional message that
    provides details of the exception. We can use the `Error` object by using the
    following syntax:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`Error`是一个通用的异常，它接受一个可选的消息，提供异常的详细信息。我们可以使用`Error`对象，使用以下语法：'
- en: '[PRE13]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Here's an example that shows the `Error` object in action. The source code for
    this example can be found in the file `error-object.html.`
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个显示`Error`对象动作的示例。这个示例的源代码可以在文件`error-object.html`中找到。
- en: '[PRE14]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: You may have noticed that the structure of this code is similar to the previous
    examples, in which we demonstrated `try, catch, finally`, and `throw`. In this
    example, we have made use of what we have learned, and instead of throwing the
    error directly, we have used the `Error` object.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能注意到了，这个代码的结构与之前的例子相似，我们在其中演示了`try, catch, finally`和`throw`。在这个例子中，我们利用了我们所学的知识，并没有直接抛出错误，而是使用了`Error`对象。
- en: I need you to focus on the code given above. Notice that we have used an integer
    and a string as the message argument for `var error`, namely `new Error(1)` and
    `new Error("it must be a number")`. Take note that we can make use of `alert()`
    to create a pop-up window to inform the user of the error that has occurred and
    the name of the error, which is **Error**, as it is an `Error` object. Similarly,
    we can make use of the message property to create program logic for the appropriate
    error message.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我需要你关注上面给出的代码。注意我们已经将整数和字符串作为`var error`的消息参数，分别是`new Error(1)`和`new Error("it
    must be a number")`。请注意我们可以使用`alert()`创建一个弹出窗口，以通知用户发生的错误和错误的名称，因为它是`Error`对象，所以名称是**Error**。同样，我们可以使用消息属性来为适当的错误消息创建程序逻辑。
- en: It is important to see how the `Error` object works, as the following built-in
    objects, which we are going to learn about, work similarly to how we have seen
    for the `Error` object. (We might be able to show how we can use these errors
    in the console log.)
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 了解`Error`对象是如何工作的很重要，因为以下我们要学习的内置对象的工作方式与`Error`对象的工作方式相似。（我们可能能够展示如何在这些错误中使用控制台日志。）
- en: The RangeError object
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**RangeError 对象**'
- en: A `RangeError` occurs when a number is out of its appropriate range. The syntax
    is similar to what we have seen for the `Error` object. Here's the syntax for
    `RangeError:`
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个数字超出其适当的范围时，会发生`RangeError`。这个语法与我们之前看到的`Error`对象相似。这是`RangeError`的语法：
- en: '[PRE15]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '`message` can either be a string or an integer.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`message` 可以是字符串或整数。'
- en: We'll start with a simple example to show how this works. Check out the following
    code that can be found in the `source code` folder, in the file `rangeerror.html:`
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从一个简单的例子开始，展示这是如何工作的。查看以下代码，可以在`source code`文件夹中的`rangeerror.html`文件找到：
- en: '[PRE16]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: When you run this example, you should see an alert window informing you that
    the array is of an invalid length. After this alert window, you should receive
    another alert window telling you that **The error is RangeError**, as this is
    a `RangeError` object. If you look at the code carefully, you will see that I
    have deliberately created this error by giving a negative value to the array's
    length (array's length must be positive).
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行这个例子时，你应该会看到一个警告窗口，通知你数组长度无效。在此警告窗口之后，你应该会收到另一个警告窗口，告诉你**错误是 RangeError**，因为这是一个`RangeError`对象。如果你仔细查看代码，你会看到我故意创建了这个错误，给数组长度一个负值（数组长度必须是正数）。
- en: The ReferenceError object
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**引用错误**'
- en: 'A `ReferenceError` occurs when a variable, object, function, or array that
    you have referenced does not exist. The syntax is similar to what you have seen
    so far and it is as follows:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 当你引用的变量、对象、函数或数组不存在时，会发生`引用错误`。到目前为止你看到的语法相似，如下所示：
- en: '[PRE17]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '`message` can either be a string or an integer.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`message` 可以是字符串或整数。'
- en: As this is pretty straightforward, I'll dive right into the next example. The
    code for the following example can be found in the `source code` folder, in the
    file `referenceerror.html`.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 因为这个问题很简单，所以我直接进入下一个例子。以下例子的代码可以在`source code`文件夹中的`referenceerror.html`文件找到。
- en: '[PRE18]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Take note that `y` is not defined, and we are expecting to catch this error
    in the `catch` block. Now try the previous example in your Firefox browser. You
    should receive four alert windows regarding the errors, with each window giving
    you a different message. The messages are as follows:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`y`未定义，我们期望在`catch`块中捕获这个错误。现在在你的 Firefox 浏览器中尝试之前的例子。你应该会收到四个关于错误的警告窗口，每个窗口都会给你不同的消息。消息如下：
- en: '**ReferenceError: y** is not **defined**'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**引用错误: y 未定义**'
- en: '**y is not defined**'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**y 未定义**'
- en: '**ReferenceError**'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**引用错误**'
- en: '**ok, all is done**'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**好的，一切都完成了**'
- en: 'If you are using Internet Explorer, you will receive slightly different messages.
    You will see the following messages:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在使用 Internet Explorer，你会收到稍微不同的消息。你会看到以下消息：
- en: '**[object Error] message**'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[object Error] message**'
- en: '**y is undefined**'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**y 是未定义的**'
- en: '**TypeError**'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TypeError**'
- en: '**ok, all is done**'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**好的，一切都完成了**'
- en: The TypeError object
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**TypeError 对象**'
- en: 'A `TypeError` is thrown when we try to access a value that is of the wrong
    type. The syntax is as follows:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 当尝试访问类型不正确的值时，会抛出一个`TypeError`。语法如下：
- en: '[PRE19]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'An example of `TypeError` is as follows:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`TypeError`的一个例子如下：'
- en: '[PRE20]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: If you try running this code in Firefox, you should receive an alert box stating
    that it is a `TypeError`. This is because `test.foo()` is not a function, and
    this results in a `TypeError`. JavaScript is capable of finding out what kind
    of error has been caught. Similarly, you can use the traditional method of throwing
    your own `TypeError()`, by uncommenting the code.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你尝试在 Firefox 中运行此代码，你应该会收到一个警告框，指出它是一个`TypeError`。这是因为`test.foo()`不是一个函数，这导致了一个`TypeError`。JavaScript
    能够找出捕获了哪种类型的错误。同样，你可以通过取消注释代码来使用传统的抛出自定义`TypeError()`的方法。
- en: The following built-in objects are less used, so we'll just move through quickly
    with the syntax of the built-in objects.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 以下内置对象使用较少，所以我们快速浏览一下内置对象的语法。
- en: The SyntaxError object
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**SyntaxError 对象**'
- en: 'A `SyntaxError` occurs when there is an error in syntax. The syntax for `SyntaxError`
    is as follows:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在语法上出错时，会发生`语法错误`。`SyntaxError`的语法如下：
- en: '[PRE21]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Take note that the `filename` and `lineNumber` parameters are non-standard,
    and they should be avoided if possible.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意`filename`和`lineNumber`参数是非标准的，如果可能的话应避免使用它们。
- en: The URIError object
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`URIError`对象'
- en: 'A `URIError` occurs when a malformed URI is encountered. The syntax is as follows:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '`URIError`是在遇到格式不正确的URI时发生的。该语法的格式如下：'
- en: '[PRE22]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Similar to `SyntaxError`, take note that the `filename` and `lineNumber` parameters
    are non-standard, and they should be avoided if possible.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于`SyntaxError`，请注意`filename`和`lineNumber`参数是非标准的，如果可能的话应避免使用它们。
- en: The EvalError object
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`EvalError`对象'
- en: An `EvalError` occurs when an `eval` statement is used incorrectly or contains
    an error other than a syntax error.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`EvalError`是在使用不正确或包含其他错误的`eval`语句时发生的。'
- en: '[PRE23]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Similar to `SyntaxError` and `URIError`, take note that the `filename` and `lineNumber`
    parameters are non-standard, and they should be avoided if possible.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于`SyntaxError`和`URIError`，请注意`filename`和`lineNumber`参数是非标准的，如果可能的话应避免使用它们。
- en: Using the error console log
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用错误控制台记录信息
- en: Firefox's console log is a tool that is powerful enough for you to log your
    JavaScript messages. You can log error messages from the built-in objects, or
    you can write your own messages.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: Firefox的控制台是一个足够强大的工具，可以让你记录JavaScript消息。你可以记录内置对象的错误信息，也可以编写你自己的信息。
- en: Error messages
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 错误信息
- en: What we see in this section are error messages generated that are logged in
    Firefox's error console log. Before we do that, I need you to open up your Firefox
    browser, go to **Tools** on the menu bar, and select **Error Console**. Make sure
    that you do not open any other tabs.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本节中看到的错误信息是在Firefox错误控制台中生成的，并记录在错误控制台的日志中。在开始之前，我需要你打开你的Firefox浏览器，点击菜单栏上的**工具**，然后选择**错误控制台**。确保你没有打开其他标签页。
- en: 'Now, open your code editor, and enter the following code into a new document:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，打开你的代码编辑器，并在新文档中输入以下代码：
- en: '[PRE24]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Save the document as a `.html` file, and then run the file on your Firefox
    browser. Alternatively, you can use the source code found in the `source code`
    folder with the HTML document entitled: `error-message-console.html`. If you now
    take a look at your console, you should receive the following error message: **invalid
    array length**. This is because we have defined an array that is of negative length,
    which is shown in the code above.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 将文档保存为`.html`文件，然后在你的Firefox浏览器中运行该文件。或者，你可以使用位于`source code`文件夹中的源代码与HTML文档一起使用，文档名为：`error-message-console.html`。如果你现在查看你的控制台，你应该会收到以下错误信息：**无效的数组长度**。这是因为我们在上面的代码中定义了一个负长度的数组。
- en: The trick here is to use the `throw` statement to throw error messages. Take
    note that Firefox's error console does not show the `name` of the error.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的技巧是使用`throw`语句来抛出错误信息。请注意，Firefox的错误控制台不会显示错误的`name`。
- en: Now we will take a look at how to create custom error messages.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将看看如何创建自定义错误信息。
- en: Writing your own messages
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写你自己的消息
- en: Let us move on to creating our own error messages. The completed code is found
    in the `source code` folder, in the file `test-custom.html`.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续创建我们自己的错误信息。完整的代码可以在`source code`文件夹中的`test-custom.html`文件找到。
- en: 'Once again, open your code editor, create a new document, and enter the following
    code into it:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 再次打开你的代码编辑器，创建一个新文档，并输入以下代码：
- en: '[PRE25]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: What we have done here is that within the `try` block we have thrown two new
    `Error` objects, each with a custom message, and then in the `catch` block, we
    throw the `Error` object again. In the `try` block, we are creating a custom `Error`
    object, and in the `catch` block, we are throwing the message into the **Error
    Console**.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所做的是在`try`块中抛出两个带有自定义消息的新`Error`对象，然后在`catch`块中再次抛出`Error`对象。在`try`块中，我们创建了一个自定义的`Error`对象，而在`catch`块中，我们将消息抛向**错误控制台**。
- en: Take note of the highlighted lines. We have defined our own messages in the
    `Error` object. Save the file, and then open up your Firefox browser. Go to **Tools
    | Error Console**. In the **Error Console**, make sure you are in either the **All**
    tab or the **Errors** tab. Now run your code in your Firefox browser. You will
    receive the message **You must enter a number** in your error console if you enter
    a non-numeric input. If you enter a number that is less than zero, you will receive
    the message **Number must be bigger than zero**. The key here is to make use of
    the provided methods and properties to throw your own error messages.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意突出显示的行。我们在`Error`对象中定义了我们自己的消息。保存文件，然后打开你的Firefox浏览器。转到**工具 | 错误控制台**。在**错误控制台**中，确保你在**所有**标签或**错误**标签。现在在你的Firefox浏览器中运行你的代码。如果你输入非数字输入，你将在错误控制台收到**你必须输入一个数字**的消息。如果你输入的数字小于零，你将收到**数字必须大于零**的消息。关键在于利用提供的方法和属性来抛出你自己的错误信息。
- en: Modifying scripts and testing
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改脚本和测试
- en: Now that we have covered the basic building blocks of throwing and catching
    errors using built-in objects, and using the console to throw error messages,
    it is time to learn how we can apply what we have learnt to a simple application.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经介绍了使用内置对象抛出和捕获错误的基本模块，以及使用控制台抛出错误消息，是时候学习我们如何可以将所学应用到一个简单的应用程序上了。
- en: Time for action—coding, modifying, throwing, and catching errors
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——编码、修改、抛出和捕获错误
- en: I need you to focus and pay attention in this section because we will be applying
    all that we have learnt previously when we first created an application. After
    that, we will attempt to generate our own errors and throw various error messages
    as a part of our testing process.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我需要你集中注意力，因为我们将会应用我们之前创建第一个应用程序时学到的所有知识。之后，我们将尝试生成我们自己的错误，并在测试过程中抛出各种错误信息。
- en: What we will create is a mock movie booking system. I'm not sure about you,
    but I've noticed that the folks at the service counter use some form of a movie
    booking system that has a GUI to facilitate their booking process. Not only will
    we be creating that, but we will also add more features, such as purchasing food
    and drinks to go with the movie tickets.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要创建的是一个模拟电影预订系统。我不知道你们是否注意到了，但我注意到服务台的工作人员使用某种电影预订系统，它有一个GUI来帮助他们的预订过程。我们不仅会创建那个系统，还会添加更多功能，比如购买与电影票一起的食品和饮料。
- en: 'Here are the details of the movie tickets booking system: as you click on each
    seat, you are executing a booking action. If the seat is booked, a click on it
    will execute a remove booking action.'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是电影票预订系统的详细信息：当你点击每个座位时，你正在执行一个预订动作。如果座位已被预订，点击它将执行一个取消预订动作。
- en: 'Other important design rules are as follows: you cannot buy more meals than
    the number of tickets that you have booked. For example, if you have booked four
    tickets, you can only purchase up to four meals, be it a hotdog meal or a popcorn
    meal. Similarly, for every meal that you have purchased, you can purchase one
    Sky Walker. This means that if you have purchased three meals, you can only purchase
    up to three Sky Walkers. Next, you can only pay in hundred dollar notes. This
    means that you can only enter figures in hundreds for the **Please pay in $100
    notes** input field.'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 其他重要的设计规则如下：你不能购买比你预订的门票更多的餐点。例如，如果你预订了四张门票，你只能购买最多四份餐点，无论是热狗套餐还是爆米花套餐。同样，你每购买一份餐点，你可以购买一个Sky
    Walker。这意味着如果你购买了三份餐点，你只能购买最多三个Sky Walker。另外，你只能用百元钞票支付。这意味着你只能在**请用100美元钞票支付**输入框中输入百位数的数字。
- en: In case you are wondering about the pricing of the various merchandise, the
    tickets are priced at $10 each. The hotdog meal costs $6 while the popcorn meal
    costs $4\. Sky Walker costs $10 each.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在想各种商品的价格，门票每张10美元。热狗套餐6美元，爆米花套餐4美元。Sky Walker每个10美元。
- en: Clear about the rules? If you are clear about the rules, we'll first start by
    creating this application. After that, we will apply the exception catching mechanism
    as the final step. By the way, the completed code for this example can be found
    in the folder `cinema-incomplete` of *Chapter 6*.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 清楚这些规则了吗？如果你清楚这些规则，我们首先开始创建这个应用程序。之后，我们将把异常捕获机制作为最后一步。顺便说一下，这个例子完成的代码可以在第6章的`cinema-incomplete`文件夹中找到。
- en: Open up code editor and create a new file. Enter the following code into your
    file.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开代码编辑器，创建一个新文件。将以下代码输入到你的文件中。
- en: '[PRE26]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This will form the backbone of our program. Right now, it will not do anything,
    nor will it show any design on your webpage. Therefore, we will start by creating
    the layout of our application.
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将构成我们程序的骨架。现在，它不会做任何事情，也不会在您的网页上显示任何设计。因此，我们将从创建我们应用程序的布局开始。
- en: Enter the following code within the`<body>` tag of your HTML document.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的HTML文档的`<body>`标签内输入以下代码。
- en: '[PRE27]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This code forms the basic control of our movie ticket booking application. You
    may have noticed that there are various `div` elements with the class wrapper.
    These elements will be used to create a grid-like user interface that represents
    the seats in a cinema. So now we will start to create the grid that will be used
    to represent the seats.
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这段代码构成了我们电影票预订应用程序的基本控制。您可能已经注意到有各种带有wrapper类的`div`元素。这些元素将用于创建一个类似网格的用户界面，代表影院的座位。所以现在我们将开始创建用于表示座位的网格。
- en: 'We will first build the first row of the grid. For a start, type the following
    code within the first `div` element with a wrapper class:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将构建网格的第一行。首先，在具有wrapper类的第一个`div`元素内输入以下代码：
- en: '[PRE28]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Notice that each of the `<div>` elements that you have typed within the first
    `div` element with a wrapper class has a `class` and `id` property. In general,
    the first `div` will have a class of `left1`, and an ID of `a1`. The next `div`
    element will have a class of `left2` and an ID of `a2`, and so on. This is the
    way that we will be designing our grid. Now, let us proceed to the next step.
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，您在具有wrapper类的第一个`div`元素内输入的每个`<div>`元素都有一个`class`和`id`属性。通常，第一个`div`将有一个`left1`类和一个`a1`ID。下一个`div`元素将有一个`left2`类和`a2`ID，依此类推。这是我们设计网格的方式。现在，让我们进行下一步。
- en: 'Similar to step 3, we will build the next row of our grid. Enter the following
    code into the second `div` element with a wrapper class:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与步骤3类似，我们将构建网格的下一行。在第二个具有wrapper类的`div`元素内输入以下代码：
- en: '[PRE29]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Notice that the `div` elements that form the second row of the grid have an
    ID starting with a "b" as opposed to an "a" as is the case in the first row of
    the grid. This will be the way that we will name and continue to build the grid
    as we go along. This means that the next row will have an ID beginning with "c",
    the fourth row will have an ID beginning with "d", and so on.
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，构成网格第二行的`div`元素具有以"b"开头的ID，与第一行的"a"开头形成对比。这是我们将继续用来命名和构建网格的方式。这意味着下一行将具有以"c"开头的ID，第四行将以"d"开头，依此类推。
- en: In all, we will be creating five rows. This means that we have three more rows
    to go.
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 总共我们将创建五行。这意味着我们还有三行要做。
- en: Now we will build the next three rows of the grid. Type the code given in the
    previous step into the remaining `div` elements, but remember to change the `id`
    of each element to suit the row number. At the same time, remember to include
    the `onclick="checkBooking(this)`", as this will be used for executing our JavaScript
    functions.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将构建网格的下一三行。将上一步给出的代码输入到剩余的`div`元素中，但请记住根据行号更改每个元素的`id`。同时，记得包含`onclick="checkBooking(this)"`，因为这将用于执行我们的JavaScript函数。
- en: Once you are done with the HTML, it's time for us to add the CSS in order to
    create the proper design and layout for our application.
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 完成HTML后，是时候添加CSS以创建我们应用程序的正确设计和布局。
- en: For this example, we will be using an external CSS. Therefore, insert the following
    code after the`<title> </title>` tags.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于这个例子，我们将使用外部CSS。因此，在`<title>`标签之后插入以下代码。
- en: '[PRE30]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Now we will create a CSS file. Open up a new document and save it as `cinema.css`,
    as this is what we referred to in step 6\. Next, enter the following code into
    `cinema.css:`
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将创建一个CSS文件。打开一个新文档，将其保存为`cinema.css`，因为这是我们步骤6中提到的。接下来，将以下代码输入到`cinema.css`中：
- en: '[PRE31]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: This is the code for the CSS classes and ID selectors that are used to build
    the scaffold of our application. You might want to refresh yourself by going back
    to [Chapter 1](ch01.html "Chapter 1. What is JavaScript Testing?"),*What is JavaScript
    Testing*, if you have forgotten how CSS works.
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是用于构建应用程序框架的CSS类和ID选择器的代码。如果您忘记了CSS是如何工作的，您可能想回到[第1章](ch01.html "Chapter 1. What
    is JavaScript Testing?")，*什么是JavaScript测试*，复习一下。
- en: Now, we will decide on the size of the *seats* on the grid, and other important
    properties.
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，我们将决定网格上*座位*的大小和其他重要属性。
- en: We will define the width, height, background color, and text color of the seats.
    Append the following code to `cinema.css:`
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将定义座位的宽度、高度、背景颜色和文本颜色。将以下代码添加到`cinema.css`中：
- en: '[PRE32]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The previous code defines the size, color, and background for all of the "seats"
    in our cinema. Now we are down to the final step in creating the layout and design
    of our application.
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 之前的代码为我们的电影院中的所有“座位”定义了大小、颜色和背景。现在我们在创建应用程序的布局和设计方面迈出了最后一步。
- en: We will now define the layout and colors of our grid, which contains our seats.
    The completed CSS code can be found in the `source code` folder `cinema-incomplete`,
    in the file `cinema.css`. Append the following code to `cinema.css:`
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将定义包含我们的座位的网格的布局和颜色。完成的CSS代码可以在`cinema-incomplete`文件夹的`source code`文件夹中的`cinema.css`文件中找到。将以下代码添加到`cinema.css`中：
- en: '[PRE33]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'This CSS code basically defines each column of the grid. Once you are done
    with this, save it as `cinema.css` and `cinema.html`. Make sure that these files
    are in the same folder. Open up `cinema.html` in your web browser, and you should
    see something similar to the following screenshot:'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这段CSS代码基本上定义了网格的每一列。一旦你完成了这个，将其保存为`cinema.css`和`cinema.html`。确保这些文件在同一个文件夹中。打开`cinema.html`在你的网页浏览器中，你应该会看到类似以下屏幕截图的东西：
- en: '![Time for action—coding, modifying, throwing, and catching errors](img/0004_06_01.jpg)'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间—编码、修改、抛出和捕获错误](img/0004_06_01.jpg)'
- en: If you see something amiss, you might want to compare your code to the example
    source code found in the folder `cinema-incomplete`.
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你发现有什么不对劲的地方，你可能想比较一下你的代码和在`cinema-incomplete`文件夹中找到的示例源代码。
- en: Now that we are done with the design and layout of our application, it is time
    for us to add in the behaviors of the application. The completed code example
    for the following section can be found in the folder `cinema-complete` of *Chapter
    6*.
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在我们已经完成了应用程序的设计和布局，是时候为我们添加应用程序的行为了。以下部分的完整代码示例可以在*第6章*的`cinema-complete`文件夹中找到。
- en: 'We will be using an external JavaScript file. So let us add the following code
    snippet before the`</head>` tag:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用一个外部的JavaScript文件。所以让我们在`</head>`标签之前添加以下代码片段：
- en: '[PRE34]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Now let us create a new file, and name it `cinema.js`. We will focus on creating
    the ticket booking mechanism. Because we will be booking tickets by clicking on
    the seats, we need some mechanism to handle the click event. Because we have already
    included the `onclick="checkBooking(this)`" in the HTML code, what we need to
    do now is create a function that handles the click event. Add the following code
    into `cinema.js:`
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们创建一个新的文件，命名为`cinema.js`。我们将专注于创建票务预订机制。因为我们将通过点击座位来预订票，所以我们需要一个处理点击事件的机制。因为我们在HTML代码中已经包含了`onclick="checkBooking(this)"`，我们现在需要做的是创建一个处理点击事件的函数。将以下代码添加到`cinema.js`中：
- en: '[PRE35]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Notice that the previous code checks for the `innerHTML` of the `div` element
    and checks to see if it is `<p>Available</p>`. If it is, this means that the seat
    is available and we can proceed with booking the seat. If not, the seat is booked
    and a click on the `div` element will result in removing the booking of the seat.
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，之前的代码检查了`div`元素的`innerHTML`，并检查它是否为`<p>Available</p>`。如果是，这意味着座位是可用的，我们可以继续预订座位。如果不是，座位已被预订，点击`div`元素将导致取消座位的预订。
- en: With that in mind, we need two more functions that will help us with the booking
    and removal of the booking of the seats.
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 带着这个想法，我们需要再写两个函数，以帮助我们进行座位预订和取消预订。
- en: We will now create two more functions, to book or to remove booking of the seats.
    Prepend the following code to `cinema.js:`
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将创建两个更多的函数，用于预订或取消座位的预订。在`cinema.js`前添加以下代码：
- en: '[PRE36]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: We have used a global variable to keep track of the number of tickets or seats
    booked. What the previous functions are doing is that they will increase or decrease
    (as appropriate) `counterNumReservations` and, at the same time, change the HTML
    contents of the `div` elements to reflect the status of the booking process. In
    this case, the seat that is booked will be black in color.
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们使用了一个全局变量来跟踪预订的票数或座位数。之前的函数所做的就是它们将增加或减少（如适当）`counterNumReservations`，同时改变`div`元素的内容，以反映预订过程的状态。在这种情况下，被预订的座位将是黑色的。
- en: Now, save your file and click on the seats. You should be able to receive visual
    feedback on the booking process.
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，保存你的文件，点击座位。你应该能够收到关于预订过程的视觉反馈。
- en: We will move on to the form handling mechanism.
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将转移到表单处理机制。
- en: 'The form handling mechanism basically handles the following: calculating total
    spending, the total meal quantity, the amount of money that the user has paid,
    the change (if any), and also other possible errors or conditions, such as whether
    enough money is paid, if the money has been paid in hundreds, and so on. With
    that in mind, we will create the following function:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 表单处理机制基本上处理以下内容：计算总消费、总餐量、用户支付的金额、找零（如有）、以及其他可能的错误或条件，如是否支付了足够的金额、是否使用了百元大钞等。有了这个思路，我们将创建以下函数：
- en: '[PRE37]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: In order to create code that is modular, we have split the functionality down
    into separate functions. For instance, `success()` and `failure()` are used to
    create the HTML contents, which will show the status of the booking process.
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了创建模块化的代码，我们将功能划分为单独的函数。例如，`success()`和`failure()`用于创建HTML内容，显示预订过程的状态。
- en: Similarly, notice that we will need to create other functions for calculating
    meal quantity, checking total money spent, and so on. These functions are created
    based on what we have learnt from *Chapter 1* to *Chapter 5*, so I'll go on quickly.
    So now, let us create these functions.
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 同样地，注意我们将需要为计算餐量、检查总消费金额等创建其他函数。这些函数是基于我们从*第1章*到*第5章*所学习的内容创建的，所以我将快速进行。现在，让我们创建这些函数。
- en: 'We will now create various functions for calculating the meal quantity, the
    total meal price, the total ticket price, and so on. We''ll start with calculating
    the meal quantity:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将为计算餐量、总餐价、总票价等创建各种函数。我们从计算餐量开始：
- en: '[PRE38]'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Now, we''ll write the function for calculating the meal price:'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，我们将编写用于计算餐价的函数：
- en: '[PRE39]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Next is the function for calculating the ticket price:'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 接下来是用于计算票价的函数：
- en: '[PRE40]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'We''ll now write the function for calculating how much was spent on Sky Walker
    by the user:'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们现在将编写用于计算用户在天行者套餐上花费的函数：
- en: '[PRE41]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Once this has been done, we''ll write a small function that checks how much
    money has been received:'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 完成这一步后，我们将编写一个小函数来核对收到的金额：
- en: '[PRE42]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Now that we are done with the functions that do the bulk of the calculations,
    it''s time to write functions to check if the user has ordered too much Sky Walker:'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 既然我们已经完成了大部分计算的功能函数，是时候编写用于检查用户是否点了过多的天行者套餐的函数了：
- en: '[PRE43]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Once we are done with the previous step, it''s time to check if the user paid
    too little money:'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 完成上一步后，是时候检查用户是否支付了太少的钱：
- en: '[PRE44]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'As stipulated at the beginning, we will also need to check to see if the user
    paid in hundred dollar notes. This is done as follows:'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 正如一开始所规定的，我们还需要检查用户是否使用了百元大钞支付。这样做如下：
- en: '[PRE45]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Finally, the functions for creating the HTML content that reflects the booking
    status are as follows:'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最后，创建反映预订状态的HTML内容的函数如下：
- en: '[PRE46]'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Phew! That was quite a bit of coding! You might want to save your files and
    test your application in your browser. You should have a full working application,
    assuming that you have entered the code correctly. The completed code up to this
    stage can be found in the `cinema-complete` folder.
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 哇！编写了不少代码！你可能想保存你的文件并在浏览器中测试你的应用程序。你应该有一个完整运行的应用程序，前提是你正确输入了代码。至此阶段的完整代码可以在`cinema-complete`文件夹中找到。
- en: Although we have just been through a tedious process, it was a necessary process.
    You might ask why you are coding first instead of testing immediately. My answer
    is that firstly, in the real business world, it is very likely that we need to
    write code and then test the code that we have written. Secondly, if I were to
    create a tutorial and ask you to test the code without knowing what the code is,
    it might leave you hanging on the cliff, as you might not know what to test for.
    Most importantly, the approach that we have taken allows you to practice your
    coding skills and understand what the code is about.
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 虽然我们刚刚经历了一个繁琐的过程，但这是一个必要的过程。你可能会问为什么我们首先要编写代码而不是立即测试。我的回答是，首先，在真实的企业世界中，我们很可能会先编写代码然后再测试我们编写的代码。其次，如果我要创建一个教程并让你测试代码，而不知道代码是什么，这可能会让你处于困境，因为你可能不知道要测试什么。最重要的是，我们采取的方法允许你练习编程技能并理解代码的内容。
- en: This will help you to understand how to apply the `try`, `catch`, and other
    built-in exceptions object in your code; we will be doing this right now.
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将帮助你理解如何在代码中应用`try`、`catch`和其他内置异常对象；我们现在就会进行这个操作。
- en: 'We will now create a function that will be used to throw and catch our errors
    by using built-in objects. Now, open `cinema.js` and prepend the following code
    at the top of the document:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将创建一个函数，用于通过使用内置对象抛出和捕获我们的错误。现在，打开`cinema.js`并在文档顶部添加以下代码：
- en: '[PRE47]'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: The previous code will form the scaffold of our `catchError()` function. Basically,
    what this function does is to catch the error (or potential error) and test to
    see what type of error it is. We will be seeing two sample usages of this function
    in this example.
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 之前的代码将构成我们的`catchError()`函数的框架。基本上，这个函数所做的就是捕获错误（或潜在的错误），并测试它是什么类型的错误。在这个例子中，我们将看到这个函数的两个示例用法。
- en: The first example is a simple example to show how we can use `catchError()`
    in other functions so that we can catch any real or potential errors. In the second
    example, we will throw and catch a `TypeError` by using `catchError()`.
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 第一个例子是一个简单的例子，展示我们如何在其他函数中使用`catchError()`，以便我们可以捕获任何实际或潜在的错误。在第二个例子中，我们将使用`catchError()`抛出和捕获一个`TypeError`。
- en: The completed code for this stage can be found in the folder `cinema-error-catching`.
    Take note that the bulk of the code did not change, except for the addition of
    the `catchError()` and some minor additions to the `addBooking()` function.
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个阶段的完整代码可以在`cinema-error-catching`文件夹中找到。请注意，除了添加`catchError()`和`addBooking()`函数的一些小改动外，大部分代码都没有改变。
- en: 'We will now try to catch a `ReferenceError` (or `TypeError`, if you are using
    Internet Explorer) by adding the following code snippet within the `try` block:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将现在尝试通过在`try`块中添加以下代码片段来捕获一个`ReferenceError`（如果你使用的是Internet Explorer，则为`TypeError`）：
- en: '[PRE48]'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Next, add the following code at the top of the function `addBooking()`:'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 接下来，在函数`addBooking()`顶部添加以下代码：
- en: '[PRE49]'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: What we are trying to do here is to stop execution of our JavaScript code if
    we find any errors. In the above code snippet, we pass a variable, `counterNumReservations`,
    into `catchError()` as an example.
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们在这里试图做的是，如果我们发现任何错误，就停止JavaScript代码的执行。在上面的代码片段中，我们向`catchError()`传递了一个变量，`counterNumReservations`，作为示例。
- en: 'Now, save the file and test the program. The program should be working normally.
    However, if you now change the code in the `try` block to:'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，保存文件并测试程序。程序应该正常工作。然而，如果你现在将`try`块中的代码更改为：
- en: '[PRE50]'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: where testing is not defined, you will receive a `ReferenceError` (if you are
    using Firefox browser) or `TypeError` (if you are using Internet Explorer) when
    you execute your application.
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在测试未定义的地方，当你执行你的应用程序时，你将收到一个`ReferenceError`（如果你使用的是Firefox浏览器）或`TypeError`（如果你使用的是Internet
    Explorer）。
- en: The previous simple example shows that you can pass variables into the `catchError()`
    function to check if it's what you want.
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 之前的简单示例显示，你可以向`catchError()`函数中传递变量，以检查它是否是你想要的。
- en: Now, let us move on to something more difficult.
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，让我们来做一些更难的事情。
- en: 'We will now try to `throw` and `catch` a `TypeError`. Let us first remove the
    changes that we made in the previous example. Now what we are doing here is checking
    to see if the object passed into the `addBooking()` function is the `nodeType`
    that we want. We can achieve this by adding the following code at the top of the
    `addBooking()` function:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将现在尝试抛出和捕获一个`TypeError`。首先，移除上一个示例中我们所做的更改。我们在这里所做的就是检查传递到`addBooking()`函数中的对象是否是我们想要的`nodeType`。通过在`addBooking()`函数顶部添加以下代码，我们可以实现这一点：
- en: '[PRE51]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Take note of the above lines in the code. What we have done is that we are getting
    the `nodeType` of the `id` element. The result of this will be used as an argument
    for the `catchError()` function. For some basic details about `nodeType`, please
    visit [http://www.w3schools.com/htmldom/dom_nodes_info.asp](http://www.w3schools.com/htmldom/dom_nodes_info.asp).
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意上述代码行。我们所做的是获取`id`元素的`nodeType`。这个结果将被用作`catchError()`函数的参数。关于`nodeType`的一些基本细节，请访问[http://www.w3schools.com/htmldom/dom_nodes_info.asp](http://www.w3schools.com/htmldom/dom_nodes_info.asp)。
- en: 'Now, remove whatever changes you have done to `catchError()`, and add the following
    code to the `try` block:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，移除你对`catchError()`所做的任何更改，并在`try`块中添加以下代码：
- en: '[PRE52]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Notice that we are testing for the `nodeType` by checking the resulting integer.
    Anything that is not correct (the `correct` variable is 1) will result in an error,
    as shown in the `if` statement block.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们通过检查结果整数来测试`nodeType`。任何不正确的东西（`correct`变量是1）都会导致错误，如`if`语句块所示。
- en: Save the file, and then run your example. You should first receive an alert
    box telling you that the **Correct nodeType is 1**, followed by the message **TypeError**.
    Next, you will see the message **This is wrong** (which is a personalized message)
    and finally the message **ok, all is done** indicating the end of the `catchError()`
    function.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 保存文件，然后运行你的示例。你应该首先收到一个警告框，告诉你**正确的nodeType是1**，然后是消息**TypeError**。接下来，你会看到消息**这是错误的**（这是一个个性化消息）和最后的消息**好的，一切都完成了**，表示`catchError()`函数的结束。
- en: What we have done is that we have thrown our own errors in response to different
    error types. In our case here, we wanted to make sure that we are passing the
    correct `nodeType`. If not, it is an error and we can throw our own error.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所做的是针对不同的错误类型抛出自定义错误。在我们的案例中，我们想要确保我们传递了正确的`nodeType`。否则，这是一个错误，我们可以抛出自定义错误。
- en: With that, we'll end this example.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些，我们将结束这个示例。
- en: Have a go hero—using catchError function to check input
  id: totrans-261
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 有勇气尝试的英雄——使用catchError函数检查输入
- en: 'Now that you have covered quite a bit of code and gained new knowledge, you
    might want to try this out: use the `catchError()` function to check the user''s
    input for correctness. How would you go about doing that? Here are some ideas
    to help you get going:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 既然你已经覆盖了不少代码并获得了一些新知识，你可能想尝试一下：使用`catchError()`函数来检查用户输入的正确性。你会怎么进行呢？以下是一些帮你开始的想法：
- en: You might want to make sure that the input values go through `catchError()`
    before passing them to some other function.
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可能想确保输入的值在传递给其他函数之前经过`catchError()`。
- en: Will you implement `catchError()` within other functions? Or are the values
    passed to `catchError()` immediately upon input and then passed to other functions?
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你会在其他函数中实现`catchError()`吗？还是输入时立即传递给`catchError()`的值，然后传递给其他函数？
- en: Summary
  id: totrans-265
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We have covered quite a few concepts in this chapter. The most important is
    using JavaScript's exception handling mechanisms through the built-in objects,
    and using these objects together with `try, catch`, and `finally` statements.
    We then tried to apply these concepts into the cinema ticket booking application
    that we created.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中我们已经覆盖了不少概念。最重要的是使用内置对象通过JavaScript的异常处理机制，以及这些对象与`try, catch`和`finally`语句一起使用。然后我们尝试将这些概念应用到我们创建的电影票预订应用程序中。
- en: 'We also learnt the following topics:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还学习了以下主题：
- en: Issues that occur when using scripts together, such as name clashing and combining
    event handlers to make the code more compact
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当使用脚本一起时发生的问题，如名称冲突和组合事件处理程序以使代码更加紧凑。
- en: Why we need to use JavaScript libraries, and the issues to consider, such as
    the availability of documentation, tutorials, plugins, and a testing suite
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么我们需要使用JavaScript库，以及需要考虑的问题，如文档的可用性、教程、插件和测试套件。
- en: How we can make use of tools such as Selenium to test GUI and widgets add-ons
    for libraries (these will be covered in more detail in [Chapter 8](ch08.html "Chapter 8. Testing
    Tools"))
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们如何利用像Selenium这样的工具来测试库的GUI和小部件插件（这些将在[第8章](ch08.html "Chapter 8. Testing Tools")中详细介绍）。
- en: How we can write error messages, or our own messages, to the console log
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们如何可以编写错误消息，或者我们自己的消息，到控制台日志。
- en: How to perform exception handling by using JavaScript built-in objects and using
    these together with the `try, catch`, and `finally` statements
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何通过使用JavaScript内置对象进行异常处理，并使用这些对象与`try, catch`和`finally`语句一起使用。
- en: How to use JavaScript's exception handling mechanisms in a sample application
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在示例应用程序中使用JavaScript的异常处理机制。
- en: Up to this chapter, we have been using manual ways to test our code, albeit
    now using more advanced testing methods. In the next chapter, we will learn how
    to use different debugging tools to make debugging, which is a part of testing,
    easier. This will include using tools such as the IE8 Developer Tools, the Firebug
    extension for Firefox, the Google Chrome Web Browser Inspector, and the JavaScript
    debugger.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经使用手动方式测试我们的代码，尽管现在使用更先进的测试方法。在下一章中，我们将学习如何使用不同的调试工具来使调试更容易，这将是测试的一部分。这将包括使用如IE8开发者工具、Firefox的Firebug扩展、Google
    Chrome网络浏览器检查器以及JavaScript调试器等工具。
- en: What makes such tools powerful is that they allow us to test in a less obtrusive
    manner; for instance, there's no need for us to use `alert()`, as we can, in general,
    write error messages to the built-in consoles of these tools. This is a real time-saver
    and will make our testing process a lot smoother. We will learn about these different
    debugging tools in the
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 这些工具之所以强大，是因为它们允许我们以一种不那么侵扰的方式进行测试；例如，我们通常无需使用`alert()`，因为我们可以将这些工具的内置控制台作为日志输出窗口。这能节省大量时间，并使我们的测试过程更加顺畅。我们将在接下来的课程中学习这些不同的调试工具。
