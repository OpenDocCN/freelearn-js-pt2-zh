- en: Chapter 1. JavaScript for Modern Web Applications
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 1 章. 为现代网络应用程序的 JavaScript
- en: The growth in web development evolved with a rapid pace in recent years. Most
    of the business applications that developed on a desktop platform are now shifted
    to the web platform, and the reason is the ease of access and continuous addition
    of rich capabilities on the web platform. Typically, any web application that
    provides the characteristics of the desktop applications is considered as rich
    web application. Thus, it involves extensive use of JavaScript and its frameworks
    and libraries.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 近年来，网络开发以惊人的速度发展。大多数在桌面平台上开发的企业应用程序现在都转移到了网络平台，原因是访问的便捷性和网络平台不断添加的丰富功能。通常，任何提供桌面应用程序特征的网络应用程序都被认为是富网络应用程序。因此，它涉及大量使用
    JavaScript 及其框架和库。
- en: JavaScript plays an important role in developing rich applications and allows
    developers to do less server-side post-backs and call server-side functions through
    ajaxified requests. Not only this, but now many companies and communities are
    developing good frameworks such as Angular, Knockout, ReactJS, and so on to bring
    state-of-the-art and groundbreaking capabilities. Microsoft has also released
    the **WinJS** library to access mobile native device features such as camera,
    storage, and so on from a web application running on mobile browsers. **myNFC**
    is also a great JavaScript library that allows developers to create applications
    for smartphones.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 在开发富应用程序中扮演着重要的角色，并允许开发人员减少服务器端的回调并通过 ajaxified 请求调用服务器端函数。不仅如此，现在许多公司和社区都在开发像
    Angular、Knockout、ReactJS 这样的优秀框架，带来最先进和突破性的功能。微软还发布了**WinJS**库，使从移动浏览器上运行的网页应用程序能够访问移动原生设备功能，如相机、存储等。**myNFC**
    也是一个很棒的 JavaScript 库，它允许开发人员为智能手机创建应用程序。
- en: Importance of JavaScript
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript 的重要性
- en: All the client-side frameworks are based on JavaScript. Being an ASP.NET developer,
    we should have solid concepts of JavaScript before using or integrating them in
    our applications. JavaScript is the client-side scripting language and one of
    the most popular programming languages of all times that run on top of a browser.
    When working on a web development project, this language serves you in many better
    ways to make **user interface** (**UI**) responsive. With JavaScript, you can
    manipulate HTML page **Document Object Model** (**DOM**) elements, call server-side
    code through ajaxified requests and bring new rich experience to your customers.
    There are many innovations being done at the core JavaScript library, and different
    frameworks and various libraries have been developed.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 所有客户端框架都是基于 JavaScript 的。作为一名 ASP.NET 开发者，在使用或将其集成到我们的应用程序之前，我们应该对 JavaScript
    有扎实的概念。JavaScript 是客户端脚本语言，是有史以来最受欢迎的编程语言之一，在浏览器上运行。当在 web 开发项目中工作时，这种语言以许多更好的方式为您服务，使**用户界面**（**UI**）具有响应性。通过
    JavaScript，您可以操作 HTML 页面**文档对象模型**（**DOM**）元素，通过 ajaxified 请求调用服务器端代码，并向您的客户带来新的丰富体验。在
    JavaScript 库的核心进行了许多创新，并且已经开发出了不同的框架和各种库。
- en: What is JavaScript?
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JavaScript 是什么？
- en: JavaScript is a programming language created in 1995 by Brenden Eich. Initially,
    it was only supported by Netscape Browser, but later they decided to release a
    standard known as ECMA specification to let other browsers implement and provide
    engines to execute JavaScript on their browsers. The reason for providing the
    standard is to have the complete specification details for the party to follow
    and provide consistent behavior.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 是一种由 Brendden Eich 在 1995 年创造的编程语言。最初，它只被 Netscape Browser 支持，但后来他们决定发布一个被称为
    ECMA 规范的标准，让其他浏览器实现并提供引擎来在其浏览器上执行 JavaScript。提供这个标准的原因是为了让遵循方拥有完整的规格细节并保持行为的一致性。
- en: Earlier it was only targeted to execute on browsers and perform client-side
    operations that work with HTML pages and provide features such as manipulating
    DOM elements and defining event handlers and other functionalities. Later, and
    in recent years, it has become a powerful language and not only bounded to the
    client-side operations. With Node.js, we can use JavaScript on server side and
    there are various modules and plugins provided by Node to perform I/O operations,
    server-side events, and more.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，它主要针对在浏览器上执行，并执行与 HTML 页面一起工作的客户端操作，如操作 DOM 元素、定义事件处理程序和其他功能。后来，在近年来，它已经成为一种强大的语言，并不仅限于客户端操作。通过
    Node.js，我们可以在服务器端使用 JavaScript，并且 Node 提供了各种模块和插件来执行 I/O 操作、服务器端事件等。
- en: Comparing runtimes
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 比较运行时
- en: As this book is targeted for .NET developers, let's compare the JavaScript runtime
    with .NET runtime. There are a few things in common, but the basic runtime is
    different.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 由于本书针对.NET开发者，让我们将JavaScript运行时与.NET运行时进行比较。有一些共同之处，但基本的运行时不同。
- en: In .NET, **Common Language Runtime** (**CLR**) does the **just-in-time** (**JIT**)
    compilation on the code that is running and provides memory management. JIT compilation
    is done on the **Intermediate Language** (**IL**) code that is generated once
    you build your project.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在.NET中，**公共语言运行时**（**CLR**）对正在运行的代码进行**即时编译**（**JIT**）并提供内存管理。JIT编译是在你构建项目后生成的一次性编译的**中间语言**（**IL**）代码上进行的。
- en: In the JavaScript world, browser engine is the runtime for the JavaScript language.
    Every browser interprets JavaScript in its own way, but follows the ECMA scripting
    standards. Different browsers have different implementations, for example, Microsoft
    Edge uses Chakra engine, Chrome uses V8, and Firefox has Monkey engines. Initially,
    JavaScript was implemented as an interpreted language, but few modern browsers
    now perform JIT compilation. Every engine provides a set of services such as memory
    management, compilation, and processing.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript世界中，浏览器引擎是JavaScript语言的运行时。每个浏览器都以自己的方式解释JavaScript，但都遵循ECMA脚本标准。不同的浏览器有不同的实现，例如，Microsoft
    Edge使用Chakra引擎，Chrome使用V8，Firefox有Monkey引擎。最初，JavaScript被实现为一种解释型语言，但现在很少有现代浏览器进行JIT编译。每个引擎都提供一套服务，如内存管理、编译和处理。
- en: 'The following diagram shows the comparison between both the architectures:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表展示了两种架构的比较：
- en: '![Comparing runtimes](img/00002.jpeg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![比较运行时](img/00002.jpeg)'
- en: The JavaScript parser parses and tokenizes the JavaScript code into a syntax
    tree. All the browsers, except Google V8, parse the syntax tree and generate a
    bytecode that finally converts into a machine code through JIT compilation. On
    the other hand, Google V8 engine parses the syntax tree and instead of generating
    a bytecode first, it directly generates the machine code.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript解析器解析和标记JavaScript代码，将其转化为语法树。所有浏览器（除了Google V8）解析语法树并生成字节码，最终通过JIT编译转换成机器码。另一方面，Google
    V8引擎解析语法树，而不是首先生成字节码，它直接生成机器码。
- en: The .NET source code is compiled by its own language compiler, such as C# or
    VB.NET compiler and passes through the several stages of the compiler pipeline
    to generate an IL code. This IL code is then read by the JIT compiler that generates
    the native machine code.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`.NET`源代码由其自己的语言编译器编译，例如C#或VB.NET编译器，并经过编译器管道的几个阶段生成IL代码。然后JIT编译器读取这个IL代码并生成原生机器代码。'
- en: Setting up your environment
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置你的环境
- en: Before going through this book, let's set up your environment. There are many
    renowned editors available in the market to create JavaScript projects such as
    Sublime Text, Komodo IDE, NetBeans, Eclipse, and more, but we will use Visual
    Studio 2015 that came up with some good improvements, helping developers to work
    on JavaScript in a better way than before.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在阅读本书之前，让我们设置一下你的环境。市场上有很多著名的编辑器可用于创建JavaScript项目，如Sublime Text、Komodo IDE、NetBeans、Eclipse等，但我们将继续使用Visual
    Studio 2015，它带来了一些很好的改进，帮助开发者比以前更好地工作在JavaScript上。
- en: To proceed, let's download and install Visual Studio 2015\. You can download
    the Visual Studio 2015 community edition from [https://www.visualstudio.com/](https://www.visualstudio.com/),
    it's a free version and provides certain improvements as described in the following
    section.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们下载并安装Visual Studio 2015。你可以从[https://www.visualstudio.com/](https://www.visualstudio.com/)下载Visual
    Studio 2015社区版，这是一个免费版本，并提供以下章节中描述的某些改进。
- en: New editing experience of JavaScript in Visual Studio 2015 IDE
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Visual Studio 2015 IDE中的JavaScript新编辑体验
- en: 'The new Visual Studio 2015 IDE provides many rich features for developing web
    applications and various templates are available to create projects on different
    frameworks and application models. The earlier version already supported IntelliSense,
    colorization, and formatting but the new Visual Studio 2015 IDE has some more
    improvements that are as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 新的Visual Studio 2015 IDE为开发网络应用程序提供了许多丰富的功能，并且有各种模板可用于根据不同框架和应用程序模型创建项目。早期版本已经支持IntelliSense、着色和格式化，但新的Visual
    Studio 2015 IDE还有一些更多的改进，如下所示：
- en: Added support for the ECMAScript 6 scripting language, which is formally known
    as ES2015\. With the new ES2015, many features have been added, you can now define
    classes, lambdas, spread operator, and proxy objects. So, with Visual Studio 2015,
    you can get all IntelliSense using these features in your JavaScript code.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增加了对ECMAScript 6脚本语言的支持，正式名称为ES2015。有了新的ES2015，添加了许多功能，现在您可以定义类、lambda表达式、展开操作符和代理对象。因此，借助Visual
    Studio 2015，您可以在JavaScript代码中使用这些功能并获得所有IntelliSense。
- en: Support for popular JavaScript client-side frameworks such as Angular, ReactJS,
    and so on.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持流行的JavaScript客户端框架，如Angular、ReactJS等。
- en: Documentation comments that help you add comments to your JavaScript methods
    and show the description when you use them:![New editing experience of JavaScript
    in Visual Studio 2015 IDE](img/00003.jpeg)
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文档注释可以帮助您为JavaScript方法添加注释，并在使用它们时显示描述：![Visual Studio 2015 IDE中JavaScript的新编辑体验](img/00003.jpeg)
- en: IntelliSense for new JavaScript APIs such as touch event and Web Audio API.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对新的JavaScript API（如触摸事件和Web音频API）的支持。
- en: You can use tokens such as `//TODO`, `//HACK`, and `//UNDONE`, and it gives
    you a listing in the **Task List** window that helps to trace the to-do items:![New
    editing experience of JavaScript in Visual Studio 2015 IDE](img/00004.jpeg)
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以使用诸如`//TODO`、`//HACK`和`//UNDONE`之类的标记，它会在**任务列表**窗口中为您提供列表，帮助您追踪待办事项：![Visual
    Studio 2015 IDE中JavaScript的新编辑体验](img/00004.jpeg)
- en: With JavaScript files, Visual Studio 2015 provides the same navigation bar we
    used to see when writing classes in any .NET language. Selecting and navigating
    to different methods of JavaScript is far easier with this feature:![New editing
    experience of JavaScript in Visual Studio 2015 IDE](img/00005.jpeg)
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有了JavaScript文件，Visual Studio 2015提供了我们在编写任何.NET语言类时所熟悉的导航栏。使用此功能，选择并导航到不同的JavaScript方法要容易得多：![Visual
    Studio 2015 IDE中JavaScript的新编辑体验](img/00005.jpeg)
- en: Programming in JavaScript
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在JavaScript中编程
- en: JavaScript is one of the most powerful languages that plays a vital role in
    any web development project and delivers client-side support and rich functionality.
    In this section, we will discuss the core concepts of writing programs in JavaScript
    and use them in web applications.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript是最强大的语言之一，在任何网页开发项目中都发挥着至关重要的作用，提供客户端支持并实现丰富的功能。在本节中，我们将讨论在JavaScript中编写程序的核心概念，并将其应用于网页应用程序中。
- en: Core fundamentals of JavaScript
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JavaScript的核心基础知识
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: When the page loads, it will show the pop-up message and a text as **This is
    a simple text**. The browser's JavaScript engine executes any script that is defined
    under the `<script>` tag and runs the statements defined within this block. Any
    statement that is defined directly under the scripting tag is executed every time
    the page is loaded.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 页面加载时，会显示弹出消息和一段文字，如**这是一个简单的文本**。浏览器执行定义在`<script>`标签下的任何脚本，并运行此块内的语句。定义在脚本标签直接下方的任何语句在页面加载时都会执行。
- en: 'Similarly, we can also define the JavaScript within the `<body>` section of
    the HTML page:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们也可以在HTML页面的`<body>`部分定义JavaScript：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Tip
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: It is a good idea to place scripts at the bottom of the page because the compilation
    can slow down the page loading.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 将脚本放在页面底部是一个好主意，因为编译可能会减慢页面加载速度。
- en: Normally, in every project, irrespective of the project size, separating the
    `<script>` section from HTML makes the code look cleaner and easy to maintain.
    JavaScript file extensions are named `.js` and you can also create these files
    separately in some scripts folder and reference them in our HTML page.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在每一个项目中，无论项目规模大小，将`<script>`部分与HTML分离可以使代码看起来更整洁，也更容易维护。JavaScript文件扩展名称为`.js`，您还可以在一些脚本文件夹中单独创建这些文件，并在我们的HTML页面中引用它们。
- en: 'In Visual Studio, you can easily create a JavaScript file using the **Add**
    | **JavaScript File** option as shown in the following:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在Visual Studio中，您可以使用**添加** | **JavaScript文件**选项轻松创建JavaScript文件，如下所示：
- en: '![Adding JavaScript to an HTML page](img/00006.jpeg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![将JavaScript添加到HTML页面](img/00006.jpeg)'
- en: 'Once the file is created, we can directly write the JavaScript syntax without
    any `<script></script>` tags. JavaScript files can be referenced in your HTML
    page using the `src` attribute of `<script></script>` tags. Here we referenced
    `test.js` in the HTML page:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 文件创建完成后，我们就可以直接编写JavaScript语法，而无需使用`<script></script>`标签。JavaScript文件可以通过在HTML页面中使用`<script></script>`标签的`src`属性来引用。在这里，我们在HTML页面中引用了`test.js`：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Placing the `<script>` tag either in the `<head>` or in the `<body>` section
    depends on the page. If your page referencing some large JavaScript files takes
    a long time to load, it is better to define them at the end of the `<body>` section.
    This is a better approach, so when the browser starts parsing your page, it is
    not stuck downloading your scripts and delaying the rendering. On the other hand,
    we can define JavaScript files in the `<head>` section only if they do not impact
    the performance or page life cycle. Scripts defined at the bottom get parsed when
    the whole page loads. There are also a few attributes such as `async` and `defer`
    that we can use within the `<script>` tag and most of the browsers support this.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 将`<script>`标签放在`<head>`或`<body>`部分取决于页面。如果您的页面引用一些大的JavaScript文件需要很长时间来加载，最好将它们定义在`<body>`部分的末尾。这是一个更好的方法，因此当浏览器开始解析您的页面时，它不会因为下载脚本而卡住，导致渲染延迟。另一方面，我们只有在它们不会影响性能或页面生命周期的情况下，才能在`<head>`部分定义JavaScript文件。在底部定义的脚本在整个页面加载后进行解析。我们还可以在`<script>`标签内使用一些属性，如`async`和`defer`，大多数浏览器支持这些属性。
- en: 'The following is an example showing the use of `async` in the `<script>` tag:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个使用`async`在`<script>`标签中的示例：
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Scripts defined with `async` are executed asynchronously without blocking the
    browser to load the page. However, if multiple scripts are there, then each script
    will be executed asynchronously and at the same time. This may lead to the possibility
    of completing the second script before the first one gets completed and might
    throw some errors if one is dependent on the other. For example, when working
    with some client-side frameworks, such as Angular framework, JavaScript code that
    is using Angular components is dependent on AngularJS library, and in this case,
    if our custom JS files are loaded before the AngularJS library on which they are
    dependent, they will throw an exception.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`async`定义的脚本异步执行，不会阻塞浏览器加载页面。然而，如果存在多个脚本，那么每个脚本都将异步执行且同时进行。这可能导致第二个脚本在第一个脚本完成之前就完成了，如果其中一个脚本依赖于另一个脚本，可能会抛出一些错误。例如，当使用某些客户端框架时，如Angular框架，使用Angular组件的JavaScript代码依赖于AngularJS库；在这种情况下，如果我们的自定义JS文件在它们依赖的AngularJS库之前被加载，它们将会抛出一个异常。
- en: 'To overcome this scenario, we can use `defer` to execute scripts in a sequence.
    We can use `defer` as follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 为了克服这种情况，我们可以使用`defer`按顺序执行脚本。我们可以这样使用`defer`：
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The basic difference between `async` and `defer` is that `async` downloads the
    file during HTML parsing and pauses the HTML parser to execute it until it is
    completely downloaded, whereas `defer` downloads the file during the HTML parsing
    and executes it after the HTML parser is completed.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`async`和`defer`之间的基本区别是，`async`在HTML解析期间下载文件，并在完全下载后暂停HTML解析器执行它，而`defer`在HTML解析期间下载文件，并在HTML解析器完成后执行它。'
- en: Statements in JavaScript
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: JavaScript中的语句
- en: Statements are the collection of words, expressions, and operators to perform
    a specific task. Like other programming languages, statements in JavaScript could
    also be assigning a value to the variable, performing arithmetic operations, implementing
    conditional logic, iterating through collection, and so on.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 语句是执行特定任务的单词、表达式和操作符的集合。与其他编程语言一样，JavaScript中的语句也可以是给变量赋值、执行算术操作、实现条件逻辑、遍历集合等。
- en: 'For example:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'However, you can use semicolons with the `do while` loop:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，您可以在`do while`循环中使用分号：
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Tip
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If multiple statements are defined in the same line, they should be separated
    by a semicolon, otherwise they will be treated as a single statement. On different
    lines, a semicolon is not mandatory but a good practice to use.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果同一行中定义了多个语句，它们应该用分号分隔，否则它们将被视为一个语句。在不同行中，分号不是必须的，但使用分号是一个好习惯。
- en: Literals and variables
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 字面量和变量
- en: 'There are two types of values in JavaScript: literals or fixed values and variables.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript中有两种类型的值：字面量或固定值和变量。
- en: Literals could be number, string, or date objects.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 字面量可以是数字、字符串或日期对象。
- en: 'For example:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE8]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Variables are used to store values. In JavaScript, we can define variables using
    the `var` keyword. JavaScript is not a type-safe language and the type is identified
    when the value is assigned.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 变量用于存储值。在JavaScript中，我们可以使用`var`关键字定义变量。JavaScript不是一种类型安全的语言，变量的类型在分配值时确定。
- en: 'For example:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE9]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Data types
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据类型
- en: Every programming language has certain data types available to hold specific
    data. For example, in C#, we can use `String` to hold string values, `int` to
    hold 32-bit integer value, `DateTime` to hold value in the date and time format,
    and so on. JavaScript does not provide strong data types such as C# and other
    programming languages, and it's a loosely typed language. As per the latest ECMA
    6 standard, JavaScript provides six primitive data types and an object. All primitive
    data types are immutable, this means that assigning a new value will be allocated
    into a separate memory. Object is mutable and its values can be changed.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 每种编程语言都有特定的数据类型可用于存储特定数据。例如，在C#中，我们可以使用`String`来存储字符串值，`int`来存储32位整数值，`DateTime`来存储日期和时间的值等等。JavaScript没有提供像C#和其他编程语言那样的强数据类型，它是一种松散类型的语言。根据最新的ECMA
    6标准，JavaScript提供了六个原始数据类型和一个对象。所有的原始数据类型都是不可变的，这意味着分配新值将会分配到单独的内存中。对象是可变的，其值可以被改变。
- en: 'The primitive types are as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 原始类型如下：
- en: '**Boolean**: This holds the logical value `true` or `false`.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Boolean**: 这持有逻辑值`true`或`false`。'
- en: '**Null**: This holds the `null` value.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Null**: 这持有`null`值。'
- en: '**Undefined**: This is a variable that does not assign a value and has value
    as undefined.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Undefined**: 这是没有分配值并且值为undefined的变量。'
- en: '**Number**: This holds numeric values. The size of the `number` type is double-precision
    64 bit in which the number (fraction) is stored from 0 to 51 bits, the exponent
    in 11 bits from 52 to 62, and sign in 1 bit 63.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Number**: 这持有数值。`number`类型的尺寸是双精度64位，其中数值（分数）从0存储到51位，指数从52存储到62位，符号位是63位。'
- en: '**String**: This holds any kind of textual value.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**String**: 这持有任何类型的文本值。'
- en: Complex types are termed as **object**. In JavaScript, the object is formulated
    in a JSON format.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 复杂类型被称为**对象**。在JavaScript中，对象是以JSON格式编写的。
- en: Array in JavaScript
  id: totrans-74
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: JavaScript中的数组
- en: 'Array is used to store collections of data. You can simply define an array
    in JavaScript as shown in the following:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 数组用于存储数据集合。你可以在JavaScript中简单地定义一个数组，如下所示：
- en: '[PRE10]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: You can access them through the array index. The index starts from 0 till the
    number of items in the array.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过数组索引来访问它们。索引从0开始，直到数组中的项目数。
- en: 'We can access the array items as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以如下访问数组项目：
- en: '[PRE11]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In order to get the total number of items in an array, you can use the `length`
    property:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获取数组中项目总数，你可以使用`length`属性：
- en: '[PRE12]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The following is a list of some of the most commonly used methods:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些最常用方法的列表：
- en: '| Method | Description |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 描述 |'
- en: '| --- | --- |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `indexOf()` | This returns the first index of an element available within
    the array equal to the specific value, returns `-1` if not found. |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| `indexOf()` | 这会返回数组中等于特定值的元素的第一个索引，如果没有找到则返回`-1`。 |'
- en: '| `lastIndexOf()` | This returns the last index of an element available within
    an array equal to the specified value, returns `-1` if not found. |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| `lastIndexOf()` | 这会返回数组中等于指定值的元素的最后一个索引，如果没有找到则返回`-1`。 |'
- en: '| `pop()` | This deletes the last element from an array and returns that element.
    |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| `pop()` | 这会从数组中删除最后一个元素并返回那个元素。 |'
- en: '| `push()` | This adds one element to an array and returns the length of an
    array. |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| `push()` | 这会在数组中添加一个元素并返回数组长度。 |'
- en: '| `reverse()` | This reverses the order of elements in an array. The first
    element becomes the last and last one becomes the first. |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| `reverse()` | 这会反转数组中元素的顺序。第一个元素变成最后一个，最后一个元素变成第一个。 |'
- en: '| `shift()` | This deletes the first element and returns that element. |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| `shift()` | 这会删除第一个元素并返回那个元素。 |'
- en: '| `splice()` | This is used to add or remove elements from an array. |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| `splice()` | 这用于向数组中添加或删除元素。 |'
- en: '| `toString()` | This returns all the elements in a string representation.
    |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| `toString()` | 这会返回所有元素的字符串表示。 |'
- en: '| `unshift()` | This adds elements to the front of an array and returns the
    new length. |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| `unshift()` | 这会将元素添加到数组的前端并返回新长度。 |'
- en: Tip
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: Detailed steps to download the code bundle are mentioned in the Preface of this
    book. Please have a look.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 下载代码包的详细步骤在本书的前言中提到。请查看。
- en: The code bundle for the book is also hosted on GitHub at [https://github.com/PacktPublishing/JavaScript-For-.NET-Developers](https://github.com/PacktPublishing/JavaScript-For-.NET-Developers).
    We also have other code bundles from our rich catalog of books and videos available
    at [https://github.com/PacktPublishing/](https://github.com/PacktPublishing/).
    Check them out!
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的代码包也托管在GitHub上，地址为[https://github.com/PacktPublishing/JavaScript-For-.NET-Developers](https://github.com/PacktPublishing/JavaScript-For-.NET-Developers)。我们还有来自我们丰富书籍和视频目录的其他代码包，可在[https://github.com/PacktPublishing/](https://github.com/PacktPublishing/)找到。去看看吧！
- en: What is JSON?
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: JSON是什么？
- en: '**JavaScript Object Notation** (**JSON**) is a lightweight, interchangeable
    format for defining objects in JavaScript. Any kind of object can be defined through
    JSON and it is used to build universal data structures. Whether it''s a simple
    object, arrays, nested arrays, or complex object, each can handle in the JSON
    format.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**JavaScript对象表示法**（**JSON**）是定义JavaScript中对象的轻量级、可交换格式。任何类型的对象都可以通过JSON定义，并用于构建通用数据结构。无论是简单对象、数组、嵌套数组还是复杂对象，都可以在JSON格式中处理。'
- en: Simple objects in JSON
  id: totrans-100
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: JSON中的简单对象
- en: '[PRE13]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We can access these object properties as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以按以下方式访问这些对象属性：
- en: '[PRE15]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Declaring arrays in JSON
  id: totrans-105
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在JSON中声明数组
- en: 'The following code snippet shows the way of declaring arrays in JSON:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段显示了在JSON中声明数组的方式：
- en: '[PRE16]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'According to the preceding declaration of an array, it can be accessed as follows:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面声明的数组，可以按以下方式访问：
- en: '[PRE17]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Nesting data in JSON
  id: totrans-110
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在JSON中嵌套数据
- en: 'The JSON format easily handles nested arrays. Let''s look at the complex objects
    containing an `employee` object that contains the `Experiences` array with the
    nested array to hold projects, and each project has a nested array to hold technologies
    used in each project:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: JSON格式可以轻松处理嵌套数组。让我们看看包含`employee`对象的复杂对象，该对象包含`Experiences`数组，该数组包含嵌套数组以持有项目，每个项目都有一个嵌套数组以持有每个项目中所使用的技术：
- en: '[PRE18]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Then assign numeric to the same `res` variable:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 然后将数字分配给同一个`res`变量：
- en: '[PRE21]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Finally, concatenate string `3` to the `res` variable that holds the following
    numeric, but due to the higher precedence of numerical value, the resultant value
    becomes `5`:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将字符串`3`连接到持有以下数字的`res`变量中，但由于数值具有更高的优先级，结果值变成了`5`：
- en: '[PRE22]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: So, no matter what was the type of the variable first assigned to it, it will
    change its type based on the assignment and dynamically handle the conversions.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，无论最初分配给它的变量类型是什么，它都会根据赋值改变其类型，并动态处理转换。
- en: Elements of JavaScript
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JavaScript的元素
- en: Here are some of the important elements of JavaScript that are essential to
    learn before we start programming in JavaScript.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们在开始用JavaScript编程之前必须学习的JavaScript的一些重要元素。
- en: Constants in JavaScript
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: JavaScript中的常量
- en: Constants in JavaScript can be defined with a `const` keyword. Constants are
    the immutable values that are known at compile time, and values do not change
    throughout the life cycle of the program.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript中的常量可以用`const`关键字定义。常量是在编译时已知的不可变值，在整个程序的生命周期中值不会改变。
- en: 'The following is the JavaScript code showing the assignment of a constant variable.
    When using `const`, `var` is not required and you can declare constant values
    with only the `const` keyword:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是显示常量变量赋值的JavaScript代码。当使用`const`时，不需要`var`，您只需使用`const`关键字即可声明常量值：
- en: '[PRE23]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Comments
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注释
- en: Comments can be added with `//` and `/* */`. To comment a single line, you can
    use `//`, otherwise `/* */` for a block of code.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 注释可以用`//`和`/* */`添加。要注释单行，可以使用`//`，否则使用`/* */`来注释代码块。
- en: 'The following is the JavaScript code showing the way of commenting a single
    line or block of code:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是用JavaScript代码注释单行或代码块的方式：
- en: '[PRE24]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Case sensitivity
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 大小写敏感性
- en: JavaScript is a case-sensitive language and it follows the Pascal naming convention
    to define variables and methods.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript是一种大小写敏感的语言，它遵循Pascal命名约定来定义变量和方法。
- en: For example, if the method name is `doWork()`, it can only be accessed by calling
    it with the exact case, and calling either `DoWork()` or `Dowork()` will not work
    and throw exception.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果方法名是`doWork()`，只能通过以确切的大小写调用它，而调用`DoWork()`或`Dowork()`将不起作用并抛出异常。
- en: Character set
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 字符集
- en: JavaScript is based on a Unicode character set and follows the Unicode Standard.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript基于Unicode字符集，并遵循Unicode标准。
- en: Note
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**What is the Unicode Standard?**'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '**什么是Unicode标准？**'
- en: It is a worldwide coding standard that most languages use. C# and VB.NET follow
    the same Unicode Standard. It provides a unique number for every character, for
    example, `A = 41`, `a = 61`, and so on.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 它是一个全球编码标准，大多数语言都会使用。C# 和 VB.NET 遵循相同的 Unicode 标准。它为每一个字符提供了一个唯一的数字，例如，`A =
    41`，`a = 61`，等等。
- en: The current version of the Unicode Standard is Unicode 8.0.0 and the documentation
    can be located at [http://www.unicode.org/versions/Unicode8.0.0/](http://www.unicode.org/versions/Unicode8.0.0/).
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 当前的 Unicode 标准版本是 Unicode 8.0.0，相关文档可访问 [http://www.unicode.org/versions/Unicode8.0.0/](http://www.unicode.org/versions/Unicode8.0.0/)。
- en: Expressions
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表达式
- en: Expression can be recognized as the statement of code that assigns some value
    to the variable. Expressions are categorized into two types.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 表达式可以被认为是将某些值赋给变量的代码语句。表达式分为两种类型。
- en: 'The first type of expression can be termed as simple expressions that assigns
    a value to the variable:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种表达式可以称为简单表达式，它将值赋给变量：
- en: '[PRE25]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The preceding example denotes the simple expression of assigning numeric value
    `2` to an `x` variable.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个示例表示将数值 `2` 赋给变量 `x` 的简单表达式。
- en: 'The second type of expression can be termed as any arithmetic or string operation
    to the values on the right and assigning them to any variable. These type of expressions
    perform the operation first before assigning value to the variable:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种类型的表达式可以称为对右侧值进行任何算术或字符串操作，并将它们赋给任何变量。这类表达式在赋值给变量之前先执行操作：
- en: '[PRE26]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This is an example of the second type of expression that adds two numbers and
    assigns the resultant value to the `x` variable. Same goes for the second statement
    that performs the string concatenation operation and assigns the `Hello World`
    value to the `x` variable.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这是第二种类型的表达式的示例，它将两个数字相加，并将结果值赋给 `x` 变量。第二个语句执行字符串连接操作，并将 `Hello World` 值赋给 `x`
    变量。
- en: The this keyword
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 这个关键字
- en: Just like C# and other object-oriented languages, JavaScript has objects and
    there are certain ways to define classes, functions, and so on that we will study
    later in this chapter. Just like C#, in JavaScript, we can access the object and
    its properties through the `this` keyword. Let's take a look at some examples
    showing the scope of the `this` keyword in JavaScript.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 就像 C# 和其他面向对象的语言一样，JavaScript 也有对象，并且有一些定义类、函数等等的方法，我们将在本章后面学习。就像在 C# 中一样，在
    JavaScript 中，我们可以通过 `this` 关键字访问对象及其属性。让我们看看一些显示 JavaScript 中 `this` 关键字作用域的例子。
- en: 'The following is a `customer` object that contains a few properties and the
    utilization of the `this` keyword:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个包含几个属性和 `this` 关键字使用的 `customer` 对象：
- en: '[PRE27]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'In the preceding example, we have defined a JavaScript object that contains
    three properties and a function. To access these properties, we can use the `this`
    keyword just like C#. However, we can also access the properties using the `customer`
    variable, as shown in the following:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一个例子中，我们定义了一个包含三个属性和一个函数的 JavaScript 对象。要访问这些属性，我们可以像在 C# 中一样使用 `this` 关键字。然而，我们也可以使用
    `customer` 变量来访问属性，如下所示：
- en: '[PRE28]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The scope of the `this` keyword is limited within the boundary of an object.
    Whereas, the `customer` variable in the preceding example could be defined somewhere
    else on the page and may lead to an incorrect behavior. It is a better approach
    to use the `this` keyword wherever possible and avoid using object variables directly.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`this` 关键字的范围限制在对象的范围之内。然而，在前一个例子中的 `customer` 变量可能定义在页面的其他地方，可能导致不当的行为。尽可能使用
    `this` 关键字并避免直接使用对象变量是一个更好的方法。'
- en: 'All variables and functions defined directly under the `<script>` tag are termed
    as global variables and functions. We can also access them through the `this`
    keyword. In this case, `this` will be referred as the global window object and
    not the child, that is, the `customer` object we have used in the previous example:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 直接定义在 `<script>` 标签下的所有变量和函数称为全局变量和函数。我们也可以通过 `this` 关键字访问它们。在这种情况下，`this` 将被称为全局窗口对象，而不是前面例子中使用的子对象，即
    `customer` 对象：
- en: '[PRE29]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Let''s take a look at the complete example, where we have global variables
    defined, as well as child objects, and the scope of `this` will be determined
    based on the context of its call:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看完整的示例，其中我们定义了全局变量，以及子对象，`this` 的作用域将根据其调用的上下文来确定：
- en: '[PRE31]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: In this preceding example, we will get two JavaScript alert messages. The first
    alert will display **Scott Watson**, which is defined globally, and the second
    popup shows the customer name, e-mail address, and mobile number. Hence, we can
    use `this` in two places, but the scope is determined based on the context from
    where it is calling from.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们将收到两个 JavaScript 警告消息。第一个警告将显示**Scott Watson**，它是全局定义的，第二个弹出窗口显示客户姓名、电子邮件地址和手机号码。因此，我们可以在两个地方使用`this`，但作用域是根据它从中调用的上下文确定的。
- en: Sequence of code execution in JavaScript
  id: totrans-160
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 JavaScript 中的代码执行顺序
- en: When programming in JavaScript, we have to keep the sequence of defining things
    before they get called. Considering the preceding example, if we define the `customer`
    object after the `ShowMessage()` method, it will not be recognized and nothing
    will be displayed.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 编程中，我们必须保持定义事物的顺序，然后再调用它们。考虑前面的示例，如果我们定义`customer`对象在`ShowMessage()`方法之后，它将不会被识别，什么也不会显示。
- en: Using the this keyword on a calling method
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在调用方法上使用 this 关键字
- en: 'Let''s take a look at the sample HTML page that has a JavaScript function named
    `Multiply` and takes two parameters: `obj` and `val`. This method will be called
    when the user enters any input into the textbox and it will pass the reference
    of the textbox control at the first parameter. This can be passed through the
    `this` keyword:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看一个名为`Multiply`的示例 HTML 页面，它有一个 JavaScript 函数，接受两个参数：`obj`和`val`。当用户在文本框中输入任何内容时，此方法将被调用，并将文本框控件的引用作为第一个参数传递。可以通过`this`关键字传递：
- en: '[PRE32]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The function statement and expression
  id: totrans-165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 函数声明和表达式
- en: 'The function statements are a way of defining methods in JavaScript. Each function
    has a signature, containing the name and parameters passed in. Functions can be
    declared in many ways in JavaScript. For example, the following is the sample
    `GetPerson(id)` function that returns the `person` object based on the ID passed
    as a parameter. This is the normal way of declaring function in JavaScript:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 函数声明是定义 JavaScript 中方法的一种方式。每个函数都有一个签名，包括名称和传入的参数。在 JavaScript 中，函数可以通过多种方式声明。例如，以下是`GetPerson(id)`函数的示例，该函数根据作为参数传递的
    ID 返回`person`对象。这是在 JavaScript 中声明函数的正常方式：
- en: '[PRE33]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The `function` return type is computed at runtime and not part of the function
    signature. Returning values is not mandatory and you can keep functions without
    returning any values.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '`function` 的返回类型是在运行时计算的，而不是函数签名的一部分。返回值不是强制的，你可以保持函数不返回任何值。'
- en: 'On the other hand, anonymous functions do not have any name and they can either
    be passed as an argument to other functions or defined without a function name.
    The following are the examples of anonymous functions:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，匿名函数没有名称，它们可以作为其他函数的参数传递，或者没有函数名称定义。以下是无名函数的示例：
- en: '[PRE34]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Another example of defining anonymous function and passing it as a parameter
    is as follows:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 定义匿名函数并将其作为参数传递的另一个示例如下：
- en: '[PRE35]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The function expression is equivalent to function, but the only difference is
    that it should not start with the function name.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 函数表达式与函数等价，唯一的区别是它不应该以函数名开始。
- en: Class statement and expression
  id: totrans-174
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 类声明和表达式
- en: With ECMAScript 6, we can create classes in JavaScript. Just like other programming
    languages, we can create a class using the `class` keyword. With this, we can
    write cleaner code than developing functions that were represented as classes
    in the earlier version of ECMAScript.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 随着 ECMAScript 6，我们可以在 JavaScript 中创建类。与其他编程语言一样，我们可以使用`class`关键字创建类。借助于此，我们可以比在
    ECMAScript 的早期版本中用函数表示类的方式写出更清晰的代码。
- en: 'Let''s take a look at the `Rectangle` class that calculates an area:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看计算面积的`Rectangle`类：
- en: '[PRE36]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Each class should have one constructor and give an error if multiple constructors
    are specified. Class expression is another way of defining classes. Just like
    anonymous functions, we can define classes in a similar way.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 每个类应该有一个构造函数，如果指定了多个构造函数，则应该报错。类表达式是定义类的一种另一种方式。就像匿名函数一样，我们可以用类似的方式定义类。
- en: 'Let''s take a look at the example of the same class defined earlier:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看前面定义的同一个类的示例：
- en: '[PRE37]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The next chapter will cover more details about classes and the attributes and
    keywords available to structure them.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将详细介绍类以及构建它们的属性和关键字。
- en: Grouping operator
  id: totrans-182
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分组运算符
- en: For any arithmetic expression, JavaScript uses the **BODMAS** rule. The precedence
    will be given to brackets then multiplication, division, addition, and subtraction.
    The grouping operator is used to give higher precedence to the expression if any
    of the member in the expression have higher precedence by default.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何算术表达式，JavaScript使用**BODMAS**规则。优先级将首先给括号，然后是乘法、除法、加法和减法。分组运算符用于给表达式中任何成员的默认优先级更高的表达式更高的优先级。
- en: 'For example:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE38]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The resultant `x` will be `7` as multiplication gets the higher precedence.
    However, what if we need to perform addition first?
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 结果`x`将是`7`，因为乘法有更高的优先级。然而，如果我们需要先进行加法呢？
- en: 'We can use grouping operator as follows that gives the result `9`:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以像下面这样使用分组运算符，结果为`9`：
- en: '[PRE39]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: new
  id: totrans-189
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: new
- en: 'In the same way as C#, the `new` keyword is used to instantiate any object
    in JavaScript. In order to create an instance of any user-defined or predefined
    type, use the `new` keyword:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 与C#一样，`new`关键字用于在JavaScript中实例化任何对象。为了创建任何用户定义或预定义类型的实例，使用`new`关键字：
- en: '[PRE40]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: super
  id: totrans-192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: super
- en: 'The `super` keyword is used to call methods of the parent object. In C#, we
    use the `base` keyword to call the base class method or properties. In JavaScript,
    we can use it as follows:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '`super`关键字用于调用父对象的方法。在C#中，我们使用`base`关键字来调用基类的方法或属性。在JavaScript中，我们可以这样使用：'
- en: '[PRE41]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Operators
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运算符
- en: Operators are the object used to manipulate values of an operand. For example,
    `1 + 2` results in `3`, where `1` and `2` are operands and `+` is an operator.
    In JavaScript, we can use almost all the operators to concatenate strings, do
    arithmetic operations, and so on. In this section, let's see what type of operators
    we can use when writing programs in JavaScript language.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 运算符是用来操作操作数值的对象。例如，`1 + 2`的结果是`3`，其中`1`和`2`是操作数，`+`是一个运算符。在JavaScript中，我们可以使用几乎所有的运算符来连接字符串，进行算术运算等。在本节中，让我们看看在JavaScript语言编程时我们可以使用哪些类型的运算符。
- en: 'We will discuss the following operators in this section:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本节讨论以下运算符：
- en: Assignment operators
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 赋值运算符
- en: Arithmetic operators
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 算术运算符
- en: Unary operators
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一元运算符
- en: Comparison operators
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比较运算符
- en: Logical operators
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 逻辑运算符
- en: Bitwise operators
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 位运算符
- en: Bitwise shift operators
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 位移运算符
- en: The typeof operator
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类型of运算符
- en: The void operator
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 空值运算符
- en: The delete operator
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除运算符
- en: Miscellaneous operators
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 杂项运算符
- en: Assignment operators
  id: totrans-209
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 赋值运算符
- en: Assignment operator is represented as (`=`) and the assignment is done from
    right to left.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 赋值运算符表示为（`=`），并且赋值是从右到左进行的。
- en: For example, `x=y` means that the value of `y` is assigned to `x`.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`x=y`意味着`y`的值被赋给`x`。
- en: Arithmetic operators
  id: totrans-212
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 算术运算符
- en: 'The following is a list of arithmetic operators you can use to perform addition,
    subtraction, division, and multiplication and use them with the assignment statements:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一系列你可以用来进行加法、减法、除法和乘法以及与赋值语句一起使用的算术运算符：
- en: '| Name | Operator | Meaning |'
  id: totrans-214
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 运算符 | 意义 |'
- en: '| --- | --- | --- |'
  id: totrans-215
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Addition | `x + y` | The value of `x` is added to `y` |'
  id: totrans-216
  prefs: []
  type: TYPE_TB
  zh: '| 加法 | `x + y` | `x`的值加上`y` |'
- en: '| Subtraction | `x – y` | The value of `y` is subtracted from `x` |'
  id: totrans-217
  prefs: []
  type: TYPE_TB
  zh: '| 减法 | `x – y` | `x`的值减去`y` |'
- en: '| Division | `x / y` | The value of `x` is divided by `y` |'
  id: totrans-218
  prefs: []
  type: TYPE_TB
  zh: '| 除法 | `x / y` | `x`的值除以`y` |'
- en: '| Multiplication | `x * y` | The value of `x` is multiplied to `y` |'
  id: totrans-219
  prefs: []
  type: TYPE_TB
  zh: '| 乘法 | `x * y` | `x`的值乘以`y` |'
- en: '| Remainder | `x % y` | The value of `x` is divided by `y` and the remainder
    is returned |'
  id: totrans-220
  prefs: []
  type: TYPE_TB
  zh: '| 取模运算符 | `x % y` | `x`的值除以`y`，返回余数 |'
- en: '| Addition assignment | `x += y` | `x = x + y`that is, the value of `x` and
    `y` will be added and assigned to `x` |'
  id: totrans-221
  prefs: []
  type: TYPE_TB
  zh: '| 加法赋值运算符 | `x += y` | `x = x + y`，即`x`和`y`的值相加，结果赋值给`x` |'
- en: '| Subtraction assignment | `x -= y` | `x= x – y`that is, the value of `x` and
    `y` will be subtracted and assigned to `x` |'
  id: totrans-222
  prefs: []
  type: TYPE_TB
  zh: '| 减法赋值运算符 | `x -= y` | `x = x - y`，即`x`和`y`的值相减，结果赋值给`x` |'
- en: '| Multiplication assignment | `x *= y` | `x = x * y`that is, the value of `x`
    and `y` will be multiplied and assigned to `x` |'
  id: totrans-223
  prefs: []
  type: TYPE_TB
  zh: '| 乘法赋值运算符 | `x *= y` | `x = x * y`，即`x`和`y`的值相乘，结果赋值给`x` |'
- en: '| Division assignment | `x /= y` | `x = x / y`that is, the value of `x` will
    be divided by `y` and assigned to `x` |'
  id: totrans-224
  prefs: []
  type: TYPE_TB
  zh: '| 除法赋值运算符 | `x /= y` | `x = x / y`，即`x`的值除以`y`，结果赋值给`x` |'
- en: '| Remainder assignment | `x %= y` | `x = x % y`that is, the value of `x` will
    be divided by `y` and the remainder will be assigned to `x` |'
  id: totrans-225
  prefs: []
  type: TYPE_TB
  zh: '| 取模赋值运算符 | `x %= y` | `x = x % y`，即`x`的值除以`y`，余数赋值给`x` |'
- en: '| Exponentiation assignment | `x **= y` | `x = x ** y`that is, the value of
    `x` will be exponentially multiplied twice to `y` and assigned to `x` |'
  id: totrans-226
  prefs: []
  type: TYPE_TB
  zh: '| 幂运算赋值 | `x **= y` | 即`x = x ** y`，`x`的值将 exponentially 乘以两次`y`并赋值给`x` |'
- en: Unary operators
  id: totrans-227
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一元运算符
- en: 'Unary operator works with only one operand. It can be used for increment, decrement,
    inversion, and so on:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 一元运算符只与一个操作数一起使用。它可以用于递增、递减、取反等：
- en: '| Name | Operator | Meaning |'
  id: totrans-229
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 运算符 | 意义 |'
- en: '| --- | --- | --- |'
  id: totrans-230
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Increment operator | `x++` | The value of `x` will be incremented by `1`
    |'
  id: totrans-231
  prefs: []
  type: TYPE_TB
  zh: '| 递增运算符 | `x++` | `x`的值将增加`1` |'
- en: '| Decrement operator | `x--` | The value of `x` will be decremented by `1`
    |'
  id: totrans-232
  prefs: []
  type: TYPE_TB
  zh: '| 递减运算符 | `x--` | `x`的值将减少`1` |'
- en: '| Logical complement operator | `!(x)` | This inverts the value of `x` |'
  id: totrans-233
  prefs: []
  type: TYPE_TB
  zh: '| 逻辑补码运算符 | `!(x)` | 这将`x`的值取反 |'
- en: Comparison operators
  id: totrans-234
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 比较运算符
- en: '[PRE42]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Logical OR
  id: totrans-237
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 逻辑或
- en: '[PRE44]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Logical NOT
  id: totrans-240
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 逻辑非
- en: '[PRE46]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Bitwise operators
  id: totrans-243
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 按位运算符
- en: Bitwise operators consider each number or operand as binary (a combination of
    `0` and `1`). Every number has specific binary corresponding to it. For example,
    number `1` binary is represented as `0001` and `5` represented as `0101`.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 按位运算符将每个数字或操作数视为二进制（`0`和`1`的组合）。每个数字都有特定的二进制对应。例如，数字`1`的二进制表示为`0001`，`5`表示为`0101`。
- en: Bitwise operators work on 32-bit numbers and any numeric operand is first converted
    into a 32-bit number and then converted back to JavaScript number.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 按位运算符对32位数字进行操作，任何数值操作数首先转换为32位数字，然后转换回JavaScript数字。
- en: Bitwise operators perform their operations in binary and return the result as
    numbers.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 按位运算符在二进制中进行操作并返回数字结果。
- en: For example, `x` is `1` and `y` is `9`.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`x`是`1`，`y`是`9`。
- en: '`1` represented as `0001`.'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '`1`表示为`0001`。'
- en: '`9` represented as `1001`.'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '`9`表示为`1001`。'
- en: Bitwise AND
  id: totrans-250
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 按位与
- en: 'Bitwise AND is represented as `&` and the following is the comparison of each
    bit of operand `1` and `9`. If both value on each bit is `1`, the result will
    be `1`, otherwise `0`:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 按位与表示为`&`，下面是操作数`1`和`9`的每位比较。如果每个位上的值都是`1`，结果将是`1`，否则为`0`：
- en: '| Number = 1 | Number = 9 | Result |'
  id: totrans-252
  prefs: []
  type: TYPE_TB
  zh: '| 数字 = 1 | 数字 = 9 | 结果 |'
- en: '| --- | --- | --- |'
  id: totrans-253
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| 0 | 1 | 0 |'
  id: totrans-254
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 1 | 0 |'
- en: '| 0 | 0 | 0 |'
  id: totrans-255
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 0 | 0 |'
- en: '| 0 | 0 | 0 |'
  id: totrans-256
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 0 | 0 |'
- en: '| 1 | 1 | 1 |'
  id: totrans-257
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 1 | 1 |'
- en: 'In the JavaScript code, we can use it as follows:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript代码中，我们可以如下使用它：
- en: '[PRE48]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Finally, the resultant value will be `0001`, which is equal to `1`.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，结果值将是`0001`，等于`1`。
- en: Bitwise OR
  id: totrans-261
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 按位或
- en: 'Bitwise OR is represented as `|` and the following is how the bit OR will be
    operated:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 按位或表示为`|`，下面是按位或的运算方式：
- en: '| Number = 1 | Number = 9 | Result |'
  id: totrans-263
  prefs: []
  type: TYPE_TB
  zh: '| 数字 = 1 | 数字 = 9 | 结果 |'
- en: '| --- | --- | --- |'
  id: totrans-264
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| 0 | 1 | 1 |'
  id: totrans-265
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 1 | 1 |'
- en: '| 0 | 0 | 0 |'
  id: totrans-266
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 0 | 0 |'
- en: '| 0 | 0 | 0 |'
  id: totrans-267
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 0 | 0 |'
- en: '| 1 | 1 | 1 |'
  id: totrans-268
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 1 | 1 |'
- en: 'The following code snippet shows the usage in JavaScript:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码片段展示了在JavaScript中的使用：
- en: '[PRE49]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Finally, the resultant value will be `1001`, which is equal to `9`.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，结果值将是`1001`，等于`9`。
- en: Bitwise NOT
  id: totrans-272
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 按位非
- en: Bitwise NOT is represented as `~` and it works on a single operand and inverse
    each bit of the binary.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 按位非表示为`~`，它作用于单个操作数并反转每个二进制位。
- en: For example, if the number `9` is represented as `1001`, it will be converted
    to a 32-bit number and then bitwise NOT will make it `11111111111111111111111111110110`,
    which is equal to `-10`.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果数字`9`表示为`1001`，它将转换为32位数字，然后按位非将其变为`11111111111111111111111111110110`，等于`-10`。
- en: 'The following is the code snippet:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个代码片段：
- en: '[PRE50]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Bitwise XOR
  id: totrans-277
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 按位异或
- en: Bitwise XOR is represented as `^` and it works with two or more operands.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 按位异或表示为`^`，它与两个或更多操作数一起工作。
- en: 'The following table shows how the bitwise XOR is operated:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的表格展示了按位异或是如何进行的：
- en: '| Number = 1 | Number = 9 | Result |'
  id: totrans-280
  prefs: []
  type: TYPE_TB
  zh: '| 数字 = 1 | 数字 = 9 | 结果 |'
- en: '| --- | --- | --- |'
  id: totrans-281
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| 0 | 1 | 1 |'
  id: totrans-282
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 1 | 1 |'
- en: '| 0 | 0 | 0 |'
  id: totrans-283
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 0 | 0 |'
- en: '| 0 | 0 | 0 |'
  id: totrans-284
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 0 | 0 |'
- en: '| 1 | 1 | 0 |'
  id: totrans-285
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 1 | 0 |'
- en: 'The following code snippet shows the usage in JavaScript:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码片段展示了在JavaScript中的使用：
- en: '[PRE51]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Finally, the resultant value will be `1000`, which is equal to `8`.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，结果值将是`1000`，等于`8`。
- en: Bitwise shift operators
  id: totrans-289
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 按位移位运算符
- en: 'There are three kinds of bitwise shift operators, as follows:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 有三种按位移位运算符，如下：
- en: Bitwise left shift operator
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按位左移运算符
- en: Bitwise right shift operator
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按位右移运算符
- en: Bitwise left shift
  id: totrans-293
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 按位左移
- en: It is represented as `<<` and is used to shift a bit from the right side to
    the binary value of any number.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 它表示为`<<`，用于将位从右侧移到任何数字的二进制值。
- en: For example, number `9` is represented as `01001`, and if we use bitwise left,
    the resultant value will be `10010`, which shifted one bit from the right.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，数字`9`表示为`01001`，如果我们使用位左移，结果值将是`10010`，从右边移动了一位。
- en: 'The following code snippet shows the usage in JavaScript:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段展示了在 JavaScript 中的使用：
- en: '[PRE52]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Finally, the resultant value will be `10010`, which is equal to `18`.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，结果值将是`10010`，等于`18`。
- en: Bitwise right shift
  id: totrans-299
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 位右移
- en: It is represented as `>>` and is used to shift a bit from the left side to the
    binary value of any number.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 它表示为`>>`，用于将位从左侧移动到任何数字的二进制值。
- en: For example, number `9` is represented as `1001`, using bitwise right will give
    the resultant value as `0100`.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，数字`9`表示为`1001`，使用位右移将结果值给出为`0100`。
- en: 'The following code snippet shows the usage in JavaScript:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段展示了在 JavaScript 中的使用：
- en: '[PRE53]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Finally, the resultant value will be `0100`, which is equal to `4`.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，结果值将是`0100`，等于`4`。
- en: The typeof operator
  id: totrans-305
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 类型of 操作符
- en: 'This is used to check whether the type of the variable is an object, undefined,
    number, and so on. In JavaScript, we can use this as follows:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 这用于检查变量的类型是否为对象、未定义、数字等。在 JavaScript 中，我们可以这样使用：
- en: '[PRE54]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Here is the list of possible values returned by the `typeof` operator:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 `typeof` 操作符可能返回的值列表：
- en: '| Value returned | Description |'
  id: totrans-309
  prefs: []
  type: TYPE_TB
  zh: '```Value returned``` | 描述 |'
- en: '| --- | --- |'
  id: totrans-310
  prefs: []
  type: TYPE_TB
  zh: '```---``` | --- |'
- en: '| `"number"` | If operand is a number |'
  id: totrans-311
  prefs: []
  type: TYPE_TB
  zh: '```"number"` | 如果操作数是一个数字 |'
- en: '| `"string"` | If operand is a string |'
  id: totrans-312
  prefs: []
  type: TYPE_TB
  zh: '```"string"` | 如果操作数是一个字符串 |'
- en: '| `"boolean"` | If operand is a Boolean |'
  id: totrans-313
  prefs: []
  type: TYPE_TB
  zh: '```"boolean"` | 如果操作数是一个布尔值 |'
- en: '| `"object"` | If operand is an object |'
  id: totrans-314
  prefs: []
  type: TYPE_TB
  zh: '```"object"` | 如果操作数是一个对象 |'
- en: '| `null` | If operand is null |'
  id: totrans-315
  prefs: []
  type: TYPE_TB
  zh: '```null``` | 如果操作数是 null |'
- en: '| `"undefined"` | If operand is not defined |'
  id: totrans-316
  prefs: []
  type: TYPE_TB
  zh: '```"undefined"` | 如果操作数未定义 |'
- en: The void operator
  id: totrans-317
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: void 操作符
- en: '[PRE55]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'When the page runs and the user clicks on the link, it will display an alert
    message box as shown in the following:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 当页面运行且用户点击链接时，将显示以下警告消息框：
- en: '![The void operator](img/00007.jpeg)'
  id: totrans-321
  prefs: []
  type: TYPE_IMG
  zh: '![void 操作符](img/00007.jpeg)'
- en: 'Moreover, passing `0` as an expression within the `void` method will do nothing:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在 `void` 方法内传递 `0` 作为表达式将不做任何事情：
- en: '[PRE57]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Another example here is using `void` to add two numbers and returning `undefined`
    for the assigned operand:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个例子是使用 `void` 添加两个数字，并返回给定操作数的 `undefined`：
- en: '[PRE58]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: The delete operator
  id: totrans-326
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 删除操作符
- en: 'A `delete` operator is used to delete objects and its properties, but not the
    local variables. The following example shows the way you can use the `delete`
    operator in JavaScript:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: '`delete` 操作符用于删除对象及其属性，但不删除局部变量。以下示例展示了如何在 JavaScript 中使用 `delete` 操作符：'
- en: '[PRE59]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Calling `country.id` will return `undefined`, as this was already deleted in
    the preceding statement. On the other hand, if we delete the `country` object,
    it would not delete and display the country ID as `1`:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 调用 `country.id` 将返回 `undefined`，因为这在之前的语句中已经被删除。另一方面，如果我们删除 `country` 对象，它不会被删除并显示国家
    ID 为 `1`：
- en: '[PRE60]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Miscellaneous operators
  id: totrans-331
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项操作符
- en: '[PRE61]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Spread operator
  id: totrans-334
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 展开操作符
- en: The spread operator is represented as (`…`). It is used where you expect multiple
    arguments to be passed in for a function call.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 展开操作符表示为（`…`）。当期望在函数调用中传递多个参数时使用。
- en: For example, if your function is taking five parameters, you can either pass
    those values one by one as the parameter value when calling that method or keep
    them in an array and pass that array through the spread operator.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你的函数需要五个参数，你可以一个接一个地传递这些值作为调用该方法时的参数值，或者将它们放在一个数组中，并通过展开操作符传递该数组。
- en: 'The following code snippet shows the actual example of using this in JavaScript:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段展示了在 JavaScript 中的实际示例：
- en: '[PRE63]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Built-in display methods in JavaScript
  id: totrans-339
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 JavaScript 中的内置显示方法
- en: The following are the display methods available in JavaScript to provide notifications
    and messages to users in different forms.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 JavaScript 中可用的显示方法，用于以不同形式向用户提供通知和消息。
- en: Displaying messages
  id: totrans-341
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 显示消息
- en: 'There are the following three types of pop-up dialog boxes:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是三种弹出对话框类型：
- en: Alert message box
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 警告消息框
- en: Confirmation message box
  id: totrans-344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确认消息框
- en: Prompt message box
  id: totrans-345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提示消息框
- en: Alert box
  id: totrans-346
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 警告框
- en: 'Using `window.alert()`, we can pop up an alert dialog box:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `window.alert()`，我们可以弹出一个警告对话框：
- en: '[PRE64]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Confirm box
  id: totrans-349
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 确认框
- en: 'Using `window.confirm()`, we can pop up a confirm dialog box that returns the
    event result the user has taken. When a confirm dialog box pops up, it provides
    two action events: **OK** and **Cancel**. If a user click on **OK**, `true` will
    be returned, otherwise `false`. The following code shows the usage of the confirm
    dialog box on your HTML page.'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`window.confirm()`，我们可以弹出一个确认对话框，返回用户所采取的事件结果。当确认对话框弹出时，它提供两个动作事件：**确定**和**取消**。如果用户点击**确定**，将返回`true`，否则返回`false`。以下代码展示了在您的HTML页面上使用确认对话框的方法。
- en: '[PRE65]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Prompt box
  id: totrans-353
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 提示框
- en: Prompt dialog box is used in cases when you want the user to supply the value.
    It can be used in conditions where you require user input.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 提示对话框在需要用户提供值的情况下使用。它可以在需要用户输入的条件下来使用。
- en: 'The following code snippet shows the way of using a prompt message box in the
    JavaScript program:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码片段展示了在JavaScript程序中使用提示消息框的方法：
- en: '[PRE67]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Writing on a page
  id: totrans-357
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 页面上的写入
- en: We can use the `document.write()` method to write anything on the screen.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`document.write()`方法在屏幕上写入任何内容。
- en: 'The following code snippet shows the way of writing any text on a web page
    in JavaScript:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码片段展示了在JavaScript中在网页上编写任何文本的方法：
- en: '[PRE68]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Writing into the browser's console window
  id: totrans-361
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向浏览器的控制台窗口写入
- en: Using `console.log()`, we can write any text into the browser's console window.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`console.log()`，我们可以将任何文本写入浏览器的控制台窗口。
- en: 'The following code snippet shows the way of writing text into the browser console
    window for tracing or debugging purposes in JavaScript:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码片段展示了在JavaScript中为了追踪或调试目的向浏览器控制台窗口写入文本的方法：
- en: '[PRE69]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Browser Object Models in JavaScript
  id: totrans-365
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 浏览器对象模型在JavaScript中
- en: 'JavaScript provides some predefined global objects that you can use to manipulate
    the DOM, close browsers, and so on. The following are the browser objects we can
    use to perform different operations:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript提供了一些预定义的全局对象，您可以使用它们来操作DOM、关闭浏览器等。以下是我们可以用来执行不同操作的浏览器对象：
- en: Window
  id: totrans-367
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 窗口
- en: Navigator
  id: totrans-368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导航器
- en: Screen
  id: totrans-369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 屏幕
- en: History
  id: totrans-370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 历史
- en: Location
  id: totrans-371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 位置
- en: Window
  id: totrans-372
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 窗口
- en: 'Window object refers to the open window in a browser. If in the HTML markup,
    some iframes are defined, a separate window object will created. Through the window
    object, we can access the following objects:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 窗口对象指的是浏览器中打开的窗口。如果在HTML标记中定义了一些iframes，将会创建一个单独的窗口对象。通过窗口对象，我们可以访问以下对象：
- en: All global variables
  id: totrans-374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有全局变量
- en: All global functions
  id: totrans-375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有全局函数
- en: The DOM
  id: totrans-376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DOM
- en: The following shows an example of accessing the DOM from the window object and
    accessing the textbox control.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个从窗口对象访问DOM并访问文本框控制的示例。
- en: Document
  id: totrans-378
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文档
- en: '`window.document` returns the document object and we can use its properties
    and methods for a specific reason:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: '`window.document`返回文档对象，我们可以出于特定原因使用其属性和方法：'
- en: '[PRE70]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'The `window` object itself contains many methods and few of them are as follows:'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: '`window`对象本身包含许多方法，其中一些如下：'
- en: '| Event | Description | Syntax |'
  id: totrans-382
  prefs: []
  type: TYPE_TB
  zh: '| 事件 | 描述 | 语法 |'
- en: '| --- | --- | --- |'
  id: totrans-383
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Close | To close current window | `window.close();` |'
  id: totrans-384
  prefs: []
  type: TYPE_TB
  zh: '| 关闭 | 关闭当前窗口 | `window.close();` |'
- en: '| Open | To open new window | `window.open();` |'
  id: totrans-385
  prefs: []
  type: TYPE_TB
  zh: '| 打开 | 打开新窗口 | `window.open();` |'
- en: '| Move | To move window to the specified position | `window.moveTo();` |'
  id: totrans-386
  prefs: []
  type: TYPE_TB
  zh: '| 移动 | 将窗口移动到指定的位置 | `window.moveTo();` |'
- en: '| Resize | To resize window to specified width and height | `window.resizeTo();`
    |'
  id: totrans-387
  prefs: []
  type: TYPE_TB
  zh: '| 调整大小 | 将窗口调整到指定的宽度和高度 | `window.resizeTo();` |'
- en: Navigator
  id: totrans-388
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 导航器
- en: This object provides the information about the browser. It is beneficial when
    you need to run specific scripts based on the browser version or do something
    specific to the browser. Let's look into the methods it exposes.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 这个对象提供了关于浏览器的信息。当你需要根据浏览器版本运行特定的脚本或者对浏览器进行特定的操作时，它是有益的。我们来看看它暴露的方法。
- en: Properties
  id: totrans-390
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 属性
- en: 'The properties are described as follows:'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 属性如下描述：
- en: '`appCodeName`: This returns the code name of the browser'
  id: totrans-392
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`appCodeName`：这返回浏览器的代码名称'
- en: '`appName`: This returns the name of the browser'
  id: totrans-393
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`appName`：这返回浏览器的名称'
- en: '`appVersion`: This returns the version of the browser'
  id: totrans-394
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`appVersion`：这返回浏览器的版本'
- en: '`cookieEnabled`: This determines whether cookies are enabled in the browser'
  id: totrans-395
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cookieEnabled`：这确定浏览器是否启用了cookies'
- en: '`geoLocation`: This gets the location of the user accessing the page'
  id: totrans-396
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`geoLocation`：这获取访问页面的用户的位置'
- en: '`language`: This returns the language of the browser'
  id: totrans-397
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`language`：这返回浏览器的语言'
- en: '`online`: This determines whether the browser is online'
  id: totrans-398
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`online`：这确定浏览器是否在线'
- en: '`platform`: This returns the platform that the browser has compiled'
  id: totrans-399
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`platform`：这返回浏览器编译的平台'
- en: '`product`: This returns the engine name of the browser'
  id: totrans-400
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`product`: 这返回浏览器的引擎名称。'
- en: '`userAgent`: This returns the user agent header sent by the browser to the
    server'
  id: totrans-401
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`userAgent`: 这返回浏览器发送到服务器的主机代理头。'
- en: 'The example code is as follows:'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个示例代码：
- en: '[PRE71]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'The output is shown as follows:'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下所示：
- en: '![Properties](img/00008.jpeg)'
  id: totrans-405
  prefs: []
  type: TYPE_IMG
  zh: '![属性](img/00008.jpeg)'
- en: Screen
  id: totrans-406
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 屏幕
- en: Through the screen object, you can get information about the user's screen.
    This is helpful to know from which screen the user is viewing the content. If
    it's a mobile browser or standard desktop screen, you can get the size and other
    information and modify the content as required.
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 通过屏幕对象，你可以获取有关用户屏幕的信息。这有助于了解用户从哪个屏幕查看内容。如果是移动浏览器或标准桌面屏幕，你可以获取尺寸和其他信息，并按需修改内容。
- en: Properties
  id: totrans-408
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 属性
- en: 'The properties are described as follows:'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 属性如下描述：
- en: '`availHeight` : This returns the height of the screen'
  id: totrans-410
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`availHeight` : 这返回屏幕的高度。'
- en: '`availWidth`: This returns the width of the screen'
  id: totrans-411
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`availWidth`: 这返回屏幕的宽度。'
- en: '`colorDepth`: This returns the bit depth of the color palette for displaying
    images'
  id: totrans-412
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`colorDepth`: 这返回显示图像的颜色调色板比特深度。'
- en: '`height`: This returns the total height of the screen'
  id: totrans-413
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`height`: 这返回屏幕的总高度。'
- en: '`pixelDepth`: This returns the color resolution (in bits per pixel) of the
    screen'
  id: totrans-414
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pixelDepth`: 这返回屏幕的颜色分辨率（每像素比特数）。'
- en: '`width`: This returns the total width of the screen'
  id: totrans-415
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`width`: 这返回屏幕的总宽度。'
- en: 'The example code is as follows:'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 示例代码如下：
- en: '[PRE72]'
  id: totrans-417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'The output is shown as follows:'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下所示：
- en: '![Properties](img/00009.jpeg)'
  id: totrans-419
  prefs: []
  type: TYPE_IMG
  zh: '![属性](img/00009.jpeg)'
- en: History
  id: totrans-420
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 历史
- en: This contains the URLs that the user visited. You can access it through the
    `window.history` object.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 这包含用户访问的URL。你可以通过`window.history`对象访问它。
- en: You can use this object to navigate to the recently visited links.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用这个对象导航到最近访问的链接。
- en: Methods
  id: totrans-423
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 方法
- en: 'The methods are described as follows:'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 方法如下描述：
- en: '`Window.history.back()`: This loads the previous URL'
  id: totrans-425
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Window.history.back()`: 这加载历史列表中的上一个URL。'
- en: '`Window.history.forward()`: This loads the recent URL in the history list'
  id: totrans-426
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Window.history.forward()`: 这加载历史列表中的最近URL。'
- en: '`Window.history.go()`: This loads a specific URL available in the history list'
  id: totrans-427
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Window.history.go()`: 这加载历史列表中特定的URL。'
- en: Location
  id: totrans-428
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 位置
- en: The location object gives you information about the current URL. Just like history,
    it can also be accessed through `window.location`. There are a few methods and
    properties you can use to perform specific operations.
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 位置对象提供了关于当前URL的信息。就像历史一样，它也可以通过`window.location`访问。有一些方法和属性，你可以用来执行特定操作。
- en: Properties
  id: totrans-430
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 属性
- en: 'The properties are described as follows:'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 属性如下描述：
- en: '`window.location.host`: This returns the hostname and port number of the URL'
  id: totrans-432
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`window.location.host`: 这返回URL的主机名和端口号。'
- en: '`window.location.hostname`: This returns only the hostname of the URL'
  id: totrans-433
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`window.location.hostname`: 这只返回URL的主机名。'
- en: '`window.location.href`: This provides the complete URL'
  id: totrans-434
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`window.location.href`: 这提供完整的URL。'
- en: '`window.location.origin`: This returns the hostname, port number, and protocol
    of the URL'
  id: totrans-435
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`window.location.origin`: 这返回URL的主机名、端口号和协议。'
- en: '`window.location.pathname`: This returns the pathname of the URL'
  id: totrans-436
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`window.location.pathname`: 这返回URL的路径名。'
- en: '`window.location.port`: This returns only the port number of the URL'
  id: totrans-437
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`window.location.port`: 这返回URL的端口号。'
- en: '`window.location.protocol`: This returns the protocol of the URL, for example,
    HTTP or HTTPS'
  id: totrans-438
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`window.location.protocol`: 这返回URL的协议，例如HTTP或HTTPS。'
- en: '`window.location.search`: This returns the query string of the URL'
  id: totrans-439
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`window.location.search`: 这返回URL的查询字符串。'
- en: Methods
  id: totrans-440
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 方法
- en: 'The methods are described as follows:'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 方法如下描述：
- en: '`window.location.assign()`: This loads a new document.'
  id: totrans-442
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`window.location.assign()`: 这加载新文档。'
- en: '`window.location.reload()`: This reloads the current URL.'
  id: totrans-443
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`window.location.reload()`: 这重新加载当前URL。'
- en: '`window.location.replace()`: This can be used to replace the current URL with
    the new one. Replace does not refresh the page, it can only change the URL.'
  id: totrans-444
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`window.location.replace()`: 这可以用来用新URL替换当前URL。替换不会刷新页面，它只能改变URL。'
- en: Summary
  id: totrans-445
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we discussed the basic concepts of JavaScript and how to use
    it in our web applications. We discussed the core fundamentals of declaring variables
    and implementing arrays, functions, and data types to start writing programs in
    JavaScript. In the next chapter, we will discuss some advanced concepts about
    object-oriented programming and working with closures, scopes, and prototype functions
    with practical implementation.
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了JavaScript的基本概念以及如何在我们的网络应用程序中使用它。我们讨论了声明变量和实现数组、函数和数据类型的核心基础，以开始用JavaScript编写程序。在下一章中，我们将讨论一些关于面向对象编程的高级概念，以及与闭包、作用域和原型函数的实际应用一起工作。
