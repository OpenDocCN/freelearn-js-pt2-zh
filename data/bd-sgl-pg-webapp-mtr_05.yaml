- en: Chapter 5. Making Our App Versatile with Routing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。使用路由使我们的应用具有灵活性
- en: Since we've made it to this chapter, we should already have a good understanding
    of Meteor's template system and how data synchronization between a server and
    clients works. After digesting this knowledge, let's get back to the fun part
    and make our blog a real website with different pages.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经到了这一章节，我们应该已经对Meteor的模板系统有一个很好的理解，并且了解服务器与客户端之间数据同步的工作原理。在消化了这些知识后，让我们回到有趣的部分，把我们的博客变成一个具有不同页面的真正网站。
- en: You might ask, "What do pages do in a single-page app?" The term "single page"
    is a bit confusing, as it doesn't mean that our app consists of only one page.
    It's rather a term derived from the current way of doing things, as there is only
    one page sent down from the server. After that, all the routing and paging happens
    in the browser. There aren't any pages requested from the server itself anymore.
    A better term here would be "client-side web application," though **single page**
    is the current used name.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会问，“在单页应用中页面做什么？” “单页”这个术语有点令人困惑，因为它并不意味着我们的应用只由一个页面组成。它更是一个从当前做事方式衍生出来的术语，因为只有一页是从服务器发送下来的。在那之后，所有的路由和分页都在浏览器中完成。再也不需要从服务器本身请求任何页面了。在这里更好的术语应该是“客户端web应用程序”，尽管**单页**是目前使用的名称。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Writing routes for our static and dynamic pages
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为我们的静态和动态页面编写路由。
- en: Changing subscriptions based on routes
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据路由更改订阅
- en: Changing the title of the website for each page
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为每个页面更改网站的标题。
- en: So let's not waste time and get started by adding the `iron:router` package.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们不要浪费时间，先添加`iron:router`包。
- en: Note
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you've jumped right into the chapter and want to follow the examples, download
    the previous chapter's code examples from either the book's web page at [https://www.packtpub.com/books/content/support/17713](https://www.packtpub.com/books/content/support/17713)
    or from the GitHub repository at [https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter4](https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter4).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你直接跳到这一章节并且想跟随示例，从以下网址下载前一章节的代码示例：书的网页[https://www.packtpub.com/books/content/support/17713](https://www.packtpub.com/books/content/support/17713)
    或 GitHub仓库[https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter4](https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter4)。
- en: These code examples will also contain all the style files, so we don't have
    to worry about adding CSS code along the way.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这些代码示例还将包含所有样式文件，因此我们不必担心在过程中添加CSS代码。
- en: Adding the iron:router package
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加iron:router包
- en: Routes are the URLs of a specific page in our app. In a server-side-rendered
    app, routes are defined either by the server's/framework's configuration or the
    folder structure on the server.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 路由是应用中特定页面的URL。在服务器端渲染的应用中，路由要么由服务器的/框架配置定义，要么由服务器上的文件夹结构定义。
- en: In a client-side app, routes are simply paths that the app will use to determine
    which pages to render.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在客户端应用中，路由仅仅是应用将用来确定要渲染哪些页面的路径。
- en: 'The steps to perform inside the client are as follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端内要执行的步骤如下：
- en: The website is sent down to the client.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 网站被发送到客户端。
- en: The JavaScript file (or files) is loaded and parsed.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: JavaScript文件（或文件）被加载并解析。
- en: The router code will check which current URL it is on and run the correct route
    function, which will then render the right templates.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 路由器代码将检查当前它是哪个URL，并运行正确的路由函数，然后渲染正确的模板。
- en: Tip
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: To use routes in our app, we will make use of the `iron:router` package, a router
    specifically written for Meteor, which makes it easy to set up routes and combine
    them with subscriptions.
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了在我们的应用中使用路由，我们将使用`iron:router`包，这是一个为Meteor编写的路由器，它使得设置路由和将它们与订阅结合变得容易。
- en: 'To add the package, we cancel any running Meteor instance, go to our `my-meteor-blog`
    folder, and type the following command:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要添加包，我们取消任何正在运行的Meteor实例，前往我们的`my-meteor-blog`文件夹，并输入以下命令：
- en: '[PRE0]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If we are done with this, we can start Meteor again by running the `$ meteor`
    command.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们完成了这些，我们可以通过运行`$ meteor`命令再次启动Meteor。
- en: 'When we go back to the console of our browser, we will see an error saying:
    `Error: Oh no! No route found for path: "/"`. Don''t worry; we will deal with
    this in the next section.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '当我们回到浏览器的控制台时，我们会看到一个错误，说：`Error: Oh no! No route found for path: "/"`。不用担心；我们将在下一节处理这个问题。'
- en: Setting up the router
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置路由器
- en: 'In order to use the router, we need to set it up. To keep our code organized,
    we will create a file called `routes.js` directly in the root of our `my-meteor-blog`
    folder with the following code:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用路由器，我们需要对其进行设置。为了保持我们的代码组织有序，我们将在`my-meteor-blog`文件夹的根目录下创建一个名为`routes.js`的文件，并输入以下代码：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The router configuration allows you to define the following default templates:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 路由配置允许您定义以下默认模板：
- en: '| `layoutTemplate` | The layout template will be used as the main wrapper.
    Here, subtemplates will be rendered in the `{{> yield}}` placeholder, which has
    to be placed somewhere in the template. |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '`| layoutTemplate` | 布局模板将作为主包装器。在这里，子模板将在`{{> yield}}`占位符中渲染，该占位符必须放在模板的某个位置。|'
- en: '| `notFoundTemplate` | This template will be rendered if the current URL has
    no defined route. |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '`| notFoundTemplate` | 如果当前URL没有定义路由，将渲染此模板。|'
- en: '| `loadingTemplate` | This template will be shown when subscriptions for the
    current route are loading. |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '`| loadingTemplate` | 当当前路由的订阅正在加载时，将显示此模板。|'
- en: For our blog, we will just define the `layoutTemplate` property for now.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的博客，我们现在只需定义`layoutTemplate`属性。
- en: 'Perform the following steps to set up the router:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以设置路由器：
- en: 'To create our first route, we need to add the following lines of code to the
    `route.js` file:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建我们的第一个路由，我们需要在`route.js`文件中添加以下代码行：
- en: '[PRE2]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can also name the `Home` route as `home` (in lowercase). Then we can leave
    the manual template definition out, as `iron:router` will look automatically for
    a template called `home` for that route.
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您还可以将`Home`路由命名为`home`（小写）。然后我们可以省略手动模板定义，因为`iron:router`将自动查找名为`home`的模板。
- en: For simplicity, we define the template manually to keep all routes consistent
    throughout the book.
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了简单起见，我们手动定义模板，以保持全书中的所有路由一致。
- en: If we now save this file and get back to our browser, we will see the `layout`
    template rendered twice. This happens not because `iron:router` adds `layoutTemplate`
    by default to the body of our app, but because we added it manually as well as
    by using `{{> layout}}` in `index.html`, it gets rendered twice.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们现在保存这个文件并回到浏览器，我们将看到`layout`模板被渲染两次。这并不是因为`iron:router`默认将`layoutTemplate`添加到我们应用程序的正文中，而是因为我们手动添加了它，以及在`index.html`中使用了`{{>
    layout}}`，所以它被渲染了两次。
- en: To prevent the double appearance of the `layout` template, we need to remove
    the `{{> layout}}` helper from the `<body>` tag inside our `index.html` file.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止`layout`模板的重复出现，我们需要从`index.html`文件中的`<body>`标签中删除`{{> layout}}`助手。
- en: When we check out the browser, we will now see the `layout` template rendered
    only once.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们检查浏览器时，现在只会看到`layout`模板被渲染一次。
- en: Switching to a layout template
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 切换到布局模板
- en: 'Even though we passed a template to our `Home` route using `template: home`,
    we are not rendering this template dynamically; we are just showing the layout
    template with its *hardcoded* subtemplates.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '尽管我们通过`template: home`向我们的`Home`路由传递了一个模板，但我们并没有动态地渲染这个模板；我们只是显示了带有其*硬编码*子模板的布局模板。'
- en: To change this, we need to replace the `{{> home}}` inclusion helper inside
    our layout template with `{{> yield}}`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 为了改变这一点，我们需要将布局模板内的`{{> home}}`包含助手替换为`{{> yield}}`。
- en: The `{{> yield}}` helper is a placeholder helper provided by `iron:router`,
    where route templates get rendered.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`{{> yield}}`助手是`iron:router`提供的占位符助手，在此处渲染路由模板。'
- en: 'After doing this, when we check out the browser, we shouldn''t see any change,
    as we are still rendering the `home` template, but this time dynamically. Then
    we proceed as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此操作后，当我们检查浏览器时，我们不应该看到任何变化，因为我们仍然在渲染`home`模板，但这次是动态的。然后我们按照以下步骤进行操作：
- en: 'In order to see whether this is true, we will add a not found template to our
    app, by adding the following template to our `layout.html` file after the layout
    template:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了验证这一点，我们将向我们的应用程序添加一个未找到的模板，通过在`layout.html`文件中的布局模板之后添加以下模板：
- en: '[PRE3]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now we need to add the `notFoundTemplate` property to the `Router.configure()`
    function of `route.js`:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要向`route.js`中的`Router.configure()`函数添加`notFoundTemplate`属性：
- en: '[PRE4]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'When we now navigate to `http://localhost:3000/doesntexist` in our browser,
    we will see the `notFound` template being rendered instead of our `home` template:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们导航到`http://localhost:3000/doesntexist`时，我们将看到`notFound`模板被渲染，而不是我们的`home`模板：
- en: '![Switching to a layout template](img/00013.jpeg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![切换到布局模板](img/00013.jpeg)'
- en: If we click on the **Home** link in the main menu, we will get back to our front
    page, as this link was navigating to "`/`"`.` We have successfully added our first
    route. Now let's move on to create the second route.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们点击主菜单中的**首页**链接，我们会回到我们的首页，因为此链接导航到"``/``"。我们已经成功添加了我们的第一个路由。现在让我们继续创建第二个路由。
- en: Adding another route
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加另一个路由
- en: Having a front page doesn't make a real website. Let's add a link to our **About**
    page, which has been in our drawer since [Chapter 2](part0024_split_000.html#page
    "Chapter 2. Building HTML Templates"), *Building HTML Templates*.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有一个首页并不意味着是一个真正的网站。让我们添加一个到我们的**关于**页面的链接，该页面自从[第2章](part0024_split_000.html#page
    "第2章 构建HTML模板") *构建HTML模板*以来就在我们的抽屉里。
- en: 'To do this, just duplicate the `Home` route and change the values to create
    an `About` route, as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 要这样做，只需复制`Home`路由，并将值更改为创建一个`About`路由，如下所示：
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: That's it!
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 完成！
- en: 'Now, when we go back to our browser, we can click on the two links in the main
    menu to switch between our **Home** and **About** pages, and even typing in `http://localhost:3000/about`
    will bring us straight to the corresponding page, as shown in the following screenshot:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们回到浏览器时，我们可以点击主菜单中的两个链接来切换我们的**首页**和**关于**页面，甚至输入`http://localhost:3000/about`也会直接带我们到相应的页面，如下截图所示：
- en: '![Adding another route](img/00014.jpeg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![添加另一个路由](img/00014.jpeg)'
- en: Moving the posts subscription to the Home route
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将帖子订阅移动到首页路由
- en: In order to load the right data for each page, we need to have the subscription
    in the routes instead of keeping it in the separate `subscriptions.js` file.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 为了为每个页面加载正确的数据，我们需要在路由中拥有订阅，而不是将其保存在单独的`subscriptions.js`文件中。
- en: The `iron:router` has a special function called `subscriptions()` , which is
    ideal for that purpose. Using this function, we can reactively update subscriptions
    belonging to a specific route.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`iron:router`有一个特殊的函数叫做`subscriptions()`，这正是我们需要的。使用这个函数，我们可以反应性地更新特定路由的订阅。'
- en: 'To see it in action, add the `subscriptions()` function to our `Home` route:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 为了看到它的实际应用，将`subscriptions()`函数添加到我们的`Home`路由中：
- en: '[PRE6]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The **Session.setDefault(''lazyloadLimit'', 2)** line from the **subscriptions.js**
    file needs to be placed at the start of the `routes.js` file and before the `Router.configure()`
    function:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`subscriptions.js`文件中的**Session.setDefault(''lazyloadLimit'', 2)**行需要在`routes.js`文件的开头，并在`Router.configure()`函数之前：'
- en: '[PRE7]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This has to wrapped inside the `if(Meteor.isClient){}` condition, as the session
    object is only available on the client.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这必须包裹在`if(Meteor.isClient){}`条件内，因为会话对象仅在客户端可用。
- en: The `subscriptions()` function is *reactive* like the `Tracker.autorun()` function
    we used before. This means it will rerun and change the subscription when the
    `lazyloadLimit` session variable changes.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`subscriptions()`函数和之前使用的`Tracker.autorun()`函数一样是*响应式的*。这意味着当`lazyloadLimit`会话变量发生变化时，它会重新运行并更改订阅。'
- en: In order to see it working, we need to delete the `my-meteor-blog/client/subscriptions.js`
    file, so there are not two points where we subscribe to the same publication.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 为了看到它的工作情况，我们需要删除`my-meteor-blog/client/subscriptions.js`文件，这样我们就不会有两个订阅相同发布物的点。
- en: When we now check the browser and refresh the page, we will see the `home` template
    still shows all the example posts. Clicking on the lazy-load button increases
    the number of posts listed, though this time everything happens through our reactive
    `subscriptions()` function.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们现在检查浏览器并刷新页面时，我们会看到`home`模板仍然显示所有示例帖子。点击懒加载按钮会增加列出的帖子数量，但这次一切都是在我们的反应式`subscriptions()`函数中完成的。
- en: Note
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `iron:router` comes with more hooks, which you can find as a short list
    in the [Appendix](part0099_split_000.html#page "Appendix A. Appendix").
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`iron:router`带有更多的钩子，您可以在[附录](part0099_split_000.html#page "附录 A．附录")中找到简短的列表。'
- en: To complete our routes, we only need to add the post routes, so we can click
    on a post and read it in full detail.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成我们的路由，我们只需要添加帖子路由，这样我们就可以点击一个帖子并详细阅读。
- en: Setting up the post route
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置帖子路由
- en: To be able to show a full post page, we need to create a post template, which
    can be loaded when the user clicks on a post.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够显示一个完整的帖子页面，我们需要创建一个帖子模板，当用户点击一个帖子时可以加载。
- en: 'We create a file called `post.html` inside our `my-meteor-blog/client/templates`
    folder with the following template code:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`my-meteor-blog/client/templates`文件夹中创建一个名为`post.html`的文件，并使用以下模板代码：
- en: '[PRE8]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This simple template displays all the information of a blog post and even reuses
    our `{{formatTime}}` helper we created earlier in this book from our `template-helper.js`
    file. We used this to format at the time the post was created.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简单的模板显示了博客文章的所有信息，甚至重用了我们在这本书中早些时候从`template-helper.js`文件创建的`{{formatTime}}`助手。我们用这个助手来格式化文章创建的时间。
- en: We can't see this template yet, as we first have to create a publication and
    route for this page.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们暂时还看不到这个模板，因为我们必须先为这个页面创建发布和路由。
- en: Creating a single-post publication
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个单篇博文发布
- en: In order to show the full post's data in this template, we need to create another
    publication that will send the complete post document to the client.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在这个模板中显示完整文章的数据，我们需要创建另一个发布，该发布将完整的文章文档发送到客户端。
- en: 'To do so, we open our `my-meteor-blog/server/publication.js` file and add the
    following publication:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，我们打开`my-meteor-blog/server/publication.js`文件，并添加以下发布内容：
- en: '[PRE9]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `slug` parameter, which has been used here, will be later provided from
    our subscription method so that we can use the `slug` parameter to reference the
    correct post.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这里使用的`slug`参数将在稍后的订阅方法中提供，以便我们可以使用`slug`参数来引用正确的文章。
- en: Note
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A slug is a document title, which is formatted in a way that is usable in a
    URL. Slugs are better than just appending the document ID to the URL, as they
    are readable and understandable by visitors. They are also an important part of
    a good SEO.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 缩略词是文档标题，以一种适合URL使用的方式格式化。缩略词比简单地在URL后附加文档ID更好，因为它们可读性强，易于访问者理解，也是良好SEO的重要组成部分。
- en: So that we can use slugs, every slug has to be unique. We will take care of
    that when we create the posts.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用缩略词，每个缩略词都必须是唯一的。我们在创建文章时会照顾到这一点。
- en: Assuming that we pass the right slug such as `my-first-entry`, this publication
    will send down the post containing this slug.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们传递了正确的斜杠，比如`my-first-entry`，这个发布将发送包含此斜杠的文章。
- en: Adding the post route
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加博文路由
- en: In order for this route to work, it needs to be dynamic because every linked
    URL has to be different for each post.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让这个路由工作，它必须是动态的，因为每个链接的URL对于每篇文章都必须是不同的。
- en: 'We will also render a loading template until the post is loaded. To start,
    we add the following template to our `my-meteor-blog/client/templates/layout.html`:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将渲染一个加载模板，直到文章被加载。首先，我们在`my-meteor-blog/client/templates/layout.html`中添加以下模板：
- en: '[PRE10]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Additionally, we have to add this template as the default loading template
    to our `Router.configure()` call in the `routes.js`:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还需要将此模板作为默认加载模板添加到`routes.js`中的`Router.configure()`调用中：
- en: '[PRE11]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We then add the following lines of code to our `Router.map()` function to create
    a dynamic route:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将以下代码行添加到我们的`Router.map()`函数中，以创建一个动态路由：
- en: '[PRE12]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `'/posts/:slug'` path is a dynamic route, where `:slug` can be anything
    and will be passed to the routes functions as `this.params.slug`. This way we
    can simply pass the given slug to the `single-post` subscription and retrieve
    the correct document for the post matching this slug.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`''/posts/:slug''`路径是一个动态路由，其中`:slug`可以是任何内容，并将传递给路由函数作为`this.params.slug`。这样我们只需将给定的slug传递给`single-post`订阅，并检索与这个slug匹配的文章的正确文档。'
- en: The `waitOn()` function works like the `subscriptions()` function, though will
    automatically render `loadingTemplate`, we set in the `Router.configure()` until
    the subscriptions are ready.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`waitOn()`函数的工作方式类似于`subscriptions()`函数，不过它会自动渲染我们在`Router.configure()`中设置的`loadingTemplate`，直到订阅准备好。'
- en: The `data()` function in this route will set the data context of the `post`
    template. We basically look in our local database for a post containing the given
    slug from the URL.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这个路由的`data()`函数将设置`post`模板的数据上下文。我们基本上在我们的本地数据库中查找包含来自URL的给定slug的文章。
- en: Note
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `findOne()` method of the `Posts` collection works like `find()`, but returns
    only the first found result as a JavaScript object.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`Posts`集合的`findOne()`方法与`find()`方法类似，但只返回找到的第一个结果作为JavaScript对象。'
- en: 'Let''s sum up what happens here:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们总结一下这里发生的事情：
- en: The route gets called (through a clicked link or by reloading of the page).
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 路由被调用（通过点击链接或页面重新加载）。
- en: The `waitOn()` function will then subscribe to the right post identified by
    the given `slug` parameter, which is a part of the URL.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后`waitOn()`函数将订阅由给定的`slug`参数标识的正确文章，该参数是URL的一部分。
- en: Because of the `waitOn()` function, the `loadingTemplate` will be rendered until
    the subscription is ready. Since this will happen very fast on our local machine,
    so we probably won't see the loading template at all.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于`waitOn()`函数，`loadingTemplate`将在订阅准备好之前渲染。由于这在我们的本地机器上会非常快，所以我们可能根本看不到加载模板。
- en: As soon as the subscription is synced, the template gets rendered.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦订阅同步，模板就会渲染。
- en: The `data()` function will then rerun, setting the data context of the template
    to the current post document.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后`data()`函数将重新运行，设置模板的数据上下文为当前文章文档。
- en: Now that the publication and the route are ready, we can simply navigate to
    `http://localhost:3000/posts/my-first-entry` and we should see the `post` template
    appear.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在发布和路由都准备好了，我们只需导航到`http://localhost:3000/posts/my-first-entry`，我们应该看到`post`模板出现。
- en: Linking the posts
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文章链接
- en: 'Although we''ve set up the route and subscription, we can''t see it work, as
    we need the right links to the posts. As each of our previously added example
    posts already contains a `slug` property, we just have to add them to the links
    to our posts in the `postInList` template. Open the `my-meteor-blog/client/templates/postInList.html`
    file and change the link as follows:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们已经设置了路由和订阅，但我们看不到它工作，因为我们需要正确的文章链接。由于我们之前添加的每个示例文章都包含一个`slug`属性，所以我们只需将它们添加到`postInList`模板中的文章链接。打开`my-meteor-blog/client/templates/postInList.html`文件，按照以下方式更改链接：
- en: '[PRE13]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Finally, when we go to our browser and click on the title of a blog post, we
    get redirected to a page that shows the full post entry, like the entry shown
    in the following screenshot:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，当我们打开浏览器并点击博客文章的标题时，我们会被重定向到一个显示完整文章条目的页面，如下面的屏幕截图所示：
- en: '![Linking the posts](img/00015.jpeg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![文章链接](img/00015.jpeg)'
- en: Changing the website's title
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更改网站标题
- en: Now that we have the routes of our posts working, we are only missing the right
    titles being displayed for each page.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如今我们的文章路由已经运行，我们只缺少为每个页面显示正确的标题。
- en: Sadly, `<head></head>` is not a reactive template in Meteor, where we could
    let Meteor do the work of changing titles and meta tags.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 遗憾的是，`<head></head>`在Meteor中不是一个响应式模板，我们本可以让Meteor自动更改标题和元标签。
- en: Note
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注
- en: It is planned to make the `head` tag a reactive template, but probably not before
    version 1.0.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 计划将`head`标签变成一个响应式模板，但可能在1.0版本之前不会实现。
- en: To change the document title, we need to come up with a different way of changing
    it, based on the current route.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更改文档标题，我们需要找到一种基于当前路由来更改它的不同方法。
- en: 'Luckily, `iron:router` has the `onAfterAction()` function, which can also be
    used in the `Router.configure()` function to run before every route. In this function,
    we have access to the data context of the current route, so we can simply set
    the title using native JavaScript:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，`iron:router`有一个`onAfterAction()`函数，也可以在`Router.configure()`函数中用于每个路由之前运行。在这个函数中，我们有权访问当前路由的数据上下文，所以我们可以简单地使用原生JavaScript设置标题：
- en: '[PRE14]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Using **Posts.findOne({slug: this.params.slug})**, we get the current post
    of the route. We then check whether it''s an object; if so, we add the post title
    to the `title` metatag. Otherwise, we just take the route name.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '使用**Posts.findOne({slug: this.params.slug})**，我们获取当前路由的文章。然后我们检查它是否是一个对象；如果是，我们将文章标题添加到`title`元标签。否则，我们只取路由名称。'
- en: Doing this in `Router.configure()` will call the **onAfterAction** for every
    route.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Router.configure()`中这样做将为每个路由调用**onAfterAction**。
- en: 'If we now take a look at our browser''s tab, we will see that the title of
    our website changes when we move throughout the website:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在如果我们看看我们浏览器的标签页，我们会发现当我们浏览网站时，我们网站的标题会发生变化：
- en: '![Changing the website''s title](img/00016.jpeg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![更改网站标题](img/00016.jpeg)'
- en: Tip
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'If we want to make our blog cooler, we can add the `mrt:iron-router-progress`
    package. This will add a progress bar at the top of our pages when changing routes.
    We just need to run the following command from our app''s folder:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要让我们的博客更酷，我们可以添加`mrt:iron-router-progress`包。这将在切换路由时在页面的顶部添加一个进度条。我们只需从我们的应用程序文件夹中运行以下命令：
- en: '[PRE15]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Summary
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: That's it! Our app is now a fully working website with different pages and URLs.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！现在我们的应用程序是一个功能完整的网站，有不同的页面和URL。
- en: In this chapter, we learned how to set up static and dynamic routes. We moved
    our subscriptions to the routes so that they change automatically, based on the
    route's needs. We also used slugs to subscribe to the right posts and displayed
    them in the `post` template. Finally, we changed our website's title so that it
    matches the current route.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何设置静态和动态路由。我们将我们的订阅移到了路由中，这样它们就可以根据路由的需要自动更改。我们还使用了slugs来订阅正确的文章，并在`post`模板中显示它们。最后，我们更改了网站的标题，使其与当前路由相匹配。
- en: To learn more about `iron:router`, take a look at its documentation at [https://github.com/EventedMind/iron-router](https://github.com/EventedMind/iron-router).
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于`iron:router`的信息，请查看其文档在[https://github.com/EventedMind/iron-router](https://github.com/EventedMind/iron-router)。
- en: You can find this chapter's code examples either at [https://www.packtpub.com/books/content/support/17713](https://www.packtpub.com/books/content/support/17713)
    or on GitHub at [https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter5](https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter5).
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这个章节的代码示例在[https://www.packtpub.com/books/content/support/17713](https://www.packtpub.com/books/content/support/17713)找到，或者在GitHub上找到[https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter5](https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter5)。
- en: In the next chapter, we will take a deeper look at Meteor's session object.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入探讨Meteor的会话对象。
