- en: Chapter 3. Chaining of Promises
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章.承诺的链式调用
- en: 'One of the most important features of promises is the ability to chain and
    manage sequences of asynchronous operations. In the previous chapter, we learned
    the details of the Promise API and how it works; notably, we saw how the `then`
    method works. We also learned about the current browser compatibility for promises
    and the libraries that have implemented and extended JavaScript promises. In this
    chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 承诺（promises）最重要的特性之一是能够链式调用和管理异步操作的序列。在前一章中，我们学习了承诺API的详细信息以及它是如何工作的；特别地，我们看到了`then`方法是如何工作的。我们还了解了当前浏览器对承诺的支持情况以及实现和扩展JavaScript承诺的库。在本章中，我们将涵盖以下主题：
- en: How chaining came to be in an asynchronous JavaScript
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在异步JavaScript中实现链式调用
- en: Implementing chaining with promises
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用承诺实现链式调用
- en: Transforming from callback hell into well-organized promise chains
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从回调地狱转换为组织良好的承诺链
- en: Chaining like never before
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前所未有的链式调用
- en: 'As we learned in the previous two chapters, promises tend to bring the prowess
    of synchronous programming to asynchronous functions. This ability of promises
    includes two key features of synchronous functions:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如前两章所学习，承诺倾向于将同步编程的力量带入异步函数中。承诺的这种能力包括同步函数的两个关键特性：
- en: A function that returns values
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个返回值的函数
- en: A function that throws exceptions
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个抛出异常的函数
- en: The significance of these features is that they can be used to pass the value
    returned by one function directly into another—and not just once; this can be
    translated into the ability to chain these functions one after the other, whereby
    the binding association between the elements in this chain is the promise's return
    value by each operation. Now, what the second feature implies is very important
    as throwing exceptions allows us to primarily detect whether the process has failed;
    secondly, it allows us to capture those exceptions by any function that handles
    a catch in the chain and helps us to avoid losing it in the midst of these chained
    functions.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这些特性的重要性在于，它们可以用来将一个函数返回的值直接传递给另一个函数——而且不仅仅是一次；这可以转化为将这些函数一个接一个地链式调用的能力，其中这个链中元素之间的绑定关系是每个操作的承诺返回值。现在，第二个特性所暗示的内容非常重要，因为抛出异常可以让我们首先检测到过程是否失败；其次，它允许我们通过任何在链中处理捕获的函数来捕获这些异常，并帮助我们避免在这些问题被这些链式函数丢失。
- en: Now, how does this translate into an asynchronous world?
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，这在异步世界中是如何体现的呢？
- en: Well, to begin with, in an asynchronous world, one cannot simply return values
    because those values are not yet ready in time. Likewise, we cannot throw exceptions,
    basically because there is no one there to catch those raised exceptions. So developers,
    ever resourceful, have tried to solve this problem by reverting to nested callbacks.
    This allowed them to chain functions with return values, but at the cost of maintainability,
    readability, and of course, extra lines of code. When the code grows in lines
    and the nested callback grows in depth, the code becomes harder to maintain and
    debug when edits are needed or errors arise. Also, readability is negatively impacted
    with nested callbacks, and developers need to collapse and expand braces in order
    to follow with the code to tell where the callback function begins and ends.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在异步世界中，一个人不能简单地返回值，因为这些值还没有及时准备好。同样，我们也不能抛出异常，基本上是因为没有人在那里接住这些被抛出的异常。因此，开发者们为了解决这个问题，退而求其次地使用了嵌套回调。这让他们能够用带有返回值的函数进行链式调用，但这以可维护性、可读性和额外的代码行数为代价。当代码行数增加，嵌套回调深度增加时，代码在需要编辑或出现错误时变得更加难以维护和调试。此外，嵌套回调对可读性产生负面影响，开发者需要折叠和展开括号以跟踪代码，从而知道回调函数从哪里开始，到哪里结束。
- en: 'Moreover, catching errors in these nested callbacks was very strenuous and
    required developers to pass the errors up the chain of callbacks manually. This
    ordeal in asynchronous programming is in famous and termed *callback hell*; it
    usually ends up in a code that looks like the following dummy code:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在嵌套回调中捕获错误非常吃力，开发人员需要手动将错误逐层上传递。这种异步编程中的折磨闻名，被称为*回调地狱*；这通常会导致代码看起来像下面的伪代码一样：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In the previous example, you will notice the widespread presence of `function`
    and `});` in what looks like a pyramid of code, bearing in mind that we didn't
    even include error-handling code. The previous example depicts, on a small scale,
    what *callback hell* looks like. We can also observe how nested callbacks—which
    are quite flourishing in JavaScript programing—can grow uncontrollably into an
    intertwined and hard–to-maintain code. So imagine how the code will look in a
    more complex scenario.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一个例子中，你会注意到`function`和`});`在看似代码金字塔中广泛存在，考虑到我们甚至没有包括错误处理代码。之前的例子在小型规模上展示了*回调地狱*的样子。我们还可以观察到，在JavaScript编程中非常流行的嵌套回调——可能会无控制地增长成纠缠在一起且难以维护的代码。所以想象一下，在更复杂的场景中代码会是什么样子。
- en: Nevertheless, there are remedies that developers can implement to have nested
    callbacks that are more readable and maintainable. These remedies include the
    use of named functions instead of anonymous functions in the callback parameters.
    Another solution would be to break down the code into smaller chunks by placing
    the code that does a specific task into a separate module and then plug that module
    into the application code somewhere else. However, these remedies are more of
    a workaround and not a standard practice; also, the workarounds are still not
    enough to address the concept of chaining asynchronous operations entirely.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，开发者可以实施一些补救措施，以使嵌套回调更具可读性和可维护性。这些补救措施包括在回调参数中使用命名函数而不是匿名函数。另一个解决方案是将代码分解成更小的块，通过将执行特定任务的代码放入单独的模块中，然后将该模块插入到应用程序代码的其他位置。然而，这些补救措施更多的是一个变通方法，而不是一种标准做法；此外，这些变通方法仍然不足以完全解决异步操作链式调用的概念。
- en: Promises, on the other hand, deliver the functional composition that we have
    in synchronous programming in more of an *out-of-the-box* way when compared with
    asynchronous programming in JavaScript.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，Promise在更多意义上以*开箱即用*的方式提供了我们在同步编程中拥有的功能组合，与JavaScript中的异步编程相比。
- en: Why so? Because the specification states that a promise is required to provide
    a `then` method. Not just that; the specification also necessitates that the `then`
    function, or any other function that has a compliant implementation, should return
    a promise. The returned promise contains either a value, if fulfilled, or an exception,
    if rejected. Hence, `then` can combine with another `then` function using the
    returned promise to compose a chain whereby the result of the first operation
    will be passed on to the next one and so on. Also, this chain can be cut at any
    point in time by a rejection, which can be handled by any operation in the chain
    that declares an exception-handling code; in other words, the error will bubble
    up automatically through that chain.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么这么说？因为规范指出，一个Promise必须提供一个`then`方法。不仅如此；规范还要求`then`函数，或任何具有合规实现的任何其他函数，应返回一个Promise。返回的Promise如果被满足，则包含一个值；如果被拒绝，则包含一个异常。因此，`then`可以利用返回的Promise与另一个`then`函数结合，以组合一个链式调用的链，其中第一个操作的结果将传递给下一个操作，依此类推。此外，这个链在任何时刻都可以被一个拒绝切断，这可以被链中的任何声明异常处理代码的操作处理；换句话说，错误会自动通过该链冒泡上去。
- en: Tip
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Some promise enthusiasts regard this chaining of promises as being the best
    part about the new standard.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 一些Promise的爱好者认为，Promise的链式调用是新标准中最棒的部分。
- en: In JavaScript programming, chaining is very important when we have a scenario
    where multiple asynchronous operations need to be executed. These scenarios include
    the case where the work of one operation depends on the outcome of the previous
    operation. Moreover, we might have the case where the first operation needs to
    process some code before it can return a result and pass it to the next operation.
    Bear in mind that all of this should take place without blocking other threads,
    especially the UI thread. Hence, we need a straightforward, standard mechanism
    to chain these asynchronous operations, and this is exactly what promises provide.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript编程中，当我们需要执行多个异步操作的场景下，链式调用非常重要。这些场景包括一个操作的工作依赖于前一个操作的结果。此外，可能第一个操作需要在返回结果之前处理一些代码，然后才能将其传递给下一个操作。记住，所有这些都应该在不阻塞其他线程的情况下进行，尤其是UI线程。因此，我们需要一种简单、标准的机制来链式这些异步操作，这正是Promise提供的内容。
- en: When it comes to chaining promises, the chain can go as deep as we want to as
    `then` will always return a promise. One thing to watch out for, though, if we
    are making a call such as `promise.then(onFullfilled)`, is that the `onFulfilled`
    function can only be called after the promise has run its course, with the promise's
    value as its first argument. Therefore, if we return a simple value inside the
    first `then` and chain it to another one, the next `then` will be called with
    that simple value returned by the previous `then`. If we were to return a promise
    from the first `then`, the following `then` will have to wait for the returned
    promise and will only be called or executed when that promise has been fulfilled
    or completed.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到链式承诺时，链可以深入到我们想要的程度，因为`then`总是返回一个承诺。然而，如果我们进行如`promise.then(onFullfilled)`的调用，需要注意的是`onFulfilled`函数只能在承诺完成其过程后调用，以承诺的值为第一个参数。因此，如果我们在一个`then`内部返回一个简单值并将其链接到另一个`then`，下一个`then`将以该简单值为参数调用。如果我们想在第一个`then`中返回一个承诺，那么接下来的`then`将不得不等待返回的承诺，并且只有在那个承诺被解决或完成后才会被调用或执行。
- en: 'Let''s see this in action. The following is a very basic sample code that demonstrates
    a chained promise:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过实际操作来看看这一点。以下是一个非常基础的示例代码，演示了链式承诺：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The script is very straightforward, and you can write it in any development
    environment or even in an online code editor such as JSFiddle.net. First, we create
    a promise by defining a `promiseObj` object. This object is a function that takes
    one argument at a time and returns a new promise.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本非常直接，你可以在任何开发环境中编写它，甚至可以在JSFiddle.net等在线代码编辑器中编写。首先，通过定义一个`promiseObj`对象来创建一个承诺。这个对象是一个函数，一次接收一个参数，并返回一个新的承诺。
- en: Tip
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Remember that not all browsers support promises as of now, as we learned in
    [Chapter 2](part0018_split_000.html#H5A42-fe4c0b71cd2847c897e147ea131725a8 "Chapter 2. The
    Promise API and Its Compatibility"), *The Promise API and Its Compatibility*.
    To do this, you will need to run or test the code on jsFiddle in a compatible
    browser. Revert to this chapter to check for compatible browsers.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，目前并非所有浏览器都支持承诺（promises），正如我们在[第2章](part0018_split_000.html#H5A42-fe4c0b71cd2847c897e147ea131725a8
    "Chapter 2. The Promise API and Its Compatibility")《承诺API及其兼容性》中学到的那样，*承诺API及其兼容性*。为了做到这一点，你需要在一个兼容的浏览器中运行或测试jsFiddle中的代码。参考这一章节来检查兼容的浏览器。
- en: We construct the promise using `new Promise`. The constructor takes an anonymous
    function that will execute the work. This function is passed with one `resolve`
    argument that will fulfill the promise. Inside this constructor, we call the `resolve`
    argument to execute a `setTimeout` function that takes another `time` argument
    besides the function that will be executed after a given time. Hence, `setTimeout`
    will resolve the promise.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`new Promise`来构造承诺。构造函数接受一个匿名函数，该函数将执行工作。这个函数传递一个`resolve`参数，该参数将满足承诺。在这个构造函数内部，我们调用`resolve`参数来执行一个`setTimeout`函数，除了将在给定时间后执行的函数外，还有一个`time`参数。因此，`setTimeout`将解决承诺。
- en: 'The second part of the code is where the chaining takes place. We first call
    the `promiseObj` we just created; since it will return a promise, we can call
    `then` on it. By definition, `promiseObj` takes the `time` argument, in milliseconds,
    to be passed on to the `setTimeout` function. Here, we passed `3000` (3 seconds)
    and inside it, we simply called an `alert()` function that will pop up on the
    screen as the following screenshot shows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的第二部分是发生链式的地方。我们首先调用我们刚刚创建的`promiseObj`；由于它会返回一个承诺，我们可以对它调用`then`。根据定义，`promiseObj`接受传递给`setTimeout`函数的`time`参数（以毫秒为单位）。在这里，我们传递了`3000`（3秒），并在其中简单地调用了一个`alert()`函数，该函数将在屏幕上弹出，如下面的屏幕截图所示：
- en: '![Chaining like never before](img/00003.jpeg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![前所未有的链式调用](img/00003.jpeg)'
- en: Now, since `then` returns a promise, we can chain another `then` call to it;
    this will be executed after the promise has been resolved and in turn will execute
    an `alert()` function. The previous example, though very basic, illustrates how
    we can easily chain asynchronous operations with promises.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，由于`then`返回一个承诺，我们可以链式调用另一个`then`；这将在承诺解决后执行，并依次执行一个`alert()`函数。虽然上一个例子非常基础，但它展示了我们如何轻松地使用承诺链式异步操作。
- en: Let's try converting the example we saw earlier from nested callbacks into a
    chain of promises. For illustration purposes, I will add an HTML element, `div`,
    to populate it with the content as the promise propagates.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试将前面看到的嵌套回调示例转换为承诺的链式调用。为了说明目的，我将添加一个HTML元素`div`，在承诺传播时用内容填充它。
- en: 'The HTML part is as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: HTML部分如下：
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The JavaScript part is as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript部分如下：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In HTML, we only have a `div` element that is empty and has the ID log. In JavaScript,
    we first declare a variable called `log` to hold the `div` element. Then, we construct
    a new promise and assign it to a variable called `shout`. Inside that promise
    object, we add text to emphasize that we just started the promise. What we are
    promising here is the `shoutText` string after waiting for 2 seconds (2000 ms).
    Again, we used the `window.setTimeout` function to simulate an asynchronous operation
    that needs some time to finish. It will fulfill the promise by resolving it after
    a given time.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在HTML中，我们只有一个带有ID为log的空`div`元素。在JavaScript中，我们首先声明一个名为`log`的变量来持有`div`元素。然后，我们构建一个新的promise，并将其分配给一个名为`shout`的变量。在这个promise对象内部，我们添加了文本以强调我们刚刚开始了promise。我们承诺的是等待2秒（2000毫秒）后的`shoutText`字符串。再次，我们使用了`window.setTimeout`函数来模拟一个需要一些时间才能完成的异步操作。它在给定时间后通过解决它来满足promise。
- en: Next, we call `shout` with the `then` method inside which we have defined what
    it will do when the promise is fulfilled. In the first `then` method, we simply
    pass the `val` parameter, which contains the value of `shoutText`, to the `log.insertAdjacentHTML`
    function. This will display the value alongside the content of the `div` element
    that contains the text `Promise fulfilled` in a small font. Next, we define a
    new variable `newVal`, assign the text `Shout Again!` to it, and return it. Moving
    forward, the second `then` also displays the value returned from the previous
    promise call. We also define a new variable, assign it a text value, and return
    it. The last `then` call just adds the value of `val`, which by now is equal to
    `newVal2`, and adds it to the content of the `div` element. Note that `val` holds
    the content of the value returned by the promise from one operation to the next
    in the chain.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们使用`then`方法调用`shout`，在其中定义了当promise被满足时它会做什么。在第一个`then`方法中，我们简单地将包含`shoutText`值的`val`参数传递给`log.insertAdjacentHTML`函数。这将在包含文本`Promise
    fulfilled`的`div`元素的旁边显示该值，字体较小。接着，我们定义了一个新变量`newVal`，给它赋值为`Shout Again!`，然后返回它。继续前进，第二个`then`也显示了从前一个promise调用返回的值。我们还定义了一个新变量，给它赋了一个文本值，然后返回它。最后一个`then`调用只是将`val`的值（此时等于`newVal2`）添加到`div`元素的内容中。请注意，`val`持有由promise从一次操作传递到下一次操作链中返回的值的内容。
- en: Tip
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: This example can also be tested on JSFiddle.net.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子也可以在JSFiddle.net上进行测试。
- en: Chaining in sequence
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 顺序链式调用
- en: 'Not only can we chain asynchronous operations with promises, but we can also
    chain them in such a way that they run these operations in a sequence. As we learned
    earlier in this chapter, if a `then` operation returns a value, the subsequent
    `then` is called with that value unless the first `then` returns a promise; if
    this happens, the subsequent `then` will wait on the promise that is returned
    and will only be called when that promise gets fulfilled or rejected. This rule
    allows us to queue these asynchronous operations in such a way that each operation
    will wait for the previous one to finish and thus run in sequence. Let us look
    at an example that better explains it. In this example, we have a function called
    `getData` that takes a JSON file and retrieves data from that JSON file. The first
    JSON file has categories, and for each category, we need to get the items under
    each category in a sequence. Let''s use the following code to do this:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不仅可以将异步操作与promise串联，还可以以一种方式将它们串联，使它们按照顺序执行这些操作。正如我们在本章中早些时候所学习的那样，如果一个`then`操作返回一个值，那么随后的`then`将以该值调用，除非第一个`then`返回一个promise；如果这样，随后的`then`将等待返回的promise，并且只有在那个promise得到满足或拒绝时才会被调用。这个规则允许我们以这样的方式排队这些异步操作，使得每个操作将等待前一个操作完成，从而按顺序运行。让我们看一个更好地解释这个的例子。在这个例子中，我们有一个名为`getData`的函数，它接受一个JSON文件并从那个JSON文件中获取数据。第一个JSON文件有类别，对于每个类别，我们需要按顺序获取每个类别的项目。让我们使用以下代码来完成这个：
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The previous code sample makes an asynchronous call to the `jsonCategoryUrl`
    function, which will return a set of categories; after this, we request the items
    in the first of those categories by passing the `data.categories[0]` parameter
    and then passing on the first category to the next `then` call. In the second
    link of these chained promises, we retrieve the second category `data.categories[1]`
    and pass it to the last `then` call, which in turn retrieves the third category,
    `data.categories[2]`. This example shows us how we can queue asynchronous operations
    in chained promises if we need to have a chain in which one link depends or needs
    to wait on the result of the preceding promise.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码示例通过`jsonCategoryUrl`函数异步调用来获取一系列分类；之后，我们通过传递`data.categories[0]`参数来请求这些分类中的第一个，然后将第一个分类传递给下一个`then`调用。在这些链式承诺的第二链接中，我们通过传递`data.categories[1]`参数获取第二个分类，并将其传递给最后的`then`调用，反过来又获取第三个分类，`data.categories[2]`。这个例子向我们展示了，如果我们需要一个链式操作，其中一环依赖于或需要等待前一个承诺的结果，我们如何在链式承诺中排队进行异步操作。
- en: 'This functionality really makes promises stand out from regular callback patterns.
    We can optimize the previous code by making a shortcut method to retrieve the
    categories, as shown in the following code:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这种功能确实使承诺从常规回调模式中脱颖而出。我们可以通过创建一个简短的方法来获取分类，从而优化之前的代码，如下面的代码所示：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the previous code sample, we first declare a variable called `catPromise`
    to hold the category of the promise. Next, we declare a function called `getCategory(i)`
    that takes the values of `i` as a parameter; inside this function, and we set
    `catPromise` to the JSON data retrieved by the `getData(jsonCategoryUrl)` function;
    however, using the `||` (or) operator, we can first check whether the `catPromise`
    object has a value so that we don't fetch the category JSON file again, but only
    once. When we call `getCategory` with the value `0`, it will retrieve the first
    category; after this, it will return the next category with `getCategory(1)` and
    pass it to the last `then` call. In this way, we won't download the category JSON
    file until `getCategory` is called; however often we call the `getCategory` function
    again, though, we will not need to redownload the category JSON file; rather,
    we will reuse it since it will be called again in the sequence of operations.
    As the `getCategory` function returns another promise object, it allows you to
    have promise-pipelining, where we have the result from the first operation getting
    passed to the subsequent one. Also, the important feature that this sample shows
    is that, if the function provided to `then` returns a new promise, the promise
    returned by `then` will not be fulfilled until the promise returned by that function
    is fulfilled, thereby queuing the asynchronous operation in that chain of promises.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的代码示例中，我们首先声明了一个名为`catPromise`的变量来保存承诺的分类。接下来，我们声明了一个名为`getCategory(i)`的函数，它将`i`的值作为参数；在这个函数内部，我们将`catPromise`设置为通过`getData(jsonCategoryUrl)`函数获取的JSON数据；然而，通过使用`||`（或）运算符，我们首先检查`catPromise`对象是否有值，这样我们就不需要再次获取分类的JSON文件，只需一次即可。当我们用值`0`调用`getCategory`时，它会获取第一个分类；之后，它会用`getCategory(1)`获取下一个分类，并将其传递给最后的`then`调用。这样，在我们调用`getCategory`之前，我们不会下载分类的JSON文件；然而，无论我们再次调用`getCategory`函数多少次，我们都不会需要重新下载分类的JSON文件；相反，我们会重复使用它，因为它将在操作序列中再次被调用。由于`getCategory`函数返回另一个承诺对象，它允许你实现承诺流水线，其中第一个操作的结果被传递给随后的一个操作。此外，这个示例展示的重要特性是，如果传递给`then`的函数返回一个新的承诺，那么`then`返回的承诺将不会被履行，直到那个函数返回的承诺被履行，从而在承诺的链中排队进行异步操作。
- en: In addition, the previous sample clearly shows how promises address the traditional
    callback model and the pyramid code that it generates.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之前，示例清楚地展示了承诺是如何解决传统回调模型及其所生成的金字塔代码的。
- en: Summary
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Promises represent a great way to address the intricacies of asynchronous operations.
    Promises provide a great mechanism for easy chaining of asynchronous operations
    in JavaScript. They allow you to manage the sequences of these operations in a
    better way than the callback mode does.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 承诺是一种很好地解决异步操作复杂性的方法。承诺在JavaScript中为异步操作的轻松链式提供了一种很好的机制。它们允许你以比回调模式更好的方式来管理这些操作的序列。
- en: In the next chapter, we will learn about handling errors in promises, see how
    exceptions are managed with promises, and go over some examples on how to handle
    errors that arise during an asynchronous operation in promises.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何在承诺中处理错误，了解如何使用承诺来管理异常，并且回顾一些在承诺中处理异步操作过程中出现的错误的例子。
