- en: Chapter 8. Security with the Allow and Deny Rules
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。使用允许和拒绝规则进行安全设置
- en: In the previous chapter, we created our admin user and prepared the `editPost`
    template. In this chapter, we will make this template work so that we can create
    and edit posts using it.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一章中，我们创建了我们的管理员用户并准备了`editPost`模板。在本章中，我们将使这个模板工作，以便我们可以使用它创建和编辑帖子。
- en: To make it possible to insert and update documents in our database, we need
    to set constraints so that not everybody can change our database. In Meteor, this
    is done using the allow and deny rules. These functions will check documents before
    they are inserted into the database.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使插入和更新数据库中的文档成为可能，我们需要设置约束，使不是每个人都可以更改我们的数据库。在Meteor中，这是使用允许和拒绝规则完成的。这些函数将在文档被插入数据库前检查它们。
- en: 'In this chapter, you will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将涵盖以下主题：
- en: Adding and updating posts
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加和更新帖子
- en: Using the allow and deny rules to control the updating of the database
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用允许和拒绝规则来控制数据库的更新
- en: Using methods on the server for more flexibility
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在服务器上使用方法以获得更多灵活性
- en: Using method stubs to enhance user experience
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用方法桩来增强用户体验
- en: Note
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you've jumped right into the chapter and want to follow the examples, download
    the previous chapter's code examples from either the book's web page at [https://www.packtpub.com/books/content/support/17713](https://www.packtpub.com/books/content/support/17713)
    or from the GitHub repository at [https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter7](https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter7).
  id: totrans-9
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您直接跳到这一章节并希望跟随示例，请从书籍的网页[https://www.packtpub.com/books/content/support/17713](https://www.packtpub.com/books/content/support/17713)或GitHub仓库[https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter7](https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter7)下载前一章节的代码示例。
- en: These code examples will also contain all the style files, so we don't have
    to worry about adding CSS code along the way.
  id: totrans-10
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些代码示例还将包含所有的样式文件，所以我们不需要担心在过程中添加CSS代码。
- en: Adding a function to generate slugs
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加一个生成slug的函数
- en: 'In order to generate slugs from our post''s titles, we will use the `underscore-string`
    library, which comes with a simple `slugify()` function. Luckily, a wrapper package
    for this library already exists on the Meteor package servers. To add it, we run
    the following command from the terminal in our `my-meteor-blog` folder:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了从我们的帖子标题生成slugs，我们将使用带有简单`slugify()`函数的`underscore-string`库。幸运的是，这个库的一个包装包已经在Meteor包服务器上存在。要添加它，我们请在终端中运行以下命令，位于我们的`my-meteor-blog`文件夹中：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This will extend `underscore`, which is used by default in Meteor, with extra
    string functions such as `_.slugify()`, to generate a slug from strings.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使用默认在Meteor中使用的`underscore`扩展一些额外的字符串函数，如`_.slugify()`，从字符串生成一个slug。
- en: Creating a new post
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建新帖子
- en: Now that we can generate slugs for each created page, we can proceed to add
    the saving process to the `editPost` template.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经可以为每个创建的页面生成slugs，我们可以继续将保存过程添加到`editPost`模板中。
- en: 'To do so, we need to create a JavaScript file for our `editPost` template by
    saving a file called `editPost.js` to the `my-meteor-blog/client/templates` folder.
    Inside this file, we will add an event for the **Save** button of the template:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们需要为我们的`editPost`模板创建一个JavaScript文件，通过将一个名为`editPost.js`的文件保存到`my-meteor-blog/client/templates`文件夹中来实现。在这个文件中，我们将为模板的**保存**按钮添加一个事件：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now, if we go to the `/create-post` route and click on the **Save Post** button,
    the **Post saved** log should appear in the browser's console.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们前往`/create-post`路由并点击**保存帖子**按钮，**帖子已保存**日志应该在浏览器控制台中出现。
- en: Saving a post
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保存帖子
- en: 'In order to save the post, we will simply take the form''s content and store
    it in the database. Later, we''ll redirect to the newly created post page. To
    do so, we extend our click event with the following lines of code:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保存帖子，我们只需取表单的内容并将其存储在数据库中。稍后，我们将重定向到新创建的帖子页面。为此，我们将我们的点击事件扩展为以下几行代码：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We get the current user so that we can add him later as the post''s author.
    We then generate a slug from the post''s title using our `slugify()` function:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们获取当前用户，以便稍后将其作为帖子的作者添加。然后使用我们的`slugify()`函数从帖子标题生成一个slug：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Following this, we insert the post document into the `Posts` collection using
    all other form fields. For the `timeCreated` property, we get the current Unix
    timestamp using the `moment` package, which we added in [Chapter 1](part0015_split_000.html#page
    "Chapter 1. Getting Started with Meteor"), *Getting Started with Meteor*.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 接着，我们使用所有其他表单字段将帖子文档插入到`Posts`集合中。对于`timeCreated`属性，我们使用在[第1章](part0015_split_000.html#page
    "Chapter 1. Getting Started with Meteor")，*Meteor入门*中添加的`moment`包获取当前的Unix时间戳。
- en: 'The `owner` field will later help us to determine by which user this post was
    created:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`owner`字段将帮助我们确定是由哪个用户创建了此帖子：'
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The second argument we pass to the `insert()` function is a callback function
    provided by Meteor that will receive an error argument if something goes wrong.
    If an error happens, we alert it, and if everything goes fine, we redirect to
    the newly inserted post using our generated slug.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们传递给`insert()`函数的第二个参数是一个由Meteor提供的回调函数，如果出错，它将接收到一个错误参数。如果发生错误，我们警告它，如果一切顺利，我们使用生成的slug将用户重定向到新插入的帖子。
- en: Since our route controller will then subscribe to a post with this slug, it
    will be able to load our newly created post and display it in the post template.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的路由控制器将会订阅这个slug的帖子，它将能够加载我们新创建的帖子并在帖子模板中显示它。
- en: Now, if we go to the browser, fill in the form, and click on the **Save** button,
    we should have created our first own post!
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们打开浏览器，填写表单，并点击**保存**按钮，我们应该已经创建了我们的第一个帖子！
- en: Editing posts
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编辑帖子
- en: So saving works. What about editing?
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 所以保存是可行的。编辑呢？
- en: When we click on the **Edit** button in the post, we will be shown the `editPost`
    template again. This time, however, the form fields are filled with the data from
    the post. So far so good, but if we press the **Save** button now, we will create
    another post instead of updating the current one.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们点击帖子中的**编辑**按钮时，我们将再次显示`editPost`模板。这次，表单字段填充了帖子的数据。到目前为止还不错，但如果我们现在点击**保存**按钮，我们将创建另一个帖子，而不是更新当前帖子。
- en: Updating the current post
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新当前帖子
- en: 'Since we set the data context of the `editPost` template, we can simply use
    the presence of the post''s `_id` field as an indicator to update, instead of
    inserting the post data:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们设置了`editPost`模板的数据上下文，我们可以简单地使用帖子`_id`字段的存在作为更新的指示器，而不是插入帖子数据：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Knowing the `_id`, we can simply update the current document using the `$set`
    property. Using `$set` will only overwrite the `title`, `description`, and `text`
    fields. The other fields will be left as they are.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 知道了`_id`，我们可以简单地使用`$set`属性来更新当前文档。使用`$set`只会覆盖`title`、`description`和`text`字段。其他字段将保持原样。
- en: Note that we now also need to create the `_this` variable on top of the function
    in order to access the `slug` property of the current data context in the callback
    later. This way, we can later redirect to our edited post page.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们现在还需要在函数顶部创建`_this`变量，以便在回调 later 中访问当前数据上下文的`slug`属性。这样，我们稍后可以将用户重定向到我们编辑的帖子页面。
- en: Now, if we save the file and go back to our browser, we can edit the post and
    click on **Save**, and all changes will be saved as expected to our database.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们保存文件并回到浏览器，我们可以编辑帖子并点击**保存**，所有更改都将如预期般保存到我们的数据库中。
- en: Now, we can create and edit posts. In the next section, we will learn how to
    restrict updates to the database by adding the allow and deny rules.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以创建和编辑帖子。在下一节中，我们将学习如何通过添加允许和拒绝规则来限制对数据库的更新。
- en: Restricting database updates
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 限制数据库更新
- en: Until now, we simply added the insert and update functionality to our `editPost`
    template. However, anybody can insert and update data if they just type an `insert`
    statement into their browser's console.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只是将插入和更新功能添加到了我们的`editPost`模板中。然而，如果有人在他们浏览器的控制台输入一个`insert`语句，任何人都可以插入和更新数据。
- en: To prevent this, we need to properly check for insertion and update rights on
    the server side before updating the database.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止这种情况，我们需要在服务器端正确检查插入和更新权限，然后再更新数据库。
- en: Meteor's collections come with the allow and deny functions, which will be run
    before every insertion or update to determine whether the action is allowed or
    not.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Meteor的集合带有允许和拒绝函数，这些函数在每次插入或更新之前运行，以确定该操作是否被允许。
- en: The allow rules let us allow certain documents or fields to be updated, whereas
    the deny rules overwrite any allow rules and definitely deny any action on its
    collection.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 允许规则让我们允许某些文档或字段被更新，而拒绝规则覆盖任何允许规则，并肯定地拒绝对其集合的任何操作。
- en: To make this more visible, let's visualize an example where we define two allow
    rules; one will allow certain documents' `title` fields to be changed and another
    will allow only editing of the `description` fields, but an additional deny rule
    can prevent one specific document to be edited in any case.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这更加明显，让我们想象一个例子，我们定义了两个允许规则；其中一个将允许某些文档的`title`字段被更改，另一个只允许编辑`description`字段，但还有一个额外的拒绝规则可以防止某个特定文档在任何情况下被编辑。
- en: Removing the insecure package
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除不安全的包
- en: To start using the allow and deny rules, we need to remove the `insecure` package
    from our app so that no client can simply make changes to our database without
    passing our allow and deny rules.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始使用允许和拒绝规则，我们需要从我们的应用程序中删除`insecure`包，这样客户端就不能简单地不通过我们的允许和拒绝规则就对我们的数据库进行更改。
- en: 'Quit the running `meteor` instance using *Ctrl* + *C* in the terminal and run
    the following command:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 使用终端中的*Ctrl* + *C* 停止运行中的`meteor`实例，并运行以下命令：
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: After we have successfully removed the package, we can run Meteor again using
    the `meteor` command.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 成功删除包后，我们可以使用`meteor`命令再次运行Meteor。
- en: When we now go to our browser and try to edit any post, we will see an alert
    window stating **Access denied**. Remember that we added this `alert()` call before,
    when an update or insert action failed?
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们现在打开浏览器尝试编辑任何帖子时，我们将看到一个提示窗口，显示**访问被拒绝**。记得我们之前在更新或插入操作失败时添加了这个`alert()`调用吗？
- en: Adding our first allow rules
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加我们的第一个允许规则
- en: In order to make our posts editable again, we need to add allow rules to enable
    database updates again.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使我们的帖子再次可编辑，我们需要添加允许规则以重新启用数据库更新。
- en: 'To do so, we will add the following allow rules to our `my-meteor-blog/collections.js`
    file, but in this case we''ll execute them only on the server side by checking
    against Meteor''s `isServer` variable, as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们将在我们的`my-meteor-blog/collections.js`文件中添加以下允许规则，但在这个例子中，我们通过检查Meteor的`isServer`变量，使它们只在服务器端执行：
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the insertion *allow* rule , we will insert the document only if the post
    owner matches the current user and if the user is an admin, which we can determine
    by the `roles.admin` property we added in the previous chapter.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在插入*允许*规则中，我们只会在帖子所有者与当前用户匹配时插入文档，如果用户是管理员，我们可以在上一章中添加的`roles.admin`属性来确定。
- en: 'If the allow rule returns `false`, the insertion of the document will be denied.
    Otherwise, we will successfully add a new post. Updating works the same way, just
    that we only check whether the current user is an admin:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果允许规则返回`false`，将拒绝文档的插入。否则，我们将成功添加一个新帖子。更新也是一样，只是我们只检查当前用户是否是管理员：
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The arguments passed to the `update` function are listed in the following table:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给`update`函数的参数如下表所示：
- en: '| Field | Description |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '```Field``` | 描述 |'
- en: '| --- | --- |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '```---``` | ```---``` |'
- en: '| `userId` | The user ID of the current logged-in user, who performs that `update`
    action |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '```userId``` | 执行`update`操作的当前登录用户的用户ID |'
- en: '| `doc` | The document from the database, without the proposed changes |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '```doc``` | 数据库中的文档，不包括拟议的更改 |'
- en: '| `fields` | An array with field parameters that will be updated |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '```fields``` | 包含将要更新的字段参数的数组 |'
- en: '| `modifier` | The modifier the user passed to the `update` function, such
    as `{$set: {''name.first'': "Alice"}, $inc: {score: 1}}` |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '```modifier``` | 用户传递给`update`函数的修改器，例如`{$set: {''name.first'': "Alice"}, $inc:
    {score: 1}}` |'
- en: The `fetch` property, which we specify last in the allow rule's object, determines
    which fields of the current document should be passed to the update rule. In our
    case, we only need the `owner` property for our update rule. The `fetch` property
    exists for performance reasons, to prevent unnecessarily large documents from
    being passed to the rule's functions.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最后在允许规则的对象中指定的`fetch`属性，决定了当前文档的哪些字段应该传递给更新规则。在我们这个例子中，我们只需要`owner`属性用于我们的更新规则。`fetch`属性存在是为了性能原因，以防止不必要的巨大文档被传递到规则函数中。
- en: Note
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Additionally, we can specify the `remove()` rule and the `transform()` function.
    The `remove()` rule will get the same arguments as the `insert()` rule and allow
    or prevent removal of documents.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们可以指定`remove()`规则和`transform()`函数。`remove()`规则将获得与`insert()`规则相同的参数，并允许或阻止文档的删除。
- en: The `transform()` function can be used to transform the document before being
    passed to the allow or deny rules, for example, to normalize it. However, be aware
    that this won't change the document that gets inserted into the database.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`transform()`函数可以用来在传递给允许或拒绝规则之前转换文档，例如，使其规范化。然而，要注意的是，这不会改变插入数据库的文档。'
- en: If we now try to edit a post in our website, we should be able to edit all posts
    as well as create new ones.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在如果我们尝试在我们的网站上编辑一个帖子，我们应该能够编辑所有帖子以及创建新的帖子。
- en: Adding a deny rule
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加拒绝规则
- en: 'To improve security, we can fix the owner of the post and the time when it
    was created. We can prevent changes to the owner and the `timeCreated` and `slug`
    fields by adding an additional deny rule to our `Posts` collection, as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提高安全性，我们可以修复帖子的所有者和创建时间。我们可以通过向我们的`Posts`集合中添加一个额外的拒绝规则来防止对所有者以及`timeCreated`和`slug`字段的更改，如下所示：
- en: '[PRE9]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This rule will simply check whether the `fields` argument contains one of the
    restricted fields. If it does, we deny the update to this post. So, even if our
    previous allow rules have passed, our deny rule ensures that the document doesn't
    change.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这个规则将简单地检查`fields`参数是否包含受限制的字段之一。如果包含，我们就拒绝更新这篇帖子。所以，即使我们之前的允许规则已经通过，我们的拒绝规则也确保了文档不会发生变化。
- en: 'We can try the deny rule by going to our browser''s console, and when we are
    at a post page, typing the following commands:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在浏览器的控制台中尝试拒绝规则，当我们处于一个帖子页面时，输入以下命令：
- en: '[PRE10]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This should give you an error stating **update failed: Access denied**, as
    shown in the following screenshot:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会给你一个错误，提示**更新失败：访问被拒绝**，如下面的截图所示：
- en: '![Adding a deny rule](img/00023.jpeg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![添加拒绝规则](img/00023.jpeg)'
- en: Though we can add and update posts now, there is a better way of adding new
    posts than simply inserting them into our `Posts` collection from the client side.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们现在可以添加和更新帖子，但还有一种比简单地将它们从客户端插入到我们的`Posts`集合中更好的添加新帖子的方法。
- en: Adding posts using a method call
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用方法调用来添加帖子
- en: Methods are functions that can be called from the client and will be executed
    on the server.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 方法是可以在客户端调用并在服务器上执行的函数。
- en: Method stubs and latency compensation
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 方法存根和延迟补偿
- en: The advantage of methods is that they can execute code on the server, having
    the full database and a stub method on the client available.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 方法的优势在于它们可以在服务器上执行代码，同时拥有完整的数据库和客户端上的存根方法。
- en: For example, we can have a method do something on the server and simulate the
    expected outcome in a stub method on the client. This way, the user doesn't have
    to wait for the server's response. A stub can also invoke an interface change,
    such as adding a loading indicator.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以有一个方法在服务器上执行某些操作，并在客户端的存根方法中模拟预期的结果。这样，用户不必等待服务器的响应。存根还可以调用界面更改，例如添加一个加载指示器。
- en: One native example of a method call is Meteor's `Collection.insert()` function,
    which will execute a client-side function, inserting the document immediately
    into the local `minimongo` database as well as sending a request executing the
    real `insert` method on the server. If the insertion is successful, the client
    has the document already inserted. If an error occurs, the server will respond
    and remove the inserted document from the client again.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 一个原生方法调用的例子是Meteor的`Collection.insert()`函数，它将执行客户端侧的函数，立即将文档插入到本地`minimongo`数据库中，同时发送一个请求在服务器上执行真正的`insert`方法。如果插入成功，客户端已经有了插入的文档。如果出现错误，服务器将响应并从客户端再次移除插入的文档。
- en: In Meteor, this concept is called **latency compensation**, as the interface
    reacts immediately to the user's response and therefore compensates the latency,
    while the server's round trip will happen in the background.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在Meteor中，这个概念被称为**延迟补偿**，因为界面会立即对用户的响应做出反应，从而补偿延迟，而服务器的往返将在后台发生。
- en: Inserting a post using a method call enables us to simply check whether the
    slug we want to use for the post already exists in another post. Additionally,
    we can use the server's time for the `timeCreated` property to be sure we are
    not using an incorrect user timestamp.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 使用方法调用来插入帖子，使我们能够简单地检查我们想要为帖子使用的slug是否已经在另一篇帖子中存在。此外，我们还可以使用服务器的时间来为`timeCreated`属性确保我们没有使用错误的用户时间戳。
- en: Changing the button
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更改按钮
- en: 'In our example, we will simply use the method stub functionality to change
    the text of the **Save** button to `Saving…` while we run the method on the server.
    To do so, perform the following steps:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们将简单地使用方法存根功能，在服务器上运行方法时将**保存**按钮的文本更改为`Saving…`。为此，执行以下步骤：
- en: 'To start, let''s first change the **Save** button''s static text with a template
    helper so that we can change it dynamically. Open up `my-meteor-blog/client/templates/editPost.html`
    and replace the **Save** button code with the following code:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们通过模板助手更改**保存**按钮的静态文本，以便我们可以动态地更改它。打开`my-meteor-blog/client/templates/editPost.html`，用以下代码替换**保存**按钮的代码：
- en: '[PRE11]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now open `my-meteor-blog/client/templates/editPost.js` and add the following
    template helper function at the beginning of the file:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在打开`my-meteor-blog/client/templates/editPost.js`，在文件开头添加以下模板助手函数：
- en: '[PRE12]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Here, we return the session variable named `saveButton`, which we set to the
    default value, `Save Post`, earlier.
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们返回名为`saveButton`的会话变量，我们之前将其设置为默认值`Save Post`。
- en: Changing the session will allow us to change the text of the **Save** button
    later while saving the document.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 更改会话将允许我们在保存文档的同时稍后更改**保存**按钮的文本。
- en: Adding the method
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加方法
- en: Now that we have a dynamic **Save** button, let's add the actual method to our
    app. For this, we will create a new file called `methods.js` directly in our `my-meteor-blog`
    folder. This way, its code will be loaded on the server and the client, which
    is necessary to execute the method on the client as a stub.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个动态的**保存**按钮，让我们在我们的应用中添加实际的方法。为此，我们将创建一个名为`methods.js`的新文件，直接位于我们的`my-meteor-blog`文件夹中。这样，它的代码将在服务器和客户端加载，这是在客户端作为存根执行方法所必需的。
- en: 'Add the following lines of code to add a method:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 添加以下代码以添加方法：
- en: '[PRE13]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This will add a method called `insertPost`. Inside this method, the stub functionality
    is already added by making use of the `isSimulation` property, which is made available
    in the `this` object of the function by Meteor.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这将添加一个名为`insertPost`的方法。在这个方法内部，存根功能已经通过使用`isSimulation`属性添加，该属性是通过Meteor在函数的`this`对象中提供的。
- en: 'The `this` object also has the following properties:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`this`对象还具有以下属性：'
- en: '`unblock()`: This is a function that when called will prevent the method from
    blocking other method calls'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unblock()`：当调用此函数时，将防止该方法阻塞其他方法调用'
- en: '`userId`: This contains the current user''s ID'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`userId`：这包含当前用户的ID'
- en: '`setUserId()`: This a function to connect the current client with a certain
    user'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setUserId()`：这个函数用于将当前客户端连接到某个用户'
- en: '`connection`: This is the connection on the server through which this method
    is called'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connection`：这是通过该方法在服务器上调用的连接'
- en: 'If `isSimulation` is set to `true`, the method is not run on the server side
    but as a stub on the client. Inside this condition, we simply set the `saveButton`
    session variable to `Saving…` so that the button text will change:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`isSimulation`设置为`true`，该方法不会在服务器端运行，而是作为存根在客户端运行。在这个条件下，我们简单地将`saveButton`会话变量设置为`Saving…`，以便按钮文本会更改：
- en: '[PRE14]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'To complete the method, we will add the server-side code for post insertion:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成方法，我们将添加帖子插入的服务器端代码：
- en: '[PRE15]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Here, we get the current user to add the author name and owner ID.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们获取当前用户以添加作者名称和所有者ID。
- en: We throw an exception with `new Meteor.Error` if the user is not logged in.
    This will stop the execution of the method and return an error message we define.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户没有登录，我们就抛出异常，用`new Meteor.Error`。这将阻止方法的执行并返回我们定义的错误信息。
- en: 'We also search for a post with the given slug. If we find one, we prepend a
    random string to the slug to prevent duplicates. This makes sure that every slug
    is unique, and we can successfully route to our newly created post:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还查找具有给定slug的帖子。如果我们找到一个，我们在slug前添加一个随机字符串，以防止重复。这确保了每个slug都是唯一的，我们可以成功路由到我们新创建的帖子：
- en: '[PRE16]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Before we insert the newly created post, we add `timeCreated` using the `moment`
    library and the `author` and `owner` properties:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们插入新创建的帖子之前，我们使用`moment`库和`author`和`owner`属性添加`timeCreated`：
- en: '[PRE17]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'After we insert the document, we return the corrected slug, which will then
    be received in the callback of the method call as the second argument:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们插入文档之后，我们返回修正后的slug，然后在该方法调用的回调中作为第二个参数接收：
- en: '[PRE18]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Calling the method
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调用方法
- en: 'Now that we have created our `insertPost` method, we can change the code in
    the submit event, where we inserted the post earlier in our `editPost.js` file,
    with a call to our method:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了`insertPost`方法，我们可以改变在`editPost.js`文件中之前插入帖子时的提交事件代码，用我们的方法进行调用：
- en: '[PRE19]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: As we can see in the callback of the method call, we route to the newly created
    post using the `slug` variable we received as the second argument in the callback.
    This ensures that if the `slug` variable is modified on the server side, we use
    the modified version to route to the post. Additionally, we reset the `saveButton`
    session variable to change the text to `Save Post` again.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在方法调用的回调中看到的那样，我们使用在回调中作为第二个参数接收到的`slug`变量路由到新创建的帖子。这确保了如果`slug`变量在服务器端被修改，我们使用修改后的版本来路由到帖子。此外，我们将`saveButton`会话变量重置为将文本更改为`Save
    Post`。
- en: That's it! Now, we can create a new post and save it using our newly created
    `insertPost` method. However, editing will still be done from the client side
    using `Posts.update()`, as we now have allow and deny rules, which make sure that
    only allowed data is modified.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！现在，我们可以使用我们新创建的`insertPost`方法创建并保存新的帖子。然而，编辑仍然会在客户端使用`Posts.update()`进行，因为我们现在有了允许和拒绝规则，以确保只有允许的数据被修改。
- en: Summary
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned how to allow and deny database updates. We set up
    our own allow and deny rules and saw how methods can improve security by moving
    sensitive processes to the server side. We also improved our procedure of creating
    posts by checking whether the slug already exists and adding a simple progress
    indicator.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何允许和拒绝数据库的更新。我们设置了自己的允许和拒绝规则，并了解了方法如何通过将敏感过程移动到服务器端来提高安全性。我们还通过检查slug是否已存在并在其中添加了一个简单的进度指示器来改进发帖过程。
- en: 'If you want to dig deeper into the allow and deny rules or methods, take a
    look at the following Meteor documentations:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想更深入地了解允许和拒绝规则或方法，请查看以下Meteor文档：
- en: '[http://docs.meteor.com/#/full/allow](http://docs.meteor.com/#/full/allow)'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://docs.meteor.com/#/full/allow](http://docs.meteor.com/#/full/allow)'
- en: '[http://docs.meteor.com/#/full/deny](http://docs.meteor.com/#/full/deny)'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://docs.meteor.com/#/full/deny](http://docs.meteor.com/#/full/deny)'
- en: '[https://docs.meteor.com/#/full/methods_header](https://docs.meteor.com/#/full/methods_header)'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.meteor.com/#/full/methods_header](https://docs.meteor.com/#/full/methods_header)'
- en: You can find this chapter's code examples at [https://www.packtpub.com/books/content/support/17713](https://www.packtpub.com/books/content/support/17713)
    or on GitHub at [https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter8](https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter8).
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://www.packtpub.com/books/content/support/17713](https://www.packtpub.com/books/content/support/17713)找到本章的代码示例，或者在GitHub上找到[https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter8](https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter8)。
- en: In the next chapter, we will make our interface real time by constantly updating
    the post's timestamps.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将通过不断更新帖子的时间戳来使我们的界面实现实时更新。
