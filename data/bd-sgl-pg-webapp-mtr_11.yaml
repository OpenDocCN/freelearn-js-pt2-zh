- en: Chapter 11. Building Our Own Package
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章。构建我们自己的包
- en: In this chapter, we will learn how to build our own package. Writing packages
    allows us to create closed-functionality components that can be shared between
    many apps. In the second half of the chapter, we will publish our app on Atmosphere,
    Meteor's third-party package repository, at [https://atmospherejs.com](https://atmospherejs.com).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何构建自己的包。编写包允许我们创建可以共享在许多应用中的闭合功能组件。在本章的后半部分，我们将把我们的应用发布到Atmosphere，Meteor的第三方包仓库，地址为[https://atmospherejs.com](https://atmospherejs.com)。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Structuring a package
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结构化一个包
- en: Creating a package
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个包
- en: Publishing your own package
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布自己的包
- en: Note
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In this chapter, we will package the `ReactiveTimer` object that we built in
    [Chapter 9](part0081_split_000.html#page "Chapter 9. Advanced Reactivity"), *Advanced
    Reactivity*. To follow the examples in this chapter, download the previous chapter's
    code examples from either the book's web page at [https://www.packtpub.com/books/content/support/17713](https://www.packtpub.com/books/content/support/17713)
    or from the GitHub repository at [https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter10](https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter10).
  id: totrans-7
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在本章中，我们将包装在第[9章](part0081_split_000.html#page "第9章高级反应性")，*高级反应性*中构建的`ReactiveTimer`对象。要遵循本章中的示例，请从以下任一位置下载上一章的代码示例：[https://www.packtpub.com/books/content/support/17713](https://www.packtpub.com/books/content/support/17713)（书籍网页）或[https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter10](https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter10）（GitHub仓库）。
- en: The structure of a package
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 包的结构
- en: A package is a bundle of JavaScript files that exposes only specific variables
    to a Meteor app. Other than in a Meteor app, package files will get loaded in
    the loading order we specify.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 包是一个包含特定变量暴露给Meteor应用的JavaScript文件集合。除了在Meteor应用中，包文件将按我们指定的加载顺序加载。
- en: Every package needs a `package.js` file that contains the configuration of that
    package. In such a file, we can add a name, description, and version, set the
    loading order, and determine which variables should be exposed to the app. Additionally,
    we can specify unit tests for our packages to test them.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 每个包都需要一个`package.js`文件，该文件包含该包的配置。在这样的文件中，我们可以添加一个名称、描述和版本，设置加载顺序，并确定哪些变量应该暴露给应用。此外，我们还可以为我们的包指定单元测试来测试它们。
- en: 'An example of a `package.js` file can look like this:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`package.js`文件的一个例子可能看起来像这样：'
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We can structure the files and folders in our package as we wish, but a good
    basis is the following arrangement:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以按照自己的意愿结构包中的文件和文件夹，但以下安排是一个好的基础：
- en: '![The structure of a package](img/00031.jpeg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![包的结构](img/00031.jpeg)'
- en: '`tests`: This contains the package''s unit tests and the `tests.js` file'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tests`：包含包的单元测试和`tests.js`文件'
- en: '`lib`: This contains third-party libraries used by the package'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lib`：包含包使用的第三方库'
- en: '`README.md`: This contains simple instructions on how to use the package'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`README.md`：包含使用包的简单说明'
- en: '`package.js`: This contains the package''s metadata'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`package.js`: 此文件包含包的元数据'
- en: '`myPackage.js`: These are one or more files that contain the package code'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`myPackage.js`：这些是包含包代码的一个或多个文件'
- en: 'To test a package, we can use Meteor''s `tinytest` package, which is a simple
    unit testing package. If we have tests, we can run them using the following command:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试一个包，我们可以使用Meteor的`tinytest`包，它是一个简单的单元测试包。如果我们有测试，我们可以使用以下命令运行它们：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This will start a Meteor app at `http://localhost:3000`, which runs our package
    tests. To see how to write a package, take a look at the next chapter.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动一个Meteor应用，地址为`http://localhost:3000`，它运行我们的包测试。要了解如何编写一个包，请查看下一章。
- en: Creating our own package
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自己的包
- en: 'To create our own package, we will use our `ReactiveTimer` object, which we
    built in [Chapter 9](part0081_split_000.html#page "Chapter 9. Advanced Reactivity"),
    *Advanced Reactivity*:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建自己的包，我们将使用我们在第[9章](part0081_split_000.html#page "第9章高级反应性")，*高级反应性*中构建的`ReactiveTimer`对象：
- en: 'We go to our terminal, in our app''s folder and run the following command:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们来到终端，在我们的应用文件夹中运行以下命令：
- en: '[PRE2]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This will create a folder named `packages` with a `reactive-timer` folder inside
    it. Inside the `reactive-timer` folder, Meteor has already created a `package.js`
    file and some example package files.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将创建一个名为`packages`的文件夹，其中有一个`reactive-timer`文件夹。在`reactive-timer`文件夹内，Meteor已经创建了一个`package.js`文件和一些示例包文件。
- en: Now we can delete all the files inside the `reactive-timer` folder, except the
    `package.js` file.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以删除`reactive-timer`文件夹内的所有文件，除了`package.js`文件。
- en: Then we move the `my-meteor-blog/client/ReactiveTimer.js` file, which we created
    in [Chapter 9](part0081_split_000.html#page "Chapter 9. Advanced Reactivity"),
    *Advanced Reactivity*, to our newly created `reactive-timer` package folder.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们将我们在第[9章](part0081_split_000.html#page "Chapter 9. Advanced Reactivity")
    *高级反应性*中创建的`my-meteor-blog/client/ReactiveTimer.js`文件移动到我们新创建的`reactive-timer`包文件夹中。
- en: 'Lastly, we open the copied `ReactiveTimer.js` file and remove the following
    lines:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们打开复制的`ReactiveTimer.js`文件，并删除以下行：
- en: '[PRE3]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Later, we'll instantiate the `timer` object inside the app itself and not in
    the package file.
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 稍后，我们在应用本身内部实例化`timer`对象，而不是在包文件中。
- en: We should now have a simple folder with the default `package.js` file and our
    `ReactiveTimer.js` file. This is almost it! We just need to configure our package
    and we are ready to use it in our app.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们应该有一个简单的文件夹，带有默认的`package.js`文件和我们的`ReactiveTimer.js`文件。这几乎就是全部了！我们只需要配置我们的包，就可以在应用中使用它了。
- en: Adding the package metadata
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加包元数据
- en: 'To add the package''s metadata, we open the file called `package.js` and add
    the following lines of code:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加包的元数据，我们打开名为`package.js`的文件，并添加以下代码行：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This adds a name to the package as well as a description and a version.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这为包添加了一个名称、一个描述和一个版本。
- en: Note that the package name is namespaced with the author's name. This exists
    so that packages with the same name can be made distinct through the names of
    their authors. In our case, we choose `meteor-book`, which is not a real username.
    To publish the package, we need to use our real Meteor developer username.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，包名称与作者的名称命名空间。这样做的目的是，通过它们的作者名称，可以使具有相同名称的包区分开来。在我们这个案例中，我们选择`meteor-book`，这并不是一个真实的用户名。要发布包，我们需要使用我们真实的Meteor开发者用户名。
- en: 'After the `Package.describe()` function come the actual package dependencies:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Package.describe()`函数之后是实际的包依赖关系：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here, we define the version of the Meteor core packages this package should
    use:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们定义了这个包应该使用的Meteor核心包的版本：
- en: With `api.use()`, we define an additional package (or packages) this package
    depends on. Note that these dependencies won't be accessible to the app itself,
    which uses this package.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`api.use()`，我们定义了这个包依赖的额外包（或包）。请注意，这些依赖不会被使用这个包的应用本身访问到。
- en: Note
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Additionally, there exists `api.imply()`, which not only makes another package
    available in the package's files, but also adds it to the Meteor app itself so
    that it can be accessed by the app's code.
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另外，还存在`api.imply()`，它不仅使另一个包在包的文件中可用，而且还将它添加到Meteor应用本身，使其可以被应用的代码访问。
- en: 'If we use a third-party package, we must specify the minimum package version
    as follows:'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们使用第三方包，我们必须指定最低的包版本，如下所示：
- en: '[PRE6]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'We can also pass in a third parameter, `{weak: true}`, to specify that the
    dependent package will only be used if it is already added to the app by the developer.
    This can be used to enhance a package when other packages are present.'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '我们还可以传入第三个参数，`{weak: true}`，以指定只有在开发者已经将依赖包添加到应用中时，才会使用该依赖包。这可以用来在有其他包存在时增强一个包。'
- en: 'In the second parameter of the `api.use()` function, we can specify whether
    to load it on the client, server, or both, using an array:'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`api.use()`函数的第二个参数中，我们可以指定是否在客户端、服务器或两者上都加载它，使用数组：
- en: '[PRE7]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Tip
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: We don't really need to import the `Tracker` package, as it's already a part
    of Meteor's core `meteor-platform` package (added by default to any Meteor app);
    we do this here for the sake of an example.
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们实际上不需要导入`Tracker`包，因为它已经是Meteor核心`meteor-platform`包的一部分（默认添加到任何Meteor应用中）；我们在这里这样做是为了示例。
- en: 'We then use `api.export(''ReactiveTimer'')` to define which variable of the
    package should be exposed to the Meteor app using this package. Remember that
    we created the `ReactiveTimer` object inside the `ReactiveTimer.js` file using
    the following lines of code:'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后我们使用`api.export('ReactiveTimer')`来定义包中应该向使用此包的Meteor应用公开哪个变量。记住，我们在`ReactiveTimer.js`文件中使用以下代码行创建了`ReactiveTimer`对象：
- en: '[PRE8]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Note
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that we didn't use `var` to create the variable. This way, it is accessible
    in all the other files of the package and can also be exposed to the app itself.
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，我们没有使用`var`来创建变量。这样，它在包的所有其他文件中都可以访问，也可以暴露给应用本身。
- en: Lastly, we tell the package system which files belong to the package, using
    `api.addFiles()`. We can have multiple calls of `api.addFiles()` one after the
    other. This order will then specify the loading order of the files.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，我们使用`api.addFiles()`告诉包系统哪些文件属于这个包。我们可以有`api.addFiles()`的多个调用，一个接一个。这个顺序将指定文件的加载顺序。
- en: Here, we can again tell Meteor where to load the file—on the client, the server,
    or both—using `['client', 'server']`.
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们再次告诉Meteor将文件加载到哪个地方——客户端、服务器还是两者都加载——使用`['client', 'server']`。
- en: In this case, we only provide the `ReactiveTimer` object on the client, as Meteor's
    reactive functions exist only on the client side.
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这个例子中，我们只在客户端提供了`ReactiveTimer`对象，因为Meteor的反应式函数只存在于客户端。
- en: Note
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you want to see a full list of methods on the `api` object, take a look at
    Meteor's documentation at [http://docs.meteor.com/#packagejs](http://docs.meteor.com/#packagejs).
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你想要查看`api`对象的所有方法，请查看Meteor的文档[http://docs.meteor.com/#packagejs](http://docs.meteor.com/#packagejs)。
- en: Adding the package
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加包
- en: 'Copying a package folder to the `my-meteor-blog/packages` folder is not enough
    to tell Meteor to use the package. There are additional steps that we need to
    follow:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 将包文件夹复制到`my-meteor-blog/packages`文件夹中并不足以让Meteor使用这个包。我们需要遵循额外的步骤：
- en: 'To add the package, we need to go to our app''s folder from the terminal, quit
    any currently running `meteor` instance, and run the following command:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了添加包，我们需要从终端前往我们的应用文件夹，停止任何正在运行的`meteor`实例，并运行以下命令：
- en: '[PRE9]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We then need to instantiate the `ReactiveTimer` object in our app. To do this,
    we add the following lines of code to our `my-meteor-blog/main.js` file:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们需要在我们的应用中实例化`ReactiveTimer`对象。为此，我们需将以下代码行添加到我们的`my-meteor-blog/main.js`文件中：
- en: '[PRE10]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now we can start the Meteor app again using `$ meteor` and open our browser
    at `http://localhost:3000`.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以再次使用`$ meteor`启动Meteor应用，并在`http://localhost:3000`打开我们的浏览器。
- en: We shouldn't see any difference, as we just replaced the `ReactiveTimer` object
    that was already there in our app with the `ReactiveTimer` object from our `meteor-book:reactive-timer`
    package.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该看不到任何区别，因为我们只是用我们`meteor-book:reactive-timer`包中的`ReactiveTimer`对象替换了应用中原本的`ReactiveTimer`对象。
- en: 'To see the timer run, we can open our browser''s console and run the following
    code snippet:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 为了看到计时器运行，我们可以打开浏览器的控制台并运行以下的代码片段：
- en: '[PRE11]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This should log `timer run` every 10 seconds, showing us that the package is
    actually working.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会每10秒记录一次`timer run`，显示我们的包实际上是在工作的。
- en: Releasing our package to the public
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发布我们的包给公众
- en: It's very easy to release a package to the world, but for people to use our
    package, we should add a readme file so they can know how to use our package.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 向世界发布一个包是非常容易的，但为了让人们使用我们的包，我们应该添加一个readme文件，这样他们就可以知道如何使用我们的包。
- en: 'Create a file called `README.md` in the package folder we created earlier and
    add the following code snippet:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前创建的包文件夹中创建一个名为`README.md`的文件，并添加以下的代码片段：
- en: '[PRE12]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: As we can see, this file uses the markdown syntax. This way, it will look good
    on GitHub and [http://atmospherejs.com](http://atmospherejs.com), which is the
    website where you can browse all the available Meteor packages.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，这个文件使用了Markdown语法。这样，它将在GitHub和[http://atmospherejs.com](http://atmospherejs.com)上看起来很不错，这是一个你可以浏览所有可用Meteor包的网站。
- en: With this readme file, we will make it easy for other people to use the package
    and appreciate our work.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个readme文件，我们将使其他人更容易使用我们的包并欣赏我们的工作。
- en: Publishing our package online
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在线发布我们的包
- en: 'After we have saved the readme file, we can push the package to GitHub or any
    other online Git repository, and add the repository''s URL to the `Package.describe({git:
    …})` variable of `package.js`. Keeping the code on GitHub keeps it safe and allows
    others to fork and improve it. Let''s perform the following steps to push our
    package online:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '在我们保存了`readme`文件之后，我们可以将这个包推送到GitHub或其他的在线Git仓库，并将仓库的URL添加到`package.js`文件的`Package.describe({git:
    …})`变量中。将代码托管在GitHub上可以保证它的安全性，并允许他人进行分叉和改进。下面让我们来进行将我们的包推送到线上的步骤：'
- en: 'To publish our package, we can simply run the following command from inside
    the `pages` folder in the terminal:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 发布我们的包，我们可以在终端的`pages`文件夹内简单地运行以下命令：
- en: '[PRE13]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This will build and bundle the package and upload it to Meteor's package servers.
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这会构建并捆绑包，然后上传到Meteor的包服务器上。
- en: 'If everything goes fine, we should be able to find our package by typing the
    following command:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果一切顺利，我们应该能够通过输入以下命令找到我们的包：
- en: '[PRE14]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This is illustrated in the following screenshot:'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这在下面的截图中有所说明：
- en: '![Publishing our package online](img/00032.jpeg)'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![在线发布我们的包](img/00032.jpeg)'
- en: 'We can then show all of the information about the found package using the following
    command:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们可以使用以下命令显示找到的包的所有信息：
- en: '[PRE15]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This is illustrated in the following screenshot:'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这在上面的截图中说明：
- en: '![Publishing our package online](img/00033.jpeg)'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![在线发布我们的包](img/00033.jpeg)'
- en: To use the package version from the Meteor server, we can simply move the `packages/reactive-timer`
    folder somewhere else, remove the `package` folder, and run `$ meteor` to start
    the app.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使用来自Meteor服务器的包版本，我们只需将`packages/reactive-timer`文件夹移到别处，删除`package`文件夹，然后运行`$
    meteor`来启动应用程序。
- en: Now Meteor won't find any package with that name in the `packages` folder and
    will look online for that package. Since we published it, it will be downloaded
    and used in our app.
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在Meteor在`packages`文件夹中找不到具有该名称的包，并将在线查找该包。既然我们发布了它，它将被下载并用于我们的应用程序。
- en: 'Should we want to use a specific version of our package in the app, we can
    run the following command from inside our app''s folder in the terminal:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们想在我们的应用程序中使用我们包的特定版本，我们可以在终端中从我们应用程序的文件夹内运行以下命令：
- en: '[PRE16]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now our package is released and we can see it on Atmosphere at `http://atmospherejs.com/meteor-book/reactive-timer`,
    as shown in the following screenshot:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的包已经发布，我们可以在`http://atmospherejs.com/meteor-book/reactive-timer`看到它，如下所示：
- en: '![Publishing our package online](img/00034.jpeg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![在线发布我们的包](img/00034.jpeg)'
- en: Note
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that this is just an example of a package and was never actually released.
    However, a published version of this package under my name can be found at [http://atmospherejs.com/frozeman/reactive-timer](http://atmospherejs.com/frozeman/reactive-timer).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这只是一个包的示例，并且从未实际发布过。然而，在[http://atmospherejs.com/frozeman/reactive-timer](http://atmospherejs.com/frozeman/reactive-timer)以我的名义发布的这个包的版本可以找到。
- en: Updating our package
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新我们的包
- en: 'If we want to release a new version of our package, we can simply increase
    the version number in the `package.js` file and publish a new version using the
    following command from inside the `packages` folder:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想发布我们包的新版本，我们只需在`package.js`文件中增加版本号，然后从`packages`文件夹内使用以下命令发布新版本：
- en: '[PRE17]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'To make our app use the latest version of our package (as long as we didn''t
    specify a fixed version), we can simply run the following command from inside
    our app''s folder:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 要使我们的应用程序使用我们包的最新版本（只要我们没有指定固定版本），我们只需在终端内从我们的应用程序文件夹中运行以下命令：
- en: '[PRE18]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'If we want to update all packages, we can run the following command:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想更新所有包，我们可以运行以下命令：
- en: '[PRE19]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Summary
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we created our own package from our `ReactiveTimer` object.
    We also learned how simple it is to publish a package on Meteor's official packaging
    system.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们从我们的`ReactiveTimer`对象创建了自己的包。我们还了解到，在Meteor的官方打包系统中发布包是多么简单。
- en: 'To dig deeper, read the documentations at the following resources:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 要深入了解，请阅读以下资源中的文档：
- en: '[https://docs.meteor.com/#/full/writingpackages](https://docs.meteor.com/#/full/writingpackages)'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.meteor.com/#/full/writingpackages](https://docs.meteor.com/#/full/writingpackages)'
- en: '[https://docs.meteor.com/#packagejs](https://docs.meteor.com/#packagejs)'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.meteor.com/#packagejs](https://docs.meteor.com/#packagejs)'
- en: '[https://www.meteor.com/services/package-server](https://www.meteor.com/services/package-server)'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Meteor 包服务器](https://www.meteor.com/services/package-server)'
- en: '[https://www.meteor.com/isobuild](https://www.meteor.com/isobuild)'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.meteor.com/isobuild](https://www.meteor.com/isobuild)'
- en: You can find this chapter's code examples at [https://www.packtpub.com/books/content/support/17713](https://www.packtpub.com/books/content/support/17713)
    or on GitHub at [https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter11](https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter11).
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://www.packtpub.com/books/content/support/17713](https://www.packtpub.com/books/content/support/17713)或GitHub上[https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter11](https://github.com/frozeman/book-building-single-page-web-apps-with-meteor/tree/chapter11)找到本章的代码示例。
- en: This code example contains only the package, so in order to add it to the app,
    use the code example of the previous chapter.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这个代码示例只包含包，所以为了将其添加到应用程序中，请使用前一章的代码示例。
- en: In the next chapter, we will take a look at testing our app and package.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将查看测试我们的应用程序和包。
