- en: Chapter 10. Bundling for Production
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章 生产环境的打包
- en: When deploying a JS application to production, bundling is an important practice
    performance-wise. By merging resources, mostly JS code, HTML templates, and CSS
    sheets, into a single file, we can drastically reduce the number of HTTP calls
    the browser has to make to serve the application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 将JavaScript应用程序部署到生产环境时，打包是一个重要的性能实践。通过将资源（主要是JavaScript代码、HTML模板和CSS表单）合并成单个文件，我们可以大大减少浏览器为服务应用程序而必须进行的HTTP调用次数。
- en: The CLI always bundles the application it runs, even in a development environment.
    This makes deploying an application to a server pretty simple; it's only a matter
    of building it and then copying a bunch of files over.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: CLI总是打包它运行的应用程序，即使在开发环境中也是如此。这使得将应用程序部署到服务器变得相当简单；只需构建它，然后复制一堆文件即可。
- en: But then comes the versioning problem. When deploying a new version of our application,
    if the bundles keep the same names, cached bundles may not get refreshed, causing
    users to run an outdated version of our application. How do we deal with this?
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 然而随后版本控制问题出现了。当部署我们应用程序的新版本时，如果打包文件保持相同的名称，缓存的打包文件可能不会刷新，导致用户运行我们应用程序的过时版本。我们如何处理这个问题？
- en: In this chapter, we'll see how to customize the bundling of our contact-management
    application. We'll also see how to leverage the CLI's revision feature to version
    our bundles, so we can benefit from HTTP caching as much as possible. Finally,
    we'll add a new build task to our project in order to facilitate deployment.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将了解如何自定义联系人管理应用程序的打包。我们还将了解如何利用CLI的修订功能对打包文件进行版本控制，以便我们可以充分利用HTTP缓存。最后，我们将向项目中添加一个新的构建任务，以方便部署。
- en: Configuring bundles
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置打包
- en: 'By default, a project created using the CLI contains two bundles: a first one
    named `vendor-bundle.js`, which contains all external libraries used by the application,
    and a second named `app-bundle.js`, which contains the application itself.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，使用CLI创建的项目包含两个打包文件：第一个名为`vendor-bundle.js`，其中包含应用程序使用的所有外部库；第二个名为`app-bundle.js`，其中包含应用程序本身。
- en: 'The bundles are configured in the `aurelia_project/aurelia.json` file, under
    the build section. Here''s how it looks in a typical application:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 打包配置在`aurelia_project/aurelia.json`文件中的构建部分。以下是在典型应用程序中的样子：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Each bundle has a unique name, and must define its content, which can be sourced
    from the application and external dependencies. Typically, the `app-bundle` includes
    all JS, HTML, and CSS from the application's sources, while the `vendor-bundle`
    includes external dependencies.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 每个打包文件都有一个唯一的名称，必须定义其内容，这些内容可以来自应用程序和外部依赖项。通常，`app-bundle`包括应用程序源中的所有JS、HTML和CSS，而`vendor-bundle`包括外部依赖项。
- en: This is generally the best configuration for small to medium applications. The
    external dependencies, which commonly don't change very often, are grouped in
    their own bundle, so the users won't have to download those dependencies every
    time a new version of the application is released. In most cases, they'll only
    have to download the new `app-bundle`.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这通常是小到中等应用程序的最佳配置。外部依赖项通常不会经常更改，它们被组合在它们自己的打包文件中，因此用户在新版本的应用程序发布时不需要下载这些依赖项。在大多数情况下，他们只需要下载新的`app-bundle`。
- en: Merging the application in a single bundle
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将应用程序合并到单一打包中
- en: 'However, if for some reason you want your application to fit in a single bundle,
    including both the application itself and its dependencies, it is fairly easy
    to do so. You simply need to define a single bundle, which contains both the application
    sources and the external dependencies:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果您出于某种原因希望将应用程序及其依赖项打包成一个单一的包，这样做是相当简单的。您只需要定义一个包含应用程序源代码和外部依赖项的单一打包文件：
- en: Note
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The snippets in the following section are excerpts from the `chapter-10/samples/app-single-bundle`
    sample from the book's assets.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 以下部分代码片段摘自本书资源中的`chapter-10/samples/app-single-bundle`示例。
- en: '`aurelia_project/aurelia.json`'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`aurelia_project/aurelia.json`'
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: With the entry point of an Aurelia application being the `aurelia-bootstrapper`
    library, the entry-point bundle must be the one containing the `bootstrapper`.
    By default, this is the `vendor-bundle`. If you change the entry-point bundle
    here it becomes the `app-bundle`; you need to change a couple of things.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Aurelia应用程序的入口点是`aurelia-bootstrapper`库，入口点打包文件必须包含`bootstrapper`。默认情况下，这是`vendor-bundle`。如果您在此处更改入口点打包文件，它将成为`app-bundle`；您需要更改几件事。
- en: 'First, still in `aurelia_project/aurelia.json` and under `build`, the loader''s
    `configTarget` property must be changed for the new entry-point bundle:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，仍然在`aurelia_project/aurelia.json`的`build`下，加载器的`configTarget`属性必须改为新的入口点捆绑文件：
- en: '`aurelia_project/aurelia.json`'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`aurelia_project/aurelia.json`'
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Additionally, the main `script` tag of `index.html` must also reference the
    new entry-point bundle:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`index.html`的主要`script`标签也必须引用新的入口点捆绑文件：
- en: '`index.html`'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`index.html`'
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If you run the application at this point, you will see that a single bundle
    is generated, and that the browser loads only this bundle when launching the application.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在此时运行应用程序，你会看到生成了一个单一的捆绑文件，浏览器在启动应用程序时只加载这个文件。
- en: Splitting the application into multiple bundles
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将应用程序拆分为多个捆绑文件
- en: In some scenarios, having the whole application source in a single `app-bundle`
    is suboptimal. We could easily imagine an application built on heavily segregated
    user stories. Users, depending on their role, only use specific parts of this
    application.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，将整个应用程序源代码放在一个`app-bundle`中是不理想的。我们很容易想象一个基于高度分隔的用户故事构建的应用程序。用户，根据他们的角色，只使用这个应用程序的特定部分。
- en: Such an application could be split into multiple smaller bundles, one for each
    role-related section. This way, users would not download bundles for sections
    of the application they never use.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这样的应用程序可以被拆分为多个较小的捆绑文件，每个文件对应一个与角色相关的部分。这样，用户就不会下载他们从未使用的应用程序部分的捆绑文件。
- en: The snippets in the following section are excerpts from the `chapter-10/samples/
    app-with-home` `sample` from the book's assets.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 以下部分中的示例是从书籍资源中的`chapter-10/samples/ app-with-home` `sample`中摘录的。
- en: 'Let''s try this out by moving the `contacts` feature of our application into
    its own bundle. To do so, we first need to exclude everything within the `contacts`
    directory from the `app-bundle`:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试通过将我们应用程序中的`contacts`特性移动到其自己的捆绑文件中来尝试这个方法。为此，我们首先需要从`app-bundle`中排除`contacts`目录中的所有内容：
- en: '`aurelia_project/aurelia.json`'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`aurelia_project/aurelia.json`'
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `source` property supports either an array of glob patterns, or an object
    with an `include` and optional `exclude` properties, both expected to contain
    an array of glob patterns.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`source`属性支持数组形式的通配符模式，或者一个对象，该对象具有`include`和可选的`exclude`属性，都预期包含一个通配符模式的数组。'
- en: Here, we simply move the previous value of `source` down to the `include` property,
    and add an `exclude` property matching everything in the `contacts` directory.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们只是将`source`的先前值移动到`include`属性中，并添加一个匹配`contacts`目录中所有内容的`exclude`属性。
- en: 'Next, we need to define the new bundle:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要定义新的捆绑文件：
- en: '`aurelia_project/aurelia.json`'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`aurelia_project/aurelia.json`'
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This new bundle, named `contacts-bundle.js`, will include all JS, HTML, and
    CSS files within the `contacts` directory.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这个名为`contacts-bundle.js`的新捆绑文件将包括`contacts`目录中的所有JS、HTML和CSS文件。
- en: 'If you run the application at this point, you should first see that the `scripts`
    directory now contains three bundles: `app-bundle.js`, `contacts-bundle.js`, and
    `vendor-bundle.js`. If you open the application in a browser and check the debug
    console, you should see that when loading the application, the browser first loads
    the `vendor-bundle`, then the `app-bundle`, and finally, the `contacts-bundle`.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在此时运行应用程序，你应该首先看到`scripts`目录现在包含了三个捆绑文件：`app-bundle.js`、`contacts-bundle.js`和`vendor-bundle.js`。如果你在浏览器中打开应用程序并检查调试控制台，你应该看到在加载应用程序时，浏览器首先加载`vendor-bundle`，然后是`app-bundle`，最后是`contacts-bundle`。
- en: 'The `contact-bundle` is loaded when the main `configure` function loads the
    `contacts` feature during the application startup process. This is one of the
    limitations of Aurelia''s features: it can be difficult to isolate a feature in
    a distinct bundle. Indeed, a feature''s `index` file, along with all its dependencies,
    should be bundled in the `app-bundle`. Bundling it separately is useless, since
    this other bundle will be loaded upon startup anyway. However, everything else
    in the feature can be bundled separately.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 当主`configure`函数在应用程序启动过程中加载`contacts`特性时，会加载`contact-bundle`。Aurelia的特性有一个局限性：很难将一个特性隔离在一个单独的捆绑文件中。实际上，一个特性的`index`文件以及它所有的依赖项应该被包含在`app-bundle`中。将其单独打包是没有用的，因为另一个捆绑文件在启动时会被加载。然而，特性中的其他所有内容都可以单独打包。
- en: In our application, even if you make this change, the `contacts-bundle` would
    still get loaded when the application starts, because the `app` component automatically
    redirects the user to the contacts default route, which is the contacts list.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们应用程序中，即使你做了这个改动，当应用程序启动时`contacts-bundle`仍然会被加载，因为`app`组件会自动将用户重定向到联系人的默认路由，即联系人列表。
- en: If you add a home component as the default route in the application and you
    make sure this home component is included in the `app-bundle`, you should see
    that the `contacts-bundle` is loaded only when you navigate to it.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在应用程序中添加一个主页组件作为默认路由，并确保这个主页组件包含在`app-bundle`中，你应该可以看到只有在导航到它时才会加载`contacts-bundle`。
- en: Versioning bundles
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 版本化捆绑包
- en: By default, the bundles are generated using static names. This means that a
    browser that already has a cached copy of the bundles has no way of knowing if
    its copy is fresh. What if a new version of the application was released?
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，捆绑包是使用静态名称生成的。这意味着一个已经缓存了捆绑包的浏览器无法知道其缓存是否最新。如果应用程序发布了新版本怎么办？
- en: One (bad) solution to solve this problem is to either set the cache duration
    to a very short time span, which forces all users to download all bundles very
    frequently, or to live with the fact that some users may run an outdated version
    of our application, which means managing compatibility with backend, web services,
    and so on accordingly. This seems like a great recipe for a nightmare.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，一个（糟糕）的解决方案是设置缓存持续时间到一个很短的时间段，这会强制所有用户频繁地下载所有捆绑包，或者接受一些用户可能运行我们应用程序的过时版本，这意味着相应地管理后端、网络服务等的兼容性。这似乎是一个导致噩梦的好配方。
- en: A much better solution would be to add some kind of revision number to the name
    of each bundle, and to set the cache time to leave of the `index.html` to a very
    short time span, or even to disable its cache completely. Since the `index.html`
    is very small compared to bundles, it is an interesting trade-off, because each
    time a given user would access the application, he would download a fresh copy
    of the `index.html`, which would in turn reference the latest version of the bundles.
    This means that bundles can be cached forever, because the content of a given
    bundle name never changes. Users would never download a given version of a bundle
    more than once.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 一个更好的解决方案是在每个捆绑包的名称中添加某种修订号，并将缓存时间设置为让`index.html`的缓存时间非常短，甚至完全禁用其缓存。由于`index.html`与捆绑包相比非常小，这是一个有趣的选择，因为每次给定用户访问应用程序时，他会下载`index.html`的最新副本，该副本又会引用最新版本的捆绑包。这意味着捆绑包可以永久缓存，因为给定捆绑包名称的内容永远不会改变。用户永远不会下载某个捆绑包版本超过一次。
- en: 'The Aurelia CLI supports bundle versioning by appending a suffix to the filename.
    This suffix is a hash computed from the file''s content. By default, versioning
    is disabled. To enable it, open the `aurelia_project/aurelia.json` file, and set
    the `rev` property of `options` under the `build` section:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Aurelia CLI 通过在文件名后添加后缀来支持捆绑包版本化。这个后缀是文件内容计算出的哈希值。默认情况下，版本化是禁用的。要启用它，请打开`aurelia_project/aurelia.json`文件，在`build`部分的`options`设置`rev`属性：
- en: '`aurelia_project/aurelia.json`'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`aurelia_project/aurelia.json`'
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The revision mechanism is enabled on a per-environment basis. Typically, it
    would be enabled in staging and production. It should, however, not be used in
    a development environment, as it doesn't play nice with browser reload and the
    bundle rebuild mechanism when the `watch` switch is used with `au` run. Additionally,
    since most developers systematically test in a browser with caching disabled,
    it would have little value.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 修订机制是按环境单独启用的。通常，它会在 staging 和 production 环境中启用。然而，它不应该在开发环境中使用，因为它与浏览器重新加载以及使用`watch`开关时的捆绑重建机制不太友好。此外，由于大多数开发人员系统地在与缓存禁用的浏览器中进行测试，它将没有多大价值。
- en: 'You must also always ensure that in `aurelia_project/aurelia.json` and under
    `build`, the first entry in `targets` has an `index` property set to `index.html`:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要始终确保在`aurelia_project/aurelia.json`文件中，在`build`部分下`targets`的第一个条目有一个`index`属性，其值为`index.html`：
- en: '`aurelia_project/aurelia.json`'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`aurelia_project/aurelia.json`'
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This lets the bundler know the name of the HTML file that loads the application,
    so it can update the `script` tag that loads the entry-point bundle.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得捆绑器知道加载应用程序的HTML文件的名称，因此它可以更新加载入口点捆绑的`script`标签。
- en: 'You can now test this by opening a console in the project directory and running
    the following command:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以通过在项目目录中打开控制台并运行以下命令来测试这个：
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Once the command completes, you should see in the `scripts` directory that the
    bundles now contain a hash in their name. You should see something like `app-bundle-ea03d27d90.js`
    and `vendor-bundle-efd8bd9cd8.js`, probably with different hashes.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦命令完成，你应该在 `scripts` 目录下看到现在包含在其名称中的哈希的包。你应该看到类似于 `app-bundle-ea03d27d90.js`
    和 `vendor-bundle-efd8bd9cd8.js` 的文件，哈希可能不同。
- en: Additionally, in `index.html`, the `src` attribute of the `script` tag inside
    the body should now refer to the `vendor-bundle` file with the hash in the filename.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在 `index.html` 中，`script` 标签内的 `src` 属性现在应该指的是带有哈希的 `vendor-bundle` 文件名称。
- en: Deploying the application
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署应用程序
- en: 'At this point, deploying our application is fairly easy. We need to copy the
    following files over to the server hosting it:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，部署我们的应用程序相当简单。我们需要将以下文件复制到托管它的服务器上：
- en: '`index.html`'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index.html`'
- en: '`favicon.ico`'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`favicon.ico`'
- en: '`locales/`'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`locales/`'
- en: '`styles/`'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`styles/`'
- en: '`scripts/`'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scripts/`'
- en: '`node_modules/bootstrap/`'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`node_modules/bootstrap/`'
- en: '`node_modules/font-awesome/`'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`node_modules/font-awesome/`'
- en: Nowadays, most projects use some kind of software factory to build and deploy
    applications. Of course, we could easily put that list of files in the build task
    on our factory. However, this means that every time we add a file or directory
    to that list, we need to change the build task.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，大多数项目都会使用某种软件工厂来构建和部署应用程序。当然，我们可以在工厂的构建任务中轻松地放置这些文件列表。然而，这意味着每次我们向该列表添加一个文件或目录时，都需要更改构建任务。
- en: 'One thing I like to do when working on an Aurelia project is create a new `deploy`
    section in the `aurelia_project/aurelia.json` file, which I set to a list of glob
    patterns matching the files to include in a deployment package:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当我在一个 Aurelia 项目中工作时，我喜欢做的一件事是在 `aurelia_project/aurelia.json` 文件中创建一个新的 `deploy`
    部分，将其设置为匹配部署包中要包含的文件的 glob 模式列表：
- en: '`aurelia_project/aurelia.json`'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`aurelia_project/aurelia.json`'
- en: '[PRE9]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In addition to this, I also typically create a `deploy` task in the project.
    This task simply builds the application and then copies the files to deploy to
    a target directory, which is passed as an argument to the task.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，我通常还在项目中创建一个 `deploy` 任务。这个任务只是构建应用程序，然后将文件复制到要部署的目标目录，该目标目录作为任务的一个参数传递。
- en: 'Let''s first create the task definition:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先创建任务定义：
- en: '`aurelia_project/tasks/deploy.json`'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`aurelia_project/tasks/deploy.json`'
- en: '[PRE10]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Next, let''s create a `copy` task, which will be used by the `deploy` task:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们创建一个 `copy` 任务，该任务将由 `deploy` 任务使用：
- en: '`aurelia_project/tasks/copy.js`'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`aurelia_project/tasks/copy.js`'
- en: '[PRE11]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This task first retrieves the target directory passed as the `out` argument
    and fails if it was omitted, then uses the list of glob patterns from the new
    `deploy` section in `aurelia_project/aurelia.json` and copies every matching file
    to the provided target directory.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这个任务首先检索作为 `out` 参数传递的目标目录，如果省略则失败，然后使用来自 `aurelia_project/aurelia.json` 中新
    `deploy` 部分的 glob 模式列表，并将每个匹配的文件复制到提供的目标目录中。
- en: 'Lastly, we can create the deploy task itself:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以创建部署任务本身：
- en: '`aurelia_project/tasks/deploy.js`'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`aurelia_project/tasks/deploy.js`'
- en: '[PRE12]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This task simply executes `build` and `copy` sequentially. We could even run
    the unit test task between `build` and `copy`.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这个任务只是依次执行 `build` 和 `copy`。我们甚至可以在 `build` 和 `copy` 之间运行单元测试任务。
- en: 'This `gulp` task greatly simplifies the build task in the software factory.
    A typical software factory build process would first check the code out from the
    version control, then run the following commands:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 `gulp` 任务极大地简化了软件工厂中的构建任务。典型的软件工厂构建过程首先从版本控制中检出代码，然后运行以下命令：
- en: '[PRE13]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Lastly, it would copy everything under $(build-artifacts) over to the web server.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，它会将 `$(build-artifacts)` 下的所有内容复制到 Web 服务器上。
- en: In this scenario, `$(env)` and `$(build-artifacts)` are some kind of environment
    or system variables. The first contains the environment for which the build is
    done, such as `stage` or `prod`, while the second contains some temporary folder
    from which the artifacts to deploy to the web server will be copied. It could
    simply be a `dist` folder inside the working directory, for example.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个场景中，`$(env)` 和 `$(build-artifacts)` 是一些环境或系统变量。第一个包含了构建所针对的环境，比如 `stage`
    或 `prod`，而第二个包含了一些临时文件夹，从中复制要部署到Web服务器的工件。例如，它可能仅仅是工作目录中的一个 `dist` 文件夹。
- en: One of the upsides of this solution is that most details related to building
    and deploying our application are now within the project itself. The software
    factory doesn't depend on the file structure and filenames from the application's
    source, but relies only on `gulp` tasks instead.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这种解决方案的一个优点是，现在与构建和部署我们的应用程序相关的大多数细节都在项目本身之内。软件工厂不再依赖于应用程序源代码的文件结构和文件名，而是仅依赖于`gulp`任务。
- en: Summary
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: With the CLI running applications in bundled mode all the time, it seems at
    first pretty simple to deploy an Aurelia application. Then you start thinking
    about HTTP cache expiration, and things get a little more complicated.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 由于命令行界面（CLI）始终以捆绑模式运行应用程序，所以最初看起来部署Aurelia应用程序相当简单。然后你开始考虑HTTP缓存过期的问题，事情就变得有点复杂了。
- en: Thankfully, the CLI already provides tools to solve these problems. This, along
    with some good practices, makes prepping an application for the real world a simple
    enough task.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，CLI已经提供了解决这些问题的工具。再加上一些良好实践，使将应用程序准备部署到现实世界变得足够简单。
