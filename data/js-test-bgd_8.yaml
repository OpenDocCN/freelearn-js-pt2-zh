- en: Chapter 8. Testing Tools
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章 测试工具
- en: In the final chapter, we will cover some advanced tools that you can use for
    testing your JavaScript. We will be covering tools that can help you further to
    automate your testing and debugging tasks and, at the same time, show you how
    you can test your user interface.
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在最后一章中，我们将介绍一些高级工具，您可以使用它们来测试您的JavaScript。我们将介绍一些可以帮助您进一步自动化测试和调试任务的工具，并向您展示如何测试您的用户界面。
- en: I understand that you are spoilt for choice as there are many tools out there
    for you to choose from when carrying out testing tasks. But what I will focus
    on are tools that are generally free, cross-browser and cross-platform; whether
    you are a fan of Safari, IE, Chrome or other browsers doesn't really matter. Based
    on [http://w3schools.com/browsers/browsers_stats.asp](http://w3schools.com/browsers/browsers_stats.asp),
    approximately 30% of web browsers use Internet Explorer, 46% use the Firefox browser,
    and the remainder of them use Chrome, Safari, or Opera. This means that the tools
    that you use will cater to these statistics. Although there are applications that
    were developed specifically for only one browser, it is a good practice and learning
    experience for us to learn how to write code for use in different browsers.
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我理解您有很多选择，因为市面上有很多可供您选择用于测试任务的工具。但我会关注那些通常免费、跨浏览器和跨平台的工具；您是Safari、IE、Chrome或其他浏览器的粉丝并不重要。根据[http://w3schools.com/browsers/browsers_stats.asp](http://w3schools.com/browsers/browsers_stats.asp)，大约30%的网页浏览器使用Internet
    Explorer，46%使用Firefox浏览器，其余的使用Chrome、Safari或Opera。这意味着您使用的工具将满足这些统计数据。尽管有些应用程序是为只有一个浏览器开发的，但我们学习如何为不同的浏览器编写代码是一个好的实践和学习经验。
- en: More importantly, the tools that I am going to cover in great detail are those
    that I personally feel are easier to get started with; and this will help you
    to get a feel of the testing tools in general.
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 更重要的是，我将详细介绍的工具是我个人认为更容易上手的工具；这将帮助您对测试工具有一个大致的了解。
- en: 'The following tools will be covered in detail:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 以下工具将详细介绍：
- en: Sahi, a cross-browser automated testing tool. We'll use this to perform UI testing.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sahi是一个跨浏览器自动化测试工具。我们将用它来执行UI测试。
- en: QUnit, a JavaScript testing suite, which can be used to test just about any
    JavaScript code. We'll use this to perform automated testing of JavaScript code.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: QUnit是一个JavaScript测试套件，可以用来测试几乎任何JavaScript代码。我们将用它来执行JavaScript代码的自动化测试。
- en: JSLitmus, a lightweight tool for creating ad hoc JavaScript benchmark tests.
    We'll use this to perform some benchmarking tests.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JSLitmus，一个用于创建即兴JavaScript基准测试的轻量级工具。我们将使用这个工具进行一些基准测试。
- en: Apart from the previously-mentioned tools, I'll also cover a list of important
    testing tools, that I believe are useful for your daily debugging and testing
    tasks. So, be sure to check out this section.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 除了前面提到的工具，我还将介绍一些重要的测试工具，我认为这些工具对您的日常调试和测试任务很有用。所以，一定要查看这一部分。
- en: Sahi
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Sahi
- en: We briefly discussed about the issue of testing user interface widgets provided
    by JavaScript libraries. In this section, we'll get started with testing a user
    interface that was built by using the JavaScript libraries widget. The same technique
    can be used for testing custom user interfaces.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们简要讨论了测试由JavaScript库提供的用户界面小部件的问题。在本节中，我们将开始测试使用JavaScript库小部件构建的用户界面。同样的技术也可以用于测试自定义用户界面。
- en: Sahi is a browser-independent, automated testing tool that uses Java and JavaScript.
    We will focus on this as it is browser-independent, and we cannot always ignore
    IE users.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Sahi是一个使用Java和JavaScript的浏览器无关的自动化测试工具。我们将关注这个工具，因为它与浏览器无关，我们不能总是忽视IE用户。
- en: Sahi can be used to perform various testing tasks, but the one feature that
    I would like to emphasize is its ability to record the testing process and play
    it back in the browser.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Sahi可以用来执行各种测试任务，但我想要强调的一个功能是它能够记录测试过程并在浏览器中回放。
- en: You will see how useful it is to use Sahi to perform user interface testing
    in this section.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到使用Sahi执行用户界面测试是多么有用。
- en: Time for action—user Interface testing using Sahi
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间—使用Sahi进行用户界面测试
- en: We will demonstrate to you the recording and play back feature of Sahi, and
    see how it can be used to test user interface widgets provided by JavaScript libraries
    such as jQuery.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将向您展示Sahi的记录和回放功能，并了解如何使用它来测试由JavaScript库（如jQuery）提供的用户界面小部件。
- en: We'll start by installing Sahi. Go to [http://sahi.co.in](http://sahi.co.in)
    and download the latest version. The latest version at this point of writing is
    V3 2010-04-30\. Once you have downloaded it, extract it to the `C:` drive.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先安装Sahi。访问[http://sahi.co.in](http://sahi.co.in)并下载最新版本。在我写下这段文字的时候，最新版本是V3
    2010-04-30。下载后，解压到`C:`驱动器。
- en: Open Internet Explorer (I am using IE8 for this demonstration) and go to [http://jqueryui.com/themeroller/](http://jqueryui.com/themeroller/).
    We will be using the user interface for our demonstration purposes.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Internet Explorer（我在这篇教程中使用的是IE8），然后访问[http://jqueryui.com/themeroller/](http://jqueryui.com/themeroller/)。我们将使用这个用户界面进行演示。
- en: In order to use Sahi, we need to first navigate to `C:\sahi_20100430\sahi\bin`
    and look for `sahi.bat`. Click on it so that we can start Sahi.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使用Sahi，我们需要首先导航到`C:\sahi_20100430\sahi\bin`并查找`sahi.bat`。点击它，这样我们就可以启动Sahi。
- en: Now, it's time to set up your browser so that it can be used with Sahi. Open
    your browser, and go to **Tools** | **Internet Options** | **Connections** and
    click on **LAN Settings**. Click on **Proxy Server** and enter the information
    that you see in the following screenshot:![Time for action—user Interface testing
    using Sahi](img/0004_08_01.jpg)
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，是时候设置你的浏览器，以便它能与Sahi一起使用。打开你的浏览器，前往**工具** | **Internet选项** | **连接**，然后点击**局域网设置**。点击**代理服务器**并输入以下屏幕截图中的信息:![行动时刻—使用Sahi进行用户界面测试](img/0004_08_01.jpg)
- en: Once you are done, close this window and all other windows related to Tools.
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 完成操作后，关闭此窗口以及与工具相关的所有其他窗口。
- en: After you have completed the previous step, let us return to our browser. In
    order to use Sahi within the browser, you need to press *Ctrl* + *Alt* and, at
    the same time, double-click on any element on the web page ([http://jqueryui.com/themeroller/](http://jqueryui.com/themeroller/)).
    You should see a new window that appears as shown in the next screenshot:![Time
    for action—user Interface testing using Sahi](img/0004_08_02.jpg)
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成上一步后，让我们回到浏览器中。为了在浏览器中使用Sahi，你需要按*Ctrl* + *Alt*，同时双击网页上的任何元素（[http://jqueryui.com/themeroller/](http://jqueryui.com/themeroller/)）。你应该看到一个新的窗口，如下下一个屏幕截图所示:![行动时刻—使用Sahi进行用户界面测试](img/0004_08_02.jpg)
- en: If you see the window shown above, then you have set up and started Sahi correctly.
    Now, let us check out its automated testing feature, recording, and playback capabilities.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你看到了上面截图中的窗口，那么你已经正确设置了并启动了Sahi。现在，让我们来了解它的自动化测试功能，记录和回放功能。
- en: Enter **jquery_testing** in the **Script Name** input field, and the click on
    **Record** in the window that is shown in the previous screenshot. This starts
    the recording process.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**脚本名称**输入字段中输入**jquery_testing**，然后在显示在前一个屏幕截图中的窗口中点击**记录**。这将开始记录过程。
- en: Now, let us click on a few of the user interface elements. In my case, I clicked
    on **Section 2, Section 3, Open Dialog**, and **Font Settings**. This can be found
    at the menu on the left-hand side.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们点击几个用户界面元素。在我的情况下，我点击了**第2部分，第3部分，打开对话框**和**字体设置**。这可以在左侧菜单找到。
- en: Navigate to `C:\sahi_20100430\sahi\userdata\scripts` and you will see a file
    named `jquery_testing.sah`. Open this file in WordPad and you will see the list
    of actions that we have just created, recorded in this file.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到`C:\sahi_20100430\sahi\userdata\scripts`，你会看到一个名为`jquery_testing.sah`的文件。用WordPad打开这个文件，你将看到我们刚刚创建的行动列表，记录在这个文件中。
- en: Go to the Sahi window and click on **Stop**. Now, we have stopped the recording
    process.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入Sahi窗口，点击**停止**。现在，我们已经停止了记录过程。
- en: 'Open `jquery_testing.sah` in WordPad and change the code so that it appears
    like this:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在WordPad中打开`jquery_testing.sah`，并更改代码，使其如下所示：
- en: '[PRE0]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: I have defined a function called `jquery_testing()` to contain the list of actions
    that we have created. Then, I appended `jquery_testing()` to the end of the file.
    This line is to call the function when we activate the playback feature.
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我定义了一个名为`jquery_testing()`的函数来包含我们创建的行动列表。然后，我把`jquery_testing()`添加到文件的末尾。这一行是为了在我们激活回放功能时调用这个函数。
- en: Now let us go to the Sahi window and click on **Playback**. Then, enter the
    information as shown in the next screenshot:![Time for action—user Interface testing
    using Sahi](img/0004_08_03.jpg)
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们进入Sahi窗口，点击**回放**。然后，输入如下下一个屏幕截图中的信息:![行动时刻—使用Sahi进行用户界面测试](img/0004_08_03.jpg)
- en: Click on **Set** and wait for the page to refresh.
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 点击**设置**，等待页面刷新。
- en: Once the page has been refreshed, click on **Play**. Within the browser, we
    will see that the actions that we have performed are being repeated as per the
    steps mentioned previously. You will also receive a **SUCCESS** message in the
    **Statements** panel, which means that our testing process was successful.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 页面刷新后，点击**播放**。在浏览器中，我们将看到我们执行的操作按照前面提到的步骤重复进行。您还将在 **声明** 面板中收到一个 **成功** 消息，这意味着我们的测试过程是成功的。
- en: What just happened?
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: We have just performed a simple user interface testing process by using Sahi.
    Sahi's playback process and recording features make it easy for us to perform
    testing on user interfaces.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚使用Sahi完成了一个简单的用户界面测试过程。Sahi的回放过程和记录功能使我们能够轻松地测试用户界面。
- en: Notice that Sahi allows us to perform testing in a visual manner. Apart from
    defining a function for the playback feature, there isn't much coding involved
    as compared to the other manual testing methods that we have seen in the previous
    chapters.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，Sahi允许我们以视觉方式进行测试。与前面章节中看到的其他手动测试方法相比，除了为回放功能定义一个函数外，并没有太多编码工作。
- en: Now, let us focus on other important and relevant topics related to Sahi.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们关注与Sahi相关的其他重要且相关的话题。
- en: More complex testing with Sahi
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Sahi进行更复杂的测试
- en: As mentioned previously at the start of this section, Sahi can be used with
    any browser to perform a wide variety of tasks. It can even be used to perform
    assertion tests.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如本节开头所述，Sahi可以与任何浏览器一起使用，执行各种任务。它甚至可以用来进行断言测试。
- en: Check out [http://sahi.co.in/static/sahi_tutorial.html](http://sahi.co.in/static/sahi_tutorial.html)
    to see how assertion can be used in your testing processes.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[http://sahi.co.in/static/sahi_tutorial.html](http://sahi.co.in/static/sahi_tutorial.html)，了解如何在您的测试过程中使用断言。
- en: Note
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: After you are done with this section, make sure that you go back to **Tools**
    | **Internet Options** | **Connections**, click on LAN settings and uncheck **Proxy
    Server**, so that your browser can work as usual.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节结束后，请确保您回到**工具** | **Internet选项** | **连接**，点击LAN设置，取消勾选**代理服务器**，以便您的浏览器可以像往常一样工作。
- en: QUnit
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QUnit
- en: Qunit is a jQuery testing suite, but it can be used to test the JavaScript code
    that we have written. This means that the code does not have to depend on jQuery.
    In general, QUnit can be used to perform assertion tests and asynchronous testing.
    Also, assertion testing helps in predicting the returning result of your code.
    If the prediction is false, it is likely that something in your code is wrong.
    Asynchronous testing simply refers to testing Ajax calls or functions that are
    happening at the same time.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: QUnit是一个jQuery测试套件，但它可以用来测试我们编写的JavaScript代码。这意味着代码不必依赖于jQuery。通常，QUnit可以用来进行断言测试和异步测试。此外，断言测试有助于预测您代码的返回结果。如果预测失败，那么您的代码中很可能会出错。异步测试简单地指的是同时测试Ajax调用或函数。
- en: Let us act immediately to see how it works.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们立即行动来看看它是如何工作的。
- en: Time for action testing JavaScript with QUnit
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 是时候进行行动测试JavaScript with QUnit
- en: In this section, we'll learn more about QUnit, by writing a bit of code, and
    the also learn about various tests that QUnit supports. We will write tests that
    are correct and tests that are and wrong, in order to see how it works. The source
    code for this section can be found in the `source code` folder `qunit`.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将更深入地了解QUnit，通过编写一些代码，也学习QUnit支持的各种测试。我们将编写正确的测试和错误的测试，以了解它是如何工作的。本节的源代码可以在
    `source code` 文件夹的 `qunit` 中找到。
- en: 'Open your editor and save the file as `example.html`. Enter the following code
    in it:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的编辑器，将文件保存为 `example.html`。在其中输入以下代码：
- en: '[PRE1]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: What the previous code does is that it simply sets up the code for testing.
    Take note of the highlighted lines. The first two highlighted lines simply point
    to the hosted version of the QUnit testing suite (both CSS and JavaScript), and
    the last two lines are where your JavaScript code and test cases reside.
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 之前的代码所做的就是简单地为测试设置代码。注意突出显示的行。前两行 simply point to the hosted version of the
    QUnit testing suite (both CSS and JavaScript)，最后两行是您的JavaScript代码和测试用例所在的地方。
- en: '`codeToBeTested.js` simply refers to the JavaScript code that you have written,
    while `testCases.js` is the place where you write your test cases. In the following
    steps, you will see how these two JavaScript files work together.'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`codeToBeTested.js` 只是指您编写的JavaScript代码，而 `testCases.js` 是您编写测试用例的地方。在接下来的步骤中，您将看到这两个JavaScript文件是如何一起工作的。'
- en: 'We''ll start by writing code in `codeToBeTested.js`. Create a JavaScript file
    and name it as `codeToBeTested.js`. For a start, we''ll write a simple function
    that tests whether a number entered is odd or not. With that in mind, enter the
    following code into:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将从在`codeToBeTested.js`中编写代码开始。创建一个JavaScript文件，并将其命名为`codeToBeTested.js`。首先，我们将编写一个简单的函数，用于测试输入的数字是否是奇数。带着这个想法，输入以下代码：
- en: '[PRE2]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`isOdd()` takes in an argument value and checks if it is odd. If it is, this
    function will return 1.'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`isOdd()`接收一个参数值，并检查它是否是奇数。如果是，这个函数将返回1。'
- en: Let us now write a piece of code for out test case.
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在让我们为我们的测试用例编写一段代码。
- en: 'Create a new JavaScript file and name it `testCases.js`. Now, enter the following
    code into it:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的JavaScript文件，并将其命名为`testCases.js`。现在，将其输入以下代码：
- en: '[PRE3]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Take note of the way that we write the test case using QUnit's provided methods.
    First, we define a function call `test()`, which constructs the test case. Because
    we are going to test the function `isOdd()`, the first parameter is a string that
    will be displayed in the result. The second parameter is a call-back function
    that contains our assertions.
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意我们使用QUnit提供的方法编写测试用例的方式。首先，我们定义一个函数调用`test()`，它构建了测试用例。因为我们要测试`isOdd()`函数，所以第一个参数是一个将在结果中显示的字符串。第二个参数是一个包含我们断言的回调函数。
- en: We use the assertion statement by using the `ok()` function. This is a Boolean
    assertion, and it expects its first parameter to be true. If it is true, the test
    passes, if not, it fails.
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们使用断言语句，通过使用`ok()`函数。这是一个布尔断言，它期望它的第一个参数为真。如果是真，测试通过，如果不是，测试失败。
- en: Now save all of your files and run `example.html` in any browser you like. You
    will receive a screenshot similar to the following example, depending on your
    machine:![Time for action testing JavaScript with QUnitQunitworking](img/0004_08_04.jpg)
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在保存所有你的文件，并在你喜欢的任何浏览器中运行`example.html`。根据你的机器，你会收到一个类似于以下示例的屏幕截图：![Time for
    action testing JavaScript with QUnitQunitworking](img/0004_08_04.jpg)
- en: You can see the details of the test by clicking on `isOdd()` and will also see
    the results of it. The output is as shown in the previous screenshot.
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过点击`isOdd()`，你可以查看测试的详细信息，并将看到它的结果。输出如前一个屏幕截图所示。
- en: Now let us simulate some fail tests.
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在让我们模拟一些失败的测试。
- en: Go back to `testCases.js`, and append the following code to the last line of
    `test():`
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 回到`testCases.js`，在`test()`的最后一行添加以下代码：
- en: '[PRE4]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Save the file and refresh your browser. You will now see a screenshot similar
    to the following example in your browser:'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 保存文件并刷新你的浏览器。你现在将在浏览器中看到一个类似于以下示例的屏幕截图：
- en: '![Time for action testing JavaScript with QUnitQunitworking](img/0004_08_05.jpg)'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![Time for action testing JavaScript with QUnitQunitworking](img/0004_08_05.jpg)'
- en: Now you can see that tests **4, 5**, and **6** have failed and they are in red.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以看到测试**4, 5**和**6**失败了，它们是红色的。
- en: At this point you should see that the good thing about QUnit is that it largely
    automates the testing process for us without us having to perform testing by clicking
    on buttons, submitting forms, or using `alert()`. It will certainly save us a
    tremendous amount of time and effort when using such automated tests.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个时候，你应该看到QUnit的好处在于，它很大程度上自动化了我们的测试过程，我们不需要通过点击按钮、提交表单或使用`alert()`来进行测试。使用这样的自动化测试无疑可以节省我们大量的时间和精力。
- en: What just happened?
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: We have just employed QUnit in performing automated testing of self-defined
    JavaScript functions. It was a simple example, but enough to get you started.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚使用了QUnit对自定义的JavaScript函数进行了自动化测试。这是一个简单的例子，但足以让你入门。
- en: Applying QUnit in real-life situations
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在现实生活中的QUnit应用
- en: You might wonder how you will make use of such tests on your code in real-life
    situations. I would say that it is very likely that you will use `ok()` to test
    your code. For instance, you can test for the truth values, if the user input
    is alphanumeric, or if the user has entered invalid values.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能想知道如何在现实生活中的情况下使用这些测试来测试你的代码。我会说，你很可能会用`ok()`来测试你的代码。例如，你可以测试真值，如果用户输入是字母数字，或者用户输入了无效值。
- en: More assertion tests for various situations
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 各种情况的断言测试更多
- en: Another thing that you can take note of is that `ok()` is not the only assertion
    test that you can perform. You can also perform other tests, such as comparison
    assertion and identical assertion. Let us see another short example on comparison.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个你可以注意的事情是`ok()`并不是唯一你可以执行的断言测试。你还可以执行其他测试，比如比较断言和相同断言。让我们看一个关于比较的短例子。
- en: We'll learn to use another assertion statement, `equals()`, in this section.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习使用另一个断言语句，`equals()`。
- en: 'Open your editor and open `testCases.js`. Comment out the code that you have
    written previously, and enter the following code into the file:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的编辑器，打开`testCases.js`。注释掉你之前写的代码，并在文件中输入以下代码：
- en: '[PRE5]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This code takes the same structure as the code that you have commented out.
    But notice that we have used the `equals()` function instead of `ok()`. The parameters
    of `equals()` are as follows:'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这段代码与您注释掉的代码具有相同的结构。但是请注意，我们使用的是`equals()`函数而不是`ok()`。`equals()`函数的参数如下：
- en: The first parameter is the actual value
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个参数是实际值
- en: The second parameter is the expected value
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个参数是期望的值
- en: The third parameter is a self-defined message
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三个参数是自定义消息
- en: We have used two `equals()` functions, of which the first will pass the test,
    but the second will not as three and five are not equal.
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们使用了两个`equals()`函数，其中第一个测试将通过，但第二个不会，因为三和五不相等。
- en: Save the file and open `example.html` in your browser. You will see the following
    screenshot:![More assertion tests for various situations](img/0004_08_06.jpg)
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件并打开`example.html`在浏览器中。你会看到以下截图：![各种情况的更多断言测试](img/0004_08_06.jpg)
- en: JSLitmus
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JSLitmus
- en: According to JSLitmus's homepage, JSLitmus is a lightweight tool for creating
    ad hoc JavaScript benchmark tests. In my opinion, it is definitely true. Using
    JSLitmus is quite a breeze, especially when it supports all popular browsers,
    such as Internet Explorer, Firefox, Google Chrome, Safari, and others. At the
    same time, it is entirely free with the products that we mentioned here.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 根据JSLitmus主页的介绍，JSLitmus是一个用于创建临时JavaScript基准测试的轻量级工具。在我看来，这绝对是正确的。使用JSLitmus非常简单，尤其是当它支持所有流行浏览器，如Internet
    Explorer、Firefox、Google Chrome、Safari等时。同时，它完全免费，包含我们在这里提到的产品。
- en: In this section, we will focus on a quick example of how we are going to create
    ad hoc JavaScript benchmark tests.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将快速举一个例子，展示如何创建临时JavaScript基准测试。
- en: Time for action—creating ad hoc JavaScript benchmark tests
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时刻—创建临时JavaScript基准测试
- en: Now we will see how easy it is to create ad hoc JavaScript benchmark tests by
    using JSLitmus. But first, let us install JSLitmus. By the way, all of the source
    code for this section can be found in the `source code` folder for this chapter,
    under the `jslitmus` folder.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将看到使用JSLitmus创建临时JavaScript基准测试是多么简单。但首先，让我们安装JSLitmus。顺便说一下，本节的所有源代码可以在本章的`source
    code`文件夹中找到，在`jslitmus`文件夹下。
- en: Visit [http://www.broofa.com/Tools/JSLitmus/](http://www.broofa.com/Tools/JSLitmus/)
    and download `JSlitmus.js`.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问[http://www.broofa.com/Tools/JSLitmus/](http://www.broofa.com/Tools/JSLitmus/)
    并下载`JSlitmus.js`。
- en: Open your editor, create a new HTML file within the same directory as `JSLitmus.js`
    and name it `jslitmus_test.html`.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的编辑器，在`JSLitmus.js`相同的目录下创建一个名为`jslitmus_test.html`的新HTML文件。
- en: Enter the following code into `jslitmus_test.html:`
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码输入`jslitmus_test.html:`
- en: '[PRE6]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: I've actually taken this code from the official example found on the JSLitmus
    website. I will conduct the test in a slightly different manner to the official
    example, but nonetheless, it still demonstrates the syntax of how we can use JSLitmus.
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 实际上，我这段代码是从JSLitmus官网提供的官方示例中摘取的。我会以稍微不同于官方示例的方式进行测试，但无论如何，它仍然展示了我们如何使用JSLitmus的语法。
- en: The previous code snippet contains the user-defined function `testingLoop()`,
    while the `JSLItmus.test('testing testingLoop()', testingLoop);` is the line of
    JavaScript code written to test `testingLoop()` by using JSlitmus's syntax.
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上面的代码片段包含了用户定义的函数`testingLoop()`，而`JSLItmus.test('testing testingLoop()', testingLoop);`是用JSlitmus的语法测试`testingLoop()`的JavaScript代码行。
- en: 'Let me explain the syntax. Generally, this is how we use JSLitmus:'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我解释一下语法。通常，我们是这样使用JSLitmus的：
- en: '[PRE7]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The first argument is some string that you can type in, and the second argument
    is the name of the function that you intend to test. Just make sure that this
    line of code is located in a place after your function is defined.
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 第一个参数是你可以输入的字符串，第二个参数是你打算测试的函数的名称。只需确保这段代码位于你的函数定义之后的地方。
- en: Now that we have set up our test, it's time to run it and see how it goes. Save
    `jslitmus_test.html` and open this file in your browser. This is what you should
    see in your browser:![Time for action—creating ad hoc JavaScript benchmark tests](img/0004_08_07.jpg)
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经设置了我们的测试，是时候运行它，看看结果如何。保存`jslitmus_test.html`并在浏览器中打开这个文件。你应该在浏览器中看到以下内容：![创建临时JavaScript基准测试的行动时刻](img/0004_08_07.jpg)
- en: Notice that under the Test column, it shows the text that we have typed in as
    our first argument for `JSLItmus.test()`.
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意在测试列下，它显示了我们作为`JSLItmus.test()`的第一个参数输入的文本。
- en: Click on the button **Run Tests**. You should receive the following result in
    your browser:![Time for action—creating ad hoc JavaScript benchmark tests](img/0004_08_08.jpg)
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**运行测试**按钮。你应该在浏览器中收到以下结果：![行动时刻—创建即兴JavaScript基准测试](img/0004_08_08.jpg)
- en: It basically shows the amount of time taken to execute the code, and other relevant
    information. You can even check out the performance in chart form by visiting
    the URL that is created dynamically. If you received something similar to the
    previous screenshot, then you have just done an ad hoc benchmarking test.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它基本上显示了执行代码所需的时间和其他相关信息。你甚至可以通过访问动态生成的URL来查看图表形式的性能。如果你收到了与之前截图类似的的东西，那么你已经完成了一个即兴基准测试。
- en: Note
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'If you are running this test on Internet Explorer and you happen to receive
    the following (or similar) message: **Script is taking too long to execute**,
    then you will need to tweak your Windows registry, in order to allow the test
    to run. Visit [http://support.microsoft.com/default.aspx?scid=kb;en-us;175500](http://support.microsoft.com/default.aspx?scid=kb;en-us;175500)
    for details on how to tweak your windows registry settings.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在Internet Explorer上运行此测试，并且恰好收到以下（或类似）信息：“**脚本执行时间过长**”，那么你需要调整你的Windows注册表，以便允许测试运行。访问[http://support.microsoft.com/default.aspx?scid=kb;en-us;175500](http://support.microsoft.com/default.aspx?scid=kb;en-us;175500)以了解如何调整你的Windows注册表设置。
- en: What just happened?
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: We just used JSLitmus to create an ad hoc benchmarking test. Notice how easy
    it is for you to perform ad hoc benchmarking test using JSLitmus. The cool thing
    about JSLitmus is the simplicity of it; no additional tools, no windows to open,
    and so on. All you need to do is to write `JSLItmus.test()` and type in the message
    and name of the function you want to test.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚使用JSLitmus创建了一个即兴基准测试。注意使用JSLitmus执行即兴基准测试是多么简单。JSLitmus的酷之处在于它的简单性；没有其他工具，没有需要打开的窗口等等。你所需要做的就是编写`JSLItmus.test()`并输入你想测试的函数的信息和名称。
- en: More complex testing with JSLitmus
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用JSLitmus进行更复杂的测试
- en: The previous example is a really simple example to help you to get started.
    If you are interested in performing more complex tests, feel free to check out
    [http://www.broofa.com/Tools/JSLitmus/demo_test.html](http://www.broofa.com/Tools/JSLitmus/demo_test.html)
    and view its source code. You will see different style of writing test by using
    JSLitmus in its well-commented source code.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的例子是一个非常简单的例子，帮助你入门。如果你对执行更复杂的测试感兴趣，可以随意查看[http://www.broofa.com/Tools/JSLitmus/demo_test.html](http://www.broofa.com/Tools/JSLitmus/demo_test.html)并查看其源代码。你将看到使用JSLitmus的不同风格的测试，在其带有注释的源代码中。
- en: Now that we have covered the tools that are browser-independent, it is time
    to quickly cover other similar testing tools that can help you to debug JavaScript.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经介绍了与浏览器无关的工具，是时候快速介绍其他类似的测试工具，这些工具可以帮助你调试JavaScript。
- en: More testing tools that you should check out
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你应该查看的其他测试工具
- en: 'Now that we are approaching the end of the chapter, I''ll leave you with a
    simple list of testing tools that you can check out for testing purposes:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们即将结束这一章节，我会留给你一个简单的测试工具列表，你可以查看用于测试目的：
- en: 'Selenium: **Selenium** is an automated testing tool that can record only on
    Firefox and may time out when trying to playback in other browsers. There are
    also other versions of Selenium that can help you to conduct tests in multiple
    browsers and platforms. Selenium uses Java and Ruby. To get more information,
    visit [http://seleniumhq.org](http://seleniumhq.org). To see a simple introduction,
    visit [http://seleniumhq.org/movies/intro.mov](http://seleniumhq.org/movies/intro.mov).'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 塞利姆（Selenium）：**Selenium**是一个自动化测试工具，只能记录在Firefox上，并且在其他浏览器中回放时可能会超时。还有其他版本的Selenium可以帮助你在多个浏览器和平台上进行测试。Selenium使用Java和Ruby。获取更多信息，请访问[http://seleniumhq.org](http://seleniumhq.org)。要查看一个简单的介绍，请访问[http://seleniumhq.org/movies/intro.mov](http://seleniumhq.org/movies/intro.mov)。
- en: 'Selenium Server: Also known as Selenium Remote Control, **Selenium Server**
    is a test tool that allows you to write automated web-application UI tests in
    any programing language, against any HTTP website, using any mainstream JavaScript-enabled
    browser. You can visit [http://seleniumhq.org/projects/remote-control/](http://seleniumhq.org/projects/remote-control/).'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Selenium Server：也称为Selenium远程控制，**Selenium Server**是一个允许你用任何编程语言编写自动化Web应用程序UI测试的工具，针对任何HTTP网站，使用任何主流的JavaScript支持浏览器。你可以访问[http://seleniumhq.org/projects/remote-control/](http://seleniumhq.org/projects/remote-control/)。
- en: 'Watir: **Watir** is an automated testing tool available as a Ruby gem. There
    is detailed documentation on Watir, which can be found at [http://wiki.openqa.org/display/WTR/Project+Home](http://wiki.openqa.org/display/WTR/Project+Home).'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Watir：**Watir**是一个作为Ruby宝石的自动化测试工具。Watir有详细的文档，可以在[http://wiki.openqa.org/display/WTR/Project+Home](http://wiki.openqa.org/display/WTR/Project+Home)找到。
- en: '**Assertion Unit Framework**: The **Assertion Unit Framework** is a unit testing
    framework based on assertions. At the point of writing, documentation appears
    to be limited. But you can learn how to use it at [http://jsassertunit.sourceforge.net/docs/tutorial.html](http://jsassertunit.sourceforge.net/docs/tutorial.html).
    You can visit [http://jsassertunit.sourceforge.net/docs/index.html](http://jsassertunit.sourceforge.net/docs/index.html)
    for other relevant information.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**断言单元框架**：**断言单元框架**是一个基于断言的单元测试框架。截至编写本文时，文档似乎有限。但是你可以通过访问[http://jsassertunit.sourceforge.net/docs/tutorial.html](http://jsassertunit.sourceforge.net/docs/tutorial.html)来学习如何使用它。你可以访问[http://jsassertunit.sourceforge.net/docs/index.html](http://jsassertunit.sourceforge.net/docs/index.html)获取其他相关信息。'
- en: 'JsUnit: **JsUnit** is a unit testing framework ported from the most popular
    Java unit testing framework known as JUnit. JsUnit includes a platform for automating
    the execution of tests on multiple browsers and multiple machines using different
    operating systems. You can get JsUnit at [http://www.jsunit.net/](http://www.jsunit.net/).'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JsUnit**是一个从最流行的Java单元测试框架JUnit移植过来的单元测试框架。JsUnit包括一个平台，用于在不同的浏览器和不同的操作系统上自动执行测试。你可以在[http://www.jsunit.net/](http://www.jsunit.net/)获得JsUnit。'
- en: 'FireUnit: **FireUnit** is a unit testing framework designed to run in Firebug
    on Firefox. It is also a popular debugging tool for Firefox and there are numerous
    tutorials for it and documentation on it, on the Internet. You can get FireUnit
    at [http://fireunit.org/](http://fireunit.org/).'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: FireUnit：**FireUnit**是一个设计在Firebug中运行的Firefox单元测试框架。它也是Firefox的一个流行调试工具，网上有大量的关于它的教程和文档。你可以在[http://fireunit.org/](http://fireunit.org/)获得FireUnit。
- en: 'JSpec: **JSpec** is a JavaScript testing framework that utilizes its own custom
    grammar and pre-processor. It can also be used in variety of ways, such as via
    a terminal, via browsers using DOM or Console formatters, and so on. You can get
    JSpec at [http://visionmedia.github.com/jspec/](http://visionmedia.github.com/jspec/).'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JSpec：**JSpec**是一个使用自定义语法和预处理器的JavaScript测试框架。它还可以以多种方式使用，例如通过终端，通过浏览器使用DOM或控制台格式化器，等等。你可以在[http://visionmedia.github.com/jspec/](http://visionmedia.github.com/jspec/)获得JSpec。
- en: 'TestSwarm: **TestSwarm** provides distributed, continuous integration testing
    for JavaScript. It was originally developed by John Resig to support the jQuery
    project and, has now become an official Mozilla Labs project. Take note that it
    is still under heavy testing. You can get more information at [http://testswarm.com/](http://testswarm.com/).'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TestSwarm：**TestSwarm**为JavaScript提供分布式、持续集成测试。它最初是由John Resig为支持jQuery项目而开发的，现在已成为官方Mozilla实验室项目。请注意，它仍然处于严格测试中。你可以在[http://testswarm.com/](http://testswarm.com/)获得更多信息。
- en: Summary
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We have finally reached the end of this chapter. We have covered specific tools
    for various browsers that can be used for our debugging tasks.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经终于完成了这一章的结尾。我们覆盖了可用于我们调试任务的各个浏览器的特定工具。
- en: 'Specifically, we covered the following topics:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，我们涵盖了以下主题：
- en: 'Sahi: A browser-independent automated testing tool that uses Java and JavaScript'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sahi：一个使用Java和JavaScript的浏览器无关的自动化测试工具
- en: 'QUnit: A jQuery testing suite that can be used to test JavaScript code'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: QUnit：一个可以用来测试JavaScript代码的jQuery测试套件
- en: 'JsLitmus: A lightweight tool for creating ad hoc JavaScript benchmark tests'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JsLitmus：创建即兴JavaScript基准测试的轻量级工具
- en: A list of tools that you can check out
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以查看的工具列表
- en: Finally, we have reached the end of the book. I hope that you have learnt a
    lot from this book about JavaScript testing. I want to thank you for your time
    and effort in reading this book, and would also like to thank Packt Publishing
    for it's support.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们终于来到了本书的结尾。我希望你从这本书中学到了很多关于JavaScript测试的知识。我想感谢你花费时间和精力阅读这本书，同时也想感谢Packt出版社的支持。
