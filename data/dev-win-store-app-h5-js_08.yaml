- en: Chapter 8. Signing Users in
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章．用户登录
- en: A Windows Store app can be personalized for users who sign in to the app; thus,
    it is fairly important to make the authentication process very simple. Windows
    8 enables users to sign in to their devices by using a Microsoft account, hence
    making it easier for developers to provide a single sign-on experience for users
    on their apps. Furthermore, Windows 8 offers a **Software Development Kit** (**SDK**)
    and a set of APIs to allow Windows Store apps to enable single sign on with Microsoft
    accounts, and to integrate with info in Microsoft SkyDrive, Outlook.com, and Windows
    Live Messenger. In this chapter we will learn about the Live Connect API and how
    to integrate the apps with this API to sign in users and retrieve user profile
    information. We will learn how to start integrating the apps with Live Connect,
    and show some code that introduces a few basic things that the Live Connect APIs
    can do.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 一个Windows商店应用可以针对登录应用的个人用户进行个性化设置；因此，使得认证过程非常简单是非常重要的。Windows 8允许用户使用Microsoft账户登录他们的设备，从而使开发者更容易为应用用户提供单点登录体验。此外，Windows
    8提供了一个**软件开发工具包**（**SDK**）和一组API，以便Windows商店应用能够使用Microsoft账户实现单点登录，并与Microsoft
    SkyDrive、Outlook.com和Windows Live Messenger中的信息集成。在本章中，我们将学习关于Live Connect API以及如何使用此API登录用户并获取用户资料信息。我们将学习如何开始使用Live
    Connect集成应用，并展示一些代码，介绍Live Connect API可以执行的一些基本功能。
- en: Introducing Live Connect
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Live Connect
- en: 'There are many scenarios when an app will need to authenticate users and access
    their profile info, from the simple purpose of displaying a welcome message with
    a user''s name to the extent of accessing their profile info and giving the user
    a personalized experience. Moreover, you can build an app that offers great features
    by integrating with products and services such as Microsoft SkyDrive that allows
    working with documents and media and accessing files on the cloud or Outlook to
    work with contacts and calendars. The scenarios where your app will need to integrate
    authentication with Microsoft accounts can be summed up as follows:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多场景，应用需要认证用户并访问他们的资料信息，从简单地显示带有用户姓名的欢迎信息，到访问他们的资料信息，并为用户提供个性化体验。此外，你可以通过与允许与文档和媒体协作并访问云上文件或与Outlook协作处理联系人和日历的产品和服务集成，构建提供强大功能的应用。你的应用需要与Microsoft账户集成认证的场景可以总结如下：
- en: The app requires the user to be signed in to work, for example, a contacts app
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用需要用户登录才能运行，例如，一个联系人应用
- en: The app can work without needing the user to sign in but delivers a more personalized
    experience for those who do; for example, a weather or news app
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用可以在用户不登录的情况下运行，但对于登录的用户，它能提供更加个性化的体验；例如，一个天气或新闻应用
- en: The app contains certain features that integrate with SkyDrive or Hotmail, and
    thus require a Microsoft account sign in
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用包含一些与SkyDrive或Hotmail集成的功能，因此需要Microsoft账户登录
- en: 'The authentication process and the integration with Microsoft cloud services
    such as Microsoft SkyDrive and Outlook are implemented using Live Connect. Live
    Connect is a set of APIs that allow integrating the app with these compatible
    services. These APIs are provided by the Live SDK that is one of the Microsoft
    Software Development kits for developing apps. The Live Connect APIs utilize an
    open standard that allows you to focus on coding to implement features, rather
    than spending time learning new concepts when all you want to do is implement
    the features introduced by this new concept. For example, you can use the **Open
    Authentication** (**OAuth**) standard to integrate with the authentications services
    of Facebook and other social networking APIs without having to learn the internal
    workings of the authentication process at the level of those social networking
    APIs; more importantly, you can use the programming language you know to do the
    calls. The open standards used by Live Connect include the following:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 认证过程以及与Microsoft云服务（如Microsoft SkyDrive和Outlook）的集成使用Live Connect实现。Live Connect是一组API，允许将应用与这些兼容服务集成。这些API由Live
    SDK提供，它是开发应用的Microsoft软件开发工具包之一。Live Connect API利用一个开放标准，使你能够专注于实现功能，而不是在学习新概念上花费时间，而你想要做的只是实现由这个新概念引入的功能。例如，你可以使用**开放认证**（**OAuth**）标准与Facebook和其他社交网络API的认证服务集成，而无需了解这些社交网络API内部认证过程的工作原理；更重要的是，你可以使用你熟悉的编程语言进行调用。Live
    Connect使用的开放标准包括以下内容：
- en: '**OAuth 2.0**: It is the latest version of the OAuth protocol that is an open
    standard for authenticating users'' credentials. Social networking APIs, including
    Live Connect, have adopted OAuth as its authentication standard. OAuth basically
    enables users to be authenticated using the Live Connect authorization web services
    without having to share their confidential sign-in credentials with the apps.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OAuth 2.0**：这是OAuth协议的最新版本，是一个开放标准，用于验证用户的凭据。包括Live Connect在内的社交网络API已采用OAuth作为其认证标准。OAuth基本上允许用户使用Live
    Connect授权Web服务进行认证，而无需将他们的机密登录凭据与应用程序共享。'
- en: '**Representational State Transfer (REST)**: It is an architectural style popular
    in web services implementation. In Windows Store development, REST allows us to
    easily request users'' info through Live Connect APIs. This REST implementation
    supports standard HTTP methods such as GET, PUT, POST, and DELETE.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代表性状态转换（REST）**：这是一种在实现网络服务时流行的架构风格。在Windows商店开发中，REST允许我们通过Live Connect
    API轻松请求用户信息。这个REST实现支持标准的HTTP方法，如GET、PUT、POST和DELETE。'
- en: '**JSON**: It stands for **JavaScript Object Notation**, a lightweight data-interchange
    format used for representing info in web services. Live Connect exchanges user
    info in JSON format. For instance, when the function requests a user''s profile
    information, that info is returned in a response object that contains `first_name`,
    `last_name`, and so on.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JSON**：这是**JavaScript对象表示法**的缩写，是一种用于表示网络服务中信息的轻量级数据交换格式。Live Connect以JSON格式交换用户信息。例如，当函数请求用户个人资料信息时，该信息将以包含`first_name`、`last_name`等字段的响应对象的形式返回。'
- en: In Windows 8, users can sign in to their devices by using their Microsoft accounts
    (Hotmail, Live, and Outlook); hence, the app can take advantage of this functionality
    to provide a single sign-on experience. For example, the main apps of Windows
    8 such as People, Mail, and Messaging, and also Microsoft websites such as Outlook
    and Bing can take advantage of the single sign-on, so the users don't need to
    sign in to these apps and websites after they are signed into the PC; the process
    will be done on their behalf. The apps we develop can do the same by implementing
    the features in the Live Connect APIs so that a user can be directly authenticated
    in our apps if already signed in to the device.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows 8中，用户可以通过使用他们的微软账户（Hotmail、Live和Outlook）登录设备，因此，应用程序可以利用这一功能提供单点登录体验。例如，Windows
    8的主要应用程序，如人脉、邮件和信息，以及微软网站，如Outlook和Bing，都可以利用单点登录，所以用户在登录到电脑后不需要再登录这些应用程序和网站；这些过程将由系统代为完成。我们开发的应用程序可以通过实现Live
    Connect API的功能来实现相同的效果，这样如果用户已经登录到设备，他们就可以直接在我们的应用程序中进行认证。
- en: 'Before we can start using Live Connect features, there are two prerequisites:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始使用Live Connect功能之前，有两个先决条件：
- en: Register the app with the Windows Store
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Windows商店注册应用程序
- en: Configure the Live Connect settings for the Windows Store apps in your Windows
    Store Dashboard
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Windows商店仪表板中为Windows商店应用程序配置Live Connect设置
- en: 'First we need to register the app on the Store in your Windows Store Dashboard,
    which can be accessed via the following link:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要在Windows商店仪表板中注册应用程序，该仪表板可以通过以下链接访问：
- en: '[https://appdev.microsoft.com/StorePortals/en-us/Home/Index](https://appdev.microsoft.com/StorePortals/en-us/Home/Index)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://appdev.microsoft.com/StorePortals/en-us/Home/Index](https://appdev.microsoft.com/StorePortals/en-us/Home/Index)'
- en: 'Sign in to the store dashboard; you will need Microsoft account credentials
    for that, and you will see the following screen:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 登录到商店仪表板；为此你需要微软账户的凭据，然后你会看到以下屏幕：
- en: '![Introducing Live Connect](img/7102EN_08_01.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![介绍Live Connect](img/7102EN_08_01.jpg)'
- en: 'This is the main page where your entire app will be listed. Also, this is the
    screen that the first-time users will see. In order for the app to start using
    the Live Connect APIs, it must be registered and its settings configured accordingly.
    Additionally, for a Windows Store app to use Live Connect, it will need to have
    a package identity that is a combination of a package name and publisher and that
    will uniquely identify the app. To get the package identity, we need to submit
    the app; this is basically reserving a name for your app, adding its description,
    and submitting it for certification. At this level, we don''t need to submit the
    app to the Windows Store for certification; we will just need to enter a name
    for it in the Windows Store developer account. In order to do so, we''ll start
    by clicking on the **Submit an app** link, which is the first link in the menu
    to the left under **Dashboard**, as you may have noticed in the previous screenshot.
    You will be directed to the **Submit an app** page, as shown in the following
    screenshot:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您的整个应用列表的主页。同时也是新用户首次看到的屏幕。为了让应用开始使用Live Connect API，必须对其进行注册并相应地配置其设置。此外，对于要使用Live
    Connect的Windows Store应用，它需要有一个包含包名和发布者的包身份，这将唯一标识该应用。要获取包身份，我们需要提交应用；这基本上是为您的应用预留一个名称，添加其描述，并提交认证。在这个阶段，我们不需要将应用提交到Windows
    Store进行认证；我们只需要在Windows Store开发者账户中为其输入一个名称。为此，我们将首先点击**提交应用**链接，这是您在上一个屏幕快照中注意到的左侧菜单下**仪表盘**下的第一个链接。您将被引导到**提交应用**页面，如下面的屏幕快照所示：
- en: '![Introducing Live Connect](img/7102EN_08_02.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![Introducing Live Connect](img/7102EN_08_02.jpg)'
- en: 'Click on **App name** to give the app a unique name that will be reserved for
    this app only; no other app can use it. The reservations will last for one year
    if the app was not fully submitted to the Store. Make sure that you have the rights
    to use the name because the app will be listed in the Windows Store under this
    name. Note that the app name should be the same as the one entered for the **DisplayName**
    field in the app manifest file. To proceed, enter a value in the text box provided
    and click on **Reserve app name**; the name is now reserved; click on **Save**
    to return to the app summary page. Now the app will be listed on the dashboard
    in a tilelike box containing **Delete** and **Edit** links. The following screenshot
    shows a test app created to serve as an example:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**应用名称**为应用提供一个唯一的名称，仅为此应用保留；其他应用不能使用它。如果应用没有完全提交到商店，预留将持续一年。请确保您有权使用该名称，因为应用将在Windows
    Store中以该名称列出。请注意，应用名称应与在应用清单文件中的**DisplayName**字段中输入的名称相同。要继续，请在提供的文本框中输入一个值，然后点击**预留应用名称**；现在名称已被预留；点击**保存**返回应用摘要页面。现在，应用将在仪表板上以包含**删除**和**编辑**链接的磁贴状框中列出。下面的屏幕快照显示了一个用于示例的测试应用：
- en: '![Introducing Live Connect](img/7102EN_08_03.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![Introducing Live Connect](img/7102EN_08_03.jpg)'
- en: 'Next we need to configure the Live Services for the app. To do so, follow the
    given steps:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们需要为应用配置Live服务。为此，请按照以下步骤操作：
- en: If you are in the dashboard page, locate your app and click on **Edit**. You
    will be directed to the app summary page.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您在仪表板页面，找到您的应用并点击**编辑**。您将被引导到应用摘要页面。
- en: Click on **Advanced features**.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**高级功能**。
- en: Click on **Push Notifications and Live Connect services info**.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**推送通知和Live Connect服务信息**。
- en: 'You will be directed to the page **Push notifications and Live Connect services
    info page** and will need to follow the steps under the heading **If your app
    uses Live Connect services, review**. It includes the following steps:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将被引导到**推送通知和Live Connect服务信息页面**，并需要遵循标题下**如果您的应用使用Live Connect服务，请审查**的步骤。包括以下步骤：
- en: Identifying your app
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 识别您的应用
- en: 'This includes defining the correct identity values in the app''s manifest.
    These values have been created when we reserved an app name. We can set these
    values in two ways:'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这包括在应用的清单中定义正确的身份值。这些值在我们预留应用名称时创建。我们可以用两种方式设置这些值：
- en: We could set the app's identity values by using the **Store** menu in Visual
    Studio 2012 for Windows 8\. Within an open project, in the top menu, click on
    **Project**; then select **Store** from the menu that appears, navigate to the
    submenu, and click on **Associate App with the Store**. Follow and finish the
    wizard, the process is illustrated in the following screenshot:![Introducing Live
    Connect](img/7102EN_08_04.jpg)
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以通过使用 Visual Studio 2012 中的**商店**菜单为 Windows 8 应用设置应用的身份值。在一个打开的项目中，在顶部菜单中点击**项目**；然后从出现的菜单中选择**商店**，导航到子菜单，并点击**将应用与商店关联**。跟随并完成向导，该过程在下方的屏幕截图中说明：![介绍
    Live Connect](img/7102EN_08_04.jpg)
- en: In the first step of the wizard, marked by number 2 in the previous screenshot,
    you will be prompted to sign in using your Microsoft account.
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在向导的第一个步骤中，如前屏幕截图中数字2所标记的，你将会被提示使用你的 Microsoft 账号进行登录。
- en: 'Alternatively, we can set the app''s package identity manually in the app manifest
    file. Open your app''s `AppManifest.xml` file in a text editor and set these attributes
    of the `<identity>` element using the `Name` and `Publisher` values. The Windows
    Store created these values when you reserved your app''s name, and you can retrieve
    it from the Windows Store Dashboard. The following code shows the syntax of the
    XML setting node that contains these values:'
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 另外，我们也可以在应用清单文件中手动设置应用的包身份。用文本编辑器打开你的应用的 `AppManifest.xml` 文件，并使用 `Name` 和 `Publisher`
    值设置 `<identity>` 元素的这些属性。当你在 Windows Store 上预留你的应用名称时，Windows Store 创建了这些值，你可以从
    Windows Store 仪表板中获取。下面的代码显示了包含这些值的 XML 设置节的语法：
- en: '[PRE0]'
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Authenticating your service
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 认证你的服务
- en: 'This step involves retrieving the client secret values. Live Connect services
    use the client secret to authenticate the communications from your server in order
    to protect your app''s security. The following client secret will be displayed:'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这一步骤包括获取客户端密钥值。Live Connect 服务使用客户端密钥来认证从你的服务器发出的通信，以保护你的应用的安全。下面将显示以下客户端密钥：
- en: '**zqMKo4G0t3ICZe1h06ofrKYZ1/hVuZXn**.'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**zqMKo4G0t3ICZe1h06ofrKYZ1/hVuZXn**。'
- en: Note that you can always come back to the page and create a new client secret
    if there is a need.
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，你总是可以回到该页面并创建一个新的客户端密钥，如果有需要的话。
- en: Representing your app to Live Connect users
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向 Live Connect 用户代表你的应用
- en: This is the last step to configure the Live Connect services info and involves
    specifying the settings for the consent dialog that Live Connect services use
    to prompt the user for permission to access and interact with their data. In this
    step, you can provide them with the links to your own terms of service and privacy
    policy, and upload your app logo to be displayed in the consent dialog.
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是配置 Live Connect 服务信息的最后一步，涉及指定 Live Connect 服务用来提示用户授权访问和交互他们数据的意图对话框的设置。在这一步中，你可以提供他们到你自己的服务条款和隐私政策的链接，并上传你的应用标志在授权对话框中显示。
- en: That concludes the registration and configuration process of the app on the
    Windows Store. Now to the coding part; we'll see how to enable a basic sign-in
    and authentication functionality.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这就完成了在 Windows Store 上应用的注册和配置过程。现在进入编码部分；我们将看看如何实现基本的登录和认证功能。
- en: Signing in users to the app
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将用户登录到应用
- en: 'To start coding the sign-in functionality, we need to reference the Live Connect
    APIs in our app solution; in order to do so, we should first download and install
    Live SDK for Windows if you haven''t already installed it. It can be found and
    downloaded from the *Live Connect Developer Center* via the following link:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始编码登录功能，我们需要在我们的应用解决方案中引用 Live Connect API；为此，我们首先应该下载并安装 Live SDK for Windows，如果你还没有安装的话。它可以通过以下链接从
    *Live Connect 开发者中心* 找到并下载：
- en: '[http://msdn.microsoft.com/en-us/live/ff621310.aspx](http://msdn.microsoft.com/en-us/live/ff621310.aspx)'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://msdn.microsoft.com/en-us/live/ff621310.aspx](http://msdn.microsoft.com/en-us/live/ff621310.aspx)'
- en: On that page, you will also find download links to Live SDK versions that support
    Android and iOS. Alternatively, you can find and install Live SDK in Visual Studio
    directly to your open solution using the NuGet Package Manager.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在那页面上，你也可以找到支持 Android 和 iOS 的 Live SDK 版本的下载链接。或者，你可以在 Visual Studio 中直接使用
    NuGet 包管理器找到并安装 Live SDK 到你打开的解决方案中。
- en: To do so, open the app solution in Visual Studio, right-click on the solution
    from the **Solution Explorer**, and click on **Manage NuGet Packages…**
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，打开在 Visual Studio 中的应用解决方案，从**解决方案资源管理器**中右键点击解决方案，然后点击**管理 NuGet 包…**
- en: A dialog will appear, type `livesdk` in the search textbox provided at the top
    right of the dialog; the package manager will search online for all the relevant
    matches that include `livesdk`. From the search results, locate **Live SDK** and
    click on **Install**. This will install the Live SDK package and include it in
    the references.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 将出现一个对话框，在对话框顶部右上角提供的搜索文本框中输入`livesdk`；包管理器将在线搜索所有包含`livesdk`的相关匹配项。从搜索结果中找到**Live
    SDK**并单击**安装**。这将安装Live SDK包并将其包括在引用中。
- en: 'The following screenshot shows the **Manage NuGet Packages** dialog on the
    screen:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的屏幕快照显示了屏幕上的**管理NuGet包**对话框：
- en: '![Signing in users to the app](img/7102EN_08_09.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![将用户登录到应用](img/7102EN_08_09.jpg)'
- en: 'Next, we add a reference to the Live Connect APIs in our project. For doing
    so, follow the given steps:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们在项目中添加对Live Connect APIs的引用。为此，请按照以下步骤操作：
- en: From the **Solution Explorer**, right-click on **References** and then click
    on **Add Reference**.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**解决方案资源管理器**中，右键单击**References**，然后单击**添加引用**。
- en: Click on **Windows** | **Extension SDKs** | **Live SDK**.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**Windows** | **Extension SDKs** | **Live SDK**。
- en: Click on **Add** and then click on **Close**.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加**，然后点击**关闭**。
- en: 'Once we add the reference to the Live SDK, the JavaScript file `wl.js` will
    be added to the solution. For convenience, I recommend you to copy and paste this
    file to your `js` folder. Then we add the `<script>` element that points to the
    newly added `wl.js`, so we can make use of the Microsoft IntelliSense for this
    API in `default.html` pages, as shown in the following code:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们添加了对Live SDK的引用，解决方案中就会添加JavaScript文件`wl.js`。为了方便，我建议您将此文件复制并粘贴到您的`js`文件夹中。然后我们添加一个指向新添加的`wl.js`的`<script>`元素，这样我们就可以在`default.html`页面中使用Microsoft
    IntelliSense for this API，如下面的代码所示：
- en: '[PRE1]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Notice that the file path set for the `src` attribute contains `///`; the reason
    we used 3 backslashes (/) was because there are three levels in the directory
    hierarchy to reach the `wl.js` file that is located in the directory `js` under
    `LiveSDKHTML` under `References`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，为`src`属性设置的文件路径包含`///`；我们使用三个反斜杠（\）的原因是因为需要通过三个目录层次结构来到达位于`References`下的`LiveSDKHTML`下的`js`目录中的`wl.js`文件。
- en: Adding the reference to this script file will enable Microsoft IntelliSense
    in the HTML file it is being referenced in.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 添加对此脚本文件的引用将在引用的HTML文件中启用Microsoft IntelliSense。
- en: 'Moreover, if you want to enable the intelliSense at the level of JavaScript,
    add the reference to the top of the JavaScript file you are using to call methods
    of this API, as shown in the following code:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果您想要在JavaScript层面启用intelliSense，请在调用此API方法的头部的JavaScript文件中添加引用，如下面的代码所示：
- en: '[PRE2]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Tip
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: It is recommended you write the code that uses the `wl.js` in a separate JavaScript
    file. This will make it easier to make modifications and debug the app.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 建议您将使用`wl.js`的代码写在单独的JavaScript文件中。这将使修改和调试应用程序更加容易。
- en: Let's add a button that when clicked, will prompt the user to sign in and respond
    to the consent dialog.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加一个按钮，当点击时，将提示用户登录并响应同意对话框。
- en: 'The following markup will add a `button` with ID `signIn` and a `div` with
    ID `log`. This `div` will be used to display content on the screen that will give
    us an idea of what is happening when we click on the **Sign in** button:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 以下标记将添加一个具有ID`signIn`的`button`和一个具有ID`log`的`div`。这个`div`将用于在屏幕上显示点击**登录**按钮时发生的内容：
- en: '[PRE3]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'First we initialize the Live Connect APIs by calling the `WL.init` method (the
    app must call this function on every page before making other function calls in
    the library), and then subscribe to the `auth.login` event on the page load, as
    shown in the following code:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，通过调用`WL.init`方法初始化Live Connect APIs（应用程序必须在每页上都调用此函数，然后再调用库中的其他函数），然后在页面加载时订阅`auth.login`事件，如下面的代码所示：
- en: '[PRE4]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: On the callback function of the `auth.login` event, we check the status using
    the `WL.getSession()` method that gets the current session object; if it exists,
    the user is signed in.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在`auth.login`事件的回调函数中，我们使用`WL.getSession()`方法检查当前会话对象的状态；如果存在，则用户已登录。
- en: 'Next, we will add the sign-in functionality on the click of the button and
    the log function:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将为按钮的点击和日志功能添加登录功能：
- en: '[PRE5]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'On the click of the sign in button, we first check if there is a session and
    whether the user is signed in already. If there is no session, we attempt to log
    in the user by calling the `WL.login` method; this method takes the parameter
    `scope: "wl.signin"`. The scope values such as `"wl.signin"` or `"wl.skydrive"`
    are used to indicate what parts of the user data the app will be able to access
    if the user consents.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '在用户点击登录按钮时，我们首先检查是否有会话，以及用户是否已经登录。如果没有会话，我们尝试通过调用`WL.login`方法登录用户；这个方法需要一个参数`scope:
    "wl.signin"`。像`"wl.signin"`或`"wl.skydrive"`这样的作用域值用来表示如果用户同意，应用将能够访问用户数据的哪些部分。'
- en: 'In the previous lines of code, we defined a single scope using this format:
    `scope: "wl.signin"`, which is a string parameter. We can define multiple scopes
    as well, but with a slightly different format, using an array of string values,
    as shown in the following line of code:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '在前面的代码行中，我们使用此格式定义了一个作用域：`scope: "wl.signin"`，这是一个字符串参数。我们也可以定义多个作用域，但格式略有不同，使用字符串值的数组，如下面的代码行所示：'
- en: '[PRE6]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The scope can also be set when initializing the library by passing it as an
    optional parameter to the `WL.init` method. Moreover, the scope values entered
    in the `login` method will override and extend the list of scopes defined in the
    `init` method. Also, the scope value of `WL.init` is used when there was no scope
    provided by the `login` method.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 作用域也可以在初始化库时设置，通过将其作为可选参数传递给`WL.init`方法。此外，`login`方法中输入的作用域值将覆盖并扩展在`init`方法中定义的作用域列表。而且，`WL.init`的作用域值在没有由`login`方法提供的作用域时使用。
- en: The `WL.login` function should be called only in response to a user action,
    such as clicking a button as in our example, because this function can result
    in launching the consent page prompt.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`WL.login`函数只能在用户动作响应时调用，比如我们例子中的点击按钮，因为该函数可能导致启动同意页面提示。'
- en: The `log` function only takes text, and simply appends it to the contents of
    the `div` with the ID`log` so that we can get status info of what has happened.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`log`函数只接受文本，简单地将它追加到ID为`log`的`div`内容中，这样我们就可以获取发生了什么的状态信息。'
- en: 'Run the app now. You will see the following screenshot prompting you to log
    in; the consent dialog will follow:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用。您将看到以下截图，提示您登录；随后会出现同意对话框：
- en: '![Signing in users to the app](img/7102EN_08_06.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![将用户登录到应用](img/7102EN_08_06.jpg)'
- en: 'Follow the steps that appear in the previous screenshot. At the end, the app
    will display the message: **You are signed in!**'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 按照前一个截图出现的步骤操作。最后，应用将显示消息：**您已登录！**
- en: Getting user info
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取用户信息
- en: 'The `login` function returns a promise object that allows us to properly react
    in case of a success, that is, a successful sign-in by the user. Our goal is to
    get the user''s profile information. As such we need to modify the previously
    shown `WL.login` call and request additional scopes such as `wl.basic`, `wl.birthday`,
    and `wl.emails`, which will allow us to retrieve basic profile information such
    as first and last names and also get the user''s birthday and e-mails. In the
    success callback of the login method, we then execute a call to the `WL.api` function,
    which returns our desired user profile info. Technically, the `WL.api` function
    makes a call to the Live Connect Representational State Transfer (REST) API. The
    syntax to the `WL.api` call is shown in the following code:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`login`函数返回一个承诺对象，使我们能够在成功的情况下适当反应，即用户成功登录。我们的目标是获取用户的个人资料信息。因此，我们需要修改之前展示的`WL.login`调用，并请求额外的作用域，如`wl.basic`、`wl.birthday`和`wl.emails`，这将允许我们检索基本个人资料信息，如名字和姓氏，同时也获取用户的生日和电子邮件。在登录方法的成功的回调中，我们然后执行对`WL.api`函数的调用，它返回我们所需的用户个人资料信息。从技术上讲，`WL.api`函数对Live
    Connect Representational State Transfer (REST) API进行调用。`WL.api`调用的语法如下面的代码所示：'
- en: '[PRE7]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In the previous code sample, we passed the `me` shortcut to request info about
    the signed-in user. The path parameter specifies the path to the REST API object,
    in this case the object `me`, which contains properties such as `first_name` and
    `last_name`; `WL.api` returns a promise object so we can call `then()` on it,
    and in the success callback we will request the first and last names of the user,
    which are provided by the scope `"wl.basic"`. The code will be as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码示例中，我们传递了`me`快捷方式以请求有关已登录用户的信息。路径参数指定了到REST API对象的路径，在本例中为对象`me`，它包含诸如`first_name`和`last_name`的属性；`WL.api`返回一个承诺对象，因此我们可以对其调用`then()`，并在成功回调中请求用户的名字和姓氏，这些信息由作用域`"wl.basic"`提供。代码如下所示：
- en: '[PRE8]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Add the previous code to the `then` method called on `WL.login` in the sign-in
    button click handler, and the complete code will be as follows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 将之前的代码添加到登录按钮点击处理程序中调用的 `WL.login` 的 `then` 方法中，完整的代码如下：
- en: '[PRE9]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Run the app now and you will notice that the consent dialog will change requesting
    to access to info about your birthday and e-mail address, as shown in the following
    screenshot:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用，你会注意到同意对话将更改，请求访问有关你的出生日期和电子邮件地址的信息，如下面的屏幕截图所示：
- en: '![Getting user info](img/7102EN_08_07.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![获取用户信息](img/7102EN_08_07.jpg)'
- en: 'After you approve the consent prompt, click on the **Sign in** button and the
    app will display the requested info, as shown in the following screenshot:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 当你批准同意提示后，点击**登录**按钮，应用将显示所请求的信息，如下面的屏幕截图所示：
- en: '![Getting user info](img/7102EN_08_08.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![获取用户信息](img/7102EN_08_08.jpg)'
- en: Tip
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: To abide by the guidelines set by Microsoft for the Windows Store apps, you
    should not display the Microsoft account sign-in or sign-out options anywhere
    on the app other than the **Settings Flyout** control or part of a task. The users
    expect account management options to be in the Settings charm and changing its
    location will lead to an inconsistent and unexpected experience for your users.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 为了遵守微软为 Windows 商店应用设置的指南，你不应该在应用中的任何地方显示 Microsoft 账户登录或登出选项，除了**设置弹出**控件或任务的一部分。用户期望账户管理选项在设置磁贴中，改变其位置会导致用户体验不一致和意外。
- en: Summary
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we were introduced to Live Connect and learned about its core
    concepts and saw what we can do with these APIs, what settings are needed by the
    app to start calling the APIs, and how to write the basic code to call the APIs.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了 Live Connect，并学习了其核心概念，还看到了我们可以使用这些 API 做些什么，应用启动调用 API 所需的设置，以及如何编写基本的代码来调用
    API。
- en: We also covered how to register the app on the Store and communicate with the
    Store from within Visual Studio.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还涵盖了如何在商店中注册应用，以及如何在 Visual Studio 中与商店通信。
- en: Then we got to utilize the Live Connect APIs and sign in the user to the app.
    Also, we learned how to get session info after the user signs consent.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们利用 Live Connect API 登录用户到应用。此外，我们还学会了在用户同意后如何获取会话信息。
- en: In the next chapter we will learn about the app bar, how to create one for the
    app, and how to add menu buttons to it.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习关于应用栏的知识，如何为应用创建一个应用栏，以及如何向其中添加菜单按钮。
