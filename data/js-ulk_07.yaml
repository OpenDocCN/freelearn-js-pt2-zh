- en: Chapter 6. A Large-Scale JavaScript Application Architecture
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。大型JavaScript应用程序架构
- en: 'Any experienced programmer works hard to make the code reusable and maintainable.
    Here we are guided by the principles of object-oriented programming, such as encapsulation,
    abstraction, inheritance, composition, and polymorphism. In addition to these
    fundamentals, we follow the *five basic principles* of object-oriented programming
    and design defined by Robert C. Martin and known under the acronym **SOLID** ([https://en.wikipedia.org/wiki/SOLID_(object-oriented_design)](https://en.wikipedia.org/wiki/SOLID_(object-oriented_design))).
    When during code review we run into a violation of any of these principles, it''s
    considered as a code smell and results in refactoring. At the core of the tasks
    that we solve every day in development, often lie the common problems that we
    meet again and again. In this chapter, we will cover the most common universal
    architectural solutions and concepts in JavaScript development:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 任何有经验的程序员都会努力使代码具有可重用性和可维护性。在这里，我们遵循面向对象编程的原则，如封装、抽象、继承、组合和多态。除了这些基本原则之外，我们还遵循Robert
    C. Martin定义的面向对象编程和设计的基本原则，即著名的**SOLID**原则([https://en.wikipedia.org/wiki/SOLID_(object-oriented_design)](https://en.wikipedia.org/wiki/SOLID_(object-oriented_design)))。在代码审查过程中，如果我们遇到任何这些原则的违反，都会被视为代码异味，并导致重构。我们每天在开发中解决的核心任务，通常都是我们一次又一次遇到的问题。在本章中，我们将介绍JavaScript开发中最常见的通用架构解决方案和概念：
- en: Design patterns in JavaScript
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript中的设计模式
- en: Understanding concern separation in JavaScript using JavaScript MV* Frameworks
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用JavaScript MV* 框架了解JavaScript中的关注分离
- en: Design patterns in JavaScript
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript中的设计模式
- en: 'Abstract bulletproof solutions have been known for long and are usually referred
    to as **Design Patterns**. The original 23 Design Patterns in programming were
    first collected in *Design Patterns: Elements of Reusable Object-Oriented Software*,
    an influential book published in 1995 by *Erich Gamma*, *Richard Helm*, *Ralph
    Johnson*, and *John Vlissides* (*GoF*). These patterns are language-agnostic.
    Nonetheless, *Addy Osmani* in his online book *Learning JavaScript Design Patterns*
    ([http://addyosmani.com/resources/essentialjsdesignpatterns/book/](http://addyosmani.com/resources/essentialjsdesignpatterns/book/))
    shows how some of the GoF''s patterns can be implemented particularly in JavaScript.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 抽象的万无一失的解决方案早已为人所知，通常被称为**设计模式**。编程中的最初的23个设计模式首次收集在1995年出版的*Erich Gamma*、*Richard
    Helm*、*Ralph Johnson*和*John Vlissides*(*GoF*)合著的《设计模式：可复用面向对象软件的元素》一书中。这些模式与特定的编程语言无关。尽管如此，*Addy
    Osmani*在他的在线书籍《学习JavaScript设计模式》([http://addyosmani.com/resources/essentialjsdesignpatterns/book/](http://addyosmani.com/resources/essentialjsdesignpatterns/book/))中展示了如何实现一些GoF的模式，特别是在JavaScript中。
- en: 'Here we won''t repeat his work; instead we''ll examine how we can combine the
    patterns. One of the common problems in JavaScript development is communication
    between dynamically created objects. For instance, we have an object and need
    to call a method (`baz`) of object `bar` from `foo`. However, we cannot know if
    `bar` is already available. GoF''s pattern mediator encourages us to dedicate
    an object that is used to proxy communications between other objects. Thus, we
    promote loose coupling by keeping objects from direct interaction. In our case,
    despite calling `bar.baz`, we inform the mediator about our intent. The mediator
    will do the call when `bar` is available:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们不会重复他的工作；相反，我们将研究如何组合这些模式。JavaScript开发中的一个常见问题是在动态创建的对象之间的通信。例如，我们有一个对象，并需要从对象`foo`调用对象`bar`的`baz`方法。然而，我们无法知道`bar`是否已经可用。GoF的模式中介者鼓励我们创建一个用于代理其他对象之间通信的对象。因此，通过避免对象之间的直接交互，我们促进了松耦合。在我们的案例中，尽管调用`bar.baz`，但我们告知中介者我们的意图。中介者在`bar`可用时会进行调用：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here, we used the ES6 syntax, which serves just perfectly to describe a code
    design. With ES6, the intend can be shown to be concise and plain, while in the
    JavaScript edition ES5 and older we need additional lines of code to achieve the
    same result.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用了ES6语法，它非常适合描述代码设计。借助ES6，意图可以简洁明了地表达，而在JavaScript的ES5及更早版本中，要达到同样的效果需要编写额外的代码行。
- en: 'In the preceding example, we created a mediator object by instantiating the
    `EventEmitter` class. `EventEmitter` implements a messaging pattern known as PubSub.
    This pattern describes a message exchange where one object sends an event addressed
    to another object and the second object calls the handlers, if any, which subscribed
    for the event. In other words, if we subscribe a handler function of the `foo`
    object for the `myevent` mediator event (`mediator.on`), we can then invoke the
    handler of `foo` from any other object by publishing the `myevent` event on the
    mediator (`mediator.trigger`). Let''s look at an example. Our imaginary application
    is localized. It starts with a login screen. When users signs in, the screen jumps
    to the dashboard with the news. User may change the language on any of the screens.
    However, in the first stage, the news view object isn''t yet even created, while
    in the second stage, the login view object is already destroyed. However, if we
    use the mediator, we can trigger the `translate` event and all the available subscribers
    will receive the message:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们通过实例化`EventEmitter`类创建了一个中介者对象。`EventEmitter`实现了一种称为PubSub的消息模式。这种模式描述了一种消息交换，其中一个对象向另一个对象发送事件，第二个对象调用订阅了该事件的手动函数（如果有的话）。换句话说，如果我们为`foo`对象的`myevent`中介者事件（`mediator.on`）订阅一个处理器函数，我们就可以通过在中介者上发布`myevent`事件来调用`foo`的处理器（`mediator.trigger`）。让我们看一个例子。我们的虚构应用程序是本地化的。它从登录屏幕开始。当用户登录时，屏幕会跳转到带有新闻的仪表板。用户可以在任意屏幕上更改语言。然而，在第一阶段，新闻视图对象甚至还没有被创建，而在第二阶段，登录视图对象已经被销毁。但是，如果我们使用中介者，我们可以触发`translate`事件，所有可用的订阅者都将收到消息：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Whenever a user changes the language (`language.change`), the corresponding
    event is broadcasted through the mediator. When the news instance is available,
    it calls the `update` method that receives an event payload. In a real application,
    this instance would load news for the given language and update the view.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 每当用户更改语言(`language.change`)时，相应的事件通过中介者广播出去。当news实例可用时，它会调用接收事件负载的`update`方法。在实际应用中，这个实例将为给定语言加载新闻并更新视图。
- en: So what did we achieve? When using a mediator and an event-driven approach (PubSub),
    our objects/modules are loosely coupled and therefore, the overall architecture
    better accepts requirement changes. Besides, we gain more flexibility in unit
    testing.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 那么我们取得了什么成果呢？当我们使用中介者和基于事件驱动的方法（PubSub）时，我们的对象/模块是松耦合的，因此，整体架构更能接受需求变化。此外，我们在单元测试中获得了更多的灵活性。
- en: At the time this book was written, no browser provided native support for the
    ES6 class statement. However, you can run the given code using Babel.js run-time
    ([https://babeljs.io/docs/usage/browser/](https://babeljs.io/docs/usage/browser/))
    or transpiring.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写这本书的时候，没有任何浏览器提供对ES6类语句的本地支持。然而，你可以使用Babel.js运行时（[https://babeljs.io/docs/usage/browser/](https://babeljs.io/docs/usage/browser/)）或转译来运行给定的代码。
- en: 'When the application grows and we are getting too many events that are circulating,
    it makes sense to encapsulate event handling into a separate message hub object.
    Here comes to mind the `Facade` pattern, which defines a unified high-level interface
    for other interfaces:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用程序增长，我们处理的事件太多时，将事件处理封装到一个单独的消息总线对象中是有意义的。这时，`Facade`模式就会浮现在脑海中，它为其他接口定义了一个统一的高层次接口：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: After initializing the `Facade` class, we can trigger a complex flow where multiple
    modules are involved by simply firing an event on the mediator. This way we encapsulate
    behavioral logic into a dedicated object; this makes the code more readable and
    the whole system easier to maintain.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在初始化`Facade`类之后，我们可以通过在中介者上触发事件来启动一个涉及多个模块的复杂流程。这种方式将行为逻辑封装到一个专门的物体中；这使得代码更具可读性，整个系统更容易维护。
- en: Understanding concern separation in JavaScript
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解JavaScript中的关注点分离
- en: While writing JavaScript (especially client-side), one of the major challenges
    is to avoid *spaghetti code*, where the same module renders the user view, handles
    user interactions, and does the business logic. Such a module may quickly grow
    into a monster of a source file, where a developer rather gets lost than spots
    and resolves a problem.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 编写JavaScript（尤其是客户端）时，一个主要的挑战是避免*意大利面条代码*，在这种代码中，同一个模块渲染用户视图，处理用户交互，还做业务逻辑。这样的模块可能会迅速成长为一个源文件怪物，开发者在其中迷失方向，而不是发现问题并解决问题。
- en: 'The MVC Programming paradigm known as **Model View Controller** (**MVC**) splits
    the application functionality into separate layers such as presentation, data,
    and user input. MVC in a nutshell implies that a user interacts with the view
    land in a controller module that manipulates a model, which updates the view.
    In JavaScript, the controller is usually an observer that listens to UI events.
    A user clicks a button, the event is fired, and the controller addresses the corresponding
    model. For example, the controller requests the model to send submitted data to
    the server. The view is notified about the model state change and reacts accordingly,
    let''s say it displays a message, **Data saved**. Collaboration of components
    in MVC pattern is shown in the following image:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 被称为**模型-视图-控制器**（**MVC**）的编程范式将应用程序功能分为不同的层次，如表示层、数据层和用户输入层。简而言之，MVC意味着用户与控制器模块中的视图交互，控制器模块操作模型，模型更新视图。在JavaScript中，控制器通常是一个观察者，它监听UI事件。用户点击一个按钮，事件被触发，控制器处理相应的模型。例如，控制器请求模型将提交的数据发送到服务器。视图得知模型状态变化，并相应地作出反应，比如说它显示一条消息，“数据已保存”。以下图片展示了MVC模式中组件的协作：
- en: '![Understanding concern separation in JavaScript](img/00013.jpeg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![理解JavaScript中关注分离的原理](img/00013.jpeg)'
- en: As you see, we can keep all the user input handlers encapsulated in a single
    module (here the **Controller**), we can abstract the data layer following Domain-Driven
    design practices into a model module. Eventually, we have a view module responsible
    for updating the UI. So, the model has no knowledge about the component's presentation
    (HTML, CSS) and knows nothing about DOM events—that's just pure data and operations
    on it. The controller knows only the events from the view and the view API. And
    finally, the view knows nothing about the model and controller, but exposes its
    API and sends events. Thus, we have an efficient architecture that is easy to
    maintain and test.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，我们可以将所有用户输入处理器封装在单个模块（这里指的是**控制器**）中，我们可以将遵循领域驱动设计实践的数据层抽象为模型模块。最终，我们有一个负责更新UI的视图模块。所以，模型对组件的表示（HTML，CSS）一无所知，也不知道DOM事件——这只是纯粹的数据及其操作。控制器只知道视图的事件和视图API。最后，视图不知道模型和控制器，但暴露出它的API并发送事件。因此，我们得到了一个易于维护和测试的高效架构。
- en: 'However, in the case of a JavaScript-built UI, it''s not that easy to draw
    a line between the view logic and the controller one. Here we get handy MVC derivatives:
    **MVP** and **MVVM.MVP**.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在由JavaScript构建的UI情况下，将视图逻辑和控制器逻辑分开并不那么容易。这里我们有了MVC的衍生版本：**MVP**和**MVVM.MVP**。
- en: 'The **P** in **MVP** stands for **Presenter** that serves user requests. The
    presenter listens to the view events, retrieves data, manipulates it, and updates
    the presentation using the view API. The **Presenter** can interact with models
    to persist data. As you can see in the following diagram, the **Presenter** acts
    like a manager that receives a request, processes it using available resources,
    and directs the view to change. Following image shows collaboration of components
    in MVP pattern:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在**MVP**模式中的**P**代表**Presenter**，它负责处理用户请求。Presenter监听视图事件，检索数据，操作数据，并使用视图API更新展示。Presenter可以与模型交互以持久化数据。正如您将在以下图表中看到的，Presenter就像一个经理，它接收请求，使用可用资源处理它，并指导视图进行更改。下面的图片显示了MVP模式中组件的协作：
- en: '![Understanding concern separation in JavaScript](img/00014.jpeg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![理解JavaScript中关注分离的原理](img/00014.jpeg)'
- en: MVP provides better testability and concern separation compared to MVC. You
    can find an example of a `TODO` application implementing MVP at [http://codepen.io/dsheiko/pen/WQymbG](http://codepen.io/dsheiko/pen/WQymbG).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: MVP相比于MVC提供了更好的可测试性和关注分离。您可以在[http://codepen.io/dsheiko/pen/WQymbG](http://codepen.io/dsheiko/pen/WQymbG)找到一个实现MVP的`TODO`应用的示例。
- en: MVVM
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MVVM
- en: 'A passive view of MVP is mostly about data bindings and proxying of UI events.
    In fact, that''s something we can abstract. The view in **Model View ViewModel**
    (**MVVM**) approach may not require any JavaScript at all. Usually, the view is
    HTML-extended with directives known by ViewModel. The model represents domain-specific
    data and exposes concomitant methods such as validation. The ViewModel is a middleman
    between view and model. It converts the data objects from the model for the view.
    For instance, when a model property contains a raw datetime, the ViewModel converts
    it into the form expected in the view like `1 January 2016, 00:01`. Following
    image shows collaboration of components in MVVM pattern:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 被动的MVP观点主要涉及数据绑定和UI事件的代理。实际上，这些都是我们可以抽象的。在**模型-视图-视图模型**（**MVVM**）方法中的视图可能根本不需要任何JavaScript。通常，视图是使用视图模型知道的指令扩展的HTML。模型表示特定领域的数据并暴露相应的诸如验证的方法。视图模型是视图和模型之间的中间人。它将模型的数据对象转换为视图所需的格式，例如，当模型属性包含原始日期时间时，视图模型将其转换为视图中所期望的格式如`2016年1月1日
    00:01`。下面的图片显示了MVVM模式中组件的协作：
- en: '![MVVM](img/00015.jpeg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![MVVM](img/00015.jpeg)'
- en: The MVVM pattern has the advantage of both imperative and declarative programming.
    It may drastically reduce the development time by abstracting most of the generic
    view logic in a common binder module. The pattern gains momentum with popular
    JavaScript frameworks such as Knockout, Angular, and Meteor. You can find an example
    of an RSS reader application based on MVVM pattern at [https://msdn.microsoft.com/en-us/magazine/hh297451.aspx](https://msdn.microsoft.com/en-us/magazine/hh297451.aspx).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: MVVM模式的优势在于命令式和声明式编程两者之间。它可能通过将大部分通用视图逻辑抽象到一个公共绑定模块中来大大减少开发时间。随着像Knockout，Angular和Meteor这样的流行JavaScript框架的出现，这个模式得到了推动。你可以在[https://msdn.microsoft.com/en-us/magazine/hh297451.aspx](https://msdn.microsoft.com/en-us/magazine/hh297451.aspx)找到基于MVVM模式的RSS阅读器应用程序的示例。
- en: Using JavaScript MV* frameworks
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用JavaScript MV* 框架
- en: When starting a new scalable web application, you have to decide whether to
    go with a framework or not. It's hard now to find any large projects that are
    not built on the top of a framework. Yet there are drawbacks in using frameworks;
    just take a look at **Zero Framework Manifesto** ([http://bitworking.org/news/2014/05/zero_framework_manifesto](http://bitworking.org/news/2014/05/zero_framework_manifesto)).
    However, if you decide in favor of frameworks, then you are in a quandary about
    which one to pick. This is indeed not an easy task. JavaScript frameworks today
    are quite numerous; just take a look at the variety available at TodoMVC ([http://todomvc.com](http://todomvc.com)).
    It's hardly feasible to review all of them, but we can briefly examine a few of
    the most popular frameworks. According to recent surveys (for example, [http://ashleynolan.co.uk/blog/frontend-tooling-survey-2015-results](http://ashleynolan.co.uk/blog/frontend-tooling-survey-2015-results)),
    among the most trendy are Angular, React, and Backbone. All three give quite dissimilar
    development paradigms. So they are fitting to make an overall picture of JavaScript
    frameworks in general.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当你开始一个新的可扩展的网页应用时，你必须决定是否使用框架。现在很难找到任何不是建立在框架之上的大型项目。然而，使用框架也有缺点；只需看看**零框架宣言**（[http://bitworking.org/news/2014/05/zero_framework_manifesto](http://bitworking.org/news/2014/05/zero_framework_manifesto)）。然而，如果你决定支持框架，那么你将面临一个选择困境：选用哪一个。这确实不是一件易事。现在的JavaScript框架非常众多；只需看看TodoMVC提供的多样性([http://todomvc.com](http://todomvc.com))。很难一一审查它们，但我们可以简要地检查一些最受欢迎的框架。根据最近的调查（例如，[http://ashleynolan.co.uk/blog/frontend-tooling-survey-2015-results](http://ashleynolan.co.uk/blog/frontend-tooling-survey-2015-results)），目前最流行的是Angular，React和Backbone。这三个给出了非常不同的开发范式。所以它们适合用来概述JavaScript框架的一般情况。
- en: Backbone
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 后端
- en: Backbone ([http://backbonejs.org](http://backbonejs.org)) is very lightweight
    and easy to start with. This is the only popular framework where you can grasp
    the entire codebase in a considerably short time ([http://backbonejs.org/docs/backbone.html](http://backbonejs.org/docs/backbone.html)).
    Inherently, Backbone gives you a consistent abstraction and nothing besides this.
    By and large, we encapsulate all the UI-related logic into a subtype of `Backbone.View`.
    Any data required by the view, we put this into a derivative of `Backbone.Model`
    or `Backbone.Collection` (when it's a list of entries). Eventually, we route hash-based
    navigation requests by means of `Backbone.Route`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Backbone ([http://backbonejs.org](http://backbonejs.org)) 非常轻量级且易于入门。这是唯一一个你可以在相对较短的时间内掌握整个代码库的流行框架([http://backbonejs.org/docs/backbone.html](http://backbonejs.org/docs/backbone.html))。本质上，Backbone
    为你提供了一致性的抽象，除此之外什么也没有。总的来说，我们将所有的 UI 相关逻辑封装到 `Backbone.View` 的子类型中。视图所需的所有数据，我们将其放入
    `Backbone.Model` 或 `Backbone.Collection` 的派生类型中（当它是一个条目列表）。最后，我们通过 `Backbone.Route`
    实现基于哈希的导航请求的路由。
- en: 'Let''s consider an example. Our imaginary application allows us to look up
    for a contact by a given email address. Since we want this to be user friendly,
    the application form is expected to validate as we type in it. For this, we need
    a little HTML:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一个例子。我们的虚构应用程序允许我们通过给定的电子邮件地址查找联系人。由于我们希望这个应用程序友好，所以期望在应用程序表单中输入时进行验证。为此，我们需要一点
    HTML：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Here we have an input control, a submit button, and a container for a possible
    error message. In order to manage this, we will use the following `Backbone.View`:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个输入控件，一个提交按钮，以及一个可能错误信息的容器。为了管理这些，我们将使用以下 `Backbone.View`：
- en: '**ContactSearchView.js**'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**ContactSearchView.js**'
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the constructor (the `initialize` method), we bind the acting nodes of the
    HTML to the properties of the view and subscribe handlers to UI and the model
    events. Then, we register listener methods on the `submit` form and the `input`
    form. The second handler is invoked as we type, and it updates the model. The
    model runs a validation, and according to the results, it responds with a `invalid`
    or `change` model event. In the case of the `invalid` event, the view shows up
    the error message, otherwise it's hidden.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在构造函数（`initialize` 方法）中，我们将 HTML 的操作节点与视图的属性绑定，并订阅 UI 和模型事件的事件处理程序。然后，我们在 `submit`
    表单和 `input` 表单上注册监听器方法。当我们输入时，第二个处理程序被调用，并更新模型。模型运行验证，根据结果，它以 `invalid` 或 `change`
    模型事件作出响应。在 `invalid` 事件的情况下，视图显示错误信息，否则它被隐藏。
- en: 'Now we can add the model, as shown here:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以添加模型，如下所示：
- en: '**ContactSearchModel.js**'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**ContactSearchModel.js**'
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This model defines domain data in the `defaults` property and provides the `validate`
    method that is called automatically when we set or save the model.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模型在`defaults`属性中定义了领域数据，并提供了`validate`方法，当我们将模型设置或保存时会自动调用该方法。
- en: 'Now we can combine all together and initialize the view:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以把所有东西结合起来并初始化视图：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Backbone itself is surprisingly small in size (6.5 Kg zipped), but with the
    jQuery and Underscore dependencies, this makes quite a bundle. Both dependencies
    were vital in the past, but now that's under the question—do we need them at all?
    So, it makes sense to check the **Exoskeleton** ([http://exosjs.com/](http://exosjs.com/))
    project, which is an optimized version of Backbone that works perfectly without
    the dependencies.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: backbone 本身的大小令人惊讶地小（6.5 Kg 压缩），但是加上 jQuery 和 Underscore 的依赖关系，这使得整体捆绑包变得相当大。这两个依赖关系在过去至关重要，但现在值得怀疑——我们是否需要它们？因此，检查
    **Exoskeleton** ([http://exosjs.com/](http://exosjs.com/)) 项目是有意义的，这是一个经过优化的 Backbone
    版本，无需依赖关系即可完美工作。
- en: Angular
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安吉拉
- en: Angular ([http://Angular.org](http://Angular.org)) now seems to be the most
    popular JavaScript framework in the world. It is supported by Google and is considered
    as a framework that solves most routine tasks for you. In particular, Angular
    has a feature called two-way binding, meaning that UI changes propagate to the
    bound model and, vice versa, and model changes (for example, by XHR) update the
    UI.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Angular ([http://Angular.org](http://Angular.org)) 现在似乎是世界上最受欢迎的 JavaScript
    框架。它由谷歌支持，被认为是一个解决你大部分日常任务的框架。特别是，Angular 有一个名为双向绑定的特性，这意味着 UI 变化传播到绑定的模型，反之亦然，模型变化（例如，通过
    XHR）更新 UI。
- en: 'In AngularJS, we define behavior straight in HTML with directives. Directives
    are custom elements and attributes that assume UI logic similar to web components.
    Actually, you can create functional widgets in AngularJS without writing a single
    line of JavaScript code. Models in AngularJS are simple data containers and unlike
    Backbone, have no connection to external sources. When we need to read or write
    data, we use services. When any data is sent to View, we can use filters to format
    the output. The framework leverages dependency injection (DI) pattern allowing
    to inject core components into each other as dependencies. That makes the modules
    easier to meet requirement changes and unit-test. Let''s see this in practice:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在 AngularJS 中，我们直接在 HTML 中定义行为，使用指令。指令是自定义的元素和属性，它们假设与 Web 组件类似的 UI 逻辑。实际上，你可以在
    AngularJS 中创建功能性小部件，而不需要写一行 JavaScript 代码。AngularJS 中的模型是简单数据容器，与 Backbone 不同，它们没有与外部来源的连接。当我们需要读取或写入数据时，我们使用服务。任何数据发送到视图时，我们可以使用过滤器来格式化输出。该框架利用依赖注入（DI）模式，允许将核心组件作为依赖项相互注入。这使得模块更容易满足需求变化和单元测试。让我们在实践中看看这个：
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In this example, we declared an input field and bound it to a model email (`ng-model`
    directive). Form validation works in the same way as in HTML5 forms: if we declare
    an input type email and it gets validated accordingly. Here we go with a default
    text type and use the `ng-pattern` (similar to HTML5''s pattern) attribute to
    set the same validation rules for email as in the Backbone case. Further, we rely
    on the `ng-show` directive to display error messages block when the input state
    is empty (`csForm.email.$dirty`) or invalid (`csForm.email.$invalid`). In this
    case, the submit button, on the contrary, is hidden. Using the `ng-controller`
    and `ng-submit` directives, we bind the `csController` controller and the `on-submit`
    handler to the form. In the body of `csController` (JavaScript), `$scope.submit`
    expects a handler function for the form submit event.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们声明了一个输入字段，并将其绑定到一个模型邮箱上（`ng-model` 指令）。表单验证的工作方式与 HTML5 表单相同：如果我们声明了一个输入类型为邮箱的输入字段并进行相应的验证。这里我们使用默认的文本类型，并使用
    `ng-pattern`（类似于 HTML5 的 pattern）属性来设置与 Backbone 案例相同的邮箱验证规则。接下来，我们依靠 `ng-show`
    指令在输入状态为空（`csForm.email.$dirty`）或无效（`csForm.email.$invalid`）时显示错误信息块。在这种情况下，提交按钮相反是隐藏的。使用
    `ng-controller` 和 `ng-submit` 指令，我们将 `csController` 控制器和 `on-submit` 处理程序绑定到表单上。在
    `csController` 的主体（JavaScript）中，`$scope.submit` 期望有一个处理表单提交事件的事件处理函数。
- en: As you can see with Angular, it takes much less code in total to implement the
    same task. However, one should accept that keeping application logic in HTML makes
    it really hard to read the code.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，与 Angular 相比，实现相同任务所需的总代码量要少得多。然而，我们必须接受一个事实，那就是将应用逻辑保持在 HTML 中确实使得代码难以阅读。
- en: Furthermore, Angular subscribes many watchers per directive (intended handlers,
    automatic dirty checking, and so on) and makes it slow and resource-expensive
    on the pages with numerous interactive elements. If you want to tune your application
    performance, you rather learn Angular source code and it'll be a challenging task
    with ~11.2K lines of code (version 1.4.6).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Angular 每个指令都会订阅许多观察者（意图处理器、自动脏检查等），在包含众多交互元素的页面中，这会使其变得缓慢且资源消耗大。如果你想调整你的应用性能，你最好去学习
    Angular 的源代码，这对于有 ~11.2K 行代码（版本 1.4.6）来说将是一个具有挑战性的任务。
- en: React
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: React
- en: React ([https://facebook.github.io](https://facebook.github.io)) is a project
    of Facebook that isn't really a framework, but rather a library. The unique approach
    of React implies a component-based application. Inherently, React defines the
    Views of the components utilizing the so-called Virtual DOM, which makes UI rendering
    and updating surprisingly fast. With this focus on View, React comprises a template
    engine. Optionally, the React components can be written in a subset of JavaScript
    called JSX where you can put HTML templates within JavaScript. JSX can be parsed
    dynamically as in the following example, or it can be precompiled. Since React
    deals with Views only and makes no assumptions about other concerns, it makes
    sense to use this in conjunction with other frameworks. Thus, React can be plugged
    into a framework (for example, as directives in Angular or Views in Backbone).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: React ([https://facebook.github.io](https://facebook.github.io)) 是 Facebook
    的一个项目，它不是一个框架，而是一个库。React 独特的 approach 暗示了基于组件的应用。本质上，React 通过所谓的虚拟 DOM 来定义组件的视图，这使得
    UI 渲染和更新出奇地快。由于 React 专注于视图，因此它包含了一个模板引擎。可选地，React 组件可以用 JavaScript 的一个子集 JSX
    来编写，其中你可以将 HTML 模板放在 JavaScript 中。JSX 可以根据以下示例动态解析，或者可以预编译。由于 React 只处理视图，并且不假设其他关注点，因此与其它框架一起使用是有意义的。因此，React
    可以插入到框架中（例如，作为 Angular 的指令或 Backbone 的视图）。
- en: 'While implementing the contact search application this time, we will use React
    to control the View of our example by splitting it into two components (`FormView`
    and `EmailView`). The first one defines the View for the search form:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在这次实现联系人搜索应用的过程中，我们将使用 React 来控制我们的示例视图，通过将其拆分为两个组件（`FormView` 和 `EmailView`）。第一个组件定义了搜索表单的视图：
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In the `render` method, we declared the View of the component using the JSX
    notation. This makes it much easier to manipulate the Virtual DOM. Similar to
    Angular, we can address the component scope directly in the HTML. Thus, we subscribe
    to the form submit event and to the input change event by referring to the corresponding
    handlers in the `onSubmit` and `onChange` attributes. Since React provides no
    built-in model, we reused `ContactSearchModel`, the model we created while exploring
    Backbone.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `render` 方法中，我们使用 JSX 表示法声明了组件的视图。这使得操作虚拟 DOM 变得容易得多。与 Angular 类似，我们可以在 HTML
    中直接引用组件作用域。因此，我们可以通过引用 `onSubmit` 和 `onChange` 属性中的相应处理程序来订阅表单提交事件和输入变更事件。由于 React
    没有内置模型，我们复用了在探索 Backbone 时创建的 `ContactSearchModel` 模型。
- en: 'You might notice a `EmailView` custom tag in JSX. This is how we refer to our
    second component, which represents an email input control:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会注意到 JSX 中有一个 `EmailView` 自定义标签。这就是我们引用我们的第二个组件的方式，它代表了一个电子邮件输入控件：
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Here we bound the email input to the model and the error message container to
    the model state. We also passed the input `onChange` event to the parent component.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将电子邮件输入绑定到模型，将错误消息容器绑定到模型状态。我们还把输入的 `onChange` 事件传递给了父组件。
- en: 'Well, now we can add the components in the HTML and render the form:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，现在我们可以将组件添加到 HTML 中并渲染表单：
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We address the components in the templates such as web-components by the corresponding
    custom elements. Do not confuse yourself over the similarity, React components
    are abstracted from the browser, while web-components work similar to browser-native
    things. The core concept of React is that the Virtual DOM allows us to avoid unnecessary
    DOM reflow cycles that make the library preferable for high-performance applications.
    React is really good to render static pages on the server using Node.js. Thus,
    we can reuse application components between server and client sides.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过相应的自定义元素来在模板中引用组件，比如 web-components。不要让自己混淆于它们的相似性，React 组件是从浏览器中抽象出来的，而
    web-components 类似于浏览器原生组件。React 的核心概念是虚拟 DOM 允许我们避免不必要的 DOM reflow 周期，这使得该库适用于高性能应用。React
    在服务器上使用 Node.js 渲染静态页面非常出色。因此，我们可以在服务器和客户端之间复用应用程序组件。
- en: Summary
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'Writing maintainable code is an art. Probably the best book that provides guidance
    on this is *Clean Code: A Handbook of Agile Software Craftsmanship* by *Robert
    C. Martin*. It''s about naming functions, methods, classes, commenting, code formatting,
    and of course, about the correct use of OOP and SOLID. However, when reusing solutions
    described in this book, or in any of the Design Patterns series, we have to translate
    them into JavaScript, and it can be challenging due to the nature of the language.
    On a higher level, we have to split the code into layers such as presentation,
    business logic, data access, and persistence, where each bundle of code addresses
    the one concern and is loosely coupled with others. Here, we may choose an approach
    to go with. In the JavaScript world, it''s usually a derivative of MVC (MVP or
    MVVM or other). Considering this, a decent programming design requires a lot of
    abstraction. Today, we can use numerous frameworks. They provide diverse programming
    paradigms.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '编写可维护的代码是一门艺术。或许在提供这方面指导方面最好的书籍是*Robert C. Martin*所著的《Clean Code: A Handbook
    of Agile Software Craftsmanship》。这本书讲述了如何命名函数、方法、类，注释，代码格式化，当然还有面向对象编程（OOP）和SOLID原则的正确使用。然而，当我们重复使用本书或设计模式系列中描述的解决方案时，我们必须将它们翻译成JavaScript，这可能由于语言的特性而具有挑战性。在更高的层次上，我们必须将代码划分为表示层、业务逻辑层、数据访问层和持久化层，其中每一组代码都关注一个问题，并且与其他代码松耦合。在这里，我们可以选择一种方法。在JavaScript世界中，这通常是MVC（MVP或MVVM或其他）的派生。考虑到这一点，一个体面的编程设计需要大量的抽象。如今，我们可以使用许多框架。它们提供了多样的编程范式。'
