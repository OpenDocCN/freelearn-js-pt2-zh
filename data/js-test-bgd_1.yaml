- en: Chapter 1. What is JavaScript Testing?
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。什么是JavaScript测试？
- en: First of all, let me welcome you to this book. If you've picked up this book,
    I would assume that you are interested in JavaScript testing. You most probably
    have experienced JavaScript, and want to enhance your skills by learning how to
    test your JavaScript programs.
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 首先，请允许我欢迎你拿起这本书。如果你拿起这本书，我会假设你对JavaScript测试感兴趣。你很可能会经历JavaScript，希望通过学习如何测试你的JavaScript程序来提高你的技能。
- en: JavaScript is most often associated with the web browser and is one of the key
    tools for creating interactive elements on web pages. However, unlike server-side
    languages like PHP, Python and so on, JavaScript fails silently in general (although
    browsers like IE provides warning messages at times); there are no error messages
    to inform you that an error has occurred. This makes debugging difficult.
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: JavaScript通常与网络浏览器关联，是创建网页上交互元素的关键工具之一。然而，与PHP、Python等服务器端语言不同，JavaScript通常默默失败（尽管像IE这样的浏览器有时会提供警告信息）；没有错误信息告诉你发生了错误。这使得调试变得困难。
- en: In general, we will be learning about the basic building blocks for JavaScript
    testing. This will include the basics of **HTML (Hyper-text Markup Language),
    CSS (Cascading Style Sheets )** and JavaScript. After this, you will learn about
    various techniques to make HTML, CSS, and JavaScript work together; these techniques
    are the building blocks of what you are going to learn in other chapters.
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 通常，我们将学习关于JavaScript测试的基本构建块。这包括**HTML（超文本标记语言）**、**CSS（层叠样式表）**和JavaScript的基础知识。之后，你将学习各种技术使HTML、CSS和JavaScript协同工作；这些技术是你在其他章节中要学习的内容的基础。
- en: 'To be more specific, this is what we will learn about in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 更具体地说，我们将在本章中学习以下内容：
- en: The basics of HTML, CSS, and JavaScript
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTML、CSS和JavaScript的基础
- en: The syntax of HTML, CSS, and JavaScript
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTML、CSS和JavaScript的语法
- en: How to select HTML elements by using CSS and JavaScript
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用CSS和JavaScript选择HTML元素？
- en: Why do web pages need to work without JavaScript?
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网页为什么需要在没有JavaScript的情况下工作？
- en: What is testing and why do you need to test?
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试是什么，为什么你需要测试？
- en: What is an error?
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是错误？
- en: Types of JavaScript errors
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript错误的类型
- en: Examples shown in this chapter are simplistic—they are designed to allow you
    to see the major syntax and built-in methods or functions that are being used.
    In this chapter, there will be minimal coding; you will be asked to enter the
    code. After that, we'll briefly run through the code examples and see what is
    happening.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中示例很简单——它们旨在让你看到主要语法和正在使用的内置方法或函数。在本章中，代码将最少；你会被要求输入代码。之后，我们将简要回顾代码示例，看看发生了什么。
- en: With that in mind, we'll get started right now.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 带着这个想法，我们将立即开始。
- en: Where does JavaScript fit into the web page?
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript在网页中占有什么位置？
- en: Every web page consists of the following properties—content, appearance, and
    behavior. Each of these properties is controlled by Hyper Text Markup Language
    (HTML), Cascading Style Sheets (CSS), and JavaScript, respectively.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 每个网页都由以下属性组成——内容、外观和行为。这些属性分别由超文本标记语言（HTML）、层叠样式表（CSS）和JavaScript控制。
- en: HTML Content
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HTML内容
- en: HTML stands for Hyper Text Markup Language. It is the dominant markup language
    for web pages. In general, it controls the content of a web page. HTML defines
    web pages (or HTML documents) through semantic markups such as`<head>, <body>,
    <form>`, and`<p>` to control headings, the body of a document, forms, paragraphs,
    and so on. You can see HTML as a way to describe how a webpage should look like.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: HTML代表超文本标记语言。它是网页的主导标记语言。通常，它控制网页的内容。HTML通过`<head>`、`<body>`、`<form>`和`<p>`等语义标记来定义网页（或HTML文档），以控制标题、文档主体、表单、段落等。你可以把HTML看作是一种描述网页应该看起来怎样的方式。
- en: 'HTML makes use of markup tags, and these tags usually come in pairs. The syntax
    of HTML is as follows:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: HTML使用标记标签，这些标签通常成对出现。HTML的语法如下：
- en: '`<name-of-html-tag>` some of your content enclosed here `</name-of-html-tag>`'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`<name-of-html-tag>` 你的内容可以在这里括起来 `</name-of-html-tag>`'
- en: Notice that the **HTML** tags are enclosed by angular brackets; the **HTML**
    tag pair starts off with `<name-of-html-tag>` and ends with `</name-of-html-tag>`.
    This second **HTML** tags are known as the closing tags and they have a forward
    slash before the **HTML** tag.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，**HTML**标签由尖括号括起来；**HTML**标签对以`<name-of-html-tag>`开头，以`</name-of-html-tag>`结尾。这个第二个**HTML**标签被称为闭合标签，它们在**HTML**标签前有一个斜杠。
- en: 'Some of the common html elements include the following:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些常见的HTML元素：
- en: '`<head> </head>`'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<head> </head>`'
- en: '`<body> </body>`'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<body> </body>`'
- en: '`<title> </title>`'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<title> </title>`'
- en: '`<p> </p>`'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<p> </p>`'
- en: '`<h1> </h1>`'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<h1> </h1>`'
- en: '`<a> </a>`'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<a> </a>`'
- en: For a complete list of html elements, please visit [http://www.w3schools.com/tags/default.asp](http://www.w3schools.com/tags/default.asp).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看完整的HTML元素列表，请访问[http://www.w3schools.com/tags/default.asp](http://www.w3schools.com/tags/default.asp)。
- en: Time for action—building a HTML document
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间—构建一个HTML文档
- en: We are going to create an HTML document by making use of some of the HTML tags
    and syntax that we have seen above. (The example you see here can be found in
    the source code folder of `Chapter 1`, with the document titled `chapter1-common-html.html`)
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过使用上面看到的HTML标签和语法来创建一个HTML文档。（你在这里看到的示例可以在`Chapter 1`的源代码文件夹中找到，文档名为`chapter1-common-html.html`）
- en: Let's start by opening your favorite text editor or tool such as Microsoft Notepad,
    and creating a new document.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，打开你最喜欢的文本编辑器或工具，比如微软记事本，然后创建一个新文档。
- en: Enter the following code into your new document and save it.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码输入到你的新文档中并保存。
- en: '[PRE0]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Finally, open the document in your browser and you will see an example similar
    to the following screenshot:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，打开浏览器中的文档，你会看到类似以下屏幕截图的示例：
- en: '![Time for action—building a HTML document](img/0004_01_1.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![行动时间—构建一个HTML文档](img/0004_01_1.jpg)'
- en: Take note of the black box on the upper-right corner. It is a simple example
    of CSS at work. This will be explained shortly.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请注意右上角的黑色盒子。这是CSS工作的一个简单例子。这将在后面解释。
- en: What just happened?
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: You have just created an HTML document by using the more common **HTML** elements
    and **HTML** syntax.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你刚刚使用更常见的**HTML**元素和**HTML**语法创建了一个HTML文档。
- en: Each **HTML** tag has a specific purpose, as you can see from the result in
    the browser. For example, you must have noticed that`<h1>This is header 1</h1>`
    produced the largest text in terms of font-size,`<h2>This is header 2</h2>` produced
    the second largest text in terms of font size, and so forth.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 每个**HTML**标签都有特定的用途，正如你在浏览器中看到的结果一样。例如，你肯定注意到了`<h1>This is header 1</h1>`产生了最大的文本，`<h2>This
    is header 2</h2>`产生了第二大文本，依此类推。
- en: '`<ol> </ol>` represents an ordered list, while`<ul> </ul>` stands for an unordered
    list (list with bullet points).'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`<ol> </ol>`代表有序列表，而`<ul> </ul>`代表无序列表（带有子弹点的列表）。'
- en: You should have noticed the use of`<div> </div>`. This is used to define a section
    within an HTML document. However, the effects and power of the`<div> </div>` can
    only be seen in the next part of this chapter.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该注意到了`<div> </div>`的使用。这用于在HTML文档中定义一个部分。然而，`<div> </div>`的效果和力量只能在本章的下一部分看到。
- en: But wait, it seems that I have not done a complete introduction of HTML. That's
    right. I have not introduced the various attributes of HTML elements. So let's
    have a quick overview.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 但是等等，似乎我还没有对HTML做一个完整的介绍。没错。我没有介绍HTML元素的各个属性。所以让我们快速概述一下。
- en: Styling HTML elements using its attributes
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用其属性样式化HTML元素
- en: 'In general, the core attributes of HTML elements are the `class, id, style`,
    and `title` attribute. You can use these attributes in the following manner:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，HTML元素的core属性包括`class, id, style`和`title`属性。你可以以以下方式使用这些属性：
- en: '[PRE1]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Notice that all four attributes could be used at the same time. Also, the sequence
    of the attributes does not matter.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这四个属性可以同时使用。另外，属性的顺序无关紧要。
- en: But we have not done any styling yet. The styling only takes place in the `style`
    attribute. To see an example, enter the following code between the`<body>` and`</body>`
    tag in the previous code.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们还没有进行任何样式设计。样式只发生在`style`属性中。为了看到一个例子，请在之前的代码中`<body>`和`</body>`标签之间输入以下代码。
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You should be able to see a 200px by 200px black box with yellow border in
    the upper-right corner of your browser window (as shown in the previous screenshot).
    Here''s a screenshot that shows only the black box:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该能看到一个200px乘200px的黑色盒子，带有黄色边框，位于浏览器窗口的右上角（如之前的屏幕截图所示）。以下是只显示黑色盒子的屏幕截图：
- en: '![Styling HTML elements using its attributes](img/0004_01_2.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![使用其属性样式化HTML元素](img/0004_01_2.jpg)'
- en: In general, the inline style that you have specified manipulates the stylistic
    properties of the `style` attribute, to make it look the way you want it to.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，你指定的内联样式会操作`style`属性的样式属性，以使其看起来是你想要的样子。
- en: Only the `style` attribute allows you to style the HTML element. But this method
    is only used for specifying inline style for an element.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 只有`style`属性允许你设置HTML元素的样式。但这种方法只用于为元素指定内联样式。
- en: In case you are wondering what the`<title>` tag does, it is essentially an attribute
    that specifies extra information about an element. This is most often used within
    the`<head>` tag. If you open up any HTML document that contains a`<title>` tag,
    you will find the contents of this tag in the tab of your browser or title of
    your browser window.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想知道`<title>`标签的作用，它实际上是一个指定元素额外信息的属性。这通常用在`<head>`标签内。如果你打开任何包含`<title>`标签的HTML文档，你会在浏览器的标签页或浏览器窗口的标题中找到这个标签的内容。
- en: What about `id` attribute and `class` attribute? We'll cover these briefly in
    the next section.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 那么`id`属性和`class`属性是什么呢？我们将在下一节简要介绍这些内容。
- en: Specifying id and class name for an HTML element
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为HTML元素指定id和class名称
- en: In general, the `id` attribute and `class` attribute allows the HTML element
    to be styled by giving the CSS (Cascading Style Sheets, which we will be covering
    later in this chapter) a way to refer to these elements. You can think of the
    `id` attribute and `class` attribute as a 'name', or a way to identify the corresponding
    HTML element such that if this 'name' is referred by the CSS, the element will
    be styled according to the CSS defined for this particular element. Also, the
    `id` attribute and `class` attribute are often referred to by JavaScript in order
    to manipulate some of the DOM (Document Object Model) attributes, and so on.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，`id`属性和`class`属性允许HTML元素通过CSS（我们将在本章后面介绍的层叠样式表）来设置样式。你可以把`id`属性和`class`属性看作是一个“名字”，或者是一种识别对应HTML元素的方法，这样如果这个“名字”被CSS引用，元素就会按照特定的CSS样式进行设置。此外，`id`属性和`class`属性经常被JavaScript引用以操纵一些DOM（文档对象模型）属性等。
- en: 'There is one important idea that you must understand at this point of the chapter:
    the `id` attribute of each HTML element has to be unique within an HTML file,
    whereas the `class` attribute doesn''t.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的这一点上，你必须理解一个重要的概念：每个HTML元素的`id`属性在HTML文件中必须是唯一的，而`class`属性则不是。
- en: Cascading Style Sheets
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 层叠样式表
- en: CSS stands for Cascading Style Sheet. A CSS is used to control the layout, appearance,
    and formatting of the web page. CSS is a way for you to specify the stylistic
    appearance of the HTML elements. Via CSS, you can define the fonts, colors, size,
    and even layout of the HTML elements.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: CSS代表层叠样式表。CSS用于控制网页的布局、外观和格式。CSS是你指定HTML元素风格化外观的方法。通过CSS，你可以定义字体、颜色、大小，甚至是HTML元素的布局。
- en: If you noticed, we have not added any form of CSS styles to our HTML document
    yet; in the previous screenshots, what you see is the default CSS of our browser
    (apart from the black box on the upper-right), and most browsers have the same
    default CSS if no specific CSS is defined.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你注意到了，我们还没有向我们的HTML文档添加任何形式的CSS样式；在前面的截图中，你所看到的是我们浏览器的默认CSS（除了右上角的黑色盒子），大多数浏览器如果没有定义特定的CSS，都会有相同的默认CSS。
- en: 'CSS can be internal or external; an internal CSS is embedded in a HTML document
    using the`<style>` tag, whereas an external CSS is linked to by using the`<link>`
    tag, for example:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: CSS可以是内部的或外部的；内部CSS通过`<style>`标签嵌入HTML文档中，而外部CSS则通过`<link>`标签链接，例如：
- en: '[PRE3]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In general, using internal CSS is considered to be a bad practice and should
    be avoided. External CSS is widely favored over internal CSS because it allows
    us to save more time and effort as we can change the design of the website by
    just making changes to a `.css` file instead of making individual changes to each
    HTML document. It also helps in improving performance, as the browser will only
    need to download one CSS and cache it in memory.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，使用内部CSS被认为是一种不好的实践，应该避免。与内部CSS相比，外部CSS更受欢迎，因为它可以节省我们的时间和精力，我们只需更改`.css`文件即可更改网站的设计，而不需要对每个HTML文档进行单独的更改。它还有助于提高性能，因为浏览器只需下载一个CSS并将其缓存在内存中。
- en: The most important point for this section is the use of CSS selectors and the
    syntax of the CSS.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 本节最重要的点是CSS选择器的使用和CSS的语法。
- en: 'The CSS selectors work as follows: for selecting IDs, the name of the ID is
    preceded by a hash character. For a class selector, it is preceded by a dot. In
    the code that you will be seeing later, you will see that both ID and class selectors
    are used (they are also commented in the source code). Here''s a quick preview
    of the selectors:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: CSS选择器的工作方式如下：选择ID时，ID的名称前面有一个井号字符。对于类选择器，它前面有一个点号。在你稍后看到的代码中，你会看到同时使用了ID和类选择器（在源代码中也进行了注释）。以下是选择器的一个快速预览：
- en: '[PRE4]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The syntax of the CSS is as follows: selector { declaration } . The declaration
    consists of a semicolon-separated list of name or value attribute pairs, in which
    colons separate the name from the value.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: CSS的语法如下：选择器 { 声明 } . 声明由分号分隔的一组名称或值属性对组成，其中冒号将名称与值分隔开。
- en: Remember that we've mentioned the `id` attribute and `class` attribute in the
    preceding section? Now you will see how `id` attributes and `class` attribute
    are being used by CSS.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 记得我们在上一节提到了`id`属性 和 `class`属性吗？现在你将看到CSS是如何使用`id`属性和`class`属性的。
- en: Time for action—styling your HTML document using CSS
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动手时间—使用CSS样式化你的HTML文档
- en: Now we are going to style the HTML document that we created in the preceding
    section, by using CSS. For simplicity, we'll use an internal CSS. What will happen
    in this section is that you will see the CSS syntax in action, and how it styles
    each HTML element by making use of the `id` attribute and `class` attribute of
    the respective HTML element. Note that both `id` and `class` selectors are used
    in this example.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将继续样式化我们在上一节创建的HTML文档，使用CSS。为了简单起见，我们将使用内部CSS。在本节中，你将看到CSS语法在实际工作中的应用，以及它是如何通过利用相应HTML元素的`id`属性和`class`属性来样式化每个HTML元素的。注意这个例子中同时使用了`id`和`class`选择器。
- en: Note
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The completed version of this example can be found in the source code folder
    of `Chapter 1`, with the file name: `chapter1-css-appearance.html`'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子完成版本可以在`Chapter 1`的源代码文件夹中找到，文件名为：`chapter1-css-appearance.html`
- en: 'Continuing from the previous example, open up your text editor and insert the
    following code after the`</title>` tag:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接着上一个例子，打开你的文本编辑器，在`</title>`标签后插入以下代码：
- en: '[PRE5]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'After adding the CSS code above, you will need to add `class` and `id` attributes
    to your HTML elements. Here''s the stuff you''ll need to add:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在添加上面的CSS代码后，你需要为你 的HTML元素添加`class`和`id`属性。你需要添加的内容如下：
- en: '[PRE6]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `class` and `id` attributes that need to be added are highlighted in the
    code snippet above. If you are not sure if you have done it correctly, open up
    `chapter1-css-appearance.html` and have a look.
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 需要添加的`class`和`id`属性在上面的代码片段中突出显示。如果你不确定自己是否做得正确，打开`chapter1-css-appearance.html`看看。
- en: 'Now save the file and open it in your browser. You should see that your HTML
    document now looks different to how it was before it was styled by CSS. Your output
    should be similar to the example shown in following screenshot:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在保存文件，并在浏览器中打开它。你应该看到你的HTML文档现在看起来与使用CSS样式化之前不同。你的输出应该与下面示例中的截图类似：
- en: '![Time for action—styling your HTML document using CSS](img/0004_01_3.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![动手时间—使用CSS样式化你的HTML文档](img/0004_01_3.jpg)'
- en: What just happened?
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: You have just applied CSS to the HTML document that you created in the previous
    section. Notice that you have used both the `id` selector and `class` selector
    syntax. Within each selector, you should also see some stylistic attributes.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 你刚刚在你上一节创建的HTML文档中应用了CSS。注意你同时使用了`id`选择器和`class`选择器语法。在每个选择器内部，你也应该看到一些样式属性。
- en: The HTML elements in this example are similar to the previous example, except
    that the HTML elements now have `id` and `class` names.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子中的HTML元素与上一个例子相似，不同之处在于现在的HTML元素具有`id`和`class`名称。
- en: In the following sub-sections, I'll continue to explain the techniques used
    for referring to the various HTML elements, and how we styled the elements by
    using their stylistic attributes.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的子部分中，我将继续解释引用各种HTML元素的技术，以及我们如何通过使用它们的样式属性来设置元素样式。
- en: Referring to an HTML element by its id or class name and styling it
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过它的id或class名称引用HTML元素并对其进行样式设置
- en: 'We referenced various HTML elements by its `id` or `class` name. Consider the
    following code snippet in the above example:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们引用了各种HTML元素的`id`或`class`名称。考虑上面例子中的以下代码片段：
- en: '[PRE7]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The highlighted code refers to the HTML elements where `ids` and `class` name
    attributes are being used. Notice that some of the HTML elements have both `ids`
    and `class` name attributes while some do not.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 高亮的代码指的是使用`id`和`class`名称属性的HTML元素。注意有些HTML元素同时具有`id`和`class`名称属性，而有些则没有。
- en: 'Now consider the CSS snippet which is found in the example:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在考虑这个CSS代码段，它出现在示例中：
- en: '[PRE8]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `#boxed1` selector refers to the`<div>` with the id `#boxed1` in the HTML
    document. Notice that the`<div>` with the id `#boxed1` is styled according to
    the name and value attribute pairs within the declaration. If you make some changes
    to the value attribute and refresh your browser, you will notice changes to the
    `#boxed1` element as well.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`#boxed1`选择器指的是HTML文档中的`<div>`元素，其id为`#boxed1`。注意，具有id为`#boxed1`的`<div>`元素是根据声明中的名称和值属性对进行样式的。如果你更改值属性并刷新你的浏览器，你将注意到`#boxed1`元素也发生了变化。'
- en: 'Now, consider the following CSS snippets:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，考虑以下CSS代码段：
- en: '[PRE9]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'And:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 以及：
- en: '[PRE10]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The previous two code snippets are what we call `class` selectors, which have
    a slightly different syntax than the `id` selectors. For instance the `.intro`
    class selector selects the`<p>` with class name `"intro`" while the `a:link` ,
    `a:visited, a:hover`, and `a:active` selectors refer to the four states of an
    anchor pseudo class.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 前两个代码段是我们所说的`class`选择器，它们的语法与`id`选择器略有不同。例如，`.intro`类选择器选择类名称为“intro”的`<p>`元素，而`a:link`、`a:visited`、`a:hover`和`a:active`选择器指的是锚点的四种状态。
- en: Until now, we have covered how CSS selectors work to select HTML elements in
    an HTML document. But we have not covered the situation where an HTML element
    has both `id` and `class` attributes; we'll explain it now.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经介绍了CSS选择器如何选择HTML文档中的HTML元素。但我们还没有涉及到HTML元素同时具有`id`和`class`属性的情况，现在我们来解释一下。
- en: Differences between a class selector and an id selector
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 类选择器和id选择器之间的区别
- en: Although `id` selectors and `class` selectors appear to be the same, there are
    subtle differences. For instance, the `id` selector is used to specify a single
    HTML element, whereas the `class` selector is used to specify several HTML elements.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管`id`选择器和`class`选择器看起来一样，但它们之间有一些细微的差别。例如，`id`选择器用于指定一个HTML元素，而`class`选择器用于指定几个HTML元素。
- en: For example, you may try changing the anchor element`<a class="link" href="#">`
    to`<a class="`**intro**`" href="#">` and you would notice that the link is now
    bold.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你可以尝试将锚元素`<a class="link" href="#">`更改为`<a class="`**intro**`" href="#">`，你会注意到链接现在变成了粗体。
- en: Note
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If an HTML element has a style attribute that is controlled by both the stylistic
    attributes of an `id` and `class` selector, then the style attributes in the `class`
    selector will take precedence over those in the `id` selector.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个HTML元素有一个由`id`和`class`选择器控制的样式属性，那么`class`选择器中的样式属性将优先于`id`选择器中的样式属性。
- en: Other uses for class selectors and id selectors
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 类选择器和id选择器的其他用途
- en: In the following section, you will learn that the `id` and `class` name of an
    HTML element play an important role in providing interactivity on a web page.
    This is done by using JavaScript, where JavaScript makes a reference to an HTML
    element either by its `id` or `class` name, after which various actions such as
    DOM manipulation are performed on the HTML element that is referenced.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的章节中，你将了解到HTML元素的`id`和`class`名称在网页上提供交互性方面起着重要作用。这是通过使用JavaScript实现的，JavaScript通过其`id`或`class`名称来引用HTML元素，之后对引用的HTML元素执行各种操作，如DOM操作。
- en: Complete list of CSS attributes
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: CSS属性的完整列表
- en: The examples given here are not complete. For a complete reference to CSS, you
    may visit [http://www.w3schools.com/css/css_reference.asp](http://www.w3schools.com/css/css_reference.asp).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这里给出的例子不完整。要获取CSS的完整参考，你可以访问[http://www.w3schools.com/css/css_reference.asp](http://www.w3schools.com/css/css_reference.asp)。
- en: JavaScript providing behavior to a web page
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JavaScript为网页提供行为
- en: In this section we'll cover some of the key aspects of JavaScript. In general,
    if HTML provides content for an HTML document and CSS styles the HTML document,
    then JavaScript breathes life into an HTML document by providing behavior to the
    webpage.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍JavaScript的一些关键方面。总的来说，如果HTML为HTML文档提供内容，而CSS为HTML文档设置样式，那么JavaScript通过为网页提供行为来赋予HTML文档生命。
- en: The behavior can include changing the background colour of an HTML document
    dynamically, or changing the font size of the text, and so on. JavaScript can
    even be used to create effects such as animating slideshows, and fade-in and fade-out
    effects.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 行为可以包括动态改变HTML文档的背景颜色，或者改变文本的字体大小等等。JavaScript甚至可以用来创建如动画幻灯片、淡入淡出效果等效果。
- en: In general, the behaviors are event-based, and are achieved by manipulating
    the DOM in real-time (at least from the users' point of view).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，行为是基于事件的，通过实时操作DOM来实现（至少从用户的角度来看）。
- en: In case you are fairly new to JavaScript, JavaScript is an interpreted programing
    language with object-oriented capabilities. It is loosely-typed, which means that
    you do not need to define a data type when declaring variables or functions.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对JavaScript还不太熟悉，JavaScript是一种具有面向对象能力的解释型编程语言。它是一种松散类型的语言，这意味着你在声明变量或函数时不需要定义数据类型。
- en: In my opinion, the best way to understand the language features of JavaScript
    is through an example. Now, it's time for action.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在我看来，理解JavaScript语言特性最好的方式是通过一个例子。现在，是时候动手了。
- en: Time for action—giving behavior to your HTML document
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动手时间—给你的HTML文档添加行为
- en: We are going to apply JavaScript to an HTML document (styled with CSS). In general,
    the HTML elements and CSS are not changing as compared to the previous example,
    except that you will see HTML buttons added to the HTML document.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把JavaScript应用到一个带有CSS样式的HTML文档上。与之前的例子相比，HTML元素和CSS一般来说没有太大变化，除了你会在HTML文档中看到HTML按钮。
- en: The JavaScript applied to the HTML document in this example is known as inline
    JavaScript because it exists within the HTML document.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子中应用到HTML文档上的JavaScript被称为内联JavaScript，因为它存在于HTML文档中。
- en: What we are trying to accomplish here is to show you the language features such
    as how to declare variables, functions, manipulating DOM of the HTML elements,
    and various methods of referencing HTML elements by their `id` or `class`. You
    will also learn about some of the commonly-used built-in methods of arrays, and
    elements that are referenced, and how to use them to make your tasks easier.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里要展示的是如何声明变量、函数，如何操作HTML元素的DOM，以及如何通过它们的`id`或`class`来引用HTML元素。你还将学习到数组的一些常用内置方法，以及如何引用这些元素，从而使你的任务变得更简单。
- en: This example is nothing fancy, but you will learn some of the most important
    and commonly-used techniques for referencing HTML elements and then manipulating
    the DOM.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子并不复杂，但你将学习到一些最重要的、用于引用HTML元素并操作DOM的常用技术。
- en: Note
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '(The completed code for this example can be found in the source code folder,
    `Chapter 1`, with the file name of: `chapter1-javascript-behavior.html`):'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: （这个例子完整的代码可以在源代码文件夹`Chapter 1`中找到，文件名为：`chapter1-javascript-behavior.html`）：
- en: 'Continuing on from the previous example, enter the following JavaScript code
    after the`</style>` tag:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继上一个例子之后，在`</style>`标签后输入以下JavaScript代码：
- en: '[PRE11]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now save your document and load it in your browser, and you will see an example
    similar to the one shown in the next screenshot:'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在保存你的文档并在浏览器中加载它，你会看到一个与下一张截图类似的示例：
- en: '![Time for action—giving behavior to your HTML document](img/0004_01_4.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![动手时间—给你的HTML文档添加行为](img/0004_01_4.jpg)'
- en: What just happened?
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: You have just created an HTML document styled with CSS, and applied JavaScript
    to it. There are generally no changes to the HTML elements and CSS as compared
    to the previous example, but you will see the`<button>` elements.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经创建了一个带有CSS样式的HTML文档，并向其应用了JavaScript。与之前的例子相比，HTML元素和CSS一般来说没有太大变化，但你将会看到`<button>`元素。
- en: Now you can see the power of JavaScript in action by clicking on the HTML buttons.
    You should see that if you click on the **change properties** button, you will
    see the HTML box on the right shifts to the left by 200pixels, and its background
    change color. You can also click on other buttons to test their effect on the
    HTML document.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击HTML按钮，你可以看到JavaScript的强大作用。你会发现如果你点击了**改变属性**按钮，你将看到右侧的HTML盒子向左移动了200像素，其背景颜色也发生了变化。你还可以点击其他按钮来测试它们对HTML文档的影响。
- en: What happens when you click on each HTML button is that you are invoking a JavaScript
    function that manipulates the relevant HTML element in the document, via the DOM.
    You should see effects like hiding content, creating dynamic content, rearranging
    the list of items, and so on.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 当你点击每个HTML按钮时，你正在调用一个JavaScript函数，通过DOM操纵文档中的相关HTML元素。你应该看到诸如隐藏内容、创建动态内容、重新排列项目列表等效果。
- en: In the following sections, I'll first start by briefly introducing the JavaScript
    syntax, followed by attaching events to HTML elements, and finally using JavaScript's
    built-in methods to find HTML elements and manipulating them.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下部分中，我首先简要介绍了JavaScript语法，然后将事件附加到HTML元素上，最后使用JavaScript的内置方法来查找HTML元素并操作它们。
- en: JavaScript Syntax
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: JavaScript 语法
- en: 'We''ll start with learning the basic syntax of JavaScript. Consider the opening`<script>`
    tag:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从学习JavaScript的基本语法开始。考虑一下打开的`<script>`标签：
- en: '[PRE12]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: What the above `<script>` tag does is identify where JavaScript starts and ends.
    Within the `type` attribute, we write `text/javascript` to denote that this is
    a JavaScript code.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 上述`<script>`标签的作用是确定JavaScript的开始和结束位置。在`type`属性内，我们写`text/javascript`以表示这是一个JavaScript代码。
- en: 'Now, let us consider the following code snippet:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们考虑一下以下的代码片段：
- en: '[PRE13]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The above code snippet shows the function called `arrangeList`. We define a
    function by using the reserved keyword `function`, followed by the name of the
    function. Parameters are passed into the function within the `( )` and in this
    code snippet, `f` is the parameter passed into the function. The function starts
    with `a` {and ends with `a}`.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码片段显示了一个名为`arrangeList`的函数。我们通过使用保留关键字`function`后跟函数名称来定义一个函数。参数在`( )`内传递，在这个代码片段中，`f`是传递给函数的参数。函数从`a`开始{并在`a}`结束。
- en: 'In short, the function syntax can be defined as follows:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，函数语法可以定义如下：
- en: '[PRE14]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The second highlighted line shows decision making in JavaScript through the
    use of the `if` statement. The syntax is similar to the C programing `if` statement.
    The syntax of JavaScript''s `if` statement is as follows:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个高亮行通过使用`if`语句展示了JavaScript中的决策制定。这个语法与C编程语言中的`if`语句相似。JavaScript的`if`语句的语法如下：
- en: '[PRE15]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: A variation of the if statement is the **if-else**
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '`if`语句的一个变体是**if-else**。'
- en: '[PRE16]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: We use the keyword `var` followed by a variable name. In the above example,
    `var listElements = []`; means that a variable `listElements` is defined, and
    it is given the value of an empty list denoted by `[]`. In general, variables
    can be assigned arbitrary values since JavaScript is loosely-typed.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用关键字`var`后跟一个变量名。在上面的例子中，`var listElements = []`；意味着定义了一个名为`listElements`的变量，并给它一个表示空列表的`[]`值。通常，由于JavaScript是松散类型的，变量可以被赋予任意值。
- en: Continuing from above, you should see the `for` loop in action. Its syntax is
    also similar to the C language's `for` loop.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 继续上面的内容，你应该看到`for`循环在起作用。它的语法也与C语言的`for`循环相似。
- en: If you are new to JavaScript, you may be confused by `document.getElementById()`
    and statements like `listElements.push(x)`. What happens in these two lines is
    that we are using some of the built-in methods of JavaScript to reference the
    HTML element with the corresponding IDs. For now, `document.getElementById()`
    will be more important to you; this will be covered in the section where you learn
    how to find elements in your HTML document.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是JavaScript的新手，`document.getElementById()`和`listElements.push(x)`之类的语句可能会让你感到困惑。这两行代码中发生的事情是我们使用了JavaScript的一些内置方法来引用具有相应ID的HTML元素。现在，`document.getElementById()`对你来说将更重要；这将在你学习如何在HTML文档中查找元素的部分进行介绍。
- en: JavaScript events
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: javascript事件
- en: 'Let''s start off by looking at the following code snippet that is found in
    your JavaScript:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们来看一下你JavaScript中找到的以下代码片段：
- en: '[PRE17]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The above code snippets show HTML buttons with an event attached to them via
    `onclick`. When the button is clicked, the corresponding JavaScript function is
    invoked.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码片段显示了通过`onclick`附加到HTML按钮上的事件。当按钮被点击时，相应的JavaScript函数将被调用。
- en: For example,`<button onclick="changeProperties('boxed1')">change properties</button>`
    means that when this button is clicked, the `changeProperties()` function is invoked
    with the parameter `boxed1`, which happens to be a `div` element with the `ID
    boxed1`.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`<button onclick="changeProperties('boxed1')">change properties</button>`意味着当这个按钮被点击时，`changeProperties()`函数将被调用，参数`boxed1`是一个具有`ID
    boxed1`的`div`元素。
- en: Finding elements in a document
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在文档中查找元素
- en: Remember that we've seen a few built-in methods of JavaScript. JavaScript can
    be used to find elements in an HTML document by using some of JavaScript's built-in
    methods or properties. After finding the HTML element, you can manipulate its
    properties. JavaScript features three properties of the `Document` object (which
    is the root of every DOM tree) that allows you to find the HTML elements that
    you need. The techniques mentioned here form the backbone of JavaScript testing.
    Understanding this section is vital to understanding the rest of the book. So
    make sure that you understand this section of the chapter.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，我们已经看到了JavaScript的一些内置方法。JavaScript可以通过使用一些内置方法或属性在HTML文档中查找元素。在找到HTML元素后，你可以操作它的属性。JavaScript具有`Document`对象（DOM树的根）的三个属性，可以让你找到所需的HTML元素。这里提到的技术是JavaScript测试的骨架。理解这一部分对理解本书的其余部分至关重要。所以，确保你理解了这一章节的内容。
- en: 'Firstly, the `document.getElementById()`. This property allows you to select
    an HTML element with a specific ID. `document.getElementById()returns` only a
    single element because the value of every `id` attribute is (supposed to be) unique.
    Here''s a code snippet from the example:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，`document.getElementById()`。这个属性允许你通过特定的ID选择一个HTML元素。`document.getElementById()`只能返回一个元素，因为每个`id`属性的值都是（应该是）唯一的。以下是来自示例的代码片段：
- en: '[PRE18]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Consider the highlighted line in the above code snippet, `var e = document.getElementById(d)`.
    What happens here is that the HTML element 'd', which happens to be a parameter
    of the function `changeProperties()`, is being referred. If you look at the source
    code for this example, you will see an HTML button with the following:`<button
    onclick="changeProperties('boxed1')"> change properties</button>`. Notice that`'boxed1'`
    is being referenced, and this means that the parameter 'f' takes the value of
    the HTML element id of`'boxed1'`. Therefore, `var e = document.getElementById(d)`
    means that the HTML `div` with the ID of`'boxed1'` is being assigned to variable
    `e` via the `document.getElementById()` method.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑上面代码片段中突出显示的行，`var e = document.getElementById(d)`。这里发生的是HTML元素'd'被引用，而'd'碰巧是`changeProperties()`函数的参数。如果你查看这个示例的源代码，你会看到一个HTML按钮，其内容为：`<button
    onclick="changeProperties('boxed1')">改变属性</button>`。注意'boxed1'正在被引用，这意味着参数'f'取值为'boxed1'的HTML元素id。因此，`var
    e = document.getElementById(d)`意味着通过`document.getElementById()`方法将ID为'boxed1'的HTML
    `div` 分配给变量`e`。
- en: 'Secondly, note the `document.getElementsByName()` statement. This is similar
    to `document.getElementById()`, but it looks at the `name` attribute instead of
    the `id` attribute. It returns an array of elements rather than a single element.
    Consider the following code snippet:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，注意`document.getElementsByName()`语句。这个方法和`document.getElementById()`类似，但它查看的是`name`属性而不是`id`属性。它返回一个元素的数组而不是一个单一的元素。考虑以下代码片段：
- en: '[PRE19]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: What happens here is that the HTML element with the name '`a`' (which happens
    to be a parameter of the function) is referenced, and because it returns an array
    of elements, we use a `for` loop to loop through the elements, and use the method
    `.setAttribute` to change the color of the text to white. The `name` attribute
    applies to`<form>` and`<a>` tags only.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这里发生的是通过名称'`a`'（碰巧是函数的参数）引用了HTML元素，并且因为返回的是元素数组，我们使用一个`for`循环遍历元素，并使用`.setAttribute`方法将文本颜色改为白色。`name`属性仅适用于`<form>`和`<a>`标签。
- en: 'Finally, look at `document.getElementsByTagName()`. This method looks for HTML
    elements by the HTML tag name. For instance, the following code:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，看看`document.getElementsByTagName()`。这个方法通过HTML标签名称来查找HTML元素。例如，以下代码：
- en: '[PRE20]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: finds the HTML element by the tag name, and makes it hidden. In our example,
    a `h2` is used as a parameter and hence when you click on the relevant button,
    all text that is enclosed within the`<h2>` tags will disappear.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 通过标签名称查找HTML元素，并使其隐藏。在我们这个例子中，使用`h2`作为参数，因此当你点击相关按钮时，所有包含在`<h2>`标签中的文本都会消失。
- en: Now, if you change the parameter to `div`, then you will notice that all of
    the boxes will disappear.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你将参数改为`div`，那么你会注意到所有的方框都会消失。
- en: Putting it all together
  id: totrans-161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 把所有内容放在一起
- en: 'Now I''ll briefly describe how JavaScript works to interact with HTML elements.
    Here''s what you will learn in this subsection: after an HTML button is clicked
    (an event), it invokes a JavaScript function. Then, the JavaScript function receives
    a parameter and executes the function. Consider the following code snippets.'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我将简要描述JavaScript如何与HTML元素交互。在本小节中，你会了解到：当HTML按钮被点击（一个事件）后，它调用一个JavaScript函数。然后，JavaScript函数接收一个参数并执行该函数。考虑下面的代码片段。
- en: 'The following code is for an HTML button with an event attached to it:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是为带有事件的HTML按钮编写的代码：
- en: '[PRE21]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Next, the following code is for an HTML `div` element:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，以下是为HTML `div` 元素编写的代码：
- en: '[PRE22]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Lastly, the following is code which shows the JavaScript function that is to
    be invoked:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，以下是要调用的JavaScript函数的代码：
- en: '[PRE23]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Now, let me explain what we are trying to do here; after clicking the HTML button,
    the JavaScript function `insertContent()` is invoked. The parameter '`empty`'
    is passed into `insertContent()`. '`empty`' refers to the `div` element with ID
    '`empty`'.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我解释我们要在这里做什么；点击HTML按钮后，调用JavaScript函数`insertContent()`。参数'`empty`'被传递给`insertContent()`。'`empty`'指的是ID为'`empty`'的`div`元素。
- en: After `insertContent()` is invoked, the parameter 'empty' is passed to a variable
    `var elementToBeInserted`, by using `document.getElementById()`. Then, using the
    built-in method `innerHTML()` for HTML element nodes (because an HTML element
    node is passed to the `elementToBeInserted` variable), we dynamically insert the
    text "<h1>This `is a dynamic content</h1><br><p>great to be here</p>`".
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用`insertContent()`后，参数'empty'被传递给变量`var elementToBeInserted`，通过使用`document.getElementById()`。然后，利用HTML元素节点的内置方法`innerHTML()`（因为HTML元素节点传递给了`elementToBeInserted`变量），我们动态地插入文本"`<h1>This
    `is a dynamic content</h1><br><p>great to be here</p>`"。
- en: Go ahead and open the file in your web browser, and click on the HTML button.
    You will notice a new piece of text being inserted into the HTML document, dynamically.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 然后请在你的网页浏览器中打开文件，并点击HTML按钮。你会注意到新的一段文本被动态地插入到HTML文档中。
- en: Note
  id: totrans-172
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The built-in method `innerHTML()` for HTML element nodes allows us to manipulate
    (or in this case, dynamically insert) HTML contents into) the HTML node that is
    using the `innerHTML()` method. For example, in our example, we will insert `"<h1>This
    is a dynamic content</h1><br><p>great to be here</p>`" into`<div id="empty"></div>`.
    Technically speaking, after the insertion, the end result will be: :`<div id="empty"><h1>This
    is a dynamic content</h1><br><p>great to be here</p></div>`.'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: HTML元素节点的内置方法`innerHTML()`允许我们操纵（或者在这个例子中，动态插入）HTML内容到使用`innerHTML()`方法的HTML节点中。例如，在我们的例子中，我们将`"<h1>This
    is a dynamic content</h1><br><p>great to be here</p>"`插入到`<div id="empty"></div>`中。技术上讲，插入后，最终结果将是：`<div
    id="empty"><h1>This is a dynamic content</h1><br><p>great to be here</p></div>`。
- en: The difference between JavaScript and server-side languages
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript与服务器端语言的区别
- en: Generally speaking, the main difference between JavaScript and server-side languages
    lies in their usage and where they are executed. In modern usage, JavaScript runs
    on the client side (the users' web browser), and server-side languages runs on
    servers, and is therefore often used to read, create, delete, and update databases
    such as MySQL.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，JavaScript与服务器端语言的主要区别在于它们的用途和执行位置。在现代应用中，JavaScript在客户端（用户的网页浏览器）运行，而服务器端语言在服务器上运行，因此经常用来读取、创建、删除和更新MySQL等数据库。
- en: This means that the JavaScript is processed on the web-browser, whereas server-side
    languages are executed on web servers.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着JavaScript在网页浏览器上进行处理，而服务器端语言在网页服务器上执行。
- en: Server-side languages include ASP.NET, PHP, Python, Perl, and so on.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器端语言包括ASP.NET、PHP、Python、Perl等。
- en: In the context of modern web development techniques, you have probably heard
    of Web 2.0 applications. An important technique is that JavaScript is often used
    extensively to provide interactivity and to perform asynchronous data retrieval
    (and in some cases manipulation), which is also known as AJAX (which is a short-hand
    for Asynchronous JavaScript and XML).
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代网络开发技术背景下，你可能已经听说过Web 2.0应用程序。一个重要的技术是JavaScript经常被广泛使用，以提供交互性并执行异步数据检索（有时是数据操作），这也被称作AJAX（它是异步JavaScript和XML的缩写）。
- en: JavaScript cannot be used to interact with databases, whereas server-side languages
    such as PHP, Python, and JSP can.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript不能用来与数据库交互，而像PHP、Python和JSP这样的服务器端语言可以。
- en: JavaScript is also known as front-end, whereas server-side is back-end technology.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript也被称为前端，而服务器端则是后端技术。
- en: Note
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: JavaScript can be used on the server side as well, although it is most frequently
    associated with client-side technologies. Although JavaScript is typically not
    associated with interacting with databases, this might change in the future. Consider
    new browsers such as Google Chrome, which provides a database API for JavaScript
    to interact with built-in databases in the browser itself.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript也可以用在服务器端，尽管它最常与客户端技术相关联。尽管JavaScript通常不与与数据库交互关联，但未来这种情况可能会改变。考虑像Google
    Chrome这样的新浏览器，它为JavaScript提供了与浏览器内建数据库交互的数据库API。
- en: Why pages need to work without JavaScript
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么页面需要在没有JavaScript的情况下工作
- en: Although there are many arguments as to whether we should make web pages work
    with or without JavaScript, I personally believe that it depends on how the website
    or application is used. But anyway, I'll start off with some of the common reasons
    for why pages need to work without JavaScript.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然关于我们应该让网页在没有或具有JavaScript的情况下工作的争论有很多，但我个人认为，这取决于网站或应用程序的使用方式。不过无论如何，我将从一些页面需要在没有JavaScript的情况下工作的常见原因开始。
- en: Firstly, not all users have JavaScript enabled in web browsers. This means that
    users whose JavaScript is not enabled will not be able to use your application
    (or features) if it requires JavaScript.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，并非所有用户都在网页浏览器中启用了JavaScript。这意味着如果您的应用程序（或功能）需要JavaScript，那么没有启用JavaScript的用户将无法使用您的应用程序。
- en: Secondly, if you intend to support your user on their mobile device, then you
    need to make sure that your website or application works without JavaScript. The
    main reason is because support for JavaScript on mobile devices is often less
    than satisfactory; if you use JavaScript, your website or application may not
    work as well as expected (or worse, fail to work altogether).
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，如果您打算支持移动设备上的用户，那么您需要确保您的网站或应用程序在没有JavaScript的情况下也能工作。主要原因是移动设备对JavaScript的支持往往不够满意；如果您使用JavaScript，您的网站或应用程序可能不如预期工作（或者更糟，根本无法工作）。
- en: Another way to look at this is based on your understanding of your user base.
    For instance, probably the only time when you can afford to ignore users who have
    JavaScript disabled is when you can guarantee or know before-hand that your user
    base has JavaScript enabled. Such situations can occur when you are developing
    an application for internal use, and you know before-hand that all of your users
    have JavaScript enabled.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个角度来看，这基于您对用户群体的理解。例如，大概唯一可以忽略那些禁用JavaScript的用户的情况是，当您可以保证或事先知道您的用户群体已启用JavaScript时。这种情况可能出现在您为内部使用开发应用程序时，您事先知道您的所有用户都已启用JavaScript。
- en: In case you are wondering what you can do to create pages that work without
    JavaScript, you can check out the idea of graceful degradation. Imagine that you
    have an application and the core features of this application are AJAX-based.
    This means that in order to use your application, your user will need to have
    JavaScript enabled. In this case, you would most probably have to consider making
    your pages to work without JavaScript in order to ensure that all of your users
    can use your application.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在想如何创建在没有JavaScript的情况下也能工作的页面，您可以了解一下优雅降级（graceful degradation）的概念。想象一下，您有一个应用程序，该应用程序的核心功能是基于AJAX的。这意味着为了使用您的应用程序，您的用户需要启用JavaScript。在这种情况下，您可能需要考虑让您的页面在没有JavaScript的情况下也能工作，以确保所有用户都能使用您的应用程序。
- en: What is testing?
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试是什么？
- en: Generally speaking, programmers write a program with a few objectives in mind.
    Besides creating a program to solve a certain problem or to fulfil a certain demand,
    other common objectives would include ensuring that the program is at least correct,
    efficient, and can be easily extended.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，程序员在编写程序时会有一些目标。除了创建一个为解决特定问题或满足特定需求而编写的程序之外，其他常见目标还包括确保程序至少是正确的、高效的，并且可以容易地扩展。
- en: 'Of the above-mentioned objectives, correctness is the most important objective
    at least in this book. By correct, we mean that for any given input, we need to
    make sure that the input is what we want or need, and that the corresponding output
    is correct. The implicit meaning of this is that the program logic is correct:
    it works the way we intended it to work, there are no syntax errors, and the variables,
    objects, and parameters referenced are correct and what we need.'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在上文提到的目标中，正确性至少在这本书中是最重要的目标。我们所说的正确，是指对于任何给定的输入，我们需要确保输入是我们想要的或需要的，相应的输出也是正确的。这一点的隐含意义是指程序逻辑是正确的：它按照我们的意图工作，没有语法错误，引用的变量、对象和参数是正确的并且是我们需要的。
- en: Take, for instance, a retirement plan calculator written in JavaScript. We could
    expect the user to enter values such as their current age, retirement age, and
    savings per month. Imagine if a user were to enter incorrect data, such as a string
    or character. The JavaScript retirement plan calculator would not work, because
    the input data is incorrect. Or worse, if the user entered the correct data and
    our algorithm for calculating the amount of money to be set aside for retirement
    is incorrect, this results in the output being incorrect.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，一个用JavaScript编写的退休计划计算器。我们可能会期望用户输入诸如他们当前的年龄、退休年龄和每月储蓄等值。想象一下，如果用户输入错误的数据，比如字符串或字符。JavaScript退休计划计算器将无法工作，因为输入数据是错误的。更糟糕的是，如果用户输入了正确的数据，而我们计算为退休设置
    aside 的金额的算法是错误的，这将导致输出是错误的。
- en: The above errors could be avoided by testing, which is the main topic of this
    book. In the remaining portions of this chapter, we will talk about some of the
    types of errors that you may face as a JavaScript programmer. But before we move
    into that, I'll briefly discuss why we need to test.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 上述错误可以通过测试来避免，这是本书的主题。在本章剩余的部分，我们将讨论你作为JavaScript程序员可能遇到的一些错误类型。但在我们进入那个话题之前，我将简要讨论为什么我们需要测试。
- en: Why do you need to test?
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么你需要测试？
- en: First and the foremost, human beings are prone to mistakes. As a programmer,
    you have probably made coding mistakes during your programing career. Even the
    best programmers on Earth have made mistakes. What makes it worse is that we may
    not have realized the mistake until we tested the program.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 首先且最重要的是，人类容易犯错误。作为一名程序员，你很可能在你编程生涯中犯过编码错误。即使地球上最优秀的程序员也犯过错误。更糟糕的是，我们可能直到测试程序时才发现错误。
- en: Secondly, and perhaps more importantly, JavaScript generally fails silently;
    there are no error messages to tell you what errors have occurred or where that
    error has occurred, assuming you are not using any testing unit or tools to test
    your JavaScript. Therefore, there is little or no way to know what has happened
    to your JavaScript program, if there is an error.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 第二，也许更重要的是，JavaScript通常会默默失败；没有错误信息告诉你发生了什么错误，或者错误发生在哪里，假设你没有使用任何测试单元或工具来测试你的JavaScript。因此，如果你JavaScript程序有错误，很难或根本没有办法知道发生了什么。
- en: Note
  id: totrans-197
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In Microsoft's Internet Explorer, you can actually see if you have any JavaScript
    errors. You will need to turn on **Script Debugging** which is found in **Tools**
    | **Internet Options** | **Advanced| Script Debugging**. With **Script Debugging**
    turned on, you will see a yellow 'yield' icon on the bottom left hand corner for
    IE7 or IE8 if you have any JavaScript errors. Clicking on that icon will give
    you a window where you can click on **Show Details** to get more information about
    the error.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在微软的Internet Explorer中，你实际上可以看到是否有任何JavaScript错误。你需要打开**脚本调试**，这在**工具** | **Internet选项**
    | **高级** | **脚本调试**中找到。开启**脚本调试**后，如果你有任何JavaScript错误，你将在IE7或IE8的左下角看到一个黄色的'yield'图标。点击这个图标，你会得到一个窗口，你可以在其中点击**显示详细信息**来获取有关错误的更多信息。
- en: Thirdly, even if there are ways to inform you of JavaScript errors, such as
    enabling **Script Debugging**, as mentioned above, there are certain errors that
    cannot be detected by such means. For instance, your program syntax may be 100
    percent correct, but your algorithm or program logic might be incorrect. This
    means that even if your JavaScript can be executed, your output could be incorrect.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 第三，即使有方法可以通知你JavaScript错误，比如启用**脚本调试**，如上所述，但仍有某些错误是无法通过这些方法检测到的。例如，你的程序语法可能是一百分之一百的正确，但你的算法或程序逻辑可能是有误的。这意味着即使你的JavaScript可以执行，你的输出可能是错误的。
- en: Lastly, testing JavaScript will help you to identify cross-browser compatibility
    issues. Because there are approximately five major types of browsers (not accounting
    for different versions) to support—namely Microsoft's Internet Explorer, Mozilla's
    Firefox, Google's Chrome, Apple's Safari and the Opera Web Browser—you will certainly
    need to test to ensure that your website or application works across all browsers,
    because different browsers have different DOM compatibilities.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，测试JavaScript可以帮助你识别跨浏览器兼容性问题。因为大约有五种主要类型的浏览器（不计算不同版本）需要支持——即微软的Internet Explorer、Mozilla的Firefox、谷歌的Chrome、苹果的Safari和Opera网络浏览器——你肯定需要测试以确保你的网站或应用程序在所有浏览器上都能工作，因为不同的浏览器有不同的DOM兼容性。
- en: Ensuring that the program is correct means confirming and checking that the
    input is correct, and then that the output is what we intended it to be.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 确保程序正确意味着确认并检查输入是正确的，然后输出是我们期望的结果。
- en: Types of errors
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 错误类型
- en: Before I start introducing the types of JavaScript errors, we need to understand
    the inner workings of JavaScript and the web browser. In general, a user requests
    a web document from the server, and this document is loaded into the user's web
    browser. Assuming that the web document has JavaScript embedded (either via an
    external JavaScript file or via inline JavaScript), the JavaScript will be loaded
    together with the web document (from top to bottom). As the web document is loaded
    by the web browser, the JavaScript engine of the web browser will begin to interpret
    the JavaScript embedded in the web document. This process will continue until
    the JavaScript (and the web document) is completely loaded into the user's web
    browser, ready for interaction. Then the user may start to interact with the web
    document by clicking on links or buttons that may have JavaScript events attached
    to them.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在我开始介绍JavaScript错误之前，我们需要了解JavaScript和网页浏览器的工作原理。一般来说，用户从服务器请求一个网页文档，这个文档被加载到用户的网页浏览器中。假设这个网页文档中嵌入了JavaScript（无论是通过外部JavaScript文件还是通过内联JavaScript），JavaScript将与网页文档一起被加载（从上到下）。当网页浏览器加载网页文档时，网页浏览器的JavaScript引擎将开始解释网页文档中嵌套的JavaScript。这个过程将继续，直到JavaScript（和网页文档）完全加载到用户的网页浏览器中，为交互做好准备。然后，用户可能开始通过点击可能附有JavaScript事件链接或按钮来与网页文档进行交互。
- en: Now, with the above process in mind, we'll start introducing the different types
    of JavaScript errors, by using simple examples.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，带着上面的过程在心中，我们将开始介绍不同类型的JavaScript错误，通过使用简单的例子。
- en: Loading errors
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加载错误
- en: The first types of error that we'll discuss are loading errors. Loading errors
    are errors that are caught by the JavaScript engine of the web browser as the
    document is loading.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先讨论的错误类型是加载错误。加载错误是在文档加载过程中由网页浏览器的JavaScript引擎捕获的错误。
- en: In other words, loading errors occur before the JavaScript has the opportunity
    to function. These errors are typically spotted by JavaScript engines before the
    code has the chance to execute.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，加载错误发生在JavaScript有机会运行之前。这些错误通常在代码有机会执行之前被JavaScript引擎发现。
- en: With the previously-mentioned things in mind, let us now experience how such
    loading errors occur.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 带着前面提到的事情在心中，现在让我们经历一下加载错误是如何发生的。
- en: Time for action—loading errors in action
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——加载错误的具体表现
- en: Now we'll see loading errors in action. We do not actually see it, but you will
    learn about some of the most common causes for loading errors.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将看到加载错误的具体表现。我们实际上并没有看到它，但你将学习到一些加载错误的最常见原因。
- en: Note
  id: totrans-211
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The complete code for this example can be found in the source code folder `Chapter
    1`, with a file name of `chapter1-loading-errors.html`
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子的完整代码可以在源代码文件夹`第1章`中找到，文件名为`chapter1-loading-errors.html`
- en: Open up your text editor and create a new document.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的文本编辑器并创建一个新文档。
- en: 'Enter the following code into your document:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码输入到你的文档中：
- en: '[PRE24]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Now, uncomment the `/*` and `*/` wrapped around example 1, save the document
    and load it into your browser. You should see a blank page on your web browser.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，取消注释掉例子1周围的`/*`和`*/`，保存文档并在浏览器中加载它。你应该在你的网页浏览器中看到一个空白页面。
- en: Repeat the above step for example 2 and example 3\. You should see a blank page
    for both examples 2 and 3.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复上述步骤，对例子2和例子3也这样做。你应该看到例子2和例子3都是一个空白页面。
- en: What just happened?
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: You have just created an HTML document with erroneous JavaScript code. From
    the comments in the code, you should realize that the errors are caused largely
    due to syntax errors. And when such errors occur, there is simply no response
    from the JavaScript in the web browser.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 你刚刚创建了一个带有错误JavaScript代码的HTML文档。从代码中的注释，你应该意识到错误主要是由于语法错误引起的。当这种错误发生时，网页浏览器中的JavaScript没有任何响应。
- en: Some examples of common syntax errors would include missing brackets, missing
    semi-colons, and incorrect variable names.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 常见的语法错误示例包括缺少括号、缺少分号和错误的变量名。
- en: In general, as long as your code is correct in terms of syntax, then you should
    be able to avoid loading errors.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，只要你的代码在语法上是正确的，那么你应该能够避免加载错误。
- en: Now, you might ask, what happens if only certain parts of the JavaScript code
    are incorrect? This would depend on where the error has occurred.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可能会问，如果JavaScript代码的某些部分是错误的会发生什么？这将取决于错误发生的地点。
- en: Partially correct JavaScript
  id: totrans-223
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 部分正确的JavaScript
- en: In general-JavaScript is executed or loaded from top to bottom. This means that
    the first line of code is loaded first, followed by the next, and so on until
    finally the last line of the code is loaded. This has important implications for
    partially-correct JavaScript.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，JavaScript是从上到下执行或加载的。这意味着首先加载第一行代码，然后是下一行，直到最后加载最后一行代码。这对部分正确的JavaScript有重要的影响。
- en: Time for action—loading errors in action
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——加载错误在行动中
- en: Now we'll see partially-correct JavaScript code in action and its implications.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将看到部分正确的JavaScript代码在行动中及其影响。
- en: Note
  id: totrans-227
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The completed source code for this example can be found in the source code folder,
    with the file name `Chapter1-loading-errors-modified.html`.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例的完整源代码可以在源代码文件夹中找到，文件名为`Chapter1-loading-errors-modified.html`。
- en: 'Open your text editor, create a new document, and enter the following code
    into your document:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的文本编辑器，创建一个新文档，将以下代码输入到你的文档中：
- en: '[PRE25]'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Now save your document and load your document in your web browser. You should
    see the text **This is a test in** your browser.
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在保存你的文档并在你的网页浏览器中加载你的文档。你应该在浏览器中看到文字**这是一个测试在**。
- en: What just happened?
  id: totrans-232
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: If you trace the code, you should see that the JavaScript executes from top
    to bottom. It stops executing when it encounters an error where an incorrect variable
    name is referenced by `document.write()`. Because it stops executing when it encounters
    an error, the remaining JavaScript code will not be executed.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你追踪代码，你应该看到JavaScript是从上到下执行的。当它遇到一个错误时，它会在`document.write()`中引用一个错误的变量名而停止执行。因为它在遇到错误时停止执行，所以剩下的JavaScript代码将不会被执行。
- en: Things are slightly different if your JavaScript code is organized in terms
    of functions. In this situation, functions that have incorrect syntax will fail
    to execute, whereas syntactically-correct functions will continue to work, regardless
    of its order in the code.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的JavaScript代码是按照函数来组织的，那么情况会有所不同。在这种情况下，语法错误的函数将无法执行，而语法正确的函数将继续工作，无论其在代码中的顺序如何。
- en: By now, you should have a brief understanding of loading errors and how to prevent
    them by making sure that your code is syntactically correct.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 到现在为止，你应该对加载错误以及如何通过确保你的代码在语法上是正确的来防止它们有一个大致的了解。
- en: Now let us move on to the next form of error—runtime errors.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们继续讨论下一类错误——运行时错误。
- en: Runtime errors
  id: totrans-237
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行时错误
- en: Do you remember how JavaScript is loaded together with the web document into
    the browser? After the web document is loaded completely into the web browser,
    it is ready for various events, which leads to execution of JavaScript code.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 你还记得JavaScript是如何与网页文档一起加载到浏览器中的吗？在网页文档完全加载到网页浏览器后，它准备好响应各种事件，这也导致了JavaScript代码的执行。
- en: Runtime errors occur during execution; for instance, consider an HTML button
    that has a JavaScript event attached to it. Assuming that a JavaScript function
    is assigned to an event, then if the JavaScript function has an error, that function
    will not be executed when the user clicks on the HTML button.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 运行时错误发生在执行过程中；例如，考虑一个带有JavaScript事件的HTML按钮。假设一个JavaScript函数被分配给了一个事件，那么如果JavaScript函数有错误，当用户点击HTML按钮时，该函数将不会被执行。
- en: Other forms of runtime error occur when you misapply an object, variable, or
    method, or when you reference objects or variables that do not exist yet.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 其他形式的运行时错误发生在你对对象、变量或方法误用，或者你引用了尚不存在的对象或变量时。
- en: Time for action—runtime errors in action
  id: totrans-241
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——运行时错误在行动中
- en: Now we shall see all three common causes of runtime errors in action.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将看到运行时错误的三个常见原因在行动。
- en: Note
  id: totrans-243
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The code sample is saved in the source code folder of `Chapter 1`, entitled:
    `chapter1-runtime-errors.html`.'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 代码示例保存在第1章的源代码文件夹中，名为：`chapter1-runtime-errors.html`。
- en: 'Open up your text editor, enter the following code into a new document:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的文本编辑器，在新的文档中输入以下代码：
- en: '[PRE26]'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Save the document and load it into your web browser.
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文档，并将其加载到你的网页浏览器中。
- en: 'After loading the document into your browser, you will see two alert boxes:
    the first box says **undefined** and the second alert box says **a variable that
    is defined**. Then you will see an HTML button that says **click me**.'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在将文档加载到浏览器后，你将看到两个警告框：第一个框显示**未定义**，第二个警告框显示**已定义的变量**。然后你会看到一个写着**点击我**的HTML按钮。
- en: Click on the button, and you will see that nothing happens.
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击按钮，你会发现什么也没有发生。
- en: What just happened?
  id: totrans-250
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: The first alert that you have seen shows you an error that is caused by misapplying
    a method. `window.innerHTML` does not exist, as `.innerHTML` is applied to HTML
    elements and not to `window`. The second alert window says that a variable that
    is defined as the variable is defined before the `alert()` references it. Lastly,
    nothing happens when you click on the HTML button because the function that is
    to be invoked has the error of referencing to a variable that is not defined.
    Hence it is not executed during the event `onclick()`.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 你所看到的第一个警告框显示了一个由方法误用引起的错误。`window.innerHTML`不存在，因为`.innerHTML`是应用于HTML元素，而不是`window`。第二个警告框显示一个在`alert()`引用它之前已定义的变量。最后，当你点击HTML按钮时，什么也不会发生，因为应该被调用的函数引用了未定义的变量。因此，在`onclick()`事件中没有执行。
- en: In this example, you should realize that the logic of your code is of great
    importance you will need to define your variables or objects before using them
    in your code. Also, make sure that the method or properties applied are correct.
    Otherwise, you will end up with a runtime error.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，你应该意识到代码的逻辑非常重要，你需要在使用它们之前定义你的变量或对象。还要确保应用的方法或属性是正确的。否则，你最终会得到一个运行时错误。
- en: Now, we'll move on to the last form of JavaScript error—logic errors.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将进入JavaScript错误的最后一种形式——逻辑错误。
- en: Logic errors
  id: totrans-254
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 逻辑错误
- en: Logic errors are difficult to explain. But in general, you can see logic errors
    as errors that occur when the code does not work the way that you intend it to.
    It is much easier to understand what logic errors are by experiencing them. So,
    let us take some action.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 逻辑错误很难解释。但一般来说，你可以将逻辑错误视为代码运作不符合你预期的方式时产生的错误。通过亲身体验逻辑错误，你更容易理解它们是什么。所以，让我们采取一些行动。
- en: Time for action—logic errors in action
  id: totrans-256
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——逻辑错误在行动
- en: In this final example, you will see logic errors.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个最后一个例子中，你会看到逻辑错误。
- en: 'Open your text editor, enter the following code into a new document:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的文本编辑器，在新的文档中输入以下代码：
- en: '[PRE27]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Now, save the code and open the document in your browser.
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，保存代码并在浏览器中打开文档。
- en: 'You will see two simple forms. The first form which has the text: **You currently
    have 100 dollars. The amount of money you have saved is**" " followed by an input
    box. And the second form contains the text: **Checking if you have entered a digit**
    followed by an input box.'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会看到两个简单的表单。第一个表单包含文本：**您目前有100美元。您所拥有的金额是** " "，后面是一个输入框。第二个表单包含文本：**检查你是否输入了一个数字**，后面是一个输入框。
- en: Now try to enter a number that is larger than 99 (say, 999).
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在尝试输入一个大于99的数字（比如，999）。
- en: You may have noticed that after entering your input, the total amount of money
    appears to have decreased. This is an example of a logic error, where you are
    supposed to add the input, but instead the function subtracts the input. Why did
    the program not work the way it was intended to?
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可能注意到了，在输入你的输入后，总金额似乎减少了。这是一个逻辑错误的例子，你应该将输入加起来，但函数却减去了输入。程序为什么没有按照预期的方式工作？
- en: What just happened?
  id: totrans-264
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: You have just witnessed a simple example of logic error in action. Logic errors
    can take many forms. You may have noticed a code snippet in the above example
    that is commented out.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 你刚刚见证了一个简单的逻辑错误行动例子。逻辑错误可以有多种形式。你可能注意到了上面例子中被注释掉的一段代码。
- en: '[PRE28]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This is an example of an infinite `for` loop. In this loop, you may have noticed
    that the statement `document.write(i+<br>")`; should be executed 10 times ( from
    `var i = 0` to when `i = 9` ). However, the third expression in the initializer
    within the `for` statement is decreasing (`i--`).
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个无限 `for` 循环的例子。在这个循环中，你可能会注意到语句 `document.write(i+<br>")`; 应该执行 10 次（从 `var
    i = 0` 到 `i = 9`）。然而，在 `for` 语句内的初始化器中的第三个表达式是递减的（`i--`）。
- en: As a result, the variable `i` will never be able to reach the condition where
    `i>10`. If you uncomment the code, you will notice that the statement `document.write(i"<br>")`;
    will continue to execute until the web browser hangs; if you are using Firefox
    on a Windows machine, the web browser will hang and you will have to quit the
    browser by using the Task Manager.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，变量 `i` 永远不可能达到 `i>10` 的条件。如果你取消注释代码，你会注意到语句 `document.write(i"<br>")`; 将会继续执行，直到网页浏览器挂起；如果你在
    Windows 机器上使用 Firefox，网页浏览器将会挂起，你将不得不使用任务管理器退出浏览器。
- en: Some advice for writing error-free JavaScript
  id: totrans-269
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一些编写无错误 JavaScript 的建议
- en: By now, you should have a brief understanding of the types of JavaScript errors.
    While we typically cannot avoid errors, we should try to minimize errors as we
    write code. In this section, I'll briefly discuss some of the strategies that
    you can take, as a beginner JavaScript programmer, to minimize the amount of errors
    that can occur.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 到现在为止，你应该对 JavaScript 错误类型有一个大致的了解。虽然我们通常无法避免错误，但我们在编写代码时应该尽量减少错误。在本节中，我将简要讨论一些作为初学
    JavaScript 程序员可以采取的策略，以最小化可能发生的错误量。
- en: Always check for proper names of objects, variables, and functions
  id: totrans-271
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总是检查对象、变量和函数的正确名称
- en: As seen in the above forms of errors, you should always make sure that you are
    using the correct names for your objects, variables, and functions. Because such
    errors will not be shown in your web browser, as you write your **code, it is
    always a good idea to check for** the correct use of names.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 正如上面错误形式所看到的，你总是应该确保你正确地使用了对象、变量和函数的名称。因为这样的错误不会在你的网页浏览器中显示，当你编写**代码时，总是检查名称的正确使用是一个好主意**。
- en: This also includes using unique names for different variables, objects, and
    functions. Remember that JavaScript is case-sensitive; therefore do remember to
    check that you are using the correct case for your variables, objects, and functions
    as well.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 这还包括为不同的变量、对象和函数使用独特的名称。记住，JavaScript 是大小写敏感的；因此一定要记得检查你是否正确地使用了变量、对象和函数的大小写。
- en: Check for proper syntax
  id: totrans-274
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查语法是否正确
- en: Because you are using JavaScript, at least for this book you should check that
    you are using the correct syntax before you run your program. Previously, we went
    through some of the key features of the language syntax, for instance, ending
    each statement with a semi-colon, using proper and matching brackets, using correct
    or unique function names, and so on.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 因为你在使用 JavaScript，至少在这本书中，你应该在运行你的程序之前检查你是否使用了正确的语法。在此之前，我们讨论了语言语法的一些关键特性，例如，每个语句都以分号结束，使用正确和匹配的括号，使用正确或独特的函数名称等。
- en: Plan before you code
  id: totrans-276
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编码前规划
- en: Planning before the actual coding process helps to reduce the possibility of
    logic errors. This helps you to think through your program and spot obvious logic
    errors in your code. Planning can also help you to check for blind spots, such
    as missing features or functions.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际编码过程之前的规划有助于减少逻辑错误的可能性。这有助于你仔细思考你的程序，并在代码中找出明显的逻辑错误。规划还可以帮助你检查盲点，例如缺失的功能或函数。
- en: Check for correctness as you code
  id: totrans-278
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写代码时检查正确性
- en: As you write your program, it is always a good idea to check for errors as you
    complete certain portions of the code. For example, if your program consists of
    six functions, it is always wise (and less error prone) to check the correctness
    of each function. Making sure that each function that you have written is correct
    before moving to the next function is a good practice, and can save you a lot
    of trouble as you write large programs.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 在你编写程序的过程中，总是检查你在完成代码的某些部分时是否有错误是一个好主意。例如，如果你的程序由六个函数组成，总是明智（且减少错误）地检查每个函数的正确性。在移动到下一个函数之前，确保你编写的每个函数都是正确的是一个好习惯，这可以在你编写大型程序时节省你很多麻烦。
- en: Preventing errors by choosing a suitable text editor
  id: totrans-280
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过选择合适的文本编辑器来预防错误
- en: I personally believe that a suitable text editor (or IDE) is a crucial step
    in minimizing coding errors. Notice that I did not say that you need a "good"
    text editor, but rather a "suitable" text editor. This is because different programing
    languages have different features and different capabilities.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 我个人认为，一个合适的文本编辑器（或IDE）是减少编码错误的关键步骤。请注意，我没有说你需要一个“好”的文本编辑器，而是需要一个“合适”的文本编辑器。这是因为不同的编程语言有不同的特性和不同的功能。
- en: For instance, if you have programmed in Python, you will notice that you do
    not need to have the ability to check for matching brackets, because Python is
    based on code blocks (tabbing or spacing to denote blocks of code). However, in
    the case of JavaScript, you would certainly need your text editor to help you
    check for matching (or missing) brackets. Some code editors that can accomplish
    the above includes Dreamweaver (commercial) and Eclipse (free).
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您已经使用过Python编程，您会注意到您不需要具备检查匹配括号的能力，因为Python基于代码块（制表或空格来表示代码块）。然而，在JavaScript的情况下，您肯定需要您的文本编辑器帮助您检查匹配（或缺失）的括号。可以实现上述功能的代码编辑器包括Dreamweaver（商业的）和Eclipse（免费的）。
- en: 'In addition to matching brackets checking, here are some other features that
    will be useful for you when you are coding in JavaScript:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 除了匹配括号检查之外，以下是一些在您使用JavaScript编码时将为您提供帮助的其他功能：
- en: 'Auto-tabbing or spacing after keywords or matching brackets: This will help
    you in visually inspecting the code structure, and will minimize code errors.'
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 自动制表或关键字后的空格或匹配括号：这将帮助您 visually inspect 代码结构，并将减少编码错误。
- en: 'Auto-complete or auto-suggest feature: This means that as you type your code,
    the editor is smart enough to suggest to some of the words (or code) that you
    have used in your program so that you can quickly refer to them as you code. This
    is especially useful for checking user-defined variables, objects, and functions.'
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 自动完成或自动建议功能：这意味着当你输入代码时，编辑器足够智能，可以建议你程序中使用的一些单词（或代码），这样你就可以在编写代码时快速引用它们。这对于检查用户定义的变量、对象和函数特别有用。
- en: 'Syntax coloring: This will help you identify if you are misusing any keywords.
    Remember runtime errors? Runtime errors can be caused by the misuse of keywords.
    If you are using any of the keywords for user-defined variables, objects, or functions,
    syntax coloring will help you to identify this.'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 语法高亮：这将帮助您识别是否误用了任何关键字。还记得运行时错误吗？运行时错误可能由关键字的误用引起。如果您正在使用任何用户定义的变量、对象或函数的关键字，语法高亮将帮助您识别这一点。
- en: Summary
  id: totrans-287
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'Whew, we''ve covered a lot in this chapter. The bulk of the content covered
    in this chapter forms the building blocks of what we need to use in the later
    chapters. Specifically, we covered the following topics:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 哇，我们在这一章中涵盖了好多内容。本章涵盖的大部分内容构成了我们后续章节需要使用的构建块。具体来说，我们介绍了以下主题：
- en: We learnt about HTML, CSS, and JavaScript in web pages. In general, HTML provides
    the content, CSS styles the web document, and JavaScript provides the behaviour
    and interactivity for the webpage.
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们在网页中学到了HTML、CSS和JavaScript。总的来说，HTML提供内容，CSS为网络文档设置样式，JavaScript为网页提供行为和交互性。
- en: We've also learnt about the syntax of HTML, CSS, and JavaScript.
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们已经学习了HTML、CSS和JavaScript的语法。
- en: We've also learnt about the key techniques of using ID and Class selectors in
    order for CSS to refer to various HTML elements and perform stylistic operations
    on the referenced HTML element.
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们已经学习了如何使用ID和类选择器的关键技术，以便CSS能够引用各种HTML元素，并对引用的HTML元素执行样式操作。
- en: 'For JavaScript, we learnt about three important techniques for JavaScript to
    reference to HTML elements. These three techniques (or rather built-in methods)
    are: `document.getElementById(), document.getElementsByName()`, and `document.ElementsByTagName()`.'
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于JavaScript，我们学习了三种重要的技术，以便JavaScript能够引用HTML元素。这三种技术（或者说内置方法）是：`document.getElementById()`，`document.getElementsByName()`和`document.ElementsByTagName()`。
- en: Next we learnt about testing and why we need to test. In general, testing is
    to ensure that the program works correctly—that is, for the given input, we have
    the correct output. Also, testing helps to uncover syntax errors and confirm that
    the program works in the way that we intend it to work.
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来，我们学习了测试以及为什么我们需要进行测试。总的来说，测试是为了确保程序正确运行——也就是说，对于给定的输入，我们得到正确的输出。此外，测试有助于发现语法错误，并确认程序以我们预期的方式运行。
- en: We covered the types of JavaScript errors—namely loading errors, runtime errors,
    and logic errors. We've also covered some simple examples of each type of errors
    and the common causes of them.
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们讨论了JavaScript错误的类型，具体包括加载错误、运行时错误和逻辑错误。我们还讨论了每种错误类型的一些简单示例以及它们常见的原因。
- en: We covered some important tips and advice on how to write error-free code.
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们讨论了一些编写无错误代码的重要技巧和建议。
- en: Now that we have covered the basic building blocks of JavaScript testing, you
    will see how we can make use of them to perform ad hoc testing, which we will
    cover in the next chapter. You will notice some of the functions and built-in
    methods used in this chapter will be used in the next chapter.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经介绍了JavaScript测试的基本构建块，你将看到我们如何利用它们来执行即兴测试，这将在下一章中介绍。你会注意到本章中使用的一些函数和内置方法将在下一章中使用。
