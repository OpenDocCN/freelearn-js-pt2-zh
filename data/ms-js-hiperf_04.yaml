- en: Chapter 4. Detecting Performance
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。检测性能
- en: In this chapter, we'll cover our work environment and the tools needed; we will
    also cover the features and JavaScript optimization tools found in the Google
    Chrome Web Inspector, and create some test samples that show us how to use and
    test JavaScript and HTML page code.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍我们的工作环境以及所需的工具；我们还将介绍Google Chrome Web检查器中的功能和JavaScript优化工具，并创建一些测试样本，展示如何使用和测试JavaScript和HTML页面代码。
- en: 'We will cover the following topics in the chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章涵盖以下主题：
- en: Web Inspectors in general
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一般的Web检查器
- en: The Elements panel
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 元素面板
- en: The Network panel
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络面板
- en: The Timeline panel
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 时间线面板
- en: The Profile panel
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置文件面板
- en: The Resources panel
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源面板
- en: The Audits panel
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 审计面板
- en: The Console panel
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制台面板
- en: Web Inspectors in general
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一般的Web检查器
- en: Before diving in to an in-depth exploration of Chrome's Web Inspector, it's
    important to note that there are many different Web Inspectors for different web
    browsers, typically developed by the browser's vendor for debugging a web page's
    application content and performance.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入探索Chrome的Web检查器之前，重要的是要注意，有许多不同的Web检查器用于不同的网络浏览器，通常由浏览器的供应商开发，用于调试网页的应用内容和性能。
- en: It's important to understand that, for developers to properly debug a web application,
    they should use the inspector designed for the browser with a detected issue.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要理解，为了使开发者能够正确地调试Web应用程序，他们应该使用检测到问题的浏览器的检查器。
- en: The Safari Web Inspector
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Safari Web检查器
- en: Apple's Web Inspector is a WebKit-based inspector built for Safari. The Web
    Inspector is built pretty similar to Chrome's Web Inspector. We will cover more
    on the Safari **Web Inspector** later in [Chapter 9](ch09.html "Chapter 9. Optimizing
    JavaScript for iOS Hybrid Apps"), *Optimizing JavaScript for iOS Hybrid Apps*,
    mainly because Safari's **Web Inspector** can debug web content in iOS development.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Apple的Web检查器是基于WebKit的检查器，为Safari而建。Web检查器与Chrome的Web检查器非常相似。我们将在[第9章](ch09.html
    "第9章。为iOS混合应用优化JavaScript")，*为iOS混合应用优化JavaScript*中更详细地介绍Safari **Web检查器**，主要是因为Safari的**Web检查器**可以在iOS开发中调试Web内容。
- en: 'Apple has pretty comprehensive documentation on its tools at [https://developer.apple.com/safari/tools/](https://developer.apple.com/safari/tools/)
    and shown in the next screenshot:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Apple对其工具的文档相当全面，网址为[https://developer.apple.com/safari/tools/](https://developer.apple.com/safari/tools/)，如下次截图所示：
- en: '![The Safari Web Inspector](img/7296OS_04_01.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![Safari Web检查器](img/7296OS_04_01.jpg)'
- en: Firefox Developer tools
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Firefox开发者工具
- en: Mozilla's Firefox web browser also has its own inspector. Originally Firefox
    was the only browser with an inspector; it was called Firebug, was developed as
    a plugin, and was not included with the main browser.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Mozilla的Firefox网络浏览器也有自己的检查器。最初，Firefox是唯一带有检查器的浏览器；它被称为Firebug，作为插件开发，并未包含在主浏览器中。
- en: Since the advent of Firefox 3, Mozilla developed its own browser inspector not
    just for their own browser but also as a debug tool for Firefox OS, Mozilla's
    mobile OS that uses HTML5 for application development. Firefox **Developer** tools
    also allow debugging for fairly new and even experimental forms of HTML5 and JavaScript
    development.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 自从Firefox 3问世以来，Mozilla不仅为其自己的浏览器开发了浏览器检查器，而且还作为Firefox OS的调试工具，Firefox OS是Mozilla的移动操作系统，使用HTML5进行应用程序开发。Firefox
    **开发者**工具还允许对相对较新甚至实验性的HTML5和JavaScript开发进行调试。
- en: 'We can check out more information on the types of developers that the Firefox
    **Developer** tools allow for at Mozilla''s Developer Network at [https://developer.mozilla.org/en-US/docs/Tools](https://developer.mozilla.org/en-US/docs/Tools),
    as shown in the next screenshot:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在Mozilla的开发者网络[https://developer.mozilla.org/en-US/docs/Tools](https://developer.mozilla.org/en-US/docs/Tools)上找到更多关于Firefox
    **开发者**工具允许的开发者类型的信息，如下次截图所示：
- en: '![Firefox Developer tools](img/7296OS_04_02.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![Firefox开发者工具](img/7296OS_04_02.jpg)'
- en: Internet Explorer developer tools
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Internet Explorer开发者工具
- en: In the past, Internet Explorer was considered the black sheep in the web developer's
    toolbox. Before the advent of Internet Explorer 11, Microsoft offered a simple
    DOM inspector plugin for Internet Explorer version 6 and above; though it was
    very helpful for Internet Explorer's browser issue, its feature set lacked behind
    other vendors' inspector tools.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去，Internet Explorer被认为是网络开发者工具箱中的黑羊。在Internet Explorer 11问世之前，微软为Internet
    Explorer 6及以上版本提供了一个简单的DOM检查器插件；虽然它对Internet Explorer的浏览器问题非常有帮助，但其功能集落后于其他供应商的检查工具。
- en: 'Since the release of Internet Explorer 11, Microsoft is positioning itself
    to support HTML development more than it did in the past, and its new **F12 developer
    tools** do just that. Most of the features found in the **F12 developer tools**
    are found just as good as Chrome''s **Developer tools** and Safari''s **Web Inspector**,
    with more releases anticipated in future. We can read more on how to use those
    tools at [http://msdn.microsoft.com/en-us/library/ie/bg182326(v=vs.85).aspx](http://msdn.microsoft.com/en-us/library/ie/bg182326(v=vs.85).aspx),
    as shown in the next screenshot:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 自从Internet Explorer 11发布以来，微软正定位自己支持HTML开发超过过去的力度，其新的**F12开发者工具**正是如此。**F12开发者工具**中的大多数功能与Chrome的**开发者工具**和Safari的**网络检查器**一样好，随着更多的发布，预计未来会有更多的功能。我们可以阅读更多关于如何使用这些工具的信息在[http://msdn.microsoft.com/en-us/library/ie/bg182326(v=vs.85).aspx](http://msdn.microsoft.com/en-us/library/ie/bg182326(v=vs.85).aspx)，如图下一个屏幕截图所示：
- en: '![Internet Explorer developer tools](img/7296OS_04_03.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![Internet Explorer开发者工具](img/7296OS_04_03.jpg)'
- en: Chrome's Developer tools
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Chrome的开发者工具
- en: Chrome's Inspector was originally developed using the open-source WebKit browser's
    Web Inspector, which was also used at one point in Apple's Safari. Later, when
    Chrome decided to fork WebKit into their own browser runtime called Blink, Google
    rebuilt the Inspector for Blink from the ground up, optimizing the user interface
    and adding features not found in the open source Webkit Inspector.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Chrome的检查器最初是使用开源WebKit浏览器的Web检查器开发的，该检查器在某个时候也被苹果的Safari使用。后来，当Chrome决定将WebKit分叉为称为Blink的自家浏览器运行时，Google从零开始为Blink重建了检查器，优化了用户界面并添加了在开源Webkit检查器中找不到的功能。
- en: Another reason for rebuilding the inspector was the introduction of Chrome for
    Android and Chrome OS applications. This allows developers to access JavaScript-based
    console objects specific to development on those platforms. It also features tools
    to optimize responsive content, and debug mobile content without being on a device.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 重建检查器的另一个原因是Chrome for Android和Chrome OS应用的引入。这允许开发人员访问特定于那些平台上的JavaScript基础控制台对象。它还提供优化响应式内容的功能，以及在设备上不存在的移动内容调试工具。
- en: Because of the rich features mentioned here, we will cover how to use the Web
    Inspector for Chrome. If you're concerned about knowing a feature on another inspector,
    refer to the previously mentioned links and research a topic listed in this chapter.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这里提到的丰富功能，我们将介绍如何为Chrome使用网络检查器。如果你关心了解另一个检查器的功能，请参考前面提到的链接并研究本章列出的主题。
- en: 'Lastly, Chrome''s update cycle for new features is pretty frequent and even
    more so for its beta version of Chrome called Chrome Canary, which is essentially
    Chrome with experimental features enabled including any early speed improvements
    for Blink. You can download Canary at [https://www.google.com/intl/en/chrome/browser/canary.html](https://www.google.com/intl/en/chrome/browser/canary.html),as
    shown in the next screenshot:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，Chrome的新功能更新周期相当频繁，尤其是其名为Chrome Canary的Chrome测试版本，它本质上启用了任何早期速度提升的实验性功能的Chrome。您可以在[https://www.google.com/intl/en/chrome/browser/canary.html](https://www.google.com/intl/en/chrome/browser/canary.html)下载Canary，如图下一个屏幕截图所示：
- en: '![Chrome''s Developer tools](img/7296OS_04_04.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![Chrome的开发者工具](img/7296OS_04_04.jpg)'
- en: Chromium's **Developer tools** include many more advanced features typically
    found in Firefox **Developer** tools. For this chapter, I'll be using the default
    Chrome **Developer tools**, but please check out Chromium's **Developer tools**
    as well to stay informed on what's available in the future.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**Chromium的开发者工具**包含了许多更高级的功能，这些功能通常在Firefox的**开发者工具**中可以找到。在本章中，我将使用Chrome的默认**开发者工具**，但请也查看Chromium的**开发者工具**，以了解未来将提供哪些功能。'
- en: 'Check out [https://developer.chrome.com/devtools](https://developer.chrome.com/devtools)
    for **Chrome DevTools Overview**, as shown in the next screenshot:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[https://developer.chrome.com/devtools](https://developer.chrome.com/devtools)了解**Chrome开发者工具概览**，如图下一个屏幕截图所示：
- en: '![Chrome''s Developer tools](img/7296OS_04_05.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![Chrome的开发者工具](img/7296OS_04_05.jpg)'
- en: Getting familiar with Chrome's Developer tools
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 熟悉Chrome的开发者工具
- en: To install Chrome's **Developer tools**, download chrome from [http://www.chrome.com/](http://www.chrome.com/),
    and that's it! Chrome's **Developer tools** are included with Chrome with no extra
    installation needed.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Chrome的**开发者工具**，从[http://www.chrome.com/](http://www.chrome.com/)下载Chrome，就这样！Chrome的**开发者工具**随Chrome一起提供，无需额外的安装。
- en: 'First, open a new window in Chrome and type `about:blank` in the omnibox (or
    the address bar). Next, let''s open up the **Developer tools** by using the keystrokes
    *Ctrl* + *Shift* + *I* (or *Command* + *Option* + *I* on the Mac). We should see
    a blank screen with **Developer tools** showing up, as shown in the next screenshot:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在Chrome中打开一个新窗口并输入`about:blank`在 Omnibox（或地址栏）中。接下来，使用快捷键*Ctrl* + *Shift*
    + *I*（或在Mac上的*Command* + *Option* + *I*）打开**开发者工具**。我们应该看到一个空白屏幕，**开发者工具**显示在上方，如下面的屏幕截图所示：
- en: '![Getting familiar with Chrome''s Developer tools](img/7296OS_04_06.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![熟悉Chrome的开发者工具](img/7296OS_04_06.jpg)'
- en: By default, Chrome's **Developer tools** will either be displayed in dock mode,
    as shown before, or in its own window; if you want to undock or redock the **Developer
    tools**, select the dock button.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Chrome的**开发者工具**将以工具栏模式显示，如前所示，或者在自己的窗口中；如果你想要解挂或重新挂起**开发者工具**，选择工具栏按钮。
- en: 'Holding down the dock button allows us to dock the **Developer tools** to the
    side of the browser window. You can find the dock button flagged in the following
    screenshot:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 按下工具栏按钮可以让我们将**开发者工具**挂接到浏览器窗口的侧面。你可以找到以下屏幕截图中标志的工具栏按钮：
- en: '![Getting familiar with Chrome''s Developer tools](img/7296OS_04_07.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![熟悉Chrome的开发者工具](img/7296OS_04_07.jpg)'
- en: The **Developer tools** are broken up into different panels, that are shown
    at the top of the window, each panel containing different features and debugging
    options for a web application. We will focus on the JavaScript-specific panels,
    but we will cover each panel briefly for anyone who's not so familiar with them.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**开发者工具**分为不同的面板，显示在窗口顶部，每个面板包含不同的功能和Web应用程序的调试选项。我们将重点关注JavaScript特定的面板，但我们会简要介绍每个面板，以便不熟悉它们的人了解。'
- en: The Elements panel
  id: totrans-44
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 元素面板
- en: 'The **Elements** panel displays both the HTML page''s source code and DOM Explorer,
    allowing developers to inspect changes in the DOM. We can highlight elements by
    either placing the mouse over the DOM tree, or by using the magnifying lens as
    indicated in the following screenshot:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**元素**面板显示HTML页面的源代码和DOM浏览器，允许开发人员检查DOM的变化。我们可以通过将鼠标悬停在DOM树上，或者按照以下屏幕截图中指示使用放大镜来高亮显示元素：'
- en: '![The Elements panel](img/7296OS_04_08.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![元素面板](img/7296OS_04_08.jpg)'
- en: The Network panel
  id: totrans-47
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 网络面板
- en: 'The **Network** panel displays page download speeds of all the resources and
    the code it contains. Let''s test this out by going to [http://www.packtpub.com/](http://www.packtpub.com/)
    and opening the **Network** panel (located right next to **Elements**). Click
    the record button on the top left of the panels as shown in the following screenshot:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**网络**面板显示页面下载速度的所有资源及其包含的代码。让我们通过访问[http://www.packtpub.com/](http://www.packtpub.com/)并打开**网络**面板（位于**元素**旁边）来测试一下。按照以下屏幕截图所示，点击面板左上角的录制按钮：'
- en: '![The Network panel](img/7296OS_04_09.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![网络面板](img/7296OS_04_09.jpg)'
- en: Now, let's refresh the page with the record button on. We can see which page
    resources are taking longer to load in our web page. This is important when considering
    loading resources in JavaScript. If we target an element or a script that doesn't
    yet exist in our DOM, an error could occur.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们刷新页面并按记录按钮。我们可以看到网页上的哪些页面资源需要更长时间来加载。在考虑用JavaScript加载资源时，这是很重要的。如果我们针对DOM中尚不存在的元素或脚本，可能会发生错误。
- en: If we take a look at the following screen, we can see that the `blog-banner.png`
    graphic is taking the longest time to load on [http://www.packtpub.com/](http://www.packtpub.com/).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们看下面的屏幕，我们可以看到在[http://www.packtpub.com/](http://www.packtpub.com/)上，`blog-banner.png`图像的加载时间最长。
- en: '![The Network panel](img/7296OS_04_10.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![网络面板](img/7296OS_04_10.jpg)'
- en: We can also select a resource as well; let's click on one of the image resources.
    (I'll choose `blog-banner.png`, this may or may not exist on your page. If you
    are testing on first load, give the site a few moments to load). When we select
    it, we can see a new sub-panel appear showing a preview of the image if it's a
    graphic or the source code if it's a JavaScript or JSON file.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以选择一个资源；让我们点击其中一个图像资源。（我会选择`blog-banner.png`，这可能在你的页面上存在也可能不存在。如果你在首次加载时测试，给网站几秒钟加载的时间）。当我们选择它时，我们可以看到一个新的子面板出现，如果它是一个图形，则显示图像预览；如果它是一个JavaScript或JSON文件，则显示源代码。
- en: 'We also have tabs in the subpanel, one of which is called **Response**. This
    gives information to POST event resources found by DevTools. We also have a tab
    called **Headers**. The **Headers** tab displays request information for that
    file, including (more importantly) whether the image uses any server-side caching.
    In this case, our `blog-banner.png` file has a `Cache-control: max-age` value
    indicating a maximum cache age of `3153600000` seconds or ten years. We can also
    see the full `Request URL` noting that it''s using a `cloudfront.net` URL, so
    we can infer that the image is using Amazon S3 for caching and distribution, as
    shown for both in the following screenshot:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '我们在子面板中也有标签页，其中一个叫做**响应**。这提供了由DevTools找到的POST事件资源的信息。我们还有一个叫做**头信息**的标签页。**头信息**标签页显示对该文件的请求信息，包括（更重要的是）图像是否使用任何服务器端缓存。在此例中，我们的`blog-banner.png`文件有一个`Cache-control:
    max-age`值，表示最大缓存年龄为`3153600000`秒，即十年。我们还可以看到完整的`请求URL`，注意到它使用了一个`cloudfront.net`
    URL，因此我们可以推断出图像使用亚马逊S3进行缓存和分发，如下所示的两个截图所示：'
- en: '![The Network panel](img/7296OS_04_11.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![网络面板](img/7296OS_04_11.jpg)'
- en: The Sources panel
  id: totrans-56
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 源代码面板
- en: 'Here we are going to learn about the **Sources** panel, with the help of the
    following aspects:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在此我们将学习关于**源代码**面板的内容，通过以下几个方面来帮助理解：
- en: Debugger basic usage
  id: totrans-58
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 调试器基本用法
- en: 'The **Sources** panel is home to most JavaScript developers; it''s where we
    debug our JavaScript applications. Using it is pretty simple; click the pause
    button up on the top left section right near the **Watch Expressions** option,
    as shown in the following screenshot:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**源代码**面板是大多数JavaScript开发者的家园；这是我们调试JavaScript应用程序的地方。使用它相当简单；点击左上角附近**监视表达式**选项的上暂停按钮，如下所示的截图：'
- en: '![Debugger basic usage](img/7296OS_04_12.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![调试器基本用法](img/7296OS_04_12.jpg)'
- en: Testing the debugger
  id: totrans-61
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 测试调试器
- en: 'Let''s try out the debugger. Open the `01` folder inside the `Chapter_4` folder,
    in our `Exercise_Files` folder in the code bundle provided by Packt Publishing''s
    website. Inside it, we can see a very simple code sample, and we also have an
    HTML5 `index.html` page, which looks like the following screenshot in our source
    view:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试使用调试器。打开我们代码包中Packt Publishing网站提供的`Chapter_4`文件夹内的`01`文件夹。在其中，我们可以看到一个非常简单的代码示例，我们还有一个HTML5的`index.html`页面，如下所示的源代码视图：
- en: '![Testing the debugger](img/7296OS_04_13.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![测试调试器](img/7296OS_04_13.jpg)'
- en: We can see that we have a very empty web page with some styling added for the
    body tag; we've also added a `main.js` external JavaScript file handling all of
    our page logic. What we are going to do here is inspect a function with a `while`
    loop inside.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，我们有一个非常空的网页，给`body`标签添加了一些样式；我们还添加了一个`main.js`外部JavaScript文件，处理我们页面的所有逻辑。我们接下来要做的就是检查一个包含`while`循环的函数。
- en: 'The loop will append the `document.body` tag with the `paragraphTag` variable,
    each with an index variable called as a global variable named `my_integer` outside
    the `while` loop, which is contained in a `loopingTo5k()` function`.` This is
    called on line 14, where it is being triggered by a `window.onload` event, as
    shown in the next screenshot displaying the `main.js` source view:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 循环将在`document.body`标签中添加`paragraphTag`变量，每个变量都有一个名为全局变量`my_integer`的索引变量，该变量位于`while`循环外的`loopingTo5k()`函数中。这在第14行被调用，由一个`window.onload`事件触发，如下所示的下一个截图显示了`main.js`的源代码视图：
- en: '![Testing the debugger](img/7296OS_04_14.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![测试调试器](img/7296OS_04_14.jpg)'
- en: With our source code in place, let's go ahead and run our page in Chrome with
    our **Sources** panel open. If we look at the screen, we can see a set of numbers
    moving down the page in a sequential order ending at **5000** on the last line
    of the document.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 有了我们的源代码，让我们在Chrome中打开**源代码**面板运行我们的页面。如果我们看屏幕，我们可以看到一串数字按顺序向下移动，最后在文档的最后一行结束于**5000**。
- en: 'Let''s select the `main.js` file in our **Sources** panel, add a breakpoint
    to line 8 of our source code, and see what the **Sources** panel can do. Now with
    our breakpoint set, let''s refresh the page. When we do this, we can see the page
    graying out with a note in yellow at the top indicating that we are paused in
    our debugger, and line #8 in our `main.js` file is highlighted in blue, noting
    where the debugger paused.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在我们的**源代码**面板上选择`main.js`文件，为我们的源代码第8行添加一个断点，看看**源代码**面板能做什么。现在我们设置了断点，让我们刷新页面。当我们这样做时，我们可以看到页面变灰，顶部有一个黄色注释，表示我们在调试器中暂停，我们`main.js`文件中的第#8行用蓝色高亮，表示调试器暂停的位置。
- en: We can also see the **Scope Variables** option, which shows all the properties
    and objects of a given scope at the time of execution; in this case, the scope
    is inside the `loopingTo5k()` function. To get more information, we can refer
    to the right section of the **Sources** panel and look at the Local tree for information,
    or we can mouse over the objects in our code file for more information. As shown
    in the following screenshot, I've highlighted the `document.body` object in my
    function's scope, creating a new paragraph object in JavaScript.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以看到**作用域变量**选项，它显示了给定作用域在执行时的所有属性和对象；在这个例子中，作用域在`loopingTo5k()`函数内部。为了获取更多信息，我们可以参考**源代码**面板的右侧部分，查看局部树以获取信息，或者我们可以在我们的代码文件中悬停鼠标以获取更多信息。如以下所示，我在我的函数作用域中突出了`document.body`对象，在JavaScript中创建了一个新的段落对象。
- en: '![Testing the debugger](img/7296OS_04_15.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![测试调试器](img/7296OS_04_15.jpg)'
- en: When we're finished with debugging, we can press the play button highlighted
    blue in the **Sources** panel, or we can **Step Over** our function via the control
    next to the play button and move on to our next function. Keep in mind that, if
    we have any further breakpoints, they will break further down the source file
    in our web page. To remove breakpoints, we can drag them off our line number column
    and press play to resume without debugging.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们完成调试时，我们可以按下**源代码**面板中突出显示的蓝色播放按钮，或者我们可以通过播放按钮旁边的控件**单步跳过**我们的函数，然后继续下一个函数。请记住，如果我们有进一步的断点，它们将会在我们网页中的源文件中更远的地方断开。要删除断点，我们可以将它们拖离我们的行号列，然后按下播放按钮，继续不进行调试。
- en: Using the debugger keyword
  id: totrans-72
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 使用调试器关键字
- en: A little known feature in JavaScript programming is the **debugger** keyword;
    it's a very simple helper function. When running code, it will trigger the **Sources**
    panel or another JavaScript debugger connected to break automatically; this is
    helpful when going over large code bases or having trouble breaking on a certain
    line.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript编程中，一个鲜为人知的特性是**调试器**关键字；它是一个非常简单的助手函数。当运行代码时，它会触发**源代码**面板或其他连接的JavaScript调试器自动断开；这在审查大量代码库或在特定行上遇到问题时非常有帮助。
- en: Let's say that, in our example code thus far, we had a while loop, causing an
    issue with our code at the `555` iteration of `my_integer`. If we had to step
    through this, it would take 555 presses of the play button to get there. However,
    there is a way around this.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 假设在我们的示例代码中，有一个while循环，导致在`my_integer`的`555`次迭代时我们的代码出现问题。如果我们不得不逐步执行这个，这将需要按下555次播放按钮才能到达那里。然而，有一个解决办法。
- en: 'To demonstrate this, I''ve set up a copy of these source files and saved them
    in the `02` folder in the code bundle provided to you through Packt Publishing''s
    website under the `Chapter_03` folder in the `Exercise_Files` folder. I''ve only
    made one change here in the code: adding a conditional `if` statement on lines
    12 through 14, ensuring `my_integer` is equal to `555`. If that is applied, I
    would call the debugger by simply writing `debugger` with a semicolon to end the
    line, as shown in the following screenshot:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示这一点，我在代码包中保存了一个这些源文件的副本，并将其保存在Packt Publishing网站提供的`02`文件夹中，在`第3章`文件夹中的`练习文件`文件夹中。我在这里的代码中只做了一个改动：在12至14行中添加了一个条件`if`语句，确保`my_integer`等于`555`。如果应用此更改，我可以通过简单地写一个带有分号的`debugger`来调用调试器，如下所示：
- en: '![Using the debugger keyword](img/7296OS_04_16.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![使用调试器关键字](img/7296OS_04_16.jpg)'
- en: 'Now calling `debugger` is easy. Let''s load our `index.html` file again with
    our debugger code, and here we can see that, without setting a breakpoint, our
    **Sources** panel automatically detects the line and sets the breakpoint without
    iterating through each loop (as shown in the following screenshot):'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在调用`debugger`变得简单了。让我们再次加载带有调试器代码的我们的`index.html`文件，这里我们可以看到，在不设置断点的情况下，我们的**源代码**面板自动检测到行并设置了断点，而没有遍历每个循环（如下所示）：
- en: '![Using the debugger keyword](img/7296OS_04_17.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![使用调试器关键字](img/7296OS_04_17.jpg)'
- en: The Timeline panel
  id: totrans-79
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 时间线面板
- en: 'Here, we are going to learn about the **Timeline** panel with the help of the
    following aspects:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将通过以下方面来学习**时间线**面板：
- en: Using the Timeline panel
  id: totrans-81
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 使用时间线面板
- en: The **Timeline** panel allows us to detect the overall web page performance
    with respect to JavaScript; it also allows us to inspect browser rendering events.
    To use the **Timeline** panel, all we need to do is click the record button and
    reload the page in Chrome.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '**时间线**面板允许我们检测与JavaScript相关的整个网页性能；它还允许我们检查浏览器渲染事件。要使用**时间线**面板，我们只需要点击录制按钮，然后在Chrome中重新加载页面。'
- en: 'In the **Timeline** inspector, there are four types of events that the **Timeline**
    panel shows. These are **Loading**, **Scripting**, **Rendering**, and **Painting**
    events. I''ve loaded the example file (`02`), discussed in an earlier section,
    showing the events running through the **Timeline** panel, as seen in the following
    screenshot:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在**时间线**检查器中，**时间线**面板显示了四种类型的事件。这些是**加载**、**脚本**、**渲染**和**绘制**事件。我已经加载了前面章节中讨论的示例文件（`02`），展示了事件如何通过**时间线**面板运行，如下面的屏幕截图所示：
- en: '![Using the Timeline panel](img/7296OS_04_18.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![使用时间线面板](img/7296OS_04_18.jpg)'
- en: The Loading event
  id: totrans-85
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 加载事件
- en: The **Loading** event handles requests and responses; typically these are loading
    external scripts and files as well as `POST` requests for data leaving the page.
    Loading events also include the initial parsing of HTML code. In Google Chrome's
    **Timeline**, these show up in blue.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '**加载**事件处理请求和响应；通常这些事件包括加载外部脚本和文件以及页面数据离开时的`POST`请求。加载事件还包括HTML代码的初始解析。在Google
    Chrome的**时间线**中，这些事件显示为蓝色。'
- en: The Scripting event
  id: totrans-87
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**脚本**事件'
- en: The **Scripting** event occurs when the browser reads and interprets JavaScript
    code. In the **Timeline** panel, you can expand a **Scripting** event and see
    at what point a function was received in the browser. **Scripting** events appear
    as yellow lines in Google Chrome.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**脚本**事件发生在浏览器读取和解释JavaScript代码时。在**时间线**面板中，您可以展开一个**脚本**事件，并查看函数在浏览器中接收的时间点。在Google
    Chrome中，**脚本**事件显示为黄色线条。'
- en: The Rendering event
  id: totrans-89
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 渲染事件
- en: The **Rendering** event occurs when image files and scripts affect the DOM;
    this can be when an image is loaded without a size specified in an `image` tag,
    or if a JavaScript file updates the CSS of a page after the page is loaded.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**渲染**事件发生在图像文件和脚本影响DOM时；这可以是在`image`标签中没有指定大小的图像被加载时，或者在页面加载后JavaScript文件更新页面CSS时。'
- en: The Painting event
  id: totrans-91
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 绘制事件
- en: The **Painting** event is the last type of events and typically is used in updating
    the UI. Unlike **Rendering** event, the **Painting** event occurs when the browser
    redraws an image on the screen. For desktop JavaScript development, **Painting**
    events aren't usually a concern, but become strongly concerning when we start
    looking at mobile web browsers.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**绘制**事件是最后一种类型的事件，通常用于更新UI。与**渲染**事件不同，**绘制**事件发生在浏览器在屏幕上重新绘制图像时。对于桌面JavaScript开发来说，**绘制**事件通常不是问题，但在我们开始关注移动网页浏览器时，这个问题就变得非常严重了。'
- en: Typically the **Painting** event is forced when an element's display is updated
    from its original. They can also be triggered by updates to an element, such as
    an element's `top` or `left` positioning.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当元素的显示从原始状态更新时，会强制执行**绘制**事件。它们也可以由元素更新触发，例如元素的`top`或`left`定位。
- en: The Profile panel
  id: totrans-94
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**配置文件**面板'
- en: The **Profile** panel helps a developer analyze a web page's CPU profile and
    take heap snapshots of the JavaScript used. A CPU profile snapshot is helpful
    when it comes to checking large complex applications to see what files may cause
    issues in terms of object size.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**配置文件**面板帮助开发者分析网页的CPU配置文件，并拍摄JavaScript使用的堆快照。CPU配置文件快照在检查大型复杂应用程序时很有帮助，可以查看哪些文件可能会在对象大小方面引起问题。'
- en: A JavaScript heap snapshot is a compiled list of objects found in the page's
    overall JavaScript. This includes not only the code written by us, but also the
    code built into the browser, such as the document or console objects, giving an
    overall list of all possible objects in an application.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript堆快照是一份编译的页面整体JavaScript中找到的对象清单。这不仅包括我们编写的代码，还包括浏览器内置的代码，如文档或控制台对象，给出了应用程序中所有可能的对象的总体列表。
- en: 'Using the **Profile** panel is similar to the **Timeline** panel; select either
    the **Take Heap Snapshot** or the **Collect JavaScript CPU Profile** option, and
    then click **Start**, followed by reloading the page. In the following screenshot,
    I have selected the **Collect JavaScript CPU Profile** option:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 使用**配置文件**面板与**时间线**面板类似；选择**拍摄堆快照**或**收集JavaScript CPU配置文件**选项，然后点击**开始**，接着重新加载页面。在下面的屏幕截图中，我选择了**收集JavaScript
    CPU配置文件**选项：
- en: '![The Profile panel](img/7296OS_04_19.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![Profile面板](img/7296OS_04_19.jpg)'
- en: The Resources panel
  id: totrans-99
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 资源面板
- en: The **Resources** panel lists all files associated with the web page being viewed
    in the **Developer tools** option, each of which can be sorted by the type of
    file; developers can individually view each file. It also shows images on the
    page along with their information such as **Dimensions**, **File size**, **MIME
    type**, and source **URL**.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**资源**面板列出了与正在查看的网页相关的所有文件，这些文件可以通过**开发者工具**选项进行排序；开发者可以单独查看每个文件。它还显示页面上的图像以及它们的属性，如**尺寸**、**文件大小**、**MIME类型**和源**URL**。'
- en: More importantly, the **Resources** panel is home to any browser data storage,
    which includes **Web SQL**, **IndexedDB, Local Storage**, **Session Storage**,
    and **Cookies**. Users can look at a page's **Key**-**Value** pair values in the
    browser's storage data. This is helpful in testing storage state and store values
    in JavaScript code.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 更重要的是，**资源**面板是浏览器数据存储的所有内容的家，包括**Web SQL**、**IndexedDB**、**本地存储**、**会话存储**和**Cookies**。用户可以在浏览器的存储数据中查看页面的**键**-**值**对值。这对于测试存储状态和在JavaScript代码中存储值非常有帮助。
- en: 'Viewing the Key-Value pairs is easy; in the **Resources** panel, select the
    storage type and take a look at the key values table, as shown in the following
    screenshot using Packt Publishing''s website while viewing local storage:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '查看键值对很容易；在**资源**面板中，选择存储类型并查看键值表，如下所示 screenshot using Packt Publishing''s
    website while viewing local storage:'
- en: '![The Resources panel](img/7296OS_04_20.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![资源面板](img/7296OS_04_20.jpg)'
- en: The Audits panel
  id: totrans-104
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 审计面板
- en: Here, we are going to learn about the **Audits** panel, with the help of the
    following aspects.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将通过以下方面了解**审计**面板。
- en: Interacting with the Audits panel
  id: totrans-106
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 与Audits面板交互
- en: 'The **Audits** panel *audits* the full web page''s application **Network Utilization**
    and overall **Web Page Performance**; this is one of the easier to use and more
    straightforward panels in the **Developer tools** options provided by the browser.
    Using the **Audits** panel is easy as well. First, open up Packt Publishing''s
    website again, select the **Audits** panel using the **Developer tools** option,
    and then check the **Select All** option; this will test network speeds and the
    overall web page performance. Lastly, be sure to set the radio button **Reload
    Page and Audit on Load**, prior to clicking the **Run** button. This will ensure
    that the audit test checks for network usage properly rather than a cached state,
    just as its shown in the following screenshot:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**审计**面板*审计*整个网页的应用程序**网络利用率**和整体**网页性能**；这是浏览器提供的**开发者工具**选项中更容易使用和更直观的面板之一。使用**审计**面板也很简单。首先，再次打开Packt出版社的网站，使用**开发者工具**选项选择**审计**面板，然后检查**选择所有**选项；这将测试网络速度和整体网页性能。最后，确保在点击**运行**按钮之前将单选按钮设置为**重新加载页面并在加载时进行审计**。这将确保审计测试正确地检查网络使用情况，而不是缓存状态，正如以下屏幕截图所示：'
- en: '![Interacting with the Audits panel](img/7296OS_04_21.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![与Audits面板交互](img/7296OS_04_21.jpg)'
- en: Getting Suggestions for JavaScript quality
  id: totrans-109
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 获取JavaScript质量建议
- en: 'If we''re only checking for JavaScript performance, uncheck the **Network Utilization**
    option and run the test as well; we need to keep this in mind if we''re testing
    for a specific point in our application. We will need to switch the radio button
    to **Audit Present State**, and click **Run** to get suggestions for the current
    state of the web application. Let''s run the test on [https://www.packtpub.com/](https://www.packtpub.com/),
    and then select the file under **Results**. Let''s take a look at the performance
    improvement suggestions as shown in the following screenshot:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们只检查JavaScript性能，请取消选中**网络利用率**选项并运行测试；如果我们正在为应用程序的特定点进行测试，我们需要记住这一点。我们需要将单选按钮切换到**审计当前状态**，然后点击**运行**以获取Web应用程序当前状态的建议。让我们在[https://www.packtpub.com/](https://www.packtpub.com/)上运行测试，然后在**结果**下选择文件。让我们查看以下屏幕截图中显示的性能改进建议：
- en: '![Getting Suggestions for JavaScript quality](img/7296OS_04_22.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![获取JavaScript质量建议](img/7296OS_04_22.jpg)'
- en: If we look closely, we can see very readable suggestions, with respect to our
    page's JavaScript code, affecting the overall page performance. In this case,
    the audit has detected 3 inline scripts and recommends moving the inline scripts
    to improve performances. There is also feedback on how many CSS rules included
    in the page are not used (on this page at least). It also tells us whether vendor
    prefixes are being used in CSS and not web standard properties. All of these suggestions
    are very helpful.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们仔细观察，可以看到非常易读的建议，这些建议与我们页面的JavaScript代码有关，影响整个页面的性能。在这种情况下，审核检测到3个内联脚本，并建议将内联脚本移动以提高性能。还提供了有关页面中包含的CSS规则中有多少未使用（至少在这个页面上）的反馈。它还告诉我们CSS中是否使用了供应商前缀，而没有使用网络标准属性。所有这些建议都非常有帮助。
- en: The Console panel
  id: totrans-113
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 控制台面板
- en: 'The last out-of-the-box panel is the **Console** panel. It''s the simplest
    panel here, but it''s also where developers on JavaScript spend most of their
    time. Now my assumption is that we''re fairly familiar with the **Console** panel
    at this point, so I won''t deep dive into this panel too much. We can test code
    in the console and search for objects, DOM elements, and attributes in a page.
    For instance, let''s say I type the following into the console while on Packt
    Publishing''s website:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个开箱即用的面板是**控制台**面板。这是这里最简单的面板，但也是JavaScript开发者花费最多时间的面板。现在我的假设是我们对这个面板已经相当熟悉了，所以我不会深入讲解这个面板。我们可以在控制台中测试代码，并在页面中搜索对象、DOM元素和属性。例如，假设我在Packt
    Publishing的网站上输入以下内容到控制台：
- en: '[PRE0]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This should return a JavaScript array on the next line showing all the classes
    available to us, and it does show one having `with-logo` as the class name, as
    shown in the following screenshot:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该在下一行返回一个JavaScript数组，显示我们可以使用的所有类名，并且它确实显示了一个名为`with-logo`的类名，如下面的屏幕截图所示：
- en: '![The Console panel](img/7296OS_04_23.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![控制台面板](img/7296OS_04_23.jpg)'
- en: The **Console** panel and the **Console** API in Chrome are constantly evolving
    in terms of features in Chrome's **Developer tools**. To keep up with some of
    the newer tools, check out the Chrome's DevTools Console API page available at
    [https://developer.chrome.com/devtools/docs/console](https://developer.chrome.com/devtools/docs/console),
    which shows how to use the console for custom outputs such as `console.table()`
    and `console.profile()` to make developing in the console much easier.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '**控制台**面板和Chrome中的**控制台**API在Chrome的**开发者工具**中功能不断进化。为了跟上一些新工具的步伐，请查看Chrome的DevTools控制台API页面，该页面位于[https://developer.chrome.com/devtools/docs/console](https://developer.chrome.com/devtools/docs/console)，展示了如何使用控制台进行自定义输出，例如`console.table()`和`console.profile()`，使在控制台中的开发变得更加容易。'
- en: Summary
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we explored the base panels that come with the consumer version
    of the Google Chrome **Developer tools**; many of these tools carry over to other
    inspectors and developer tools (this was also covered earlier in the chapter).
    I encourage you to read up on each and see where and how the code is inspected
    in other inspectors as well as in Chrome's **Developer tools**.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探索了随Google Chrome**开发者工具**消费者版本提供的基面板；许多这些工具也适用于其他检查器和其他开发者工具（本章前面也已涵盖）。我鼓励您阅读有关每个工具的内容，并看看在其他检查器以及在Chrome的**开发者工具**中代码是如何被检查的。
- en: In the next chapter, we'll get into JavaScript performance coding without any
    help.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将进入没有任何帮助的JavaScript性能编程。
